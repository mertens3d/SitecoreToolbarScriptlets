(self["webpackChunksitecoretoolbarscriptlets"] = self["webpackChunksitecoretoolbarscriptlets"] || []).push([[473],{

/***/ 6141:
/***/ ((__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {

"use strict";

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/DOMJacket/scripts/Document/DocumentJacket.js
var DocumentJacket = __webpack_require__(8456);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/DOMJacket/scripts/UrlJacket.js
var UrlJacket = __webpack_require__(7396);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/HindSiteScUiProxy.js + 75 modules
var HindSiteScUiProxy = __webpack_require__(3062);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Drones/RollingLogIdDrone/RollingLogIdDrone.js
var RollingLogIdDrone = __webpack_require__(7865);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/LoggerAgent/LoggerConsoleWriter.js
var LoggerConsoleWriter = __webpack_require__(341);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/LoggerAgent/LoggerStorageWriter.js
var LoggerStorageWriter = __webpack_require__(8405);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/RepositoryAgent/RepositoryAgent.js
var RepositoryAgent = __webpack_require__(4108);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/SettingsAgent/SettingsAgent.js + 6 modules
var SettingsAgent = __webpack_require__(1956);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/70 - TypeDiscriminator.js
var _70_TypeDiscriminator = __webpack_require__(8162);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/SingleClickEvent/SingleClickEvent_Observer.js
var SingleClickEvent_Observer = __webpack_require__(8423);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/SingleClickEvent/SingleClickEvent_Subject.js
var SingleClickEvent_Subject = __webpack_require__(6538);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/_HindSiteEvent/HindSiteEvent_Observer.js
var HindSiteEvent_Observer = __webpack_require__(2005);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/TaskListMutationEvent/TaskListMutationEvent_Observer.js


class TaskListMutationEvent_Observer extends HindSiteEvent_Observer/* _HindSiteEvent_Observer */.k {
    constructor(commonCore, callback) {
        super(commonCore, TaskListMutationEvent_Observer.name, callback);
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.TaskListMutationEvent_Observer */.g.TaskListMutationEvent_Observer;
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/_CommonCoreBase.js
var _CommonCoreBase = __webpack_require__(6679);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/TaskMutationType.js
var TaskMutationType = __webpack_require__(2573);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/SharedConst.js
var SharedConst = __webpack_require__(5077);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/CommandStartEndCancelEvent/CommandStartEndCancelEvent_Observer.js


class CommandStartEndCancelEvent_Observer extends HindSiteEvent_Observer/* _HindSiteEvent_Observer */.k {
    constructor(hindeCore, callback) {
        super(hindeCore, CommandStartEndCancelEvent_Observer.name, callback);
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.CommandStartEndCancelEvent_Observer */.g.CommandStartEndCancelEvent_Observer;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/CommandStartEndCancelEvent/CommandState_State.js
var CommandState_State;
(function (CommandState_State) {
    CommandState_State[CommandState_State["Unknwon"] = 0] = "Unknwon";
    CommandState_State[CommandState_State["CommandStarted"] = 1] = "CommandStarted";
    CommandState_State[CommandState_State["CommandCompletedSuccessfully"] = 2] = "CommandCompletedSuccessfully";
    CommandState_State[CommandState_State["CommandCompletedWithError"] = 3] = "CommandCompletedWithError";
    CommandState_State[CommandState_State["CommandCanceled"] = 4] = "CommandCanceled";
})(CommandState_State || (CommandState_State = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/ToastAgent/ToastAgent.js
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};









class ToastAgent extends _CommonCoreBase/* _CommonBase */.a {
    constructor(commonCore, targetDoc) {
        super(commonCore);
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.ToastAgent */.g.ToastAgent;
        this.classSlideUp = 'slide-up';
        this.classSlideDown = 'slide-down';
        this.HasBeenInit = false;
        this.waitingLightClassOn = 'waiting-on';
        this.waitingLightClassOff = 'waiting-off';
        this.mouseBlockerClassOff = 'mouse-blocker-off';
        this.mouseBlockerClassOn = 'mouse-blocker-on';
        this.TargetDoc = targetDoc;
        this.DivineElements();
    }
    WireEvents() {
        this.Logger.FuncStart(this.WireEvents.name);
        this.TaskMutationEvent_Observer = new TaskListMutationEvent_Observer(this.CommonCore, this.CallBackOnTaskListMutationEvent.bind(this));
        this.TaskMonitor.TaskMutationEvent_Subject.RegisterObserver(this.TaskMutationEvent_Observer);
        this.CommandTriggeredEvent_Observer = new CommandStartEndCancelEvent_Observer(this.CommonCore, this.OnCommandStartEndCancelEvent.bind(this));
        this.Logger.FuncEnd(this.WireEvents.name);
    }
    OnCommandStartEndCancelEvent(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.OnCommandStartEndCancelEvent.name);
            if (payload.CommandState == CommandState_State.CommandStarted) {
                this.ShowToastAsync('Starting to do something');
            }
            else if (payload.CommandState == CommandState_State.CommandCompletedSuccessfully) {
            }
            this.Logger.FuncEnd(this.OnCommandStartEndCancelEvent.name);
        });
    }
    ObserveRouter(commandRouter) {
        if (this.CommandTriggeredEvent_Observer && commandRouter) {
            commandRouter.CommandTriggeredEvent_Subject.RegisterObserver(this.CommandTriggeredEvent_Observer);
        }
    }
    CallBackOnTaskListMutationEvent(payload) {
        if (payload.MutationType === TaskMutationType/* TaskMutationType.TasksHaveGoneIdle */.T.TasksHaveGoneIdle) {
            this.HideToast('');
        }
        else {
            if (payload.MutationType === TaskMutationType/* TaskMutationType.TaskWaitingYes */.T.TaskWaitingYes) {
                this.TurnOnWaitingLight(true);
            }
            else {
                this.TurnOnWaitingLight(false);
            }
            this.SetSliderDivText(payload.CompletedCount + ':' + payload.TotalTaskCount);
        }
    }
    TurnOnWaitingLight(isOn) {
        if (isOn) {
            this.WaitingLight.classList.add(this.waitingLightClassOn);
            this.WaitingLight.classList.remove(this.waitingLightClassOff);
        }
        else {
            this.WaitingLight.classList.remove(this.waitingLightClassOn);
            this.WaitingLight.classList.add(this.waitingLightClassOff);
        }
    }
    HideToast(message) {
        return __awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.HideToast.name);
            this.TurnOnMouseBlocker(false);
            this.SetSliderDivText(message);
            this.LowerToastAsync();
            this.Logger.FuncEnd(this.HideToast.name);
        });
    }
    ShowToastAsync(message) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart(this.ShowToastAsync.name);
                this.SetSliderDivText(message);
                this.TurnOnMouseBlocker(true);
                this.TurnOnWaitingLight(false);
                this.RaiseToastAsync();
                this.Logger.FuncEnd(this.ShowToastAsync.name);
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.ShowToastAsync.name, err);
            }
        });
    }
    TurnOnMouseBlocker(isOn) {
        if (this.MouseBlocker) {
            if (isOn) {
                this.MouseBlocker.classList.add(this.mouseBlockerClassOn);
                this.MouseBlocker.classList.remove(this.mouseBlockerClassOff);
            }
            else {
                this.MouseBlocker.classList.add(this.mouseBlockerClassOff);
                this.MouseBlocker.classList.remove(this.mouseBlockerClassOn);
            }
        }
    }
    DivineElements() {
        this.Logger.FuncStart(this.DivineElements.name);
        if (!this.HasBeenInit) {
            this.BodyTag = this.TargetDoc.getElementsByTagName(SharedConst/* SharedConst.Const.KeyWords.Html.Tags.Body */.v.Const.KeyWords.Html.Tags.Body)[0];
            this.ToastContainer = this.CreateToastContainer(this.TargetDoc);
            this.CreateSliderDiv();
            this.CreateCancelButton();
            this.CreateMouseBlocker();
            this.FlagSlider.appendChild(this.CancelButtonElem);
            this.BodyTag.appendChild(this.ToastContainer);
        }
        this.HasBeenInit = true;
        this.Logger.FuncEnd(this.DivineElements.name);
    }
    RaiseToastAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                var self = this;
                setTimeout(function () {
                    return __awaiter(this, void 0, void 0, function* () {
                        self.ToastContainer.appendChild(self.FlagSlider);
                        self.FlagSlider.classList.remove(self.classSlideDown);
                        self.FlagSlider.classList.add(self.classSlideUp);
                    });
                }, 1000);
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.RaiseToastAsync.name, err);
            }
        });
    }
    LowerToastAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                var self = this;
                setTimeout(function () {
                    return __awaiter(this, void 0, void 0, function* () {
                        self.FlagSlider.classList.remove(self.classSlideUp);
                        self.FlagSlider.classList.add(self.classSlideDown);
                    });
                }, 1000);
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.LowerToastAsync.name, err);
            }
        });
    }
    SetSliderDivText(sliderDivText) {
        if (this.MessageDiv) {
            this.FlagTextDiv.innerHTML = sliderDivText;
        }
    }
    CancelCallback() {
        this.TaskMonitor.RequestCancel(ToastAgent.name + '.' + this.CancelCallback.name);
    }
    CallbackOnCloseButton() {
        this.HideToast('Closing');
    }
    CreateCloseButton() {
        let closeButtonElem = this.TargetDoc.createElement('input');
        closeButtonElem.type = "button";
        closeButtonElem.value = "X";
        closeButtonElem.classList.add("close-btn");
        closeButtonElem.addEventListener('click', (() => this.CallbackOnCloseButton()));
        return closeButtonElem;
    }
    CreateMouseBlocker() {
        this.MouseBlocker = this.TargetDoc.createElement('div');
        this.MouseBlocker.classList.add('mouse-blocker');
        this.MouseBlocker.classList.add('mouse-blocker-off');
        document.body.appendChild(this.MouseBlocker);
    }
    CreateCancelButton() {
        this.CancelButtonElem = this.TargetDoc.createElement('input');
        this.CancelButtonElem.type = "button";
        this.CancelButtonElem.value = "Cancel";
        this.OnButtonClick_Subject = new SingleClickEvent_Subject/* SingleClickEvent_Subject */.T(this.CommonCore);
        this.OnButtonClick_ObserverTest = new SingleClickEvent_Observer/* SingleClickEvent_Observer */.M(this.CommonCore, this.CancelCallback.bind(this));
        this.OnButtonClick_Subject.RegisterObserver(this.OnButtonClick_ObserverTest);
        this.CancelButtonElem.addEventListener('click', (() => {
            let payload = {
                HandlerData: null
            };
            this.OnButtonClick_Subject.NotifyObserversAsync(payload);
        }));
    }
    CreateSliderDiv() {
        this.FlagSlider = this.TargetDoc.createElement('div');
        this.FlagSlider.classList.add('slider');
        this.FlagSlider.classList.add(this.classSlideDown);
        this.WaitingLight = this.TargetDoc.createElement('div');
        this.WaitingLight.classList.add(this.waitingLightClassOff);
        this.WaitingLight.classList.add('waiting');
        let closeButton = this.CreateCloseButton();
        let headerElem = this.TargetDoc.createElement('div');
        headerElem.innerText = "HindSite";
        headerElem.classList.add("header");
        let headWrapper = this.TargetDoc.createElement('div');
        headWrapper.classList.add("header-wrapper");
        this.MessageDiv = this.TargetDoc.createElement('div');
        this.MessageDiv.innerText = "";
        this.MessageDiv.classList.add("message");
        this.FlagTextDiv = this.TargetDoc.createElement('div');
        headWrapper.appendChild(headerElem);
        headWrapper.appendChild(closeButton);
        this.FlagSlider.appendChild(headWrapper);
        this.FlagSlider.appendChild(this.WaitingLight);
        this.FlagSlider.appendChild(this.MessageDiv);
        this.FlagSlider.appendChild(this.FlagTextDiv);
    }
    CreateToastContainer(targetDoc) {
        let flagContainer = targetDoc.createElement('div');
        flagContainer.classList.add('toast');
        return flagContainer;
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/CoreFactory.js + 6 modules
var CoreFactory = __webpack_require__(2474);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/30 - SettingKey.js
var _30_SettingKey = __webpack_require__(8244);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/HindeCore.js
var HindeCore = __webpack_require__(1939);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultFriendly.js
var DefaultFriendly = __webpack_require__(2262);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultMetaData.js
var DefaultMetaData = __webpack_require__(3953);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfSnapshots.js
var DefaultStateOfSnapshots = __webpack_require__(9102);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/50 - scWindowType.js
var _50_scWindowType = __webpack_require__(7644);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SnapShotFlavor.js
var SnapShotFlavor = __webpack_require__(6189);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/InjectConst.js
var InjectConst = __webpack_require__(8856);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/_HindeCoreBase.js
var _HindeCoreBase = __webpack_require__(3263);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/ContentTop/scripts/Agents/ContentAtticAgent.js
var ContentAtticAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class ContentAtticAgent extends _HindeCoreBase/* _FrontBase */.c {
    constructor(repoAgent, hindeCore) {
        super(hindeCore);
        this.Logger.CTORStart(ContentAtticAgent.name);
        this.RepoAgent = repoAgent;
        this.Logger.CTOREnd(ContentAtticAgent.name);
    }
    InitContentAtticManager(settingAutoSnapshotRetainDays) {
        this.SettingAutoSnapshotRetainDays = settingAutoSnapshotRetainDays;
    }
    WriteStateOfSitecoreToStorage(stateOfSitecoreWindow) {
        return ContentAtticAgent_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentAtticAgent_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WriteStateOfSitecoreToStorage.name);
                let storageKey = InjectConst/* ContentConst.Const.Storage.WindowRoot */.y.Const.Storage.WindowRoot + InjectConst/* ContentConst.Const.Storage.SnapShotPrefix */.y.Const.Storage.SnapShotPrefix + stateOfSitecoreWindow.Meta.SessionId + '.' + stateOfSitecoreWindow.Meta.TimeStamp.valueOf();
                stateOfSitecoreWindow.Meta.StorageKey = storageKey;
                var snapShotAsString = JSON.stringify(stateOfSitecoreWindow);
                this.RepoAgent.WriteByKey(stateOfSitecoreWindow.Meta.StorageKey, snapShotAsString);
                this.CleanOutOldAutoSavedData();
                resolve();
                this.Logger.FuncEnd(this.WriteStateOfSitecoreToStorage.name);
            }));
        });
    }
    GetFromStorageBySnapShotId(needleId) {
        this.Logger.FuncStart(this.GetFromStorageBySnapShotId.name, needleId.Raw);
        var DateOneWinStoreMatch = null;
        let foundStorage = this.GetStateOfStorageSnapShots();
        for (var idx = 0; idx < foundStorage.SnapShots.length; idx++) {
            var candidate = foundStorage.SnapShots[idx];
            if (candidate.Meta.SnapshotId.Raw === needleId.Raw) {
                DateOneWinStoreMatch = candidate;
                break;
            }
        }
        if (!DateOneWinStoreMatch) {
            this.ErrorHand.WarningAndContinue(this.GetFromStorageBySnapShotId.name, 'No match found for: ' + needleId.Raw);
        }
        this.Logger.FuncEnd(this.GetFromStorageBySnapShotId.name);
        return DateOneWinStoreMatch;
    }
    ValidateStorageData(oneRaw) {
        var candidate = JSON.parse(oneRaw.data);
        if (candidate) {
            if (!candidate.Meta) {
                candidate.Meta = new DefaultMetaData/* DefaultMetaData */.S();
            }
            candidate.Meta.TimeStamp = new Date(candidate.Meta.TimeStamp);
            if (!candidate.Meta.WindowType) {
                candidate.Meta.WindowType = _50_scWindowType/* ScWindowType.Unknown */.D.Unknown;
                candidate.Friendly.WindowType = _50_scWindowType/* ScWindowType */.D[candidate.Meta.WindowType];
            }
            if (!candidate.Friendly) {
                candidate.Friendly = new DefaultFriendly/* DefaultFriendly */.S();
            }
            if (!candidate.Friendly.NickName) {
                candidate.Friendly.NickName = '';
            }
        }
        else {
            this.ErrorHand.HandleFatalError(this.ValidateStorageData.name, 'Saved data did not import correctly');
        }
        return candidate;
    }
    GetAllLocalStorageAsIOneStorageData() {
        let prefix = InjectConst/* ContentConst.Const.Storage.WindowRoot */.y.Const.Storage.WindowRoot + InjectConst/* ContentConst.Const.Storage.SnapShotPrefix */.y.Const.Storage.SnapShotPrefix;
        let result = this.RepoAgent.GetBulkLocalStorageByKeyPrefix(prefix);
        return result;
    }
    GetAllStorage() {
        var toReturn = [];
        let rawStorageData = this.GetAllLocalStorageAsIOneStorageData();
        if (rawStorageData) {
            for (var idx = 0; idx < rawStorageData.length; idx++) {
                toReturn.push(this.ValidateStorageData(rawStorageData[idx]));
            }
        }
        toReturn.sort((a, b) => +b.Meta.TimeStamp - +a.Meta.TimeStamp);
        toReturn = this.FilterOutOldData(toReturn);
        return toReturn;
    }
    CleanOneStorageItem(candidate, autoCount) {
        var maxAutoSaveDiff = this.SettingAutoSnapshotRetainDays * 24 * 60 * 60 * 1000;
        var deleteFlag = false;
        var now = new Date();
        if (candidate.Meta.Flavor == SnapShotFlavor/* SnapShotFlavor.Autosave */.n.Autosave) {
            if (autoCount > InjectConst/* ContentConst.Const.MaxAutoToSaveCount */.y.Const.MaxAutoToSaveCount) {
                this.Logger.LogVal('Delete (max count :' + InjectConst/* ContentConst.Const.MaxAutoToSaveCount */.y.Const.MaxAutoToSaveCount + ')', candidate.Meta.TimeStamp.toString());
                deleteFlag = true;
            }
            autoCount++;
        }
        if (now.getTime() - candidate.Meta.TimeStamp.getTime() > maxAutoSaveDiff) {
            this.Logger.LogVal('Delete (Old : max' + InjectConst/* ContentConst.Const.DefaultMaxAutoSaveAgeDays */.y.Const.DefaultMaxAutoSaveAgeDays + ' days)', candidate.Meta.TimeStamp.toString());
            deleteFlag = true;
        }
        if (deleteFlag) {
            try {
                this.Logger.LogVal('Cleaning old autosave', candidate.Meta.SnapshotId);
                window.localStorage.removeItem(candidate.Meta.StorageKey);
            }
            catch (e) {
                this.ErrorHand.HandleFatalError(this.CleanOutOldAutoSavedData.name, 'unable to delete key: ' + candidate.Meta.SnapshotId);
            }
        }
        return autoCount;
    }
    CleanFoundStorage(currentWindowStorage) {
        try {
            if (currentWindowStorage) {
                var cacheLength = currentWindowStorage.SnapShots.length;
                var autoCount = 0;
                for (var idx = 0; idx < cacheLength; idx++) {
                    var candidate = currentWindowStorage.SnapShots[idx];
                    autoCount = this.CleanOneStorageItem(candidate, autoCount);
                }
            }
        }
        catch (err) {
            this.ErrorHand.HandleFatalError(this.CleanFoundStorage.name, err);
        }
    }
    CleanOutOldAutoSavedData() {
        this.Logger.FuncStart(this.CleanOutOldAutoSavedData.name);
        try {
            if (!this.SettingAutoSnapshotRetainDays || this.SettingAutoSnapshotRetainDays < 1) {
                this.SettingAutoSnapshotRetainDays = InjectConst/* ContentConst.Const.DefaultMaxAutoSaveAgeDays */.y.Const.DefaultMaxAutoSaveAgeDays;
            }
            let currentWindowStorage = this.GetStateOfStorageSnapShots();
            this.CleanFoundStorage(currentWindowStorage);
        }
        catch (err) {
            throw (this.CleanOutOldAutoSavedData.name, err);
        }
        this.Logger.FuncEnd(this.CleanOutOldAutoSavedData.name);
    }
    GetStateOfStorageSnapShots() {
        this.Logger.FuncStart(this.GetStateOfStorageSnapShots.name);
        let stateOfSnapshotStorage = new DefaultStateOfSnapshots/* DefaultStateOfStorageSnapshots */.Z();
        let result = this.GetAllStorage();
        stateOfSnapshotStorage.SnapShots = result;
        stateOfSnapshotStorage.CreationDate = new Date();
        this.UpdateCounts(stateOfSnapshotStorage);
        this.Logger.FuncEnd(this.GetStateOfStorageSnapShots.name);
        return stateOfSnapshotStorage;
    }
    UpdateCounts(storageAllSnapshots) {
        storageAllSnapshots.FavoriteCount = 0;
        storageAllSnapshots.SnapShotsAutoCount = 0;
        storageAllSnapshots.PlainCount = 0;
        for (var idx = 0; idx < storageAllSnapshots.SnapShots.length; idx++) {
            var candidate = storageAllSnapshots.SnapShots[idx];
            if (candidate.Meta.Flavor === SnapShotFlavor/* SnapShotFlavor.Autosave */.n.Autosave) {
                storageAllSnapshots.SnapShotsAutoCount++;
            }
            else if (candidate.Meta.Flavor === SnapShotFlavor/* SnapShotFlavor.Favorite */.n.Favorite) {
                storageAllSnapshots.FavoriteCount++;
            }
            else {
                storageAllSnapshots.PlainCount++;
            }
        }
    }
    FilterOutOldData(data) {
        var toReturn = data;
        return toReturn;
    }
    RemoveAndConfirmRemoval(storageMatch) {
        this.Logger.LogVal('Key to Delete', storageMatch.Meta.SnapshotId);
        let storageKey = storageMatch.Meta.StorageKey;
        this.RepoAgent.RemoveByKey(storageKey);
        let result = this.RepoAgent.ReadDataOfKey(storageKey);
        if (result) {
            this.ErrorHand.HandleFatalError(this.RemoveAndConfirmRemoval.name, 'Snapshot still exists after deleting');
        }
    }
    RemoveSnapshotFromStorageById(targetId) {
        return ContentAtticAgent_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.RemoveSnapshotFromStorageById.name);
            try {
                if (targetId) {
                    var storageMatch = this.GetFromStorageBySnapShotId(targetId);
                    if (storageMatch) {
                        this.RemoveAndConfirmRemoval(storageMatch);
                    }
                    else {
                        this.ErrorHand.WarningAndContinue(this.RemoveSnapshotFromStorageById.name, 'no storage match');
                    }
                }
                else {
                    this.ErrorHand.WarningAndContinue(this.RemoveSnapshotFromStorageById.name, 'no target id');
                }
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.RemoveSnapshotFromStorageById.name, err);
            }
            this.Logger.FuncEnd(this.RemoveSnapshotFromStorageById.name);
        });
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/StaticHelpers.js
var StaticHelpers = __webpack_require__(1579);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/APICommand.js
var APICommand = __webpack_require__(2721);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/ContentTop/scripts/CommandSolicitors/_CommandSolicitorFor_.js

class _CommandSolicitorForEvent_ extends _HindeCoreBase/* _FrontBase */.c {
    constructor(hindCore, commandRouter, documentJacket) {
        super(hindCore);
        this.CommandRouter = commandRouter;
        this.DocumentJacket = documentJacket;
        this.Instantiate_base();
        this.Instantiate();
    }
    Instantiate_base() {
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/10 - MessageFlag.js
var _10_MessageFlag = __webpack_require__(8979);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/ContentTop/scripts/CommandSolicitors/CommandSolicitorForAutoSnapShot.js
var CommandSolicitorForAutoSnapShot_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class SolicitorForScheduledAutoSnapShot extends _CommandSolicitorForEvent_ {
    constructor(hindeCore, settingsAgent, atticAgent, scUiProxy, commandRouter, documentJacket) {
        super(hindeCore, commandRouter, documentJacket);
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.SolicitorForScheduledAutoSnapShot */.g.SolicitorForScheduledAutoSnapShot;
        this.AutoSaveHasBeenScheduled = false;
        this.LastKnownSavedState = null;
        this.SettingsAgent = settingsAgent;
        this.AtticAgent = atticAgent;
        this.ScUiProxy = scUiProxy;
        this.CommandRouter = commandRouter;
    }
    ExecuteTest() {
        return CommandSolicitorForAutoSnapShot_awaiter(this, void 0, void 0, function* () {
        });
    }
    Instantiate() {
    }
    AutoSaveSnapShot() {
        return CommandSolicitorForAutoSnapShot_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.AutoSaveSnapShot.name);
            let windowStatePrior = this.LastKnownSavedState;
            let payload = {
                DataOneWindowStorage: null,
                APICommand: APICommand/* APICommandFlag.Unknown */.v.Unknown,
                SnapShotFlavor: SnapShotFlavor/* SnapShotFlavor.Autosave */.n.Autosave,
                SnapShotOfStateScUiApi: null,
            };
            let setStateFromX = {
                ReqMsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.GetStateOfWindow */.r.GetStateOfWindow,
                ReqMsgFlagFriendly: _10_MessageFlag/* ReqCommandMsgFlag */.r[_10_MessageFlag/* ReqCommandMsgFlag.GetStateOfWindow */.r.GetStateOfWindow],
                NewNickName: null,
                SelectSnapShotId: null,
                SelectText: null,
                StateSnapShot: null,
            };
            this.CommandRouter.RouteCommand(setStateFromX)
                .then((commandRouterResult) => {
                let returnPayload = commandRouterResult.ScUiReturnPayload;
                let hasCorrectData = returnPayload && returnPayload.StateOfScUi && returnPayload.StateOfScUi.Meta && returnPayload.StateOfScUi.Meta.Hash
                    && windowStatePrior && windowStatePrior.Meta && windowStatePrior.Meta.Hash;
                if (!hasCorrectData || (returnPayload.StateOfScUi.Meta.Hash !== windowStatePrior.Meta.Hash)) {
                    this.Logger.Log('states are different, save snap shot');
                    this.AtticAgent.WriteStateOfSitecoreToStorage(returnPayload.StateOfScUi);
                }
                else {
                    this.Logger.Log('states are same, no save');
                }
                this.LastKnownSavedState = returnPayload.StateOfScUi;
            })
                .catch((err) => this.ErrorHand.HandleFatalError(this.AutoSaveSnapShot.name, err));
            this.Logger.FuncEnd(this.AutoSaveSnapShot.name);
        });
    }
    ScheduleIntervalTasks() {
        this.Logger.FuncStart(this.ScheduleIntervalTasks.name);
        this.Logger.LogVal('Has been scheduled: ', this.AutoSaveHasBeenScheduled);
        let autoSaveSetting = this.SettingsAgent.HindSiteSettingsBucket.GetByKey(_30_SettingKey/* SettingKey.AutoSaveIntervalMin */.n.AutoSaveIntervalMin);
        this.Logger.LogVal('autoSaveSetting: ', autoSaveSetting.HindSiteSetting.ValueAsInt());
        if (autoSaveSetting.HindSiteSetting.ValueAsInt() > 0) {
            if (!this.AutoSaveHasBeenScheduled) {
                var self = this;
                var intervalMs = StaticHelpers/* StaticHelpers.MinToMs */.y.MinToMs(autoSaveSetting.HindSiteSetting.ValueAsInt());
                window.setInterval(() => {
                    self.AutoSaveSnapShot();
                }, intervalMs / SharedConst/* SharedConst.Const.Debug.SpeedUpAutoSaveIntervalFactor */.v.Const.Debug.SpeedUpAutoSaveIntervalFactor);
                this.AutoSaveHasBeenScheduled = true;
            }
        }
        this.Logger.FuncEnd(this.ScheduleIntervalTasks.name);
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/QueryStrKey.js
var QueryStrKey = __webpack_require__(474);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/Guid.js
var Guid = __webpack_require__(3473);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/ContentTop/scripts/CommandSolicitors/CommandSolicitorForQueryString.js
var CommandSolicitorForQueryString_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






class CommandSolicitorForEventRestoreMostRecent extends _CommandSolicitorForEvent_ {
    constructor(hindCore, commandRouter, documentJacket, settingsAgent, atticAgent) {
        super(hindCore, commandRouter, documentJacket);
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.CommandSolicitorForEventRestoreMostRecent */.g.CommandSolicitorForEventRestoreMostRecent;
        this.SettingsAgent = settingsAgent;
        this.AtticAgent = atticAgent;
    }
    ExecuteTest() {
        return CommandSolicitorForQueryString_awaiter(this, void 0, void 0, function* () {
            throw new Error('Method not implemented.');
        });
    }
    Instantiate() {
    }
    StartUp() {
    }
}
class CommandSolicitorForEventQueryString extends _CommandSolicitorForEvent_ {
    constructor(hindCore, commandRouter, documentJacket, settingsAgent, atticAgent) {
        super(hindCore, commandRouter, documentJacket);
        this.SettingsAgent = settingsAgent;
        this.AtticAgent = atticAgent;
    }
    Instantiate() {
    }
    StartUp() {
        let RouterParams = {
            ReqMsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.SetStateFromQueryString */.r.SetStateFromQueryString,
            ReqMsgFlagFriendly: _10_MessageFlag/* ReqCommandMsgFlag */.r[_10_MessageFlag/* ReqCommandMsgFlag.SetStateFromQueryString */.r.SetStateFromQueryString],
            NewNickName: null,
            SelectSnapShotId: null,
            SelectText: null,
            StateSnapShot: null,
        };
        if (this.DocumentJacket.UrlJacket.QueryStringHasKey(QueryStrKey/* QueryStrKey.hsTargetSs */.a.hsTargetSs)) {
            RouterParams.ReqMsgFlag = _10_MessageFlag/* ReqCommandMsgFlag.SetStateFromQueryString */.r.SetStateFromQueryString,
                this.CommandRouter.RouteCommand(RouterParams);
        }
        else if ((this.SettingsAgent.GetByKey(_30_SettingKey/* SettingKey.AutoRestoreState */.n.AutoRestoreState)).ValueAsBool()) {
            this.HindeCore.Logger.Log('yup...has the setting');
            RouterParams.ReqMsgFlag = _10_MessageFlag/* ReqCommandMsgFlag.SetStateFromMostRecent */.r.SetStateFromMostRecent;
            RouterParams.ReqMsgFlagFriendly = _10_MessageFlag/* ReqCommandMsgFlag */.r[_10_MessageFlag/* ReqCommandMsgFlag.SetStateFromMostRecent */.r.SetStateFromMostRecent];
            this.CommandRouter.RouteCommand(RouterParams);
        }
    }
    InitFromQueryString() {
        return CommandSolicitorForQueryString_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => CommandSolicitorForQueryString_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.InitFromQueryString.name);
                if (this.DocumentJacket.UrlJacket.QueryStringHasKey(QueryStrKey/* QueryStrKey.hsTargetSs */.a.hsTargetSs)) {
                    let qsValue = (this.DocumentJacket.UrlJacket.GetQueryStringValueByKey(QueryStrKey/* QueryStrKey.hsTargetSs */.a.hsTargetSs));
                    if (Guid/* Guid.IsValidGuidStr */.i.IsValidGuidStr(qsValue)) {
                        let targetGuid = Guid/* Guid.ParseGuid */.i.ParseGuid(qsValue, false);
                        if (targetGuid && targetGuid !== Guid/* Guid.GetEmptyGuid */.i.GetEmptyGuid()) {
                            this.Logger.LogVal("targetGuid", targetGuid.Raw);
                            var dataOneWindowStorage;
                            dataOneWindowStorage = this.AtticAgent.GetFromStorageBySnapShotId(targetGuid);
                            let routingParams = {
                                ReqMsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqSetStateOfSitecoreSameWindow */.r.ReqSetStateOfSitecoreSameWindow,
                                ReqMsgFlagFriendly: _10_MessageFlag/* ReqCommandMsgFlag */.r[_10_MessageFlag/* ReqCommandMsgFlag.ReqSetStateOfSitecoreSameWindow */.r.ReqSetStateOfSitecoreSameWindow],
                                NewNickName: '',
                                SelectSnapShotId: targetGuid,
                                SelectText: '',
                                StateSnapShot: dataOneWindowStorage
                            };
                            this.CommandRouter.RouteCommand(routingParams);
                        }
                        else {
                            reject('Either no snapshot provided or an illegal one was found');
                        }
                    }
                    else {
                        this.Logger.Log('guid is not a valid guid');
                    }
                }
                else {
                    this.Logger.Log('Does not have qs target');
                    resolve();
                }
                this.Logger.FuncEnd(this.InitFromQueryString.name);
            }));
        });
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/DeepHotKey/DeepHotKeyAgent.js + 5 modules
var DeepHotKeyAgent = __webpack_require__(8443);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/HotKeyEvent/HotKeyEvent_Observer.js

class HotKeyEvent_Observer extends HindSiteEvent_Observer/* _HindSiteEvent_Observer */.k {
    constructor(commonCore, callback) {
        super(commonCore, HotKeyEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/ContentTop/scripts/CommandSolicitors/CommandSolicitorHotKeys.js




class CommandSolicitorForHotKeys extends _CommandSolicitorForEvent_ {
    Instantiate() {
        this.DeepHotKeyAgent = new DeepHotKeyAgent/* DeepHotKeyAgent */.$(this.HindeCore, this.DocumentJacket.UrlJacket);
        this.HotKeyEvent_Observer = new HotKeyEvent_Observer(this.CommonCore, this.CallBackOnHotKeyEvent.bind(this));
        this.DeepHotKeyAgent.HotKeyEvent_Subject.RegisterObserver(this.HotKeyEvent_Observer);
    }
    CallBackOnHotKeyEvent(hotKeyEvent_Payload) {
        this.Logger.LogImportant('received : ' + _10_MessageFlag/* ReqCommandMsgFlag */.r[hotKeyEvent_Payload.ReqCommandMsgFlag]);
        let commandParams = {
            ReqMsgFlag: hotKeyEvent_Payload.ReqCommandMsgFlag,
            ReqMsgFlagFriendly: _10_MessageFlag/* ReqCommandMsgFlag */.r[hotKeyEvent_Payload.ReqCommandMsgFlag],
            NewNickName: null,
            SelectSnapShotId: null,
            SelectText: hotKeyEvent_Payload.SelectText,
            StateSnapShot: null,
        };
        if (this.CommandRouter) {
            this.CommandRouter.RouteCommand(commandParams);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/ContentTop/scripts/Managers/ContentMessageManager.js

class ContentMessageManager extends _HindeCoreBase/* _FrontBase */.c {
    constructor(hindeCore, contentMessageBroker) {
        super(hindeCore);
        this.Logger.CTORStart(ContentMessageManager.name);
        this.ContentMessageBroker = contentMessageBroker;
        this.Logger.CTOREnd(ContentMessageManager.name);
    }
    InitContentMessageManager() {
        this.Logger.FuncStart([ContentMessageManager.name, this.InitContentMessageManager.name]);
        this.ContentMessageBroker.BeginListening();
        this.Logger.FuncEnd([ContentMessageManager.name, this.InitContentMessageManager.name]);
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/DefaultMsgContentToController.js + 1 modules
var DefaultMsgContentToController = __webpack_require__(6680);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/ReplyCommandMsgFlag.js
var ReplyCommandMsgFlag = __webpack_require__(8501);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/ContentTop/scripts/Proxies/BrowserMessageBroker_Content.js
var BrowserMessageBroker_Content_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class BrowserMessageBroker_Content extends _HindeCoreBase/* _FrontBase */.c {
    constructor(hindeCore, settingsAgent, apiManager, atticMan, contentBrowserProxy, autoSnapShotAgent, commandRouter) {
        super(hindeCore);
        this.Logger.CTORStart(BrowserMessageBroker_Content.name);
        this.SettingsAgent = settingsAgent;
        this.HindSiteScUiProxy = apiManager;
        this.AtticAgent = atticMan;
        this.ContentBrowserProxy = contentBrowserProxy;
        this.AutoSnapShotAgent = autoSnapShotAgent;
        this.CommandRouter = commandRouter;
        this.Instantiate();
        this.Logger.CTOREnd(BrowserMessageBroker_Content.name);
    }
    Instantiate() {
    }
    BeginListening() {
        this.Logger.FuncStart(this.BeginListening.name);
        this.WireEvents();
        this.Logger.Log('Listening for messages');
        this.Logger.FuncEnd(this.BeginListening.name);
    }
    WireEvents() {
        if (this.ContentBrowserProxy) {
            this.ContentBrowserProxy.AddListenerForPopUp((request) => this.ContentReceiveRequest(request));
        }
    }
    ValidateRequest(messageFromController) {
        this.Logger.FuncStart(this.ValidateRequest.name);
        var isValid = true;
        if (messageFromController) {
            if (messageFromController.CurrentContentPrefs) {
            }
            else {
                this.ErrorHand.WarningAndContinue(this.ValidateRequest.name, 'No CurrentContentPrefs');
                messageFromController.IsValid = false;
                isValid = false;
            }
        }
        else {
            this.ErrorHand.WarningAndContinue(this.ValidateRequest.name, 'messageFromController is null');
            isValid = false;
        }
        messageFromController.IsValid = isValid;
        this.Logger.FuncEnd(this.ValidateRequest.name, isValid.toString());
        return messageFromController;
    }
    NotifyFail(failrReason) {
        this.ErrorHand.ErrorAndContinue(this.NotifyFail.name, 'Fail ' + failrReason);
    }
    ContentReceiveRequest(messageControllerToContent) {
        return BrowserMessageBroker_Content_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => BrowserMessageBroker_Content_awaiter(this, void 0, void 0, function* () {
                try {
                    this.Logger.Log('');
                    this.Logger.Log('');
                    this.Logger.Log('');
                    this.Logger.FuncStart(this.ContentReceiveRequest.name, StaticHelpers/* StaticHelpers.MsgFlagAsString */.y.MsgFlagAsString(messageControllerToContent.MsgFlag));
                    this.Logger.LogVal('ce butt', this.SettingsAgent.GetByKey(_30_SettingKey/* SettingKey.AutoLogin */.n.AutoLogin).ValueAsBool());
                    if (messageControllerToContent) {
                        messageControllerToContent = this.ValidateRequest(messageControllerToContent);
                        if (messageControllerToContent.IsValid) {
                            this.SettingsAgent.UpdateSettingsFromPopUpMsg(messageControllerToContent.CurrentContentPrefs);
                            yield this.ReqMsgRouter(messageControllerToContent)
                                .then((msgContentToController) => {
                                this.Logger.Log('responding: ' + ReplyCommandMsgFlag/* ReplyCommandMsgFlag */.o[msgContentToController.MsgFlagReply]);
                                resolve(msgContentToController);
                            })
                                .catch((err) => {
                                this.NotifyFail(err);
                                resolve(new DefaultMsgContentToController/* DefaultMsgContentToController */.r(ReplyCommandMsgFlag/* ReplyCommandMsgFlag.RespTaskFailed */.o.RespTaskFailed));
                            });
                        }
                        else {
                            resolve(new DefaultMsgContentToController/* DefaultMsgContentToController */.r(ReplyCommandMsgFlag/* ReplyCommandMsgFlag.RespFailedDidNotValidate */.o.RespFailedDidNotValidate));
                        }
                    }
                    else {
                        reject('no request');
                    }
                    this.Logger.FuncEnd(this.ContentReceiveRequest.name, StaticHelpers/* StaticHelpers.MsgFlagAsString */.y.MsgFlagAsString(messageControllerToContent.MsgFlag));
                    this.Logger.Log('');
                    this.Logger.Log('');
                    this.Logger.Log('');
                    this.Logger.Log('Resuming Standby');
                    this.Logger.Log('');
                    this.Logger.Log('');
                    this.Logger.Log('');
                }
                catch (err) {
                    this.ErrorHand.HandleTopLevelTryCatch([BrowserMessageBroker_Content.name, this.ContentReceiveRequest.name], err);
                }
            }));
        });
    }
    ReqMsgRouter(messageFromController) {
        return BrowserMessageBroker_Content_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => BrowserMessageBroker_Content_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.ReqMsgRouter.name, StaticHelpers/* StaticHelpers.MsgFlagAsString */.y.MsgFlagAsString(messageFromController.MsgFlag));
                let commandRouterParams = {
                    ReqMsgFlag: messageFromController.MsgFlag,
                    ReqMsgFlagFriendly: _10_MessageFlag/* ReqCommandMsgFlag */.r[messageFromController.MsgFlag],
                    NewNickName: messageFromController.StateOfPopUI.NewNickName,
                    SelectSnapShotId: messageFromController.StateOfPopUI.SelectSnapShotId,
                    SelectText: '',
                    StateSnapShot: null
                };
                yield this.CommandRouter.RouteCommand(commandRouterParams)
                    .then(() => this.ConstructResponse(messageFromController.MsgFlag))
                    .then((response) => {
                    resolve(response);
                })
                    .catch((err) => reject(this.ErrorHand.FormatRejectMessage([BrowserMessageBroker_Content.name, this.ReqMsgRouter.name], err)));
                this.Logger.FuncEnd(this.ReqMsgRouter.name);
            }));
        });
    }
    ConstructResponse(msgFlag) {
        return BrowserMessageBroker_Content_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => BrowserMessageBroker_Content_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.ConstructResponse.name);
                let responseContentToController = new DefaultMsgContentToController/* DefaultMsgContentToController */.r(ReplyCommandMsgFlag/* ReplyCommandMsgFlag.Unknown */.o.Unknown);
                let payload = {
                    DataOneWindowStorage: null,
                    APICommand: APICommand/* APICommandFlag.GetStateOfScUiProxy */.v.GetStateOfScUiProxy,
                    SnapShotFlavor: SnapShotFlavor/* SnapShotFlavor.Live */.n.Live,
                    SnapShotOfStateScUiApi: null
                };
                yield this.HindSiteScUiProxy.APICommand(payload)
                    .then((returnPayload) => {
                    responseContentToController.Payload.StateOfScUiProxy_Live = returnPayload.StateOfScUi;
                    responseContentToController.Payload.LastReq = msgFlag;
                    responseContentToController.MsgFlagReply = ReplyCommandMsgFlag/* ReplyCommandMsgFlag.RespTaskSuccessful */.o.RespTaskSuccessful;
                    responseContentToController.Payload.LastReqFriendly = _10_MessageFlag/* ReqCommandMsgFlag */.r[msgFlag];
                    responseContentToController.Payload.ErrorStack = ['todo'];
                })
                    .then(() => this.AtticAgent.GetStateOfStorageSnapShots())
                    .then((stateOfStorageSnapShots) => responseContentToController.Payload.StateOfStorageSnapShots = stateOfStorageSnapShots)
                    .then(() => resolve(responseContentToController))
                    .catch((err) => reject(err));
                this.Logger.FuncEnd(this.ConstructResponse.name);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/CommandHandlerDataForContent/CommandPayloadForInternal.js


class DefaultCommandData {
    constructor() {
        this.NewNickname = '';
        this.TargetSnapShotId = null;
        this.ContentMessageBroker = null;
        this.hindeCore = null;
        this.TargetDoc = null;
        this.TargetNickName = '';
        this.TopLevelDoc = null;
        this.ToAPIPayload = {
            DataOneWindowStorage: null,
            APICommand: APICommand/* APICommandFlag.Unknown */.v.Unknown,
            SnapShotFlavor: SnapShotFlavor/* SnapShotFlavor.Unknown */.n.Unknown,
            SnapShotOfStateScUiApi: null,
        };
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/CommandType.js
var CommandType = __webpack_require__(5041);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/InternalCommand.js
var InternalCommandFlag;
(function (InternalCommandFlag) {
    InternalCommandFlag[InternalCommandFlag["Unknown"] = 0] = "Unknown";
    InternalCommandFlag[InternalCommandFlag["Ping"] = 1] = "Ping";
    InternalCommandFlag[InternalCommandFlag["SetNickName"] = 2] = "SetNickName";
    InternalCommandFlag[InternalCommandFlag["ToggleFavorite"] = 3] = "ToggleFavorite";
    InternalCommandFlag[InternalCommandFlag["SaveWindowState"] = 4] = "SaveWindowState";
    InternalCommandFlag[InternalCommandFlag["DebugForceAutoSnapShot"] = 5] = "DebugForceAutoSnapShot";
    InternalCommandFlag[InternalCommandFlag["RemoveSnapShot"] = 6] = "RemoveSnapShot";
    InternalCommandFlag[InternalCommandFlag["SetStateFromQueryString"] = 7] = "SetStateFromQueryString";
    InternalCommandFlag[InternalCommandFlag["SetStateFromMostRecent"] = 8] = "SetStateFromMostRecent";
    InternalCommandFlag[InternalCommandFlag["ThrowFatalError"] = 9] = "ThrowFatalError";
})(InternalCommandFlag || (InternalCommandFlag = {}));

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/_HindSiteEvent/HindeSiteEvent_Subject.js
var HindeSiteEvent_Subject = __webpack_require__(4697);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/CommandStartEndCancelEvent/CommandStartEndCancelEvent_Subject.js


class CommandStartEndCancelEvent_Subject extends HindeSiteEvent_Subject/* _HindeSiteEvent_Subject */.C {
    constructor() {
        super(...arguments);
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.CommandStartEndCancelEvent_Subject */.g.CommandStartEndCancelEvent_Subject;
        this.ShowLogActions = true;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/ContentTop/scripts/Proxies/APICommandMappingB.js


class CommandMappingMsgFlagToInternalFlag {
}
CommandMappingMsgFlagToInternalFlag.AllMapping = [
    {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqUpdateNickName */.r.ReqUpdateNickName,
        InternalCommand: InternalCommandFlag.SetNickName,
    },
    {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.Ping */.r.Ping,
        InternalCommand: InternalCommandFlag.Ping,
    },
    {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqToggleFavorite */.r.ReqToggleFavorite,
        InternalCommand: InternalCommandFlag.ToggleFavorite,
    },
    {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqDebugContentFatalError */.r.ReqDebugContentFatalError,
        InternalCommand: InternalCommandFlag.ThrowFatalError,
    },
    {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.SetStateFromQueryString */.r.SetStateFromQueryString,
        InternalCommand: InternalCommandFlag.SetStateFromQueryString,
    },
    {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.SetStateFromMostRecent */.r.SetStateFromMostRecent,
        InternalCommand: InternalCommandFlag.SetStateFromMostRecent,
    },
    {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqTakeAndSaveSnapShot */.r.ReqTakeAndSaveSnapShot,
        InternalCommand: InternalCommandFlag.SaveWindowState,
    },
    {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqRemoveFromStorage */.r.ReqRemoveFromStorage,
        InternalCommand: InternalCommandFlag.RemoveSnapShot,
    },
    {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqDebugAutoSnapShot */.r.ReqDebugAutoSnapShot,
        InternalCommand: InternalCommandFlag.DebugForceAutoSnapShot,
    }
];

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/ContentTop/scripts/Proxies/CommandMapping.js


class MappingMsgFlagToAPIFlag {
}
MappingMsgFlagToAPIFlag.AllMapping = [
    {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqAddCETab */.r.ReqAddCETab,
        APICommand: APICommand/* APICommandFlag.AddContentEditorToDesktopAsync */.v.AddContentEditorToDesktopAsync
    },
    {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqAddCETab */.r.ReqAddCETab,
        APICommand: APICommand/* APICommandFlag.AddContentEditorToDesktopAsync */.v.AddContentEditorToDesktopAsync,
    },
    {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.GetStateOfWindow */.r.GetStateOfWindow,
        APICommand: APICommand/* APICommandFlag.GetStateOfScUiProxy */.v.GetStateOfScUiProxy,
    },
    {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqAdminB */.r.ReqAdminB,
        APICommand: APICommand/* APICommandFlag.AdminB */.v.AdminB,
    },
    {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqOpenCE */.r.ReqOpenCE,
        APICommand: APICommand/* APICommandFlag.OpenContentEditor */.v.OpenContentEditor,
    }, {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqToggleRawValues */.r.ReqToggleRawValues,
        APICommand: APICommand/* APICommandFlag.ToggleRawValues */.v.ToggleRawValues,
    },
    {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.OpenCERibbonPresentationDetails */.r.OpenCERibbonPresentationDetails,
        APICommand: APICommand/* APICommandFlag.PresentationDetails */.v.PresentationDetails,
    }, {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.OpenCERibbonNavigateLinks */.r.OpenCERibbonNavigateLinks,
        APICommand: APICommand/* APICommandFlag.NavigateLinks */.v.NavigateLinks,
    },
    {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqNavigateBack */.r.ReqNavigateBack,
        APICommand: APICommand/* APICommandFlag.NavigateBack */.v.NavigateBack,
    },
    {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqNavigateForward */.r.ReqNavigateForward,
        APICommand: APICommand/* APICommandFlag.NavigateForward */.v.NavigateForward,
    },
    {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqNavigateUp */.r.ReqNavigateUp,
        APICommand: APICommand/* APICommandFlag.NavigateUp */.v.NavigateUp,
    },
    {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqQuickPublish */.r.ReqQuickPublish,
        APICommand: APICommand/* APICommandFlag.PublischActiveCE */.v.PublischActiveCE,
    },
    {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqGoToSelected */.r.ReqGoToSelected,
        APICommand: APICommand/* APICommandFlag.CEGoSelected */.v.CEGoSelected,
    },
    {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqSetStateOfSitecoreSameWindow */.r.ReqSetStateOfSitecoreSameWindow,
        APICommand: APICommand/* APICommandFlag.SetStateOfSitecoreWindowAsync */.v.SetStateOfSitecoreWindowAsync,
    },
    {
        MsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqToggleCompactCss */.r.ReqToggleCompactCss,
        APICommand: APICommand/* APICommandFlag.ToggleCompactCss */.v.ToggleCompactCss,
    },
];

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/ContentTop/scripts/Recipes/_ContentRecipeBase.js


class _ContentRecipeBase extends _HindeCoreBase/* _FrontBase */.c {
    constructor(hindeCore, commandParams, dependancies, friendly) {
        super(hindeCore);
        if (!StaticHelpers/* StaticHelpers.IsNullOrUndefined */.y.IsNullOrUndefined(commandParams)) {
            this.Friendly = friendly;
            this.CommandParams = commandParams;
            this.Dependancies = dependancies;
        }
        else {
            this.ErrorHand.HandleFatalError(_ContentRecipeBase.name, 'null check: ' + this.Friendly);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/ContentTop/scripts/Recipes/RecipeChangeNickName.js
var RecipeChangeNickName_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class RecipeChangeNickName extends _ContentRecipeBase {
    constructor(hindeCore, commandParams, dependancies) {
        super(hindeCore, commandParams, dependancies, RecipeChangeNickName.name);
        if (StaticHelpers/* StaticHelpers.IsNullOrUndefined */.y.IsNullOrUndefined([this.CommandParams.NewNickname, this.CommandParams.TargetSnapShotId, this.Dependancies.AtticAgent])) {
            this.ErrorHand.HandleFatalError(RecipeChangeNickName.name, 'Null check');
        }
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeChangeNickName_awaiter(this, void 0, void 0, function* () {
            this.UpdateNickname()
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    UpdateNickname() {
        return new Promise((resolve, reject) => RecipeChangeNickName_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.UpdateNickname.name);
            if (this.CommandParams.TargetSnapShotId) {
                if (this.CommandParams.NewNickname) {
                    var storageMatch;
                    storageMatch = this.Dependancies.AtticAgent.GetFromStorageBySnapShotId(this.CommandParams.TargetSnapShotId);
                    if (storageMatch) {
                        if ((storageMatch.Meta.Flavor === SnapShotFlavor/* SnapShotFlavor.Autosave */.n.Autosave
                            ||
                                (storageMatch.Meta.Flavor === SnapShotFlavor/* SnapShotFlavor.Unknown */.n.Unknown))) {
                            storageMatch.Meta.Flavor = SnapShotFlavor/* SnapShotFlavor.Manual */.n.Manual;
                        }
                        storageMatch.Friendly.NickName = this.CommandParams.NewNickname;
                    }
                    else {
                        reject(this.UpdateNickname.name + ' - No storage match');
                    }
                    this.Dependancies.AtticAgent.WriteStateOfSitecoreToStorage(storageMatch);
                    resolve();
                }
                else {
                    reject(this.UpdateNickname.name + ' - something was missing');
                }
            }
            else {
                reject(this.UpdateNickname.name + ' no payload or id');
            }
            this.Logger.FuncEnd(this.UpdateNickname.name);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/ContentTop/scripts/Recipes/RecipeRemoveItemFromStorage.js
var RecipeRemoveItemFromStorage_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class RecipeRemoveItemFromStorage extends _ContentRecipeBase {
    constructor(hindeCore, commandData, dependancies) {
        super(hindeCore, commandData, dependancies, RecipeRemoveItemFromStorage.name);
    }
    Execute() {
        return RecipeRemoveItemFromStorage_awaiter(this, void 0, void 0, function* () {
            try {
                this.Dependancies.AtticAgent.RemoveSnapshotFromStorageById(this.CommandParams.TargetSnapShotId);
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.Execute.name, err);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/ContentTop/scripts/Recipes/RecipeToggleFavorite.js
var RecipeToggleFavorite_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class RecipeToggleFavorite extends _ContentRecipeBase {
    constructor(hindeCore, commandData, dependancies) {
        super(hindeCore, commandData, dependancies, RecipeToggleFavorite.name);
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeToggleFavorite_awaiter(this, void 0, void 0, function* () {
            if (this.CommandParams.TargetSnapShotId) {
                let result = this.Dependancies.AtticAgent.GetFromStorageBySnapShotId(this.CommandParams.TargetSnapShotId);
                if (result.Meta.Flavor === SnapShotFlavor/* SnapShotFlavor.Favorite */.n.Favorite) {
                    result.Meta.Flavor = SnapShotFlavor/* SnapShotFlavor.Manual */.n.Manual;
                }
                else {
                    result.Meta.Flavor = SnapShotFlavor/* SnapShotFlavor.Favorite */.n.Favorite;
                }
                this.Dependancies.AtticAgent.WriteStateOfSitecoreToStorage(result);
                resolve();
            }
            else {
                reject('no targetId');
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/ContentTop/scripts/Proxies/CommandRunnerInternal.js
var CommandRunnerInternal_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class CommandRunnerInternal extends _HindeCoreBase/* _FrontBase */.c {
    constructor(hindeCore, atticAgent, solicitorForAutoSnapShot, documentJacket, commandRouter, solicitors) {
        super(hindeCore);
        this.CommandRouter = commandRouter;
        this.Solicitors = solicitors;
        this.AtticAgent = atticAgent;
        this.Dependancies = {
            AtticAgent: atticAgent,
            SolicitorForAutoSnapShot: solicitorForAutoSnapShot,
            HindeCore: this.HindeCore,
            DocumentJacket: documentJacket
        };
    }
    HandleInternalCommand(commandData) {
        return new Promise((resolve, reject) => CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.HandleInternalCommand.name);
            try {
                if (commandData) {
                    switch (commandData.InternalCommandFlag) {
                        case InternalCommandFlag.DebugForceAutoSnapShot:
                            this.DebugForceAutoSnapShot(commandData)
                                .then((internalCommandResults) => resolve(internalCommandResults))
                                .catch((err) => this.ErrorHand.FormatRejectMessage([CommandRunnerInternal.name, this.HandleInternalCommand.name], err));
                            break;
                        case InternalCommandFlag.Ping:
                            this.Ping(commandData)
                                .then((internalCommandResults) => resolve(internalCommandResults))
                                .catch((err) => this.ErrorHand.FormatRejectMessage([CommandRunnerInternal.name, this.HandleInternalCommand.name], err));
                            break;
                        case InternalCommandFlag.RemoveSnapShot:
                            this.RemoveSnapShot(commandData)
                                .then((internalCommandResults) => resolve(internalCommandResults))
                                .catch((err) => this.ErrorHand.FormatRejectMessage([CommandRunnerInternal.name, this.HandleInternalCommand.name], err));
                            break;
                        case InternalCommandFlag.SaveWindowState:
                            this.SaveWindowState(commandData)
                                .then((internalCommandResults) => resolve(internalCommandResults))
                                .catch((err) => this.ErrorHand.FormatRejectMessage([CommandRunnerInternal.name, this.HandleInternalCommand.name], err));
                            break;
                        case InternalCommandFlag.SetNickName:
                            this.SetNickName(commandData)
                                .then((internalCommandResults) => resolve(internalCommandResults))
                                .catch((err) => this.ErrorHand.FormatRejectMessage([CommandRunnerInternal.name, this.HandleInternalCommand.name], err));
                            break;
                        case InternalCommandFlag.ThrowFatalError:
                            throw ('error throw test');
                        case InternalCommandFlag.ToggleFavorite:
                            this.ToggleFavorite(commandData)
                                .then((internalCommandResults) => resolve(internalCommandResults))
                                .catch((err) => this.ErrorHand.FormatRejectMessage([CommandRunnerInternal.name, this.HandleInternalCommand.name], err));
                            break;
                        default:
                            reject(this.ErrorHand.FormatRejectMessage([CommandRunnerInternal.name, this.HandleInternalCommand.name], 'unhandled Internal command flag: ' + InternalCommandFlag[commandData.InternalCommandFlag]));
                            break;
                    }
                }
                else {
                    reject(this.HandleInternalCommand.name + ' | no functionToExecute');
                }
            }
            catch (err) {
                reject(err);
            }
            this.Logger.FuncEnd(this.HandleInternalCommand.name);
        }));
    }
    SetNickName(commandParams) {
        return CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
                let recipe = new RecipeChangeNickName(this.HindeCore, commandParams, this.Dependancies);
                recipe.Execute()
                    .then(() => resolve())
                    .catch((err) => reject(this.ErrorHand.FormatRejectMessage([CommandRunnerInternal.name, this.DebugForceAutoSnapShot.name], err)));
            }));
        });
    }
    Ping(commandParams) {
        return new Promise((resolve, reject) => CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
            resolve(ReplyCommandMsgFlag/* ReplyCommandMsgFlag.RespListeningAndReady */.o.RespListeningAndReady);
        }));
    }
    DefaultInternalCommandResult() {
        let toReturn = {};
        return toReturn;
    }
    DebugForceAutoSnapShot(commandParams) {
        return CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
                let result = this.DefaultInternalCommandResult();
                let targetSolicitor = null;
                if (this.Solicitors) {
                    this.Solicitors.forEach((solicitor) => {
                        if (solicitor.TypeDiscriminator === _70_TypeDiscriminator/* TypeDiscriminator.SolicitorForScheduledAutoSnapShot */.g.SolicitorForScheduledAutoSnapShot) {
                            targetSolicitor = solicitor;
                        }
                    });
                }
                if (targetSolicitor) {
                    targetSolicitor.ExecuteTest()
                        .then((testResult) => { })
                        .then(() => resolve(result))
                        .catch((err) => this.ErrorHand.FormatRejectMessage([CommandRunnerInternal.name, this.DebugForceAutoSnapShot.name], err));
                }
            }));
        });
    }
    SaveWindowState(commandParams) {
        return CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
                let routingParams = {
                    NewNickName: '',
                    ReqMsgFlag: _10_MessageFlag/* ReqCommandMsgFlag.GetStateOfWindow */.r.GetStateOfWindow,
                    ReqMsgFlagFriendly: _10_MessageFlag/* ReqCommandMsgFlag */.r[_10_MessageFlag/* ReqCommandMsgFlag.GetStateOfWindow */.r.GetStateOfWindow],
                    SelectSnapShotId: null,
                    SelectText: '',
                    StateSnapShot: null
                };
                this.CommandRouter.RouteCommand(routingParams)
                    .then((commandRouterResults) => {
                    this.Logger.LogAsJsonPretty('commandRouterResults', commandRouterResults);
                    this.AtticAgent.WriteStateOfSitecoreToStorage(commandRouterResults.ScUiReturnPayload.StateOfScUi);
                })
                    .then(() => resolve())
                    .catch((err) => reject(this.ErrorHand.FormatRejectMessage([CommandRunnerInternal.name, this.SaveWindowState.name], err)));
            }));
        });
    }
    ToggleFavorite(commandParams) {
        return CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
                yield new RecipeToggleFavorite(this.HindeCore, commandParams, this.Dependancies).Execute()
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }));
        });
    }
    RemoveSnapShot(commandParams) {
        return CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
                let recipe = new RecipeRemoveItemFromStorage(this.HindeCore, commandParams, this.Dependancies);
                yield recipe.Execute()
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/ContentTop/scripts/Proxies/CommandRouter.js
var CommandRouter_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};












class CommandRouter extends _HindeCoreBase/* _FrontBase */.c {
    constructor(hindeCore, scUiProxy, atticAgent, autoSnapShotAgent, documentJacket) {
        super(hindeCore);
        this.Solicitors = [];
        this.ScUiProxy = scUiProxy;
        this.AtticAgent = atticAgent;
        this.AutoSnapShotAgent = autoSnapShotAgent;
        this.DocumentJacket = documentJacket;
        this.Instantiate();
    }
    RegisterAsSolicitor(solicitor) {
        this.Solicitors.push(solicitor);
    }
    Instantiate() {
        this.InternalCommandRunner = new CommandRunnerInternal(this.HindeCore, this.AtticAgent, this.AutoSnapShotAgent, this.DocumentJacket, this, this.Solicitors);
        this.CommandTriggeredEvent_Subject = new CommandStartEndCancelEvent_Subject(this.HindeCore);
        this.Dependancies = {
            AtticAgent: this.AtticAgent,
            SolicitorForAutoSnapShot: this.AutoSnapShotAgent,
            DocumentJacket: this.DocumentJacket,
            HindeCore: this.HindeCore
        };
    }
    RouteCommand(routingParams) {
        return CommandRouter_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => CommandRouter_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.RouteCommand.name, _10_MessageFlag/* ReqCommandMsgFlag */.r[routingParams.ReqMsgFlag]);
                let calculatedCommandData = this.CalculateCommandToExec(routingParams);
                let payload = {
                    CommandState: CommandState_State.CommandStarted
                };
                let commandRouterResult = {
                    ScUiReturnPayload: null,
                };
                this.CommandTriggeredEvent_Subject.NotifyObserversAsync(payload);
                if (calculatedCommandData.CommandType == CommandType/* CommandTypeFlag.Api */.k.Api) {
                    yield this.ExecuteApiCommand(calculatedCommandData)
                        .then((scUiReturnPayload) => {
                        commandRouterResult.ScUiReturnPayload = scUiReturnPayload;
                        resolve(commandRouterResult);
                    })
                        .finally(() => reject('need to do'));
                }
                else if (calculatedCommandData.CommandType = CommandType/* CommandTypeFlag.ContentInternal */.k.ContentInternal) {
                    try {
                        yield this.ExecuteInternalCommand(calculatedCommandData)
                            .then((internalCommandResults) => {
                            this.Logger.Log('Completed the internal command');
                            resolve();
                        })
                            .catch((err) => this.ErrorHand.HandleTopLevelTryCatch(err, err))
                            .finally(() => reject('todo'));
                    }
                    catch (err) {
                        this.ErrorHand.HandleTopLevelTryCatch(err, err);
                    }
                }
                else {
                    this.ErrorHand.HandleFatalError(this.RouteCommand.name, 'did not find command');
                }
                this.Logger.FuncEnd(this.RouteCommand.name);
            }));
        });
    }
    ExecuteInternalCommand(commandData) {
        return CommandRouter_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => CommandRouter_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.ExecuteInternalCommand.name);
                if (commandData) {
                    let self = this;
                    let internalCommandResults = null;
                    try {
                        this.InternalCommandRunner.HandleInternalCommand(commandData)
                            .then((result) => { internalCommandResults = result; })
                            .then(() => {
                            let payloadComplete = {
                                CommandState: CommandState_State.CommandCompletedSuccessfully
                            };
                        })
                            .then(() => resolve(internalCommandResults))
                            .catch((err) => reject(this.ErrorHand.FormatRejectMessage(this.ExecuteInternalCommand.name, err)));
                    }
                    catch (err) {
                        this.ErrorHand.HandleTopLevelTryCatch(err, err);
                    }
                }
                this.Logger.FuncEnd(this.ExecuteInternalCommand.name);
            }));
        });
    }
    ExecuteApiCommand(commandData) {
        return new Promise((resolve, reject) => CommandRouter_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.ExecuteApiCommand.name);
            if (commandData) {
                yield this.ScUiProxy.APICommand(commandData.ToAPIPayload)
                    .then((response) => {
                    this.Logger.Log('Completed the API command');
                    resolve(response);
                })
                    .catch((err) => reject(err));
            }
            else {
                reject(this.ErrorHand.FormatRejectMessage([CommandRouter.name, this.ExecuteApiCommand.name], ' No functionToExecute'));
            }
            this.Logger.FuncEnd(this.ExecuteApiCommand.name);
        }));
    }
    CalculateCommandToExec(routingParams) {
        let commandData = new DefaultCommandData();
        commandData.CommandType = CommandType/* CommandTypeFlag.Unknown */.k.Unknown;
        commandData.InternalCommandFlag = InternalCommandFlag.Unknown;
        commandData.ToAPIPayload = {
            DataOneWindowStorage: null,
            APICommand: APICommand/* APICommandFlag.NavigateForward */.v.NavigateForward,
            SnapShotFlavor: SnapShotFlavor/* SnapShotFlavor.Unknown */.n.Unknown,
            SnapShotOfStateScUiApi: null,
        };
        let apiCommandMapping = MappingMsgFlagToAPIFlag.AllMapping;
        let foundMatch = false;
        apiCommandMapping.forEach((pair) => {
            if (pair.MsgFlag === routingParams.ReqMsgFlag) {
                commandData.ToAPIPayload.APICommand = pair.APICommand;
                commandData.CommandType = CommandType/* CommandTypeFlag.Api */.k.Api;
                foundMatch = true;
            }
        });
        if (!foundMatch) {
            let internalMapping = CommandMappingMsgFlagToInternalFlag.AllMapping;
            internalMapping.forEach((pair) => {
                if (pair.MsgFlag === routingParams.ReqMsgFlag) {
                    commandData.CommandType = CommandType/* CommandTypeFlag.ContentInternal */.k.ContentInternal;
                    commandData.InternalCommandFlag = pair.InternalCommand;
                    foundMatch = true;
                }
            });
        }
        this.Logger.LogAsJsonPretty('routingParams', routingParams);
        this.Logger.LogAsJsonPretty('commandData', commandData);
        if (!foundMatch) {
            this.ErrorHand.HandleFatalError([CommandRouter.name, this.CalculateCommandToExec.name], 'No match found: ' + _10_MessageFlag/* ReqCommandMsgFlag */.r[routingParams.ReqMsgFlag]);
        }
        return commandData;
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/ContentTop/scripts/Proxies/ContentBrowserProxy.js
var ContentBrowserProxy = __webpack_require__(7723);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/ContentTop/scripts/zContentTopEntryPoint.js
var zContentTopEntryPoint_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





















class ContentEntry {
    StartUpContent() {
        return zContentTopEntryPoint_awaiter(this, void 0, void 0, function* () {
            try {
                let commonCore = CoreFactory/* CoreFactory.BuildCommonCore */.A.BuildCommonCore();
                this.HindeCore = new HindeCore/* HindeCore */.Q(commonCore);
                this.InstantiateAgents_Content();
                yield yield DocumentJacket/* DocumentJacket.FactoryMakeDocumentJacket */.k.FactoryMakeDocumentJacket(this.HindeCore, document)
                    .then((documentJacket) => this.TopDocumentJacket = documentJacket)
                    .then(() => this.InstantiateAndInit_Managers())
                    .then(() => this.AtticAgent.CleanOutOldAutoSavedData())
                    .catch((err) => commonCore.ErrorHand.HandleFatalError(this.StartUpContent.name, err));
                this.HindeCore.Logger.SectionMarker('e) ' + this.StartUpContent.name);
                this.HindeCore.Logger.Log('standing by');
            }
            catch (err) {
                if (this.ErrorHand) {
                    this.ErrorHand.HandleFatalError([ContentEntry.name, this.StartUpContent.name], err);
                }
                console.log('top level try catch');
            }
        });
    }
    InstantiateAgents_Content() {
        try {
            this.HindeCore.Logger.SectionMarker('Instantiate Agents');
            this.RepoAgent = new RepositoryAgent/* RepositoryAgent */.D(this.HindeCore);
            this.SettingsAgent = new SettingsAgent/* SettingsAgent */.w(this.HindeCore, this.RepoAgent);
            this.SettingsAgent.Init_SettingsAgent();
            this.InitLogger();
            this.AtticAgent = new ContentAtticAgent(this.RepoAgent, this.HindeCore);
            this.ToastAgent = new ToastAgent(this.HindeCore, document);
            this.ToastAgent.WireEvents();
            this.AtticAgent.InitContentAtticManager(this.SettingsAgent.GetByKey(_30_SettingKey/* SettingKey.AutoSaveRetainDays */.n.AutoSaveRetainDays).ValueAsInt());
        }
        catch (err) {
            this.ErrorHand.HandleFatalError(this.InstantiateAgents_Content.name, err);
        }
    }
    InstantiateAndInit_Managers() {
        return zContentTopEntryPoint_awaiter(this, void 0, void 0, function* () {
            try {
                this.HindeCore.Logger.SectionMarker('Instantiate and Initialize Managers');
                let contentMessageMan;
                let runTimeOptions = {
                    EnableDesktopStartBarButtonRename: this.SettingsAgent.GetByKey(_30_SettingKey/* SettingKey.AutoRenameCeButton */.n.AutoRenameCeButton).ValueAsBool(),
                };
                this.ScUiAPI = new HindSiteScUiProxy/* HindSiteScUiProxy */.l(this.HindeCore.Logger, this.HindeCore.ErrorHand, this.HindeCore.TaskMonitor, this.TopDocumentJacket, runTimeOptions);
                this.AutoSnapShotAgent = new SolicitorForScheduledAutoSnapShot(this.HindeCore, this.SettingsAgent, this.AtticAgent, this.ScUiAPI, this.CommandRouter, this.TopDocumentJacket);
                this.contentBrowserProxy = new ContentBrowserProxy/* ContentBrowserProxy */.t(this.HindeCore);
                let urlJacket = new UrlJacket/* UrlJacket */.d(this.HindeCore, window.URL.toString());
                this.CommandRouter = new CommandRouter(this.HindeCore, this.ScUiAPI, this.AtticAgent, this.AutoSnapShotAgent, this.TopDocumentJacket);
                this.ToastAgent.ObserveRouter(this.CommandRouter);
                this.CommandSolicitorHotKeys = new CommandSolicitorForHotKeys(this.HindeCore, this.CommandRouter, this.TopDocumentJacket);
                this.CommandSolicitorForEventQueryString = new CommandSolicitorForEventQueryString(this.HindeCore, this.CommandRouter, this.TopDocumentJacket, this.SettingsAgent, this.AtticAgent);
                this.CommandSolicitorForEventStartup = new CommandSolicitorForEventRestoreMostRecent(this.HindeCore, this.CommandRouter, this.TopDocumentJacket, this.SettingsAgent, this.AtticAgent);
                let contentMessageBroker = new BrowserMessageBroker_Content(this.HindeCore, this.SettingsAgent, this.ScUiAPI, this.AtticAgent, this.contentBrowserProxy, this.AutoSnapShotAgent, this.CommandRouter);
                contentMessageMan = new ContentMessageManager(this.HindeCore, contentMessageBroker);
                contentMessageMan.InitContentMessageManager();
                this.AutoSnapShotAgent.ScheduleIntervalTasks();
                this.StartUp();
                this.HindeCore.Logger.Log('Init success');
                this.HindeCore.Logger.SectionMarker('e) Instantiate and Initialize Managers');
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.InstantiateAndInit_Managers.name, err);
            }
        });
    }
    StartUp() {
        return zContentTopEntryPoint_awaiter(this, void 0, void 0, function* () {
            this.HindeCore.Logger.FuncStart([ContentEntry.name, this.StartUp.name]);
            yield this.ScUiAPI.StartUp()
                .then(() => {
                this.CommandSolicitorForEventQueryString.StartUp();
                this.CommandSolicitorForEventStartup.StartUp();
            })
                .catch((err) => this.ErrorHand.HandleFatalError([ContentEntry.name, this.StartUp.name], err));
            this.HindeCore.Logger.FuncEnd([ContentEntry.name, this.StartUp.name]);
        });
    }
    InitLogger() {
        this.HindeCore.Logger.FuncStart(this.InitLogger.name);
        let enableLogger = this.SettingsAgent.GetByKey(_30_SettingKey/* SettingKey.EnableDebugging */.n.EnableDebugging);
        if (enableLogger.ValueAsBool() || SharedConst/* SharedConst.Const.Debug.ForceLoggingEnabled */.v.Const.Debug.ForceLoggingEnabled) {
            let consoleLogWrite = new LoggerConsoleWriter/* LoggerConsoleWriter */.H();
            var RollingLogId = new RollingLogIdDrone/* RollingLogIdDrone */.c(this.SettingsAgent, this.HindeCore);
            let storageLogWriter = new LoggerStorageWriter/* LoggerStorageWriter */.E();
            var nextLogId = RollingLogId.GetNextLogId();
            storageLogWriter.SetLogToStorageKey(nextLogId);
            this.HindeCore.Logger.AddWriter(consoleLogWrite);
            this.HindeCore.Logger.AddWriter(storageLogWriter);
        }
        this.HindeCore.Logger.FlushBuffer();
        this.HindeCore.Logger.FuncEnd(this.InitLogger.name);
    }
}
let contentEntry = new ContentEntry();
contentEntry.StartUpContent();


/***/ }),

/***/ 8443:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "$": () => /* binding */ DeepHotKeyAgent
});

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/_CommonCoreBase.js
var _CommonCoreBase = __webpack_require__(6679);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/70 - TypeDiscriminator.js
var _70_TypeDiscriminator = __webpack_require__(8162);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/_HindSiteEvent/HindeSiteEvent_Subject.js
var HindeSiteEvent_Subject = __webpack_require__(4697);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/KeyBoardComboEvent/KeyBoardComboEvent_Subject.js


class KeyBoardComboEvent_Subject extends HindeSiteEvent_Subject/* _HindeSiteEvent_Subject */.C {
    constructor() {
        super(...arguments);
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.KeyBoardComboEvent_Subject */.g.KeyBoardComboEvent_Subject;
        this.ShowLogActions = true;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/scripts/KeyPressJacket.js


class KeyPressJacket extends _CommonCoreBase/* _CommonBase */.a {
    constructor(commoncore, keyPressCombosToListenFor) {
        super(commoncore);
        this.KeyPressCombos = keyPressCombosToListenFor;
        this.Instantiate();
        this.WireEvents();
    }
    Instantiate() {
        this.KeyBoardComboEvent_Subject = new KeyBoardComboEvent_Subject(this.CommonCore);
    }
    WireEvents() {
        window.addEventListener('keyup', ((event) => this.CallBackOnNativeKeyPress(event)), false);
    }
    CallBackOnNativeKeyPress(event) {
        let inComing = {
            IsShiftKey: false,
            IsAltKey: false,
            IsCtrlKey: false,
            Which: -1,
        };
        inComing.IsShiftKey = event.shiftKey;
        inComing.IsCtrlKey = event.ctrlKey;
        inComing.IsAltKey = event.altKey;
        inComing.Which = event.which;
        let matchingCombos = [];
        this.KeyPressCombos.forEach((userKeyPressCombo) => {
            if ((inComing.Which === userKeyPressCombo.KeyWhich)
                && (inComing.IsCtrlKey === userKeyPressCombo.IsCtrlKey)
                && (inComing.IsAltKey === userKeyPressCombo.IsAltKey)
                && (inComing.IsShiftKey === userKeyPressCombo.IsShiftKey)) {
                matchingCombos.push(userKeyPressCombo.HotKeyCommandFlag);
            }
        });
        if (matchingCombos.length > 0) {
            this.Logger.LogImportant('call back native');
            matchingCombos.forEach((commandFlag) => {
                let keyBoardComboEvent_Payload = {
                    ReqCommandMsgFlag: commandFlag
                };
                this.KeyBoardComboEvent_Subject.NotifyObserversAsync(keyBoardComboEvent_Payload);
            });
        }
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/10 - MessageFlag.js
var _10_MessageFlag = __webpack_require__(8979);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/_HindSiteEvent/HindSiteEvent_Observer.js
var HindSiteEvent_Observer = __webpack_require__(2005);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/KeyBoardComboEvent/KeyBoardComboEvent_Observer.js

class KeyBoardComboEvent_Observer extends HindSiteEvent_Observer/* _HindSiteEvent_Observer */.k {
    constructor(commonCore, callback) {
        super(commonCore, KeyBoardComboEvent_Observer.name, callback);
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/SharedConst.js
var SharedConst = __webpack_require__(5077);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/DeepHotKey/HotKeys.js

class HotKeys {
}
HotKeys.AllHotKeys = [
    { Friendly: 'Go Selected - Ctrl+Alt+G', IsAltKey: true, IsCtrlKey: true, IsShiftKey: false, HotKeyCommandFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqGoToSelected */.r.ReqGoToSelected, KeyWhich: 71 },
    { Friendly: 'Take Snap Shot - Ctrl+Alt+P', IsAltKey: true, IsCtrlKey: true, IsShiftKey: false, HotKeyCommandFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqTakeAndSaveSnapShot */.r.ReqTakeAndSaveSnapShot, KeyWhich: 80 },
    { Friendly: 'Presentation Details - Ctrl+Alt+D', IsAltKey: true, IsCtrlKey: true, IsShiftKey: false, HotKeyCommandFlag: _10_MessageFlag/* ReqCommandMsgFlag.OpenCERibbonPresentationDetails */.r.OpenCERibbonPresentationDetails, KeyWhich: 68 },
    { Friendly: 'Navigate Links - Ctrl+Alt+L', IsAltKey: true, IsCtrlKey: true, IsShiftKey: false, HotKeyCommandFlag: _10_MessageFlag/* ReqCommandMsgFlag.OpenCERibbonNavigateLinks */.r.OpenCERibbonNavigateLinks, KeyWhich: 76 },
    { Friendly: 'Toggle Raw Values - Ctrl+Alt+{ ([)', IsAltKey: true, IsCtrlKey: true, IsShiftKey: false, HotKeyCommandFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqToggleRawValues */.r.ReqToggleRawValues, KeyWhich: 219 },
    { Friendly: 'Navigate Back - Ctrl+Alt+Left Arrow,)', IsAltKey: true, IsCtrlKey: true, IsShiftKey: false, HotKeyCommandFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqNavigateBack */.r.ReqNavigateBack, KeyWhich: 37 },
    { Friendly: 'Navigate Forward - Ctrl+Alt+Right Arrow', IsAltKey: true, IsCtrlKey: true, IsShiftKey: false, HotKeyCommandFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqNavigateForward */.r.ReqNavigateForward, KeyWhich: 39 },
    { Friendly: 'Navigate Up - Ctrl+Alt+Up Arrow', IsAltKey: true, IsCtrlKey: true, IsShiftKey: false, HotKeyCommandFlag: _10_MessageFlag/* ReqCommandMsgFlag.ReqNavigateUp */.r.ReqNavigateUp, KeyWhich: 38 },
];

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/HotKeyEvent/HotKeyEvent_Subject.js


class HotKeyEvent_Subject extends HindeSiteEvent_Subject/* _HindeSiteEvent_Subject */.C {
    constructor() {
        super(...arguments);
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.HotKeyEvent_Subject */.g.HotKeyEvent_Subject;
        this.ShowLogActions = true;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/DeepHotKey/DeepHotKeyAgent.js
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class DeepHotKeyAgent extends _CommonCoreBase/* _CommonBase */.a {
    constructor(commonCore, urlJacket) {
        super(commonCore);
        this.Logger.CTORStart(DeepHotKeyAgent.name);
        this.UrlJacket = urlJacket;
        this.Instantiate();
        this.WireEvents();
        this.Logger.CTOREnd(DeepHotKeyAgent.name);
    }
    Instantiate() {
        this.KeyPressJacket = new KeyPressJacket(this.CommonCore, HotKeys.AllHotKeys);
        this.KeyPressJacket_Observer = new KeyBoardComboEvent_Observer(this.CommonCore, this.CallBackOnKeyboardComboEvent.bind(this));
        this.HotKeyEvent_Subject = new HotKeyEvent_Subject(this.CommonCore);
    }
    WireEvents() {
        this.Logger.FuncStart(this.WireEvents.name, 'Is top? ' + (window.self === window.top).toString());
        this.KeyPressJacket.KeyBoardComboEvent_Subject.RegisterObserver(this.KeyPressJacket_Observer);
        window.addEventListener(SharedConst/* SharedConst.Const.KeyWords.Javascript.Events.Message */.v.Const.KeyWords.Javascript.Events.Message, ((messageEvent) => this.CallBackOnMessageFromFrame(messageEvent)));
        this.Logger.FuncEnd(this.WireEvents.name, 'Is top? ' + (window.self === window.top).toString());
    }
    CallBackOnMessageFromFrame(event) {
        console.log(this.CallBackOnMessageFromFrame.name);
        if (event && event.origin === this.GetDomain()) {
            let deepHotKeydata = event.data;
            if (deepHotKeydata) {
                let hotKeyPayload = {
                    ReqCommandMsgFlag: deepHotKeydata.ReqCommandMsgFlag,
                    SelectText: window.getSelection ? window.getSelection().toString() : '',
                };
                this.HotKeyEvent_Subject.NotifyObserversAsync(hotKeyPayload);
            }
            else {
                console.log('incorrect data');
            }
        }
        else {
            console.log('not a valid domain: ' + event.origin);
        }
    }
    CallBackOnKeyboardComboEvent(keyboardComboEvent_Payload) {
        return __awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.CallBackOnKeyboardComboEvent.name);
            this.Logger.LogVal('keyBoardComboEvent ', _10_MessageFlag/* ReqCommandMsgFlag */.r[keyboardComboEvent_Payload.ReqCommandMsgFlag]);
            this.HandleHotKeyPayload(keyboardComboEvent_Payload);
            this.Logger.FuncEnd(this.CallBackOnKeyboardComboEvent.name);
        });
    }
    HandleTopWindow(hotKeyPayload) {
        this.Logger.LogImportant('hotkey received at top');
    }
    GetDomain() {
        let urlParts = this.UrlJacket.GetUrlParts();
        let combined = urlParts.Protocol + '//' + urlParts.HostAndPort;
        return combined;
    }
    BubbleMessageUp(hotKeyPayload) {
        this.Logger.FuncStart(this.BubbleMessageUp.name);
        let maxIter = 100;
        let currIter = 0;
        let candidateHasParent = true;
        window.top.postMessage(hotKeyPayload, this.GetDomain());
        this.Logger.FuncEnd(this.BubbleMessageUp.name);
    }
    HandleHotKeyPayload(hotKeyPayload) {
        if (hotKeyPayload) {
            if (window.self !== window.top) {
                this.BubbleMessageUp(hotKeyPayload);
            }
        }
        else {
            this.HandleTopWindow(hotKeyPayload);
        }
    }
}


/***/ }),

/***/ 7865:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "c": () => /* binding */ RollingLogIdDrone
/* harmony export */ });
/* harmony import */ var _CommonCoreBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6679);
/* harmony import */ var _Enums_30_SettingKey__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8244);


class RollingLogIdDrone extends _CommonCoreBase__WEBPACK_IMPORTED_MODULE_1__/* ._CommonBase */ .a {
    constructor(settingsAgent, hindeCore) {
        super(hindeCore);
        this.maxKey = 5;
        this.minKey = 1;
        this.Logger.CTORStart(RollingLogIdDrone.name);
        this.SettingsAgent = settingsAgent;
    }
    GetNextLogId() {
        let nextKeyInt = this.minKey;
        let nextKeyToReturn;
        var result = this.GetLastUsedLogId().ValueAsInt();
        nextKeyInt = result + 1;
        if (nextKeyInt > this.maxKey) {
            nextKeyInt = this.minKey;
        }
        this.SettingsAgent.SetByKey(_Enums_30_SettingKey__WEBPACK_IMPORTED_MODULE_0__/* .SettingKey.LastUsedLogToStorageKey */ .n.LastUsedLogToStorageKey, nextKeyInt.toString());
        nextKeyToReturn = nextKeyInt.toString();
        return nextKeyToReturn;
    }
    GetLastUsedLogId() {
        var lastUsedLogIdSetting = this.SettingsAgent.GetByKey(_Enums_30_SettingKey__WEBPACK_IMPORTED_MODULE_0__/* .SettingKey.LastUsedLogToStorageKey */ .n.LastUsedLogToStorageKey);
        return lastUsedLogIdSetting;
    }
}


/***/ }),

/***/ 341:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "H": () => /* binding */ LoggerConsoleWriter
/* harmony export */ });
class LoggerConsoleWriter {
    constructor() {
        this.FriendlyName = LoggerConsoleWriter.name;
    }
    WriteText(text) {
        console.log(text);
    }
}


/***/ }),

/***/ 8405:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "E": () => /* binding */ LoggerStorageWriter
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class LoggerStorageWriter {
    constructor() {
        this.FriendlyName = LoggerStorageWriter.name;
        this.CurrentStorageLogKey = '0';
        this.LogToStoragePrefix = 'Hindsite.Log.';
        this.StorageLogCombined = "";
    }
    WriteText(text) {
    }
    SetLogToStorageKey(logToStorageIndex) {
        this.CurrentStorageLogKey = this.LogToStoragePrefix + logToStorageIndex;
    }
    WriteLogToStorage(logMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                this.StorageLogCombined += "|||" + JSON.stringify(logMessage);
                if (this.CurrentStorageLogKey) {
                    window.localStorage.setItem(this.CurrentStorageLogKey, this.StorageLogCombined);
                }
            }));
        });
    }
}


/***/ }),

/***/ 4108:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "D": () => /* binding */ RepositoryAgent
/* harmony export */ });
/* harmony import */ var _CommonCoreBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6679);

class RepositoryAgent extends _CommonCoreBase__WEBPACK_IMPORTED_MODULE_0__/* ._CommonBase */ .a {
    constructor(hindeCore) {
        super(hindeCore);
    }
    RemoveByKey(key) {
        try {
            window.localStorage.removeItem(key);
        }
        catch (err) {
            this.ErrorHand.HandleFatalError(this.RemoveByKey.name, err);
        }
    }
    InitRepositoryAgent() {
        this.Logger.FuncStart(RepositoryAgent.name, this.InitRepositoryAgent.name);
        this.Logger.FuncEnd(RepositoryAgent.name, this.InitRepositoryAgent.name);
    }
    GetBulkLocalStorageByKeyPrefix(targetPrefix) {
        var toReturn = [];
        try {
            var storageLength = window.localStorage.length;
            for (var idx = 0; idx < storageLength; idx++) {
                var candidate = {
                    data: '',
                    key: '',
                };
                candidate.key = window.localStorage.key(idx);
                if (candidate.key.startsWith(targetPrefix)) {
                    candidate.data = window.localStorage.getItem(candidate.key);
                    if (typeof candidate != 'undefined' && typeof candidate.data != 'undefined' && candidate != null && candidate.data != null) {
                        toReturn.push(candidate);
                    }
                }
            }
        }
        catch (err) {
            this.ErrorHand.HandleFatalError(this.GetBulkLocalStorageByKeyPrefix.name, err);
        }
        return toReturn;
    }
    ReadDataOfKey(targetKey) {
        this.Logger.FuncStart(this.ReadDataOfKey.name);
        let storageValue = null;
        let toReturn = '';
        storageValue = window.localStorage.getItem(targetKey);
        if (storageValue != null) {
            toReturn = storageValue.toString();
        }
        else {
            this.Logger.LogVal(this.ReadDataOfKey.name, "No value returned from storage");
        }
        this.Logger.FuncEnd(this.ReadDataOfKey.name);
        return toReturn;
    }
    WriteByKey(storageKey, jsonString) {
        window.localStorage.setItem(storageKey, jsonString);
    }
}


/***/ }),

/***/ 1956:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "w": () => /* binding */ SettingsAgent
});

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Const/PopConst.js
var PopConst = __webpack_require__(3923);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/_HindSiteEvent/HindSiteEvent_Observer.js
var HindSiteEvent_Observer = __webpack_require__(2005);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/70 - TypeDiscriminator.js
var _70_TypeDiscriminator = __webpack_require__(8162);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/UiModuleManagerPassThroughEvent/UiModuleManagerPassThroughEvent_Observer.js


class UiModuleManagerPassThroughEvent_Observer extends HindSiteEvent_Observer/* _HindSiteEvent_Observer */.k {
    constructor(hindeCore, callback) {
        super(hindeCore, UiModuleManagerPassThroughEvent_Observer.name, callback);
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.UiModuleManagerPassThroughEvent_Observer */.g.UiModuleManagerPassThroughEvent_Observer;
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/StaticHelpers.js
var StaticHelpers = __webpack_require__(1579);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/30 - SettingKey.js
var _30_SettingKey = __webpack_require__(8244);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/_CommonCoreBase.js
var _CommonCoreBase = __webpack_require__(6679);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/Enabled.js
var Enabled = __webpack_require__(5195);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/ModuleKey.js
var ModuleKey = __webpack_require__(6270);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SettingFlavor.js
var SettingFlavor = __webpack_require__(367);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SettingType.js
var SettingType = __webpack_require__(3881);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/UiPresence.js
var UiPresence = __webpack_require__(4099);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/InjectConst.js
var InjectConst = __webpack_require__(8856);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/SharedConst.js
var SharedConst = __webpack_require__(5077);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/SettingsAgent/HindSiteSetting.js
class HindSiteSetting {
    constructor(settingKey, dataType, uiContainerSelector, defaultValue, settingFlavor, friendly, enableState, hasUi, moduleType) {
        this.SettingKey = settingKey;
        this.DataType = dataType;
        this.ValueAsObj = defaultValue;
        this.UiContainerSelector = uiContainerSelector;
        this.DefaultValue = defaultValue;
        this.SettingFlavor = settingFlavor;
        this.FriendlySetting = friendly;
        this.HasUi = hasUi;
        this.EnabledState = enableState;
        this.ModuleType = moduleType;
    }
    ValueAsHistory() {
        let toReturn = {
            Age_1: '',
            Age_2: '',
            Age_3: '',
        };
        if (this.ValueAsObj !== undefined && this.ValueAsObj !== null) {
            try {
                let candidate = this.ValueAsObj;
                if (candidate) {
                    toReturn = candidate;
                }
            }
            catch (err) {
                throw (HindSiteSetting.name + '.' + this.ValueAsHistory.name + ' | ' + err);
            }
        }
        return toReturn;
    }
    ValueAsInt() {
        var toReturn = Number.MIN_SAFE_INTEGER;
        if (this.ValueAsObj !== undefined && this.ValueAsObj !== null) {
            toReturn = parseInt(this.ValueAsObj.toString());
        }
        return toReturn;
    }
    ValueAsBool() {
        let toReturn = this.DefaultValue;
        if (this.ValueAsObj !== undefined && this.ValueAsObj !== null) {
            toReturn = this.ValueAsObj;
        }
        else {
            toReturn = this.DefaultValue;
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/SettingsAgent/HindSiteSettingForNumbers.js

class HindSiteSettingForNumbers extends HindSiteSetting {
    constructor(settingKey, dataType, uiContainerSelector, defaultValue, settingFlavor, friendly, enableState, hasUi, moduleType, min, max) {
        super(settingKey, dataType, uiContainerSelector, defaultValue, settingFlavor, friendly, enableState, hasUi, moduleType);
        this.Min = min;
        this.Max = max;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/SettingsAgent/HindSiteSettingWrapper.js

class HindSiteSettingWrapper extends _CommonCoreBase/* _CommonBase */.a {
    constructor(hindeCore, hindSiteSetting) {
        super(hindeCore);
        this.HindSiteSetting = hindSiteSetting;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/SettingsAgent/DefaultSettings.js













class DefaultSettings extends _CommonCoreBase/* _CommonBase */.a {
    constructor(hindeCore) {
        super(hindeCore);
    }
    GetDefaultSettingsWrapper() {
        let rawData = [
            new HindSiteSetting(_30_SettingKey/* SettingKey.LastUsedLogToStorageKey */.n.LastUsedLogToStorageKey, SettingType/* SettingType.Number */.S.Number, null, SharedConst/* SharedConst.Const.Settings.Defaults.EnableDebugging */.v.Const.Settings.Defaults.EnableDebugging, SettingFlavor/* SettingFlavor.ContentAndPopUpStoredInEach */.i.ContentAndPopUpStoredInEach, 'Rolling Prefix key for log to storage', Enabled/* UiEnableState.Enabled */.g.Enabled, UiPresence/* UiPresence.HasNoUi */.f.HasNoUi, ModuleKey/* ModuleKey.Unknown */.y.Unknown),
            new HindSiteSetting(_30_SettingKey/* SettingKey.EnableDebugging */.n.EnableDebugging, SettingType/* SettingType.BoolCheckBox */.S.BoolCheckBox, PopConst/* PopConst.Const.Selector.HS.ModuleContainers.SettingEnableDebugging */.b.Const.Selector.HS.ModuleContainers.SettingEnableDebugging, SharedConst/* SharedConst.Const.Settings.Defaults.EnableDebugging */.v.Const.Settings.Defaults.EnableDebugging, SettingFlavor/* SettingFlavor.ContentAndPopUpStoredInPopUp */.i.ContentAndPopUpStoredInPopUp, 'Enable Debugging', Enabled/* UiEnableState.Enabled */.g.Enabled, UiPresence/* UiPresence.HasUi */.f.HasUi, ModuleKey/* ModuleKey.CheckBox */.y.CheckBox),
            new HindSiteSetting(_30_SettingKey/* SettingKey.UseCompactCss */.n.UseCompactCss, SettingType/* SettingType.BoolCheckBox */.S.BoolCheckBox, PopConst/* PopConst.Const.Selector.HS.ModuleContainers.SettingUseCompactCss */.b.Const.Selector.HS.ModuleContainers.SettingUseCompactCss, SharedConst/* SharedConst.Const.Settings.Defaults.UseCompactCss */.v.Const.Settings.Defaults.UseCompactCss, SettingFlavor/* SettingFlavor.ContentOnly */.i.ContentOnly, 'Use Compact CSS', Enabled/* UiEnableState.Disabled */.g.Disabled, UiPresence/* UiPresence.HasUi */.f.HasUi, ModuleKey/* ModuleKey.CheckBox */.y.CheckBox),
            new HindSiteSetting(_30_SettingKey/* SettingKey.AutoSnapshotBeforeWindowChange */.n.AutoSnapshotBeforeWindowChange, SettingType/* SettingType.BoolCheckBox */.S.BoolCheckBox, PopConst/* PopConst.Const.Selector.HS.AutoSnapshotBeforeWindowChange */.b.Const.Selector.HS.AutoSnapshotBeforeWindowChange, PopConst/* PopConst.Const.Storage.Defaults.bool.AutoSnapshotBeforeWindowChange */.b.Const.Storage.Defaults.bool.AutoSnapshotBeforeWindowChange, SettingFlavor/* SettingFlavor.ContentAndPopUpStoredInPopUp */.i.ContentAndPopUpStoredInPopUp, 'Auto Save Snapshot on HindSite Window Change', Enabled/* UiEnableState.Disabled */.g.Disabled, UiPresence/* UiPresence.HasUi */.f.HasUi, ModuleKey/* ModuleKey.CheckBox */.y.CheckBox),
            new HindSiteSetting(_30_SettingKey/* SettingKey.AutoLogin */.n.AutoLogin, SettingType/* SettingType.BoolCheckBox */.S.BoolCheckBox, PopConst/* PopConst.Const.Selector.HS.iCBoxdSettingsAutoLogin */.b.Const.Selector.HS.iCBoxdSettingsAutoLogin, PopConst/* PopConst.Const.Storage.Defaults.bool.AutoLogin */.b.Const.Storage.Defaults.bool.AutoLogin, SettingFlavor/* SettingFlavor.ContentAndPopUpStoredInPopUp */.i.ContentAndPopUpStoredInPopUp, 'Auto Login', Enabled/* UiEnableState.Disabled */.g.Disabled, UiPresence/* UiPresence.HasUi */.f.HasUi, ModuleKey/* ModuleKey.CheckBox */.y.CheckBox),
            new HindSiteSetting(_30_SettingKey/* SettingKey.LgndPopUpLog */.n.LgndPopUpLog, SettingType/* SettingType.AccordionDebugging */.S.AccordionDebugging, PopConst/* PopConst.Const.Selector.HS.ModuleContainers.LgndPopUpLog */.b.Const.Selector.HS.ModuleContainers.LgndPopUpLog, PopConst/* PopConst.Const.Settings.Defaults.LgndPopUpLog */.b.Const.Settings.Defaults.LgndPopUpLog, SettingFlavor/* SettingFlavor.PopUp */.i.PopUp, 'Debugging - Pop Up Log', Enabled/* UiEnableState.Enabled */.g.Enabled, UiPresence/* UiPresence.HasUi */.f.HasUi, ModuleKey/* ModuleKey.AccordionDebugging */.y.AccordionDebugging),
            new HindSiteSetting(_30_SettingKey/* SettingKey.LgndForeSite */.n.LgndForeSite, SettingType/* SettingType.AccordionTypical */.S.AccordionTypical, PopConst/* PopConst.Const.Selector.HS.ModuleContainers.LgndForeSite */.b.Const.Selector.HS.ModuleContainers.LgndForeSite, PopConst/* PopConst.Const.Settings.Defaults.LgndForeSite */.b.Const.Settings.Defaults.LgndForeSite, SettingFlavor/* SettingFlavor.PopUp */.i.PopUp, 'Fore&bull;Site', Enabled/* UiEnableState.Enabled */.g.Enabled, UiPresence/* UiPresence.HasUi */.f.HasUi, ModuleKey/* ModuleKey.AccordionTypical */.y.AccordionTypical),
            new HindSiteSetting(_30_SettingKey/* SettingKey.LgndHindSite */.n.LgndHindSite, SettingType/* SettingType.AccordionTypical */.S.AccordionTypical, PopConst/* PopConst.Const.Selector.HS.ModuleContainers.LgndHindSite */.b.Const.Selector.HS.ModuleContainers.LgndHindSite, PopConst/* PopConst.Const.Settings.Defaults.LgndHindSite */.b.Const.Settings.Defaults.LgndHindSite, SettingFlavor/* SettingFlavor.PopUp */.i.PopUp, 'Hind&bull;Site', Enabled/* UiEnableState.Enabled */.g.Enabled, UiPresence/* UiPresence.HasUi */.f.HasUi, ModuleKey/* ModuleKey.AccordionTypical */.y.AccordionTypical),
            new HindSiteSetting(_30_SettingKey/* SettingKey.LgndSettings */.n.LgndSettings, SettingType/* SettingType.AccordionTypical */.S.AccordionTypical, PopConst/* PopConst.Const.Selector.HS.ModuleContainers.LgndSettings */.b.Const.Selector.HS.ModuleContainers.LgndSettings, PopConst/* PopConst.Const.Settings.Defaults.LgndSettings */.b.Const.Settings.Defaults.LgndSettings, SettingFlavor/* SettingFlavor.PopUp */.i.PopUp, 'Settings', Enabled/* UiEnableState.Enabled */.g.Enabled, UiPresence/* UiPresence.HasUi */.f.HasUi, ModuleKey/* ModuleKey.AccordionTypical */.y.AccordionTypical),
            new HindSiteSetting(_30_SettingKey/* SettingKey.LgndMessages */.n.LgndMessages, SettingType/* SettingType.AccordionDebugging */.S.AccordionDebugging, PopConst/* PopConst.Const.Selector.HS.ModuleContainers.LgndMessages */.b.Const.Selector.HS.ModuleContainers.LgndMessages, PopConst/* PopConst.Const.Settings.Defaults.LgndMessages */.b.Const.Settings.Defaults.LgndMessages, SettingFlavor/* SettingFlavor.PopUp */.i.PopUp, 'Debugging - Messages', Enabled/* UiEnableState.Enabled */.g.Enabled, UiPresence/* UiPresence.HasUi */.f.HasUi, ModuleKey/* ModuleKey.AccordionDebugging */.y.AccordionDebugging),
            new HindSiteSetting(_30_SettingKey/* SettingKey.LgndPopUpState */.n.LgndPopUpState, SettingType/* SettingType.AccordionDebugging */.S.AccordionDebugging, PopConst/* PopConst.Const.Selector.HS.ModuleContainers.LgndPopUpState */.b.Const.Selector.HS.ModuleContainers.LgndPopUpState, PopConst/* PopConst.Const.Settings.Defaults.LgndPopUpState */.b.Const.Settings.Defaults.LgndPopUpState, SettingFlavor/* SettingFlavor.PopUp */.i.PopUp, 'Debugging - State of Pop-Up', Enabled/* UiEnableState.Enabled */.g.Enabled, UiPresence/* UiPresence.HasUi */.f.HasUi, ModuleKey/* ModuleKey.AccordionDebugging */.y.AccordionDebugging),
            new HindSiteSetting(_30_SettingKey/* SettingKey.LgndPopUpDebug */.n.LgndPopUpDebug, SettingType/* SettingType.AccordionDebugging */.S.AccordionDebugging, PopConst/* PopConst.Const.Selector.HS.ModuleContainers.LgndPopUpDebug */.b.Const.Selector.HS.ModuleContainers.LgndPopUpDebug, PopConst/* PopConst.Const.Settings.Defaults.LgndPopUpState */.b.Const.Settings.Defaults.LgndPopUpState, SettingFlavor/* SettingFlavor.PopUp */.i.PopUp, 'Debugging', Enabled/* UiEnableState.Enabled */.g.Enabled, UiPresence/* UiPresence.HasUi */.f.HasUi, ModuleKey/* ModuleKey.AccordionDebugging */.y.AccordionDebugging),
            new HindSiteSetting(_30_SettingKey/* SettingKey.LgndContentState */.n.LgndContentState, SettingType/* SettingType.AccordionDebugging */.S.AccordionDebugging, PopConst/* PopConst.Const.Selector.HS.ModuleContainers.LgndContentState */.b.Const.Selector.HS.ModuleContainers.LgndContentState, PopConst/* PopConst.Const.Settings.Defaults.LgndContentState */.b.Const.Settings.Defaults.LgndContentState, SettingFlavor/* SettingFlavor.PopUp */.i.PopUp, 'Debugging - Content State', Enabled/* UiEnableState.Enabled */.g.Enabled, UiPresence/* UiPresence.HasUi */.f.HasUi, ModuleKey/* ModuleKey.AccordionDebugging */.y.AccordionDebugging),
            new HindSiteSetting(_30_SettingKey/* SettingKey.LgndBrowserState */.n.LgndBrowserState, SettingType/* SettingType.AccordionDebugging */.S.AccordionDebugging, PopConst/* PopConst.Const.Selector.HS.ModuleContainers.LgndBrowserState */.b.Const.Selector.HS.ModuleContainers.LgndBrowserState, PopConst/* PopConst.Const.Settings.Defaults.LgndBrowserState */.b.Const.Settings.Defaults.LgndBrowserState, SettingFlavor/* SettingFlavor.PopUp */.i.PopUp, 'Debugging - Browser State', Enabled/* UiEnableState.Enabled */.g.Enabled, UiPresence/* UiPresence.HasUi */.f.HasUi, ModuleKey/* ModuleKey.AccordionDebugging */.y.AccordionDebugging),
            new HindSiteSettingForNumbers(_30_SettingKey/* SettingKey.MaxAutoSaveCount */.n.MaxAutoSaveCount, SettingType/* SettingType.Number */.S.Number, PopConst/* PopConst.Const.Selector.HS.SettingAutoSaveMaxCount */.b.Const.Selector.HS.SettingAutoSaveMaxCount, PopConst/* PopConst.Const.Numbers.MaxAutoSaveCount */.b.Const.Numbers.MaxAutoSaveCount, SettingFlavor/* SettingFlavor.ContentAndPopUpStoredInPopUp */.i.ContentAndPopUpStoredInPopUp, 'Auto Save Max Count', Enabled/* UiEnableState.Disabled */.g.Disabled, UiPresence/* UiPresence.HasUi */.f.HasUi, ModuleKey/* ModuleKey.Number */.y.Number, 1, 100),
            new HindSiteSettingForNumbers(_30_SettingKey/* SettingKey.AutoSaveIntervalMin */.n.AutoSaveIntervalMin, SettingType/* SettingType.Number */.S.Number, PopConst/* PopConst.Const.Selector.HS.SettingAutoSaveInterval */.b.Const.Selector.HS.SettingAutoSaveInterval, PopConst/* PopConst.Const.Numbers.DefaultAutoSaveIntervalMin */.b.Const.Numbers.DefaultAutoSaveIntervalMin, SettingFlavor/* SettingFlavor.ContentAndPopUpStoredInPopUp */.i.ContentAndPopUpStoredInPopUp, 'Auto Save Interval (Min) - 0 to disable', Enabled/* UiEnableState.Enabled */.g.Enabled, UiPresence/* UiPresence.HasUi */.f.HasUi, ModuleKey/* ModuleKey.Number */.y.Number, 0, 100),
            new HindSiteSetting(_30_SettingKey/* SettingKey.DebugKeepDialogOpen */.n.DebugKeepDialogOpen, SettingType/* SettingType.BoolCheckBox */.S.BoolCheckBox, PopConst/* PopConst.Const.Selector.HS.ModuleContainers.SettingDebugKeepDialogOpen */.b.Const.Selector.HS.ModuleContainers.SettingDebugKeepDialogOpen, PopConst/* PopConst.Const.Settings.Defaults.DebugKeepDialogOpen */.b.Const.Settings.Defaults.DebugKeepDialogOpen, SettingFlavor/* SettingFlavor.PopUp */.i.PopUp, 'Keep Dialog Open', Enabled/* UiEnableState.Disabled */.g.Disabled, UiPresence/* UiPresence.HasUi */.f.HasUi, ModuleKey/* ModuleKey.CheckBox */.y.CheckBox),
            new HindSiteSetting(_30_SettingKey/* SettingKey.AutoRestoreState */.n.AutoRestoreState, SettingType/* SettingType.BoolCheckBox */.S.BoolCheckBox, PopConst/* PopConst.Const.Selector.HS.ModuleContainers.SettingAutoRestoreState */.b.Const.Selector.HS.ModuleContainers.SettingAutoRestoreState, PopConst/* PopConst.Const.Settings.Defaults.AutoRestoreState */.b.Const.Settings.Defaults.AutoRestoreState, SettingFlavor/* SettingFlavor.ContentAndPopUpStoredInPopUp */.i.ContentAndPopUpStoredInPopUp, 'Auto-Restore State', Enabled/* UiEnableState.Enabled */.g.Enabled, UiPresence/* UiPresence.HasUi */.f.HasUi, ModuleKey/* ModuleKey.CheckBox */.y.CheckBox),
            new HindSiteSettingForNumbers(_30_SettingKey/* SettingKey.AutoSaveRetainDays */.n.AutoSaveRetainDays, SettingType/* SettingType.Number */.S.Number, PopConst/* PopConst.Const.Selector.HS.SettingAutoSaveSnapshotRetainDays */.b.Const.Selector.HS.SettingAutoSaveSnapshotRetainDays, InjectConst/* ContentConst.Const.DefaultMaxAutoSaveAgeDays */.y.Const.DefaultMaxAutoSaveAgeDays, SettingFlavor/* SettingFlavor.ContentOnly */.i.ContentOnly, 'Days to Retain Auto Snap Shots', Enabled/* UiEnableState.Enabled */.g.Enabled, UiPresence/* UiPresence.HasUi */.f.HasUi, ModuleKey/* ModuleKey.Number */.y.Number, 0, 100),
            new HindSiteSetting(_30_SettingKey/* SettingKey.AutoRenameCeButton */.n.AutoRenameCeButton, SettingType/* SettingType.BoolCheckBox */.S.BoolCheckBox, PopConst/* PopConst.Const.Selector.HS.SettingAutoRenameCeTabButton */.b.Const.Selector.HS.SettingAutoRenameCeTabButton, InjectConst/* ContentConst.Const.DefaultAutoRenameCeTabButton */.y.Const.DefaultAutoRenameCeTabButton, SettingFlavor/* SettingFlavor.ContentAndPopUpStoredInPopUp */.i.ContentAndPopUpStoredInPopUp, 'Auto rename Content Editor tab button to match active node', Enabled/* UiEnableState.Enabled */.g.Enabled, UiPresence/* UiPresence.HasUi */.f.HasUi, ModuleKey/* ModuleKey.CheckBox */.y.CheckBox),
        ];
        let toReturn = [];
        rawData.forEach((settingValue) => {
            toReturn.push(new HindSiteSettingWrapper(this.CommonCore, settingValue));
        });
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/SettingsAgent/HindSiteSettingsBucket.js



class HindSiteSettingsBucket extends _CommonCoreBase/* _CommonBase */.a {
    constructor(hindeCore) {
        super(hindeCore);
        this.SettingWrappers = [];
        this.SettingWrappers = (new DefaultSettings(this.CommonCore)).GetDefaultSettingsWrapper();
    }
    GetByKey(needleSettingKey) {
        var toReturn = null;
        for (var idx = 0; idx < this.SettingWrappers.length; idx++) {
            let candidate = this.SettingWrappers[idx];
            if (candidate.HindSiteSetting.SettingKey === needleSettingKey) {
                toReturn = candidate;
                break;
            }
        }
        if (!toReturn) {
            this.ErrorHand.ErrorAndContinue(this.GetByKey.name, 'Setting not found ' + StaticHelpers/* StaticHelpers.SettingKeyAsString */.y.SettingKeyAsString(needleSettingKey));
        }
        return toReturn;
    }
    GetSettingsByFlavor(targetFlavors) {
        let toReturn = [];
        for (var idx = 0; idx < this.SettingWrappers.length; idx++) {
            let candidate = this.SettingWrappers[idx];
            if (targetFlavors.indexOf(candidate.HindSiteSetting.SettingFlavor) > -1) {
                toReturn.push(candidate);
            }
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/SettingsAgent/SettingsAgent.js






class SettingsAgent extends _CommonCoreBase/* _CommonBase */.a {
    constructor(hindeCore, repoAgent) {
        super(hindeCore);
        this.RepoAgent = repoAgent;
        this.HindSiteSettingsBucket = new HindSiteSettingsBucket(this.CommonCore);
    }
    GetSettingsByFlavor(arg0) {
        return this.HindSiteSettingsBucket.GetSettingsByFlavor(arg0);
    }
    GetByKey(settingKey) {
        let toReturn = null;
        let settingsWrapper = this.HindSiteSettingsBucket.GetByKey(settingKey);
        if (settingsWrapper) {
            toReturn = settingsWrapper.HindSiteSetting;
        }
        return toReturn;
    }
    Init_SettingsAgent() {
        this.Logger.FuncStart(this.Init_SettingsAgent.name);
        let settingsFromStorage = this.ReadGenericSettingsFromStorage();
        this.UpdateSettingValuesFromStorage(settingsFromStorage);
        this.Logger.FuncEnd(this.Init_SettingsAgent.name);
    }
    WireEvents() {
        this.UiElementChangeEvent_Observer = new UiModuleManagerPassThroughEvent_Observer(this.CommonCore, this.OnUiModuleManagerPassThroughEvent);
    }
    OnUiModuleManagerPassThroughEvent(payload) {
        alert('pass through');
    }
    UpdateSettingsFromPopUpMsg(newSettings) {
        this.Logger.FuncStart(this.UpdateSettingsFromPopUpMsg.name);
        if (newSettings) {
            for (var idx = 0; idx < newSettings.length; idx++) {
                let oneSetting = newSettings[idx];
                this.SetByKey(oneSetting.SettingKey, oneSetting.ValueAsObj);
            }
        }
        this.Logger.FuncEnd(this.UpdateSettingsFromPopUpMsg.name);
    }
    ReadGenericSettingsFromStorage() {
        this.Logger.FuncStart(this.ReadGenericSettingsFromStorage.name);
        let toReturn = [];
        let storedValue = this.RepoAgent.ReadDataOfKey(PopConst/* PopConst.Const.Storage.KeyGenericSettings */.b.Const.Storage.KeyGenericSettings);
        if (storedValue) {
            toReturn = JSON.parse(storedValue.toString());
        }
        else {
            toReturn = [];
        }
        this.Logger.FuncEnd(this.ReadGenericSettingsFromStorage.name);
        return toReturn;
    }
    UpdateSettingValuesFromStorage(settingsFromStorage) {
        this.Logger.FuncStart(this.UpdateSettingValuesFromStorage.name);
        try {
            for (var idx = 0; idx < settingsFromStorage.length; idx++) {
                let storageSetting = settingsFromStorage[idx];
                let settingWrapper = this.HindSiteSettingsBucket.GetByKey(storageSetting.SettingKey);
                if (settingWrapper) {
                    let matchingSetting = settingWrapper.HindSiteSetting;
                    if (matchingSetting) {
                        matchingSetting.ValueAsObj = storageSetting.ValueAsObj;
                    }
                    else {
                        this.ErrorHand.ErrorAndContinue(this.UpdateSettingValuesFromStorage.name, 'matching setting not found ' + StaticHelpers/* StaticHelpers.SettingKeyAsString */.y.SettingKeyAsString(storageSetting.SettingKey));
                    }
                }
                else {
                    this.ErrorHand.HandleFatalError(this.UpdateSettingValuesFromStorage.name, 'null matching setting');
                }
            }
        }
        catch (err) {
            this.ErrorHand.ErrorAndContinue(this.UpdateSettingValuesFromStorage.name, err);
        }
        this.Logger.FuncEnd(this.UpdateSettingValuesFromStorage.name);
    }
    BooleanSettingChanged(settingKey, valueAsBool) {
        this.Logger.LogVal(this.BooleanSettingChanged.name, _30_SettingKey/* SettingKey */.n[settingKey]);
        this.SetByKey(settingKey, valueAsBool);
    }
    NumberSettingChanged(SettingKey, valueAsNumber) {
        this.Logger.Log(StaticHelpers/* StaticHelpers.SettingKeyAsString */.y.SettingKeyAsString(SettingKey));
        this.Logger.LogVal('valueAsNumber', valueAsNumber.toString());
        this.SetByKey(SettingKey, valueAsNumber);
    }
    SetByKey(settingKey, value) {
        let foundSetting = this.HindSiteSettingsBucket.GetByKey(settingKey);
        if (foundSetting) {
            foundSetting.HindSiteSetting.ValueAsObj = value;
            this.WriteAllSettingValuesToStorage();
        }
        else {
            this.ErrorHand.HandleFatalError(this.SetByKey.name, 'setting match not found');
        }
    }
    WriteAllSettingValuesToStorage() {
        let settingValues = [];
        for (var udx = 0; udx < this.HindSiteSettingsBucket.SettingWrappers.length; udx++) {
            let hindSiteWrapper = this.HindSiteSettingsBucket.SettingWrappers[udx];
            if (hindSiteWrapper.HindSiteSetting.ValueAsObj !== null) {
                settingValues.push({
                    SettingKey: hindSiteWrapper.HindSiteSetting.SettingKey,
                    ValueAsObj: hindSiteWrapper.HindSiteSetting.ValueAsObj,
                    SettingKeyFriendly: StaticHelpers/* StaticHelpers.SettingKeyAsString */.y.SettingKeyAsString(hindSiteWrapper.HindSiteSetting.SettingKey)
                });
            }
        }
        this.RepoAgent.WriteByKey(PopConst/* PopConst.Const.Storage.KeyGenericSettings */.b.Const.Storage.KeyGenericSettings, JSON.stringify(settingValues));
    }
}


/***/ }),

/***/ 2474:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "A": () => /* binding */ CoreFactory
});

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/70 - TypeDiscriminator.js
var _70_TypeDiscriminator = __webpack_require__(8162);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/SharedConst.js
var SharedConst = __webpack_require__(5077);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/ErrorHandler/ErrorHandlerAgent.js
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class ErrorHandlerAgent {
    constructor() {
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.IErrorHandler */.g.IErrorHandler;
        this.ErrorStack = [];
        this.errorContents = null;
    }
    IntroduceSiblings(logger, taskMonitor) {
        this.Logger = logger;
        this.TaskMonitor = taskMonitor;
        this.CreateFlag();
    }
    ThrowIfNullOrUndefined(title, testSubject) {
        if (testSubject instanceof Array) {
            testSubject.forEach((testSubject) => this.ThrowIfNullOrUndefined(title, testSubject));
        }
        else {
            if (typeof testSubject === 'undefined' || testSubject === null) {
                try {
                    if (this.TaskMonitor) {
                        this.TaskMonitor.RequestCancel(ErrorHandlerAgent.name + '.' + this.ThrowIfNullOrUndefined.name + '-' + title);
                    }
                    else {
                        console.log('No Task Monitor found');
                    }
                }
                catch (err) {
                    console.log('Error in: ' + this.ThrowIfNullOrUndefined.name + '  ' + err);
                }
                this.HandleFatalError(title, 'Failed Null check A');
            }
            else {
            }
        }
    }
    CommonThrow(errorMessage) {
        throw (errorMessage);
    }
    ThrowIfNullOrUndefinedStatic(title, testSubject) {
        if (testSubject instanceof Array) {
            testSubject.forEach((testSubject) => this.ThrowIfNullOrUndefinedStatic(title, testSubject));
        }
        else {
            if (typeof testSubject === 'undefined' || testSubject === null) {
                this.CommonThrow(title + ' Failed Null check B');
            }
        }
    }
    WarningAndContinue(container, text) {
        if (!container) {
            container = 'unknown';
        }
        if (!text) {
            text = 'unknown';
        }
        container = this.ResolveContainer(container);
        this.ErrorLogger('');
        this.ErrorLogger('\t\t** WARNING ** ' + container + ' ' + text);
        this.ErrorLogger('');
    }
    StyleFormat(colorAr, text) {
        let toReturn = '';
        toReturn = '';
        colorAr.forEach((color) => {
            toReturn += SharedConst/* SharedConst.Const.Colors.ConsoleStyles.StyleEsc */.v.Const.Colors.ConsoleStyles.StyleEsc + color;
        });
        toReturn += text + SharedConst/* SharedConst.Const.Colors.ConsoleStyles.StyleEsc */.v.Const.Colors.ConsoleStyles.StyleEsc + SharedConst/* SharedConst.Const.Colors.ConsoleStyles.StyleReset */.v.Const.Colors.ConsoleStyles.StyleReset;
        return toReturn;
    }
    DrawErrorMessage(container, text) {
        if (!container) {
            container = 'unknown';
        }
        let textToRender = [];
        let indent = '      ';
        if (!text) {
            text = ['unknown'];
        }
        if (!Array.isArray(text)) {
            textToRender = [text];
        }
        else {
            textToRender = text;
        }
        this.ErrorLogger('');
        this.ErrorLogger('');
        this.ErrorLogger('');
        this.ErrorLogger(indent + this.StyleFormat([SharedConst/* SharedConst.Const.Colors.ConsoleStyles.StyleBgRed */.v.Const.Colors.ConsoleStyles.StyleBgRed], 's) ERROR'));
        this.ErrorLogger(indent + 'container: ' + container);
        this.ErrorLogger('');
        textToRender.forEach((message) => {
            this.ErrorStack.push({
                ContainerFunc: container,
                ErrorString: message
            });
            if (message) {
                let msgSplit = message.toString().split(/\r?\n/g);
                if (msgSplit) {
                    msgSplit.forEach((msg) => {
                        this.ErrorLogger(indent + msg);
                    });
                }
            }
        });
        this.ErrorLogger('');
        this.ErrorLogger(indent + this.StyleFormat([SharedConst/* SharedConst.Const.Colors.ConsoleStyles.StyleBgRed */.v.Const.Colors.ConsoleStyles.StyleBgRed], 'e) ERROR'));
        this.ErrorLogger('');
        this.ErrorLogger('');
        this.ErrorLogger('');
    }
    ErrorAndContinue(container, text) {
        this.DrawErrorMessage(container, text);
    }
    ErrorLogger(text) {
        this.WrapTextInStars(text);
    }
    WrapTextInStars(text) {
        let maxTextWidth = 200;
        let stars = '**********';
        let starsWidth = stars.length;
        let remainingText = text;
        let maxIter = 20;
        let currIter = 0;
        while (currIter < maxIter && remainingText.length > maxTextWidth) {
            currIter++;
            let oneLineOfText = remainingText.substring(0, maxTextWidth);
            remainingText = remainingText.substring(maxTextWidth);
            console.log(stars + ' ' + oneLineOfText);
        }
        if (remainingText.length > 0) {
            console.log(stars + ' ' + remainingText);
        }
    }
    ResolveContainer(container) {
        let toReturn = '';
        if (Array.isArray(container)) {
            let isFirstInArray = true;
            container.forEach((arrayItem) => {
                if (!isFirstInArray) {
                    toReturn += '.';
                }
                isFirstInArray = false;
                toReturn += arrayItem;
            });
        }
        else {
            toReturn = container;
        }
        return toReturn;
    }
    FormatRejectMessage(container, err) {
        let toReturn = this.ResolveContainer(container);
        toReturn += ' | ' + err;
        return toReturn;
    }
    DisplayErrorFlag() {
        if (this.errorFlagContainer) {
            this.errorFlagContainer.style.display = 'block';
        }
    }
    CreateFlag() {
        this.Logger.FuncStart(this.CreateFlag.name);
        let BodyTag = document.getElementsByTagName(SharedConst/* SharedConst.Const.KeyWords.Html.Tags.Body */.v.Const.KeyWords.Html.Tags.Body)[0];
        this.errorFlagContainer = this.CreateContainer();
        this.CreateFlagContents();
        this.CreateResetButton();
        this.errorContents.appendChild(this.CancelButtonElem);
        BodyTag.appendChild(this.errorFlagContainer);
        this.Logger.FuncEnd(this.CreateFlag.name);
    }
    Reset() {
        alert('reset code needed');
    }
    CreateResetButton() {
        this.CancelButtonElem = document.createElement('input');
        this.CancelButtonElem.type = "button";
        this.CancelButtonElem.value = "Reset";
        this.CancelButtonElem.addEventListener('click', (() => this.Reset()));
    }
    CreateFlagContents() {
        this.errorContents = document.createElement('div');
        this.errorContents.classList.add('error-contents');
        let closeButton = this.CreateCloseButton();
        let headerElem = document.createElement('div');
        headerElem.innerText = "HindSite";
        headerElem.classList.add("header");
        let headWrapper = document.createElement('div');
        headWrapper.classList.add("header-wrapper");
        this.MessageDiv = document.createElement('div');
        this.MessageDiv.innerText = "Sigh...Sad Face";
        this.MessageDiv.classList.add("message");
        this.FlagTextDiv = document.createElement('div');
        headWrapper.appendChild(headerElem);
        headWrapper.appendChild(closeButton);
        this.errorContents.appendChild(headWrapper);
        this.errorContents.appendChild(this.MessageDiv);
        this.errorContents.appendChild(this.FlagTextDiv);
        this.errorFlagContainer.appendChild(this.errorContents);
    }
    HideErrorFlag(message) {
        return __awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.HideErrorFlag.name);
            if (this.errorFlagContainer) {
                this.errorFlagContainer.style.display = 'none';
            }
            this.Logger.FuncEnd(this.HideErrorFlag.name);
        });
    }
    CreateCloseButton() {
        let closeButtonElem = document.createElement('input');
        closeButtonElem.type = "button";
        closeButtonElem.value = "X";
        closeButtonElem.classList.add("close-btn");
        closeButtonElem.addEventListener('click', (() => this.CallbackOnCloseButton()));
        return closeButtonElem;
    }
    CallbackOnCloseButton() {
        this.HideErrorFlag('Closing');
    }
    CreateContainer() {
        let flagContainer = document.createElement('div');
        flagContainer.classList.add('hind-site-error-flag');
        flagContainer.style.display = 'none';
        return flagContainer;
    }
    HandleTopLevelTryCatch(container, text) {
        console.log(JSON.stringify(container));
        console.log(text);
        console.log('Top level Try/Catch');
        this.DisplayErrorFlag();
    }
    HandleFatalError(container, text) {
        let stack = new Error().stack;
        let containerTextToRender = '';
        if (Array.isArray(container)) {
            let isFirstInArray = true;
            container.forEach((subContainer) => {
                if (!isFirstInArray) {
                    containerTextToRender += '.';
                }
                isFirstInArray = false;
                containerTextToRender += subContainer;
            });
        }
        else {
            containerTextToRender = container;
        }
        this.DrawErrorMessage(containerTextToRender, [text, stack]);
        try {
            this.TaskMonitor.RequestCancel(ErrorHandlerAgent.name + '.' + this.HandleFatalError.name);
        }
        catch (err) {
            console.log(err);
        }
        this.DisplayErrorFlag();
        console.log('----- sigh...sad face ');
    }
    HandleCancelReaction(arg0, arg1) {
        console.log('Reacting to cancel');
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/StaticHelpers.js
var StaticHelpers = __webpack_require__(1579);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferChar.js
var BufferChar = __webpack_require__(9702);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferDirection.js
var BufferDirection = __webpack_require__(2580);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/GuidData.js
var GuidData = __webpack_require__(2070);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/LoggerAgent/LogWriterBuffer.js
class LogWriterBuffer {
    constructor() {
        this.FriendlyName = LogWriterBuffer.name;
        this.LogPreInitBuffer = [];
        this.bufferPrefix = '* ';
    }
    WriteText(text) {
        this.LogPreInitBuffer.push(this.bufferPrefix + text);
    }
    GetBuffer() {
        let iterCheckMax = 1000;
        let toReturn = [];
        while (this.LogPreInitBuffer.length > 0 && iterCheckMax > 0) {
            iterCheckMax--;
            toReturn.push(this.LogPreInitBuffer.shift());
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/LoggerAgent/LoggerTimer.js

class LoggerTimer {
    constructor() {
        this.TimeStart = new Date();
        this.TimeLast = this.TimeStart.getTime();
        this.TimeMarkStart = this.TimeLast;
    }
    GetTimeDiff() {
        let toReturn = '';
        let timeNow = new Date().getTime();
        let timeDiffSinceLastMs = timeNow - this.TimeLast;
        let timeDiffOVerAll = timeNow - this.TimeMarkStart;
        let toReturnSinceLast;
        let toReturnSinceStart;
        let padLength = 5;
        if (timeDiffSinceLastMs >= SharedConst/* SharedConst.Const.Logger.MinTimeDiffMs */.v.Const.Logger.MinTimeDiffMs) {
            toReturnSinceLast = this.padFront(timeDiffSinceLastMs, padLength);
        }
        else {
            toReturnSinceLast = this.padFront(' ', padLength, ' ');
        }
        ;
        toReturnSinceStart = this.padFront(timeDiffOVerAll, padLength, '0');
        toReturn = toReturnSinceStart + ' ' + toReturnSinceLast;
        this.TimeLast = timeNow;
        return toReturn;
    }
    padFront(input, desiredLength = 2, padChar = '0') {
        let toReturn = input.toString();
        let maxIter = 10;
        while ((toReturn.length < desiredLength) && maxIter > 0) {
            maxIter--;
            toReturn = padChar + toReturn;
        }
        return toReturn;
    }
    LogTimeStamp() {
        var result = this.padFront(this.TimeStart.getDate()) + "/" + this.padFront(this.TimeStart.getMonth() + 1) + "/" + this.TimeStart.getFullYear() + " " + this.padFront(this.TimeStart.getHours()) + ":" + this.padFront(this.TimeStart.getMinutes());
        return result;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/LoggerAgent/LoggerAgent.js
var LoggerAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class LoggerAgent {
    constructor() {
        this.__debugTextChangedCallbacks = [];
        this.AllLogWriters = [];
        this.MaxIndent = 20;
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.ILoggerAgent */.g.ILoggerAgent;
        this.UseTimeStamp = true;
        this.MaxDepthBeforeThrow = 2000;
        this.Instantiate();
    }
    Instantiate() {
        this.Timer = new LoggerTimer;
        this.BufferWriter = new LogWriterBuffer();
        this.AddWriter(this.BufferWriter);
        this.__callDepth = -1;
        this.LogVal('TimeStamp', this.Timer.LogTimeStamp());
    }
    IntroduceSiblings(taskMonitor, errorHand) {
        this.TaskMonitor = taskMonitor;
        this.ErrorHand = errorHand;
    }
    FlushBuffer() {
        this.RemoveWriter(this.BufferWriter);
        this.LogVal('TimeStamp B', Date.now());
        let bufferAr = this.BufferWriter.GetBuffer();
        for (var idx = 0; idx < bufferAr.length; idx++) {
            this.Log(bufferAr[idx]);
        }
    }
    RemoveWriter(BufferWriter) {
        for (var idx = 0; idx < this.AllLogWriters.length; idx++) {
            let candidate = this.AllLogWriters[idx];
            if (candidate == BufferWriter) {
                this.AllLogWriters.splice(idx, 1);
                break;
            }
        }
    }
    AddWriter(writter) {
        this.HasWriters = true;
        this.AllLogWriters.push(writter);
    }
    SectionMarker(sectionTag) {
        this.Log("");
        this.Log("======================= " + sectionTag + " =======================");
        this.Log("");
    }
    IsNotNullOrUndefinedBool(title, subject) {
        var toReturn = false;
        if (subject) {
            if ((typeof subject) === 'undefined') {
                this.LogVal(title + ' Is Not Undefined', '!!! false !!!');
            }
            else {
                toReturn = true;
            }
        }
        else {
            this.LogVal(title + ' Is Not Null', '!!! false !!!');
        }
        return toReturn;
    }
    HandlerClearDebugText(self, verify = false) {
        this.FuncStart(this.HandlerClearDebugText.name);
        var proceed = true;
        if (verify) {
            proceed = confirm('Clear Debug TextArea ?');
        }
        if (proceed) {
            var newText = '--- Debug Text Reset ---';
        }
        this.FuncEnd(this.HandlerClearDebugText.name);
    }
    MarkerA() { this.__markerRaw('A'); }
    MarkerB() { this.__markerRaw('B'); }
    MarkerC() { this.__markerRaw('C'); }
    MarkerD() { this.__markerRaw('D'); }
    MarkerE() { this.__markerRaw('E'); }
    MarkerF() { this.__markerRaw('F'); }
    __markerRaw(marker) {
        this.Log('Marker ' + marker);
    }
    LogAsJsonPretty(texValName, jsonObj) {
        try {
            this.LogVal(texValName, JSON.stringify(jsonObj, null, 2));
        }
        catch (err) {
            this.Log('Unable to stringify obj');
        }
    }
    LogVal(textValName, textVal) {
        if (typeof textVal === 'undefined') {
            textVal = '{undefined}';
        }
        else if (textVal === null) {
            textVal = '{null}';
        }
        else {
            var asGuid = textVal;
            if (typeof asGuid === typeof GuidData/* GuidData */.k) {
                textVal = asGuid.Raw;
            }
        }
        textVal = textVal.toString();
        textValName = StaticHelpers/* StaticHelpers.BufferString */.y.BufferString(textValName.toString(), 26, BufferChar/* BufferChar.space */.D.space, BufferDirection/* BufferDirection.right */.z.right);
        const debugPrefix = '~~ ';
        let rawText = debugPrefix + textValName + ' : ' + textVal;
        if (this.AltColor === SharedConst/* SharedConst.Const.Colors.ConsoleStyles.StyleFgBlue */.v.Const.Colors.ConsoleStyles.StyleFgBlue) {
            this.AltColor = SharedConst/* SharedConst.Const.Colors.ConsoleStyles.StyleFgMagenta */.v.Const.Colors.ConsoleStyles.StyleFgMagenta;
        }
        else {
            this.AltColor = SharedConst/* SharedConst.Const.Colors.ConsoleStyles.StyleFgBlue */.v.Const.Colors.ConsoleStyles.StyleFgBlue;
        }
        let formattedText = this.StyleFormat(this.AltColor, rawText);
        this.Log(formattedText);
    }
    LogImportant(text) {
        text = this.StyleFormat(SharedConst/* SharedConst.Const.Colors.ConsoleStyles.StyleBgYellow */.v.Const.Colors.ConsoleStyles.StyleBgYellow, text);
        this.Log(text);
    }
    Log(text, hasPrefix = false) {
        return LoggerAgent_awaiter(this, void 0, void 0, function* () {
            if (this.HasWriters) {
                var indent = '  ';
                let indentDepth = this.__callDepth % this.MaxIndent;
                for (var idx = 0; idx < indentDepth; idx++) {
                    text = indent + text;
                }
                var prefixLength = 3;
                if (!hasPrefix) {
                    for (var idx = 0; idx < prefixLength; idx++) {
                        text = ' ' + text;
                    }
                }
                this.__triggerAllDebugTextChangedCallbacks({
                    NewText: text,
                    Append: true
                });
                if (this.UseTimeStamp) {
                    let timeDiff = this.Timer.GetTimeDiff() + '  ';
                    text = timeDiff + text;
                }
                this.WriteToAllWriters(text);
            }
        });
    }
    WriteToAllWriters(text) {
        if (this.AllLogWriters) {
            this.AllLogWriters.forEach((oneWriter) => {
                if (oneWriter) {
                    try {
                        oneWriter.WriteText(text);
                    }
                    catch (err) {
                        console.log(this.WriteToAllWriters.name + ' ' + oneWriter.FriendlyName + ' | ' + err);
                    }
                }
                else {
                    console.log('Null writer');
                }
            });
        }
    }
    __triggerAllDebugTextChangedCallbacks(data) {
        for (var idx = 0; idx < this.__debugTextChangedCallbacks.length; idx++) {
            var oneCallback = this.__debugTextChangedCallbacks[idx];
            oneCallback.Func(oneCallback.Caller, data);
        }
    }
    StyleFormat(color, text) {
        return SharedConst/* SharedConst.Const.Colors.ConsoleStyles.StyleEsc */.v.Const.Colors.ConsoleStyles.StyleEsc + color + text + SharedConst/* SharedConst.Const.Colors.ConsoleStyles.StyleEsc */.v.Const.Colors.ConsoleStyles.StyleEsc + SharedConst/* SharedConst.Const.Colors.ConsoleStyles.StyleReset */.v.Const.Colors.ConsoleStyles.StyleReset;
    }
    CtorName(ctorName) {
        this.Log('Constructor: ' + ctorName);
    }
    resolveFuncText(text) {
        let displayText = '';
        if (Array.isArray(text)) {
            let isFirst = true;
            text.forEach((oneText) => {
                if (!isFirst) {
                    displayText += '.';
                }
                isFirst = false;
                displayText += oneText;
            });
        }
        else {
            displayText = text.toString();
        }
        return displayText;
    }
    AddOptionalValueToText(text, optionalValue) {
        let toReturn = text;
        if (optionalValue) {
            optionalValue = optionalValue.toString();
            if (optionalValue.length > 0) {
                toReturn = toReturn + ' : ' + optionalValue;
            }
        }
        return toReturn;
    }
    CalcFuncStartEndColor() {
        let toReturn = '';
        let modValue = this.__callDepth % 2;
        if (modValue > 0) {
            toReturn = SharedConst/* SharedConst.Const.Colors.ConsoleStyles.StyleFgGreen */.v.Const.Colors.ConsoleStyles.StyleFgGreen;
        }
        else {
            toReturn = SharedConst/* SharedConst.Const.Colors.ConsoleStyles.StyleFgBlue */.v.Const.Colors.ConsoleStyles.StyleFgBlue;
        }
        return toReturn;
    }
    FuncStart(text, optionalValue) {
        text = this.resolveFuncText(text);
        if (optionalValue) {
            text = this.AddOptionalValueToText(text, optionalValue);
        }
        text = 's' + ' ' + this.__callDepth + ') ' + text;
        let formatted = this.StyleFormat(this.CalcFuncStartEndColor(), text);
        this.Log(formatted, true);
        this.__callDepth++;
        if (this.__callDepth > this.MaxDepthBeforeThrow) {
            throw ('Logger - Max Depth Exceeded: ' + this.__callDepth);
        }
    }
    CTORStart(text) {
        this.FuncStart("[CTOR] " + text);
    }
    CTOREnd(text) {
        this.FuncEnd("[CTOR] " + text);
    }
    FuncEnd(text, optionalValueInput) {
        text = this.resolveFuncText(text);
        this.__callDepth--;
        if (this.__callDepth < 0) {
            this.__callDepth = 0;
        }
        text = 'e' + ' ' + this.__callDepth + ') ' + text;
        if (optionalValueInput) {
            text = this.AddOptionalValueToText(text, optionalValueInput);
        }
        let formatted = this.StyleFormat(this.CalcFuncStartEndColor(), text);
        this.Log(formatted, true);
    }
    NotNullCheck(title, value) {
        if (typeof value === 'undefined') {
            this.LogVal(title, 'Is Undefined');
        }
        else if (!value) {
            this.LogVal(title, 'Is Null');
        }
        else {
            this.LogVal(title, 'Is Not Null');
        }
    }
    IsNullOrUndefined(subject) {
        var toReturn = '{unknown}';
        if (subject) {
            if ((typeof subject) === 'undefined') {
                toReturn = 'Is Undefined';
            }
            else {
                toReturn = 'Not Null';
            }
        }
        else {
            toReturn = 'Is Null';
        }
        return toReturn;
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/TaskMutationType.js
var TaskMutationType = __webpack_require__(2573);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/TaskMonitor/TaskMonitor.js


class TaskMonitor {
    constructor() {
        this.TaskBucketStarted = [];
        this.TaskBucketCompleted = [];
        this.DelaySendMs = 20;
        this.CancelRequestedFlag = false;
        this.IdleNotificationSent = false;
        this.MinElapsedBeforeIsIdleMs = 20;
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.TaskMonitor */.g.TaskMonitor;
    }
    IntroduceSiblings(logger, errorHand) {
        this.Logger = logger;
        this.ErrorHand = errorHand;
    }
    IntroduceCoreSiblings(logger, errorHand) {
        this.Logger = logger;
        this.ErrorHand = errorHand;
    }
    ResetCancel() {
        this.CancelRequestedFlag = false;
    }
    InitAfterErrorHand(taskMutationEvent_Subject) {
        this.TaskMutationEvent_Subject = taskMutationEvent_Subject;
    }
    AsyncTaskStarted(name) {
        this.MarkActivity();
        this.TaskBucketStarted.push(name);
        this.BuildAndSendPayload(TaskMutationType/* TaskMutationType.TaskAdded */.T.TaskAdded);
    }
    MarkActivity() {
        this.LastActivityTime = new Date().getTime();
        this.IdleNotificationSent = false;
    }
    NotifyWaiting(waitingMessage) {
        if (waitingMessage) {
            this.BuildAndSendPayload(TaskMutationType/* TaskMutationType.TaskWaitingYes */.T.TaskWaitingYes, waitingMessage);
        }
        else {
            this.BuildAndSendPayload(TaskMutationType/* TaskMutationType.TaskWaitingNo */.T.TaskWaitingNo, waitingMessage);
        }
    }
    IsTaskListEmpty() {
        return this.TaskBucketStarted.length === 0;
    }
    totalTaskCount() {
        return this.TaskBucketCompleted.length + this.TaskBucketStarted.length;
    }
    AsyncTaskCompleted(name) {
        this.MarkActivity();
        let foundIndex = this.TaskBucketStarted.indexOf(name);
        if (foundIndex > -1) {
            let toRemove = this.TaskBucketStarted.splice(foundIndex, 1);
            this.TaskBucketCompleted.push(toRemove[0]);
            this.SendIfEmpty();
        }
        else {
            console.log('Error - mismatch on tasks ' + name);
            console.log(JSON.stringify(this.TaskBucketStarted, null, 2));
        }
        this.BuildAndSendPayload(TaskMutationType/* TaskMutationType.TaskCompleted */.T.TaskCompleted);
    }
    LogValues() {
        this.Logger.LogImportant(this.LogValues.name + ' Task remaining : total - ' + this.TaskBucketStarted.length + ' : ' + this.totalTaskCount());
        if (this.AsyncTaskStarted.length < 20) {
            this.Logger.LogAsJsonPretty('TaskBucketStarted', this.TaskBucketStarted);
        }
    }
    SendIfEmpty() {
        if (this.IsTaskListEmpty()) {
            this.DelaySend();
        }
    }
    BuildAndSendPayload(mutationType, additionalMessage = false) {
        let payload = {
            MutationType: mutationType,
            IsTaskEmpty: this.IsTaskListEmpty(),
            RemainingTaskCount: this.TaskBucketStarted.length,
            TotalTaskCount: this.totalTaskCount(),
            CompletedCount: this.TaskBucketCompleted.length,
            AdditionalMessage: additionalMessage.toString(),
        };
        this.TaskMutationEvent_Subject.NotifyObserversAsync(payload);
    }
    TimeRemainingBeforeIdle() {
        let timeElapsedSinceLastActivity = new Date().getTime() - this.LastActivityTime;
        let timeRemainingBeforeIdle = this.MinElapsedBeforeIsIdleMs - timeElapsedSinceLastActivity;
        if (timeRemainingBeforeIdle < 0) {
            timeRemainingBeforeIdle = 0;
        }
        return timeRemainingBeforeIdle;
    }
    TasksHaveGoneIdle() {
        let timeRemaining = this.TimeRemainingBeforeIdle();
        let toReturn = timeRemaining < 1;
        return toReturn;
    }
    SendTaskHaveGoneIdle() {
        this.IdleNotificationSent = true;
        this.BuildAndSendPayload(TaskMutationType/* TaskMutationType.TasksHaveGoneIdle */.T.TasksHaveGoneIdle);
    }
    IsEmptyAndIdle() {
        let toReturn = this.IsTaskListEmpty() && this.TasksHaveGoneIdle();
        return toReturn;
    }
    DelaySend() {
        if (!this.IdleNotificationSent) {
            if (this.IsEmptyAndIdle()) {
                this.SendTaskHaveGoneIdle();
            }
            else {
                setTimeout(() => {
                    this.DelaySend();
                }, this.DelaySendMs);
            }
        }
    }
    RequestCancel(requestor) {
        console.log("Cancel Requested by: " + requestor);
        this.CancelRequestedFlag = true;
    }
    IsCancelRequested() {
        return this.CancelRequestedFlag;
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/_HindSiteEvent/HindeSiteEvent_Subject.js
var HindeSiteEvent_Subject = __webpack_require__(4697);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/TaskListMutationEvent/TaskListMutationEvent_Subject.js


class TaskListMutationEvent_Subject extends HindeSiteEvent_Subject/* _HindeSiteEvent_Subject */.C {
    constructor() {
        super(...arguments);
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.TaskListMutationEvent_Subject */.g.TaskListMutationEvent_Subject;
        this.ShowLogActions = false;
        this.Friendly_Subject = TaskListMutationEvent_Subject.name;
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/_CommonCoreBase.js
var _CommonCoreBase = __webpack_require__(6679);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/CoreFactory.js





class CoreFactory {
    static BuildCommonCore() {
        let commonCore = new _CommonCoreBase/* CommonCore */.B();
        commonCore.Logger = new LoggerAgent();
        commonCore.TaskMonitor = new TaskMonitor();
        commonCore.ErrorHand = new ErrorHandlerAgent();
        commonCore.Logger.IntroduceSiblings(commonCore.TaskMonitor, commonCore.ErrorHand);
        commonCore.TaskMonitor.IntroduceSiblings(commonCore.Logger, commonCore.ErrorHand);
        commonCore.ErrorHand.IntroduceSiblings(commonCore.Logger, commonCore.TaskMonitor);
        let taskMutationEvent_Subject = new TaskListMutationEvent_Subject(commonCore);
        commonCore.TaskMonitor.InitAfterErrorHand(taskMutationEvent_Subject);
        return commonCore;
    }
}


/***/ }),

/***/ 6680:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "r": () => /* binding */ DefaultMsgContentToController
});

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/ReplyCommandMsgFlag.js
var ReplyCommandMsgFlag = __webpack_require__(8501);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfSnapshots.js
var DefaultStateOfSnapshots = __webpack_require__(9102);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultMessageContentToController_Payload.js

class DefaultMessageContentToController_Payload {
    constructor() {
        this.StateOfStorageSnapShots = new DefaultStateOfSnapshots/* DefaultStateOfStorageSnapshots */.Z();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/DefaultMsgContentToController.js


class DefaultMsgContentToController {
    constructor(replyCommandFlag) {
        this.Payload = new DefaultMessageContentToController_Payload();
        this.MsgFlagReply = ReplyCommandMsgFlag/* ReplyCommandMsgFlag.Unknown */.o.Unknown;
        this.MsgFlagReply = replyCommandFlag;
    }
}


/***/ }),

/***/ 9102:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ DefaultStateOfStorageSnapshots
/* harmony export */ });
class DefaultStateOfStorageSnapshots {
    constructor() {
        this.CreationDate = new Date(1970);
        this.SnapShots = [];
        this.FavoriteCount = 0;
        this.PlainCount = 0;
        this.SnapShotsAutoCount = 0;
    }
}


/***/ }),

/***/ 3923:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "b": () => /* binding */ PopConst
/* harmony export */ });
class PopConst {
}
PopConst.Const = {
    ClassNames: {
        HS: {
            Collapsed: 'in',
            Down: 'down',
            Buttons: {
                AdminB: 'admin-b',
                Cancel: 'cancel',
                CompactCe: 'details',
                Edit: 'edit',
                GoContentEditor: 'ce',
                GoDesktop: 'desktop-icon',
                Ping: 'edit',
                PresentationDetails: 'details',
                QuickPublish: 'publish',
                RemoveFromStorage: 'delete-snapshot',
                RestoreNewTab: 'restore-snapshot',
                RestoreSameTab: 'restore-snapshot',
                RestoreStateTBD: 'restore-snapshot',
                ScModeEdit: 'edit',
                ScModeNormal: 'normal',
                ScModePrev: 'preview-icon',
                TakeSnapShot: 'take-snapshot',
                ToggleFavorite: 'btn-favorite',
                UpdateNickname: 'set-nickname',
                Icons: {
                    CloseWindow: 'icon-close-window',
                    AddContentEditorTab: 'icon-add-ce-tab',
                }
            },
        },
    },
    ElemId: {
        InputNickname: 'id-input-nickname',
        HindSiteParentInfo: 'spanParentInfo',
        HS: {
            SelectHeaderAuto: 'sel-header-auto',
            SelectHeaderAutoTitle: 'sel-header-auto-title',
            SelectHeaderFavorite: 'sel-header-favorite',
            SelectHeaderFavoriteTitle: 'sel-header-favorite-title',
            SelectHeaderManual: 'sel-header-manual',
            SelectHeaderManualTitle: 'sel-header-manual-title',
            TabId: 'orig-win-id',
        }
    },
    Numbers: {
        MinMenuHeight: 600,
        MinMenuWidth: 600,
        MaxAutoSaveCount: 10,
        DefaultAutoSaveIntervalMin: 0,
    },
    Notify: {
        Default: 'Complete',
        PublishComplete: 'Publishing Complete',
    },
    Selector: {
        HS: {
            AutoSnapshotBeforeWindowChange: '[id=id-settings-auto-snapshot-on-window-change]',
            BuildStamp: '[id=build-stamp]',
            DivOverlayModule: '[id=menu-overlay]',
            FeedbackBrowserState: '[id=feedback-div-browser-state]',
            FeedbackPopUpState: '[id=feedback-div-pop-up-state]',
            FeedbackContentState: '[id=feedback-div-state-content]',
            FeedbackLogElement: '[id=feedback-pop-up-log]',
            FeedbackMessages: '[id=feedback-messages]',
            FeedbackStorage: '[id=feedback-storage]',
            HsCancel: '[id=Cancel]',
            HsRemoveFromStorage: '[id=id-ph-remove-one-from-local-storage]',
            HsRestoreWindowStateSameTab: '[id=id-ph-btn-restore-state-same-tab]',
            HsRestoreWindowStateNewTab: '[id=id-ph-btn-restore-state-new-tab]',
            iCBoxdSettingsAutoLogin: '[id=id-ph-settings-auto-login]',
            IdFieldSetDebug: '[id=id-fieldset-debug]',
            ToggleFavorite: '[id=id-ph-btn-toggle-favorite]',
            SettingAutoSaveInterval: '[id=id-settings-auto-save-interval]',
            SettingAutoSaveMaxCount: '[id=id-settings-auto-save-max-count]',
            SettingAutoSaveSnapshotRetainDays: '[id=id-settings-auto-save-snap-shot-retain-days]',
            SettingAutoRenameCeTabButton: '[id=id-settings-auto-rename-ce-tab-button]',
            SettingNotUsed: '[id=id-settings-not-used]',
            TakeSnapshot: '[id=id-ph-btn-take-snapshot]',
            UpdateNicknameB: '[id=id-ph-btn-update-nickname]',
            ModuleContainers: {
                SettingShowDebuggingModules: '[id=id-setting-show-debugging-modules]',
                BtnAddContentEditor: '[id=id-ph-btn-add-drframe-content-editor]',
                BtnAdminB: '[id=id-ph-btn-adminb]',
                BtnCompactScUi: '[id=id-ph-btn-compact-sc-ui]',
                BtnDebugClearPopUpConsole: '[id=id-container-btn-debug-clear-console]',
                BtnDebugForceAutoSnapShot: '[id=id-container-btn-debug-force-auto-snapshot]',
                BtnDebugTriggerContentFataError: '[id=id-container-btn-debug-trigger-content-fatal-error]',
                BtnDebugTriggerPopUpReload: '[id=id-container-btn-debug-trigger-pop-up-reload]',
                BtnGoContentEditor: '[id=id-ph-btn-go-content-editor]',
                BtnModeEdit: '[id=id-ph-btn-sc-mode-edit]',
                BtnModeNorm: '[id=id-ph-btn-norm]',
                BtnModePrev: '[id=id-ph-btn-prev]',
                BtnPresentationDetails: '[id=id-ph-btn-presentation-details]',
                BtnQuickPublish: '[id=id-ph-btn-quick-publish]',
                BtnWindowClose: '[id=id-ph-close-window]',
                SettingEnableDebugging: '[id=id-ph-settings-enable-debugging]',
                Desktop: '[id=id-ph-btn-desktop]',
                LgndBrowserState: '[id=lgnd-browser-state]',
                LgndContentState: '[id=lgnd-content-state]',
                LgndForeSite: '[id=lgnd-fore-site]',
                LgndHindSite: '[id=lgnd-hind-site]',
                LgndMessages: '[id=lgnd-messages]',
                LgndPopUpDebug: '[id=lgnd-pop-up-debug]',
                LgndPopUpLog: '[id=lgnd-pop-up-log]',
                LgndPopUpState: '[id=lgnd-pop-up-state]',
                LgndSettings: '[id=lgnd-settings]',
                PrefAutoLogin: '[id=id-ph-settings-auto-login]',
                SelStateSnapShot: '[id=id-container-select-state]',
                SettingAutoRestoreState: '[id=id-settings-auto-restore-state]',
                SettingDebugKeepDialogOpen: '[id=id-ph-settings-debug-keep-dialog-open]',
                SettingUseCompactCss: '[id=id-ph-settings-use-compact]',
            }
        },
    },
    Settings: {
        Defaults: {
            AutoSaveEnabled: false,
            AutoRestoreState: false,
            DebugKeepDialogOpen: false,
            LgndBrowserState: false,
            LgndContentState: false,
            LgndForeSite: true,
            LgndHindSite: true,
            LgndMessages: false,
            LgndPopUpLog: false,
            LgndPopUpState: false,
            LgndPopUpDebug: false,
            LgndSettings: false,
        }
    },
    Storage: {
        SettingsSuffix: 'todo',
        KeyGenericSettings: 'HindSite.' + 'GenericSettings',
        StorageLogKeyPrefix: 'HindSite.' + 'Log.',
        Defaults: {
            bool: {
                AutoSaveEnabled: false,
                AutoLogin: false,
                DefaultDebugKeepDialogOpen: false,
                AutoSnapshotBeforeWindowChange: false,
            }
        }
    },
    SnapShotFormat: {
        lenTimestamp: 13,
        lenNickname: 16,
        lenPageType: 7,
        lenPrefix: 6,
        lenShortId: 4,
        colSep: ' - ',
        lenCeCount: 3,
        MainSectionNode: 9,
        lenActiveNode: 9,
        lenFavorite: 3,
    },
    Timeouts: {
        WaitBeforeRemovingCompleteFlag: 1500,
        AutoLoginCheckInterval: 3000,
    },
};


/***/ }),

/***/ 5041:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "k": () => /* binding */ CommandTypeFlag
/* harmony export */ });
var CommandTypeFlag;
(function (CommandTypeFlag) {
    CommandTypeFlag[CommandTypeFlag["Unknown"] = 0] = "Unknown";
    CommandTypeFlag[CommandTypeFlag["PopUp"] = 1] = "PopUp";
    CommandTypeFlag[CommandTypeFlag["Content"] = 2] = "Content";
    CommandTypeFlag[CommandTypeFlag["Api"] = 3] = "Api";
    CommandTypeFlag[CommandTypeFlag["ContentInternal"] = 4] = "ContentInternal";
})(CommandTypeFlag || (CommandTypeFlag = {}));


/***/ }),

/***/ 5195:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "g": () => /* binding */ UiEnableState
/* harmony export */ });
var UiEnableState;
(function (UiEnableState) {
    UiEnableState[UiEnableState["Unknown"] = 0] = "Unknown";
    UiEnableState[UiEnableState["Enabled"] = 1] = "Enabled";
    UiEnableState[UiEnableState["Disabled"] = 2] = "Disabled";
})(UiEnableState || (UiEnableState = {}));


/***/ }),

/***/ 6270:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "y": () => /* binding */ ModuleKey
/* harmony export */ });
var ModuleKey;
(function (ModuleKey) {
    ModuleKey[ModuleKey["Unknown"] = 0] = "Unknown";
    ModuleKey[ModuleKey["BroswerState"] = 1] = "BroswerState";
    ModuleKey[ModuleKey["ButtonCancel"] = 2] = "ButtonCancel";
    ModuleKey[ModuleKey["ButtonClose"] = 3] = "ButtonClose";
    ModuleKey[ModuleKey["ButtonTypical"] = 4] = "ButtonTypical";
    ModuleKey[ModuleKey["ButtonWithInput"] = 5] = "ButtonWithInput";
    ModuleKey[ModuleKey["ContentState"] = 6] = "ContentState";
    ModuleKey[ModuleKey["FeedbackModule"] = 7] = "FeedbackModule";
    ModuleKey[ModuleKey["PopUpState"] = 8] = "PopUpState";
    ModuleKey[ModuleKey["SelectSnapShot"] = 9] = "SelectSnapShot";
    ModuleKey[ModuleKey["CheckBox"] = 10] = "CheckBox";
    ModuleKey[ModuleKey["AccordionTypical"] = 11] = "AccordionTypical";
    ModuleKey[ModuleKey["Number"] = 12] = "Number";
    ModuleKey[ModuleKey["AccordionDebugging"] = 13] = "AccordionDebugging";
})(ModuleKey || (ModuleKey = {}));


/***/ }),

/***/ 8501:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "o": () => /* binding */ ReplyCommandMsgFlag
/* harmony export */ });
var ReplyCommandMsgFlag;
(function (ReplyCommandMsgFlag) {
    ReplyCommandMsgFlag[ReplyCommandMsgFlag["Unknown"] = 0] = "Unknown";
    ReplyCommandMsgFlag[ReplyCommandMsgFlag["RespCurState"] = 10499463] = "RespCurState";
    ReplyCommandMsgFlag[ReplyCommandMsgFlag["RespListeningAndReady"] = 10781265] = "RespListeningAndReady";
    ReplyCommandMsgFlag[ReplyCommandMsgFlag["RespNotReady"] = 10058031] = "RespNotReady";
    ReplyCommandMsgFlag[ReplyCommandMsgFlag["RespTaskFailed"] = 10685617] = "RespTaskFailed";
    ReplyCommandMsgFlag[ReplyCommandMsgFlag["RespTaskSuccessful"] = 10030157] = "RespTaskSuccessful";
    ReplyCommandMsgFlag[ReplyCommandMsgFlag["RespFailedDidNotValidate"] = 10922052] = "RespFailedDidNotValidate";
})(ReplyCommandMsgFlag || (ReplyCommandMsgFlag = {}));


/***/ }),

/***/ 367:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "i": () => /* binding */ SettingFlavor
/* harmony export */ });
var SettingFlavor;
(function (SettingFlavor) {
    SettingFlavor[SettingFlavor["unknown"] = 0] = "unknown";
    SettingFlavor[SettingFlavor["PopUp"] = 1] = "PopUp";
    SettingFlavor[SettingFlavor["ContentAndPopUpStoredInPopUp"] = 2] = "ContentAndPopUpStoredInPopUp";
    SettingFlavor[SettingFlavor["ContentAndPopUpStoredInEach"] = 3] = "ContentAndPopUpStoredInEach";
    SettingFlavor[SettingFlavor["ContentOnly"] = 4] = "ContentOnly";
})(SettingFlavor || (SettingFlavor = {}));


/***/ }),

/***/ 3881:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "S": () => /* binding */ SettingType
/* harmony export */ });
var SettingType;
(function (SettingType) {
    SettingType[SettingType["Unknown"] = 0] = "Unknown";
    SettingType[SettingType["BoolCheckBox"] = 1] = "BoolCheckBox";
    SettingType[SettingType["AccordionTypical"] = 2] = "AccordionTypical";
    SettingType[SettingType["AccordionDebugging"] = 3] = "AccordionDebugging";
    SettingType[SettingType["Number"] = 4] = "Number";
})(SettingType || (SettingType = {}));


/***/ }),

/***/ 2573:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "T": () => /* binding */ TaskMutationType
/* harmony export */ });
var TaskMutationType;
(function (TaskMutationType) {
    TaskMutationType[TaskMutationType["TaskAdded"] = 0] = "TaskAdded";
    TaskMutationType[TaskMutationType["TaskCompleted"] = 1] = "TaskCompleted";
    TaskMutationType[TaskMutationType["TasksHaveGoneIdle"] = 2] = "TasksHaveGoneIdle";
    TaskMutationType[TaskMutationType["TaskWaitingNo"] = 3] = "TaskWaitingNo";
    TaskMutationType[TaskMutationType["TaskWaitingYes"] = 4] = "TaskWaitingYes";
})(TaskMutationType || (TaskMutationType = {}));


/***/ }),

/***/ 4099:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "f": () => /* binding */ UiPresence
/* harmony export */ });
var UiPresence;
(function (UiPresence) {
    UiPresence[UiPresence["Unknown"] = 0] = "Unknown";
    UiPresence[UiPresence["HasUi"] = 1] = "HasUi";
    UiPresence[UiPresence["HasNoUi"] = 2] = "HasNoUi";
})(UiPresence || (UiPresence = {}));


/***/ }),

/***/ 8423:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "M": () => /* binding */ SingleClickEvent_Observer
/* harmony export */ });
/* harmony import */ var _Enums_70_TypeDiscriminator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8162);
/* harmony import */ var _HindSiteEvent_HindSiteEvent_Observer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2005);


class SingleClickEvent_Observer extends _HindSiteEvent_HindSiteEvent_Observer__WEBPACK_IMPORTED_MODULE_1__/* ._HindSiteEvent_Observer */ .k {
    constructor(commonCore, callback) {
        super(commonCore, SingleClickEvent_Observer.name, callback);
        this.TypeDiscriminator = _Enums_70_TypeDiscriminator__WEBPACK_IMPORTED_MODULE_0__/* .TypeDiscriminator.SingleClickEvent_Observer */ .g.SingleClickEvent_Observer;
    }
}


/***/ }),

/***/ 6538:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "T": () => /* binding */ SingleClickEvent_Subject
/* harmony export */ });
/* harmony import */ var _Enums_70_TypeDiscriminator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8162);
/* harmony import */ var _HindSiteEvent_HindeSiteEvent_Subject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4697);


class SingleClickEvent_Subject extends _HindSiteEvent_HindeSiteEvent_Subject__WEBPACK_IMPORTED_MODULE_1__/* ._HindeSiteEvent_Subject */ .C {
    constructor() {
        super(...arguments);
        this.TypeDiscriminator = _Enums_70_TypeDiscriminator__WEBPACK_IMPORTED_MODULE_0__/* .TypeDiscriminator.SingleClickEvent_Subject */ .g.SingleClickEvent_Subject;
        this.ShowLogActions = true;
    }
}


/***/ }),

/***/ 1939:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Q": () => /* binding */ HindeCore
/* harmony export */ });
/* harmony import */ var _CommonCoreBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6679);

class HindeCore extends _CommonCoreBase__WEBPACK_IMPORTED_MODULE_0__/* .CommonCore */ .B {
    constructor(commonCore) {
        super();
        this.ErrorHand = commonCore.ErrorHand;
        this.Logger = commonCore.Logger;
        this.TaskMonitor = commonCore.TaskMonitor;
    }
}


/***/ }),

/***/ 3263:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "c": () => /* binding */ _FrontBase
/* harmony export */ });
/* harmony import */ var _CommonCoreBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6679);

class _FrontBase extends _CommonCoreBase__WEBPACK_IMPORTED_MODULE_0__/* ._CommonBase */ .a {
    constructor(hindeCore) {
        super(hindeCore);
        this.Logger = hindeCore.Logger;
        this.HindeCore = hindeCore;
        this.ErrorHand = hindeCore.ErrorHand;
        this.TaskMonitor = hindeCore.TaskMonitor;
    }
}


/***/ })

},
0,[[6141,813,54,407]]]);