/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/_CommonCoreBase.js
class CommonCore {
    constructor() {
        this.Logger = null;
        this.ErrorHand = null;
        this.TaskMonitor = null;
    }
}
class _CommonBase {
    constructor(commonCore) {
        this.CommonCore = null;
        this.Logger = null;
        this.ErrorHand = null;
        this.TaskMonitor = null;
        this.SetCore(commonCore);
    }
    SetCore(commonCore) {
        if (commonCore !== null) {
            this.CommonCore = commonCore;
            this.Logger = commonCore.Logger;
            this.ErrorHand = commonCore.ErrorHand;
            this.TaskMonitor = commonCore.TaskMonitor;
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/SharedConst.js
class SharedConst {
}
SharedConst.Const = {
    Colors: {
        colorContent: 'cyan',
        colorLayout: 'lightsteelblue',
        colorMediaLibrary: 'chocolate',
        colorSystem: 'lightgreen',
        colorTemplates: 'white',
        ConsoleStyles: {
            StyleBgYellow: "[43m",
            StyleBgRed: "[41m",
            StyleEsc: "\x1b",
            StyleFgBlue: "[34m",
            StyleFgGreen: "[32m",
            StyleFgMagenta: "[35m",
            StyleFgRed: "[31m",
            StyleFgYellow: "[33m",
            StyleReset: "[0m",
        }
    },
    Debug: {
        ForceLoggingEnabled: false,
        SpeedUpAutoSaveIntervalFactor: 3,
    },
    IterHelper: {
        GrowthPerIteration: 0.5,
        MaxCount: {
            Default: 10,
            OverridePublishing: 15,
        },
        Timeouts: {
            Max: 3000,
            Default: 100,
        },
    },
    KeyWords: {
        Html: {
            Tags: {
                Body: 'body',
            },
            beforeend: 'beforeend',
            optgroup: 'optgroup',
            Checkbox: 'checkbox',
            Checked: 'checked',
            Input: 'input',
            Label: 'label',
            For: 'for',
            Text: 'text',
            Number: 'number',
        },
        Javascript: {
            ReadyStates: {
                Complete: "complete"
            },
            Events: {
                Message: "message",
            },
        },
        NodeTagName: {
            IFrame: 'IFRAME',
        },
    },
    Logger: {
        MinTimeDiffMs: 100
    },
    ObjDiscriminator: {},
    Settings: {
        Defaults: {
            EnableDebugging: false,
            LogToStorage: false,
            UseCompactCss: false,
            LastUsedLogToStorageKey: 0
        }
    },
    QueryStringHeValues: {
        heTemplateManager: "template%20manager",
    },
    QueryStringKey: {
        XmlControl: 'xmlcontrol',
    },
    Regex: {
        ContentEditor: /Content.*?Editor/ig,
        CleanGuid: /{|-|}/ig,
        NbSp: /&nbsp;/ig,
        QueryStrSeparatorQuest: /\?/gi,
        Path: {
            PackageDesigner: /\/sitecore\/shell/ig,
        },
        PageType: {
            Shell: /\/sitecore\/shell/ig,
            Edit: /sc_itemid=.*sc_mode=edit/ig,
            Normal: /sc_itemid=.*sc_mode=normal/ig,
            Preview: /sc_itemid=.*sc_mode=preview/ig,
            XmlControl: /.*xmlcontrol=Application/ig,
            PackageDesigner: /.*xmlcontrol=Application&.*Package+Designer/ig,
            ContentManager: /\/sitecore\/shell\/Applications\/Content%20Manager/ig,
        },
    },
    UrlRelativePrefix: {
        IconCache: '/temp/iconcache/',
        IconShellStandardMedia: '/sitecore/shell/themes/standard/~/media/',
    },
    UrlSuffix: {
        Desktop: '/sitecore/shell/default.aspx',
        Login: '/sitecore/login',
        LaunchPad: '/client/applications/launchpad',
        CE: '/sitecore/shell/Applications/Content Editor.aspx?sc_bw=1',
        SitecoreShellApplicationsContentEditor: 'sitecore/shell/Applications/Content-Editor',
        None: '/',
        AboutBlank: 'about:blank',
    },
};

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Drones/IterationDrone/IterationDrone.js


class IterationDrone_IterationDrone extends _CommonBase {
    constructor(hindeCore, nickname, logThisDroneInstance, maxIterations = null) {
        super(hindeCore);
        this.IsExhaustedMsg = 'Iteration helper exhausted';
        this.IsCanceled = false;
        this.LogThisDroneInstance = logThisDroneInstance;
        if (!maxIterations) {
            maxIterations = SharedConst.Const.IterHelper.MaxCount.Default;
        }
        this.MaxIterations = maxIterations;
        this.CurrentIteration = maxIterations;
        this.Timeout = SharedConst.Const.IterHelper.Timeouts.Default;
        this.NickName = nickname;
        this.IsExhausted = false;
    }
    DecrementAndKeepGoing() {
        var toReturn = false;
        if (this.CurrentIteration > 0 && !this.TaskMonitor.IsCancelRequested()) {
            this.CurrentIteration -= 1;
            this.Timeout += this.Timeout * SharedConst.Const.IterHelper.GrowthPerIteration;
            if (this.Timeout > SharedConst.Const.IterHelper.Timeouts.Max) {
                this.Timeout = SharedConst.Const.IterHelper.Timeouts.Max;
            }
            if (this.LogThisDroneInstance) {
                this.Logger.Log(this.DecrementAndKeepGoing.name + ' ' + this.NickName + ' ' + this.CurrentIteration + ':' + this.MaxIterations + ' | cur. timeout: ' + this.Timeout);
            }
            toReturn = true;
        }
        else {
            toReturn = false;
            if (this.TaskMonitor.IsCancelRequested()) {
                this.ErrorHand.HandleCancelReaction('CANCEL REQUESTED', '-----------------------------------');
                this.IsCanceled = true;
            }
            else {
                this.IsExhausted = true;
                this.NotifyExhausted();
            }
        }
        return toReturn;
    }
    CurrentTimeout() {
        return this.Timeout;
    }
    NotifyExhausted() {
        if (this.LogThisDroneInstance) {
            this.Logger.Log('Iteration: ' + this.NickName + ' counter exhausted ' + this.CurrentIteration + ':' + this.MaxIterations);
        }
    }
    WaitAndThen(timeoutFunction) {
        if (this.LogThisDroneInstance) {
            this.Logger.FuncStart(this.WaitAndThen.name, this.NickName + ' ' + timeoutFunction.name);
        }
        var self = this;
        setTimeout(timeoutFunction(), self.Timeout);
        if (this.LogThisDroneInstance) {
            this.Logger.FuncEnd(this.WaitAndThen.name, this.NickName);
        }
    }
    Wait() {
        if (!this.OperationCancelled) {
            this.TaskMonitor.NotifyWaiting(true);
            return new Promise((resolve) => {
                setTimeout(() => {
                    this.TaskMonitor.NotifyWaiting(false);
                    resolve();
                }, this.Timeout);
            });
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/ReadyState.js
var DocReadyState;
(function (DocReadyState) {
    DocReadyState[DocReadyState["ReadyStateUnknown"] = 0] = "ReadyStateUnknown";
    DocReadyState[DocReadyState["Complete"] = 1] = "Complete";
    DocReadyState[DocReadyState["Interactive"] = 2] = "Interactive";
    DocReadyState[DocReadyState["Loading"] = 3] = "Loading";
})(DocReadyState || (DocReadyState = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/ReadyStateNAB.js



class ReadyStateNAB_ReadyStateNAB extends _CommonBase {
    constructor(hindeCore, document) {
        super(hindeCore);
        this.IsExausted = '';
        this.ErrorHand.ThrowIfNullOrUndefined(ReadyStateNAB_ReadyStateNAB.name, document);
        this.Document = document;
    }
    LogDebugValues() {
        this.Logger.LogVal('IsCompleteNAB', this.IsCompleteNAB());
        this.Logger.LogVal('Ready State', this.DocumentReadtStateFriendly());
        this.Logger.LogVal('document.URL', this.DocUrl());
        this.Logger.LogVal('Is Exhausted', this.IsExausted.toString());
        this.Logger.LogVal('DocIsAboutBlank', this.DocIsAboutBlank().toString());
    }
    DocumentReadtStateFriendly() {
        return 'DocumentReadyState :' + DocReadyState[this.DocumentReadyState()];
    }
    DocIsAboutBlank() {
        return ((this.DocUrl() === SharedConst.Const.UrlSuffix.AboutBlank) || (this.DocUrl() === ''));
    }
    SetDocument(document) {
        this.ErrorHand.ThrowIfNullOrUndefined(this.SetDocument.name, document);
        this.Document = document;
    }
    IsCompleteNAB() {
        return this.DocumentReadyState() === DocReadyState.Complete && !(this.DocIsAboutBlank());
    }
    DocumentReadyState() {
        let toReturn = DocReadyState.ReadyStateUnknown;
        let currentReadyState = document.readyState.toString();
        if (currentReadyState === 'complete') {
            toReturn = DocReadyState.Complete;
        }
        else if (currentReadyState === 'interactive') {
            toReturn = DocReadyState.Interactive;
        }
        else if (currentReadyState === 'loading') {
            toReturn = DocReadyState.Loading;
        }
        return toReturn;
    }
    DocUrl() {
        return this.Document.URL;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/10 - MessageFlag.js
var ReqCommandMsgFlag;
(function (ReqCommandMsgFlag) {
    ReqCommandMsgFlag[ReqCommandMsgFlag["Unknown"] = 0] = "Unknown";
    ReqCommandMsgFlag[ReqCommandMsgFlag["GetAllStorageOneWindow"] = 10003063] = "GetAllStorageOneWindow";
    ReqCommandMsgFlag[ReqCommandMsgFlag["NewWindowTest"] = 10943188] = "NewWindowTest";
    ReqCommandMsgFlag[ReqCommandMsgFlag["Ping"] = 10100148] = "Ping";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqRemoveFromStorage"] = 10827628] = "ReqRemoveFromStorage";
    ReqCommandMsgFlag[ReqCommandMsgFlag["CancelCommand"] = 10125827] = "CancelCommand";
    ReqCommandMsgFlag[ReqCommandMsgFlag["OpenCERibbonNavigateLinks"] = 10391090] = "OpenCERibbonNavigateLinks";
    ReqCommandMsgFlag[ReqCommandMsgFlag["OpenCERibbonPresentationDetails"] = 10714851] = "OpenCERibbonPresentationDetails";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqAddCETab"] = 10625684] = "ReqAddCETab";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqAdminB"] = 10889199] = "ReqAdminB";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqClosePopUpWindow"] = 10700124] = "ReqClosePopUpWindow";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqDebugAutoSnapShot"] = 10463876] = "ReqDebugAutoSnapShot";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqDebugClearConsole"] = 10719358] = "ReqDebugClearConsole";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqDebugTriggerReload"] = 10591674] = "ReqDebugTriggerReload";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqGoDesktop"] = 10667844] = "ReqGoDesktop";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqLoginWithAdminB"] = 10587818] = "ReqLoginWithAdminB";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqOpenCE"] = 10466461] = "ReqOpenCE";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqQuickPublish"] = 10123608] = "ReqQuickPublish";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqSetScModeEdit"] = 10533683] = "ReqSetScModeEdit";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqSetScModeNormal"] = 10544213] = "ReqSetScModeNormal";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqSetScModePreview"] = 10151645] = "ReqSetScModePreview";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqSetStateOfSitecoreNewWindow"] = 10202348] = "ReqSetStateOfSitecoreNewWindow";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqSetStateOfSitecoreSameWindow"] = 10074231] = "ReqSetStateOfSitecoreSameWindow";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqTakeSnapShot"] = 10495640] = "ReqTakeSnapShot";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqToggleCompactCss"] = 10178105] = "ReqToggleCompactCss";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqToggleFavorite"] = 10462769] = "ReqToggleFavorite";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqUpdateNickName"] = 10899837] = "ReqUpdateNickName";
    ReqCommandMsgFlag[ReqCommandMsgFlag["SetStateFromMostRecent"] = 10611496] = "SetStateFromMostRecent";
    ReqCommandMsgFlag[ReqCommandMsgFlag["SetStateFromQueryString"] = 10754569] = "SetStateFromQueryString";
    ReqCommandMsgFlag[ReqCommandMsgFlag["SetStateFromStorage"] = 10984640] = "SetStateFromStorage";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqToggleRawValues"] = 10125894] = "ReqToggleRawValues";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqNavigateBack"] = 10238058] = "ReqNavigateBack";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqNavigateForward"] = 10304388] = "ReqNavigateForward";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqNavigateUp"] = 10872523] = "ReqNavigateUp";
    ReqCommandMsgFlag[ReqCommandMsgFlag["ReqGoToSelected"] = 10615549] = "ReqGoToSelected";
    ReqCommandMsgFlag[ReqCommandMsgFlag["_futureD"] = 10796656] = "_futureD";
    ReqCommandMsgFlag[ReqCommandMsgFlag["__futureB"] = 10304388] = "__futureB";
    ReqCommandMsgFlag[ReqCommandMsgFlag["__future"] = 10872523] = "__future";
})(ReqCommandMsgFlag || (ReqCommandMsgFlag = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/30 - SettingKey.js
var _30_SettingKey_SettingKey;
(function (SettingKey) {
    SettingKey[SettingKey["unknown"] = 0] = "unknown";
    SettingKey[SettingKey["AutoLogin"] = 30415718] = "AutoLogin";
    SettingKey[SettingKey["DebugKeepDialogOpen"] = 3030395177] = "DebugKeepDialogOpen";
    SettingKey[SettingKey["AutoSaveIntervalMin"] = 880521] = "AutoSaveIntervalMin";
    SettingKey[SettingKey["UseCompactCss"] = 30605306] = "UseCompactCss";
    SettingKey[SettingKey["AutoSaveRetainDays"] = 30077911] = "AutoSaveRetainDays";
    SettingKey[SettingKey["AutoRenameCeButton"] = 30710590] = "AutoRenameCeButton";
    SettingKey[SettingKey["MaxAutoSaveCount"] = 30338682] = "MaxAutoSaveCount";
    SettingKey[SettingKey["EnableDebugging"] = 30775114] = "EnableDebugging";
    SettingKey[SettingKey["LgndBrowserState"] = 30226039] = "LgndBrowserState";
    SettingKey[SettingKey["LgndContentState"] = 30330190] = "LgndContentState";
    SettingKey[SettingKey["LgndForeSite"] = 30967099] = "LgndForeSite";
    SettingKey[SettingKey["LgndHindSite"] = 30669129] = "LgndHindSite";
    SettingKey[SettingKey["LgndMessages"] = 30755408] = "LgndMessages";
    SettingKey[SettingKey["LgndPopUpLog"] = 30243921] = "LgndPopUpLog";
    SettingKey[SettingKey["LgndPopUpState"] = 30868073] = "LgndPopUpState";
    SettingKey[SettingKey["LgndSettings"] = 30342605] = "LgndSettings";
    SettingKey[SettingKey["LastUsedLogToStorageKey"] = 30046822] = "LastUsedLogToStorageKey";
    SettingKey[SettingKey["AutoSnapshotBeforeWindowChange"] = 30966373] = "AutoSnapshotBeforeWindowChange";
    SettingKey[SettingKey["LgndPopUpDebug"] = 30583894] = "LgndPopUpDebug";
    SettingKey[SettingKey["AutoRestoreState"] = 30581057] = "AutoRestoreState";
})(_30_SettingKey_SettingKey || (_30_SettingKey_SettingKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferChar.js
var BufferChar;
(function (BufferChar) {
    BufferChar[BufferChar["space"] = 0] = "space";
    BufferChar[BufferChar["Nbsp"] = 1] = "Nbsp";
    BufferChar[BufferChar["Period"] = 2] = "Period";
    BufferChar[BufferChar["Zero"] = 3] = "Zero";
})(BufferChar || (BufferChar = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferDirection.js
var BufferDirection;
(function (BufferDirection) {
    BufferDirection[BufferDirection["left"] = 0] = "left";
    BufferDirection[BufferDirection["right"] = 1] = "right";
})(BufferDirection || (BufferDirection = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/50 - scWindowType.js
var ScWindowType;
(function (ScWindowType) {
    ScWindowType[ScWindowType["Unknown"] = 0] = "Unknown";
    ScWindowType[ScWindowType["AccessViewer"] = 50807454] = "AccessViewer";
    ScWindowType[ScWindowType["Archive"] = 50572312] = "Archive";
    ScWindowType[ScWindowType["ContentEditor"] = 50570457] = "ContentEditor";
    ScWindowType[ScWindowType["ControlPanel"] = 50180952] = "ControlPanel";
    ScWindowType[ScWindowType["Debug"] = 50053957] = "Debug";
    ScWindowType[ScWindowType["Desktop"] = 50670576] = "Desktop";
    ScWindowType[ScWindowType["DomainManager"] = 50904399] = "DomainManager";
    ScWindowType[ScWindowType["EmailExperienceManager"] = 50111451] = "EmailExperienceManager";
    ScWindowType[ScWindowType["ExperienceAnalytics"] = 50849816] = "ExperienceAnalytics";
    ScWindowType[ScWindowType["ExperienceEditor_Edit"] = 50739548] = "ExperienceEditor_Edit";
    ScWindowType[ScWindowType["ExperienceEditor_Normal"] = 50417587] = "ExperienceEditor_Normal";
    ScWindowType[ScWindowType["ExperienceEditor_Preview"] = 50495346] = "ExperienceEditor_Preview";
    ScWindowType[ScWindowType["ExperienceOptimization"] = 50860380] = "ExperienceOptimization";
    ScWindowType[ScWindowType["ExperienceProfile"] = 50307227] = "ExperienceProfile";
    ScWindowType[ScWindowType["FallBack"] = 50657295] = "FallBack";
    ScWindowType[ScWindowType["FederatedExperienceManager"] = 50999497] = "FederatedExperienceManager";
    ScWindowType[ScWindowType["Forms"] = 50698620] = "Forms";
    ScWindowType[ScWindowType["InstallationWizard"] = 50201337] = "InstallationWizard";
    ScWindowType[ScWindowType["InstalledLicenses"] = 50979897] = "InstalledLicenses";
    ScWindowType[ScWindowType["KeyboardMap"] = 50683086] = "KeyboardMap";
    ScWindowType[ScWindowType["Launchpad"] = 50206433] = "Launchpad";
    ScWindowType[ScWindowType["LicenseDetails"] = 50268242] = "LicenseDetails";
    ScWindowType[ScWindowType["ListManager"] = 50595779] = "ListManager";
    ScWindowType[ScWindowType["LoginPage"] = 50010467] = "LoginPage";
    ScWindowType[ScWindowType["LogViewer"] = 50500367] = "LogViewer";
    ScWindowType[ScWindowType["MarketingAutomation"] = 50921088] = "MarketingAutomation";
    ScWindowType[ScWindowType["MarketingControlPanel"] = 50528944] = "MarketingControlPanel";
    ScWindowType[ScWindowType["MediaLibrary"] = 50351702] = "MediaLibrary";
    ScWindowType[ScWindowType["PackageDesigner"] = 50363323] = "PackageDesigner";
    ScWindowType[ScWindowType["PathAnalyzer"] = 50854514] = "PathAnalyzer";
    ScWindowType[ScWindowType["Publish"] = 50797841] = "Publish";
    ScWindowType[ScWindowType["RecycleBin"] = 50374978] = "RecycleBin";
    ScWindowType[ScWindowType["RoleManager"] = 50017991] = "RoleManager";
    ScWindowType[ScWindowType["Run"] = 50340856] = "Run";
    ScWindowType[ScWindowType["ScanForBrokenLinks"] = 50599314] = "ScanForBrokenLinks";
    ScWindowType[ScWindowType["SecurityEditor"] = 50613652] = "SecurityEditor";
    ScWindowType[ScWindowType["TemplateManager"] = 50415542] = "TemplateManager";
    ScWindowType[ScWindowType["UpdateCenter"] = 50109795] = "UpdateCenter";
    ScWindowType[ScWindowType["UserManager"] = 50660151] = "UserManager";
    ScWindowType[ScWindowType["Workbox"] = 50799485] = "Workbox";
    ScWindowType[ScWindowType["InstallerBuildPackage"] = 50625341] = "InstallerBuildPackage";
    ScWindowType[ScWindowType["JqueryModalDialogs"] = 50130845] = "JqueryModalDialogs";
    ScWindowType[ScWindowType["ScContentProxy"] = 50130846] = "ScContentProxy";
})(ScWindowType || (ScWindowType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SnapShotFlavor.js
var SnapShotFlavor;
(function (SnapShotFlavor) {
    SnapShotFlavor[SnapShotFlavor["Unknown"] = 0] = "Unknown";
    SnapShotFlavor[SnapShotFlavor["Autosave"] = 1] = "Autosave";
    SnapShotFlavor[SnapShotFlavor["Favorite"] = 2] = "Favorite";
    SnapShotFlavor[SnapShotFlavor["Manual"] = 3] = "Manual";
    SnapShotFlavor[SnapShotFlavor["Live"] = 4] = "Live";
})(SnapShotFlavor || (SnapShotFlavor = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/StaticHelpers.js






class StaticHelpers_StaticHelpers {
    static MinToMs(minutes) {
        return minutes * 60 * 1000;
    }
    static FlavorAsString(flavor) {
        return 'Flavor.' + SnapShotFlavor[flavor] + '(' + flavor + ')';
    }
    static SettingKeyAsString(settingKey) {
        let toReturn = '';
        try {
            toReturn = 'SettingKey.' + _30_SettingKey_SettingKey[settingKey] + '(' + settingKey + ')';
        }
        catch (err) {
            toReturn = err;
        }
        return toReturn;
    }
    static ScWindowTypeFriendly(windowType) {
        return ScWindowType[windowType];
    }
    static MakeFriendlyDate(date) {
        var toReturn = '';
        var workingDate = new Date(date);
        if (workingDate) {
            var month = StaticHelpers_StaticHelpers.BufferString((workingDate.getMonth() + 1).toString(), 2, BufferChar.Zero, BufferDirection.left);
            var day = StaticHelpers_StaticHelpers.BufferString(workingDate.getDate().toString(), 2, BufferChar.Zero, BufferDirection.left);
            var min = StaticHelpers_StaticHelpers.BufferString(workingDate.getMinutes().toString(), 2, BufferChar.Zero, BufferDirection.left);
            var hoursRaw = workingDate.getHours();
            var hourClean = hoursRaw ? hoursRaw : 12;
            var hourCleanStr = StaticHelpers_StaticHelpers.BufferString(hourClean.toString(), 2, BufferChar.Zero, BufferDirection.left);
            toReturn = month + '.' + day + ' ' + hourCleanStr + ':' + min;
        }
        else {
            toReturn = '{error}';
            throw (this.MakeFriendlyDate.name, 'no date provided');
        }
        return toReturn;
    }
    static IsNullOrUndefined(testSubject) {
        let toReturn = false;
        try {
            if (testSubject instanceof Array) {
                testSubject.forEach((testSubject) => toReturn = toReturn || this.IsNullOrUndefined(testSubject));
            }
            else {
                toReturn = (typeof testSubject === 'undefined' || testSubject === null);
            }
        }
        catch (err) {
            console.log(err);
        }
        return toReturn;
    }
    static getBuffChar(buffCharEnum) {
        var buffChar = ' ';
        if (buffCharEnum === BufferChar.space) {
            buffChar = ' ';
        }
        else if (buffCharEnum === BufferChar.Nbsp) {
            buffChar = '&nbsp;';
        }
        else if (buffCharEnum === BufferChar.Period) {
            buffChar = '.';
        }
        else if (buffCharEnum === BufferChar.Zero) {
            buffChar = '0';
        }
        return buffChar;
    }
    static BufferString(str, desiredLength, buffCharEnum, direction) {
        var toReturn = str;
        var buffChar = this.getBuffChar(buffCharEnum);
        if (toReturn.length > desiredLength) {
            if (desiredLength > 6) {
                toReturn = toReturn.substring(0, desiredLength - 3) + '...';
            }
            else {
                toReturn = toReturn.substring(0, desiredLength);
            }
        }
        if (toReturn.length < desiredLength) {
            var bufferCharNeeded = desiredLength - toReturn.length;
            for (var idx = 0; idx < bufferCharNeeded; idx++) {
                if (direction === BufferDirection.left) {
                    toReturn = buffChar + toReturn;
                }
                else {
                    toReturn = toReturn + buffChar;
                }
            }
        }
        return toReturn;
    }
    static MsgFlagAsString(msg) {
        var toReturn = "{error}";
        if (msg) {
            try {
                toReturn = 'MsgFlag.' + ReqCommandMsgFlag[msg] + '(' + msg + ')';
            }
            catch (err) {
                console.log(this.MsgFlagAsString.name + ' ' + err);
            }
        }
        return 'flag: ' + toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/PromiseFailAction.js
var PromiseFailAction;
(function (PromiseFailAction) {
    PromiseFailAction[PromiseFailAction["Default"] = 0] = "Default";
    PromiseFailAction[PromiseFailAction["ResolveNull"] = 1] = "ResolveNull";
    PromiseFailAction[PromiseFailAction["RejectThrow"] = 2] = "RejectThrow";
})(PromiseFailAction || (PromiseFailAction = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/GuidData.js

class GuidData_GuidData {
    constructor(raw = null) {
        if (!raw) {
            this.Raw = GuidData_GuidData.ConstEmptyGuid;
        }
        else {
            if (Guid_Guid.IsValidGuidStr(raw)) {
                this.Raw = Guid_Guid.GuidStrWithDashes(raw);
            }
            else {
                throw ('Invalid GUID string: ' + raw);
            }
        }
    }
}
GuidData_GuidData.ConstEmptyGuid = '00000000-0000-0000-0000-000000000000';

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/Guid.js

class Guid_Guid {
    static NewRandomGuid() {
        let newGuid = new Guid_Guid();
        let randomStr = newGuid.GetRandomGuidString();
        let toReturn = new GuidData_GuidData(randomStr);
        return toReturn;
    }
    static GetEmptyGuid() {
        return new GuidData_GuidData();
    }
    static AsBracedGuid(guidData) {
        return '{' + guidData.Raw + "}";
    }
    static IsValidGuidStr(candidateStr) {
        let toReturn = false;
        let regexGuid = '^[\}]?[0-9a-f]{8}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{12}[\}]?$';
        let pattern = new RegExp(regexGuid, 'i');
        toReturn = pattern.test(candidateStr);
        return toReturn;
    }
    static AsShort(guidData) {
        var toReturn = '{error}';
        if (guidData) {
            if (this.IsValidGuidStr(guidData.Raw)) {
                toReturn = guidData.Raw.substr(0, Guid_Guid.ShortGuidLength);
            }
            else {
                toReturn = '{error - invalid guid string: ' + guidData.Raw + '}';
            }
        }
        return toReturn;
    }
    static WithoutDashes(guiddata) {
        let withoutDashes = guiddata.Raw.replace(/-/g, '');
        return withoutDashes;
    }
    static ParseGuid(val, throwOnError) {
        return new GuidData_GuidData(val);
    }
    MakeNewRandomGuid() {
        let randomStr = this.GetRandomGuidString();
        return new GuidData_GuidData(randomStr);
    }
    static GuidStrWithDashes(val) {
        let toReturn = '';
        let withoutDashes = val.replace(/-/g, '');
        var parts = [];
        if (withoutDashes.length !== 32) {
            throw (this.GuidStrWithDashes.name + ' - Wrong count wanted: ' + 32 + " got: " + withoutDashes.length + ' (without dashes) ' + withoutDashes);
        }
        parts.push(withoutDashes.slice(0, 8));
        parts.push(withoutDashes.slice(8, 12));
        parts.push(withoutDashes.slice(12, 16));
        parts.push(withoutDashes.slice(16, 20));
        parts.push(withoutDashes.slice(20, 32));
        toReturn = parts.join('-');
        return toReturn;
    }
    GetRandomGuidString() {
        var toReturn;
        var temp = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
        toReturn = temp.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0;
            var v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
        return toReturn;
    }
    MakeGuidFromString(val, throwOnError) {
        let toReturn = new GuidData_GuidData(val);
        return toReturn;
    }
}
Guid_Guid.ShortGuidLength = 4;

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/InjectConst.js
class ContentConst {
}
ContentConst.Const = {
    MaxAutoToSaveCount: 10,
    DefaultMaxAutoSaveAgeDays: 7,
    DefaultAutoRenameCeTabButton: false,
    DefaultShowDebuggingModules: false,
    Iterations: {
        MaxSetHrefEffort: 10,
        MaxIterationSwitchBoard: 20,
    },
    Timeouts: {
        PostLoginBtnClick: 1000,
        SetHrefEffortWait: 1000,
        WaitBeforeRemovingCompleteFlagOnContent: 1500,
        AutoSaveIntervalMin: 1,
    },
    ElemId: {
        SC: {
            PackageDesigner: {
                StatusText: 'StatusText',
            },
            scLoginPassword: 'Password',
            scLoginUserName: 'UserName',
            SitecoreRootAnchorNodeId: 'Tree_Node_11111111111111111111111111111111',
            SitecoreRootApparentIdRaw: '11111111111111111111111111111111',
            SitecoreRootGlyphId: 'Tree_Glyph_11111111111111111111111111111111',
            scLoginBtn: {
                sc920: 'LogInBtn',
                sc820: null
            },
        }
    },
    ClassNames: {
        SC: {
            ContentTreeNode: 'scContentTreeNode',
            scContentTreeNodeActive: 'scContentTreeNodeActive',
            scContentTreeNodeNormal: 'scContentTreeNodeNormal',
        }
    },
    Selector: {
        Html: {
            Body: 'body'
        },
        SC: {
            ContentEditor: {
                ScContentTreeNodeGlyph: '.scContentTreeNodeGlyph',
                ScContentTreeNode: '.scContentTreeNode',
                ScContentTreeContainer: '.scContentTreeContainer',
                scContentTreeNodeIcon: '.scContentTreeNodeIcon',
            },
            ContentTree: {
                BuiltIn: {
                    TreeNodeSitecoreRoot: '[id=Tree_Node_11111111111111111111111111111111]',
                    MediaLibraryAnchorRootNode: '[id=Tree_Node_3D6658D8A0BF4E75B3E2D050FABCF4E1]',
                    MarketingControlPanelRoodNode: '[id=Tree_Node_33CFB9CAF5654D5BB88A7CDFE29A6D71]',
                    TemplatesAnchorRootNode: '[id=Tree_Node_3C1715FE6A134FCF845FDE308BA9741D]',
                    LayoutRootAnchorNode: '[id=Tree_Node_EB2E4FFD27614653B05226A64D385227]',
                    SystemRootAnchorNode: '[id=Tree_Node_13D6D6C6C50B4BBDB3312B04F1A58F21]',
                    ContentRootAnchorNode: '[id=Tree_Node_0DE95AE441AB4D019EB067441B7C2450]',
                }
            },
            InstallerDesigner: {
                GenerateZip: 'img[src$="folder_zip.png"]',
            },
            PackageDesigner: {
                Ribbon: {
                    InstallerRibbon_Nav_Package: '[id=InstallerRibbon_Nav_Package]',
                    InstallerRibbon_Toolbar: '[id=InstallerRibbon_Toolbar]',
                    Open: '[title="Open an existing project"]',
                },
            },
            IdStartsWithTreeNode: '[id^=Tree_Node_]',
            IframeContent: {
                sc820: null,
                sc920: 'iframe[src*=Content], iframe[src*=MediaShop]'
            },
            Frames: {
                ScContentIframeId0: {
                    Cancel: '[id=Cancel]',
                    Filename: '[id=Filename]',
                    Id: '[id=scContentIframeId0]',
                    Ok: '[id=OK]',
                    PackageFile: '[id=PackageFile]',
                },
                AppFrame: {
                    Id: '[id=AppFrame]',
                },
                JqueryModalDialogsFrame: {
                    Id: '[id=jqueryModalDialogsFrame]',
                },
                scContentIframeId1: {
                    Id: '[id=scContentIframeId1]',
                }
            },
            NextButton: '[id=NextButton]',
            Ok: '[id=OK]',
            Cancel: '[id=CancelButton]',
            ScRibbon: {
                Navigate: {
                    Id: '[id$="_Nav_NavigateStrip"]',
                    Links: 'img[src$="link.png"]',
                },
                View: {
                    Id: '[id$="_Nav_ViewStrip"]',
                    RawValues: '[id="Check_BBDED3F008D144C82A983B54F0424BBC1"]',
                    NavigateUp: 'img[src$="navigate_up.png"]',
                    NavigateForward: 'img[src$="navigate_right.png"]',
                    NavigateBack: 'img[src$="navigate_left.png"]',
                },
                Presentation: {
                    Id: '[id$="Nav_PresentationStrip"]',
                    Details: 'img[src$="layout_details.png"]',
                },
                Publish: {
                    MenuButtonPublish: '[id=B414550BADAF4542C9ADF44BED5FA6CB3E_menu_button]',
                    MenuDropDownPublishItem: '[id=B414550BADAF4542C9ADF44BED5FA6CB3E_menu_98719A90225A4802A0625D3967E4DD47]',
                    NavPublishStrip: '[id*=_Nav_PublishStrip]',
                    PublishingHidden: '[id=Publishing][style*=\'display: none\']',
                    SettingsHidden: '[id=Settings][style*=\'display: none\']',
                    TheItemHasBeenPublished: '[id=LastPage]:not([style*=\'display:none\'])',
                }
            },
            StartMenu: {
                Popup1: {
                    DevelopmentTools: '[src="/temp/iconcache/apps/24x24/magic-cube.png"]',
                    MediaLibrary: 'img[src$="pictures.png"]',
                    RecycleBin: 'img[src$="refresh.png"]',
                    StartMenuLeftOption: 'img[src$="pencil.png"]',
                    TemplateManager: 'img[src$="newspaper.png"]',
                    SecurityTools: 'img[src$="lock-2.png"]',
                    ReportingTools: 'img[src$="scripts.png"]',
                    AllApplications: '.scStartMenuProgramsMenuText',
                    Id: '[id=Popup1]',
                },
                Popup2: {
                    AccessViewer: 'img[src$="lock.png"]',
                    Archive: 'img[src$=".png"]',
                    DomainManager: 'img[src$="routes.png"]',
                    Id: '[id=Popup2]',
                    InstallationWizard: 'img[src$="install_wizard.png"]',
                    KeyboardMap: 'img[src$="keyboardmap.png"]',
                    LogViewer: 'img[src$="logviewer.png"]',
                    MarketingControlPanel: 'img[src$="object.png"]',
                    PackageDesigner: '[id=MenuItem211048689]',
                    PackageDesignerButton: 'img[src$="packager.png"]',
                    RoleManager: 'img[src$="account.png"]',
                    Run: 'img[src$="run.png"]',
                    ScanForBrokenLinks: 'img[src$="link_broken.png"]',
                    Security: 'img[src$="blank.gif"]:nth-child(2)',
                    SecurityEditor: 'img[src$="shield.png"]',
                    System: 'img[src$="blank.gif"]:nth-child(1)',
                    UserManager: 'img[src$="user (1).png"]',
                    Workbox: 'img[src$="workbox.png"]',
                },
                Popup3: {
                    Id: '[id=Popup3]',
                    InstalledLicenses: 'img[src$="certificate.png"]',
                    LicenseDetails: 'img[src$="informations.png"]',
                },
            },
            LoginBtn: {
                sc920: null,
                sc820: 'input.btn',
            },
            scStartButtonVSpec: {
                sc920: '[id=StartButton]',
                sc820: '[id=startButton]'
            },
            Desktop: {
                DtStartBar: '[id=Startbar]',
                ContentTreeHolder: '[id=ContentTreeHolder]',
                Id: '[id=Desktop]',
            },
        },
    },
    Storage: {
        SettingsSuffix: '.Settings',
        ShowDebugData: false,
        SnapShotPrefix: 'ScSnapShot.',
        WindowRoot: 'HindSite.',
        SessionKey: 'HindSite.SessionKey',
    },
    Numbers: {
        Desktop: {
            MaxToolBarNameChars: 13,
            TimeNewCEWaitForScOverlayToClearMs: 1500,
        }
    },
    MaxIter: 100,
    MaxNullOrUndefinedIter: 100,
    prop: {
        AllTreeData: 'AllTreeData',
    },
    Names: {
        SC: {
            TreeGlyphPrefix: 'Tree_Glyph_',
            TreeNodePrefix: 'Tree_Node_',
            TreeExpandedPng: {
                sc920: 'treemenu_expanded.png',
                sc820: 'todo'
            }
        },
        Desktop: {
            StartBarApplicationPrefix: 'startbar_application_',
        },
        PopUpUi: 'PopUpUi',
        PopUpUiStyles: 'PopUpUiStyles',
        TreeMenuExpandedPng: 'treemenu_expanded.png',
        TreeMenuCollapsedPng: 'treemenu_collapsed.png',
        scDefaultAdminPassword: 'b',
        scDefaultAdminUserName: 'admin',
    }
};

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/70 - TypeDiscriminator.js
var TypeDiscriminator;
(function (TypeDiscriminator) {
    TypeDiscriminator[TypeDiscriminator["unknown"] = 700] = "unknown";
    TypeDiscriminator[TypeDiscriminator["__ContentTreeBasedProxyMutationEvent__Subject"] = 70859200] = "__ContentTreeBasedProxyMutationEvent__Subject";
    TypeDiscriminator[TypeDiscriminator["__ContentTreeBasedProxyMutationEvent_Observer"] = 70343448] = "__ContentTreeBasedProxyMutationEvent_Observer";
    TypeDiscriminator[TypeDiscriminator["_ContentTreeBasedProxyMutationEvent_Observer"] = 70087112] = "_ContentTreeBasedProxyMutationEvent_Observer";
    TypeDiscriminator[TypeDiscriminator["ApiCore"] = 70766948] = "ApiCore";
    TypeDiscriminator[TypeDiscriminator["BaseBrowserProxy"] = 70346293] = "BaseBrowserProxy";
    TypeDiscriminator[TypeDiscriminator["BrowserTabAgent"] = 70190816] = "BrowserTabAgent";
    TypeDiscriminator[TypeDiscriminator["CommandStartEndCancelEvent_Observer"] = 70048622] = "CommandStartEndCancelEvent_Observer";
    TypeDiscriminator[TypeDiscriminator["CommandStartEndCancelEvent_Subject"] = 70280832] = "CommandStartEndCancelEvent_Subject";
    TypeDiscriminator[TypeDiscriminator["ContentReplyReceivedEvent_Observer"] = 70078936] = "ContentReplyReceivedEvent_Observer";
    TypeDiscriminator[TypeDiscriminator["ContentReplyReceivedEvent_Subject"] = 70675592] = "ContentReplyReceivedEvent_Subject";
    TypeDiscriminator[TypeDiscriminator["ContentTreeMutationEvent_Subject"] = 70779372] = "ContentTreeMutationEvent_Subject";
    TypeDiscriminator[TypeDiscriminator["DesktopProxyMutationEvent_Observer"] = 70934648] = "DesktopProxyMutationEvent_Observer";
    TypeDiscriminator[TypeDiscriminator["DesktopProxyMutationEvent_Subject"] = 70792635] = "DesktopProxyMutationEvent_Subject";
    TypeDiscriminator[TypeDiscriminator["ElementJacketMutationEvent_Observer"] = 70624331] = "ElementJacketMutationEvent_Observer";
    TypeDiscriminator[TypeDiscriminator["ElementJacketMutationEvent_Subject"] = 70179738] = "ElementJacketMutationEvent_Subject";
    TypeDiscriminator[TypeDiscriminator["DTAreaProxyMutationEvent_Observer"] = 70508413] = "DTAreaProxyMutationEvent_Observer";
    TypeDiscriminator[TypeDiscriminator["DTAreaProxyMutationEvent_Subject"] = 70628210] = "DTAreaProxyMutationEvent_Subject";
    TypeDiscriminator[TypeDiscriminator["DTFrameProxyMutationEvent_Observer"] = 70531819] = "DTFrameProxyMutationEvent_Observer";
    TypeDiscriminator[TypeDiscriminator["DTFrameProxyMutationEvent_Subject"] = 70263565] = "DTFrameProxyMutationEvent_Subject";
    TypeDiscriminator[TypeDiscriminator["NativeAddRemoveEvent_Observer"] = 70311064] = "NativeAddRemoveEvent_Observer";
    TypeDiscriminator[TypeDiscriminator["FrameJacketAddRemoveEvent_Subject"] = 70238984] = "FrameJacketAddRemoveEvent_Subject";
    TypeDiscriminator[TypeDiscriminator["HotKeyEvent_Subject"] = 70295417] = "HotKeyEvent_Subject";
    TypeDiscriminator[TypeDiscriminator["ICommonCore"] = 70599578] = "ICommonCore";
    TypeDiscriminator[TypeDiscriminator["IErrorHandler"] = 70186081] = "IErrorHandler";
    TypeDiscriminator[TypeDiscriminator["IHindeCore"] = 70357621] = "IHindeCore";
    TypeDiscriminator[TypeDiscriminator["ILoggerAgent"] = 70139390] = "ILoggerAgent";
    TypeDiscriminator[TypeDiscriminator["KeyBoardComboEvent_Subject"] = 70944720] = "KeyBoardComboEvent_Subject";
    TypeDiscriminator[TypeDiscriminator["NativeClassNameChangeEvent_Observer"] = 70293692] = "NativeClassNameChangeEvent_Observer";
    TypeDiscriminator[TypeDiscriminator["NativeClassNameChangeEvent_Subject"] = 70124976] = "NativeClassNameChangeEvent_Subject";
    TypeDiscriminator[TypeDiscriminator["SelectSnapshotUiMutationEvent_Observer"] = 70452323] = "SelectSnapshotUiMutationEvent_Observer";
    TypeDiscriminator[TypeDiscriminator["SelectSnapUiMutationEvent_ObserverWithCallback"] = 70704978] = "SelectSnapUiMutationEvent_ObserverWithCallback";
    TypeDiscriminator[TypeDiscriminator["SelectSnapUiMutationEvent_Subject"] = 70143636] = "SelectSnapUiMutationEvent_Subject";
    TypeDiscriminator[TypeDiscriminator["SingleClickEvent_Observer"] = 70607050] = "SingleClickEvent_Observer";
    TypeDiscriminator[TypeDiscriminator["SingleClickEvent_Subject"] = 70079372] = "SingleClickEvent_Subject";
    TypeDiscriminator[TypeDiscriminator["TaskListMutationEvent_Observer"] = 70917862] = "TaskListMutationEvent_Observer";
    TypeDiscriminator[TypeDiscriminator["TaskListMutationEvent_Subject"] = 70797515] = "TaskListMutationEvent_Subject";
    TypeDiscriminator[TypeDiscriminator["TaskMonitor"] = 70969342] = "TaskMonitor";
    TypeDiscriminator[TypeDiscriminator["ToastAgent"] = 70906481] = "ToastAgent";
    TypeDiscriminator[TypeDiscriminator["UiCommandFlagRaisedEvent_Observer"] = 70622105] = "UiCommandFlagRaisedEvent_Observer";
    TypeDiscriminator[TypeDiscriminator["UiCommandFlagRaisedEvent_Subject"] = 70692290] = "UiCommandFlagRaisedEvent_Subject";
    TypeDiscriminator[TypeDiscriminator["UiModuleManagerPassThroughEvent_Observer"] = 70488938] = "UiModuleManagerPassThroughEvent_Observer";
    TypeDiscriminator[TypeDiscriminator["UiModuleManagerPassThroughEvent_Subject"] = 70080260] = "UiModuleManagerPassThroughEvent_Subject";
    TypeDiscriminator[TypeDiscriminator["UiSettingBasedModuleMutationEvent_Observer"] = 70154996] = "UiSettingBasedModuleMutationEvent_Observer";
    TypeDiscriminator[TypeDiscriminator["UiSettingBasedModuleMutationEvent_Subject"] = 70935505] = "UiSettingBasedModuleMutationEvent_Subject";
    TypeDiscriminator[TypeDiscriminator["zzFuture"] = 70187209] = "zzFuture";
    TypeDiscriminator[TypeDiscriminator["zzFutureb"] = 70897006] = "zzFutureb";
    TypeDiscriminator[TypeDiscriminator["zzFuturec"] = 70711064] = "zzFuturec";
})(TypeDiscriminator || (TypeDiscriminator = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/_HindSiteEvent/HindeSiteEvent_Subject.js





class HindeSiteEvent_Subject_HindeSiteEvent_Subject extends _CommonBase {
    constructor(commonCore) {
        super(commonCore);
        this.ObserverCollection = [];
    }
    DisableNotifications() {
        this.IsMuted = true;
    }
    EnableNotifications() {
        this.IsMuted = false;
    }
    HasObservers() {
        return this.ObserverCollection && this.ObserverCollection.length > 0;
    }
    RegisterObserver(observer) {
        if (observer) {
            if (this.ObserverCollection.indexOf(observer) < 0) {
                this.ObserverCollection.push(observer);
                this.Logger.Log(this.RegisterObserver.name + ' ' + observer.Friendly + ' to ' + TypeDiscriminator[this.TypeDiscriminator] + ' - count after: ' + this.ObserverCollection.length.toString());
            }
            else {
                this.ErrorHand.WarningAndContinue(this.RegisterObserver.name, 'Observer already registered');
            }
        }
        else {
            this.ErrorHand.HandleFatalError(this.RegisterObserver.name, 'Observer is null');
        }
    }
    UnregisterObserver(observer) {
        this.Logger.FuncStart(this.UnregisterObserver.name);
        if (observer) {
            let observerIndex = this.ObserverCollection.indexOf(observer);
            if (observerIndex > -1) {
                this.ObserverCollection.splice(observerIndex, 1);
            }
        }
        this.Logger.FuncEnd(this.UnregisterObserver.name);
    }
    NotifyObserversAsync(payload) {
        let bufferedFriendly = StaticHelpers_StaticHelpers.BufferString(TypeDiscriminator[this.TypeDiscriminator], 30, BufferChar.Period, BufferDirection.right);
        if (this.ShowLogActions) {
            this.Logger.FuncStart(this.NotifyObserversAsync.name + ' of: ' + bufferedFriendly, ' obs. count: ' + this.ObserverCollection.length);
        }
        if (!this.IsMuted) {
            this.ObserverCollection.forEach((observer) => {
                observer.UpdateAsync(payload);
            });
        }
        else {
            this.Logger.Log('not Notifying...Subject is muted');
        }
        this.Logger.FuncEnd(this.NotifyObserversAsync.name + ' of: ' + bufferedFriendly, ' obs. count: ' + this.ObserverCollection.length);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/Events/ElementJacketMutationEvent/ElementJacketMutationEvent_Subject.js


class ElementJacketMutationEvent_Subject_ElementJacketMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor() {
        super(...arguments);
        this.TypeDiscriminator = TypeDiscriminator.ElementJacketMutationEvent_Subject;
        this.ShowLogActions = true;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/_HindSiteEvent/HindSiteEvent_Observer.js

class HindSiteEvent_Observer_HindSiteEvent_Observer extends _CommonBase {
    constructor(hindeCore, friendly, callbackAsync = null) {
        super(hindeCore);
        this.CallbackAsync = null;
        this.CallbackAsync = callbackAsync;
        this.Friendly = friendly;
    }
    UpdateAsync(payload) {
        try {
            if (this.CallbackAsync) {
                this.CallbackAsync(payload);
            }
        }
        catch (err) {
            this.ErrorHand.ErrorAndContinue(HindSiteEvent_Observer_HindSiteEvent_Observer.name, err);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/Events/NativeIFrameAddedEvent/NativeAddRemoveEvent_Observer.js


class NativeAddRemoveEvent_Observer_NativeAddRemoveEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(commonCore, callback) {
        super(commonCore, NativeAddRemoveEvent_Observer_NativeAddRemoveEvent_Observer.name, callback);
        this.TypeDiscriminator = TypeDiscriminator.NativeAddRemoveEvent_Observer;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/Events/NativeIFrameAddedEvent/NativeAddRemoveEvent_Subject.js




class NativeAddRemoveEvent_Subject_NativeAddRemoveEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(commonCore, elemJacket, watcherParams) {
        super(commonCore);
        this.TypeDiscriminator = TypeDiscriminator.FrameJacketAddRemoveEvent_Subject;
        this.ShowLogActions = true;
        this.Logger.CTORStart(NativeAddRemoveEvent_Subject_NativeAddRemoveEvent_Subject.name);
        if (!elemJacket) {
            this.ErrorHand.HandleFatalError(NativeAddRemoveEvent_Subject_NativeAddRemoveEvent_Subject.name, 'No target doc');
        }
        this.ContainerElemJacket = elemJacket;
        this.WatcherParams = watcherParams;
        this.InitMutationObserver();
        this.Logger.CTOREnd(NativeAddRemoveEvent_Subject_NativeAddRemoveEvent_Subject.name);
    }
    HandleRemovedNodes(removedNodes) {
        let removedIframeIds = [];
        removedNodes.forEach((removedNode) => {
            if (removedNode instanceof HTMLIFrameElement) {
                let htmlIFrameElement = removedNode;
                if (htmlIFrameElement) {
                    removedIframeIds.push(htmlIFrameElement.id);
                }
            }
        });
        return removedIframeIds;
    }
    HandleAddedNodes(addedNodes) {
        this.Logger.FuncStart([NativeAddRemoveEvent_Subject_NativeAddRemoveEvent_Subject.name, this.HandleAddedNodes.name], 'for: ' + this.WatcherParams.OwnerFriendly);
        let addedElementJackets = [];
        addedNodes.forEach((addedNode) => {
            if (addedNode instanceof HTMLElement) {
                let passesFilterTest = true;
                let addedHtmlElement = addedNode;
                if (this.WatcherParams.TagFilter && this.WatcherParams.TagFilter.length > 0) {
                    passesFilterTest = (this.WatcherParams.TagFilter.indexOf(addedHtmlElement.tagName) > -1);
                }
                if (passesFilterTest && addedHtmlElement.tagName === SharedConst.Const.KeyWords.NodeTagName.IFrame) {
                    passesFilterTest = passesFilterTest && addedHtmlElement.contentDocument !== null;
                }
                if (passesFilterTest) {
                    if (addedHtmlElement instanceof HTMLIFrameElement) {
                        addedElementJackets.push(new GenericElemJacket_GenericElemJacket(this.CommonCore, addedHtmlElement));
                    }
                }
            }
        });
        this.Logger.FuncEnd([NativeAddRemoveEvent_Subject_NativeAddRemoveEvent_Subject.name, this.HandleAddedNodes.name], addedElementJackets.length + '  for: ' + this.WatcherParams.OwnerFriendly);
        return addedElementJackets;
    }
    CallBackOnNativeMutation(mutations) {
        this.Logger.FuncStart(this.CallBackOnNativeMutation.name);
        if (this.HasObservers()) {
            mutations.forEach((mutation, index) => {
                this.Logger.Log('processing mutation ' + (index + 1) + ':' + mutations.length);
                this.Logger.LogVal('mutation.addedNodes.length ', mutation.addedNodes.length);
                if (mutation.type === 'childList' && (mutation.addedNodes.length > 0 || mutation.removedNodes.length > 0)) {
                    let nativeDomAddRemoveEvent_Payload = {
                        AddedElementJacket: null,
                        RemovedIFrameId: null,
                        OnBehalfOfFriendly: this.WatcherParams.OwnerFriendly
                    };
                    if (mutation.addedNodes.length > 0) {
                        let addedNodes = this.HandleAddedNodes(mutation.addedNodes);
                        addedNodes.forEach((addedNode) => {
                            nativeDomAddRemoveEvent_Payload.AddedElementJacket = addedNode;
                            nativeDomAddRemoveEvent_Payload.RemovedIFrameId = null;
                            this.NotifyObserversAsync(nativeDomAddRemoveEvent_Payload);
                        });
                    }
                    if (mutation.removedNodes.length > 0) {
                        let removedNodeIds = this.HandleRemovedNodes(mutation.removedNodes);
                        removedNodeIds.forEach((removedNodeId) => {
                            nativeDomAddRemoveEvent_Payload.AddedElementJacket = null;
                            nativeDomAddRemoveEvent_Payload.RemovedIFrameId = removedNodeId;
                            this.Logger.LogAsJsonPretty('removed', nativeDomAddRemoveEvent_Payload);
                            this.NotifyObserversAsync(nativeDomAddRemoveEvent_Payload);
                        });
                    }
                }
            });
        }
        else {
            this.Logger.Log('No observers');
        }
        this.Logger.FuncEnd(this.CallBackOnNativeMutation.name);
    }
    InitMutationObserver() {
        this.Logger.FuncStart(this.InitMutationObserver.name);
        try {
            if (this.ContainerElemJacket) {
                let self = this;
                let mutationObserver = new MutationObserver((mutations) => { self.CallBackOnNativeMutation(mutations); });
                this.Logger.LogAsJsonPretty(this.InitMutationObserver.name, this.WatcherParams);
                if (this.WatcherParams) {
                    mutationObserver.observe(this.ContainerElemJacket.NativeElement, { attributes: this.WatcherParams.Attributes, subtree: this.WatcherParams.Subtree, childList: this.WatcherParams.ChildList });
                }
                else {
                    this.ErrorHand.HandleFatalError(this.InitMutationObserver.name, ' no params');
                }
            }
            else {
                this.ErrorHand.HandleFatalError(this.InitMutationObserver.name, 'no container element');
            }
        }
        catch (err) {
            this.ErrorHand.HandleFatalError(this.InitMutationObserver.name, err);
        }
        this.Logger.FuncEnd(this.InitMutationObserver.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/Document/ElementJacketWatcher.js
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class ElementJacketWatcher_ElementJacketWatcher extends _CommonBase {
    constructor(commonCore, elementJacket, watcherParams) {
        super(commonCore);
        this.ErrorHand.ThrowIfNullOrUndefined(ElementJacketWatcher_ElementJacketWatcher.name, [elementJacket]);
        this.ElementJacket = elementJacket;
        this.WatcherParams = watcherParams;
        this.InstantiateInstance();
    }
    InstantiateInstance() {
        this.Logger.FuncStart(this.InstantiateInstance.name, ElementJacketWatcher_ElementJacketWatcher.name);
        this.ElemJacketMutationEvent_Subject = new ElementJacketMutationEvent_Subject_ElementJacketMutationEvent_Subject(this.CommonCore);
        this.NativeAddRemoveEvent_Subject = new NativeAddRemoveEvent_Subject_NativeAddRemoveEvent_Subject(this.CommonCore, this.ElementJacket, this.WatcherParams);
        this.NativeAddRemoveEvent_Observer = new NativeAddRemoveEvent_Observer_NativeAddRemoveEvent_Observer(this.CommonCore, this.CallBackOnNativeAddRemoveEventAsync.bind(this));
        this.WireInstanceEvents();
        this.Logger.FuncEnd(this.InstantiateInstance.name, ElementJacketWatcher_ElementJacketWatcher.name);
    }
    WireInstanceEvents() {
        this.Logger.FuncStart([ElementJacketWatcher_ElementJacketWatcher.name, this.WireInstanceEvents.name]);
        this.NativeAddRemoveEvent_Subject.RegisterObserver(this.NativeAddRemoveEvent_Observer);
        this.Logger.FuncEnd([ElementJacketWatcher_ElementJacketWatcher.name, this.WireInstanceEvents.name]);
    }
    CallBackOnNativeAddRemoveEventAsync(nativeIFrameAddRemoveEvent_Payload) {
        return __awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([ElementJacketWatcher_ElementJacketWatcher.name, this.CallBackOnNativeAddRemoveEventAsync.name], 'On Behalf of: ' + nativeIFrameAddRemoveEvent_Payload.OnBehalfOfFriendly);
            try {
                let payload = {
                    AddedGenericElemJacket: nativeIFrameAddRemoveEvent_Payload.AddedElementJacket,
                    RemovedIFrameId: nativeIFrameAddRemoveEvent_Payload.RemovedIFrameId
                };
                this.ElemJacketMutationEvent_Subject.NotifyObserversAsync(payload);
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.CallBackOnNativeAddRemoveEventAsync.name, err);
            }
            this.Logger.FuncEnd([ElementJacketWatcher_ElementJacketWatcher.name, this.CallBackOnNativeAddRemoveEventAsync.name], 'On Behalf of: ' + nativeIFrameAddRemoveEvent_Payload.OnBehalfOfFriendly);
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/Elements/GenericElemJacket.js
var GenericElemJacket_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class GenericElemJacket_GenericElemJacket extends _CommonBase {
    constructor(commonCore, htmlElement) {
        super(commonCore);
        this.ElemJacketWatchers = [];
        this.NativeElement = htmlElement;
        this.NodeTagName = htmlElement.tagName;
    }
    Click() {
        this.NativeElement.click();
    }
    parentElement() {
        let toReturn;
        let candidate = this.NativeElement.parentElement;
        if (candidate) {
            toReturn = new GenericElemJacket_GenericElemJacket(this.CommonCore, candidate);
        }
        return toReturn;
    }
    AddWatcher(watcherParams) {
        return GenericElemJacket_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.Logger.FuncStart([GenericElemJacket_GenericElemJacket.name, this.AddWatcher.name], (watcherParams && watcherParams.OwnerFriendly) ? watcherParams.OwnerFriendly : 'no watcher params');
                let jacketElemWatcher = new ElementJacketWatcher_ElementJacketWatcher(this.CommonCore, this, watcherParams);
                this.ElemJacketWatchers.push(jacketElemWatcher);
                if (jacketElemWatcher) {
                    resolve(jacketElemWatcher.ElemJacketMutationEvent_Subject);
                }
                else {
                    reject(this.ErrorHand.FormatRejectMessage([GenericElemJacket_GenericElemJacket.name, this.AddWatcher.name], 'Unknown reason'));
                }
                this.Logger.FuncEnd([GenericElemJacket_GenericElemJacket.name, this.AddWatcher.name], (watcherParams && watcherParams.OwnerFriendly) ? watcherParams.OwnerFriendly : 'no watcher params');
            });
        });
    }
    querySelector(selector) {
        let toReturn = null;
        let candidate = this.NativeElement.querySelector(selector);
        if (candidate) {
            toReturn = new GenericElemJacket_GenericElemJacket(this.CommonCore, candidate);
        }
        return toReturn;
    }
    WaitForElement(selector, friendly = '') {
        return GenericElemJacket_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => GenericElemJacket_awaiter(this, void 0, void 0, function* () {
                let selectorAr = [];
                if (Array.isArray(selector)) {
                    selectorAr = selector;
                }
                else {
                    selectorAr.push(selector);
                }
                this.ErrorHand.ThrowIfNullOrUndefined([GenericElemJacket_GenericElemJacket.name, this.WaitForElement.name], selectorAr);
                var toReturnElemJacket = null;
                var iterationJr = new IterationDrone_IterationDrone(this.CommonCore, this.WaitForElement.name + ' : ' + selectorAr.join(',') + ' ' + friendly, false);
                let foundSelector = '';
                var foundHtmlElement = null;
                while (!toReturnElemJacket && iterationJr.DecrementAndKeepGoing()) {
                    for (var idx = 0; idx < selectorAr.length; idx++) {
                        foundSelector = selectorAr[idx];
                        foundHtmlElement = this.NativeElement.querySelector(foundSelector);
                        if (foundHtmlElement) {
                            toReturnElemJacket = new GenericElemJacket_GenericElemJacket(this.CommonCore, foundHtmlElement);
                            break;
                        }
                    }
                    yield iterationJr.Wait();
                }
                if (foundHtmlElement) {
                    resolve(toReturnElemJacket);
                }
                else {
                    if (iterationJr.IsExhausted) {
                        reject(iterationJr.IsExhaustedMsg);
                    }
                    else {
                        reject('unknown reason');
                    }
                }
            }));
        });
    }
    WaitForThenClick(selectorAr) {
        return new Promise((resolve, reject) => GenericElemJacket_awaiter(this, void 0, void 0, function* () {
            this.ErrorHand.ThrowIfNullOrUndefined(this.WaitForThenClick.name, [selectorAr]);
            yield this.WaitForElement(selectorAr)
                .then((elemJacket) => elemJacket.Click())
                .then(() => resolve())
                .catch((err) => this.ErrorHand.FormatRejectMessage(this.WaitForThenClick.name, err));
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/Elements/ElementJacketBaseOfType.js

class ElementJacketBaseOfType_ElementJacketOfType extends GenericElemJacket_GenericElemJacket {
    constructor(commonCore, htmlElement) {
        super(commonCore, htmlElement);
        this.NodeTagName = htmlElement.tagName;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/Elements/FrameElemJacket.js
var FrameElemJacket_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






class FrameElemJacket_FrameElemJacket extends ElementJacketBaseOfType_ElementJacketOfType {
    constructor(commonCore, htmlIframeElement) {
        super(commonCore, htmlIframeElement);
    }
    static MfgrFrameElemJacketsStep1(commonCore, inputValue) {
        let htmlIframeElement = null;
        if (inputValue instanceof GenericElemJacket_GenericElemJacket) {
            if (inputValue.NodeTagName === SharedConst.Const.KeyWords.NodeTagName.IFrame) {
                htmlIframeElement = inputValue.NativeElement;
            }
            else {
                commonCore.ErrorHand.HandleFatalError([FrameElemJacket_FrameElemJacket.name, this.FactoryFrameElemJackets.name], 'Invalid tag name: ' + inputValue.NodeTagName);
            }
        }
        else if (inputValue instanceof HTMLElement) {
            htmlIframeElement = inputValue;
        }
        let frameElemJacket = new FrameElemJacket_FrameElemJacket(commonCore, htmlIframeElement);
        return frameElemJacket;
    }
    static FactoryFrameElemJackets(commonCore, inputValue) {
        return new Promise((resolve, reject) => FrameElemJacket_awaiter(this, void 0, void 0, function* () {
            let frameElemJacketAr = [];
            inputValue.forEach((inputValue) => {
                frameElemJacketAr.push(this.MfgrFrameElemJacketsStep1(commonCore, inputValue));
            });
            let promiseArFrame = [];
            frameElemJacketAr.forEach((frameElemJacket) => {
                promiseArFrame.push(frameElemJacket.PrepareFrameJacket());
            });
            yield Promise.all(promiseArFrame)
                .then(() => resolve(frameElemJacketAr))
                .catch((err) => reject(commonCore.ErrorHand.FormatRejectMessage([FrameElemJacket_FrameElemJacket.name, this.FactoryFrameElemJackets.name], err)));
        }));
    }
    PrepareFrameJacket() {
        return FrameElemJacket_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([FrameElemJacket_FrameElemJacket.name, this.PrepareFrameJacket.name]);
            try {
                this.WaitForCompleteNABFrameElement(FrameElemJacket_FrameElemJacket.name + this.PrepareFrameJacket.name)
                    .then(() => DocumentJacket_DocumentJacket.FactoryMakeDocumentJacket(this.CommonCore, this.NativeElement.contentDocument))
                    .then((documentJacket) => this.DocumentJacket = documentJacket)
                    .catch((err) => this.ErrorHand.HandleFatalError(this.PrepareFrameJacket.name, err));
                this.NativeIframeId = this.NativeElement.id;
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.PrepareFrameJacket.name, err);
            }
            this.Logger.FuncEnd([FrameElemJacket_FrameElemJacket.name, this.PrepareFrameJacket.name]);
        });
    }
    GetUrlJacket() {
        return this.DocumentJacket.UrlJacket;
    }
    SetFrameStyling(StateOfFrameStyling) {
        this.Logger.FuncStart(this.SetFrameStyling.name, FrameElemJacket_FrameElemJacket.name);
        this.NativeElement.style.height = StateOfFrameStyling.Height;
        this.NativeElement.style.left = StateOfFrameStyling.Left;
        this.NativeElement.style.position = StateOfFrameStyling.Position;
        this.NativeElement.style.top = StateOfFrameStyling.Top;
        this.NativeElement.style.width = StateOfFrameStyling.Width;
        this.NativeElement.style.zIndex = StateOfFrameStyling.ZIndex;
        this.Logger.FuncEnd(this.SetFrameStyling.name, FrameElemJacket_FrameElemJacket.name);
    }
    GetFrameStyling() {
        let toReturn = null;
        try {
            let sourceStyle = this.NativeElement.style;
            toReturn = {
                Height: sourceStyle.height,
                Left: sourceStyle.left,
                Position: sourceStyle.position,
                Top: sourceStyle.top,
                Width: sourceStyle.width,
                ZIndex: sourceStyle.zIndex
            };
        }
        catch (err) {
            this.ErrorHand.HandleFatalError(this.GetFrameStyling.name, err);
        }
        return toReturn;
    }
    TriggerInboundEventsAsync() {
    }
    GetIframeHtmlElem() {
        return this.NativeElement;
    }
    GetNativeContentDoc() {
        return this.DocumentJacket;
    }
    src() {
        return this.NativeElement.src;
    }
    ZindexAsInt() {
        let toReturn = -99;
        if (this.NativeElement.style && this.NativeElement.style.zIndex) {
            toReturn = parseInt(this.NativeElement.style.zIndex);
        }
        this.Logger.LogVal(this.ZindexAsInt.name, toReturn.toString());
        return toReturn;
    }
    GetNativeIframeId() {
        return this.NativeIframeId;
    }
    WaitForNABHostedDoc() {
        return FrameElemJacket_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForNABHostedDoc.name);
            try {
                var iterationJr = new IterationDrone_IterationDrone(this.CommonCore, this.WaitForNABHostedDoc.name, false);
                let readyStateNAB = null;
                let keepGoing = true;
                while (iterationJr.DecrementAndKeepGoing() && keepGoing) {
                    if (this.NativeElement.contentDocument) {
                        readyStateNAB = new ReadyStateNAB_ReadyStateNAB(this.CommonCore, this.NativeElement.contentDocument);
                        keepGoing = readyStateNAB.DocIsAboutBlank();
                        readyStateNAB.LogDebugValues();
                    }
                    else {
                        keepGoing = true;
                    }
                    yield iterationJr.Wait();
                }
                if (iterationJr.IsExhausted) {
                    this.Logger.Log(iterationJr.IsExhaustedMsg);
                }
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.WaitForNABHostedDoc.name, err);
            }
            this.Logger.FuncEnd(this.WaitForNABHostedDoc.name);
        });
    }
    WaitForCompleteNABFrameElement(friendly) {
        return FrameElemJacket_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => FrameElemJacket_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart([FrameElemJacket_FrameElemJacket.name, this.WaitForCompleteNABFrameElement.name], friendly);
                if (this.NativeElement) {
                    yield this.WaitForNABHostedDoc()
                        .then(() => DocumentJacket_DocumentJacket.FactoryMakeDocumentJacket(this.CommonCore, this.NativeElement.contentDocument))
                        .then((documentJacket) => this.DocumentJacket = documentJacket)
                        .then(() => this.DocumentJacket.WaitForCompleteNAB_DocumentJacket(friendly))
                        .then(() => resolve(this.DocumentJacket.GetLastKnownReadyState()))
                        .catch((err) => reject(this.ErrorHand.FormatRejectMessage([FrameElemJacket_FrameElemJacket.name, this.WaitForCompleteNABFrameElement.name], err)));
                }
                else {
                    reject(this.ErrorHand.FormatRejectMessage([FrameElemJacket_FrameElemJacket.name, this.WaitForCompleteNABFrameElement.name], 'No target doc: ' + friendly));
                }
                this.Logger.FuncEnd([FrameElemJacket_FrameElemJacket.name, this.WaitForCompleteNABFrameElement.name], friendly);
                ;
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/QueryStrKey.js
var QueryStrKey;
(function (QueryStrKey) {
    QueryStrKey[QueryStrKey["he"] = 0] = "he";
    QueryStrKey[QueryStrKey["hsTargetSs"] = 1] = "hsTargetSs";
    QueryStrKey[QueryStrKey["mo"] = 2] = "mo";
    QueryStrKey[QueryStrKey["sc_debug"] = 3] = "sc_debug";
    QueryStrKey[QueryStrKey["sc_itemid"] = 4] = "sc_itemid";
    QueryStrKey[QueryStrKey["sc_lang"] = 5] = "sc_lang";
    QueryStrKey[QueryStrKey["sc_mode"] = 6] = "sc_mode";
    QueryStrKey[QueryStrKey["sc_site"] = 7] = "sc_site";
    QueryStrKey[QueryStrKey["xmlcontrol"] = 8] = "xmlcontrol";
})(QueryStrKey || (QueryStrKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/UrlJacket.js



class UrlJacket_UrlJacket extends _CommonBase {
    constructor(commonCore, url) {
        super(commonCore);
        this.Logger.CTORStart(UrlJacket_UrlJacket.name);
        this.OriginalURL = url;
        this.ErrorHand.ThrowIfNullOrUndefined(UrlJacket_UrlJacket.name, url);
        this.Init_GenericUrlAgent();
        this.Logger.CTOREnd(UrlJacket_UrlJacket.name);
    }
    Init_GenericUrlAgent() {
        try {
            this.SetFromHref(this.OriginalURL);
        }
        catch (err) {
            this.ErrorHand.HandleFatalError(this.Init_GenericUrlAgent.name, err);
        }
    }
    GetUrlParts() {
        return this.UrlParts;
    }
    GetOriginalURL() {
        return this.OriginalURL;
    }
    QueryStringHasKey(key) {
        let toReturn = false;
        if (key !== null) {
            let keyAsStr = QueryStrKey[key];
            if (keyAsStr) {
                toReturn = this.UrlParts && this.UrlParts.UrlSearchParameters && this.UrlParts.UrlSearchParameters.has(keyAsStr);
            }
        }
        return toReturn;
    }
    GetQueryStringValueByKey(key) {
        let toReturn = '';
        if (this.QueryStringHasKey(key)) {
            let keyAsStr = QueryStrKey[key];
            toReturn = this.UrlParts.UrlSearchParameters.get(keyAsStr);
        }
        return toReturn;
    }
    SetParameterValueByKey(key, newValue) {
        if (this.UrlParts) {
            this.UrlParts.UrlSearchParameters.set(QueryStrKey[key], newValue);
        }
        else {
            this.ErrorHand.HandleFatalError(this.SetParameterValueByKey.name, 'No URLParts ' + QueryStrKey[key] + ' ' + newValue);
        }
    }
    SetFilePath(newFilePath) {
        this.UrlParts.FilePath = newFilePath;
    }
    SetFromHref(href) {
        var parser = document.createElement('a');
        parser.href = href;
        this.UrlParts = {
            OriginalRaw: href,
            Protocol: parser.protocol,
            HostAndPort: parser.host,
            UrlSearchParameters: new URLSearchParams(parser.search),
            FilePath: parser.pathname,
            Anchor: parser.hash,
            HasError: false,
        };
    }
    BuildFullUrlFromParts() {
        let toReturn = {
            AbsUrl: '',
            RelativeUrl: '',
        };
        if (this.UrlParts) {
            if (this.UrlParts && !this.UrlParts.HasError) {
                toReturn.AbsUrl = this.UrlParts.Protocol + '//' + this.UrlParts.HostAndPort;
                toReturn.RelativeUrl = '';
                if (this.UrlParts.FilePath.length > 0) {
                    toReturn.AbsUrl += this.UrlParts.FilePath;
                    toReturn.RelativeUrl += this.UrlParts.FilePath;
                }
                if (this.UrlParts.UrlSearchParameters) {
                    toReturn.AbsUrl += '?' + this.UrlParts.UrlSearchParameters.toString();
                    toReturn.RelativeUrl += '?' + this.UrlParts.UrlSearchParameters.toString();
                }
                if (this.UrlParts.Anchor.length > 0) {
                    toReturn.AbsUrl += '#' + this.UrlParts.Anchor;
                    toReturn.RelativeUrl += '#' + this.UrlParts.Anchor;
                }
            }
        }
        else {
            this.ErrorHand.HandleFatalError(this.BuildFullUrlFromParts.name, 'Null UrlParts');
        }
        return toReturn;
    }
    ExtractParameters(url) {
        let toReturn = [];
        if (url) {
            let splitStr = url.split('?');
            if (splitStr.length > 1) {
                let paramString = splitStr[1].replace(SharedConst.Const.Regex.QueryStrSeparatorQuest, '');
                let pairStr = paramString.split('&');
                if (pairStr && pairStr.length > 0) {
                    for (var idx = 0; idx < pairStr.length; idx++) {
                        let oneParamAr = pairStr[idx].split('=');
                        let paramPair = {
                            Key: '',
                            value: ''
                        };
                        if (oneParamAr) {
                            paramPair.Key = oneParamAr[0];
                            if (oneParamAr.length > 1) {
                                paramPair.value = oneParamAr[1];
                            }
                            toReturn.push(paramPair);
                        }
                    }
                }
            }
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/Document/DocumentJacket.js
var DocumentJacket_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};











class DocumentJacket_DocumentJacket extends _CommonBase {
    constructor(commonCore, nativeDocument) {
        super(commonCore);
        this.UrlJacket = null;
        this.DocId = Guid_Guid.NewRandomGuid();
        this.LastKnownReadyStateNAB = null;
        this.Logger.CTORStart(DocumentJacket_DocumentJacket.name);
        this.NativeDocument = nativeDocument;
        this.Instantiate();
        this.Logger.FuncEnd(DocumentJacket_DocumentJacket.name);
    }
    Instantiate() {
    }
    GetLastKnownReadyState() {
        return this.LastKnownReadyStateNAB;
    }
    InstantiateSyncProperties() {
        return DocumentJacket_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([DocumentJacket_DocumentJacket.name, this.InstantiateSyncProperties.name]);
            try {
                this.UrlJacket = new UrlJacket_UrlJacket(this.CommonCore, this.NativeDocument.URL);
                yield this.WaitForCompleteNAB_DocumentJacket(DocumentJacket_DocumentJacket.name)
                    .catch((err) => this.ErrorHand.HandleFatalError([DocumentJacket_DocumentJacket.name, this.InstantiateSyncProperties.name], err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([DocumentJacket_DocumentJacket.name, this.InstantiateSyncProperties.name], err);
            }
            this.Logger.FuncEnd([DocumentJacket_DocumentJacket.name, this.InstantiateSyncProperties.name]);
        });
    }
    static FactoryMakeDocumentJacket(commonCore, nativeDocument) {
        return DocumentJacket_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DocumentJacket_awaiter(this, void 0, void 0, function* () {
                commonCore.Logger.FuncStart(this.FactoryMakeDocumentJacket.name);
                let documentJacket = new DocumentJacket_DocumentJacket(commonCore, nativeDocument);
                yield documentJacket.InstantiateSyncProperties()
                    .then(() => resolve(documentJacket))
                    .catch((err) => reject(commonCore.ErrorHand.FormatRejectMessage(this.FactoryMakeDocumentJacket.name, err)));
                commonCore.Logger.FuncEnd(this.FactoryMakeDocumentJacket.name);
            }));
        });
    }
    GetElementById(idStr) {
        let elementJacket = null;
        let htmlElement = this.NativeDocument.getElementById(idStr);
        if (htmlElement) {
            elementJacket = new GenericElemJacket_GenericElemJacket(this.CommonCore, htmlElement);
        }
        return elementJacket;
    }
    QuerySelector(selector) {
        let elementJacket = null;
        let htmlElement = this.NativeDocument.querySelector(selector);
        if (htmlElement) {
            elementJacket = new GenericElemJacket_GenericElemJacket(this.CommonCore, htmlElement);
        }
        return elementJacket;
    }
    GetContentDoc() {
        return this.NativeDocument;
    }
    GetParentJacket() {
        this.Logger.FuncStart(this.GetParentJacket.name);
        let toReturn = null;
        let thisParent = parent.document;
        if (thisParent) {
            toReturn = new DocumentJacket_DocumentJacket(this.CommonCore, thisParent);
        }
        this.Logger.FuncEnd(this.GetParentJacket.name);
        return toReturn;
    }
    WaitForFirstHostedFrame(querySelector) {
        return DocumentJacket_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DocumentJacket_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForFirstHostedFrame.name, querySelector);
                yield this.WaitForGenericElemJacket(querySelector)
                    .then((genericElemJacket) => FrameElemJacket_FrameElemJacket.FactoryFrameElemJackets(this.CommonCore, [genericElemJacket]))
                    .then((frameElemJackets) => resolve(frameElemJackets[0]))
                    .catch((err) => reject(this.ErrorHand.FormatRejectMessage([this.WaitForFirstHostedFrame.name], err)));
                this.Logger.FuncEnd(this.WaitForFirstHostedFrame.name, querySelector);
            }));
        });
    }
    GetHostedFirstMatchingFrameElemJacket(querySelector) {
        return DocumentJacket_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DocumentJacket_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetHostedFirstMatchingFrameElemJacket.name, querySelector);
                let toReturnFrameElemJacket = null;
                this.ErrorHand.ThrowIfNullOrUndefined(this.GetHostedFirstMatchingFrameElemJacket.name, [this.NativeDocument]);
                var queryResultIframes = this.NativeDocument.querySelectorAll('iframe');
                this.Logger.LogVal('found iframes', queryResultIframes.length);
                let filteredList = this.NativeDocument.querySelectorAll('iframe' + querySelector);
                this.Logger.LogVal('found filtered iframes', filteredList.length);
                let htmlElemAr = [];
                let firstHtmlIframeElement = null;
                if (filteredList && filteredList.length > 0) {
                    firstHtmlIframeElement = filteredList[0];
                }
                yield FrameElemJacket_FrameElemJacket.FactoryFrameElemJackets(this.CommonCore, [firstHtmlIframeElement])
                    .then((frameElemJackets) => toReturnFrameElemJacket = frameElemJackets[0])
                    .then(() => resolve(toReturnFrameElemJacket))
                    .catch((err) => reject(this.ErrorHand.FormatRejectMessage([DocumentJacket_DocumentJacket.name, this.GetHostedFirstMatchingFrameElemJacket.name], err)));
                this.Logger.FuncEnd(this.GetHostedFirstMatchingFrameElemJacket.name, querySelector);
            }));
        });
    }
    QueryResultNodeListToHtmlAr(queryResult) {
        let htmlElements = [];
        if (queryResult) {
            queryResult.forEach((result) => {
                htmlElements.push(result);
            });
        }
        return htmlElements;
    }
    GetHostedFrameJackets() {
        return new Promise((resolve, reject) => DocumentJacket_awaiter(this, void 0, void 0, function* () {
            this.ErrorHand.ThrowIfNullOrUndefined(this.GetHostedFrameJackets.name, [this.NativeDocument]);
            var queryResults = this.NativeDocument.querySelectorAll(ContentConst.Const.Selector.SC.IframeContent.sc920);
            if (!queryResults) {
                queryResults = this.NativeDocument.querySelectorAll(ContentConst.Const.Selector.SC.IframeContent.sc820);
            }
            let htmlElements = this.QueryResultNodeListToHtmlAr(queryResults);
            yield FrameElemJacket_FrameElemJacket.FactoryFrameElemJackets(this.CommonCore, htmlElements)
                .then((frameElemJackets) => resolve(frameElemJackets))
                .catch((err) => reject(this.ErrorHand.FormatRejectMessage([DocumentJacket_DocumentJacket.name, this.GetHostedFrameJackets.name], err)));
        }));
    }
    Validate() {
        let url = this.UrlJacket.BuildFullUrlFromParts();
        if (!url) {
            this.ErrorHand.HandleFatalError(this.Validate.name, 'No URL');
        }
        else if (url.AbsUrl === SharedConst.Const.UrlSuffix.AboutBlank) {
            this.ErrorHand.HandleFatalError(this.Validate.name, SharedConst.Const.UrlSuffix.AboutBlank + ' not allowed');
        }
    }
    WaitForGenericElemJacket(selector, promiseFailAction = PromiseFailAction.Default) {
        return DocumentJacket_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DocumentJacket_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForGenericElemJacket.name, selector);
                var htmlElement = null;
                var iterationJr = new IterationDrone_IterationDrone(this.CommonCore, this.WaitForGenericElemJacket.name + ' - selector: "' + selector + '"', true);
                let firstFind = true;
                while (!htmlElement && iterationJr.DecrementAndKeepGoing()) {
                    htmlElement = this.NativeDocument.querySelector(selector);
                    if (htmlElement && !StaticHelpers_StaticHelpers.IsNullOrUndefined(htmlElement)) {
                        if (firstFind) {
                            htmlElement = null;
                            firstFind = false;
                        }
                        else {
                            this.Logger.Log('found it');
                            let genericElemJacket = new GenericElemJacket_GenericElemJacket(this.CommonCore, htmlElement);
                            this.Logger.LogAsJsonPretty('found', genericElemJacket);
                            resolve(genericElemJacket);
                        }
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (promiseFailAction === PromiseFailAction.Default || promiseFailAction == PromiseFailAction.RejectThrow) {
                    reject(iterationJr.IsExhaustedMsg);
                }
                else if (promiseFailAction === PromiseFailAction.ResolveNull) {
                    resolve(null);
                }
                this.Logger.FuncEnd(this.WaitForGenericElemJacket.name, selector);
            }));
        });
    }
    WaitForThenClick(selectorAr) {
        return new Promise((resolve, reject) => DocumentJacket_awaiter(this, void 0, void 0, function* () {
            this.ErrorHand.ThrowIfNullOrUndefined(this.WaitForThenClick.name, [selectorAr, this.NativeDocument]);
            var foundHtmlElement = null;
            var iterationJr = new IterationDrone_IterationDrone(this.CommonCore, this.WaitForThenClick.name + ' | ' + JSON.stringify(selectorAr), true);
            let foundSelector = '';
            while (!foundHtmlElement && iterationJr.DecrementAndKeepGoing()) {
                for (var idx = 0; idx < selectorAr.length; idx++) {
                    foundSelector = selectorAr[idx];
                    foundHtmlElement = this.NativeDocument.querySelector(foundSelector);
                    if (foundHtmlElement) {
                        break;
                    }
                }
                yield iterationJr.Wait();
            }
            if (foundHtmlElement) {
                try {
                    this.Logger.LogAsJsonPretty(this.WaitForThenClick.name + ' clicking', foundSelector);
                    foundHtmlElement.click();
                    resolve();
                }
                catch (err) {
                    reject(this.WaitForThenClick.name + ' | ' + err);
                }
            }
            else {
                if (!foundHtmlElement && iterationJr.IsExhausted) {
                    reject(iterationJr.IsExhaustedMsg);
                }
                else {
                    reject('unknown reason');
                }
            }
        }));
    }
    RaceWaitAndClick(selector) {
        return DocumentJacket_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DocumentJacket_awaiter(this, void 0, void 0, function* () {
                yield this.WaitForThenClick([selector.sc920, selector.sc820])
                    .then(() => resolve())
                    .catch((err) => reject(this.RaceWaitAndClick.name + ' | ' + err));
            }));
        });
    }
    WaitForAndClickWithPayload(selector, payload) {
        return new Promise((resolve, reject) => DocumentJacket_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForAndClickWithPayload.name, selector);
            yield this.WaitForThenClick([selector])
                .then(() => resolve(payload))
                .catch(ex => {
                this.ErrorHand.HandleFatalError(this.WaitForAndClickWithPayload.name, ex);
                reject(ex);
            });
        }));
    }
    WaitForCompleteNAB_DocumentJacket(friendly) {
        return DocumentJacket_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DocumentJacket_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart([DocumentJacket_DocumentJacket.name, this.WaitForCompleteNAB_DocumentJacket.name], friendly);
                this.Logger.LogVal('url', this.NativeDocument.URL);
                this.Logger.LogVal('readyState', this.NativeDocument.readyState);
                this.ErrorHand.ThrowIfNullOrUndefined(this.WaitForCompleteNAB_DocumentJacket.name, this.NativeDocument);
                var iterationJr = new IterationDrone_IterationDrone(this.CommonCore, this.WaitForCompleteNAB_DocumentJacket.name, false);
                this.LastKnownReadyStateNAB = new ReadyStateNAB_ReadyStateNAB(this.CommonCore, this.NativeDocument);
                while (iterationJr.DecrementAndKeepGoing() && !this.LastKnownReadyStateNAB.IsCompleteNAB()) {
                    this.LastKnownReadyStateNAB.LogDebugValues();
                    yield iterationJr.Wait();
                }
                this.LastKnownReadyStateNAB.LogDebugValues();
                if (iterationJr.IsExhausted) {
                    this.Logger.Log(iterationJr.IsExhaustedMsg);
                    reject(iterationJr.IsExhaustedMsg);
                }
                else {
                    resolve(this.LastKnownReadyStateNAB);
                }
                this.Logger.FuncEnd([DocumentJacket_DocumentJacket.name, this.WaitForCompleteNAB_DocumentJacket.name], friendly);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/ErrorHandler/ErrorHandlerAgent.js
var ErrorHandlerAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class ErrorHandlerAgent_ErrorHandlerAgent {
    constructor() {
        this.TypeDiscriminator = TypeDiscriminator.IErrorHandler;
        this.ErrorStack = [];
    }
    IntroduceSiblings(logger, taskMonitor) {
        this.Logger = logger;
        this.TaskMonitor = taskMonitor;
    }
    ThrowIfNullOrUndefined(title, testSubject) {
        if (testSubject instanceof Array) {
            testSubject.forEach((testSubject) => this.ThrowIfNullOrUndefined(title, testSubject));
        }
        else {
            if (typeof testSubject === 'undefined' || testSubject === null) {
                try {
                    if (this.TaskMonitor) {
                        this.TaskMonitor.RequestCancel(ErrorHandlerAgent_ErrorHandlerAgent.name + '.' + this.ThrowIfNullOrUndefined.name + '-' + title);
                    }
                    else {
                        console.log('No Task Monitor found');
                    }
                }
                catch (err) {
                    console.log('Error in: ' + this.ThrowIfNullOrUndefined.name + '  ' + err);
                }
                this.HandleFatalError(title, 'Failed Null check A');
            }
            else {
            }
        }
    }
    static ThrowIfNullOrUndefinedStatic(title, testSubject) {
        if (testSubject instanceof Array) {
            testSubject.forEach((testSubject) => ErrorHandlerAgent_ErrorHandlerAgent.ThrowIfNullOrUndefinedStatic(title, testSubject));
        }
        else {
            if (typeof testSubject === 'undefined' || testSubject === null) {
                throw (title + ' Failed Null check B');
            }
        }
    }
    WarningAndContinue(container, text) {
        if (!container) {
            container = 'unknown';
        }
        if (!text) {
            text = 'unknown';
        }
        this.ErrorLogger('');
        this.ErrorLogger('\t\t** WARNING ** ' + container + ' ' + text);
        this.ErrorLogger('');
    }
    StyleFormat(colorAr, text) {
        let toReturn = '';
        toReturn = '';
        colorAr.forEach((color) => {
            toReturn += SharedConst.Const.Colors.ConsoleStyles.StyleEsc + color;
        });
        toReturn += text + SharedConst.Const.Colors.ConsoleStyles.StyleEsc + SharedConst.Const.Colors.ConsoleStyles.StyleReset;
        return toReturn;
    }
    DrawErrorMessage(container, text) {
        if (!container) {
            container = 'unknown';
        }
        let textToRender = [];
        if (!text) {
            text = ['unknown'];
        }
        if (!Array.isArray(text)) {
            textToRender = [text];
        }
        else {
            textToRender = text;
        }
        this.ErrorLogger('');
        this.ErrorLogger('\t\ts) '
            + this.StyleFormat([SharedConst.Const.Colors.ConsoleStyles.StyleBgRed], '** ERROR **'));
        this.ErrorLogger('\t\t  container: ' + container);
        this.ErrorLogger('');
        textToRender.forEach((message) => {
            this.ErrorStack.push({
                ContainerFunc: container,
                ErrorString: message
            });
            this.ErrorLogger('\t\t' + message);
        });
        this.ErrorLogger('');
        this.ErrorLogger('\t\te)** ERROR container: ** ' + container);
        this.ErrorLogger('');
    }
    ErrorAndContinue(container, text) {
        this.DrawErrorMessage(container, text);
    }
    ErrorLogger(text) {
        return ErrorHandlerAgent_awaiter(this, void 0, void 0, function* () {
            console.log('********** ' + text + ' **********');
        });
    }
    FormatRejectMessage(container, err) {
        let toReturn = '';
        if (Array.isArray(container)) {
            let isFirstInArray = true;
            container.forEach((arrayItem) => {
                if (!isFirstInArray) {
                    toReturn += '.';
                }
                isFirstInArray = false;
                toReturn += arrayItem;
            });
        }
        else {
            toReturn = container;
        }
        toReturn += ' | ' + err;
        return toReturn;
    }
    HandleFatalError(container, text) {
        let stack = new Error().stack;
        let containerTextToRender = '';
        if (Array.isArray(container)) {
            let isFirstInArray = true;
            container.forEach((subContainer) => {
                if (!isFirstInArray) {
                    containerTextToRender += '.';
                }
                isFirstInArray = false;
                containerTextToRender += subContainer;
            });
        }
        else {
            containerTextToRender = container;
        }
        this.DrawErrorMessage(containerTextToRender, [text, stack]);
        try {
            this.TaskMonitor.RequestCancel(ErrorHandlerAgent_ErrorHandlerAgent.name + '.' + this.HandleFatalError.name);
        }
        catch (err) {
            console.log(err);
        }
        console.log('----- sigh...sad face ');
    }
    HandleCancelReaction(arg0, arg1) {
        console.log('Reacting to cancel');
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/_APICoreBase.js


class _APICoreBase_APICoreBase extends _CommonBase {
    constructor(apiCore) {
        super(apiCore);
        ErrorHandlerAgent_ErrorHandlerAgent.ThrowIfNullOrUndefinedStatic(_CommonBase.name, [apiCore]);
        ErrorHandlerAgent_ErrorHandlerAgent.ThrowIfNullOrUndefinedStatic(_CommonBase.name, [apiCore.ErrorHand, apiCore.Logger, apiCore.TaskMonitor]);
        this.Logger = apiCore.Logger;
        this.ApiCore = apiCore;
        this.ErrorHand = apiCore.ErrorHand;
        this.TaskMonitor = apiCore.TaskMonitor;
        this.RunTimeOptions = apiCore.RunTimeOptions;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Proxies/Browser/BrowserTabProxy.js
var BrowserTabProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class BrowserTabProxy_BrowserTabProxy extends _CommonBase {
    constructor(commonCore, nativeBrowserTab) {
        super(commonCore);
        this.NativeBrowserTab = nativeBrowserTab;
    }
    Id() {
        return this.NativeBrowserTab.id;
    }
    url() {
        return this.NativeBrowserTab.url;
    }
    UpdateAndWaitForComplete(AbsUrl) {
        return BrowserTabProxy_awaiter(this, void 0, void 0, function* () {
            try {
                browser.tabs.update(this.NativeBrowserTab.id, { url: AbsUrl })
                    .then(() => this.TabWaitForReadyStateCompleteNative());
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([BrowserTabProxy_BrowserTabProxy.name, this.UpdateAndWaitForComplete.name], err);
            }
        });
    }
    TabWaitForReadyStateCompleteNative() {
        return new Promise((resolve, reject) => BrowserTabProxy_awaiter(this, void 0, void 0, function* () {
            let iterHelper = new IterationDrone_IterationDrone(this.CommonCore, this.TabWaitForReadyStateCompleteNative.name, true);
            while (this.NativeBrowserTab.status !== 'complete' && iterHelper.DecrementAndKeepGoing()) {
                this.Logger.LogVal('tab status', this.NativeBrowserTab.status);
                yield iterHelper.Wait;
            }
            if (this.NativeBrowserTab.status === 'complete') {
                resolve();
            }
            else {
                if (iterHelper.IsExhausted) {
                    reject(iterHelper.IsExhaustedMsg);
                }
                else {
                    reject('unknown reason');
                }
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Proxies/Browser/_BaseBrowserProxy.js
var _BaseBrowserProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class _BaseBrowserProxy_BaseBrowserProxy extends _CommonBase {
    constructor(commonCore) {
        super(commonCore);
        this.TypeDiscriminator = TypeDiscriminator.BaseBrowserProxy;
        this.ActiveBrowserTabProxy = null;
    }
    UpdateAndWaitForComplete(browserTabProxy, AbsUrl) {
        return _BaseBrowserProxy_awaiter(this, void 0, void 0, function* () {
            try {
                yield browserTabProxy.UpdateAndWaitForComplete(AbsUrl)
                    .catch((err) => this.ErrorHand.HandleFatalError([_BaseBrowserProxy_BaseBrowserProxy.name, this.UpdateAndWaitForComplete.name], err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([_BaseBrowserProxy_BaseBrowserProxy.name, this.UpdateAndWaitForComplete.name], err);
            }
        });
    }
    SetActiveBrowserTab() {
        return _BaseBrowserProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => _BaseBrowserProxy_awaiter(this, void 0, void 0, function* () {
                yield browser.tabs.query({ currentWindow: true, active: true })
                    .then((result) => {
                    this.Logger.Log('Tab result received');
                    let resultTab = result[0];
                    this.ActiveBrowserTabProxy = new BrowserTabProxy_BrowserTabProxy(this.CommonCore, resultTab);
                })
                    .then(() => resolve())
                    .catch((err) => reject(this.ErrorHand.FormatRejectMessage([_BaseBrowserProxy_BaseBrowserProxy.name, this.SetActiveBrowserTab.name], err)));
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content-Top/scripts/Proxies/ContentBrowserProxy.js
var ContentBrowserProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class ContentBrowserProxy_ContentBrowserProxy extends _BaseBrowserProxy_BaseBrowserProxy {
    ExtensionGetUrl(arg0) {
        return browser.extension.getURL(arg0);
    }
    AddListenerForPopUp(callback) {
        browser.runtime.onMessage.addListener((request) => callback(request));
    }
    InitAsyncProperties() {
        return ContentBrowserProxy_awaiter(this, void 0, void 0, function* () {
            try {
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([ContentBrowserProxy_ContentBrowserProxy.name, this.InitAsyncProperties.name], err);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Managers/SitecoreUiManager/SitecoreUiManager.js
var SitecoreUiManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class SitecoreUiManager_ScUiManager extends _APICoreBase_APICoreBase {
    constructor(apiCore) {
        super(apiCore);
    }
    InitSitecoreUiManager() {
        return SitecoreUiManager_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.InitSitecoreUiManager.name);
            try {
                this.InjectCss();
            }
            catch (err) {
                throw (err);
            }
            this.Logger.FuncEnd(this.InitSitecoreUiManager.name);
        });
    }
    InjectCss() {
        let contentBrowserProxy = new ContentBrowserProxy_ContentBrowserProxy(this.ApiCore);
        const style = document.createElement('link');
        style.type = 'text/css';
        style.href = contentBrowserProxy.ExtensionGetUrl('AutoBuild/final/content.min.css');
        style.rel = "stylesheet";
        document.getElementsByTagName("head")[0].appendChild(style);
    }
    AdminB(documentJacket, callbackOnComplete) {
        this.Logger.FuncStart(this.AdminB.name, 'targetDoc: ' + Guid_Guid.AsShort(documentJacket.DocId));
        this.Logger.Log('callback passed: ' + (callbackOnComplete !== null));
        let userNameElem = documentJacket.GetElementById(ContentConst.Const.ElemId.SC.scLoginUserName);
        let passwordElem = documentJacket.GetElementById(ContentConst.Const.ElemId.SC.scLoginPassword);
        if (this.Logger.IsNotNullOrUndefinedBool('userNameElem', userNameElem)
            &&
                this.Logger.IsNotNullOrUndefinedBool('passwordElem', passwordElem)) {
            userNameElem.NativeElement.setAttribute('value', ContentConst.Const.Names.scDefaultAdminUserName);
            passwordElem.NativeElement.setAttribute('value', ContentConst.Const.Names.scDefaultAdminPassword);
            var loginButton = this.GetLoginButton(documentJacket);
            if (this.Logger.IsNotNullOrUndefinedBool('loginButton', loginButton)) {
                this.Logger.Log('clicking loginbutton');
                loginButton.NativeElement.click();
                if (callbackOnComplete) {
                    this.Logger.Log('Triggering callback');
                    setTimeout(callbackOnComplete, ContentConst.Const.Timeouts.PostLoginBtnClick);
                }
                else {
                    this.Logger.Log('no callback passed');
                }
            }
            else {
                this.ErrorHand.HandleFatalError(this.AdminB.name, 'No loginButton');
            }
        }
        else {
            this.ErrorHand.HandleFatalError(this.AdminB.name, 'No Username or password field');
        }
        this.Logger.FuncEnd(this.AdminB.name);
    }
    GetLoginButton(documentJacket) {
        this.Logger.FuncStart(this.GetLoginButton.name);
        var toReturn = documentJacket.GetElementById(ContentConst.Const.ElemId.SC.scLoginBtn.sc920);
        if (!toReturn) {
            toReturn = documentJacket.QuerySelector(ContentConst.Const.Selector.SC.LoginBtn.sc820);
        }
        this.Logger.Log('toReturn: ' + toReturn);
        this.Logger.FuncEnd(this.GetLoginButton.name);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Collections/ScWindowTypeDeterminators.js


class ScWindowTypeDeterminators {
}
ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell = /sitecore\/shell/ig;
ScWindowTypeDeterminators.regexMatchAll = /.*/ig;
ScWindowTypeDeterminators.regexMatchApplicationsContentManager = /sitecore\/shell\/Applications\/Content.*Manager/ig;
ScWindowTypeDeterminators.XMLControlApplication = {
    Key: QueryStrKey.xmlcontrol,
    ValueMatch: /Application/ig,
};
ScWindowTypeDeterminators.ScWindowTypeDeterminators = [
    {
        ConfidenceScore: 0,
        Friendly: "Access View",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey.he,
                ValueMatch: /Access.?Viewer/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: ScWindowType.AccessViewer,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.AccessViewer],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Archive",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey.he,
                ValueMatch: /Archive/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: ScWindowType.Archive,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.Archive],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Content Editor Hosted",
        QueryKeyValuePairs: [
            {
                Key: QueryStrKey.he,
                ValueMatch: /Content.*Editor/ig,
            }
        ],
        RegexPathTest: /\/sitecore\/shell\/Applications\/Content-Editor/ig,
        ScWindowType: ScWindowType.ContentEditor,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.ContentEditor],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Content Editor Stand Alone",
        QueryKeyValuePairs: [
            {
                Key: QueryStrKey.he,
                ValueMatch: /\/sitecore\/shell\/Applications\/Content.*Editor/ig,
            }
        ],
        RegexPathTest: /sitecore\/shell\/Applications\/Content.*Editor/ig,
        ScWindowType: ScWindowType.ContentEditor,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.ContentEditor],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Control Panel",
        QueryKeyValuePairs: [],
        RegexPathTest: /sitecore\/shell\/Applications\/Control.*20panel/ig,
        ScWindowType: ScWindowType.ControlPanel,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.ControlPanel],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Desktop",
        QueryKeyValuePairs: [],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: ScWindowType.Desktop,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.Desktop],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Debug",
        QueryKeyValuePairs: [
            {
                Key: QueryStrKey.sc_debug,
                ValueMatch: /1/ig,
            },
        ],
        RegexPathTest: /.*/ig,
        ScWindowType: ScWindowType.Debug,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.Debug],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Domain Manager",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey.he,
                ValueMatch: /Domain.?Manager/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: ScWindowType.DomainManager,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.DomainManager],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Email Experience Manager",
        QueryKeyValuePairs: [],
        RegexPathTest: /sitecore\/shell\/client\/Applications\/ECM\/Dashboard/ig,
        ScWindowType: ScWindowType.EmailExperienceManager,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.EmailExperienceManager],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Experience Analytics",
        QueryKeyValuePairs: [],
        RegexPathTest: /sitecore\/client\/Applications\/ExperienceAnalytics\/Dashboard/ig,
        ScWindowType: ScWindowType.ExperienceAnalytics,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.ExperienceAnalytics],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Experience Profile",
        QueryKeyValuePairs: [],
        RegexPathTest: /sitecore\/client\/Applications\/ExperienceProfile/ig,
        ScWindowType: ScWindowType.ExperienceProfile,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.ExperienceProfile],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Experience Editor - Edit",
        QueryKeyValuePairs: [
            {
                Key: QueryStrKey.sc_mode,
                ValueMatch: /edit/ig,
            },
        ],
        RegexPathTest: /.*/ig,
        ScWindowType: ScWindowType.ExperienceEditor_Edit,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.ExperienceEditor_Edit],
    },
    {
        ConfidenceScore: 0,
        Friendly: "FallBack",
        QueryKeyValuePairs: [],
        RegexPathTest: /sitecore\//ig,
        ScWindowType: ScWindowType.FallBack,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.FallBack],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Federated Experience Manager",
        QueryKeyValuePairs: [],
        RegexPathTest: /\/sitecore\/client\/Applications\/fxm\/DomainDashboard/ig,
        ScWindowType: ScWindowType.FederatedExperienceManager,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.FederatedExperienceManager],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Installation Wizard",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey.he,
                ValueMatch: /Installation?.Wizard/ig,
            },
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: ScWindowType.InstallationWizard,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.InstallationWizard],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Installer Build Package",
        QueryKeyValuePairs: [
            {
                Key: QueryStrKey.xmlcontrol,
                ValueMatch: /Installer.?BuildPackage/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: ScWindowType.InstallerBuildPackage,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.InstallerBuildPackage],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Installed Licenses",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey.he,
                ValueMatch: /Installed.?Licenses/ig,
            },
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: ScWindowType.InstalledLicenses,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.InstalledLicenses],
    },
    {
        ConfidenceScore: 0,
        Friendly: "JqueryModalDialogs",
        QueryKeyValuePairs: [],
        RegexPathTest: /sitecore\/shell\/Controls\/JqueryModalDialogs.html/ig,
        ScWindowType: ScWindowType.JqueryModalDialogs,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.JqueryModalDialogs],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Keyboard Map",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey.he,
                ValueMatch: /Keyboard.?Map/ig,
            },
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: ScWindowType.KeyboardMap,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.KeyboardMap],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Launchpad",
        QueryKeyValuePairs: [],
        RegexPathTest: /sitecore\/client\/Applications\/Launchpad/ig,
        ScWindowType: ScWindowType.Launchpad,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.Launchpad],
    },
    {
        ConfidenceScore: 0,
        Friendly: "License Details",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey.he,
                ValueMatch: /License.?Details/ig,
            },
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: ScWindowType.LicenseDetails,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.LicenseDetails],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Login",
        QueryKeyValuePairs: [],
        RegexPathTest: /sitecore\/login/ig,
        ScWindowType: ScWindowType.LoginPage,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.LoginPage],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Log Viewer",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey.he,
                ValueMatch: /Log.?Viewer/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: ScWindowType.LogViewer,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.LogViewer],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Marketing Control Panel",
        QueryKeyValuePairs: [
            {
                Key: QueryStrKey.he,
                ValueMatch: /Marketing.?Control.?Panel/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexMatchApplicationsContentManager,
        ScWindowType: ScWindowType.MarketingControlPanel,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.MarketingControlPanel],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Media Library",
        QueryKeyValuePairs: [
            {
                Key: QueryStrKey.he,
                ValueMatch: /Media.?Library/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexMatchApplicationsContentManager,
        ScWindowType: ScWindowType.MediaLibrary,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.MediaLibrary],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Package Designer",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey.he,
                ValueMatch: /Package.?Designer/ig
            },
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: ScWindowType.PackageDesigner,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.PackageDesigner],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Preview",
        RegexPathTest: ScWindowTypeDeterminators.regexMatchAll,
        QueryKeyValuePairs: [
            {
                Key: QueryStrKey.sc_mode,
                ValueMatch: /preview/ig
            }
        ],
        ScWindowType: ScWindowType.ExperienceEditor_Preview,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.ExperienceEditor_Preview],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Publish",
        QueryKeyValuePairs: [],
        RegexPathTest: /sitecore\/shell\/Applications\/Publish/ig,
        ScWindowType: ScWindowType.Publish,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.Publish],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Recycle Bin",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey.he,
                ValueMatch: /Recycle.?Bin/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: ScWindowType.RecycleBin,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.RecycleBin],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Run",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey.he,
                ValueMatch: /Run/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: ScWindowType.Run,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.Run],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Role Manager",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey.he,
                ValueMatch: /Role.?Manager/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: ScWindowType.RoleManager,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.RoleManager],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Scan for Broken Links",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey.he,
                ValueMatch: /Scan.?for.?Broken.?Links/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: ScWindowType.ScanForBrokenLinks,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.ScanForBrokenLinks],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Security Editor",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey.he,
                ValueMatch: /Security.?Editor/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: ScWindowType.SecurityEditor,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.SecurityEditor],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Template Manager",
        QueryKeyValuePairs: [
            {
                Key: QueryStrKey.he,
                ValueMatch: /Template.*Manager/ig,
            }, {
                Key: QueryStrKey.mo,
                ValueMatch: /templateworkspace/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexMatchApplicationsContentManager,
        ScWindowType: ScWindowType.TemplateManager,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.TemplateManager],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Update Center",
        QueryKeyValuePairs: [],
        RegexPathTest: /sitecore\/shell\/client\/applications\/updatecenter\/updates/ig,
        ScWindowType: ScWindowType.FallBack,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.FallBack],
    },
    {
        ConfidenceScore: 0,
        Friendly: "User Manager",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey.he,
                ValueMatch: /User.?Manager/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: ScWindowType.UserManager,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.UserManager],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Work Box",
        QueryKeyValuePairs: [],
        RegexPathTest: /sitecore\/shell\/Applications\/Workbox/ig,
        ScWindowType: ScWindowType.Workbox,
        ScWindowTypeFriendly: ScWindowType[ScWindowType.Workbox],
    },
];

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/UrlAgent/ScWindowTypeResolver.js



class ScWindowTypeResolver_ScWindowTypeResolver extends _CommonBase {
    constructor(commonCore) {
        super(commonCore);
        this.Logger.CTORStart(ScWindowTypeResolver_ScWindowTypeResolver.name);
        this.Logger.FuncEnd(ScWindowTypeResolver_ScWindowTypeResolver.name);
    }
    RunJacketAgainstAllDeterminators(UrlJacket) {
        let determinators = ScWindowTypeDeterminators.ScWindowTypeDeterminators;
        let toReturnPageDeterminator = null;
        determinators.forEach((determinant) => {
            let passed = true;
            determinant.ConfidenceScore = 0;
            passed = this.TestJacketAgainstRegex(determinant.RegexPathTest, UrlJacket);
            if (passed) {
                let regExAsStr = determinant.RegexPathTest.toString();
                if (regExAsStr.charAt(0) === "/") {
                    regExAsStr = regExAsStr.substr(1);
                }
                if (regExAsStr.charAt(regExAsStr.length - 1) === "/") {
                    regExAsStr = regExAsStr.substr(0, regExAsStr.length - 1);
                }
                let slashCount = regExAsStr.split('/').length;
                determinant.ConfidenceScore += slashCount;
            }
            determinant.QueryKeyValuePairs.forEach((queryKeyvaluePair) => {
                let queryTest = UrlJacket.QueryStringHasKey(queryKeyvaluePair.Key);
                if (queryTest) {
                    queryTest = this.__urlTestAgainstRegex(queryKeyvaluePair.ValueMatch, UrlJacket.GetQueryStringValueByKey(queryKeyvaluePair.Key));
                }
                passed = passed && queryTest;
                if (passed) {
                    determinant.ConfidenceScore++;
                }
            });
            if (passed) {
                if (!toReturnPageDeterminator || toReturnPageDeterminator.ConfidenceScore < determinant.ConfidenceScore) {
                    toReturnPageDeterminator = determinant;
                }
            }
        });
        this.Logger.LogAsJsonPretty('Final determinant winner', toReturnPageDeterminator);
        return toReturnPageDeterminator;
    }
    TestJacketAgainstRegex(regexPattern, UrlJacket) {
        return this.__urlTestAgainstRegex(regexPattern, UrlJacket.BuildFullUrlFromParts().AbsUrl);
    }
    __urlTestAgainstRegex(regexPattern, testee) {
        let testResult = new RegExp(regexPattern).test(testee);
        return testResult;
    }
    GetScWindowType(UrlJacket) {
        var toReturn = ScWindowType.Unknown;
        let result = this.RunJacketAgainstAllDeterminators(UrlJacket);
        if (!result) {
            this.ErrorHand.HandleFatalError(this.GetScWindowType.name, 'Undetermined page: ' + UrlJacket.BuildFullUrlFromParts());
        }
        else {
            toReturn = result.ScWindowType;
        }
        this.Logger.LogImportant(this.GetScWindowType.name + ' ' + ScWindowType[toReturn]);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultFriendly.js


class DefaultFriendly_DefaultFriendly {
    constructor() {
        this.Flavor = SnapShotFlavor[SnapShotFlavor.Live];
        this.NickName = '';
        this.TimeStamp = '';
        this.WindowType = ScWindowType[ScWindowType.Unknown];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultMetaData.js



class DefaultMetaData_DefaultMetaData {
    constructor() {
        this.Flavor = SnapShotFlavor.Live;
        this.SessionId = '';
        this.SnapshotId = Guid_Guid.NewRandomGuid();
        this.StorageKey = '';
        this.TimeStamp = null;
        this.WindowType = ScWindowType.Unknown;
        this.Hash = -1;
        this.StorageId = Guid_Guid.NewRandomGuid();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/40 - ScProxyDisciminator.js
var ScProxyDisciminator;
(function (ScProxyDisciminator) {
    ScProxyDisciminator[ScProxyDisciminator["Unknown"] = 0] = "Unknown";
    ScProxyDisciminator[ScProxyDisciminator["AccessViewer"] = 40641679] = "AccessViewer";
    ScProxyDisciminator[ScProxyDisciminator["Archive"] = 40018831] = "Archive";
    ScProxyDisciminator[ScProxyDisciminator["CEFrame"] = 40708783] = "CEFrame";
    ScProxyDisciminator[ScProxyDisciminator["ContentEditor"] = 40805149] = "ContentEditor";
    ScProxyDisciminator[ScProxyDisciminator["Desktop"] = 40034160] = "Desktop";
    ScProxyDisciminator[ScProxyDisciminator["DomainManager"] = 40883841] = "DomainManager";
    ScProxyDisciminator[ScProxyDisciminator["DTAreaElemProxy"] = 40950793] = "DTAreaElemProxy";
    ScProxyDisciminator[ScProxyDisciminator["DTFrameProxy"] = 40071479] = "DTFrameProxy";
    ScProxyDisciminator[ScProxyDisciminator["EmailExperienceManager"] = 40597945] = "EmailExperienceManager";
    ScProxyDisciminator[ScProxyDisciminator["FallBack"] = 40949195] = "FallBack";
    ScProxyDisciminator[ScProxyDisciminator["GenericStateLessFrameProxy"] = 40945013] = "GenericStateLessFrameProxy";
    ScProxyDisciminator[ScProxyDisciminator["InstallationWizard"] = 40632864] = "InstallationWizard";
    ScProxyDisciminator[ScProxyDisciminator["InstalledLicenses"] = 40808841] = "InstalledLicenses";
    ScProxyDisciminator[ScProxyDisciminator["InstallerBuildPackageDocProxy"] = 40493480] = "InstallerBuildPackageDocProxy";
    ScProxyDisciminator[ScProxyDisciminator["InstallerBuildPackageFrameProxy"] = 40985241] = "InstallerBuildPackageFrameProxy";
    ScProxyDisciminator[ScProxyDisciminator["InstallerDesignerDocProxy"] = 40651221] = "InstallerDesignerDocProxy";
    ScProxyDisciminator[ScProxyDisciminator["JqueryModalDialogsDocProxy"] = 40307944] = "JqueryModalDialogsDocProxy";
    ScProxyDisciminator[ScProxyDisciminator["JqueryModalDialogsFrameProxy"] = 40077497] = "JqueryModalDialogsFrameProxy";
    ScProxyDisciminator[ScProxyDisciminator["KeyBoardMap"] = 40403688] = "KeyBoardMap";
    ScProxyDisciminator[ScProxyDisciminator["LaunchPad"] = 40676087] = "LaunchPad";
    ScProxyDisciminator[ScProxyDisciminator["LicenseDetails"] = 40873407] = "LicenseDetails";
    ScProxyDisciminator[ScProxyDisciminator["LogViewer"] = 40853367] = "LogViewer";
    ScProxyDisciminator[ScProxyDisciminator["MarketingControlPanel"] = 40404046] = "MarketingControlPanel";
    ScProxyDisciminator[ScProxyDisciminator["MediaLibrary"] = 40530411] = "MediaLibrary";
    ScProxyDisciminator[ScProxyDisciminator["PackageDesigner"] = 40598666] = "PackageDesigner";
    ScProxyDisciminator[ScProxyDisciminator["RecycleBin"] = 40453647] = "RecycleBin";
    ScProxyDisciminator[ScProxyDisciminator["RoleManager"] = 40572798] = "RoleManager";
    ScProxyDisciminator[ScProxyDisciminator["Run"] = 40143691] = "Run";
    ScProxyDisciminator[ScProxyDisciminator["ScanForBrokenLinks"] = 40825954] = "ScanForBrokenLinks";
    ScProxyDisciminator[ScProxyDisciminator["ScDocumentProxy"] = 40712530] = "ScDocumentProxy";
    ScProxyDisciminator[ScProxyDisciminator["SecurityEditor"] = 40314710] = "SecurityEditor";
    ScProxyDisciminator[ScProxyDisciminator["TemplateManager"] = 40992685] = "TemplateManager";
    ScProxyDisciminator[ScProxyDisciminator["UserManager"] = 40249854] = "UserManager";
    ScProxyDisciminator[ScProxyDisciminator["Workbox"] = 40855665] = "Workbox";
})(ScProxyDisciminator || (ScProxyDisciminator = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfStateFullProxy.js

class DefaultStateOfStateFullProxy_DefaultStateOfStateFullProxy {
    constructor() {
        this.DisciminatorFriendly = ScProxyDisciminator[ScProxyDisciminator.Unknown];
        this.Disciminator = ScProxyDisciminator.Unknown;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfScWindowProxy.js

class DefaultStateOfScWindowProxy_DefaultStateOfScWindow {
    constructor() {
        this.ScWindow = new DefaultStateOfStateFullProxy_DefaultStateOfStateFullProxy();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfScUiProxy.js




class DefaultStateOfScUiProxy_DefaultStateOfScUiProxy {
    constructor() {
        this.Friendly = new DefaultFriendly_DefaultFriendly();
        this.Meta = new DefaultMetaData_DefaultMetaData();
        this.ErrorStack = [];
        this.State = new DefaultStateOfScWindowProxy_DefaultStateOfScWindow();
        this.StorageSchema = '2020.10.09.20:19';
        this.Meta.TimeStamp = new Date();
        this.Friendly.TimeStamp = StaticHelpers_StaticHelpers.MakeFriendlyDate(this.Meta.TimeStamp);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/PromiseResult.js

class PromiseResult_PromiseResult extends _CommonBase {
    constructor(nickname, hindeCore) {
        super(hindeCore);
        this.prefix = 'Promise Successful? -> ';
        this.NickName = nickname;
    }
    WasSuccessful() {
        return this.Success;
    }
    MarkSuccessful() {
        this.Success = true;
        if (this.Logger) {
            this.Logger.LogVal(this.prefix + this.NickName, this.Success);
        }
        else {
            console.log('no logger success');
        }
    }
    MarkFailed(ex) {
        if (ex) {
            ex = ex.toString();
        }
        else {
            ex = '{no fail message}';
        }
        this.RejectReasons += ', ' + ex;
        this.Success = false;
        if (this.Logger) {
            this.ErrorHand.HandleFatalError(this.prefix + this.NickName, this.Success + '  err: ' + ex);
        }
        else {
            console.log('no logger fail ' + ex);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/FrameProxies/_BaseStateFullFrameProxy.js

class _BaseStateFullFrameProxy_BaseStateFullFrameProxy extends _APICoreBase_APICoreBase {
    constructor(apiCore, frameJacket) {
        super(apiCore);
        this.FrameJacket = frameJacket;
    }
    WaitForCompleteNABFrameProxyOrReject() {
    }
    GetDocumentJacket() {
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/FrameProxies/_BaseScFrameProxy.js
var _BaseScFrameProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class _BaseScFrameProxy_BaseScFrameProxy extends _BaseStateFullFrameProxy_BaseStateFullFrameProxy {
    constructor(apiCore, frameJacket) {
        super(apiCore, frameJacket);
        this.FrameJacket = null;
        this.Id = null;
        this.ErrorHand.ThrowIfNullOrUndefined(_BaseScFrameProxy_BaseScFrameProxy.name, [frameJacket]);
        this.FrameJacket = frameJacket;
        this.Id = 'base_' + this.FrameJacket.GetNativeIframeId();
    }
    GetZindexAsInt() {
        let toReturn = this.FrameJacket.ZindexAsInt();
        this.Logger.LogVal(this.GetZindexAsInt.name, toReturn.toString());
        return toReturn;
    }
    GetDocumentJacket() {
        return this.FrameJacket.DocumentJacket;
    }
    WaitForCompleteNABFrameProxyOrReject() {
        return _BaseScFrameProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => _BaseScFrameProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForCompleteNABFrameProxyOrReject.name, this.Friendly);
                yield this.FrameJacket.WaitForCompleteNABFrameElement(this.Friendly)
                    .then((result) => {
                    if (result.IsCompleteNAB()) {
                        resolve(result.DocumentReadyState());
                    }
                    else {
                        reject(result.DocumentReadtStateFriendly);
                    }
                })
                    .catch((err) => reject(this.WaitForCompleteNABFrameProxyOrReject.name + ' | ' + err));
                this.Logger.FuncEnd(this.WaitForCompleteNABFrameProxyOrReject.name, this.Friendly);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/FrameProxies/CEFrameProxy.js
var CEFrameProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class CEFrameProxy_CEFrameProxy extends _BaseScFrameProxy_BaseScFrameProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = ScProxyDisciminator.CEFrame;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[ScProxyDisciminator.CEFrame];
        this.FrameTypeDiscriminator = CEFrameProxy_CEFrameProxy.name;
    }
    SetState(stateOfCEFrameProxy) {
        return null;
    }
    GetState() {
        return null;
    }
    InstantiateAsyncMembers() {
        return CEFrameProxy_awaiter(this, void 0, void 0, function* () {
        });
    }
    WireEvents() {
    }
    TriggerInboundEventsAsync() {
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/FactoryHelper.js


class FactoryHelper_FactoryHelper extends _APICoreBase_APICoreBase {
    constructor(apiCore) {
        super(apiCore);
    }
    CEFrameFactory(frameJacket, nickname) {
        this.Logger.FuncStart(this.CEFrameFactory.name);
        this.ErrorHand.ThrowIfNullOrUndefined(this.CEFrameFactory.name, [frameJacket]);
        let toReturn = new CEFrameProxy_CEFrameProxy(this.ApiCore, frameJacket);
        toReturn.InstantiateAsyncMembers();
        toReturn.WireEvents();
        this.Logger.FuncEnd(this.CEFrameFactory.name);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/RecipeBasics.js
var RecipeBasics_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class RecipeBasics_RecipeBasics extends _APICoreBase_APICoreBase {
    constructor(apiCore) {
        super(apiCore);
    }
    WaitForNoUiFrontOverlay(friendly) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForNoUiFrontOverlay.name, friendly);
            var iterationJr = new IterationDrone_IterationDrone(this.ApiCore, this.WaitForNoUiFrontOverlay.name, true);
            let overLayExists = true;
            let iframeElem = document.getElementById('jqueryModalDialogsFrame');
            let iframeContentDoc = iframeElem.contentDocument;
            let iframeContentDocBody = iframeContentDoc.body;
            while (iterationJr.DecrementAndKeepGoing() && overLayExists) {
                yield iterationJr.Wait();
                let foundElem = iframeContentDocBody.querySelector(':scope > .ui-widget-overlay.ui-front');
                overLayExists = foundElem !== null;
            }
            if (iterationJr.IsExhausted) {
                this.Logger.Log(iterationJr.IsExhaustedMsg);
                reject(iterationJr.IsExhaustedMsg);
            }
            else {
                resolve();
            }
            this.Logger.FuncEnd(this.WaitForNoUiFrontOverlay.name, friendly);
        }));
    }
    WaitForTimePeriod(timeToWaitMs, friendly) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForTimePeriod.name, friendly);
            var iterationJr = new IterationDrone_IterationDrone(this.ApiCore, this.WaitForTimePeriod.name, true);
            let startTimeStamp = new Date().getTime();
            let timeElapsed = 0;
            while (iterationJr.DecrementAndKeepGoing() && timeElapsed < timeToWaitMs) {
                timeElapsed = new Date().getTime() - startTimeStamp;
                yield iterationJr.Wait();
            }
            resolve();
            this.Logger.FuncEnd(this.WaitForTimePeriod.name, friendly);
        }));
    }
    WaitForCompleteNAB_DataOneDoc(documentJacket, friendly) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForCompleteNAB_DataOneDoc.name, friendly);
                this.ErrorHand.ThrowIfNullOrUndefined(this.WaitForCompleteNAB_DataOneDoc.name, [documentJacket, friendly]);
                yield documentJacket.WaitForCompleteNAB_DocumentJacket(friendly)
                    .then((result) => {
                    result.LogDebugValues();
                    resolve(result);
                })
                    .catch((err) => reject(this.WaitForCompleteNAB_DataOneDoc.name + ' | ' + err));
                this.Logger.FuncEnd(this.WaitForCompleteNAB_DataOneDoc.name, friendly);
            }));
        });
    }
    WaitForElemToHaveClassOrReject(htmlElement, classNames, friendly) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForElemToHaveClassOrReject.name, friendly + ' - ' + classNames);
                this.ErrorHand.ThrowIfNullOrUndefined(this.WaitForElemToHaveClassOrReject.name, [htmlElement, classNames]);
                var elemHasClassName = false;
                var iterationJr = new IterationDrone_IterationDrone(this.ApiCore, this.WaitForElemToHaveClassOrReject.name + ' : ' + classNames + ' ' + friendly, true);
                while (!elemHasClassName && iterationJr.DecrementAndKeepGoing()) {
                    let classList = htmlElement.classList;
                    classNames.forEach((className) => {
                        if (classList.contains(className)) {
                            elemHasClassName = true;
                        }
                    });
                    if (elemHasClassName) {
                        resolve();
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (iterationJr.IsExhausted) {
                    reject(iterationJr.IsExhaustedMsg);
                }
                this.Logger.FuncEnd(this.WaitForElemToHaveClassOrReject.name, friendly);
            }));
        });
    }
    WaitAndReturnFoundFromContainer(haystackElem, selector, friendly) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitAndReturnFoundFromContainer.name, selector);
                this.ErrorHand.ThrowIfNullOrUndefined(this.WaitAndReturnFoundFromContainer.name, [haystackElem, selector]);
                var toReturnFoundElem = null;
                var iterationJr = new IterationDrone_IterationDrone(this.ApiCore, this.WaitAndReturnFoundFromContainer.name + ' : ' + selector + ' ' + friendly, true);
                while (!toReturnFoundElem && iterationJr.DecrementAndKeepGoing()) {
                    toReturnFoundElem = haystackElem.querySelector(selector);
                    if (toReturnFoundElem) {
                        resolve(toReturnFoundElem);
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (iterationJr.IsExhausted) {
                    reject(iterationJr.IsExhaustedMsg);
                }
                this.Logger.FuncEnd(this.WaitAndReturnFoundFromContainer.name, selector);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentEditorPublishProxy.js
var ContentEditorPublishProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class ContentEditorPublishProxy_ContentEditorPublishProxy extends _APICoreBase_APICoreBase {
    constructor(apiCore, contentEditorProxy, documentJacket) {
        super(apiCore);
        this.ContentEditorProxy = contentEditorProxy;
        this.DocumentJacket = documentJacket;
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.ApiCore);
        this.FactoryHelp = new FactoryHelper_FactoryHelper(this.ApiCore);
    }
    Execute() {
        return new Promise((resolve, reject) => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            yield this.PublishActiveCE()
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    PublishActiveCE() {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.PublishActiveCE.name);
            try {
                yield this.PublishCE(this.DocumentJacket);
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.PublishActiveCE.name, err);
            }
            this.Logger.FuncEnd(this.PublishActiveCE.name);
        });
    }
    __debugDataPublishChain(dataPublishChain, nickname) {
        this.Logger.FuncStart(this.__debugDataPublishChain.name, nickname);
        this.Logger.LogVal('docToPublish', this.Logger.IsNullOrUndefined(dataPublishChain.ScDocumentProxyToPublish));
        this.Logger.FuncEnd(this.__debugDataPublishChain.name);
        return dataPublishChain;
    }
    PublishCE(docToPublish) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.PublishCE.name);
            try {
                var dataPublishChain = {
                    ScDocumentProxyToPublish: docToPublish,
                    TopScDocumentProxy: this.DocumentJacket,
                    Iframe0BlueScContentIFrameId0: null,
                    JqIframe: null,
                    CEFrameRed: null
                };
                yield this.ClickPublishOnNav(dataPublishChain)
                    .then((dataPublishChain) => this.ClickMenuButtonPublishDropDown(dataPublishChain))
                    .then((dataPublishChain) => this.ClickMenuDropDownPublishItem(dataPublishChain))
                    .then((dataPublishChain) => this.GetThePublishItemDialog(dataPublishChain))
                    .then((dataPublishChain) => this.GetDialogIframe0Blue(dataPublishChain))
                    .then((dataPublishChain) => this.__WaitForAndClickPublishNextButton(dataPublishChain))
                    .then((dataPublishChain) => this.GetMessageDialog(dataPublishChain))
                    .then((dataPublishChain) => this.__waitForAndClickOk(dataPublishChain))
                    .then((dataPublishChain) => this.__waitForAndClickClose(dataPublishChain))
                    .catch(ex => {
                    this.ErrorHand.HandleFatalError(this.PublishCE.name, ex);
                });
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.PublishCE.name, err);
            }
            this.Logger.FuncEnd(this.PublishCE.name);
        });
    }
    ClickPublishOnNav(payload) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.ClickPublishOnNav.name);
            try {
                yield payload.ScDocumentProxyToPublish.WaitForThenClick([ContentConst.Const.Selector.SC.ScRibbon.Publish.NavPublishStrip]);
                yield payload.ScDocumentProxyToPublish.WaitForThenClick([ContentConst.Const.Selector.SC.ScRibbon.Publish.NavPublishStrip]);
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.ClickPublishOnNav.name, err);
            }
            this.Logger.FuncEnd(this.ClickPublishOnNav.name);
            return payload;
        });
    }
    __waitForAndClickClose(dataPublishChain) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            try {
                yield dataPublishChain.Iframe0BlueScContentIFrameId0.GetDocumentJacket().WaitForGenericElemJacket(ContentConst.Const.Selector.SC.ScRibbon.Publish.SettingsHidden)
                    .then(() => dataPublishChain.Iframe0BlueScContentIFrameId0.GetDocumentJacket().WaitForGenericElemJacket(ContentConst.Const.Selector.SC.ScRibbon.Publish.TheItemHasBeenPublished, SharedConst.Const.IterHelper.MaxCount.OverridePublishing))
                    .then(() => dataPublishChain.Iframe0BlueScContentIFrameId0.GetDocumentJacket().WaitForThenClick([ContentConst.Const.Selector.SC.Cancel]));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.__waitForAndClickClose.name, err);
            }
            return dataPublishChain;
        });
    }
    __waitForAndClickOk(dataPublishChain) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            try {
                yield dataPublishChain.CEFrameRed.GetDocumentJacket().WaitForThenClick([ContentConst.Const.Selector.SC.Ok]);
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.__waitForAndClickOk.name, err);
            }
            return dataPublishChain;
        });
    }
    __WaitForAndClickPublishNextButton(dataPublishChain) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            yield dataPublishChain.Iframe0BlueScContentIFrameId0.GetDocumentJacket().WaitForThenClick([ContentConst.Const.Selector.SC.NextButton]);
            return dataPublishChain;
        });
    }
    ClickMenuButtonPublishDropDown(payload = null) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            yield payload.ScDocumentProxyToPublish.WaitForThenClick([ContentConst.Const.Selector.SC.ScRibbon.Publish.MenuButtonPublish]);
            return payload;
        });
    }
    ClickMenuDropDownPublishItem(payload = null) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            return yield payload.ScDocumentProxyToPublish.WaitForAndClickWithPayload(ContentConst.Const.Selector.SC.ScRibbon.Publish.MenuDropDownPublishItem, payload);
        });
    }
    GetThePublishItemDialog(dataPublishChain = null) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            try {
                let frameElemJacketB = null;
                yield dataPublishChain.TopScDocumentProxy.WaitForGenericElemJacket(ContentConst.Const.Selector.SC.Frames.JqueryModalDialogsFrame.Id)
                    .then((elementJacket) => FrameElemJacket_FrameElemJacket.FactoryFrameElemJackets(this.CommonCore, [elementJacket]))
                    .then((frameElemJackets) => frameElemJacketB = frameElemJackets[0])
                    .then(() => this.FactoryHelp.CEFrameFactory(frameElemJacketB, 'jqIframe'))
                    .then((result) => dataPublishChain.JqIframe = result)
                    .then(() => dataPublishChain.JqIframe.WaitForCompleteNABFrameProxyOrReject())
                    .catch((err) => this.ErrorHand.HandleFatalError(this.GetThePublishItemDialog.name, err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.GetThePublishItemDialog.name, err);
            }
            return dataPublishChain;
        });
    }
    GetMessageDialog(dataPublishChain) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            let toReturnPublishChain = dataPublishChain;
            yield this.WaitForIframeElemAndReturnCEFrameProxyWhenReady(ContentConst.Const.Selector.SC.Frames.scContentIframeId1.Id, 'iframeRed')
                .then((result) => toReturnPublishChain.CEFrameRed = result)
                .catch((err) => this.ErrorHand.HandleFatalError(this.GetMessageDialog.name, err));
            return toReturnPublishChain;
        });
    }
    WaitForIframeElemAndReturnCEFrameProxyWhenReady(selector, iframeNickName) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForIframeElemAndReturnCEFrameProxyWhenReady.name);
                let factoryHelp = new FactoryHelper_FactoryHelper(this.ApiCore);
                let frameJacket = null;
                yield this.DocumentJacket.WaitForGenericElemJacket(selector)
                    .then((genericElemJacket) => FrameElemJacket_FrameElemJacket.FactoryFrameElemJackets(this.CommonCore, [genericElemJacket]))
                    .then((frameElemJackets) => frameJacket = frameElemJackets[0])
                    .then(() => factoryHelp.CEFrameFactory(frameJacket, iframeNickName))
                    .then((result) => resolve(result))
                    .catch((err) => reject(err));
                this.Logger.FuncEnd(this.WaitForIframeElemAndReturnCEFrameProxyWhenReady.name);
            }));
        });
    }
    GetDialogIframe0Blue(dataPublishChain = null) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetDialogIframe0Blue.name);
                let promiseResult = new PromiseResult_PromiseResult(this.GetDialogIframe0Blue.name, this.ApiCore);
                this.Logger.LogAsJsonPretty('dataPublishChain', dataPublishChain);
                yield this.WaitForIframeElemAndReturnCEFrameProxyWhenReady(ContentConst.Const.Selector.SC.Frames.ScContentIframeId0.Id, 'Iframe0Blue')
                    .then((result) => {
                    this.Logger.MarkerC();
                    dataPublishChain.Iframe0BlueScContentIFrameId0 = result;
                    promiseResult.MarkSuccessful();
                })
                    .catch((err) => promiseResult.MarkFailed(err));
                this.Logger.LogAsJsonPretty('dataPublishChain.Iframe0Blue', dataPublishChain.Iframe0BlueScContentIFrameId0);
                this.Logger.FuncEnd(this.GetDialogIframe0Blue.name);
                if (promiseResult.WasSuccessful()) {
                    resolve(dataPublishChain);
                }
                else {
                    reject(promiseResult.RejectReasons);
                }
            }));
        });
    }
    __waitForThenFunc(selector, targetDoc, dataPublishChain, optionFunc) {
        return new Promise((resolve, reject) => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.__waitForThenFunc.name, selector);
            this.Logger.LogAsJsonPretty(this.__waitForThenFunc.name, targetDoc);
            var found = null;
            yield targetDoc.WaitForGenericElemJacket(selector)
                .then((result) => found = result)
                .catch((err) => this.ErrorHand.HandleFatalError([ContentEditorProxy_ContentEditorDocProxy.name, this.__waitForThenFunc.name], err));
            if (found) {
                this.Logger.Log('found');
                if (optionFunc) {
                    this.Logger.Log('executing func');
                    dataPublishChain = yield optionFunc(found, dataPublishChain);
                }
                this.__debugDataPublishChain(dataPublishChain, this.__waitForThenFunc.name);
                this.Logger.FuncEnd(this.__waitForThenFunc.name, selector);
                resolve(dataPublishChain);
            }
            else {
                reject('not found');
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/ContentEditorProxyMutationEvent/ContentEditorProxyMutationEvent_Subject.js


class ContentEditorProxyMutationEvent_Subject_ContentTreeBasedProxyMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor() {
        super(...arguments);
        this.TypeDiscriminator = TypeDiscriminator.__ContentTreeBasedProxyMutationEvent__Subject;
        this.Friendly_Subject = ContentEditorProxyMutationEvent_Subject_ContentTreeBasedProxyMutationEvent_Subject.name;
        this.ShowLogActions = true;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/ContentTreeProxyMutationEvent/ContentTreeProxyMutationEvent_Observer.js


class ContentTreeProxyMutationEvent_Observer_ContentTreeBasedProxyMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(apiCore, callback) {
        super(apiCore, ContentTreeProxyMutationEvent_Observer_ContentTreeBasedProxyMutationEvent_Observer.name, callback);
        this.TypeDiscriminator = TypeDiscriminator.__ContentTreeBasedProxyMutationEvent_Observer;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/Events/ElementJacketMutationEvent/ElementJacketMutationEvent_Observer.js


class ElementJacketMutationEvent_Observer_ElementJacketMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(apiCore, callback) {
        super(apiCore, ElementJacketMutationEvent_Observer_ElementJacketMutationEvent_Observer.name, callback);
        this.TypeDiscriminator = TypeDiscriminator.ElementJacketMutationEvent_Observer;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateLessDocProxies/StateLessFrameProxies/_baseStatelessFrameProxyOfType.js
var _baseStatelessFrameProxyOfType_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class _baseStatelessFrameProxyOfType_baseStatelessFrameProxyOfType extends _APICoreBase_APICoreBase {
    constructor(apiCore, frameElemJacket) {
        super(apiCore);
        this.FrameElemJacket = frameElemJacket;
    }
    Instantiate() {
    }
    TriggerInboundEventsAsync() {
    }
    WireEvents() {
    }
    InstantiateAsyncMembers() {
        return _baseStatelessFrameProxyOfType_awaiter(this, void 0, void 0, function* () {
        });
    }
    _base_InstantiateAsyncProperties() {
        return _baseStatelessFrameProxyOfType_awaiter(this, void 0, void 0, function* () {
            try {
                yield this.FrameElemJacket.WaitForCompleteNABFrameElement(this.FrameSelectorOnHost)
                    .catch((err) => this.ErrorHand.HandleFatalError(this._base_InstantiateAsyncProperties.name, err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.InstantiateAsyncMembers.name, err);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateLessDocProxies/StateLessFrameProxies/GenericStateLessFrameProxy.js
var GenericStateLessFrameProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class GenericStateLessFrameProxy_GenericStateLessFrameProxy extends _baseStatelessFrameProxyOfType_baseStatelessFrameProxyOfType {
    constructor(apiCore, frameJacket) {
        super(apiCore, frameJacket);
        this.ScProxyDisciminator = ScProxyDisciminator.GenericStateLessFrameProxy;
        this.FrameElemJacket = frameJacket;
    }
    TriggerInboundEventsAsync() {
    }
    InstantiateAsyncMembers() {
        return GenericStateLessFrameProxy_awaiter(this, void 0, void 0, function* () {
        });
    }
    WireEvents() {
    }
    static ProcessHostedScDocProxy(apiCore, documentJacket) {
        return GenericStateLessFrameProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => GenericStateLessFrameProxy_awaiter(this, void 0, void 0, function* () {
                let scDocProxyResolver = new ScDocProxyResolver_ScDocProxyResolver(apiCore);
                yield scDocProxyResolver.ScDocProxyFactoryMake(documentJacket, null)
                    .then((scDocProxy) => resolve(scDocProxy))
                    .catch((err) => reject(apiCore.ErrorHand.FormatRejectMessage([GenericStateLessFrameProxy_GenericStateLessFrameProxy.name, this.ProcessHostedScDocProxy.name], err)));
            }));
        });
    }
    static ProcessFrameProxy(apiCore, frameElemJacket) {
        return GenericStateLessFrameProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => GenericStateLessFrameProxy_awaiter(this, void 0, void 0, function* () {
                let stateLessFrameProxyToReturn = null;
                yield frameElemJacket.WaitForCompleteNABFrameElement(this.StateLessFrameProxyFactory.name)
                    .then(() => stateLessFrameProxyToReturn = (new _baseStatelessFrameProxyOfType_baseStatelessFrameProxyOfType(apiCore, frameElemJacket)))
                    .then(() => resolve(stateLessFrameProxyToReturn))
                    .catch((err) => reject(apiCore.ErrorHand.FormatRejectMessage([GenericStateLessFrameProxy_GenericStateLessFrameProxy.name, this.ProcessFrameProxy.name], err)));
            }));
        });
    }
    static StateLessFrameProxyFactory(apiCore, frameElemJacket) {
        return GenericStateLessFrameProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => GenericStateLessFrameProxy_awaiter(this, void 0, void 0, function* () {
                apiCore.Logger.FuncStart([GenericStateLessFrameProxy_GenericStateLessFrameProxy.name, this.StateLessFrameProxyFactory.name]);
                let stateLessFrameProxyToReturn = null;
                yield GenericStateLessFrameProxy_GenericStateLessFrameProxy.ProcessFrameProxy(apiCore, frameElemJacket)
                    .then((frameProxy) => stateLessFrameProxyToReturn = frameProxy)
                    .then(() => GenericStateLessFrameProxy_GenericStateLessFrameProxy.ProcessHostedScDocProxy(apiCore, frameElemJacket.DocumentJacket))
                    .then((statelessDocProxy) => stateLessFrameProxyToReturn.HostedStatelessDocProxy = statelessDocProxy)
                    .then(() => resolve(stateLessFrameProxyToReturn))
                    .catch((err) => reject(apiCore.ErrorHand.FormatRejectMessage([GenericStateLessFrameProxy_GenericStateLessFrameProxy.name, this.StateLessFrameProxyFactory.name], err)));
                apiCore.Logger.FuncStart([GenericStateLessFrameProxy_GenericStateLessFrameProxy.name, this.StateLessFrameProxyFactory.name]);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/ScDocProxyWatcherForFrames.js
var ScDocProxyWatcherForFrames_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






class ScDocProxyWatcherForFrames_ScDocProxyWatcherForFrames extends _APICoreBase_APICoreBase {
    constructor(apiCore, documentJacket, scProxyDisciminatorFriendly) {
        super(apiCore);
        this.HostedFrameStatelessFrameProxies = [];
        this.DocumentJacket = documentJacket;
        this.ScProxyDisciminatorFriendly = scProxyDisciminatorFriendly;
    }
    EnableWatcherForFrames() {
        return ScDocProxyWatcherForFrames_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([ScDocProxyWatcherForFrames_ScDocProxyWatcherForFrames.name, this.EnableWatcherForFrames.name], 'on behalf of: ' + this.ScProxyDisciminatorFriendly);
            try {
                let bodyElement;
                let watcherParams = {
                    Attributes: false,
                    ChildList: true,
                    OwnerFriendly: this.ScProxyDisciminatorFriendly,
                    Subtree: false,
                    TagFilter: ['IFRAME']
                };
                this.DocumentJacketMutationEvent_Observer = new ElementJacketMutationEvent_Observer_ElementJacketMutationEvent_Observer(this.ApiCore, this.CallbackOnDocumentJacketMutationEvent.bind(this));
                yield this.DocumentJacket.WaitForGenericElemJacket(ContentConst.Const.Selector.Html.Body)
                    .then((elemJacket) => bodyElement = elemJacket)
                    .then(() => bodyElement.AddWatcher(watcherParams))
                    .then((elemJacketMutationEvent_Subject) => this.ElemJacketMutationEvent_Subject = elemJacketMutationEvent_Subject)
                    .then(() => this.ElemJacketMutationEvent_Subject.RegisterObserver(this.DocumentJacketMutationEvent_Observer))
                    .catch((err) => this.ErrorHand.HandleFatalError([ScDocProxyWatcherForFrames_ScDocProxyWatcherForFrames.name, this.EnableWatcherForFrames.name], err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([ScDocProxyWatcherForFrames_ScDocProxyWatcherForFrames.name, this.EnableWatcherForFrames.name], err);
            }
            this.Logger.FuncEnd([ScDocProxyWatcherForFrames_ScDocProxyWatcherForFrames.name, this.EnableWatcherForFrames.name], 'on behalf of: ' + this.ScProxyDisciminatorFriendly);
        });
    }
    CallbackOnDocumentJacketMutationEvent(DocumentJacketMutationEvent_Payload) {
        this.Logger.FuncStart(this.CallbackOnDocumentJacketMutationEvent.name);
        if (DocumentJacketMutationEvent_Payload && DocumentJacketMutationEvent_Payload.AddedGenericElemJacket) {
            this.HandleElemJacketAddedToDocument(DocumentJacketMutationEvent_Payload.AddedGenericElemJacket);
        }
        this.Logger.FuncEnd(this.CallbackOnDocumentJacketMutationEvent.name);
    }
    HandleElemJacketAddedToDocument(elemJacket) {
        return ScDocProxyWatcherForFrames_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([ScDocProxyWatcherForFrames_ScDocProxyWatcherForFrames.name, this.HandleElemJacketAddedToDocument.name]);
            if (elemJacket) {
                if (elemJacket.NodeTagName === SharedConst.Const.KeyWords.NodeTagName.IFrame) {
                    yield FrameElemJacket_FrameElemJacket.FactoryFrameElemJackets(this.ApiCore, [elemJacket])
                        .then((frameElemJackets) => this.HandleFrameElemJacketAddedToDoc(frameElemJackets[0]))
                        .catch((err) => this.ErrorHand.HandleFatalError([ScDocProxyWatcherForFrames_ScDocProxyWatcherForFrames.name, this.HandleFrameElemJacketAddedToDoc.name], err));
                }
            }
            else {
                this.Logger.Log('No FrameJacket - no action');
            }
            this.Logger.FuncEnd([ScDocProxyWatcherForFrames_ScDocProxyWatcherForFrames.name, this.HandleElemJacketAddedToDocument.name]);
        });
    }
    HandleFrameElemJacketAddedToDoc(frameElemJacket) {
        return ScDocProxyWatcherForFrames_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([ScDocProxyWatcherForFrames_ScDocProxyWatcherForFrames.name, this.CallbackOnDocumentJacketMutationEvent.name]);
            try {
                yield GenericStateLessFrameProxy_GenericStateLessFrameProxy.StateLessFrameProxyFactory(this.ApiCore, frameElemJacket)
                    .then((stateLessFrameProxy) => this.HostedFrameStatelessFrameProxies.push(stateLessFrameProxy))
                    .then(() => this.Logger.Log(this.HandleFrameElemJacketAddedToDoc.name + 'step1 Complete'))
                    .catch((err) => this.ErrorHand.HandleFatalError(this.HandleElemJacketAddedToDocument.name, err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([ScDocProxyWatcherForFrames_ScDocProxyWatcherForFrames.name, this.HandleFrameElemJacketAddedToDoc.name], err);
            }
            this.Logger.FuncEnd([ScDocProxyWatcherForFrames_ScDocProxyWatcherForFrames.name, this.CallbackOnDocumentJacketMutationEvent.name]);
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/_BaseScDocProxy.js
var _BaseScDocProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class _BaseScDocProxy_BaseScDocProxy extends _APICoreBase_APICoreBase {
    constructor(apiCore, documentJacket) {
        super(apiCore);
        this.HostedElemProxies = [];
        this.DocumentJacket = documentJacket;
    }
    OnFocus() {
        return _BaseScDocProxy_awaiter(this, void 0, void 0, function* () {
        });
    }
    EnableWatcherForFrames() {
        return _BaseScDocProxy_awaiter(this, void 0, void 0, function* () {
            try {
                this.WatcherForFrames = new ScDocProxyWatcherForFrames_ScDocProxyWatcherForFrames(this.ApiCore, this.DocumentJacket, this.ScProxyDisciminatorFriendly);
                this.WatcherForFrames.EnableWatcherForFrames()
                    .catch((err) => this.ErrorHand.HandleFatalError([_BaseScDocProxy_BaseScDocProxy.name, this.EnableWatcherForFrames, this.ScProxyDisciminatorFriendly], err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([_BaseScDocProxy_BaseScDocProxy.name, this.EnableWatcherForFrames, this.ScProxyDisciminatorFriendly], err);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/FrameProxies/_BaseStateFullDocProxy.js

class _BaseStateFullDocProxy_BaseStateFullDocProxy extends _BaseScDocProxy_BaseScDocProxy {
    constructor(apiCore, documentJacket) {
        super(apiCore, documentJacket);
        this.Friendly = '{unknown friendly}';
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/Events/NativeClassNameChangeEvent/NativeClassNameChangeEvent_Observer.js


class NativeClassNameChangeEvent_Observer_NativeClassNameChangeEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(commonCore, callback) {
        super(commonCore, NativeClassNameChangeEvent_Observer_NativeClassNameChangeEvent_Observer.name, callback);
        this.TypeDiscriminator = TypeDiscriminator.NativeClassNameChangeEvent_Observer;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/Events/NativeClassNameChangeEvent/NativeClassNameChangeEvent_Subject.js
var NativeClassNameChangeEvent_Subject_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class NativeClassNameChangeEvent_Subject_NativeClassNameChangeEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(commonCore, treeElementJacket) {
        super(commonCore);
        this.Friendly_Subject = NativeClassNameChangeEvent_Subject_NativeClassNameChangeEvent_Subject.name;
        this.TypeDiscriminator = TypeDiscriminator.NativeClassNameChangeEvent_Subject;
        this.ShowLogActions = true;
        this.TreeElement = treeElementJacket.NativeElement;
        this.InitTreeMutationEvent_Observer();
    }
    InitTreeMutationEvent_Observer() {
        try {
            if (this.TreeElement) {
                let self = this;
                let observer = new MutationObserver((mutations) => self.OnNativeMutationEvent(mutations));
                observer.observe(this.TreeElement, { attributes: true, subtree: true, childList: true });
            }
        }
        catch (err) {
            this.ErrorHand.HandleFatalError(this.InitTreeMutationEvent_Observer.name, err);
        }
    }
    OnNativeMutationEvent(mutationRecords) {
        mutationRecords.forEach((mutationRecord, index) => NativeClassNameChangeEvent_Subject_awaiter(this, void 0, void 0, function* () {
            if (mutationRecord.attributeName === 'class') {
                let anchorTest = (mutationRecord.target);
                if (anchorTest) {
                    if (anchorTest.classList.contains(ContentConst.Const.ClassNames.SC.scContentTreeNodeActive)) {
                        this.NotifyObserversAsync(null);
                    }
                }
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfContentTree.js
class DefaultStateOfContentTree {
    constructor() {
        this.ActiveNodeShallow = null;
        this.ContentTreeNodeDeep = null;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/ContentTreeProxyMutationEvent/ContentTreeProxyMutationEvent_Subject.js


class ContentTreeProxyMutationEvent_Subject_ContentTreeMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(apiCore) {
        super(apiCore);
        this.Friendly_Subject = ContentTreeProxyMutationEvent_Subject_ContentTreeMutationEvent_Subject.name;
        this.TypeDiscriminator = TypeDiscriminator.ContentTreeMutationEvent_Subject;
        this.ShowLogActions = true;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/Elements/ElementDivJacket.js

class ElementDivJacket_ElementDivJacket extends ElementJacketBaseOfType_ElementJacketOfType {
    constructor(commonCore, htmlElement) {
        super(commonCore, htmlElement);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/60 - ScIconPath.js
var ScIconPath;
(function (ScIconPath) {
    ScIconPath[ScIconPath["Unknown"] = 0] = "Unknown";
    ScIconPath[ScIconPath["IconCache"] = 60373484] = "IconCache";
    ScIconPath[ScIconPath["StandardMedia"] = 60133523] = "StandardMedia";
})(ScIconPath || (ScIconPath = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentTreeProxy/ScContentTreeNodeProxy/ScContentTreeNodeProxy.js
var ScContentTreeNodeProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






class ScContentTreeNodeProxy_ScContentTreeNodeProxy extends _APICoreBase_APICoreBase {
    constructor(apiCore, sourceElemJacket, level, siblingIndex, totalSiblings, parent, conResolver) {
        super(apiCore);
        this.Children = [];
        this.StateOfScContentTreeNode = {
            Friendly: '',
            IsExpanded: false,
            IsActive: false,
            Coord: {
                LevelIndex: -1,
                LevelWidth: -1,
                SiblingIndex: -1
            },
            ItemId: null,
            IconSrc: {
                IconPath: ScIconPath.Unknown,
                IconSuffix: '',
            },
            NodeChildren: [],
            Lineage: {
                L1Icon: {
                    IconSuffix: '',
                    IconPath: ScIconPath.Unknown,
                },
                L1Text: '',
                L2Icon: {
                    IconSuffix: '',
                    IconPath: ScIconPath.Unknown,
                },
                L2Text: ''
            }
        };
        this.HasBeenHarvested = false;
        if (sourceElemJacket) {
            this.StateOfScContentTreeNode.Coord.LevelWidth = totalSiblings;
            this.StateOfScContentTreeNode.Coord.SiblingIndex = siblingIndex;
            this.StateOfScContentTreeNode.Coord.LevelIndex = level;
            this.ConResolver = conResolver;
            if (sourceElemJacket.NativeElement.hasAttribute('src')) {
                this.InferFromImageElement(sourceElemJacket.NativeElement);
            }
            else if (sourceElemJacket.NativeElement.hasAttribute('href')) {
                this.InferFromAnchorElement(sourceElemJacket.NativeElement);
            }
            else if (sourceElemJacket.NativeElement.classList.contains('scContentTreeNode')) {
                this.InferFromDivElement(sourceElemJacket.NativeElement);
            }
            else {
                this.ErrorHand.HandleFatalError(ScContentTreeNodeProxy_ScContentTreeNodeProxy.name, 'invalid source element type: ' + (typeof sourceElemJacket));
            }
        }
        else {
            this.ErrorHand.HandleFatalError(ScContentTreeNodeProxy_ScContentTreeNodeProxy.name, 'null sourceElement or associatedDoc');
        }
        this.ParentTreeNode = parent;
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.ApiCore);
    }
    Instantiate() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                yield this.HarvestNodeState()
                    .catch((err) => this.ErrorHand.HandleFatalError(this.Instantiate.name, err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.Instantiate.name, err);
            }
        });
    }
    InferFromDivElement(divElement) {
        if (divElement) {
            this.ScContentTreeNodeDivElem = new ElementDivJacket_ElementDivJacket(this.ApiCore, divElement);
        }
    }
    InferFromAnchorElement(anchorElement) {
        if (anchorElement) {
            this.Logger.Log(this.InferFromAnchorElement.name);
            this.ScContentTreeNodeDivElem = new ElementDivJacket_ElementDivJacket(this.ApiCore, anchorElement.parentElement);
        }
    }
    InferFromImageElement(imageElement) {
        if (imageElement) {
            this.ScContentTreeNodeDivElem = new ElementDivJacket_ElementDivJacket(this.ApiCore, imageElement.parentElement);
        }
    }
    PolllinateGlyphNodeElem() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                yield this.ScContentTreeNodeDivElem.WaitForElement(":scope > img", this.PolllinateGlyphNodeElem.name)
                    .then((elemImgJacket) => this.glyphElem = elemImgJacket)
                    .catch((err) => this.ErrorHand.HandleFatalError(this.PolllinateGlyphNodeElem.name, err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.PolllinateGlyphNodeElem.name, err);
            }
        });
    }
    Friendly() {
        let toReturn = 'lvl: ' + this.StateOfScContentTreeNode.Coord.LevelIndex + ' Sib idx: ' + this.StateOfScContentTreeNode.Coord.SiblingIndex + ' tot sib: ' + this.StateOfScContentTreeNode.Coord.LevelWidth;
        return toReturn;
    }
    PollinateNodeElem() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                yield this.ScContentTreeNodeDivElem.WaitForElement(":scope > a", this.Friendly())
                    .then((htmlAnchorElement) => this.LinkNodeElem = htmlAnchorElement)
                    .catch((err) => this.ErrorHand.HandleFatalError(this.PollinateNodeElem.name, err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.PollinateNodeElem.name, err);
            }
        });
    }
    GetStateOfScContentTreeNodeGeneric(includeChildren) {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                let stateOfChildrenAr = [];
                if (includeChildren) {
                    this.Children.forEach((child) => stateOfChildrenAr.push(child.GetStateOfScContentTreeNodeDeep()));
                }
                yield Promise.all(stateOfChildrenAr)
                    .then((result) => {
                    this.StateOfScContentTreeNode.NodeChildren = [];
                    result.forEach((stateoOfScContentTreeNodeChild) => {
                        if (stateoOfScContentTreeNodeChild.IsActive || stateoOfScContentTreeNodeChild.IsExpanded) {
                            this.StateOfScContentTreeNode.NodeChildren.push(stateoOfScContentTreeNodeChild);
                        }
                    });
                })
                    .then(() => resolve(this.StateOfScContentTreeNode))
                    .catch((err) => reject(this.GetStateOfScContentTreeNodeGeneric.name + ' | ' + err));
            }));
        });
    }
    GetStateOfScContentTreeNodeDeep() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                yield this.GetStateOfScContentTreeNodeGeneric(true)
                    .then((stateOfScContentTreeNodeDeep) => resolve(stateOfScContentTreeNodeDeep))
                    .catch((err) => reject(this.GetStateOfScContentTreeNodeDeep.name + ' | ' + err));
            }));
        });
    }
    GetStateOfScContentTreeNodeFlat() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetStateOfScContentTreeNodeFlat.name);
                yield this.GetStateOfScContentTreeNodeGeneric(false)
                    .then((stateOfContentTreeNodeShallow) => resolve(stateOfContentTreeNodeShallow))
                    .catch((err) => reject(this.GetStateOfScContentTreeNodeDeep.name + ' | ' + err));
                this.Logger.FuncEnd(this.GetStateOfScContentTreeNodeFlat.name);
            }));
        });
    }
    HarvestProperties() {
        this.ErrorHand.ThrowIfNullOrUndefined(this.HarvestNodeState.name, [this.LinkNodeElem, this.glyphElem]);
        this.StateOfScContentTreeNode.IsActive = this.QueryIsActive();
        this.StateOfScContentTreeNode.IsExpanded = this.QueryIsExpanded();
        this.StateOfScContentTreeNode.Friendly = this.LinkNodeElem.NativeElement.innerText;
        this.StateOfScContentTreeNode.ItemId = this.GetApparentItemId(this.glyphElem);
        this.StateOfScContentTreeNode.IconSrc = this.GetIconSrc();
        this.HarvestLineageProperties();
    }
    HarvestLineageProperties() {
        let mainIconSrc = this.GetMainIconSrc();
        this.StateOfScContentTreeNode.Lineage.L1Icon = mainIconSrc;
        if (this.StateOfScContentTreeNode.Coord.LevelIndex === 0) {
            this.StateOfScContentTreeNode.Lineage.L1Icon = this.ConResolver.DefaultScIcon();
            this.StateOfScContentTreeNode.Lineage.L1Text = '';
            this.StateOfScContentTreeNode.Lineage.L2Icon = this.ConResolver.DefaultScIcon();
            this.StateOfScContentTreeNode.Lineage.L2Text = '';
        }
        else if (this.StateOfScContentTreeNode.Coord.LevelIndex === 1) {
            this.StateOfScContentTreeNode.Lineage.L1Icon = this.StateOfScContentTreeNode.IconSrc;
            this.StateOfScContentTreeNode.Lineage.L1Text = this.StateOfScContentTreeNode.Friendly;
            this.StateOfScContentTreeNode.Lineage.L2Icon = this.ConResolver.ResolveIconData('');
            this.StateOfScContentTreeNode.Lineage.L2Text = '';
        }
        else if (this.StateOfScContentTreeNode.Coord.LevelIndex === 2) {
            if (this.ParentTreeNode) {
                this.StateOfScContentTreeNode.Lineage.L1Icon = this.ParentTreeNode.StateOfScContentTreeNode.Lineage.L1Icon;
                this.StateOfScContentTreeNode.Lineage.L1Text = this.ParentTreeNode.StateOfScContentTreeNode.Lineage.L1Text;
            }
            else {
                this.StateOfScContentTreeNode.Lineage.L1Icon = this.ConResolver.ResolveIconData('');
                this.StateOfScContentTreeNode.Lineage.L1Text = '';
            }
            this.StateOfScContentTreeNode.Lineage.L2Icon = this.StateOfScContentTreeNode.IconSrc;
            this.StateOfScContentTreeNode.Lineage.L2Text = this.StateOfScContentTreeNode.Friendly;
        }
        else {
            if (this.ParentTreeNode) {
                this.StateOfScContentTreeNode.Lineage.L1Icon = this.ParentTreeNode.StateOfScContentTreeNode.Lineage.L1Icon;
                this.StateOfScContentTreeNode.Lineage.L1Text = this.ParentTreeNode.StateOfScContentTreeNode.Lineage.L1Text;
                this.StateOfScContentTreeNode.Lineage.L2Icon = this.ParentTreeNode.StateOfScContentTreeNode.Lineage.L2Icon;
                this.StateOfScContentTreeNode.Lineage.L2Text = this.ParentTreeNode.StateOfScContentTreeNode.Lineage.L2Text;
            }
            else {
                this.StateOfScContentTreeNode.Lineage.L1Icon = this.ConResolver.ResolveIconData('');
                this.StateOfScContentTreeNode.Lineage.L1Text = '';
                this.StateOfScContentTreeNode.Lineage.L2Icon = this.ConResolver.ResolveIconData('');
                this.StateOfScContentTreeNode.Lineage.L2Text = '';
            }
        }
        if (this.StateOfScContentTreeNode.Coord.LevelIndex == 0) {
            this.StateOfScContentTreeNode.Lineage.L1Icon = this.ConResolver.ResolveIconData('');
        }
        else if (this.StateOfScContentTreeNode.Coord.LevelIndex == 1) {
            this.StateOfScContentTreeNode.Lineage.L1Icon = this.StateOfScContentTreeNode.IconSrc;
        }
        else {
            if (this.ParentTreeNode) {
                this.StateOfScContentTreeNode.Lineage.L1Icon = this.ParentTreeNode.StateOfScContentTreeNode.Lineage.L1Icon;
            }
            else {
                this.StateOfScContentTreeNode.Lineage.L1Icon = this.ConResolver.ResolveIconData('');
            }
        }
    }
    HarvestNodeState(forceRefreshData = false) {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                if (!this.HasBeenHarvested || forceRefreshData) {
                    this.glyphElem = null;
                    this.LinkNodeElem = null;
                    this.Children = [],
                        yield this.PollinateNodeElem()
                            .then(() => this.PolllinateGlyphNodeElem())
                            .then(() => this.HarvestProperties())
                            .then(() => this.GetChildren())
                            .then((children) => this.Children = children)
                            .then(() => resolve())
                            .catch((err) => {
                            reject(this.HarvestNodeState.name + ' | ' + err);
                        });
                    this.HasBeenHarvested = true;
                }
                else {
                    resolve();
                }
            }));
        });
    }
    GetApparentItemId(htmlImageElement) {
        let glyphNodeIdSuffix = htmlImageElement.NativeElement.id.replace(ContentConst.Const.Names.SC.TreeGlyphPrefix, '');
        let toReturnGuidData = Guid_Guid.ParseGuid(glyphNodeIdSuffix, true);
        return toReturnGuidData;
    }
    GetIconSrc() {
        let toReturn = null;
        let foundElement = this.ScContentTreeNodeDivElem.querySelector(ContentConst.Const.Selector.SC.ContentEditor.scContentTreeNodeIcon);
        if (foundElement) {
            toReturn = this.ConResolver.ResolveIconData(foundElement.NativeElement.src);
        }
        return toReturn;
    }
    GetChildren() {
        return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                let toReturn = [];
                let childNodes = this.ScContentTreeNodeDivElem.NativeElement.querySelectorAll(':scope > div > ' + ContentConst.Const.Selector.SC.ContentEditor.ScContentTreeNode);
                childNodes.forEach((childNode, index) => {
                    let childJacket = new ElementDivJacket_ElementDivJacket(this.ApiCore, childNode);
                    toReturn.push(new ScContentTreeNodeProxy_ScContentTreeNodeProxy(this.ApiCore, childJacket, this.StateOfScContentTreeNode.Coord.LevelIndex + 1, index, childNodes.length, this, this.ConResolver));
                });
                let PromiseAr = [];
                toReturn.forEach((newScContentTreeNodeProxy) => PromiseAr.push(newScContentTreeNodeProxy.Instantiate()));
                yield Promise.all(PromiseAr)
                    .then(() => resolve(toReturn))
                    .catch((err) => reject(err));
            }
            catch (err) {
                reject(this.GetChildren.name + ' | ' + err);
            }
        }));
    }
    GetMainIconSrc() {
        let toReturn = null;
        let penultimateNode = this;
        let penultimateElem = this.ScContentTreeNodeDivElem.NativeElement.closest('[id=ContentTreeActualSize] > .scContentTreeNode >  div > .scContentTreeNode');
        if (penultimateElem) {
            let penElemJacket = new ElementDivJacket_ElementDivJacket(this.ApiCore, penultimateElem);
            penultimateNode = new ScContentTreeNodeProxy_ScContentTreeNodeProxy(this.ApiCore, penElemJacket, 0, 0, 1, this, this.ConResolver);
        }
        if (penultimateNode !== null) {
            toReturn = penultimateNode.GetIconSrc();
        }
        return toReturn;
    }
    SetStateOfTreeNode(newData, depth) {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                if (newData.IsExpanded) {
                    yield this.ExpandNode();
                }
                if (newData.IsActive) {
                    yield this.ActivateNode();
                }
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.SetStateOfTreeNode.name, err);
            }
        });
    }
    QueryIsActive() {
        let classList = this.LinkNodeElem.NativeElement.classList;
        let toReturn = classList.contains(ContentConst.Const.ClassNames.SC.scContentTreeNodeActive);
        return toReturn;
    }
    ActivateNode() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.ActivateNode.name);
                this.Logger.Log('activating node: ' + this.StateOfScContentTreeNode.Friendly);
                yield this.RecipeBasics.WaitForElemToHaveClassOrReject(this.LinkNodeElem.NativeElement, [ContentConst.Const.ClassNames.SC.scContentTreeNodeActive, ContentConst.Const.ClassNames.SC.scContentTreeNodeNormal], this.StateOfScContentTreeNode.Friendly);
                this.LinkNodeElem.NativeElement.click();
                yield this.RecipeBasics.WaitForElemToHaveClassOrReject(this.LinkNodeElem.NativeElement, [ContentConst.Const.ClassNames.SC.scContentTreeNodeActive], this.StateOfScContentTreeNode.Friendly)
                    .then(() => resolve())
                    .catch((err) => reject(this.ActivateNode.name + ' | ' + err));
                this.Logger.FuncEnd(this.ActivateNode.name);
            }));
        });
    }
    ExpandNode() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.QueryIsExpanded()) {
                    this.glyphElem.NativeElement.click();
                }
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.ExpandNode.name, err);
            }
        });
    }
    IsContentTreeNode() {
        var toReturn = false;
        var className = this.ScContentTreeNodeDivElem.NativeElement.className;
        toReturn = className === ContentConst.Const.ClassNames.SC.ContentTreeNode;
        return toReturn;
    }
    QueryIsExpanded() {
        var toReturn = false;
        var srcAttr = this.glyphElem.NativeElement.getAttribute('src');
        if (srcAttr !== null) {
            if (srcAttr.indexOf(ContentConst.Const.Names.SC.TreeExpandedPng.sc920) > -1) {
                toReturn = true;
            }
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentTreeProxy/ScContentTreeNodeProxy/ConResolver.js




class ConResolver_ConResolver extends _APICoreBase_APICoreBase {
    ResolveIconData(mainIconSrc) {
        let toReturn = this.DefaultScIcon();
        let urlJacket = new UrlJacket_UrlJacket(this.ApiCore, mainIconSrc);
        let relativePath = urlJacket.BuildFullUrlFromParts().RelativeUrl;
        if (relativePath.startsWith(SharedConst.Const.UrlRelativePrefix.IconCache)) {
            toReturn.IconSuffix = relativePath.replace(SharedConst.Const.UrlRelativePrefix.IconCache, '');
            toReturn.IconPath = ScIconPath.IconCache;
        }
        else if (relativePath.startsWith(SharedConst.Const.UrlRelativePrefix.IconShellStandardMedia)) {
            toReturn.IconSuffix = relativePath.replace(SharedConst.Const.UrlRelativePrefix.IconShellStandardMedia, '');
            toReturn.IconPath = ScIconPath.StandardMedia;
        }
        else {
            toReturn.IconSuffix = relativePath;
            toReturn.IconPath = ScIconPath.Unknown;
        }
        return toReturn;
    }
    ResolveIconPath(itemIconSource) {
        let toReturn;
        if (false) {}
        else if (itemIconSource.IconPath === ScIconPath.Unknown) {
            toReturn = itemIconSource.IconSuffix;
        }
        else if (itemIconSource.IconPath === ScIconPath.IconCache) {
            toReturn = SharedConst.Const.UrlRelativePrefix.IconCache + itemIconSource.IconSuffix;
        }
        else {
            this.ErrorHand.HandleFatalError([ConResolver_ConResolver.name, this.ResolveIconPath.name], 'unaccounted for iconPath type');
        }
        return toReturn;
    }
    DefaultScIcon() {
        return {
            IconSuffix: '',
            IconPath: ScIconPath.Unknown,
        };
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/FrameProxies/_BaseStateFullElemProxy.js

class _BaseStateFullElemProxy_BaseStateFullElemProxy extends _APICoreBase_APICoreBase {
    constructor(apiCore, containerElemJacket) {
        super(apiCore);
        this.ContainerElemJacket = containerElemJacket;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentTreeProxy/ContentTreeProxy.js
var ContentTreeProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};









class ContentTreeProxy_ContentTreeElemProxy extends _BaseStateFullElemProxy_BaseStateFullElemProxy {
    constructor(apiCore, hostDocumentJacket, treeContainerJacket, TreeRootSelector) {
        super(apiCore, treeContainerJacket);
        this.ErrorHand.ThrowIfNullOrUndefined(ContentTreeProxy_ContentTreeElemProxy.name, [hostDocumentJacket, treeContainerJacket]);
        this.TreeRootSelector = TreeRootSelector;
        this.InstantiateInstance();
    }
    InstantiateInstance() {
        this.ConResolver = new ConResolver_ConResolver(this.ApiCore);
    }
    Instantiate_TreeProxyAsyncElem() {
        return ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.Instantiate_TreeProxyAsyncElem.name);
            try {
                yield this.SetRootNodeFromSelector()
                    .then(() => {
                    this.ContentTreeMutationEvent_Subject = new ContentTreeProxyMutationEvent_Subject_ContentTreeMutationEvent_Subject(this.ApiCore);
                    this.NativeClassNameChangeEvent_Subject = new NativeClassNameChangeEvent_Subject_NativeClassNameChangeEvent_Subject(this.ApiCore, this.ContainerElemJacket);
                    this.NativeClassNameChangeEvent_Observer = new NativeClassNameChangeEvent_Observer_NativeClassNameChangeEvent_Observer(this.ApiCore, this.CallBackOnNativeClassNameChangeEventAsync.bind(this));
                });
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.Instantiate_TreeProxyAsyncElem.name, err);
            }
            this.Logger.FuncEnd(this.Instantiate_TreeProxyAsyncElem.name);
        });
    }
    WireEvents_TreeProxy() {
        this.Logger.FuncStart(this.WireEvents_TreeProxy.name);
        this.NativeClassNameChangeEvent_Subject.RegisterObserver(this.NativeClassNameChangeEvent_Observer);
        this.Logger.FuncEnd(this.WireEvents_TreeProxy.name);
    }
    CallBackOnNativeClassNameChangeEventAsync(notUsed) {
        this.Logger.FuncStart(this.CallBackOnNativeClassNameChangeEventAsync.name);
        this.TaskMonitor.AsyncTaskStarted(this.CallBackOnNativeClassNameChangeEventAsync.name);
        if (this.ContentTreeMutationEvent_Subject) {
            this.GetState()
                .then((stateOfContentTree) => {
                let TreeMutationEvent_Payload = {
                    ContentTree: stateOfContentTree
                };
                this.ContentTreeMutationEvent_Subject.NotifyObserversAsync(TreeMutationEvent_Payload);
            })
                .then(() => this.Logger.Log(this.CallBackOnNativeClassNameChangeEventAsync.name + ' completed'))
                .catch((err) => this.ErrorHand.HandleFatalError(this.CallBackOnNativeClassNameChangeEventAsync.name, err));
        }
        this.TaskMonitor.AsyncTaskCompleted(this.CallBackOnNativeClassNameChangeEventAsync.name);
        this.Logger.FuncEnd(this.CallBackOnNativeClassNameChangeEventAsync.name);
    }
    TriggerActiveNodeChangeEvent() {
        this.Logger.FuncStart(this.TriggerActiveNodeChangeEvent.name);
        this.CallBackOnNativeClassNameChangeEventAsync(null);
        this.Logger.FuncEnd(this.TriggerActiveNodeChangeEvent.name);
    }
    GetTreeNodeByGlyph(targetNode) {
        return new Promise((resolve, reject) => ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            let scContentTreeNodeProxy = null;
            if (targetNode && this.ContainerElemJacket) {
                var treeGlyphTargetId = ContentConst.Const.Names.SC.TreeGlyphPrefix + Guid_Guid.WithoutDashes(targetNode.ItemId);
                yield this.ContainerElemJacket.WaitForElement('[id=' + treeGlyphTargetId + ']', this.GetTreeNodeByGlyph.name + ' ' + treeGlyphTargetId)
                    .then((elemJacket) => scContentTreeNodeProxy = new ScContentTreeNodeProxy_ScContentTreeNodeProxy(this.ApiCore, elemJacket, targetNode.Coord.LevelIndex, targetNode.Coord.SiblingIndex, targetNode.Coord.LevelWidth, null, this.ConResolver))
                    .then(() => scContentTreeNodeProxy.Instantiate())
                    .then(() => resolve(scContentTreeNodeProxy))
                    .catch((err) => reject(this.GetTreeNodeByGlyph.name + ' | ' + err));
            }
            else {
                reject(() => this.ErrorHand.FormatRejectMessage(this.GetTreeNodeByGlyph.name, 'null target node or null treeContainerJacket'));
            }
        }));
    }
    SetStateOfNodeRecursive(currentNodeData, depth) {
        return ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.SetStateOfNodeRecursive.name, currentNodeData.Friendly + ' ' + depth.toString());
            try {
                let maxIterDepth = 200;
                let promisesAr = [];
                if (depth > maxIterDepth) {
                    this.ErrorHand.HandleFatalError(this.SetStateOfNodeRecursive.name, 'Iteration check - max depth exceed. Something is probably wrong');
                }
                if (depth < maxIterDepth && currentNodeData) {
                    let targetScContentTreeNodeProxy = null;
                    yield this.GetTreeNodeByGlyph(currentNodeData)
                        .then((scContentTreeNodeProxy) => targetScContentTreeNodeProxy = scContentTreeNodeProxy)
                        .catch((err) => this.ErrorHand.WarningAndContinue(this.SetStateOfNodeRecursive.name, 'Tree node not found: ' + currentNodeData.Friendly + ' ' + currentNodeData.ItemId));
                    if (targetScContentTreeNodeProxy) {
                        yield targetScContentTreeNodeProxy.SetStateOfTreeNode(currentNodeData, depth);
                    }
                    if (currentNodeData.NodeChildren.length > 0) {
                        currentNodeData.NodeChildren.forEach((nodeChild) => promisesAr.push(this.SetStateOfNodeRecursive(nodeChild, depth + 1)));
                        yield Promise.all(promisesAr);
                    }
                }
                else {
                    this.ErrorHand.HandleFatalError(this.SetStateOfNodeRecursive.name, 'no node date or max depth hit ' + depth.toString());
                }
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.SetStateOfNodeRecursive.name, err);
            }
            this.Logger.FuncEnd(this.SetStateOfNodeRecursive.name, currentNodeData.Friendly);
        });
    }
    SetState(stateOfContentTree) {
        return ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([ContentTreeProxy_ContentTreeElemProxy.name, this.SetState.name]);
            this.TaskMonitor.AsyncTaskStarted(this.SetState.name);
            try {
                this.ContentTreeMutationEvent_Subject.DisableNotifications();
                yield this.SetStateOfNodeRecursive(stateOfContentTree.ContentTreeNodeDeep, 0);
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.SetState.name, err);
            }
            this.ContentTreeMutationEvent_Subject.EnableNotifications();
            this.TaskMonitor.AsyncTaskCompleted(this.SetState.name);
            this.Logger.FuncEnd([ContentTreeProxy_ContentTreeElemProxy.name, this.SetState.name]);
        });
    }
    SetRootNodeFromSelector() {
        return ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                yield this.ContainerElemJacket.WaitForElement(this.TreeRootSelector)
                    .then((elementJacket) => this.rootTreeNodeJacket = elementJacket);
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.SetRootNodeFromSelector.name, err);
            }
        });
    }
    GetActiveTreeNodeFromAncestorNode(stateOfScContentTreeNodeDeep) {
        let foundNode = null;
        if (stateOfScContentTreeNodeDeep.IsActive) {
            foundNode = stateOfScContentTreeNodeDeep;
        }
        else {
            stateOfScContentTreeNodeDeep.NodeChildren.forEach((child) => {
                let candidate = this.GetActiveTreeNodeFromAncestorNode(child);
                if (candidate !== null) {
                    foundNode = candidate;
                }
            });
        }
        return foundNode;
    }
    GetState() {
        return new Promise((resolve, reject) => ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([ContentTreeProxy_ContentTreeElemProxy.name, this.GetState.name]);
            let stateOfContentTree = new DefaultStateOfContentTree();
            this.ErrorHand.ThrowIfNullOrUndefined(this.GetState.name, [stateOfContentTree]);
            yield this.GetStateOfContentTreeNodeDeep()
                .then((result) => stateOfContentTree.ContentTreeNodeDeep = result)
                .then(() => {
                let activeNodeFlat = this.GetActiveTreeNodeFromAncestorNode(stateOfContentTree.ContentTreeNodeDeep);
                if (activeNodeFlat) {
                    stateOfContentTree.ActiveNodeShallow = activeNodeFlat;
                }
            })
                .then(() => resolve(stateOfContentTree))
                .catch((err) => reject(this.GetState.name + ' | ' + err));
            this.Logger.FuncEnd([ContentTreeProxy_ContentTreeElemProxy.name, this.GetState.name]);
        }));
    }
    GetTreeNodeProxy() {
        return new Promise((resolve, reject) => ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetTreeNodeProxy.name);
            if (this.ContainerElemJacket) {
                if (this.rootTreeNodeJacket) {
                    var rootParent = this.rootTreeNodeJacket.parentElement();
                    yield rootParent.WaitForElement(ContentConst.Const.Selector.SC.ContentEditor.ScContentTreeNodeGlyph, this.GetStateOfContentTreeNodeDeep.name)
                        .then((firstChildGlyphNode) => ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
                        this._treeNodeProxy = new ScContentTreeNodeProxy_ScContentTreeNodeProxy(this.ApiCore, firstChildGlyphNode, 0, 0, 1, null, this.ConResolver);
                        yield this._treeNodeProxy.Instantiate();
                    }))
                        .catch((err) => reject(this.GetTreeNodeProxy.name + ' | ' + err));
                }
                else {
                    this.ErrorHand.HandleFatalError(this.GetStateOfContentTreeNodeDeep.name, 'no root node');
                }
            }
            else {
                this.ErrorHand.HandleFatalError(this.GetStateOfContentTreeNodeDeep.name, 'no targetDoc');
            }
            resolve(this._treeNodeProxy);
            this.Logger.FuncEnd(this.GetTreeNodeProxy.name);
        }));
    }
    GetStateOfContentTreeNodeDeep() {
        return new Promise((resolve, reject) => ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetStateOfContentTreeNodeDeep.name);
            yield this.GetTreeNodeProxy()
                .then((scContentTreeNodeProxy) => scContentTreeNodeProxy.GetStateOfScContentTreeNodeDeep())
                .then((stateOfScContentTreeNodeProxy) => {
                resolve(stateOfScContentTreeNodeProxy);
            })
                .catch((err) => reject(this.GetStateOfContentTreeNodeDeep.name + ' | ' + err));
            this.Logger.FuncEnd(this.GetStateOfContentTreeNodeDeep.name);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/_ContentTreeBasedProxy.js
var _ContentTreeBasedProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class _ContentTreeBasedProxy_ContentTreeBasedDocProxy extends _BaseStateFullDocProxy_BaseStateFullDocProxy {
    constructor(apiCore, documentJacket) {
        super(apiCore, documentJacket);
        this.Logger.CTORStart(_ContentTreeBasedProxy_ContentTreeBasedDocProxy.name);
        this.AssociatedHindsiteId = Guid_Guid.NewRandomGuid();
        this.DocumentJacket = documentJacket;
        this.AssociatedHindsiteId = Guid_Guid.NewRandomGuid();
        this.ValidateAssociatedDocContentEditor();
        this.Instantiate();
        this.Logger.CTOREnd(_ContentTreeBasedProxy_ContentTreeBasedDocProxy.name);
    }
    Instantiate() {
        this.RecipeBasic = new RecipeBasics_RecipeBasics(this.ApiCore);
    }
    __baseInstantiateAsyncMembers() {
        return _ContentTreeBasedProxy_awaiter(this, void 0, void 0, function* () {
            yield this.DocumentJacket.WaitForCompleteNAB_DocumentJacket(_ContentTreeBasedProxy_ContentTreeBasedDocProxy.name)
                .then(() => this.DocumentJacket.WaitForGenericElemJacket(ContentConst.Const.Selector.SC.ContentEditor.ScContentTreeContainer))
                .then((treeContainer) => this.ContentTreeProxy = new ContentTreeProxy_ContentTreeElemProxy(this.ApiCore, this.DocumentJacket, treeContainer, this.TreeRootSelector))
                .then(() => this.ContentTreeProxy.Instantiate_TreeProxyAsyncElem())
                .then(() => {
                this.__ContentTreeBasedProxyMutationEvent_Subject = new ContentEditorProxyMutationEvent_Subject_ContentTreeBasedProxyMutationEvent_Subject(this.ApiCore);
                this.TreeMutationEvent_Observer = new ContentTreeProxyMutationEvent_Observer_ContentTreeBasedProxyMutationEvent_Observer(this.ApiCore, this.CallBackOn__ContentTreeBasedProxyTreeMutationEventAsync.bind(this));
            })
                .then(() => { })
                .catch((err) => this.ErrorHand.HandleFatalError(this.__baseInstantiateAsyncMembers.name, err));
        });
    }
    __baseWireEvents() {
        this.ContentTreeProxy.WireEvents_TreeProxy();
        this.ContentTreeProxy.ContentTreeMutationEvent_Subject.RegisterObserver(this.TreeMutationEvent_Observer);
    }
    __baseSetState(stateOfContentTreeBasedProxies) {
        return _ContentTreeBasedProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => _ContentTreeBasedProxy_awaiter(this, void 0, void 0, function* () {
                this.ErrorHand.ThrowIfNullOrUndefined(this.SetState.name + ' ' + _ContentTreeBasedProxy_ContentTreeBasedDocProxy.name, stateOfContentTreeBasedProxies);
                this.ErrorHand.ThrowIfNullOrUndefined(this.SetState.name + ' ' + _ContentTreeBasedProxy_ContentTreeBasedDocProxy.name, stateOfContentTreeBasedProxies.ContentTree);
                this.__ContentTreeBasedProxyMutationEvent_Subject.DisableNotifications();
                yield this.RecipeBasic.WaitForTimePeriod(1, this.SetState.name)
                    .then(() => this.RecipeBasic.WaitForNoUiFrontOverlay(this.SetState.name))
                    .then(() => this.ContentTreeProxy.SetState(stateOfContentTreeBasedProxies.ContentTree))
                    .then(() => {
                    this.__ContentTreeBasedProxyMutationEvent_Subject.EnableNotifications();
                    resolve(true);
                })
                    .catch((err) => {
                    this.__ContentTreeBasedProxyMutationEvent_Subject.EnableNotifications();
                    reject(this.SetState.name + " " + err);
                });
            }));
        });
    }
    __BaseTriggerInboundEventsAsync() {
        this.ErrorHand.ThrowIfNullOrUndefined(this.__BaseTriggerInboundEventsAsync.name + ' ' + _ContentTreeBasedProxy_ContentTreeBasedDocProxy.name, this.ContentTreeProxy);
        this.ContentTreeProxy.TriggerActiveNodeChangeEvent();
    }
    __baseGetState() {
        return new Promise((resolve, reject) => _ContentTreeBasedProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(_ContentTreeBasedProxy_ContentTreeBasedDocProxy.name, this.__baseGetState.name);
            let toReturn = {
                DisciminatorFriendly: ScProxyDisciminator[this.ScProxyDisciminator],
                Disciminator: this.ScProxyDisciminator,
                ContentTree: null
            };
            yield this.ContentTreeProxy.GetState()
                .then((stateOfContentTree) => toReturn.ContentTree = stateOfContentTree)
                .then(() => resolve(toReturn))
                .catch((err) => reject(this.GetState.name + ' | ' + err));
            this.Logger.FuncEnd(_ContentTreeBasedProxy_ContentTreeBasedDocProxy.name, this.__baseGetState.name);
        }));
    }
    CallBackOn__ContentTreeBasedProxyTreeMutationEventAsync(treeMutationEvent_Payload) {
        this.Logger.FuncStart(this.CallBackOn__ContentTreeBasedProxyTreeMutationEventAsync.name);
        this.TaskMonitor.AsyncTaskStarted(this.CallBackOn__ContentTreeBasedProxyTreeMutationEventAsync.name);
        let _contentEditorProxyMutationEvent_Payload = {
            TreeMutationEvent_Payload: treeMutationEvent_Payload,
        };
        if (this.__ContentTreeBasedProxyMutationEvent_Subject) {
            this.__ContentTreeBasedProxyMutationEvent_Subject.NotifyObserversAsync(_contentEditorProxyMutationEvent_Payload);
        }
        this.TaskMonitor.AsyncTaskCompleted(this.CallBackOn__ContentTreeBasedProxyTreeMutationEventAsync.name);
        this.Logger.FuncEnd(this.CallBackOn__ContentTreeBasedProxyTreeMutationEventAsync.name);
    }
    ValidateAssociatedDocContentEditor() {
        if (!this.DocumentJacket) {
            this.ErrorHand.HandleFatalError(this.ValidateAssociatedDocContentEditor.name, 'No doc provided');
        }
        this.DocumentJacket.Validate();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/eScRibbonCommand.js
var ScRibbonCommand;
(function (ScRibbonCommand) {
    ScRibbonCommand[ScRibbonCommand["Unknown"] = 0] = "Unknown";
    ScRibbonCommand[ScRibbonCommand["PresentationDetails"] = 1] = "PresentationDetails";
    ScRibbonCommand[ScRibbonCommand["NavigateLinks"] = 2] = "NavigateLinks";
    ScRibbonCommand[ScRibbonCommand["ToggleRawValues"] = 3] = "ToggleRawValues";
    ScRibbonCommand[ScRibbonCommand["NavigateBack"] = 4] = "NavigateBack";
    ScRibbonCommand[ScRibbonCommand["NavigateForward"] = 5] = "NavigateForward";
    ScRibbonCommand[ScRibbonCommand["NavigateUp"] = 6] = "NavigateUp";
})(ScRibbonCommand || (ScRibbonCommand = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DesktopStartBarProxy/DesktopStartBarButtonProxy.js
var DesktopStartBarButtonProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






class DesktopStartBarButtonProxy_DesktopStartBarButtonProxy extends _APICoreBase_APICoreBase {
    constructor(apiCore, iframeElemId, documentJacket, conResolver) {
        super(apiCore);
        this.DocumentJacket = documentJacket;
        this.FrameId = iframeElemId;
        this.ConResolver = conResolver;
        this.InstantiateInstance();
    }
    InstantiateInstance() {
        this.StartBarButtonElemId = ContentConst.Const.Names.Desktop.StartBarApplicationPrefix + this.FrameId;
    }
    Instantiate_DestopStartBarButtonProxyAsyncItems() {
        return DesktopStartBarButtonProxy_awaiter(this, void 0, void 0, function* () {
            try {
                let querySelectBtn = '[id=' + this.StartBarButtonElemId + ']';
                this.FoundStartBarButton = this.DocumentJacket.QuerySelector(querySelectBtn);
                yield this.FoundStartBarButton.WaitForElement(':scope > div > span', this.Instantiate_DestopStartBarButtonProxyAsyncItems.name)
                    .then((containerSpanElement) => this.ContainerSpanElement = containerSpanElement);
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.Instantiate_DestopStartBarButtonProxyAsyncItems.name, err);
            }
        });
    }
    AncestorNodeSpan(lineage) {
        let htmlSpanElement = document.createElement('span');
        let l1text = StaticHelpers_StaticHelpers.BufferString(lineage.L1Text, 5, BufferChar.space, BufferDirection.right);
        let l2text = StaticHelpers_StaticHelpers.BufferString(lineage.L2Text, 5, BufferChar.space, BufferDirection.right);
        htmlSpanElement.innerText = l1text + '_/' + l2text + '_';
        htmlSpanElement.style.left = '19px';
        htmlSpanElement.style.position = 'absolute';
        htmlSpanElement.style.top = '0px';
        htmlSpanElement.style.opacity = '0.3';
        htmlSpanElement.style.fontSize = '11px';
        return htmlSpanElement;
    }
    LxNodeSpan(nodeText) {
        let htmlSpanElement = document.createElement('span');
        htmlSpanElement.innerText = StaticHelpers_StaticHelpers.BufferString(nodeText, ContentConst.Const.Numbers.Desktop.MaxToolBarNameChars, BufferChar.space, BufferDirection.right);
        htmlSpanElement.style.left = '15px';
        htmlSpanElement.style.position = 'absolute';
        htmlSpanElement.style.top = '0px';
        return htmlSpanElement;
    }
    LxNodeImg(iconSource) {
        let newMainIconNode = document.createElement('img');
        newMainIconNode.border = '0';
        newMainIconNode.classList.add("scContentTreeNodeIcon");
        newMainIconNode.height = 16;
        newMainIconNode.src = iconSource;
        newMainIconNode.style.left = '0px';
        newMainIconNode.style.position = 'absolute';
        newMainIconNode.style.top = '-8px';
        newMainIconNode.width = 16;
        return newMainIconNode;
    }
    AncestorNodeIcon(itemIconSource) {
        let newItemIconNode = document.createElement('img');
        newItemIconNode.border = '0px';
        newItemIconNode.classList.add("scContentTreeNodeIcon");
        newItemIconNode.height = 16;
        newItemIconNode.src = this.ConResolver.ResolveIconPath(itemIconSource);
        newItemIconNode.style.position = "absolute";
        newItemIconNode.style.opacity = "0.9";
        newItemIconNode.width = 16;
        return newItemIconNode;
    }
    ProcessColor(icon) {
        let borderColor = '';
        if (icon.indexOf('photo_scenery.png') > -1) {
            borderColor = SharedConst.Const.Colors.colorMediaLibrary;
        }
        else if (icon.indexOf('cubes_blue.png') > -1) {
            borderColor = SharedConst.Const.Colors.colorContent;
        }
        else if (icon.indexOf('windows.png') > -1) {
            borderColor = SharedConst.Const.Colors.colorLayout;
        }
        else if (icon.indexOf('workstation1.png') > -1) {
            borderColor = SharedConst.Const.Colors.colorSystem;
        }
        else if (icon.indexOf('form_blue.png') > -1) {
            borderColor = SharedConst.Const.Colors.colorTemplates;
        }
        return borderColor;
    }
    DrawBorderColor(stateOfContentTree) {
        let borderColor = '';
        borderColor = this.ProcessColor(stateOfContentTree.ActiveNodeShallow.Lineage.L1Icon.IconSuffix);
        if (borderColor.length > 0) {
            this.FoundStartBarButton.NativeElement.style.borderBottomColor = borderColor;
        }
    }
    BuildLxSpan(stateOfContentTree) {
        let nodeImage = this.LxNodeImg(this.ConResolver.ResolveIconPath(stateOfContentTree.ActiveNodeShallow.IconSrc));
        let nodeSpan = this.LxNodeSpan(stateOfContentTree.ActiveNodeShallow.Friendly);
        let toReturn = document.createElement('span');
        toReturn.style.position = 'relative';
        toReturn.style.left = '-8px';
        toReturn.style.top = '8px';
        toReturn.style.marginRight = '-4px';
        toReturn.classList.add("scContentTreeNodeIcon");
        toReturn.appendChild(nodeImage);
        toReturn.appendChild(nodeSpan);
        return toReturn;
    }
    BuildAncestorSpan(stateOfContentTree) {
        let nodeImage = this.AncestorNodeIcon(stateOfContentTree.ActiveNodeShallow.Lineage.L1Icon);
        let nodeSpan = this.AncestorNodeSpan(stateOfContentTree.ActiveNodeShallow.Lineage);
        let toReturn = document.createElement('span');
        toReturn.style.position = 'absolute';
        toReturn.style.top = '-17px';
        toReturn.style.left = '-17px';
        toReturn.appendChild(nodeImage);
        toReturn.appendChild(nodeSpan);
        return toReturn;
    }
    DrawTextAndIcons(stateOfContentTree) {
        let ancestorSpan = this.BuildAncestorSpan(stateOfContentTree);
        let lxSpan = this.BuildLxSpan(stateOfContentTree);
        let bothWrapper = document.createElement('span');
        bothWrapper.style.position = "relative";
        bothWrapper.appendChild(ancestorSpan);
        bothWrapper.appendChild(lxSpan);
        if (this.ContainerSpanElement) {
            this.ContainerSpanElement.NativeElement.innerHTML = bothWrapper.outerHTML;
        }
        else {
            this.ErrorHand.HandleFatalError(this.SetStateOfDesktopStartBarButtonAsync.name, 'no container span element');
        }
    }
    SetStateOfDesktopStartBarButtonAsync(stateOfContentTree) {
        this.Logger.FuncStart(this.SetStateOfDesktopStartBarButtonAsync.name);
        this.TaskMonitor.AsyncTaskStarted(this.SetStateOfDesktopStartBarButtonAsync.name);
        this.ErrorHand.ThrowIfNullOrUndefined(this.SetStateOfDesktopStartBarButtonAsync.name, [stateOfContentTree]);
        this.Logger.LogAsJsonPretty('stateOfContentTree.ActiveNodeFlat', stateOfContentTree.ActiveNodeShallow);
        if (stateOfContentTree) {
            this.DrawTextAndIcons(stateOfContentTree);
            this.DrawBorderColor(stateOfContentTree);
        }
        else {
            this.ErrorHand.WarningAndContinue(this.SetStateOfDesktopStartBarButtonAsync.name, 'no tree data');
        }
        this.TaskMonitor.AsyncTaskCompleted(this.SetStateOfDesktopStartBarButtonAsync.name);
        this.Logger.FuncEnd(this.SetStateOfDesktopStartBarButtonAsync.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DesktopStartBarProxy/AllStartMenuButtonSelectos.js


class AllStartMenuButtonSelectors {
}
AllStartMenuButtonSelectors.AllWindowTypes = [
    {
        ScWindowTypeX: ScWindowType.AccessViewer,
        Pop1Selector: ContentConst.Const.Selector.SC.StartMenu.Popup1.SecurityTools,
        Pop2Selector: ContentConst.Const.Selector.SC.StartMenu.Popup2.AccessViewer,
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: ScWindowType.Archive,
        Pop1Selector: ContentConst.Const.Selector.SC.StartMenu.Popup1.AllApplications,
        Pop2Selector: ContentConst.Const.Selector.SC.StartMenu.Popup2.Archive,
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: ScWindowType.ContentEditor,
        Pop1Selector: ContentConst.Const.Selector.SC.StartMenu.Popup1.StartMenuLeftOption,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: ScWindowType.DomainManager,
        Pop1Selector: ContentConst.Const.Selector.SC.StartMenu.Popup2.DomainManager,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: ScWindowType.InstalledLicenses,
        Pop1Selector: ContentConst.Const.Selector.SC.StartMenu.Popup3.InstalledLicenses,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: ScWindowType.InstallationWizard,
        Pop1Selector: ContentConst.Const.Selector.SC.StartMenu.Popup2.InstallationWizard,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: ScWindowType.KeyboardMap,
        Pop1Selector: ContentConst.Const.Selector.SC.StartMenu.Popup2.KeyboardMap,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: ScWindowType.LicenseDetails,
        Pop1Selector: ContentConst.Const.Selector.SC.StartMenu.Popup3.LicenseDetails,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: ScWindowType.LogViewer,
        Pop1Selector: ContentConst.Const.Selector.SC.StartMenu.Popup2.LogViewer,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: ScWindowType.MarketingControlPanel,
        Pop1Selector: ContentConst.Const.Selector.SC.StartMenu.Popup2.MarketingControlPanel,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: ScWindowType.MediaLibrary,
        Pop1Selector: ContentConst.Const.Selector.SC.StartMenu.Popup1.MediaLibrary,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: ScWindowType.PackageDesigner,
        Pop1Selector: ContentConst.Const.Selector.SC.StartMenu.Popup2.PackageDesignerButton,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: ScWindowType.Run,
        Pop1Selector: ContentConst.Const.Selector.SC.StartMenu.Popup2.Run,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: ScWindowType.RoleManager,
        Pop1Selector: ContentConst.Const.Selector.SC.StartMenu.Popup2.RoleManager,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: ScWindowType.RecycleBin,
        Pop1Selector: ContentConst.Const.Selector.SC.StartMenu.Popup1.RecycleBin,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: ScWindowType.ScanForBrokenLinks,
        Pop1Selector: ContentConst.Const.Selector.SC.StartMenu.Popup2.ScanForBrokenLinks,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: ScWindowType.SecurityEditor,
        Pop1Selector: ContentConst.Const.Selector.SC.StartMenu.Popup2.SecurityEditor,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: ScWindowType.TemplateManager,
        Pop1Selector: ContentConst.Const.Selector.SC.StartMenu.Popup1.TemplateManager,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: ScWindowType.UserManager,
        Pop1Selector: ContentConst.Const.Selector.SC.StartMenu.Popup2.UserManager,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: ScWindowType.Workbox,
        Pop1Selector: ContentConst.Const.Selector.SC.StartMenu.Popup2.Workbox,
        Pop2Selector: '',
        Pop3Selector: '',
    },
];

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DesktopStartBarProxy/StartMenuButtonResolver.js



class StartMenuButtonResolver_StartMenuButtonResolver extends _APICoreBase_APICoreBase {
    GetButtonSelectors(scWindowType) {
        let allWindowTypes = AllStartMenuButtonSelectors.AllWindowTypes;
        let toReturn = null;
        allWindowTypes.forEach((selectorSet) => {
            if (selectorSet.ScWindowTypeX === scWindowType) {
                toReturn = selectorSet;
            }
        });
        if (!toReturn) {
            toReturn = {
                Pop1Selector: '',
                Pop2Selector: '',
                Pop3Selector: '',
                ScWindowTypeX: ScWindowType.Unknown,
            };
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DesktopStartBarProxy/DTStartBarProxy.js
var DTStartBarProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class DTStartBarProxy_DTStartBarProxy extends _APICoreBase_APICoreBase {
    constructor(apiCore, documentJacket) {
        super(apiCore);
        this.StartBarButtonProxyBucket = [];
        this.Logger.CTORStart(DTStartBarProxy_DTStartBarProxy.name);
        this.DocumentJacket = documentJacket;
        this.InstantiateInstance();
        this.Logger.CTOREnd(DTStartBarProxy_DTStartBarProxy.name);
    }
    InstantiateInstance() {
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.ApiCore);
        this.ConResolver = new ConResolver_ConResolver(this.ApiCore);
    }
    Instantiate_DTStartBarProxy() {
        this.Logger.FuncStart(this.Instantiate_DTStartBarProxy.name, DTStartBarProxy_DTStartBarProxy.name);
        this.Logger.FuncEnd(this.Instantiate_DTStartBarProxy.name, DTStartBarProxy_DTStartBarProxy.name);
    }
    WireEvent() {
        this.Logger.FuncStart(this.WireEvent.name, DTStartBarProxy_DTStartBarProxy.name);
        this.Logger.FuncEnd(this.WireEvent.name, DTStartBarProxy_DTStartBarProxy.name);
    }
    TriggerRedButtonAsync(scWindowType, methodLock) {
        return DTStartBarProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.TriggerRedButtonAsync.name);
            try {
                this.StartMenuButtonResolver = new StartMenuButtonResolver_StartMenuButtonResolver(this.ApiCore);
                let buttonSelectors = this.StartMenuButtonResolver.GetButtonSelectors(scWindowType);
                if (!buttonSelectors || !buttonSelectors.Pop1Selector) {
                    this.Logger.LogAsJsonPretty('buttonSelectors', buttonSelectors);
                    this.ErrorHand.HandleFatalError([this.TriggerRedButtonAsync.name], 'something is wrong with the button selectors');
                }
                yield methodLock.WaitForLockControl(ScWindowType[scWindowType])
                    .then(() => this.DocumentJacket.RaceWaitAndClick(ContentConst.Const.Selector.SC.scStartButtonVSpec))
                    .then(() => this.TaskMonitor.AsyncTaskStarted(this.TriggerRedButtonAsync.name))
                    .then(() => this.TriggerPopXButton(buttonSelectors.Pop1Selector, ContentConst.Const.Selector.SC.StartMenu.Popup1.Id))
                    .then(() => this.TriggerPopXButton(buttonSelectors.Pop2Selector, ContentConst.Const.Selector.SC.StartMenu.Popup2.Id))
                    .then(() => this.TriggerPopXButton(buttonSelectors.Pop3Selector, ContentConst.Const.Selector.SC.StartMenu.Popup3.Id))
                    .then(() => methodLock.ReleaseLock())
                    .then(() => this.RecipeBasics.WaitForTimePeriod(1, this.TriggerRedButtonAsync.name))
                    .then(() => this.TaskMonitor.AsyncTaskCompleted(this.TriggerRedButtonAsync.name))
                    .catch((err) => this.ErrorHand.HandleFatalError(this.TriggerRedButtonAsync.name, err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.TriggerRedButtonAsync.name, err);
            }
            this.Logger.FuncEnd(this.TriggerRedButtonAsync.name);
        });
    }
    TriggerPopXButton(buttonSelector, containerSelector) {
        return DTStartBarProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.TriggerPopXButton.name, buttonSelector + ' | ' + containerSelector);
            try {
                if (buttonSelector && buttonSelector.length > 0 && containerSelector && containerSelector.length > 0) {
                    let containerElemJacket = null;
                    let buttonElemJacket = null;
                    yield this.DocumentJacket.WaitForGenericElemJacket(containerSelector)
                        .then((elementJacket) => containerElemJacket = elementJacket)
                        .then(() => containerElemJacket.WaitForElement(buttonSelector, this.TriggerRedButtonAsync.name))
                        .then((elementJacket) => buttonElemJacket = elementJacket)
                        .then(() => this.Logger.LogImportant('About to click ' + buttonSelector))
                        .then(() => buttonElemJacket.Click())
                        .then(() => this.RecipeBasics.WaitForTimePeriod(1, this.TriggerPopXButton.name))
                        .catch((err) => this.ErrorHand.HandleFatalError(this.TriggerPopXButton.name + ' ' + buttonSelector + ' ' + containerSelector, err));
                }
                else {
                }
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.TriggerPopXButton.name, err);
            }
            this.Logger.FuncEnd(this.TriggerPopXButton.name, buttonSelector + ' | ' + containerSelector);
        });
    }
    GetAssociatedStartBarButton(dTFrameProxyMutationEventPayload) {
        return DTStartBarProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DTStartBarProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetAssociatedStartBarButton.name);
                this.ErrorHand.ThrowIfNullOrUndefined(this.GetAssociatedStartBarButton.name, [dTFrameProxyMutationEventPayload]);
                let foundStartBarButtonProxy = null;
                this.StartBarButtonProxyBucket.forEach((startBarButtonProxy) => {
                    if (startBarButtonProxy.FrameId === dTFrameProxyMutationEventPayload.FrameId) {
                        foundStartBarButtonProxy = startBarButtonProxy;
                    }
                });
                if (!foundStartBarButtonProxy) {
                    foundStartBarButtonProxy = new DesktopStartBarButtonProxy_DesktopStartBarButtonProxy(this.ApiCore, dTFrameProxyMutationEventPayload.FrameId, this.DocumentJacket, this.ConResolver);
                    yield foundStartBarButtonProxy.Instantiate_DestopStartBarButtonProxyAsyncItems()
                        .catch((err) => reject(this.GetAssociatedStartBarButton.name + ' | ' + err));
                    this.StartBarButtonProxyBucket.push(foundStartBarButtonProxy);
                }
                resolve(foundStartBarButtonProxy);
                this.Logger.FuncEnd(this.GetAssociatedStartBarButton.name);
            }));
        });
    }
    OnTreeMutationEvent_DesktopStartBarProxy(dTAreaProxyMutationEvent_Payload) {
        this.Logger.FuncStart(this.OnTreeMutationEvent_DesktopStartBarProxy.name);
        this.TaskMonitor.AsyncTaskStarted(this.OnTreeMutationEvent_DesktopStartBarProxy.name);
        if (dTAreaProxyMutationEvent_Payload) {
            if (dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload
                &&
                    dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload.ContentEditorProxyMutationPayload
                &&
                    dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload.ContentEditorProxyMutationPayload.TreeMutationEvent_Payload
                &&
                    dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload.ContentEditorProxyMutationPayload.TreeMutationEvent_Payload.ContentTree
                &&
                    dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload.ContentEditorProxyMutationPayload.TreeMutationEvent_Payload.ContentTree.ActiveNodeShallow) {
                let contentTreeProxyMutationEvent_Payload = dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload.ContentEditorProxyMutationPayload.TreeMutationEvent_Payload;
                if (contentTreeProxyMutationEvent_Payload.ContentTree.ActiveNodeShallow) {
                    this.GetAssociatedStartBarButton(dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload)
                        .then((startBarButtonProxy) => startBarButtonProxy.SetStateOfDesktopStartBarButtonAsync(contentTreeProxyMutationEvent_Payload.ContentTree))
                        .catch((err) => this.ErrorHand.HandleFatalError(this.OnTreeMutationEvent_DesktopStartBarProxy.name, err));
                }
                else {
                    this.Logger.Log('null activeNodeFlat provided');
                }
            }
            else {
                this.Logger.LogAsJsonPretty('dTAreaProxyMutationEvent_Payload', dTAreaProxyMutationEvent_Payload);
            }
        }
        else {
            this.ErrorHand.HandleFatalError(this.OnTreeMutationEvent_DesktopStartBarProxy.name, 'Null payload');
        }
        this.TaskMonitor.AsyncTaskCompleted(this.OnTreeMutationEvent_DesktopStartBarProxy.name);
        this.Logger.FuncEnd(this.OnTreeMutationEvent_DesktopStartBarProxy.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ScRibbonProxy/AllRibbonCommands.js


class AllRibbonCommands {
}
AllRibbonCommands.Const = [
    {
        ScRibbonCommand: ScRibbonCommand.PresentationDetails,
        Step1Selector: ContentConst.Const.Selector.SC.ScRibbon.Presentation.Id,
        Step2Selector: ContentConst.Const.Selector.SC.ScRibbon.Presentation.Details
    },
    {
        ScRibbonCommand: ScRibbonCommand.NavigateLinks,
        Step1Selector: ContentConst.Const.Selector.SC.ScRibbon.Navigate.Id,
        Step2Selector: ContentConst.Const.Selector.SC.ScRibbon.Navigate.Links
    },
    {
        ScRibbonCommand: ScRibbonCommand.ToggleRawValues,
        Step1Selector: ContentConst.Const.Selector.SC.ScRibbon.View.Id,
        Step2Selector: ContentConst.Const.Selector.SC.ScRibbon.View.RawValues
    },
    {
        ScRibbonCommand: ScRibbonCommand.NavigateBack,
        Step1Selector: ContentConst.Const.Selector.SC.ScRibbon.Navigate.Id,
        Step2Selector: ContentConst.Const.Selector.SC.ScRibbon.View.NavigateBack
    },
    {
        ScRibbonCommand: ScRibbonCommand.NavigateForward,
        Step1Selector: ContentConst.Const.Selector.SC.ScRibbon.Navigate.Id,
        Step2Selector: ContentConst.Const.Selector.SC.ScRibbon.View.NavigateForward
    },
    {
        ScRibbonCommand: ScRibbonCommand.NavigateUp,
        Step1Selector: ContentConst.Const.Selector.SC.ScRibbon.Navigate.Id,
        Step2Selector: ContentConst.Const.Selector.SC.ScRibbon.View.NavigateUp
    },
];

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ScRibbonProxy/RibbonMenuButtonResolver.js



class RibbonMenuButtonResolver_RibbonMenuButtonResolver extends _APICoreBase_APICoreBase {
    GetRibbonButtonSequence(scRibbonCommand) {
        let ribbonClickSequences = AllRibbonCommands.Const;
        let toReturnRibbonClickSequence = null;
        ribbonClickSequences.forEach((ribbonClickSequence) => {
            if (ribbonClickSequence.ScRibbonCommand === scRibbonCommand) {
                toReturnRibbonClickSequence = ribbonClickSequence;
            }
        });
        if (!toReturnRibbonClickSequence) {
            toReturnRibbonClickSequence = {
                ScRibbonCommand: ScRibbonCommand.Unknown,
                Step1Selector: null,
                Step2Selector: null,
            };
        }
        return toReturnRibbonClickSequence;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ScRibbonProxy/ScRibbonProxy.js
var ScRibbonProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class ScRibbonProxy_ScRibbonProxy extends _APICoreBase_APICoreBase {
    constructor(apiCore, documentJacket) {
        super(apiCore);
        this.Logger.CTORStart(DTStartBarProxy_DTStartBarProxy.name);
        this.DocumentJacket = documentJacket;
        this.InstantiateInstance();
        this.Logger.CTOREnd(DTStartBarProxy_DTStartBarProxy.name);
    }
    InstantiateInstance() {
    }
    TriggerRibbonMenuItem(scRibbonButtonCommand, methodLock) {
        return ScRibbonProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([ScRibbonProxy_ScRibbonProxy.name, this.TriggerRibbonMenuItem.name], ScRibbonCommand[scRibbonButtonCommand]);
            try {
                this.RibbonMenuButtonResolver = new RibbonMenuButtonResolver_RibbonMenuButtonResolver(this.ApiCore);
                let ribbonClickSequence = this.RibbonMenuButtonResolver.GetRibbonButtonSequence(scRibbonButtonCommand);
                if (!ribbonClickSequence || !ribbonClickSequence.ScRibbonCommand) {
                    this.Logger.LogAsJsonPretty('ribbonButtonSequence', ribbonClickSequence);
                    this.ErrorHand.HandleFatalError([this.TriggerRibbonMenuItem.name], 'something is wrong with the ribbon selectors');
                }
                yield methodLock.WaitForLockControl(ScRibbonCommand[scRibbonButtonCommand])
                    .then(() => this.DocumentJacket.WaitForThenClick([ribbonClickSequence.Step1Selector]))
                    .then(() => this.TaskMonitor.AsyncTaskStarted(this.TriggerRibbonMenuItem.name))
                    .then(() => this.DocumentJacket.WaitForThenClick([ribbonClickSequence.Step2Selector]))
                    .catch((err) => this.ErrorHand.WarningAndContinue(this.TriggerRibbonMenuItem.name, err))
                    .finally(() => {
                    methodLock.ReleaseLock();
                    this.TaskMonitor.AsyncTaskCompleted(this.TriggerRibbonMenuItem.name);
                });
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.TriggerRibbonMenuItem.name, err);
            }
            this.Logger.FuncEnd(this.TriggerRibbonMenuItem.name);
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DesktopStartBarProxy/AsyncLock.js
var AsyncLock_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class AsyncLock_AsyncLock extends _APICoreBase_APICoreBase {
    constructor() {
        super(...arguments);
        this.IsLocked = false;
        this.CreatorFriendly = '';
        this.CurrentOwnerFriendly = '';
    }
    ReleaseLock() {
        this.Logger.FuncStart(this.ReleaseLock.name, this.CurrentOwnerFriendly);
        this.IsLocked = false;
        this.CurrentOwnerFriendly = '';
        this.Logger.FuncEnd(this.ReleaseLock.name, this.CurrentOwnerFriendly);
    }
    WaitForLockControl(candidate) {
        return AsyncLock_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => AsyncLock_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForLockControl.name, this.CurrentOwnerFriendly);
                var iterationJr = new IterationDrone_IterationDrone(this.ApiCore, this.WaitForLockControl.name, true, 30);
                while (this.IsLocked && iterationJr.DecrementAndKeepGoing()) {
                    this.Logger.LogVal('candidate', candidate);
                    this.Logger.LogVal('current owner', this.CurrentOwnerFriendly);
                    yield iterationJr.Wait();
                }
                if (!this.IsLocked) {
                    this.CurrentOwnerFriendly = candidate;
                    this.IsLocked = true;
                    resolve();
                }
                if (iterationJr.IsExhausted) {
                    reject(iterationJr.IsExhaustedMsg);
                }
                this.Logger.FuncEnd(this.WaitForLockControl.name, this.CurrentOwnerFriendly);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentEditorProxy.js
var ContentEditorProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class ContentEditorProxy_ContentEditorDocProxy extends _ContentTreeBasedProxy_ContentTreeBasedDocProxy {
    constructor(apiCore, documentJacket, friendly) {
        super(apiCore, documentJacket);
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[ScProxyDisciminator.ContentEditor];
        this.TreeRootSelector = ContentConst.Const.Selector.SC.ContentTree.BuiltIn.TreeNodeSitecoreRoot;
        this.ScProxyDisciminator = ScProxyDisciminator.ContentEditor;
        this.HostedElemProxies = [];
        this.Logger.CTORStart(ContentEditorProxy_ContentEditorDocProxy.name);
        this.Logger.CTOREnd(ContentEditorProxy_ContentEditorDocProxy.name);
    }
    PublishItem() {
        return ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            let publishProxy = new ContentEditorPublishProxy_ContentEditorPublishProxy(this.ApiCore, this, this.DocumentJacket);
            yield publishProxy.Execute();
        });
    }
    InstantiateAsyncMembers() {
        return ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            return this.__baseInstantiateAsyncMembers();
        });
    }
    WireEvents() {
        this.Logger.FuncStart(this.WireEvents.name, ContentEditorProxy_ContentEditorDocProxy.name);
        this.__baseWireEvents();
        this.Logger.FuncEnd(this.WireEvents.name, ContentEditorProxy_ContentEditorDocProxy.name);
    }
    GetState() {
        return this.__baseGetState();
    }
    SetState(dataToRestore) {
        return ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            return this.__baseSetState(dataToRestore);
        });
    }
    TriggerInboundEventsAsync() {
        this.__BaseTriggerInboundEventsAsync();
    }
    TriggerCERibbonCommand(scRibbonCommand) {
        this.Logger.FuncStart([ContentEditorProxy_ContentEditorDocProxy.name, this.TriggerCERibbonCommand.name], ScRibbonCommand[scRibbonCommand]);
        let scRibbonProxy = new ScRibbonProxy_ScRibbonProxy(this.ApiCore, this.DocumentJacket);
        let asyncLock = new AsyncLock_AsyncLock(this.ApiCore);
        scRibbonProxy.TriggerRibbonMenuItem(scRibbonCommand, asyncLock);
        this.Logger.FuncEnd([ContentEditorProxy_ContentEditorDocProxy.name, this.TriggerCERibbonCommand.name]);
    }
    SetCompactCss() {
        this.Logger.FuncStart(this.SetCompactCss.name, Guid_Guid.AsShort(this.DocumentJacket.DocId));
        this.Logger.FuncStart(this.SetCompactCss.name, Guid_Guid.AsShort(this.DocumentJacket.DocId));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfDTArea.js
class DefaultStateOfDTArea {
    constructor() {
        this.DTFrames = [];
        this.ActiveFrameIndex = -1;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfDesktop.js


class DefaultStateOfDesktop_DefaultStateOfDesktop {
    constructor() {
        this.DisciminatorFriendly = ScProxyDisciminator[ScProxyDisciminator.Desktop];
        this.Disciminator = ScProxyDisciminator.Desktop;
        this.DTArea = new DefaultStateOfDTArea();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/DTAreaProxyMutationEvent/DTAreaProxyMutationEvent_Subject.js


class DTAreaProxyMutationEvent_Subject_DTAreaProxyMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor() {
        super(...arguments);
        this.TypeDiscriminator = TypeDiscriminator.DTAreaProxyMutationEvent_Subject;
        this.Friendly_Subject = DTAreaProxyMutationEvent_Subject_DTAreaProxyMutationEvent_Subject.name;
        this.ShowLogActions = true;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/DTFrameProxyMutationEvent/DTFrameProxyMutationEvent_Observer.js


class DTFrameProxyMutationEvent_Observer_DTFrameProxyMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(apiCore, callback) {
        super(apiCore, DTFrameProxyMutationEvent_Observer_DTFrameProxyMutationEvent_Observer.name, callback);
        this.TypeDiscriminator = TypeDiscriminator.DTFrameProxyMutationEvent_Observer;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfDTFrame.js

class DefaultStateOfDTFrame_DefaultStateOfDTFrame {
    constructor() {
        this.HostedFrame = {
            Disciminator: ScProxyDisciminator.Unknown,
            DisciminatorFriendly: ScProxyDisciminator[ScProxyDisciminator.Unknown]
        };
        this.FrameStyling = null;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/ContentEditorProxyMutationEvent/ContentEditorProxyMutationEvent_Observer.js


class ContentEditorProxyMutationEvent_Observer_ContentTreeBasedProxyMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(apiCore, ownerFrameProxy) {
        super(apiCore, ContentEditorProxyMutationEvent_Observer_ContentTreeBasedProxyMutationEvent_Observer.name);
        this.TypeDiscriminator = TypeDiscriminator._ContentTreeBasedProxyMutationEvent_Observer;
        this.ShowLogActions = true;
        this.OwnerDTFrameProxy = ownerFrameProxy;
    }
    UpdateAsync(payload) {
        this.OwnerDTFrameProxy.OnContentEditorProxyMutation(payload);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/DTFrameProxyMutationEvent/DTFrameProxyMutationEvent_Subject.js


class DTFrameProxyMutationEvent_Subject_DTFrameProxyMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor() {
        super(...arguments);
        this.TypeDiscriminator = TypeDiscriminator.DTFrameProxyMutationEvent_Subject;
        this.Friendly_Subject = DTFrameProxyMutationEvent_Subject_DTFrameProxyMutationEvent_Subject.name;
        this.ShowLogActions = true;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/FrameProxies/DTFrameProxy.js
var DTFrameProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class DTFrameProxy_DTFrameProxy extends _BaseScFrameProxy_BaseScFrameProxy {
    constructor(apiCore, frameJacket, jqueryModalDialogsFrameProxy) {
        super(apiCore, frameJacket);
        this.FrameTypeDiscriminator = DTFrameProxy_DTFrameProxy.name;
        this.Friendly = DTFrameProxy_DTFrameProxy.name;
        this.ScProxyDisciminator = ScProxyDisciminator.DTFrameProxy;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[ScProxyDisciminator.DTFrameProxy];
        this.JqueryModalDialogsFrameProxy = jqueryModalDialogsFrameProxy;
        this.ErrorHand.ThrowIfNullOrUndefined(DTFrameProxy_DTFrameProxy.name, [frameJacket, this.JqueryModalDialogsFrameProxy]);
        this.Friendly = 'DTFrameProxy_' + this.FrameJacket.GetNativeIframeId();
        this.InstantiateInstance();
    }
    InstantiateInstance() {
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.ApiCore);
        this.StateFullProxyFactory = new ScDocProxyResolver_ScDocProxyResolver(this.ApiCore);
    }
    InstantiateAsyncMembers() {
        return DTFrameProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DTFrameProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.InstantiateAsyncMembers.name, DTFrameProxy_DTFrameProxy.name);
                this.ErrorHand.ThrowIfNullOrUndefined(this.InstantiateAsyncMembers.name, [this.FrameJacket]);
                yield this.FrameJacket.WaitForCompleteNABFrameElement(this.Friendly)
                    .then((result) => {
                    if (!result.IsCompleteNAB()) {
                        reject(result.DocumentReadtStateFriendly());
                    }
                })
                    .then(() => this.StateFullProxyFactory.ScDocProxyFactoryMake(this.FrameJacket.DocumentJacket, this.JqueryModalDialogsFrameProxy))
                    .then((stateFullProxy) => this.HostedStateFullProxy = stateFullProxy)
                    .then(() => {
                    this.DTFrameProxyMutationEvent_Subject = new DTFrameProxyMutationEvent_Subject_DTFrameProxyMutationEvent_Subject(this.ApiCore);
                    this._ContentTreeBasedProxyMutationEvent_Observer = new ContentEditorProxyMutationEvent_Observer_ContentTreeBasedProxyMutationEvent_Observer(this.ApiCore, this);
                })
                    .then(() => resolve())
                    .catch((err) => reject(this.InstantiateAsyncMembers.name + ' | ' + err));
                this.Logger.FuncEnd(this.InstantiateAsyncMembers.name, DTFrameProxy_DTFrameProxy.name);
            }));
        });
    }
    WireEvents() {
        return DTFrameProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WireEvents.name, DTFrameProxy_DTFrameProxy.name);
            if (this.HostedStateFullProxy.ScProxyDisciminator === ScProxyDisciminator.ContentEditor) {
                this.HostedStateFullProxy.__ContentTreeBasedProxyMutationEvent_Subject.RegisterObserver(this._ContentTreeBasedProxyMutationEvent_Observer);
            }
            else if (this.HostedStateFullProxy.ScProxyDisciminator === ScProxyDisciminator.MediaLibrary) {
                this.HostedStateFullProxy.__ContentTreeBasedProxyMutationEvent_Subject.RegisterObserver(this._ContentTreeBasedProxyMutationEvent_Observer);
            }
            else if (this.HostedStateFullProxy.ScProxyDisciminator === ScProxyDisciminator.TemplateManager) {
                this.HostedStateFullProxy.__ContentTreeBasedProxyMutationEvent_Subject.RegisterObserver(this._ContentTreeBasedProxyMutationEvent_Observer);
            }
            else if (this.HostedStateFullProxy.ScProxyDisciminator === ScProxyDisciminator.MarketingControlPanel) {
                this.HostedStateFullProxy.__ContentTreeBasedProxyMutationEvent_Subject.RegisterObserver(this._ContentTreeBasedProxyMutationEvent_Observer);
            }
            this.HostedStateFullProxy.WireEvents();
            this.Logger.FuncEnd(this.WireEvents.name, DTFrameProxy_DTFrameProxy.name);
        });
    }
    GetState() {
        return DTFrameProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DTFrameProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetState.name, DTFrameProxy_DTFrameProxy.name);
                let stateOfDTFrame = new DefaultStateOfDTFrame_DefaultStateOfDTFrame();
                stateOfDTFrame.FrameStyling = stateOfDTFrame.FrameStyling = this.FrameJacket.GetFrameStyling();
                stateOfDTFrame.ZIndex = this.GetZindexAsInt();
                if (this.HostedStateFullProxy) {
                    yield this.HostedStateFullProxy.GetState()
                        .then((statefullProxyState) => stateOfDTFrame.HostedFrame = statefullProxyState)
                        .catch((err) => reject(this.GetState.name + ' | ' + err));
                }
                resolve(stateOfDTFrame);
                this.Logger.FuncEnd(this.GetState.name, DTFrameProxy_DTFrameProxy.name);
            }));
        });
    }
    SetState(stateOfDTFrame) {
        return DTFrameProxy_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart(this.SetState.name, DTFrameProxy_DTFrameProxy.name);
                this.DTFrameProxyMutationEvent_Subject.DisableNotifications();
                yield this.HostedStateFullProxy.SetState(stateOfDTFrame.HostedFrame)
                    .then(() => {
                    this.SetFrameStyling(stateOfDTFrame);
                    this.DTFrameProxyMutationEvent_Subject.EnableNotifications();
                });
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.SetState.name, err);
            }
            this.Logger.FuncEnd(this.SetState.name, DTFrameProxy_DTFrameProxy.name);
        });
    }
    TriggerEventsForInbound() {
        if (this.HostedStateFullProxy) {
            this.HostedStateFullProxy.TriggerInboundEventsAsync();
        }
    }
    TriggerInboundEventsAsync() {
    }
    GetDocumentJacket() {
        return this.FrameJacket.DocumentJacket;
    }
    GetNativeFrameId() {
        return this.FrameJacket.GetNativeIframeId();
    }
    GetScWindowType() {
        let scPageTypeResolver = new ScWindowTypeResolver_ScWindowTypeResolver(this.ApiCore);
        return scPageTypeResolver.GetScWindowType(this.FrameJacket.DocumentJacket.UrlJacket);
    }
    SetFrameStyling(stateOfDTFrame) {
        this.Logger.FuncStart(this.SetFrameStyling.name);
        this.FrameJacket.SetFrameStyling(stateOfDTFrame.FrameStyling);
        this.Logger.FuncEnd(this.SetFrameStyling.name);
    }
    OnContentEditorProxyMutation(payload) {
        let dtFrameProxyMutationEvent_Payload = {
            ContentEditorProxyMutationPayload: payload,
            FrameId: this.FrameJacket.GetNativeIframeId()
        };
        this.DTFrameProxyMutationEvent_Subject.NotifyObserversAsync(dtFrameProxyMutationEvent_Payload);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DTAreaElemProxy.js
var DTAreaElemProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};












class DTAreaElemProxy_DTAreaElemProxy extends _BaseStateFullElemProxy_BaseStateFullElemProxy {
    constructor(apiCore, jqueryModalDialogsFrameProxy, containerElemJacket) {
        super(apiCore, containerElemJacket);
        this.ScProxyDisciminator = ScProxyDisciminator.DTAreaElemProxy;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[ScProxyDisciminator.DTAreaElemProxy];
        this.FramesBucket = [];
        this.IncomingSetStateList = [];
        this.JqueryModalDialogsFrameProxy = jqueryModalDialogsFrameProxy;
        this.ErrorHand.ThrowIfNullOrUndefined(DTAreaElemProxy_DTAreaElemProxy.name, [containerElemJacket, this.JqueryModalDialogsFrameProxy]);
    }
    InstantiateAsyncMembers() {
        return DTAreaElemProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([DTAreaElemProxy_DTAreaElemProxy.name, this.InstantiateAsyncMembers.name]);
            try {
                this.DTAreaProxyMutationEvent_Subject = new DTAreaProxyMutationEvent_Subject_DTAreaProxyMutationEvent_Subject(this.ApiCore);
                this.DTFrameProxyManyMutationEvent_Observer = new DTFrameProxyMutationEvent_Observer_DTFrameProxyMutationEvent_Observer(this.ApiCore, this.OnDTFProxyMutationEvent.bind(this));
                this.DocumentProxyMutationEvent_Observer = new ElementJacketMutationEvent_Observer_ElementJacketMutationEvent_Observer(this.ApiCore, this.CallBackOnElementMutationEvent.bind(this));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.InstantiateAsyncMembers.name, err);
            }
            this.Logger.FuncEnd([DTAreaElemProxy_DTAreaElemProxy.name, this.InstantiateAsyncMembers.name]);
        });
    }
    WireEvents() {
        this.Logger.FuncStart([DTAreaElemProxy_DTAreaElemProxy.name, this.WireEvents.name]);
        let watcherParams = {
            OwnerFriendly: DTAreaElemProxy_DTAreaElemProxy.name,
            Attributes: false,
            ChildList: true,
            Subtree: false,
            TagFilter: ['IFRAME']
        };
        this.ContainerElemJacket.AddWatcher(watcherParams)
            .then((elemJacketWatcher) => this.ElemJacketMutationEvent_Subject = elemJacketWatcher)
            .then(() => this.ElemJacketMutationEvent_Subject.RegisterObserver(this.DocumentProxyMutationEvent_Observer))
            .catch((err) => this.ErrorHand.HandleFatalError([DTAreaElemProxy_DTAreaElemProxy.name, this.WireEvents.name], err));
        this.Logger.FuncEnd([DTAreaElemProxy_DTAreaElemProxy.name, this.WireEvents.name]);
    }
    GetState() {
        return new Promise((resolve, reject) => DTAreaElemProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([DTAreaElemProxy_DTAreaElemProxy.name, this.GetState.name], this.FramesBucket.length.toString());
            let stateOfDTArea = new DefaultStateOfDTArea();
            let promiseAr = [];
            for (let idx = 0; idx < this.FramesBucket.length; idx++) {
                let dtframeProxy = this.FramesBucket[idx];
                promiseAr.push(dtframeProxy.GetState());
            }
            this.Logger.LogImportant('Count ' + promiseAr.length);
            yield Promise.all(promiseAr)
                .then((stateOfDTFrames) => {
                stateOfDTFrames.forEach((stateOfDTFrame, index) => {
                    stateOfDTArea.DTFrames.push(stateOfDTFrame);
                    if (stateOfDTFrame.ZIndex === 1) {
                        stateOfDTArea.ActiveFrameIndex = index;
                    }
                });
            })
                .then(() => resolve(stateOfDTArea))
                .catch((err) => reject(this.GetState.name + ' | ' + err));
            this.Logger.FuncEnd([DTAreaElemProxy_DTAreaElemProxy.name, this.GetState.name]);
        }));
    }
    SetState(StateOfDTArea) {
        return DTAreaElemProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.Logger.FuncStart(this.SetState.name, DTAreaElemProxy_DTAreaElemProxy.name);
                let dtFramesNeeded = {
                    DiscriminatorAr: []
                };
                if (StateOfDTArea) {
                    if (!StaticHelpers_StaticHelpers.IsNullOrUndefined([this.ContainerElemJacket])) {
                        this.AddToIncomingSetStateList(StateOfDTArea);
                        StateOfDTArea.DTFrames.forEach((dtFrame) => dtFramesNeeded.DiscriminatorAr.push(dtFrame.HostedFrame.Disciminator));
                    }
                    else {
                        reject(this.SetState.name + ' bad data');
                    }
                }
                else {
                    reject(this.SetState.name + '  No state provided');
                }
                resolve(dtFramesNeeded);
                this.Logger.FuncEnd(this.SetState.name, DTAreaElemProxy_DTAreaElemProxy.name);
            });
        });
    }
    TriggerInboundEventsAsync() {
    }
    CallBackOnElementMutationEvent(elementJacketMutationEvent_Payload) {
        return DTAreaElemProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([DTAreaElemProxy_DTAreaElemProxy.name, this.CallBackOnElementMutationEvent.name]);
            try {
                if (elementJacketMutationEvent_Payload.AddedGenericElemJacket && elementJacketMutationEvent_Payload.AddedGenericElemJacket.NodeTagName === SharedConst.Const.KeyWords.NodeTagName.IFrame) {
                    yield this.HandleAddedGenericElemJacket(elementJacketMutationEvent_Payload.AddedGenericElemJacket)
                        .then(() => this.HandleRemovedIframe(elementJacketMutationEvent_Payload.RemovedIFrameId))
                        .then(() => { })
                        .catch((err) => this.ErrorHand.HandleFatalError(this.CallBackOnElementMutationEvent.name, err));
                }
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.CallBackOnElementMutationEvent.name, err);
            }
            this.Logger.FuncEnd([DTAreaElemProxy_DTAreaElemProxy.name, this.CallBackOnElementMutationEvent.name]);
        });
    }
    HandleAddedGenericElemJacket(genericElemJacket) {
        return DTAreaElemProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([DTAreaElemProxy_DTAreaElemProxy.name, this.HandleAddedGenericElemJacket.name]);
            if (genericElemJacket) {
                if (genericElemJacket.NodeTagName === SharedConst.Const.KeyWords.NodeTagName.IFrame) {
                    this.HandleAddedFrameElemJacket(genericElemJacket);
                }
            }
            else {
                this.Logger.Log('Not a FrameJacket - no action');
            }
            this.Logger.FuncEnd([DTAreaElemProxy_DTAreaElemProxy.name, this.HandleAddedGenericElemJacket.name]);
        });
    }
    HandleAddedFrameElemJacket(genericElemJacket) {
        return DTAreaElemProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.HandleAddedFrameElemJacket.name);
            let dtFrameProxy = null;
            let frameElemJacket = null;
            yield FrameElemJacket_FrameElemJacket.FactoryFrameElemJackets(this.CommonCore, [genericElemJacket])
                .then((frameElemjackets) => frameElemJacket = frameElemjackets[0])
                .then(() => frameElemJacket.WaitForCompleteNABFrameElement(this.HandleAddedGenericElemJacket.name))
                .then(() => this.Logger.LogVal('URL', frameElemJacket.DocumentJacket.UrlJacket.GetOriginalURL()))
                .then(() => dtFrameProxy = new DTFrameProxy_DTFrameProxy(this.ApiCore, frameElemJacket, this.JqueryModalDialogsFrameProxy))
                .then(() => dtFrameProxy.InstantiateAsyncMembers())
                .then(() => dtFrameProxy.WireEvents())
                .then(() => {
                let currentWindowType = dtFrameProxy.GetScWindowType();
                let stateFullProxyFactory = new ScDocProxyResolver_ScDocProxyResolver(this.ApiCore);
                let recognizedWindowtypes = stateFullProxyFactory.StateFullScWindowTypes();
                if (recognizedWindowtypes.indexOf(currentWindowType) < 0) {
                    this.Logger.LogVal('scWindowType', ScWindowType[currentWindowType]);
                    this.ErrorHand.HandleFatalError(this.HandleAddedGenericElemJacket.name, 'unrecognized window type aaa: ' + ScWindowType[currentWindowType]);
                }
            })
                .then(() => this.ProcessInboundNativeIFrameProxy(frameElemJacket))
                .then(() => this.Logger.Log(this.HandleAddedGenericElemJacket.name + ' Complete'))
                .catch((err) => this.ErrorHand.HandleFatalError(this.HandleAddedGenericElemJacket.name, err));
            this.Logger.FuncEnd(this.HandleAddedFrameElemJacket.name);
        });
    }
    HandleRemovedIframe(needleIframeId) {
        return DTAreaElemProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([DTAreaElemProxy_DTAreaElemProxy.name, this.HandleRemovedIframe.name], 'HandleRemovedIframe: ' + needleIframeId);
            try {
                this.Logger.LogVal('Bucket size before', this.FramesBucket.length);
                if (needleIframeId && needleIframeId.length > 0) {
                    let foundMatch = -1;
                    this.FramesBucket.forEach((dtFrameProxy, index) => {
                        if (dtFrameProxy.GetNativeFrameId() === needleIframeId) {
                            foundMatch = index;
                        }
                    });
                    if (foundMatch > -1) {
                        this.Logger.Log('match found');
                        this.FramesBucket.splice(foundMatch, 1);
                    }
                    else {
                        this.ErrorHand.WarningAndContinue(this.HandleRemovedIframe.name, 'No match found for frame to be removed: ' + needleIframeId);
                    }
                }
                else {
                    this.Logger.Log("No needle id, no action");
                }
                this.Logger.LogVal('Bucket size after', this.FramesBucket.length);
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.HandleRemovedIframe.name, err);
            }
            this.Logger.FuncEnd([DTAreaElemProxy_DTAreaElemProxy.name, this.HandleRemovedIframe.name]);
        });
    }
    ProcessInboundNativeIFrameProxy(nativeIframeProxy) {
        return DTAreaElemProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.ProcessInboundNativeIFrameProxy.name, nativeIframeProxy.GetNativeIframeId());
            try {
                let dtFrameProxy = null;
                yield nativeIframeProxy.WaitForCompleteNABFrameElement(this.ProcessInboundNativeIFrameProxy.name)
                    .then(() => this.Logger.LogVal('url', nativeIframeProxy.GetUrlJacket().GetOriginalURL()))
                    .then(() => dtFrameProxy = new DTFrameProxy_DTFrameProxy(this.ApiCore, nativeIframeProxy, this.JqueryModalDialogsFrameProxy))
                    .then(() => this.newFrameStep1_Instantiate(dtFrameProxy))
                    .then(() => this.NewFrameStep2_SetStateOfDTFrameIfQueued(dtFrameProxy))
                    .then(() => this.NewFrameStep3_WireEvents(dtFrameProxy))
                    .then(() => this.NewFrameStep4_NotifyObserversOfAreaProxyMutation(dtFrameProxy))
                    .then(() => this.NewFrameStep5_AddToDTFrameProxyBucket(dtFrameProxy))
                    .then(() => this.NewFrameStep6_TriggerEvents(dtFrameProxy))
                    .catch((err) => this.ErrorHand.HandleFatalError(this.ProcessInboundNativeIFrameProxy.name, err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.ProcessInboundNativeIFrameProxy.name, err);
            }
            this.Logger.FuncEnd(this.ProcessInboundNativeIFrameProxy.name, nativeIframeProxy.GetNativeIframeId());
        });
    }
    newFrameStep1_Instantiate(dtFrameProxy) {
        return DTAreaElemProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.newFrameStep1_Instantiate.name);
            try {
                yield dtFrameProxy.InstantiateAsyncMembers()
                    .then(() => { })
                    .catch((err) => this.ErrorHand.HandleFatalError(this.newFrameStep1_Instantiate.name, err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.newFrameStep1_Instantiate.name, err);
            }
            this.Logger.FuncEnd(this.newFrameStep1_Instantiate.name);
        });
    }
    NewFrameStep2_SetStateOfDTFrameIfQueued(dtFrameProxy) {
        return DTAreaElemProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.NewFrameStep2_SetStateOfDTFrameIfQueued.name);
            this.Logger.LogVal('looking for discriminator: ', ScProxyDisciminator[dtFrameProxy.HostedStateFullProxy.ScProxyDisciminator]);
            let foundMatchingState = null;
            let foundMatchingIndex = -1;
            this.IncomingSetStateList.forEach((stateOfDtFrame, index) => {
                if (stateOfDtFrame.HostedFrame.Disciminator === dtFrameProxy.HostedStateFullProxy.ScProxyDisciminator) {
                    foundMatchingState = stateOfDtFrame;
                    foundMatchingIndex = index;
                }
            });
            if (foundMatchingIndex > -1) {
                this.IncomingSetStateList.splice(foundMatchingIndex, 1);
                if (foundMatchingState) {
                    yield dtFrameProxy.SetState(foundMatchingState);
                }
                else {
                    this.Logger.Log('no queued states');
                }
            }
            else {
            }
            this.Logger.FuncEnd(this.NewFrameStep2_SetStateOfDTFrameIfQueued.name);
        });
    }
    NewFrameStep3_WireEvents(dtFrameProxy) {
        this.Logger.FuncStart(this.NewFrameStep3_WireEvents.name);
        dtFrameProxy.DTFrameProxyMutationEvent_Subject.RegisterObserver(this.DTFrameProxyManyMutationEvent_Observer);
        dtFrameProxy.WireEvents();
        this.Logger.FuncEnd(this.NewFrameStep3_WireEvents.name);
    }
    NewFrameStep4_NotifyObserversOfAreaProxyMutation(AddedDTFrameProxy) {
        this.Logger.FuncStart(this.NewFrameStep4_NotifyObserversOfAreaProxyMutation.name);
        let payload = {
            AddedDTFrameProxies: [AddedDTFrameProxy],
            RemovedDTFrameProxies: [],
            DTFrameProxyMutationEvent_Payload: null,
        };
        this.DTAreaProxyMutationEvent_Subject.NotifyObserversAsync(payload);
        this.Logger.FuncEnd(this.NewFrameStep4_NotifyObserversOfAreaProxyMutation.name);
    }
    NewFrameStep5_AddToDTFrameProxyBucket(dtframeProxy) {
        this.Logger.FuncStart(this.NewFrameStep5_AddToDTFrameProxyBucket.name);
        let toReturn = false;
        if (!this.BucketHasSameItem(dtframeProxy)) {
            this.FramesBucket.push(dtframeProxy);
            toReturn = true;
        }
        this.Logger.FuncEnd(this.NewFrameStep5_AddToDTFrameProxyBucket.name);
        return (toReturn);
    }
    NewFrameStep6_TriggerEvents(dtframeProxy) {
        this.Logger.FuncStart(this.NewFrameStep6_TriggerEvents.name);
        dtframeProxy.TriggerEventsForInbound();
        this.Logger.FuncEnd(this.NewFrameStep6_TriggerEvents.name);
    }
    OnDTFProxyMutationEvent(dTFrameProxyMutationEvent_Payload) {
        this.Logger.FuncStart(this.OnDTFProxyMutationEvent.name);
        let dTAreaProxyMutationEvent = {
            DTFrameProxyMutationEvent_Payload: dTFrameProxyMutationEvent_Payload,
            AddedDTFrameProxies: [],
            RemovedDTFrameProxies: []
        };
        this.DTAreaProxyMutationEvent_Subject.NotifyObserversAsync(dTAreaProxyMutationEvent);
        this.Logger.FuncEnd(this.OnDTFProxyMutationEvent.name);
    }
    AddToIncomingSetStateList(stateOfFrame) {
        this.Logger.FuncStart(this.AddToIncomingSetStateList.name, stateOfFrame.DTFrames.length);
        stateOfFrame.DTFrames.forEach((stateOfDTFrame) => this.IncomingSetStateList.push(stateOfDTFrame));
        this.Logger.FuncEnd(this.AddToIncomingSetStateList.name);
    }
    PublishTopFrame() {
        return DTAreaElemProxy_awaiter(this, void 0, void 0, function* () {
            let dtFrameProxy = this.GetTopFrame();
            if (dtFrameProxy) {
            }
        });
    }
    GetTopFrame() {
        let toReturn = null;
        let maxZFound = -1;
        this.FramesBucket.forEach((dtframeProxy) => {
            let cadidateVal = dtframeProxy.GetZindexAsInt();
            if (cadidateVal > maxZFound) {
                maxZFound = cadidateVal;
                toReturn = dtframeProxy;
            }
        });
        this.Logger.LogVal(this.GetTopFrame.name, toReturn.GetZindexAsInt().toString());
        return toReturn;
    }
    BucketHasSameItem(dtFrameBucketItem) {
        let toReturn = true;
        if (this.FramesBucket.indexOf(dtFrameBucketItem) < 0) {
            toReturn = false;
        }
        else {
            toReturn = true;
            this.ErrorHand.WarningAndContinue(this.BucketHasSameItem.name, 'Proxy already exists in bucket');
        }
        return toReturn;
    }
    TriggerCERibbonCommand(ribbonCommand) {
        let topFrameProxy = this.GetTopFrame();
        if (topFrameProxy.HostedStateFullProxy.ScProxyDisciminator === ScProxyDisciminator.ContentEditor) {
            let contentEditorProxy = topFrameProxy.HostedStateFullProxy;
            if (contentEditorProxy) {
                contentEditorProxy.TriggerCERibbonCommand(ribbonCommand);
            }
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/DTAreaProxyMutationEvent/DTAreaProxyMutationEvent_Observer.js


class DTAreaProxyMutationEvent_Observer_DTAreaProxyMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(apiCore, callback) {
        super(apiCore, DTAreaProxyMutationEvent_Observer_DTAreaProxyMutationEvent_Observer.name, callback);
        this.TypeDiscriminator = TypeDiscriminator.DTAreaProxyMutationEvent_Observer;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DesktopProxy.js
var DesktopProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};











class DesktopProxy_DesktopProxy extends _BaseStateFullDocProxy_BaseStateFullDocProxy {
    constructor(apiCore, documentJacket) {
        super(apiCore, documentJacket);
        this.ScProxyDisciminator = ScProxyDisciminator.Desktop;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[ScProxyDisciminator.Desktop];
        this.JqueryModalDialogsFrameProxy = null;
        this.HostedElemProxies = [];
        this.Logger.CTORStart(DesktopProxy_DesktopProxy.name);
        if (documentJacket) {
        }
        else {
            this.ErrorHand.HandleFatalError(DesktopProxy_DesktopProxy.name, 'No associated doc');
        }
        this.Instantiate();
        this.Logger.CTOREnd(DesktopProxy_DesktopProxy.name);
    }
    Instantiate() {
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.ApiCore);
        this.DTStartBarProxy = new DTStartBarProxy_DTStartBarProxy(this.ApiCore, this.DocumentJacket);
        this.DTAreaProxyMutationEvent_Observer = new DTAreaProxyMutationEvent_Observer_DTAreaProxyMutationEvent_Observer(this.ApiCore, this.OnAreaProxyMutationEvent.bind(this));
    }
    InstantiateAsyncMembers() {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart(this.InstantiateAsyncMembers.name, DesktopProxy_DesktopProxy.name);
                this.DTStartBarProxy.Instantiate_DTStartBarProxy();
                yield this.GetJqueryModalsFrameProxy()
                    .then((jqueryModalDialogsFrameProxy) => this.JqueryModalDialogsFrameProxy = jqueryModalDialogsFrameProxy)
                    .then(() => this.DocumentJacket.WaitForGenericElemJacket('.DesktopArea'))
                    .then((genericElemJacket) => this.DTAreaProxy = new DTAreaElemProxy_DTAreaElemProxy(this.ApiCore, this.JqueryModalDialogsFrameProxy, genericElemJacket))
                    .then(() => this.DTAreaProxy.InstantiateAsyncMembers())
                    .catch((err) => this.ErrorHand.HandleFatalError([DesktopProxy_DesktopProxy.name, this.InstantiateAsyncMembers.name], err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.InstantiateAsyncMembers.name, err);
            }
            this.Logger.FuncEnd(this.InstantiateAsyncMembers.name, DesktopProxy_DesktopProxy.name);
        });
    }
    WireEvents() {
        this.Logger.FuncStart(this.WireEvents.name, DesktopProxy_DesktopProxy.name);
        this.DTAreaProxy.WireEvents();
        this.DTStartBarProxy.WireEvent();
        this.DTAreaProxy.DTAreaProxyMutationEvent_Subject.RegisterObserver(this.DTAreaProxyMutationEvent_Observer);
        this.Logger.FuncEnd(this.WireEvents.name, DesktopProxy_DesktopProxy.name);
    }
    GetState() {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DesktopProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetState.name, DesktopProxy_DesktopProxy.name);
                let toReturnDesktopState = new DefaultStateOfDesktop_DefaultStateOfDesktop();
                yield this.DTAreaProxy.GetState()
                    .then((stateOfDTArea) => toReturnDesktopState.DTArea = stateOfDTArea)
                    .then(() => resolve(toReturnDesktopState))
                    .catch((err) => reject(this.GetState.name + ' | ' + err));
                this.Logger.FuncEnd(this.GetState.name, DesktopProxy_DesktopProxy.name);
            }));
        });
    }
    SetState(stateOfDesktop) {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.SetState.name, DesktopProxy_DesktopProxy.name);
            this.TaskMonitor.AsyncTaskStarted(this.SetState.name);
            try {
                let promAr = [];
                yield this.DTAreaProxy.SetState(stateOfDesktop.DTArea)
                    .then((dtFramesNeeded) => {
                    let asyncLock = new AsyncLock_AsyncLock(this.ApiCore);
                    dtFramesNeeded.DiscriminatorAr.forEach((disciminator) => {
                        if (disciminator !== ScProxyDisciminator.FallBack) {
                            let proxyResolver = new ScDocProxyResolver_ScDocProxyResolver(this.ApiCore);
                            let windowType = proxyResolver.MapProxyDiscriminatorToScWindowType(disciminator);
                            if (windowType !== ScWindowType.Unknown) {
                                promAr.push(this.DTStartBarProxy.TriggerRedButtonAsync(windowType, asyncLock));
                            }
                        }
                        else {
                        }
                    });
                })
                    .then(() => Promise.all(promAr))
                    .catch((err) => this.ErrorHand.HandleFatalError(this.SetState.name, err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.SetState.name + ' ' + DesktopProxy_DesktopProxy.name, err);
            }
            this.TaskMonitor.AsyncTaskCompleted(this.SetState.name);
            this.Logger.FuncEnd(this.SetState.name, DesktopProxy_DesktopProxy.name);
        });
    }
    TriggerInboundEventsAsync() {
    }
    AddContentEditorFrameAsync() {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.AddContentEditorFrameAsync.name);
            try {
                let asyncLock = new AsyncLock_AsyncLock(this.ApiCore);
                yield this.DTStartBarProxy.TriggerRedButtonAsync(ScWindowType.ContentEditor, asyncLock)
                    .catch((err) => this.ErrorHand.HandleFatalError(this.AddContentEditorFrameAsync.name, err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.AddContentEditorFrameAsync.name, err);
            }
            this.Logger.FuncEnd(this.AddContentEditorFrameAsync.name);
        });
    }
    GetAssociatedDoc() {
        return this.DocumentJacket;
    }
    GetJqueryModalsFrameProxy() {
        return new Promise((resolve, reject) => {
            this.Logger.FuncStart([DesktopProxy_DesktopProxy.name, this.GetJqueryModalsFrameProxy.name]);
            let jqueryIframeelem = null;
            this.DocumentJacket.GetHostedFirstMatchingFrameElemJacket("[id=jqueryModalDialogsFrame]")
                .then((frameElemJacket) => jqueryIframeelem = frameElemJacket)
                .then(() => GenericStateLessFrameProxy_GenericStateLessFrameProxy.StateLessFrameProxyFactory(this.ApiCore, jqueryIframeelem))
                .then((stateLessFrameProxy) => resolve(stateLessFrameProxy))
                .catch((err) => reject(this.ErrorHand.FormatRejectMessage([DesktopProxy_DesktopProxy.name, this.GetJqueryModalsFrameProxy.name], err)));
            this.Logger.FuncEnd([DesktopProxy_DesktopProxy.name, this.GetJqueryModalsFrameProxy.name]);
        });
    }
    OnAreaProxyMutationEvent(dTAreaProxyMutationEvent_Payload) {
        this.Logger.FuncStart(this.OnAreaProxyMutationEvent.name);
        if (this.RunTimeOptions.EnableDesktopStartBarButtonRename) {
            this.DTStartBarProxy.OnTreeMutationEvent_DesktopStartBarProxy(dTAreaProxyMutationEvent_Payload);
        }
        this.Logger.FuncEnd(this.OnAreaProxyMutationEvent.name);
    }
    TriggerCERibbonCommand(ribbonCommand) {
        this.Logger.FuncStart([DesktopProxy_DesktopProxy.name, this.TriggerCERibbonCommand.name]);
        this.DTAreaProxy.TriggerCERibbonCommand(ribbonCommand);
        this.Logger.FuncEnd([DesktopProxy_DesktopProxy.name, this.TriggerCERibbonCommand.name]);
    }
    PublishItem() {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            yield this.DTAreaProxy.PublishTopFrame();
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/LaunchPadProxy.js
var LaunchPadProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class LaunchPadProxy_LaunchPadProxy extends _BaseStateFullDocProxy_BaseStateFullDocProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = ScProxyDisciminator.LaunchPad;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[ScProxyDisciminator.LaunchPad];
        this.HostedElemProxies = [];
    }
    GetState() {
        return LaunchPadProxy_awaiter(this, void 0, void 0, function* () {
        });
    }
    SetState(state) {
        return LaunchPadProxy_awaiter(this, void 0, void 0, function* () {
        });
    }
    WireEvents() {
    }
    InstantiateAsyncMembers() {
        return LaunchPadProxy_awaiter(this, void 0, void 0, function* () {
        });
    }
    TriggerInboundEventsAsync() {
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/MarketingControlPanelProxy.js
var MarketingControlPanelProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class MarketingControlPanelProxy_MarketingControlPanelDocProxy extends _ContentTreeBasedProxy_ContentTreeBasedDocProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = ScProxyDisciminator.MarketingControlPanel;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[ScProxyDisciminator.MarketingControlPanel];
        this.TreeRootSelector = ContentConst.Const.Selector.SC.ContentTree.BuiltIn.MarketingControlPanelRoodNode;
    }
    InstantiateAsyncMembers() {
        return MarketingControlPanelProxy_awaiter(this, void 0, void 0, function* () {
            return this.__baseInstantiateAsyncMembers();
        });
    }
    WireEvents() {
        this.__baseWireEvents();
    }
    TriggerInboundEventsAsync() {
        return this.__BaseTriggerInboundEventsAsync();
    }
    GetState() {
        return this.__baseGetState();
    }
    SetState(dataToRestore) {
        return MarketingControlPanelProxy_awaiter(this, void 0, void 0, function* () {
            return this.__baseSetState(dataToRestore);
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/MediaLibraryProxy.js
var MediaLibraryProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class MediaLibraryProxy_MediaLibraryProxy extends _ContentTreeBasedProxy_ContentTreeBasedDocProxy {
    constructor() {
        super(...arguments);
        this.TreeRootSelector = ContentConst.Const.Selector.SC.ContentTree.BuiltIn.MediaLibraryAnchorRootNode;
        this.ScProxyDisciminator = ScProxyDisciminator.MediaLibrary;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[ScProxyDisciminator.MediaLibrary];
    }
    InstantiateAsyncMembers() {
        return MediaLibraryProxy_awaiter(this, void 0, void 0, function* () {
            return this.__baseInstantiateAsyncMembers();
        });
    }
    WireEvents() {
        this.__baseWireEvents();
    }
    TriggerInboundEventsAsync() {
        this.__BaseTriggerInboundEventsAsync();
    }
    GetState() {
        return this.__baseGetState();
    }
    SetState(dataToRestore) {
        return MediaLibraryProxy_awaiter(this, void 0, void 0, function* () {
            return this.__baseSetState(dataToRestore);
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfPackageDesigner.js

class DefaultStateOfPackageDesigner_DefaultStateOfPackageDesigner {
    constructor() {
        this.DisciminatorFriendly = ScProxyDisciminator[ScProxyDisciminator.PackageDesigner];
        this.Disciminator = ScProxyDisciminator.PackageDesigner;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateLessDocProxies/StateLessDocProxies/_BaseStateLessScDocProxy.js
var _BaseStateLessScDocProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class _BaseStateLessScDocProxy_BaseStateLessScDocProxy extends _BaseScDocProxy_BaseScDocProxy {
    constructor(apiCore, documentJacket) {
        super(apiCore, documentJacket);
    }
    OnFocus() {
        return _BaseStateLessScDocProxy_awaiter(this, void 0, void 0, function* () {
        });
    }
    _BaseInstantiateAsyncMembers() {
    }
    InstantiateAsyncMembers() {
        return _BaseStateLessScDocProxy_awaiter(this, void 0, void 0, function* () {
            return this._BaseInstantiateAsyncMembers();
        });
    }
    TriggerInboundEventsAsync() {
    }
    WireEvents() {
        return _BaseStateLessScDocProxy_awaiter(this, void 0, void 0, function* () {
        });
    }
    _BaseWireEvents() {
        return _BaseStateLessScDocProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([_BaseStateLessScDocProxy_BaseStateLessScDocProxy.name, this.WireEvents.name]);
            this.Logger.FuncEnd([_BaseStateLessScDocProxy_BaseStateLessScDocProxy.name, this.WireEvents.name]);
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateLessDocProxies/StateLessDocProxies/InstallerDesignerProxy.js
var InstallerDesignerProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class InstallerDesignerProxy_InstallerDesignerProxy extends _BaseStateLessScDocProxy_BaseStateLessScDocProxy {
    constructor(apiCore, hostDocJacket, jqueryModalDialogsFrameProxy) {
        super(apiCore, hostDocJacket);
        this.ScProxyDisciminator = ScProxyDisciminator.InstallerDesignerDocProxy;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[ScProxyDisciminator.InstallerDesignerDocProxy];
        this.Logger.CTORStart(InstallerDesignerProxy_InstallerDesignerProxy.name);
        this.JqueryModalDialogsFrameProxy = jqueryModalDialogsFrameProxy;
        this.Logger.CTOREnd(InstallerDesignerProxy_InstallerDesignerProxy.name);
    }
    InstantiateAsyncMembers() {
        return InstallerDesignerProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([InstallerDesignerProxy_InstallerDesignerProxy.name, this.InstantiateAsyncMembers.name]);
            this.Logger.FuncEnd([InstallerDesignerProxy_InstallerDesignerProxy.name, this.InstantiateAsyncMembers.name]);
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/FrameProxies/_BaseStateLessElemProxy.js

class _BaseStateLessElemProxy_BaseStateLessElemProxy extends _APICoreBase_APICoreBase {
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateLessDocProxies/StateLessElemProxies/PackageDesignerInstallerRibbonToolbarProxy.js
var PackageDesignerInstallerRibbonToolbarProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class PackageDesignerInstallerRibbonToolbarProxy_PackageDesignerInstallerRibbonToolbarElemProxy extends _BaseStateLessElemProxy_BaseStateLessElemProxy {
    constructor(apiCore, elementDivJacket, jqueryModalDialogsFrameProxy) {
        super(apiCore);
        this.ElementDivJacket = elementDivJacket;
        this.JqueryModalDialogsFrameProxy = jqueryModalDialogsFrameProxy;
        this.ErrorHand.ThrowIfNullOrUndefined(PackageDesignerInstallerRibbonToolbarProxy_PackageDesignerInstallerRibbonToolbarElemProxy.name, [jqueryModalDialogsFrameProxy]);
    }
    AttachClickEventToGenZip() {
        return PackageDesignerInstallerRibbonToolbarProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([PackageDesignerInstallerRibbonToolbarProxy_PackageDesignerInstallerRibbonToolbarElemProxy.name, this.AttachClickEventToGenZip.name]);
            this.ElementDivJacket.WaitForElement(ContentConst.Const.Selector.SC.InstallerDesigner.GenerateZip)
                .then((genericElemJacket) => this.GenerateZipButton = genericElemJacket)
                .then(() => this.GenerateZipButton.NativeElement.addEventListener('click', ((event) => this.CallBackOnGenerateZipButtonClicked(event))))
                .catch((err) => this.ErrorHand.HandleFatalError([PackageDesignerInstallerRibbonToolbarProxy_PackageDesignerInstallerRibbonToolbarElemProxy.name, this.AttachClickEventToGenZip.name], err));
            this.Logger.FuncEnd([PackageDesignerInstallerRibbonToolbarProxy_PackageDesignerInstallerRibbonToolbarElemProxy.name, this.AttachClickEventToGenZip.name]);
        });
    }
    InstantiateAsyncMembers() {
        return PackageDesignerInstallerRibbonToolbarProxy_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart([PackageDesignerInstallerRibbonToolbarProxy_PackageDesignerInstallerRibbonToolbarElemProxy.name, this.InstantiateAsyncMembers.name]);
                yield this.AttachClickEventToGenZip()
                    .catch((err) => this.ErrorHand.HandleFatalError([PackageDesignerInstallerRibbonToolbarProxy_PackageDesignerInstallerRibbonToolbarElemProxy.name, this.InstantiateAsyncMembers.name], err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([PackageDesignerInstallerRibbonToolbarProxy_PackageDesignerInstallerRibbonToolbarElemProxy.name, this.InstantiateAsyncMembers.name], err);
            }
            this.Logger.FuncEnd([PackageDesignerInstallerRibbonToolbarProxy_PackageDesignerInstallerRibbonToolbarElemProxy.name, this.InstantiateAsyncMembers.name]);
        });
    }
    CallBackOnGenerateZipButtonClicked(event) {
    }
    OpenFile(fileName) {
        return PackageDesignerInstallerRibbonToolbarProxy_awaiter(this, void 0, void 0, function* () {
            yield this.ElementDivJacket.WaitForElement(ContentConst.Const.Selector.SC.PackageDesigner.Ribbon.Open, this.OpenFile.name)
                .then((elemJacket) => elemJacket.NativeElement.click())
                .catch((err) => this.ErrorHand.HandleFatalError([PackageDesignerInstallerRibbonToolbarProxy_PackageDesignerInstallerRibbonToolbarElemProxy.name, this.OpenFile.name], err));
            if (this.JqueryModalDialogsFrameProxy) {
                this.JqueryModalDialogsFrameProxy.PackageDesignerOpenFile(fileName);
            }
            else {
                this.ErrorHand.HandleFatalError(this.OpenFile.name, 'no jquery proxy');
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/PackageDesignerDocProxy.js
var PackageDesignerDocProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class PackageDesignerDocProxy_PackageDesignerDocProxy extends _BaseStateFullDocProxy_BaseStateFullDocProxy {
    constructor(apiCore, documentJacket, friendly, jqueryModalDialogsFrameProxy) {
        super(apiCore, documentJacket);
        this.ScProxyDisciminator = ScProxyDisciminator.PackageDesigner;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[ScProxyDisciminator.PackageDesigner];
        this.packagedesignerInstallerRibbonToolbarElem = null;
        this.HostedElemProxies = [];
        this.Logger.CTORStart(PackageDesignerDocProxy_PackageDesignerDocProxy.name);
        this.Friendly = friendly;
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.ApiCore);
        this.JqueryModalDialogsFrameProxy = jqueryModalDialogsFrameProxy;
        this.ErrorHand.ThrowIfNullOrUndefined([PackageDesignerDocProxy_PackageDesignerDocProxy.name], [documentJacket, jqueryModalDialogsFrameProxy]);
        this.Logger.CTOREnd(PackageDesignerDocProxy_PackageDesignerDocProxy.name);
    }
    InstantiateAsyncMembers() {
        return PackageDesignerDocProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([PackageDesignerDocProxy_PackageDesignerDocProxy.name, this.InstantiateAsyncMembers.name], this.Friendly);
            yield this.HarvestElements()
                .then(() => this.HarvestRibbonToolbar())
                .catch((err) => this.ErrorHand.HandleFatalError([PackageDesignerDocProxy_PackageDesignerDocProxy.name, this.InstantiateAsyncMembers.name], err));
            try {
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.InstantiateAsyncMembers.name, err);
            }
            this.Logger.FuncEnd([PackageDesignerDocProxy_PackageDesignerDocProxy.name, this.InstantiateAsyncMembers.name], this.Friendly);
        });
    }
    HarvestElements() {
        return PackageDesignerDocProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([PackageDesignerDocProxy_PackageDesignerDocProxy.name, this.HarvestElements.name], this.Friendly);
            try {
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([PackageDesignerDocProxy_PackageDesignerDocProxy.name, this.WireEvents.name], err);
            }
            this.Logger.FuncEnd([PackageDesignerDocProxy_PackageDesignerDocProxy.name, this.HarvestElements.name], this.Friendly);
        });
    }
    WireEvents() {
        return PackageDesignerDocProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WireEvents.name, this.Friendly);
            yield this.EnableWatcherForFrames()
                .catch((err) => this.ErrorHand.HandleFatalError([PackageDesignerDocProxy_PackageDesignerDocProxy.name, this.WireEvents.name], err));
            this.Logger.FuncEnd(this.WireEvents.name, this.Friendly);
        });
    }
    GetState() {
        return PackageDesignerDocProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.Logger.FuncStart(this.GetState.name, PackageDesignerDocProxy_PackageDesignerDocProxy.name);
                let stateOfPackageDesigner = new DefaultStateOfPackageDesigner_DefaultStateOfPackageDesigner();
                stateOfPackageDesigner.StatusText = this.GetLoadedPackageFileName();
                resolve(stateOfPackageDesigner);
                this.Logger.FuncEnd(this.GetState.name, PackageDesignerDocProxy_PackageDesignerDocProxy.name);
            });
        });
    }
    HarvestRibbonToolbar() {
        return PackageDesignerDocProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([InstallerDesignerProxy_InstallerDesignerProxy.name, this.HarvestRibbonToolbar.name]);
            yield this.DocumentJacket.WaitForGenericElemJacket(ContentConst.Const.Selector.SC.PackageDesigner.Ribbon.InstallerRibbon_Toolbar, PromiseFailAction.RejectThrow)
                .then((elementDivJacket) => this.packagedesignerInstallerRibbonToolbarElem = new PackageDesignerInstallerRibbonToolbarProxy_PackageDesignerInstallerRibbonToolbarElemProxy(this.ApiCore, elementDivJacket, this.JqueryModalDialogsFrameProxy))
                .then(() => this.packagedesignerInstallerRibbonToolbarElem.InstantiateAsyncMembers())
                .catch((err) => this.ErrorHand.HandleFatalError([InstallerDesignerProxy_InstallerDesignerProxy.name, this.HarvestRibbonToolbar.name], err));
            this.Logger.FuncEnd([InstallerDesignerProxy_InstallerDesignerProxy.name, this.HarvestRibbonToolbar.name]);
        });
    }
    OpenFile(fileName) {
        return PackageDesignerDocProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([InstallerDesignerProxy_InstallerDesignerProxy.name, this.OpenFile.name]);
            try {
                this.packagedesignerInstallerRibbonToolbarElem = null;
                if (this.packagedesignerInstallerRibbonToolbarElem) {
                    yield this.packagedesignerInstallerRibbonToolbarElem.OpenFile(fileName)
                        .catch((err) => this.ErrorHand.HandleFatalError(this.OpenFile.name, err));
                }
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([InstallerDesignerProxy_InstallerDesignerProxy.name, this.OpenFile.name], err);
            }
            this.Logger.FuncEnd([InstallerDesignerProxy_InstallerDesignerProxy.name, this.OpenFile.name]);
        });
    }
    SetState(stateOfPackageDesigner) {
        return PackageDesignerDocProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => PackageDesignerDocProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.SetState.name, PackageDesignerDocProxy_PackageDesignerDocProxy.name);
                if (stateOfPackageDesigner) {
                    if (stateOfPackageDesigner.StatusText.length > 0) {
                        yield this.OpenFile(stateOfPackageDesigner.StatusText)
                            .then(() => resolve())
                            .catch((err) => reject(this.ErrorHand.FormatRejectMessage([PackageDesignerDocProxy_PackageDesignerDocProxy.name, this.SetState.name], err)));
                    }
                }
                this.Logger.FuncEnd(this.SetState.name, PackageDesignerDocProxy_PackageDesignerDocProxy.name);
            }));
        });
    }
    TriggerInboundEventsAsync() {
        this.Logger.Log('todo ' + PackageDesignerDocProxy_PackageDesignerDocProxy.name);
    }
    GetLoadedPackageFileName() {
        let toReturn = '';
        let appFrame = this.DocumentJacket.GetElementById('AppFrame').NativeElement;
        if (appFrame) {
            let contentDoc = appFrame.contentDocument;
            if (contentDoc) {
                let target = contentDoc.getElementById(ContentConst.Const.ElemId.SC.PackageDesigner.StatusText);
                if (target) {
                    toReturn = target.innerText;
                }
            }
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateLessDocProxies/StateLessDocProxies/InstallerBuildPackageDocProxy.js
var InstallerBuildPackageDocProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class InstallerBuildPackageDocProxy_InstallerBuildPackageDocProxy extends _BaseStateLessScDocProxy_BaseStateLessScDocProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = ScProxyDisciminator.InstallerBuildPackageDocProxy;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[ScProxyDisciminator.InstallerBuildPackageDocProxy];
    }
    OnFocus() {
        return InstallerBuildPackageDocProxy_awaiter(this, void 0, void 0, function* () {
            let parentElem = null;
            yield this.DocumentJacket.WaitForGenericElemJacket(ContentConst.Const.Selector.SC.Frames.ScContentIframeId0.PackageFile)
                .then((genericElemJacket) => parentElem = genericElemJacket.NativeElement.parentElement)
                .then(() => {
                this.AddPackageNameCandidateButtons(parentElem);
            })
                .catch((err) => this.ErrorHand.HandleFatalError([InstallerBuildPackageDocProxy_InstallerBuildPackageDocProxy.name, this.OnFocus.name], err));
        });
    }
    AddPackageNameCandidateButtons(parentElem) {
        for (var idx = 0; idx < 3; idx++) {
            let candidateButton = this.BuildOneCandidatePackageNameButton('candidate-package-name-' + idx, 'Candidate Name ' + idx);
            parentElem.appendChild(candidateButton);
        }
    }
    BuildOneCandidatePackageNameButton(buttonId, candidatePackageName) {
        let buttonToReturn = document.createElement('input');
        buttonToReturn.type = 'button';
        buttonToReturn.classList.add('candidate-package-name');
        buttonToReturn.id = buttonId;
        buttonToReturn.setAttribute('data-candidate-package-name', candidatePackageName);
        buttonToReturn.value = candidatePackageName;
        buttonToReturn.addEventListener('click', ((event) => this.PopulateCandidatePackageName(event)));
        let wrapperDiv = document.createElement('div');
        wrapperDiv.appendChild(buttonToReturn);
        return wrapperDiv;
    }
    PopulateCandidatePackageName(event) {
        this.Logger.LogImportant('Populate! ');
    }
    OpenFile(fileName) {
        return InstallerBuildPackageDocProxy_awaiter(this, void 0, void 0, function* () {
            try {
                let FileNameInput = null;
                let OpenOkButton = null;
                let CancelButton = null;
                let trimmedFileName = fileName.trim();
                yield this.DocumentJacket.WaitForGenericElemJacket(ContentConst.Const.Selector.SC.Frames.ScContentIframeId0.Ok)
                    .then((genericElemJacket) => OpenOkButton = genericElemJacket)
                    .then(() => this.DocumentJacket.WaitForGenericElemJacket(ContentConst.Const.Selector.SC.Frames.ScContentIframeId0.Cancel))
                    .then((genericElemJacket) => CancelButton = genericElemJacket)
                    .then(() => this.DocumentJacket.WaitForGenericElemJacket(ContentConst.Const.Selector.SC.Frames.ScContentIframeId0.PackageFile))
                    .then((genericElemJacket) => FileNameInput = genericElemJacket)
                    .then(() => {
                    if (trimmedFileName.length > 0) {
                        FileNameInput.NativeElement.value = fileName;
                        OpenOkButton.NativeElement.click();
                    }
                    else {
                        CancelButton.NativeElement.click();
                    }
                })
                    .catch((err) => this.ErrorHand.HandleFatalError([InstallerBuildPackageDocProxy_InstallerBuildPackageDocProxy.name, this.OpenFile.name], err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([InstallerBuildPackageDocProxy_InstallerBuildPackageDocProxy.name, this.OpenFile.name], err);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/TemplateManagerProxy.js
var TemplateManagerProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class TemplateManagerProxy_TemplateManagerProxy extends _ContentTreeBasedProxy_ContentTreeBasedDocProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = ScProxyDisciminator.TemplateManager;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[ScProxyDisciminator.TemplateManager];
        this.TreeRootSelector = ContentConst.Const.Selector.SC.ContentTree.BuiltIn.TemplatesAnchorRootNode;
    }
    InstantiateAsyncMembers() {
        return TemplateManagerProxy_awaiter(this, void 0, void 0, function* () {
            return this.__baseInstantiateAsyncMembers();
        });
    }
    WireEvents() {
        this.__baseWireEvents();
    }
    TriggerInboundEventsAsync() {
        return this.__BaseTriggerInboundEventsAsync();
    }
    GetState() {
        return this.__baseGetState();
    }
    SetState(dataToRestore) {
        return TemplateManagerProxy_awaiter(this, void 0, void 0, function* () {
            return this.__baseSetState(dataToRestore);
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateLessDocProxies/StateLessDocProxies/JqueryModalDialogsDocProxy.js
var JqueryModalDialogsDocProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class JqueryModalDialogsDocProxy_JqueryModalDialogsDocProxy extends _BaseStateLessScDocProxy_BaseStateLessScDocProxy {
    constructor(apiCore, documentJacket) {
        super(apiCore, documentJacket);
        this.ScProxyDisciminator = ScProxyDisciminator.JqueryModalDialogsDocProxy;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[ScProxyDisciminator.JqueryModalDialogsDocProxy];
    }
    WireEvents() {
        return JqueryModalDialogsDocProxy_awaiter(this, void 0, void 0, function* () {
            try {
                this._BaseWireEvents();
                yield this.EnableWatcherForFrames()
                    .catch((err) => this.ErrorHand.HandleFatalError([JqueryModalDialogsDocProxy_JqueryModalDialogsDocProxy.name, this.WireEvents.name], err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([JqueryModalDialogsDocProxy_JqueryModalDialogsDocProxy.name, this.WireEvents.name], err);
            }
        });
    }
    OpenFile(fileName) {
        return JqueryModalDialogsDocProxy_awaiter(this, void 0, void 0, function* () {
            try {
                let id0FrameProxy = null;
                let id0FrameJacket = null;
                let proxyFactory = new ScDocProxyResolver_ScDocProxyResolver(this.ApiCore);
                yield this.DocumentJacket.WaitForCompleteNAB_DocumentJacket('jquery jacket')
                    .then(() => this.DocumentJacket.GetHostedFirstMatchingFrameElemJacket(ContentConst.Const.Selector.SC.Frames.ScContentIframeId0.Id))
                    .then((matchingJacket) => id0FrameJacket = matchingJacket)
                    .catch((err) => this.ErrorHand.HandleFatalError(this.OpenFile.name, err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([JqueryModalDialogsDocProxy_JqueryModalDialogsDocProxy.name, this.OpenFile.name], err);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/FrameProxies/_justWindowStateFullProxy.js
var _justWindowStateFullProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class _justWindowStateFullProxy_justWindowStateFullDocProxy extends _BaseScDocProxy_BaseScDocProxy {
    constructor(apiCore, documentJacket) {
        super(apiCore, documentJacket);
        this.Friendly = '{unknown friendly}';
        this.HostedElemProxies = [];
    }
    GetState() {
        return new Promise((resolve, reject) => {
            this.Logger.FuncStart(this.GetState.name, _justWindowStateFullProxy_justWindowStateFullDocProxy.name);
            let stateOf_ = {
                Disciminator: this.ScProxyDisciminator,
                DisciminatorFriendly: this.ScProxyDisciminatorFriendly
            };
            resolve(stateOf_);
            this.Logger.FuncEnd(this.GetState.name, _justWindowStateFullProxy_justWindowStateFullDocProxy.name);
        });
    }
    InstantiateAsyncMembers() {
        return _justWindowStateFullProxy_awaiter(this, void 0, void 0, function* () {
        });
    }
    OnFocus() {
        return _justWindowStateFullProxy_awaiter(this, void 0, void 0, function* () {
        });
    }
    SetState(state) {
        return _justWindowStateFullProxy_awaiter(this, void 0, void 0, function* () {
        });
    }
    TriggerInboundEventsAsync() {
    }
    WireEvents() {
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/AccessViewerProxy.js


class AccessViewerProxy_AccessViewerProxy extends _justWindowStateFullProxy_justWindowStateFullDocProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = ScProxyDisciminator.AccessViewer;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[ScProxyDisciminator.AccessViewer];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/ArchiveProxy.js


class ArchiveProxy_ArchiveProxy extends _justWindowStateFullProxy_justWindowStateFullDocProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = ScProxyDisciminator.Archive;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/FallBackDocProxy.js
var FallBackDocProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class FallBackDocProxy_FallBackDocProxy extends _BaseStateFullDocProxy_BaseStateFullDocProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[ScProxyDisciminator.FallBack];
        this.ScProxyDisciminator = ScProxyDisciminator.FallBack;
        this.HostedElemProxies = [];
    }
    GetState() {
        return FallBackDocProxy_awaiter(this, void 0, void 0, function* () {
            let toReturn = {
                Disciminator: this.ScProxyDisciminator,
                DisciminatorFriendly: ScProxyDisciminator[this.ScProxyDisciminator]
            };
            try {
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.GetState + '.' + FallBackDocProxy_FallBackDocProxy.name, err);
            }
            return toReturn;
        });
    }
    SetState(state) {
        return FallBackDocProxy_awaiter(this, void 0, void 0, function* () {
        });
    }
    WireEvents() {
    }
    InstantiateAsyncMembers() {
        return FallBackDocProxy_awaiter(this, void 0, void 0, function* () {
        });
    }
    TriggerInboundEventsAsync() {
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/DomainManagerProxy.js


class DomainManagerProxy_DomainManagerProxy extends _justWindowStateFullProxy_justWindowStateFullDocProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = ScProxyDisciminator.DomainManager;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/EmailExpeprienceManagerProxy.js


class EmailExpeprienceManagerProxy_EmailExpeprienceManagerProxy extends _justWindowStateFullProxy_justWindowStateFullDocProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = ScProxyDisciminator.EmailExperienceManager;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/InstallationWizardProxy.js


class InstallationWizardProxy_InstallationWizardProxy extends _justWindowStateFullProxy_justWindowStateFullDocProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = ScProxyDisciminator.InstallationWizard;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/InstallLicensesProxy.js


class InstallLicensesProxy_InstallLicensesProxy extends _justWindowStateFullProxy_justWindowStateFullDocProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = ScProxyDisciminator.InstalledLicenses;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/KeyBoardMapProxy.js


class KeyBoardMapProxy_KeyBoardMapProxy extends _justWindowStateFullProxy_justWindowStateFullDocProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = ScProxyDisciminator.KeyBoardMap;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/LicenseDetailsProxy.js


class LicenseDetailsProxy_LicenseDetailsProxy extends _justWindowStateFullProxy_justWindowStateFullDocProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = ScProxyDisciminator.LicenseDetails;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/LogViewerProxy.js


class LogViewerProxy_LogViewerProxy extends _justWindowStateFullProxy_justWindowStateFullDocProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = ScProxyDisciminator.LogViewer;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/RecycleBinProxy.js


class RecycleBinProxy_RecycleBinProxy extends _justWindowStateFullProxy_justWindowStateFullDocProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = ScProxyDisciminator.RecycleBin;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/RoleManagerProxy.js


class RoleManagerProxy_RoleManagerProxy extends _justWindowStateFullProxy_justWindowStateFullDocProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = ScProxyDisciminator.RoleManager;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/RunProxy.js


class RunProxy_RunProxy extends _justWindowStateFullProxy_justWindowStateFullDocProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = ScProxyDisciminator.Run;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/ScanForBrokenLinksProxy.js


class ScanForBrokenLinksProxy_ScanForBrokenLinksProxy extends _justWindowStateFullProxy_justWindowStateFullDocProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = ScProxyDisciminator.ScanForBrokenLinks;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/SecurityEditorProxy.js


class SecurityEditorProxy_SecurityEditorDocProxy extends _justWindowStateFullProxy_justWindowStateFullDocProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = ScProxyDisciminator.SecurityEditor;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/UserManagerProxy.js


class UserManagerProxy_UserManagerProxy extends _justWindowStateFullProxy_justWindowStateFullDocProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = ScProxyDisciminator.UserManager;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/WorkboxProxy.js


class WorkboxProxy_WorkboxProxy extends _justWindowStateFullProxy_justWindowStateFullDocProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = ScProxyDisciminator.Workbox;
        this.ScProxyDisciminatorFriendly = ScProxyDisciminator[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ScDocProxyResolver.js
var ScDocProxyResolver_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






























class ScDocProxyResolver_ScDocProxyResolver extends _APICoreBase_APICoreBase {
    constructor(apiCore) {
        super(apiCore);
    }
    StateLessScWindowTypes() {
        return [
            ScWindowType.JqueryModalDialogs,
            ScWindowType.InstallerBuildPackage,
        ];
    }
    StateFullScWindowTypes() {
        return [
            ScWindowType.AccessViewer,
            ScWindowType.Archive,
            ScWindowType.ContentEditor,
            ScWindowType.ControlPanel,
            ScWindowType.Debug,
            ScWindowType.Desktop,
            ScWindowType.DomainManager,
            ScWindowType.EmailExperienceManager,
            ScWindowType.ExperienceAnalytics,
            ScWindowType.ExperienceEditor_Normal,
            ScWindowType.ExperienceEditor_Preview,
            ScWindowType.ExperienceOptimization,
            ScWindowType.ExperienceProfile,
            ScWindowType.FederatedExperienceManager,
            ScWindowType.Forms,
            ScWindowType.InstallationWizard,
            ScWindowType.InstalledLicenses,
            ScWindowType.KeyboardMap,
            ScWindowType.LicenseDetails,
            ScWindowType.ListManager,
            ScWindowType.LoginPage,
            ScWindowType.LogViewer,
            ScWindowType.MarketingAutomation,
            ScWindowType.MarketingControlPanel,
            ScWindowType.MediaLibrary,
            ScWindowType.PackageDesigner,
            ScWindowType.PathAnalyzer,
            ScWindowType.RecycleBin,
            ScWindowType.RoleManager,
            ScWindowType.Run,
            ScWindowType.ScanForBrokenLinks,
            ScWindowType.SecurityEditor,
            ScWindowType.TemplateManager,
            ScWindowType.UpdateCenter,
            ScWindowType.UserManager,
            ScWindowType.Workbox,
        ];
    }
    StateLessScDocProxyFactory(windowType, documentJacket, jqueryModalDialogsFrameProxy) {
        let stateLessScDocProxy = null;
        if (false) {}
        else if (windowType === ScWindowType.JqueryModalDialogs) {
            stateLessScDocProxy = new JqueryModalDialogsDocProxy_JqueryModalDialogsDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.InstallerBuildPackage) {
            stateLessScDocProxy = new InstallerBuildPackageDocProxy_InstallerBuildPackageDocProxy(this.ApiCore, documentJacket);
        }
        return stateLessScDocProxy;
    }
    StateFullScDocProxyFactory(windowType, documentJacket, jqueryModalDialogsFrameProxy) {
        let stateFullScDocProxy = null;
        if (false) {}
        else if (windowType === ScWindowType.AccessViewer) {
            stateFullScDocProxy = new AccessViewerProxy_AccessViewerProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.Archive) {
            stateFullScDocProxy = new ArchiveProxy_ArchiveProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.ContentEditor) {
            stateFullScDocProxy = new ContentEditorProxy_ContentEditorDocProxy(this.ApiCore, documentJacket, 'Solo Content Editor doc');
        }
        else if (windowType === ScWindowType.ControlPanel) {
            stateFullScDocProxy = new FallBackDocProxy_FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.Debug) {
            stateFullScDocProxy = new FallBackDocProxy_FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.Desktop) {
            stateFullScDocProxy = new DesktopProxy_DesktopProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.DomainManager) {
            stateFullScDocProxy = new DomainManagerProxy_DomainManagerProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.EmailExperienceManager) {
            stateFullScDocProxy = new EmailExpeprienceManagerProxy_EmailExpeprienceManagerProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.ExperienceAnalytics) {
            stateFullScDocProxy = new FallBackDocProxy_FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.ExperienceEditor_Edit) {
            stateFullScDocProxy = new FallBackDocProxy_FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.ExperienceEditor_Normal) {
            stateFullScDocProxy = new FallBackDocProxy_FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.ExperienceEditor_Preview) {
            stateFullScDocProxy = new FallBackDocProxy_FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.ExperienceOptimization) {
            stateFullScDocProxy = new FallBackDocProxy_FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.ExperienceProfile) {
            stateFullScDocProxy = new FallBackDocProxy_FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.FallBack) {
            stateFullScDocProxy = new FallBackDocProxy_FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.FederatedExperienceManager) {
            stateFullScDocProxy = new FallBackDocProxy_FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.Forms) {
            stateFullScDocProxy = new FallBackDocProxy_FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.InstallationWizard) {
            stateFullScDocProxy = new InstallationWizardProxy_InstallationWizardProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.InstalledLicenses) {
            stateFullScDocProxy = new InstallLicensesProxy_InstallLicensesProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.KeyboardMap) {
            stateFullScDocProxy = new KeyBoardMapProxy_KeyBoardMapProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.Launchpad) {
            stateFullScDocProxy = new LaunchPadProxy_LaunchPadProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.LicenseDetails) {
            stateFullScDocProxy = new LicenseDetailsProxy_LicenseDetailsProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.ListManager) {
            stateFullScDocProxy = new FallBackDocProxy_FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.LoginPage) {
            stateFullScDocProxy = new FallBackDocProxy_FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.LogViewer) {
            stateFullScDocProxy = new LogViewerProxy_LogViewerProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.MarketingControlPanel) {
            stateFullScDocProxy = new MarketingControlPanelProxy_MarketingControlPanelDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.MarketingAutomation) {
            stateFullScDocProxy = new FallBackDocProxy_FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.MediaLibrary) {
            stateFullScDocProxy = new MediaLibraryProxy_MediaLibraryProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.PackageDesigner) {
            stateFullScDocProxy = new PackageDesignerDocProxy_PackageDesignerDocProxy(this.ApiCore, documentJacket, 'PackageDesigner', jqueryModalDialogsFrameProxy);
        }
        else if (windowType === ScWindowType.PathAnalyzer) {
            stateFullScDocProxy = new FallBackDocProxy_FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.Publish) {
            stateFullScDocProxy = new FallBackDocProxy_FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.RecycleBin) {
            stateFullScDocProxy = new RecycleBinProxy_RecycleBinProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.RoleManager) {
            stateFullScDocProxy = new RoleManagerProxy_RoleManagerProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.Run) {
            stateFullScDocProxy = new RunProxy_RunProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.ScanForBrokenLinks) {
            stateFullScDocProxy = new ScanForBrokenLinksProxy_ScanForBrokenLinksProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.SecurityEditor) {
            stateFullScDocProxy = new SecurityEditorProxy_SecurityEditorDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.TemplateManager) {
            stateFullScDocProxy = new TemplateManagerProxy_TemplateManagerProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.UpdateCenter) {
            stateFullScDocProxy = new FallBackDocProxy_FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.UserManager) {
            stateFullScDocProxy = new UserManagerProxy_UserManagerProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === ScWindowType.Workbox) {
            stateFullScDocProxy = new WorkboxProxy_WorkboxProxy(this.ApiCore, documentJacket);
        }
        return stateFullScDocProxy;
    }
    ScDocProxyFactoryMake(documentJacket, jqueryModalDialogsFrameProxy) {
        return new Promise((resolve, reject) => ScDocProxyResolver_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([ScDocProxyResolver_ScDocProxyResolver.name, this.ScDocProxyFactoryMake.name]);
            let scDocProxy = null;
            let windowTypeResolver = new ScWindowTypeResolver_ScWindowTypeResolver(this.CommonCore);
            let desiredScWindowType = windowTypeResolver.GetScWindowType(documentJacket.UrlJacket);
            if (this.StateFullScWindowTypes().indexOf(desiredScWindowType) > -1) {
                scDocProxy = this.StateFullScDocProxyFactory(desiredScWindowType, documentJacket, jqueryModalDialogsFrameProxy);
            }
            else if (this.StateLessScWindowTypes().indexOf(desiredScWindowType) > -1) {
                scDocProxy = this.StateLessScDocProxyFactory(desiredScWindowType, documentJacket, jqueryModalDialogsFrameProxy);
            }
            else {
                this.ErrorHand.HandleFatalError([ScDocProxyResolver_ScDocProxyResolver.name, this.ScDocProxyFactoryMake.name], 'unhandled windowType ' + ScWindowType[desiredScWindowType]);
            }
            yield scDocProxy.InstantiateAsyncMembers()
                .then(() => scDocProxy.WireEvents())
                .then(() => scDocProxy.OnFocus())
                .then(() => resolve(scDocProxy))
                .catch((err) => reject(this.ErrorHand.FormatRejectMessage([ScDocProxyResolver_ScDocProxyResolver.name, this.ScDocProxyFactoryMake.name], err)));
            this.Logger.FuncEnd([ScDocProxyResolver_ScDocProxyResolver.name, this.ScDocProxyFactoryMake.name], ScWindowType[desiredScWindowType]);
        }));
    }
    MapProxyDiscriminatorToScWindowType(proxyDiscriminator) {
        let toReturn = ScWindowType.Unknown;
        if (false) {}
        else if (proxyDiscriminator === ScProxyDisciminator.AccessViewer) {
            toReturn = ScWindowType.AccessViewer;
        }
        else if (proxyDiscriminator === ScProxyDisciminator.Archive) {
            toReturn = ScWindowType.Archive;
        }
        else if (proxyDiscriminator === ScProxyDisciminator.ContentEditor) {
            toReturn = ScWindowType.ContentEditor;
        }
        else if (proxyDiscriminator === ScProxyDisciminator.Desktop) {
            this.ErrorHand.HandleFatalError(this.MapProxyDiscriminatorToScWindowType.name, 'Something has gone wrong');
        }
        else if (proxyDiscriminator === ScProxyDisciminator.DomainManager) {
            toReturn = ScWindowType.DomainManager;
        }
        else if (proxyDiscriminator === ScProxyDisciminator.InstallationWizard) {
            toReturn = ScWindowType.InstallationWizard;
        }
        else if (proxyDiscriminator === ScProxyDisciminator.InstalledLicenses) {
            toReturn = ScWindowType.InstalledLicenses;
        }
        else if (proxyDiscriminator === ScProxyDisciminator.JqueryModalDialogsDocProxy) {
            toReturn = ScWindowType.JqueryModalDialogs;
        }
        else if (proxyDiscriminator === ScProxyDisciminator.KeyBoardMap) {
            toReturn = ScWindowType.KeyboardMap;
        }
        else if (proxyDiscriminator === ScProxyDisciminator.LicenseDetails) {
            toReturn = ScWindowType.LicenseDetails;
        }
        else if (proxyDiscriminator === ScProxyDisciminator.LogViewer) {
            toReturn = ScWindowType.LogViewer;
        }
        else if (proxyDiscriminator === ScProxyDisciminator.MarketingControlPanel) {
            toReturn = ScWindowType.MarketingControlPanel;
        }
        else if (proxyDiscriminator === ScProxyDisciminator.MediaLibrary) {
            toReturn = ScWindowType.MediaLibrary;
        }
        else if (proxyDiscriminator === ScProxyDisciminator.PackageDesigner) {
            toReturn = ScWindowType.PackageDesigner;
        }
        else if (proxyDiscriminator === ScProxyDisciminator.RecycleBin) {
            toReturn = ScWindowType.RecycleBin;
        }
        else if (proxyDiscriminator === ScProxyDisciminator.RoleManager) {
            toReturn = ScWindowType.RoleManager;
        }
        else if (proxyDiscriminator === ScProxyDisciminator.Run) {
            toReturn = ScWindowType.Run;
        }
        else if (proxyDiscriminator === ScProxyDisciminator.ScanForBrokenLinks) {
            toReturn = ScWindowType.ScanForBrokenLinks;
        }
        else if (proxyDiscriminator === ScProxyDisciminator.SecurityEditor) {
            toReturn = ScWindowType.SecurityEditor;
        }
        else if (proxyDiscriminator === ScProxyDisciminator.TemplateManager) {
            toReturn = ScWindowType.TemplateManager;
        }
        else if (proxyDiscriminator === ScProxyDisciminator.UserManager) {
            toReturn = ScWindowType.UserManager;
        }
        else if (proxyDiscriminator === ScProxyDisciminator.Workbox) {
            toReturn = ScWindowType.Workbox;
        }
        else {
            this.ErrorHand.HandleFatalError(this.MapProxyDiscriminatorToScWindowType.name, 'unhandled mapping');
        }
        ;
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ScWindowFacade.js
var ScWindowFacade_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};













class ScWindowFacade_ScWindowFacade extends _APICoreBase_APICoreBase {
    constructor(apiCore, documentJacket) {
        super(apiCore);
        this.Logger.CTORStart(ScWindowFacade_ScWindowFacade.name);
        this.DocumentJacket = documentJacket;
        this.Instantiate();
        this.Logger.CTOREnd(ScWindowFacade_ScWindowFacade.name);
    }
    Instantiate() {
        this.Logger.FuncStart([ScWindowFacade_ScWindowFacade.name, this.Instantiate.name]);
        this.ScPageTypeResolver = new ScWindowTypeResolver_ScWindowTypeResolver(this.ApiCore);
        this.StateFullProxyFactory = new ScDocProxyResolver_ScDocProxyResolver(this.ApiCore);
        this.Logger.FuncEnd([ScWindowFacade_ScWindowFacade.name, this.Instantiate.name]);
    }
    InstantiateAsyncMembers() {
        return ScWindowFacade_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart([ScWindowFacade_ScWindowFacade.name, this.InstantiateAsyncMembers.name]);
                this.TabSessionId = sessionStorage.getItem(ContentConst.Const.Storage.SessionKey);
                if (!this.TabSessionId) {
                    this.TabSessionId = Guid_Guid.WithoutDashes(Guid_Guid.NewRandomGuid());
                    sessionStorage.setItem(ContentConst.Const.Storage.SessionKey, this.TabSessionId);
                }
                let windowType = ScWindowType.Unknown;
                yield this.DocumentJacket.WaitForCompleteNAB_DocumentJacket('Window.Document')
                    .then((result) => windowType = this.ScPageTypeResolver.GetScWindowType(this.DocumentJacket.UrlJacket))
                    .then(() => this.StateFullProxyFactory.ScDocProxyFactoryMake(this.DocumentJacket, null))
                    .then((stateFullProxy) => this.StateFullProxy = stateFullProxy)
                    .catch((err) => this.ErrorHand.HandleFatalError(this.InstantiateAsyncMembers.name, err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.InstantiateAsyncMembers.name, err);
            }
            this.Logger.FuncEnd([ScWindowFacade_ScWindowFacade.name, this.InstantiateAsyncMembers.name]);
        });
    }
    GetCurrentPageType() {
        return this.ScPageTypeResolver.GetScWindowType(this.DocumentJacket.UrlJacket);
    }
    TriggerCERibbonCommand(ribbonCommand) {
        this.Logger.FuncStart([ScWindowFacade_ScWindowFacade.name, this.TriggerCERibbonCommand.name]);
        if (this.StateFullProxy) {
            if (this.StateFullProxy.ScProxyDisciminator === ScProxyDisciminator.ContentEditor) {
                let contentEditorProxy = this.StateFullProxy;
                if (contentEditorProxy) {
                    contentEditorProxy.TriggerCERibbonCommand(ribbonCommand);
                }
            }
            else if (this.StateFullProxy.ScProxyDisciminator === ScProxyDisciminator.Desktop) {
                let desktopProxy = this.StateFullProxy;
                if (desktopProxy) {
                    desktopProxy.TriggerCERibbonCommand(ribbonCommand);
                }
            }
        }
        this.Logger.FuncEnd([ScWindowFacade_ScWindowFacade.name, this.TriggerCERibbonCommand.name]);
    }
    SetCompactCss(documentJacket) {
        return ScWindowFacade_awaiter(this, void 0, void 0, function* () {
        });
    }
    GetState() {
        return new Promise((resolve, reject) => ScWindowFacade_awaiter(this, void 0, void 0, function* () {
            let toReturn = new DefaultStateOfScWindowProxy_DefaultStateOfScWindow();
            if (this.StateFullProxy) {
                yield this.StateFullProxy.GetState()
                    .then((stateOf_) => toReturn.ScWindow = stateOf_)
                    .then(() => toReturn.ScWindow.DisciminatorFriendly = ScProxyDisciminator[toReturn.ScWindow.Disciminator])
                    .then(() => resolve(toReturn))
                    .catch((err) => reject(this.GetState.name + ' | ' + err));
            }
            else {
                resolve(toReturn);
            }
        }));
    }
    GetStateOfScUiProxy(snapshotFlavor) {
        return new Promise((resolve, reject) => ScWindowFacade_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetStateOfScUiProxy.name);
            let toReturnStateOfSitecoreWindow = new DefaultStateOfScUiProxy_DefaultStateOfScUiProxy();
            yield this.GetState()
                .then((dataSitecoreWindowStates) => toReturnStateOfSitecoreWindow.State = dataSitecoreWindowStates)
                .then(() => {
                toReturnStateOfSitecoreWindow.Meta = this.PopulateMetaData(snapshotFlavor, toReturnStateOfSitecoreWindow.State);
                toReturnStateOfSitecoreWindow.Friendly = this.PopulateFriendly(toReturnStateOfSitecoreWindow.Meta);
            })
                .then(() => resolve(toReturnStateOfSitecoreWindow))
                .catch((err) => reject(this.GetStateOfScUiProxy.name + ' | ' + err));
            this.Logger.FuncEnd(this.GetStateOfScUiProxy.name);
        }));
    }
    PublishActiveCE() {
        return ScWindowFacade_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScWindowFacade_awaiter(this, void 0, void 0, function* () {
                if (this.GetCurrentPageType() == ScWindowType.ContentEditor) {
                    yield this.StateFullProxy.PublishItem()
                        .then(() => resolve())
                        .catch((err) => reject(this.PublishActiveCE.name + ' | ' + err));
                }
                else if (this.GetCurrentPageType() == ScWindowType.Desktop) {
                    this.StateFullProxy.PublishItem()
                        .then(() => resolve())
                        .catch((err) => reject(this.PublishActiveCE.name + ' | ' + err));
                }
                else {
                    reject(this.PublishActiveCE.name + ' Unhandled page type');
                }
            }));
        });
    }
    SetStateOfScWin(dataToRestore) {
        return ScWindowFacade_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScWindowFacade_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.SetStateOfScWin.name);
                if (dataToRestore) {
                    if (dataToRestore.Meta.WindowType == ScWindowType.Desktop) {
                        if (dataToRestore.State.ScWindow) {
                            yield this.StateFullProxy.SetState(dataToRestore.State.ScWindow)
                                .then(() => resolve())
                                .catch((err) => reject(this.SetStateOfScWin.name + ' | ' + err));
                        }
                        else {
                            this.ErrorHand.HandleFatalError(this.SetStateOfScWin.name, 'no states in dataToRestore');
                        }
                    }
                    else {
                        reject(this.SetStateOfScWin.name + 'Data not restored. Not in Desktop or Content Editor');
                    }
                }
                else {
                    this.ErrorHand.WarningAndContinue(this.SetStateOfScWin.name, " No data found to restore");
                    resolve();
                }
                reject(this.SetStateOfScWin.name + ' : unknown reason');
                this.Logger.FuncEnd(this.SetStateOfScWin.name);
            }));
        });
    }
    PopulateFriendly(metadata) {
        let toReturn = new DefaultFriendly_DefaultFriendly();
        toReturn.WindowType = ScWindowType[metadata.WindowType];
        toReturn.TimeStamp = StaticHelpers_StaticHelpers.MakeFriendlyDate(metadata.TimeStamp);
        toReturn.Flavor = SnapShotFlavor[metadata.Flavor];
        return toReturn;
    }
    Hash(input) {
        let hash = 0;
        let strLen = input.length;
        let charCode;
        if (strLen !== 0) {
            for (var idx = 0; idx < strLen; idx++) {
                charCode = input.charCodeAt(idx);
                hash = ((hash << 5) - hash) + charCode;
                hash = hash & hash;
            }
        }
        return hash;
    }
    PopulateMetaData(snapshotFlavor, stateOfScWindow) {
        let toReturn = new DefaultMetaData_DefaultMetaData();
        toReturn.WindowType = this.ScPageTypeResolver.GetScWindowType(this.DocumentJacket.UrlJacket);
        toReturn.TimeStamp = new Date();
        toReturn.SessionId = this.TabSessionId;
        toReturn.Flavor = snapshotFlavor;
        toReturn.Hash = this.Hash(JSON.stringify(stateOfScWindow));
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/HindSiteScUiAPI.js
var HindSiteScUiAPI_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class HindSiteScUiAPI_HindSiteScUiAPI {
    constructor(loggerAgent, errorHand, taskMon, documentJacket, runTimeOptions) {
        this.ApiCore = {
            ErrorHand: errorHand,
            Logger: loggerAgent,
            RunTimeOptions: runTimeOptions,
            TaskMonitor: taskMon,
        };
        this.Logger = this.ApiCore.Logger;
        this.ErrorHand = this.ApiCore.ErrorHand;
        this.Logger.CTORStart(HindSiteScUiAPI_HindSiteScUiAPI.name);
        this.DocumentJacket = documentJacket;
        this.Logger.CTOREnd(HindSiteScUiAPI_HindSiteScUiAPI.name);
    }
    InstantiateHindSiteScUiProxy() {
        return HindSiteScUiAPI_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.InstantiateHindSiteScUiProxy.name);
            try {
                this.ScWindowFacade = new ScWindowFacade_ScWindowFacade(this.ApiCore, this.DocumentJacket);
                yield this.ScWindowFacade.InstantiateAsyncMembers();
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.InstantiateHindSiteScUiProxy.name, err);
            }
            this.Logger.FuncEnd(this.InstantiateHindSiteScUiProxy.name);
        });
    }
    GetStateOfScUiProxyWindow(snapshotFlavor) {
        return this.ScWindowFacade.GetStateOfScUiProxy(snapshotFlavor);
    }
    GetStateOfScUiProxy() {
        return new Promise((resolve, reject) => HindSiteScUiAPI_awaiter(this, void 0, void 0, function* () {
            let reply = null;
            if (this.ScWindowFacade) {
                yield this.ScWindowFacade.GetStateOfScUiProxy(SnapShotFlavor.Live)
                    .then((result) => reply = result)
                    .then(() => reply.ErrorStack = this.ErrorHand.ErrorStack)
                    .then(() => resolve(reply))
                    .catch((err) => reject(err));
            }
            else {
                resolve(reply);
            }
        }));
    }
    AddContentEditorToDesktopAsync(apiCallPayload) {
        return new Promise((resolve, reject) => HindSiteScUiAPI_awaiter(this, void 0, void 0, function* () {
            this.ScWindowFacade.StateFullProxy.AddContentEditorFrameAsync()
                .then(() => resolve())
                .catch((err) => reject());
        }));
    }
    PublischActiveCE(commandData) {
        return new Promise((resolve, reject) => HindSiteScUiAPI_awaiter(this, void 0, void 0, function* () {
            this.ScWindowFacade.PublishActiveCE()
                .then(() => resolve())
                .catch((err) => reject(this.ErrorHand.FormatRejectMessage([HindSiteScUiAPI_HindSiteScUiAPI.name, this.PublischActiveCE.name], err)));
        }));
    }
    ToggleCompactCss(commandData) {
        return HindSiteScUiAPI_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HindSiteScUiAPI_awaiter(this, void 0, void 0, function* () {
            }));
        });
    }
    SetStateOfSitecoreWindowAsync(apiCallPayload, dataOneWindowStorage) {
        return new Promise((resolve, reject) => HindSiteScUiAPI_awaiter(this, void 0, void 0, function* () {
            this.ScWindowFacade.SetStateOfScWin(dataOneWindowStorage)
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    CEGoSelected(apiCallPayload) {
        return HindSiteScUiAPI_awaiter(this, void 0, void 0, function* () {
            let text = '';
            if (window.getSelection()) {
                text = window.getSelection().toString();
            }
            alert(text);
        });
    }
    TriggerCERibbonCommand(scRibbonCommand) {
        return HindSiteScUiAPI_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([HindSiteScUiAPI_HindSiteScUiAPI.name, this.TriggerCERibbonCommand.name], ScRibbonCommand[scRibbonCommand]);
            try {
                if ((typeof scRibbonCommand !== 'undefined') && scRibbonCommand !== ScRibbonCommand.Unknown) {
                    this.ScWindowFacade.TriggerCERibbonCommand(scRibbonCommand);
                }
                else {
                    this.ErrorHand.WarningAndContinue(this.TriggerCERibbonCommand.name, 'Invalid scRibbonCommand');
                }
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.TriggerCERibbonCommand.name, err);
            }
            this.Logger.FuncEnd([HindSiteScUiAPI_HindSiteScUiAPI.name, this.TriggerCERibbonCommand.name]);
        });
    }
    OpenContentEditor() {
        throw new Error("Method not implemented.");
    }
    AdminB(commandData) {
        this.ScUiMan = new SitecoreUiManager_ScUiManager(this.ApiCore);
        this.ScUiMan.InitSitecoreUiManager();
        this.ScUiMan.AdminB(this.DocumentJacket, null);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/LoggerAgent/LoggerConsoleWriter.js
class LoggerConsoleWriter {
    constructor() {
        this.FriendlyName = LoggerConsoleWriter.name;
    }
    WriteText(text) {
        console.log(text);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/LoggerAgent/LoggerStorageWriter.js
var LoggerStorageWriter_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class LoggerStorageWriter {
    constructor() {
        this.FriendlyName = LoggerStorageWriter.name;
        this.CurrentStorageLogKey = '0';
        this.LogToStoragePrefix = 'Hindsite.Log.';
        this.StorageLogCombined = "";
    }
    WriteText(text) {
    }
    SetLogToStorageKey(logToStorageIndex) {
        this.CurrentStorageLogKey = this.LogToStoragePrefix + logToStorageIndex;
    }
    WriteLogToStorage(logMessage) {
        return LoggerStorageWriter_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => LoggerStorageWriter_awaiter(this, void 0, void 0, function* () {
                this.StorageLogCombined += "|||" + JSON.stringify(logMessage);
                if (this.CurrentStorageLogKey) {
                    window.localStorage.setItem(this.CurrentStorageLogKey, this.StorageLogCombined);
                }
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/RepositoryAgent/RepositoryAgent.js

class RepositoryAgent_RepositoryAgent extends _CommonBase {
    constructor(hindeCore) {
        super(hindeCore);
    }
    RemoveByKey(key) {
        try {
            window.localStorage.removeItem(key);
        }
        catch (err) {
            this.ErrorHand.HandleFatalError(this.RemoveByKey.name, err);
        }
    }
    InitRepositoryAgent() {
        this.Logger.FuncStart(RepositoryAgent_RepositoryAgent.name, this.InitRepositoryAgent.name);
        this.Logger.FuncEnd(RepositoryAgent_RepositoryAgent.name, this.InitRepositoryAgent.name);
    }
    GetBulkLocalStorageByKeyPrefix(targetPrefix) {
        var toReturn = [];
        try {
            var storageLength = window.localStorage.length;
            for (var idx = 0; idx < storageLength; idx++) {
                var candidate = {
                    data: '',
                    key: '',
                };
                candidate.key = window.localStorage.key(idx);
                if (candidate.key.startsWith(targetPrefix)) {
                    candidate.data = window.localStorage.getItem(candidate.key);
                    if (typeof candidate != 'undefined' && typeof candidate.data != 'undefined' && candidate != null && candidate.data != null) {
                        toReturn.push(candidate);
                    }
                }
            }
        }
        catch (err) {
            this.ErrorHand.HandleFatalError(this.GetBulkLocalStorageByKeyPrefix.name, err);
        }
        return toReturn;
    }
    ReadDataOfKey(targetKey) {
        this.Logger.FuncStart(this.ReadDataOfKey.name);
        let storageValue = null;
        let toReturn = '';
        storageValue = window.localStorage.getItem(targetKey);
        if (storageValue != null) {
            toReturn = storageValue.toString();
        }
        else {
            this.Logger.LogVal(this.ReadDataOfKey.name, "No value returned from storage");
        }
        this.Logger.FuncEnd(this.ReadDataOfKey.name);
        return toReturn;
    }
    WriteByKey(storageKey, jsonString) {
        window.localStorage.setItem(storageKey, jsonString);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Const/PopConst.js
class PopConst {
}
PopConst.Const = {
    ClassNames: {
        HS: {
            Collapsed: 'in',
            Down: 'down',
            Buttons: {
                AdminB: 'admin-b',
                Cancel: 'cancel',
                CompactCe: 'details',
                Edit: 'edit',
                GoContentEditor: 'ce',
                GoDesktop: 'desktop-icon',
                Ping: 'edit',
                PresentationDetails: 'details',
                QuickPublish: 'publish',
                RemoveFromStorage: 'delete-snapshot',
                RestoreNewTab: 'restore-snapshot',
                RestoreSameTab: 'restore-snapshot',
                RestoreStateTBD: 'restore-snapshot',
                ScModeEdit: 'edit',
                ScModeNormal: 'normal',
                ScModePrev: 'preview-icon',
                TakeSnapShot: 'take-snapshot',
                ToggleFavorite: 'btn-favorite',
                UpdateNickname: 'set-nickname',
                Icons: {
                    CloseWindow: 'icon-close-window',
                    AddContentEditorTab: 'icon-add-ce-tab',
                }
            },
        },
    },
    ElemId: {
        InputNickname: 'id-input-nickname',
        HindSiteParentInfo: 'spanParentInfo',
        HS: {
            SelectHeaderAuto: 'sel-header-auto',
            SelectHeaderAutoTitle: 'sel-header-auto-title',
            SelectHeaderFavorite: 'sel-header-favorite',
            SelectHeaderFavoriteTitle: 'sel-header-favorite-title',
            SelectHeaderManual: 'sel-header-manual',
            SelectHeaderManualTitle: 'sel-header-manual-title',
            TabId: 'orig-win-id',
        }
    },
    Numbers: {
        MinMenuHeight: 600,
        MinMenuWidth: 600,
        MaxAutoSaveCount: 10,
        DefaultAutoSaveIntervalMin: 0,
    },
    Notify: {
        Default: 'Complete',
        PublishComplete: 'Publishing Complete',
    },
    Selector: {
        HS: {
            AutoSnapshotBeforeWindowChange: '[id=id-settings-auto-snapshot-on-window-change]',
            BuildStamp: '[id=build-stamp]',
            DivOverlayModule: '[id=menu-overlay]',
            DivStateContent: '[id=feedback-div-state-content]',
            FeedbackBrowserState: '[id=feedback-div-browser-state]',
            FeedbackPopUpState: '[id=feedback-div-pop-up-state]',
            FeedbackContentState: '[id=feedback-div-state-content]',
            FeedbackLogElement: '[id=feedback-pop-up-log]',
            FeedbackMessages: '[id=feedback-messages]',
            FeedbackStorage: '[id=feedback-storage]',
            HsCancel: '[id=Cancel]',
            HsRemoveFromStorage: '[id=id-ph-remove-one-from-local-storage]',
            HsRestoreWindowStateSameTab: '[id=id-ph-btn-restore-state-same-tab]',
            HsRestoreWindowStateNewTab: '[id=id-ph-btn-restore-state-new-tab]',
            iCBoxdSettingsAutoLogin: '[id=id-ph-settings-auto-login]',
            IdFieldSetDebug: '[id=id-fieldset-debug]',
            ToggleFavorite: '[id=id-ph-btn-toggle-favorite]',
            SettingAutoSaveInterval: '[id=id-settings-auto-save-interval]',
            SettingAutoSaveMaxCount: '[id=id-settings-auto-save-max-count]',
            SettingAutoSaveSnapshotRetainDays: '[id=id-settings-auto-save-snap-shot-retain-days]',
            SettingAutoRenameCeTabButton: '[id=id-settings-auto-rename-ce-tab-button]',
            SettingNotUsed: '[id=id-settings-not-used]',
            TakeSnapshot: '[id=id-ph-btn-take-snapshot]',
            UpdateNicknameB: '[id=id-ph-btn-update-nickname]',
            ModuleContainers: {
                SettingShowDebuggingModules: '[id=id-setting-show-debugging-modules]',
                BtnAddContentEditor: '[id=id-ph-btn-add-drframe-content-editor]',
                BtnAdminB: '[id=id-ph-btn-adminb]',
                BtnCompactScUi: '[id=id-ph-btn-compact-sc-ui]',
                BtnDebugClearPopUpConsole: '[id=id-container-btn-debug-clear-console]',
                BtnDebugForceAutoSnapShot: '[id=id-container-btn-debug-force-auto-snapshot]',
                BtnDebugTriggerPopUpReload: '[id=id-container-btn-debug-trigger-pop-up-reload]',
                BtnGoContentEditor: '[id=id-ph-btn-go-content-editor]',
                BtnModeEdit: '[id=id-ph-btn-sc-mode-edit]',
                BtnModeNorm: '[id=id-ph-btn-norm]',
                BtnModePrev: '[id=id-ph-btn-prev]',
                BtnPresentationDetails: '[id=id-ph-btn-presentation-details]',
                BtnQuickPublish: '[id=id-ph-btn-quick-publish]',
                BtnWindowClose: '[id=id-ph-close-window]',
                SettingEnableDebugging: '[id=id-ph-settings-enable-debugging]',
                Desktop: '[id=id-ph-btn-desktop]',
                LgndBrowserState: '[id=lgnd-browser-state]',
                LgndContentState: '[id=lgnd-content-state]',
                LgndForeSite: '[id=lgnd-fore-site]',
                LgndHindSite: '[id=lgnd-hind-site]',
                LgndMessages: '[id=lgnd-messages]',
                LgndPopUpDebug: '[id=lgnd-pop-up-debug]',
                LgndPopUpLog: '[id=lgnd-pop-up-log]',
                LgndPopUpState: '[id=lgnd-pop-up-state]',
                LgndSettings: '[id=lgnd-settings]',
                PrefAutoLogin: '[id=id-ph-settings-auto-login]',
                SelStateSnapShot: '[id=id-container-select-state]',
                SettingAutoRestoreState: '[id=id-settings-auto-restore-state]',
                SettingDebugKeepDialogOpen: '[id=id-ph-settings-debug-keep-dialog-open]',
                SettingUseCompactCss: '[id=id-ph-settings-use-compact]',
            }
        },
    },
    Settings: {
        Defaults: {
            AutoSaveEnabled: false,
            AutoRestoreState: false,
            DebugKeepDialogOpen: false,
            LgndBrowserState: false,
            LgndContentState: false,
            LgndForeSite: true,
            LgndHindSite: true,
            LgndMessages: false,
            LgndPopUpLog: false,
            LgndPopUpState: false,
            LgndPopUpDebug: false,
            LgndSettings: false,
        }
    },
    Storage: {
        SettingsSuffix: 'todo',
        KeyGenericSettings: 'HindSite.' + 'GenericSettings',
        StorageLogKeyPrefix: 'HindSite.' + 'Log.',
        Defaults: {
            bool: {
                AutoSaveEnabled: false,
                AutoLogin: false,
                DefaultDebugKeepDialogOpen: false,
                AutoSnapshotBeforeWindowChange: false,
            }
        }
    },
    SnapShotFormat: {
        lenTimestamp: 13,
        lenNickname: 16,
        lenPageType: 7,
        lenPrefix: 6,
        lenShortId: 4,
        colSep: ' - ',
        lenCeCount: 3,
        MainSectionNode: 9,
        lenActiveNode: 9,
        lenFavorite: 3,
    },
    Timeouts: {
        WaitBeforeRemovingCompleteFlag: 1500,
        AutoLoginCheckInterval: 3000,
    },
};

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/UiModuleManagerPassThroughEvent/UiModuleManagerPassThroughEvent_Observer.js


class UiModuleManagerPassThroughEvent_Observer_UiModuleManagerPassThroughEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, UiModuleManagerPassThroughEvent_Observer_UiModuleManagerPassThroughEvent_Observer.name, callback);
        this.TypeDiscriminator = TypeDiscriminator.UiModuleManagerPassThroughEvent_Observer;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/Enabled.js
var UiEnableState;
(function (UiEnableState) {
    UiEnableState[UiEnableState["Unknown"] = 0] = "Unknown";
    UiEnableState[UiEnableState["Enabled"] = 1] = "Enabled";
    UiEnableState[UiEnableState["Disabled"] = 2] = "Disabled";
})(UiEnableState || (UiEnableState = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/ModuleKey.js
var ModuleKey;
(function (ModuleKey) {
    ModuleKey[ModuleKey["Unknown"] = 0] = "Unknown";
    ModuleKey[ModuleKey["BroswerState"] = 1] = "BroswerState";
    ModuleKey[ModuleKey["ButtonCancel"] = 2] = "ButtonCancel";
    ModuleKey[ModuleKey["ButtonClose"] = 3] = "ButtonClose";
    ModuleKey[ModuleKey["ButtonTypical"] = 4] = "ButtonTypical";
    ModuleKey[ModuleKey["ButtonWithInput"] = 5] = "ButtonWithInput";
    ModuleKey[ModuleKey["ContentState"] = 6] = "ContentState";
    ModuleKey[ModuleKey["FeedbackModule"] = 7] = "FeedbackModule";
    ModuleKey[ModuleKey["PopUpState"] = 8] = "PopUpState";
    ModuleKey[ModuleKey["SelectSnapShot"] = 9] = "SelectSnapShot";
    ModuleKey[ModuleKey["CheckBox"] = 10] = "CheckBox";
    ModuleKey[ModuleKey["AccordionTypical"] = 11] = "AccordionTypical";
    ModuleKey[ModuleKey["Number"] = 12] = "Number";
    ModuleKey[ModuleKey["AccordionDebugging"] = 13] = "AccordionDebugging";
})(ModuleKey || (ModuleKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SettingFlavor.js
var SettingFlavor;
(function (SettingFlavor) {
    SettingFlavor[SettingFlavor["unknown"] = 0] = "unknown";
    SettingFlavor[SettingFlavor["PopUp"] = 1] = "PopUp";
    SettingFlavor[SettingFlavor["ContentAndPopUpStoredInPopUp"] = 2] = "ContentAndPopUpStoredInPopUp";
    SettingFlavor[SettingFlavor["ContentAndPopUpStoredInEach"] = 3] = "ContentAndPopUpStoredInEach";
    SettingFlavor[SettingFlavor["ContentOnly"] = 4] = "ContentOnly";
})(SettingFlavor || (SettingFlavor = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SettingType.js
var SettingType;
(function (SettingType) {
    SettingType[SettingType["Unknown"] = 0] = "Unknown";
    SettingType[SettingType["BoolCheckBox"] = 1] = "BoolCheckBox";
    SettingType[SettingType["AccordionTypical"] = 2] = "AccordionTypical";
    SettingType[SettingType["AccordionDebugging"] = 3] = "AccordionDebugging";
    SettingType[SettingType["Number"] = 4] = "Number";
})(SettingType || (SettingType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/UiPresence.js
var UiPresence;
(function (UiPresence) {
    UiPresence[UiPresence["Unknown"] = 0] = "Unknown";
    UiPresence[UiPresence["HasUi"] = 1] = "HasUi";
    UiPresence[UiPresence["HasNoUi"] = 2] = "HasNoUi";
})(UiPresence || (UiPresence = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/SettingsAgent/HindSiteSetting.js
class HindSiteSetting {
    constructor(settingKey, dataType, uiContainerSelector, defaultValue, settingFlavor, friendly, enableState, hasUi, moduleType) {
        this.SettingKey = settingKey;
        this.DataType = dataType;
        this.ValueAsObj = defaultValue;
        this.UiContainerSelector = uiContainerSelector;
        this.DefaultValue = defaultValue;
        this.SettingFlavor = settingFlavor;
        this.FriendlySetting = friendly;
        this.HasUi = hasUi;
        this.EnabledState = enableState;
        this.ModuleType = moduleType;
    }
    ValueAsHistory() {
        let toReturn = {
            Age_1: '',
            Age_2: '',
            Age_3: '',
        };
        if (this.ValueAsObj !== undefined && this.ValueAsObj !== null) {
            try {
                let candidate = this.ValueAsObj;
                if (candidate) {
                    toReturn = candidate;
                }
            }
            catch (err) {
                throw (HindSiteSetting.name + '.' + this.ValueAsHistory.name + ' | ' + err);
            }
        }
        return toReturn;
    }
    ValueAsInt() {
        var toReturn = Number.MIN_SAFE_INTEGER;
        if (this.ValueAsObj !== undefined && this.ValueAsObj !== null) {
            toReturn = parseInt(this.ValueAsObj.toString());
        }
        return toReturn;
    }
    ValueAsBool() {
        let toReturn = this.DefaultValue;
        if (this.ValueAsObj !== undefined && this.ValueAsObj !== null) {
            toReturn = this.ValueAsObj;
        }
        else {
            toReturn = this.DefaultValue;
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/SettingsAgent/HindSiteSettingForNumbers.js

class HindSiteSettingForNumbers_HindSiteSettingForNumbers extends HindSiteSetting {
    constructor(settingKey, dataType, uiContainerSelector, defaultValue, settingFlavor, friendly, enableState, hasUi, moduleType, min, max) {
        super(settingKey, dataType, uiContainerSelector, defaultValue, settingFlavor, friendly, enableState, hasUi, moduleType);
        this.Min = min;
        this.Max = max;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/SettingsAgent/HindSiteSettingWrapper.js

class HindSiteSettingWrapper_HindSiteSettingWrapper extends _CommonBase {
    constructor(hindeCore, hindSiteSetting) {
        super(hindeCore);
        this.HindSiteSetting = hindSiteSetting;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/SettingsAgent/DefaultSettings.js













class DefaultSettings_DefaultSettings extends _CommonBase {
    constructor(hindeCore) {
        super(hindeCore);
    }
    GetDefaultSettingsWrapper() {
        let rawData = [
            new HindSiteSetting(_30_SettingKey_SettingKey.LastUsedLogToStorageKey, SettingType.Number, null, SharedConst.Const.Settings.Defaults.EnableDebugging, SettingFlavor.ContentAndPopUpStoredInEach, 'Rolling Prefix key for log to storage', UiEnableState.Enabled, UiPresence.HasNoUi, ModuleKey.Unknown),
            new HindSiteSetting(_30_SettingKey_SettingKey.EnableDebugging, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.ModuleContainers.SettingEnableDebugging, SharedConst.Const.Settings.Defaults.EnableDebugging, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Enable Debugging', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSetting(_30_SettingKey_SettingKey.UseCompactCss, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.ModuleContainers.SettingUseCompactCss, SharedConst.Const.Settings.Defaults.UseCompactCss, SettingFlavor.ContentOnly, 'Use Compact CSS', UiEnableState.Disabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSetting(_30_SettingKey_SettingKey.AutoSnapshotBeforeWindowChange, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.AutoSnapshotBeforeWindowChange, PopConst.Const.Storage.Defaults.bool.AutoSnapshotBeforeWindowChange, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Save Snapshot on HindSite Window Change', UiEnableState.Disabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSetting(_30_SettingKey_SettingKey.AutoLogin, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.iCBoxdSettingsAutoLogin, PopConst.Const.Storage.Defaults.bool.AutoLogin, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Login', UiEnableState.Disabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSetting(_30_SettingKey_SettingKey.LgndPopUpLog, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndPopUpLog, PopConst.Const.Settings.Defaults.LgndPopUpLog, SettingFlavor.PopUp, 'Debugging - Pop Up Log', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSetting(_30_SettingKey_SettingKey.LgndForeSite, SettingType.AccordionTypical, PopConst.Const.Selector.HS.ModuleContainers.LgndForeSite, PopConst.Const.Settings.Defaults.LgndForeSite, SettingFlavor.PopUp, 'Fore&bull;Site', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionTypical),
            new HindSiteSetting(_30_SettingKey_SettingKey.LgndHindSite, SettingType.AccordionTypical, PopConst.Const.Selector.HS.ModuleContainers.LgndHindSite, PopConst.Const.Settings.Defaults.LgndHindSite, SettingFlavor.PopUp, 'Hind&bull;Site', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionTypical),
            new HindSiteSetting(_30_SettingKey_SettingKey.LgndSettings, SettingType.AccordionTypical, PopConst.Const.Selector.HS.ModuleContainers.LgndSettings, PopConst.Const.Settings.Defaults.LgndSettings, SettingFlavor.PopUp, 'Settings', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionTypical),
            new HindSiteSetting(_30_SettingKey_SettingKey.LgndMessages, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndMessages, PopConst.Const.Settings.Defaults.LgndMessages, SettingFlavor.PopUp, 'Debugging - Messages', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSetting(_30_SettingKey_SettingKey.LgndPopUpState, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndPopUpState, PopConst.Const.Settings.Defaults.LgndPopUpState, SettingFlavor.PopUp, 'Debugging - State of Pop-Up', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSetting(_30_SettingKey_SettingKey.LgndPopUpDebug, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndPopUpDebug, PopConst.Const.Settings.Defaults.LgndPopUpState, SettingFlavor.PopUp, 'Debugging', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSetting(_30_SettingKey_SettingKey.LgndContentState, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndContentState, PopConst.Const.Settings.Defaults.LgndContentState, SettingFlavor.PopUp, 'Debugging - Content State', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSetting(_30_SettingKey_SettingKey.LgndBrowserState, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndBrowserState, PopConst.Const.Settings.Defaults.LgndBrowserState, SettingFlavor.PopUp, 'Debugging - Browser State', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSettingForNumbers_HindSiteSettingForNumbers(_30_SettingKey_SettingKey.MaxAutoSaveCount, SettingType.Number, PopConst.Const.Selector.HS.SettingAutoSaveMaxCount, PopConst.Const.Numbers.MaxAutoSaveCount, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Save Max Count', UiEnableState.Disabled, UiPresence.HasUi, ModuleKey.Number, 1, 100),
            new HindSiteSettingForNumbers_HindSiteSettingForNumbers(_30_SettingKey_SettingKey.AutoSaveIntervalMin, SettingType.Number, PopConst.Const.Selector.HS.SettingAutoSaveInterval, PopConst.Const.Numbers.DefaultAutoSaveIntervalMin, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Save Interval (Min) - 0 to disable', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.Number, 0, 100),
            new HindSiteSetting(_30_SettingKey_SettingKey.DebugKeepDialogOpen, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.ModuleContainers.SettingDebugKeepDialogOpen, PopConst.Const.Settings.Defaults.DebugKeepDialogOpen, SettingFlavor.PopUp, 'Keep Dialog Open', UiEnableState.Disabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSetting(_30_SettingKey_SettingKey.AutoRestoreState, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.ModuleContainers.SettingAutoRestoreState, PopConst.Const.Settings.Defaults.AutoRestoreState, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto-Restore State', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSettingForNumbers_HindSiteSettingForNumbers(_30_SettingKey_SettingKey.AutoSaveRetainDays, SettingType.Number, PopConst.Const.Selector.HS.SettingAutoSaveSnapshotRetainDays, ContentConst.Const.DefaultMaxAutoSaveAgeDays, SettingFlavor.ContentOnly, 'Days to Retain Auto Snap Shots', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.Number, 0, 100),
            new HindSiteSetting(_30_SettingKey_SettingKey.AutoRenameCeButton, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.SettingAutoRenameCeTabButton, ContentConst.Const.DefaultAutoRenameCeTabButton, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto rename Content Editor tab button to match active node', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.CheckBox),
        ];
        let toReturn = [];
        rawData.forEach((settingValue) => {
            toReturn.push(new HindSiteSettingWrapper_HindSiteSettingWrapper(this.CommonCore, settingValue));
        });
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/SettingsAgent/HindSiteSettingsBucket.js



class HindSiteSettingsBucket_HindSiteSettingsBucket extends _CommonBase {
    constructor(hindeCore) {
        super(hindeCore);
        this.SettingWrappers = [];
        this.SettingWrappers = (new DefaultSettings_DefaultSettings(this.CommonCore)).GetDefaultSettingsWrapper();
    }
    GetByKey(needleSettingKey) {
        var toReturn = null;
        for (var idx = 0; idx < this.SettingWrappers.length; idx++) {
            let candidate = this.SettingWrappers[idx];
            if (candidate.HindSiteSetting.SettingKey === needleSettingKey) {
                toReturn = candidate;
                break;
            }
        }
        if (!toReturn) {
            this.ErrorHand.ErrorAndContinue(this.GetByKey.name, 'Setting not found ' + StaticHelpers_StaticHelpers.SettingKeyAsString(needleSettingKey));
        }
        return toReturn;
    }
    GetSettingsByFlavor(targetFlavors) {
        let toReturn = [];
        for (var idx = 0; idx < this.SettingWrappers.length; idx++) {
            let candidate = this.SettingWrappers[idx];
            if (targetFlavors.indexOf(candidate.HindSiteSetting.SettingFlavor) > -1) {
                toReturn.push(candidate);
            }
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/SettingsAgent/SettingsAgent.js






class SettingsAgent_SettingsAgent extends _CommonBase {
    constructor(hindeCore, repoAgent) {
        super(hindeCore);
        this.RepoAgent = repoAgent;
        this.HindSiteSettingsBucket = new HindSiteSettingsBucket_HindSiteSettingsBucket(this.CommonCore);
    }
    GetSettingsByFlavor(arg0) {
        return this.HindSiteSettingsBucket.GetSettingsByFlavor(arg0);
    }
    GetByKey(settingKey) {
        let toReturn = null;
        let settingsWrapper = this.HindSiteSettingsBucket.GetByKey(settingKey);
        if (settingsWrapper) {
            toReturn = settingsWrapper.HindSiteSetting;
        }
        return toReturn;
    }
    Init_SettingsAgent() {
        this.Logger.FuncStart(this.Init_SettingsAgent.name);
        let settingsFromStorage = this.ReadGenericSettingsFromStorage();
        this.UpdateSettingValuesFromStorage(settingsFromStorage);
        this.Logger.FuncEnd(this.Init_SettingsAgent.name);
    }
    WireEvents() {
        this.UiElementChangeEvent_Observer = new UiModuleManagerPassThroughEvent_Observer_UiModuleManagerPassThroughEvent_Observer(this.CommonCore, this.OnUiModuleManagerPassThroughEvent);
    }
    OnUiModuleManagerPassThroughEvent(payload) {
        alert('pass through');
    }
    UpdateSettingsFromPopUpMsg(newSettings) {
        this.Logger.FuncStart(this.UpdateSettingsFromPopUpMsg.name);
        if (newSettings) {
            for (var idx = 0; idx < newSettings.length; idx++) {
                let oneSetting = newSettings[idx];
                this.SetByKey(oneSetting.SettingKey, oneSetting.ValueAsObj);
            }
        }
        this.Logger.FuncEnd(this.UpdateSettingsFromPopUpMsg.name);
    }
    ReadGenericSettingsFromStorage() {
        this.Logger.FuncStart(this.ReadGenericSettingsFromStorage.name);
        let toReturn = [];
        let storedValue = this.RepoAgent.ReadDataOfKey(PopConst.Const.Storage.KeyGenericSettings);
        if (storedValue) {
            toReturn = JSON.parse(storedValue.toString());
        }
        else {
            toReturn = [];
        }
        this.Logger.FuncEnd(this.ReadGenericSettingsFromStorage.name);
        return toReturn;
    }
    UpdateSettingValuesFromStorage(settingsFromStorage) {
        this.Logger.FuncStart(this.UpdateSettingValuesFromStorage.name);
        try {
            for (var idx = 0; idx < settingsFromStorage.length; idx++) {
                let storageSetting = settingsFromStorage[idx];
                let settingWrapper = this.HindSiteSettingsBucket.GetByKey(storageSetting.SettingKey);
                if (settingWrapper) {
                    let matchingSetting = settingWrapper.HindSiteSetting;
                    if (matchingSetting) {
                        matchingSetting.ValueAsObj = storageSetting.ValueAsObj;
                    }
                    else {
                        this.ErrorHand.ErrorAndContinue(this.UpdateSettingValuesFromStorage.name, 'matching setting not found ' + StaticHelpers_StaticHelpers.SettingKeyAsString(storageSetting.SettingKey));
                    }
                }
                else {
                    this.ErrorHand.HandleFatalError(this.UpdateSettingValuesFromStorage.name, 'null matching setting');
                }
            }
        }
        catch (err) {
            this.ErrorHand.ErrorAndContinue(this.UpdateSettingValuesFromStorage.name, err);
        }
        this.Logger.FuncEnd(this.UpdateSettingValuesFromStorage.name);
    }
    BooleanSettingChanged(settingKey, valueAsBool) {
        this.Logger.LogVal(this.BooleanSettingChanged.name, _30_SettingKey_SettingKey[settingKey]);
        this.SetByKey(settingKey, valueAsBool);
    }
    NumberSettingChanged(SettingKey, valueAsNumber) {
        this.Logger.Log(StaticHelpers_StaticHelpers.SettingKeyAsString(SettingKey));
        this.Logger.LogVal('valueAsNumber', valueAsNumber.toString());
        this.SetByKey(SettingKey, valueAsNumber);
    }
    SetByKey(settingKey, value) {
        let foundSetting = this.HindSiteSettingsBucket.GetByKey(settingKey);
        if (foundSetting) {
            foundSetting.HindSiteSetting.ValueAsObj = value;
            this.WriteAllSettingValuesToStorage();
        }
        else {
            this.ErrorHand.HandleFatalError(this.SetByKey.name, 'setting match not found');
        }
    }
    WriteAllSettingValuesToStorage() {
        let settingValues = [];
        for (var udx = 0; udx < this.HindSiteSettingsBucket.SettingWrappers.length; udx++) {
            let hindSiteWrapper = this.HindSiteSettingsBucket.SettingWrappers[udx];
            if (hindSiteWrapper.HindSiteSetting.ValueAsObj !== null) {
                settingValues.push({
                    SettingKey: hindSiteWrapper.HindSiteSetting.SettingKey,
                    ValueAsObj: hindSiteWrapper.HindSiteSetting.ValueAsObj,
                    SettingKeyFriendly: StaticHelpers_StaticHelpers.SettingKeyAsString(hindSiteWrapper.HindSiteSetting.SettingKey)
                });
            }
        }
        this.RepoAgent.WriteByKey(PopConst.Const.Storage.KeyGenericSettings, JSON.stringify(settingValues));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/SingleClickEvent/SingleClickEvent_Observer.js


class SingleClickEvent_Observer_SingleClickEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(commonCore, callback) {
        super(commonCore, SingleClickEvent_Observer_SingleClickEvent_Observer.name, callback);
        this.TypeDiscriminator = TypeDiscriminator.SingleClickEvent_Observer;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/SingleClickEvent/SingleClickEvent_Subject.js


class SingleClickEvent_Subject_SingleClickEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor() {
        super(...arguments);
        this.TypeDiscriminator = TypeDiscriminator.SingleClickEvent_Subject;
        this.ShowLogActions = true;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/TaskListMutationEvent/TaskListMutationEvent_Observer.js


class TaskListMutationEvent_Observer_TaskListMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(commonCore, callback) {
        super(commonCore, TaskListMutationEvent_Observer_TaskListMutationEvent_Observer.name, callback);
        this.TypeDiscriminator = TypeDiscriminator.TaskListMutationEvent_Observer;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/TaskMutationType.js
var TaskMutationType;
(function (TaskMutationType) {
    TaskMutationType[TaskMutationType["TaskAdded"] = 0] = "TaskAdded";
    TaskMutationType[TaskMutationType["TaskCompleted"] = 1] = "TaskCompleted";
    TaskMutationType[TaskMutationType["TasksHaveGoneIdle"] = 2] = "TasksHaveGoneIdle";
    TaskMutationType[TaskMutationType["TaskWaitingNo"] = 3] = "TaskWaitingNo";
    TaskMutationType[TaskMutationType["TaskWaitingYes"] = 4] = "TaskWaitingYes";
})(TaskMutationType || (TaskMutationType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/ToastAgent/ToastAgent.js
var ToastAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class ToastAgent_ToastAgent extends _CommonBase {
    constructor(commonCore, targetDoc) {
        super(commonCore);
        this.TypeDiscriminator = TypeDiscriminator.ToastAgent;
        this.classSlideUp = 'slide-up';
        this.classSlideDown = 'slide-down';
        this.HasBeenInit = false;
        this.waitingLightClassOn = 'waiting-on';
        this.waitingLightClassOff = 'waiting-off';
        this.mouseBlockerClassOff = 'mouse-blocker-off';
        this.mouseBlockerClassOn = 'mouse-blocker-on';
        this.TargetDoc = targetDoc;
        this.DivineElements();
    }
    WireEvents() {
        this.Logger.FuncStart(this.WireEvents.name);
        this.TaskMutationEvent_Observer = new TaskListMutationEvent_Observer_TaskListMutationEvent_Observer(this.CommonCore, this.CallBackOnTaskListMutationEvent.bind(this));
        this.TaskMonitor.TaskMutationEvent_Subject.RegisterObserver(this.TaskMutationEvent_Observer);
        this.Logger.FuncEnd(this.WireEvents.name);
    }
    CallBackOnTaskListMutationEvent(payload) {
        if (payload.MutationType === TaskMutationType.TasksHaveGoneIdle) {
            this.HideToast('');
        }
        else {
            if (payload.MutationType === TaskMutationType.TaskWaitingYes) {
                this.TurnOnWaitingLight(true);
            }
            else {
                this.TurnOnWaitingLight(false);
            }
            this.SetSliderDivText(payload.CompletedCount + ':' + payload.TotalTaskCount);
        }
    }
    TurnOnWaitingLight(isOn) {
        if (isOn) {
            this.WaitingLight.classList.add(this.waitingLightClassOn);
            this.WaitingLight.classList.remove(this.waitingLightClassOff);
        }
        else {
            this.WaitingLight.classList.remove(this.waitingLightClassOn);
            this.WaitingLight.classList.add(this.waitingLightClassOff);
        }
    }
    HideToast(message) {
        return ToastAgent_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.HideToast.name);
            this.TurnOnMouseBlocker(false);
            this.SetSliderDivText(message);
            this.LowerToastAsync();
            this.Logger.FuncEnd(this.HideToast.name);
        });
    }
    ShowToastAsync(message) {
        return ToastAgent_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart(this.ShowToastAsync.name);
                this.SetSliderDivText(message);
                this.TurnOnMouseBlocker(true);
                this.TurnOnWaitingLight(false);
                this.RaiseToastAsync();
                this.Logger.FuncEnd(this.ShowToastAsync.name);
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.ShowToastAsync.name, err);
            }
        });
    }
    TurnOnMouseBlocker(isOn) {
        if (this.MouseBlocker) {
            if (isOn) {
                this.MouseBlocker.classList.add(this.mouseBlockerClassOn);
                this.MouseBlocker.classList.remove(this.mouseBlockerClassOff);
            }
            else {
                this.MouseBlocker.classList.add(this.mouseBlockerClassOff);
                this.MouseBlocker.classList.remove(this.mouseBlockerClassOn);
            }
        }
    }
    DivineElements() {
        this.Logger.FuncStart(this.DivineElements.name);
        if (!this.HasBeenInit) {
            this.BodyTag = this.TargetDoc.getElementsByTagName(SharedConst.Const.KeyWords.Html.Tags.Body)[0];
            this.ToastContainer = this.CreateToastContainer(this.TargetDoc);
            this.CreateSliderDiv();
            this.CreateCancelButton();
            this.CreateMouseBlocker();
            this.FlagSlider.appendChild(this.CancelButtonElem);
            this.BodyTag.appendChild(this.ToastContainer);
        }
        this.HasBeenInit = true;
        this.Logger.FuncEnd(this.DivineElements.name);
    }
    RaiseToastAsync() {
        return ToastAgent_awaiter(this, void 0, void 0, function* () {
            try {
                var self = this;
                setTimeout(function () {
                    return ToastAgent_awaiter(this, void 0, void 0, function* () {
                        self.ToastContainer.appendChild(self.FlagSlider);
                        self.FlagSlider.classList.remove(self.classSlideDown);
                        self.FlagSlider.classList.add(self.classSlideUp);
                    });
                }, 1000);
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.RaiseToastAsync.name, err);
            }
        });
    }
    LowerToastAsync() {
        return ToastAgent_awaiter(this, void 0, void 0, function* () {
            try {
                var self = this;
                setTimeout(function () {
                    return ToastAgent_awaiter(this, void 0, void 0, function* () {
                        self.FlagSlider.classList.remove(self.classSlideUp);
                        self.FlagSlider.classList.add(self.classSlideDown);
                    });
                }, 1000);
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.LowerToastAsync.name, err);
            }
        });
    }
    SetSliderDivText(sliderDivText) {
        if (this.MessageDiv) {
            this.FlagTextDiv.innerHTML = sliderDivText;
        }
    }
    CancelCallback() {
        this.TaskMonitor.RequestCancel(ToastAgent_ToastAgent.name + '.' + this.CancelCallback.name);
    }
    CallbackOnCloseButton() {
        this.HideToast('Closing');
    }
    CreateCloseButton() {
        let closeButtonElem = this.TargetDoc.createElement('input');
        closeButtonElem.type = "button";
        closeButtonElem.value = "X";
        closeButtonElem.classList.add("close-btn");
        closeButtonElem.addEventListener('click', (() => this.CallbackOnCloseButton()));
        return closeButtonElem;
    }
    CreateMouseBlocker() {
        this.MouseBlocker = this.TargetDoc.createElement('div');
        this.MouseBlocker.classList.add('mouse-blocker');
        this.MouseBlocker.classList.add('mouse-blocker-off');
        document.body.appendChild(this.MouseBlocker);
    }
    CreateCancelButton() {
        this.CancelButtonElem = this.TargetDoc.createElement('input');
        this.CancelButtonElem.type = "button";
        this.CancelButtonElem.value = "Cancel";
        this.OnButtonClick_Subject = new SingleClickEvent_Subject_SingleClickEvent_Subject(this.CommonCore);
        this.OnButtonClick_ObserverTest = new SingleClickEvent_Observer_SingleClickEvent_Observer(this.CommonCore, this.CancelCallback.bind(this));
        this.OnButtonClick_Subject.RegisterObserver(this.OnButtonClick_ObserverTest);
        this.CancelButtonElem.addEventListener('click', (() => {
            let payload = {
                HandlerData: null
            };
            this.OnButtonClick_Subject.NotifyObserversAsync(payload);
        }));
    }
    CreateSliderDiv() {
        this.FlagSlider = this.TargetDoc.createElement('div');
        this.FlagSlider.classList.add('slider');
        this.FlagSlider.classList.add(this.classSlideDown);
        this.WaitingLight = this.TargetDoc.createElement('div');
        this.WaitingLight.classList.add(this.waitingLightClassOff);
        this.WaitingLight.classList.add('waiting');
        let closeButton = this.CreateCloseButton();
        let headerElem = this.TargetDoc.createElement('div');
        headerElem.innerText = "HindSite";
        headerElem.classList.add("header");
        let headWrapper = this.TargetDoc.createElement('div');
        headWrapper.classList.add("header-wrapper");
        this.MessageDiv = this.TargetDoc.createElement('div');
        this.MessageDiv.innerText = "";
        this.MessageDiv.classList.add("message");
        this.FlagTextDiv = this.TargetDoc.createElement('div');
        headWrapper.appendChild(headerElem);
        headWrapper.appendChild(closeButton);
        this.FlagSlider.appendChild(headWrapper);
        this.FlagSlider.appendChild(this.WaitingLight);
        this.FlagSlider.appendChild(this.MessageDiv);
        this.FlagSlider.appendChild(this.FlagTextDiv);
    }
    CreateToastContainer(targetDoc) {
        let flagContainer = targetDoc.createElement('div');
        flagContainer.classList.add('toast');
        return flagContainer;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Drones/RollingLogIdDrone/RollingLogIdDrone.js


class RollingLogIdDrone_RollingLogIdDrone extends _CommonBase {
    constructor(settingsAgent, hindeCore) {
        super(hindeCore);
        this.maxKey = 5;
        this.minKey = 1;
        this.Logger.CTORStart(RollingLogIdDrone_RollingLogIdDrone.name);
        this.SettingsAgent = settingsAgent;
    }
    GetNextLogId() {
        let nextKeyInt = this.minKey;
        let nextKeyToReturn;
        var result = this.GetLastUsedLogId().ValueAsInt();
        nextKeyInt = result + 1;
        if (nextKeyInt > this.maxKey) {
            nextKeyInt = this.minKey;
        }
        this.SettingsAgent.SetByKey(_30_SettingKey_SettingKey.LastUsedLogToStorageKey, nextKeyInt.toString());
        nextKeyToReturn = nextKeyInt.toString();
        return nextKeyToReturn;
    }
    GetLastUsedLogId() {
        var lastUsedLogIdSetting = this.SettingsAgent.GetByKey(_30_SettingKey_SettingKey.LastUsedLogToStorageKey);
        return lastUsedLogIdSetting;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/LoggerAgent/LogWriterBuffer.js
class LogWriterBuffer {
    constructor() {
        this.FriendlyName = LogWriterBuffer.name;
        this.LogPreInitBuffer = [];
        this.bufferPrefix = '* ';
    }
    WriteText(text) {
        this.LogPreInitBuffer.push(this.bufferPrefix + text);
    }
    GetBuffer() {
        let iterCheckMax = 1000;
        let toReturn = [];
        while (this.LogPreInitBuffer.length > 0 && iterCheckMax > 0) {
            iterCheckMax--;
            toReturn.push(this.LogPreInitBuffer.shift());
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/LoggerAgent/LoggerTimer.js

class LoggerTimer_LoggerTimer {
    constructor() {
        this.TimeStart = new Date();
        this.TimeLast = this.TimeStart.getTime();
        this.TimeMarkStart = this.TimeLast;
    }
    GetTimeDiff() {
        let toReturn = '';
        let timeNow = new Date().getTime();
        let timeDiffSinceLastMs = timeNow - this.TimeLast;
        let timeDiffOVerAll = timeNow - this.TimeMarkStart;
        let toReturnSinceLast;
        let toReturnSinceStart;
        let padLength = 5;
        if (timeDiffSinceLastMs >= SharedConst.Const.Logger.MinTimeDiffMs) {
            toReturnSinceLast = this.padFront(timeDiffSinceLastMs, padLength);
        }
        else {
            toReturnSinceLast = this.padFront(' ', padLength, ' ');
        }
        ;
        toReturnSinceStart = this.padFront(timeDiffOVerAll, padLength, '0');
        toReturn = toReturnSinceStart + ' ' + toReturnSinceLast;
        this.TimeLast = timeNow;
        return toReturn;
    }
    padFront(input, desiredLength = 2, padChar = '0') {
        let toReturn = input.toString();
        let maxIter = 10;
        while ((toReturn.length < desiredLength) && maxIter > 0) {
            maxIter--;
            toReturn = padChar + toReturn;
        }
        return toReturn;
    }
    LogTimeStamp() {
        var result = this.padFront(this.TimeStart.getDate()) + "/" + this.padFront(this.TimeStart.getMonth() + 1) + "/" + this.TimeStart.getFullYear() + " " + this.padFront(this.TimeStart.getHours()) + ":" + this.padFront(this.TimeStart.getMinutes());
        return result;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/LoggerAgent/LoggerAgent.js
var LoggerAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class LoggerAgent_LoggerAgent {
    constructor() {
        this.__debugTextChangedCallbacks = [];
        this.AllLogWriters = [];
        this.MaxIndent = 20;
        this.TypeDiscriminator = TypeDiscriminator.ILoggerAgent;
        this.UseTimeStamp = true;
        this.MaxDepthBeforeThrow = 2000;
        this.Instantiate();
    }
    Instantiate() {
        this.Timer = new LoggerTimer_LoggerTimer;
        this.BufferWriter = new LogWriterBuffer();
        this.AddWriter(this.BufferWriter);
        this.__callDepth = -1;
        this.LogVal('TimeStamp', this.Timer.LogTimeStamp());
    }
    IntroduceSiblings(taskMonitor, errorHand) {
        this.TaskMonitor = taskMonitor;
        this.ErrorHand = errorHand;
    }
    FlushBuffer() {
        this.RemoveWriter(this.BufferWriter);
        this.LogVal('TimeStamp B', Date.now());
        let bufferAr = this.BufferWriter.GetBuffer();
        for (var idx = 0; idx < bufferAr.length; idx++) {
            this.Log(bufferAr[idx]);
        }
    }
    RemoveWriter(BufferWriter) {
        for (var idx = 0; idx < this.AllLogWriters.length; idx++) {
            let candidate = this.AllLogWriters[idx];
            if (candidate == BufferWriter) {
                this.AllLogWriters.splice(idx, 1);
                break;
            }
        }
    }
    AddWriter(writter) {
        this.HasWriters = true;
        this.AllLogWriters.push(writter);
    }
    SectionMarker(sectionTag) {
        this.Log("");
        this.Log("======================= " + sectionTag + " =======================");
        this.Log("");
    }
    IsNotNullOrUndefinedBool(title, subject) {
        var toReturn = false;
        if (subject) {
            if ((typeof subject) === 'undefined') {
                this.LogVal(title + ' Is Not Undefined', '!!! false !!!');
            }
            else {
                toReturn = true;
            }
        }
        else {
            this.LogVal(title + ' Is Not Null', '!!! false !!!');
        }
        return toReturn;
    }
    HandlerClearDebugText(self, verify = false) {
        this.FuncStart(this.HandlerClearDebugText.name);
        var proceed = true;
        if (verify) {
            proceed = confirm('Clear Debug TextArea ?');
        }
        if (proceed) {
            var newText = '--- Debug Text Reset ---';
        }
        this.FuncEnd(this.HandlerClearDebugText.name);
    }
    MarkerA() {
        this.__markerRaw('A');
    }
    MarkerB() {
        this.__markerRaw('B');
    }
    MarkerC() {
        this.__markerRaw('C');
    }
    MarkerD() {
        this.__markerRaw('D');
    }
    MarkerE() { this.__markerRaw('E'); }
    MarkerF() { this.__markerRaw('F'); }
    __markerRaw(marker) {
        this.Log('Marker ' + marker);
    }
    LogAsJsonPretty(texValName, jsonObj) {
        try {
            this.LogVal(texValName, JSON.stringify(jsonObj, null, 2));
        }
        catch (err) {
            this.Log('Unable to stringify obj');
        }
    }
    LogVal(textValName, textVal) {
        if (typeof textVal === 'undefined') {
            textVal = '{undefined}';
        }
        else if (textVal === null) {
            textVal = '{null}';
        }
        else {
            var asGuid = textVal;
            if (typeof asGuid === typeof GuidData_GuidData) {
                textVal = asGuid.Raw;
            }
        }
        textVal = textVal.toString();
        textValName = StaticHelpers_StaticHelpers.BufferString(textValName.toString(), 26, BufferChar.space, BufferDirection.right);
        const debugPrefix = '~~ ';
        let rawText = debugPrefix + textValName + ' : ' + textVal;
        if (this.AltColor === SharedConst.Const.Colors.ConsoleStyles.StyleFgBlue) {
            this.AltColor = SharedConst.Const.Colors.ConsoleStyles.StyleFgMagenta;
        }
        else {
            this.AltColor = SharedConst.Const.Colors.ConsoleStyles.StyleFgBlue;
        }
        let formattedText = this.StyleFormat(this.AltColor, rawText);
        this.Log(formattedText);
    }
    LogImportant(text) {
        text = this.StyleFormat(SharedConst.Const.Colors.ConsoleStyles.StyleBgYellow, text);
        this.Log(text);
    }
    Log(text, hasPrefix = false) {
        return LoggerAgent_awaiter(this, void 0, void 0, function* () {
            if (this.HasWriters) {
                var indent = '  ';
                let indentDepth = this.__callDepth % this.MaxIndent;
                for (var idx = 0; idx < indentDepth; idx++) {
                    text = indent + text;
                }
                var prefixLength = 3;
                if (!hasPrefix) {
                    for (var idx = 0; idx < prefixLength; idx++) {
                        text = ' ' + text;
                    }
                }
                this.__triggerAllDebugTextChangedCallbacks({
                    NewText: text,
                    Append: true
                });
                if (this.UseTimeStamp) {
                    let timeDiff = this.Timer.GetTimeDiff() + '  ';
                    text = timeDiff + text;
                }
                this.WriteToAllWriters(text);
            }
        });
    }
    WriteToAllWriters(text) {
        if (this.AllLogWriters) {
            this.AllLogWriters.forEach((oneWriter) => {
                if (oneWriter) {
                    try {
                        oneWriter.WriteText(text);
                    }
                    catch (err) {
                        console.log(this.WriteToAllWriters.name + ' ' + oneWriter.FriendlyName + ' | ' + err);
                    }
                }
                else {
                    console.log('Null writer');
                }
            });
        }
    }
    __triggerAllDebugTextChangedCallbacks(data) {
        for (var idx = 0; idx < this.__debugTextChangedCallbacks.length; idx++) {
            var oneCallback = this.__debugTextChangedCallbacks[idx];
            oneCallback.Func(oneCallback.Caller, data);
        }
    }
    StyleFormat(color, text) {
        return SharedConst.Const.Colors.ConsoleStyles.StyleEsc + color + text + SharedConst.Const.Colors.ConsoleStyles.StyleEsc + SharedConst.Const.Colors.ConsoleStyles.StyleReset;
    }
    CtorName(ctorName) {
        this.Log('Constructor: ' + ctorName);
    }
    resolveFuncText(text) {
        let displayText = '';
        if (Array.isArray(text)) {
            let isFirst = true;
            text.forEach((oneText) => {
                if (!isFirst) {
                    displayText += '.';
                }
                isFirst = false;
                displayText += oneText;
            });
        }
        else {
            displayText = text.toString();
        }
        return displayText;
    }
    AddOptionalValueToText(text, optionalValue) {
        let toReturn = text;
        if (optionalValue) {
            optionalValue = optionalValue.toString();
            if (optionalValue.length > 0) {
                toReturn = toReturn + ' : ' + optionalValue;
            }
        }
        return toReturn;
    }
    FuncStart(text, optionalValue) {
        text = this.resolveFuncText(text);
        if (optionalValue) {
            text = this.AddOptionalValueToText(text, optionalValue);
        }
        text = 's' + ' ' + this.__callDepth + ') ' + text;
        let formatted = this.StyleFormat(SharedConst.Const.Colors.ConsoleStyles.StyleFgGreen, text);
        this.Log(formatted, true);
        this.__callDepth++;
        if (this.__callDepth > this.MaxDepthBeforeThrow) {
            throw ('Logger - Max Depth Exceeded: ' + this.__callDepth);
        }
    }
    CTORStart(text) {
        this.FuncStart("[CTOR] " + text);
    }
    CTOREnd(text) {
        this.FuncEnd("[CTOR] " + text);
    }
    FuncEnd(text, optionalValueInput) {
        text = this.resolveFuncText(text);
        this.__callDepth--;
        if (this.__callDepth < 0) {
            this.__callDepth = 0;
        }
        text = 'e' + ' ' + this.__callDepth + ') ' + text;
        if (optionalValueInput) {
            text = this.AddOptionalValueToText(text, optionalValueInput);
        }
        let formatted = this.StyleFormat(SharedConst.Const.Colors.ConsoleStyles.StyleFgRed, text);
        this.Log(formatted, true);
    }
    NotNullCheck(title, value) {
        if (typeof value === 'undefined') {
            this.LogVal(title, 'Is Undefined');
        }
        else if (!value) {
            this.LogVal(title, 'Is Null');
        }
        else {
            this.LogVal(title, 'Is Not Null');
        }
    }
    IsNullOrUndefined(subject) {
        var toReturn = '{unknown}';
        if (subject) {
            if ((typeof subject) === 'undefined') {
                toReturn = 'Is Undefined';
            }
            else {
                toReturn = 'Not Null';
            }
        }
        else {
            toReturn = 'Is Null';
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/TaskMonitor/TaskMonitor.js


class TaskMonitor_TaskMonitor {
    constructor() {
        this.TaskBucketStarted = [];
        this.TaskBucketCompleted = [];
        this.DelaySendMs = 20;
        this.CancelRequestedFlag = false;
        this.IdleNotificationSent = false;
        this.MinElapsedBeforeIsIdleMs = 20;
        this.TypeDiscriminator = TypeDiscriminator.TaskMonitor;
    }
    IntroduceSiblings(logger, errorHand) {
        this.Logger = logger;
        this.ErrorHand = errorHand;
    }
    IntroduceCoreSiblings(logger, errorHand) {
        this.Logger = logger;
        this.ErrorHand = errorHand;
    }
    ResetCancel() {
        this.CancelRequestedFlag = false;
    }
    InitAfterErrorHand(taskMutationEvent_Subject) {
        this.TaskMutationEvent_Subject = taskMutationEvent_Subject;
    }
    AsyncTaskStarted(name) {
        this.MarkActivity();
        this.TaskBucketStarted.push(name);
        this.BuildAndSendPayload(TaskMutationType.TaskAdded);
    }
    MarkActivity() {
        this.LastActivityTime = new Date().getTime();
        this.IdleNotificationSent = false;
    }
    NotifyWaiting(waitingMessage) {
        if (waitingMessage) {
            this.BuildAndSendPayload(TaskMutationType.TaskWaitingYes, waitingMessage);
        }
        else {
            this.BuildAndSendPayload(TaskMutationType.TaskWaitingNo, waitingMessage);
        }
    }
    IsTaskListEmpty() {
        return this.TaskBucketStarted.length === 0;
    }
    totalTaskCount() {
        return this.TaskBucketCompleted.length + this.TaskBucketStarted.length;
    }
    AsyncTaskCompleted(name) {
        this.MarkActivity();
        let foundIndex = this.TaskBucketStarted.indexOf(name);
        if (foundIndex > -1) {
            let toRemove = this.TaskBucketStarted.splice(foundIndex, 1);
            this.TaskBucketCompleted.push(toRemove[0]);
            this.SendIfEmpty();
        }
        else {
            console.log('Error - mismatch on tasks ' + name);
            console.log(JSON.stringify(this.TaskBucketStarted, null, 2));
        }
        this.BuildAndSendPayload(TaskMutationType.TaskCompleted);
    }
    LogValues() {
        this.Logger.LogImportant(this.LogValues.name + ' Task remaining : total - ' + this.TaskBucketStarted.length + ' : ' + this.totalTaskCount());
        if (this.AsyncTaskStarted.length < 20) {
            this.Logger.LogAsJsonPretty('TaskBucketStarted', this.TaskBucketStarted);
        }
    }
    SendIfEmpty() {
        if (this.IsTaskListEmpty()) {
            this.DelaySend();
        }
    }
    BuildAndSendPayload(mutationType, additionalMessage = false) {
        let payload = {
            MutationType: mutationType,
            IsTaskEmpty: this.IsTaskListEmpty(),
            RemainingTaskCount: this.TaskBucketStarted.length,
            TotalTaskCount: this.totalTaskCount(),
            CompletedCount: this.TaskBucketCompleted.length,
            AdditionalMessage: additionalMessage.toString(),
        };
        this.TaskMutationEvent_Subject.NotifyObserversAsync(payload);
    }
    TimeRemainingBeforeIdle() {
        let timeElapsedSinceLastActivity = new Date().getTime() - this.LastActivityTime;
        let timeRemainingBeforeIdle = this.MinElapsedBeforeIsIdleMs - timeElapsedSinceLastActivity;
        if (timeRemainingBeforeIdle < 0) {
            timeRemainingBeforeIdle = 0;
        }
        return timeRemainingBeforeIdle;
    }
    TasksHaveGoneIdle() {
        let timeRemaining = this.TimeRemainingBeforeIdle();
        let toReturn = timeRemaining < 1;
        return toReturn;
    }
    SendTaskHaveGoneIdle() {
        this.IdleNotificationSent = true;
        this.BuildAndSendPayload(TaskMutationType.TasksHaveGoneIdle);
    }
    IsEmptyAndIdle() {
        let toReturn = this.IsTaskListEmpty() && this.TasksHaveGoneIdle();
        return toReturn;
    }
    DelaySend() {
        if (!this.IdleNotificationSent) {
            if (this.IsEmptyAndIdle()) {
                this.SendTaskHaveGoneIdle();
            }
            else {
                setTimeout(() => {
                    this.DelaySend();
                }, this.DelaySendMs);
            }
        }
    }
    RequestCancel(requestor) {
        console.log("Cancel Requested by: " + requestor);
        this.CancelRequestedFlag = true;
    }
    IsCancelRequested() {
        return this.CancelRequestedFlag;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/TaskListMutationEvent/TaskListMutationEvent_Subject.js


class TaskListMutationEvent_Subject_TaskListMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor() {
        super(...arguments);
        this.TypeDiscriminator = TypeDiscriminator.TaskListMutationEvent_Subject;
        this.ShowLogActions = false;
        this.Friendly_Subject = TaskListMutationEvent_Subject_TaskListMutationEvent_Subject.name;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/CoreFactory.js





class CoreFactory_CoreFactory {
    static BuildCommonCore() {
        let commonCore = new CommonCore();
        commonCore.Logger = new LoggerAgent_LoggerAgent();
        commonCore.TaskMonitor = new TaskMonitor_TaskMonitor();
        commonCore.ErrorHand = new ErrorHandlerAgent_ErrorHandlerAgent();
        commonCore.Logger.IntroduceSiblings(commonCore.TaskMonitor, commonCore.ErrorHand);
        commonCore.TaskMonitor.IntroduceSiblings(commonCore.Logger, commonCore.ErrorHand);
        commonCore.ErrorHand.IntroduceSiblings(commonCore.Logger, commonCore.TaskMonitor);
        let taskMutationEvent_Subject = new TaskListMutationEvent_Subject_TaskListMutationEvent_Subject(commonCore);
        commonCore.TaskMonitor.InitAfterErrorHand(taskMutationEvent_Subject);
        return commonCore;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/HindeCore.js

class HindeCore_HindeCore extends CommonCore {
    constructor(commonCore) {
        super();
        this.ErrorHand = commonCore.ErrorHand;
        this.Logger = commonCore.Logger;
        this.TaskMonitor = commonCore.TaskMonitor;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/_HindeCoreBase.js


class _HindeCoreBase_FrontBase extends _CommonBase {
    constructor(hindeCore) {
        super(hindeCore);
        ErrorHandlerAgent_ErrorHandlerAgent.ThrowIfNullOrUndefinedStatic(_CommonBase.name, [hindeCore]);
        ErrorHandlerAgent_ErrorHandlerAgent.ThrowIfNullOrUndefinedStatic(_CommonBase.name, [hindeCore.ErrorHand, hindeCore.Logger, hindeCore.TaskMonitor]);
        this.Logger = hindeCore.Logger;
        this.HindeCore = hindeCore;
        this.ErrorHand = hindeCore.ErrorHand;
        this.TaskMonitor = hindeCore.TaskMonitor;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content-Top/scripts/Agents/AutoSnapShotAgent.js
var AutoSnapShotAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class AutoSnapShotAgent_AutoSnapShotAgent extends _HindeCoreBase_FrontBase {
    constructor(hindeCore, settingsAgent, atticAgent, scUiProxy) {
        super(hindeCore);
        this.AutoSaveHasBeenScheduled = false;
        this.LastKnownSavedState = null;
        this.SettingsAgent = settingsAgent;
        this.AtticAgent = atticAgent;
        this.ScUiProxy = scUiProxy;
    }
    AutoSaveSnapShot() {
        return AutoSnapShotAgent_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.AutoSaveSnapShot.name);
            let windowStatePrior = this.LastKnownSavedState;
            this.ScUiProxy.GetStateOfScUiProxyWindow(SnapShotFlavor.Autosave)
                .then((windowStateNew) => {
                let hasCorrectData = windowStateNew && windowStateNew.Meta && windowStateNew.Meta.Hash
                    && windowStatePrior && windowStatePrior.Meta && windowStatePrior.Meta.Hash;
                if (!hasCorrectData || (windowStateNew.Meta.Hash !== windowStatePrior.Meta.Hash)) {
                    this.Logger.Log('states are different, save snap shot');
                    this.AtticAgent.WriteStateOfSitecoreToStorage(windowStateNew);
                }
                else {
                    this.Logger.Log('states are same, no save');
                }
                this.LastKnownSavedState = windowStateNew;
            })
                .catch((err) => this.ErrorHand.HandleFatalError(this.AutoSaveSnapShot.name, err));
            this.Logger.FuncEnd(this.AutoSaveSnapShot.name);
        });
    }
    ScheduleIntervalTasks() {
        this.Logger.FuncStart(this.ScheduleIntervalTasks.name);
        this.Logger.LogVal('Has been scheduled: ', this.AutoSaveHasBeenScheduled);
        let autoSaveSetting = this.SettingsAgent.HindSiteSettingsBucket.GetByKey(_30_SettingKey_SettingKey.AutoSaveIntervalMin);
        this.Logger.LogVal('autoSaveSetting: ', autoSaveSetting.HindSiteSetting.ValueAsInt());
        if (autoSaveSetting.HindSiteSetting.ValueAsInt() > 0) {
            if (!this.AutoSaveHasBeenScheduled) {
                var self = this;
                var intervalMs = StaticHelpers_StaticHelpers.MinToMs(autoSaveSetting.HindSiteSetting.ValueAsInt());
                window.setInterval(() => {
                    self.AutoSaveSnapShot();
                }, intervalMs / SharedConst.Const.Debug.SpeedUpAutoSaveIntervalFactor);
                this.AutoSaveHasBeenScheduled = true;
            }
        }
        this.Logger.FuncEnd(this.ScheduleIntervalTasks.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfSnapshots.js
class DefaultStateOfStorageSnapshots {
    constructor() {
        this.CreationDate = new Date(1970);
        this.SnapShots = [];
        this.FavoriteCount = 0;
        this.PlainCount = 0;
        this.SnapShotsAutoCount = 0;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content-Top/scripts/Agents/ContentAtticAgent.js
var ContentAtticAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class ContentAtticAgent_ContentAtticAgent extends _HindeCoreBase_FrontBase {
    constructor(repoAgent, hindeCore) {
        super(hindeCore);
        this.Logger.CTORStart(ContentAtticAgent_ContentAtticAgent.name);
        this.RepoAgent = repoAgent;
        this.Logger.CTOREnd(ContentAtticAgent_ContentAtticAgent.name);
    }
    InitContentAtticManager(settingAutoSnapshotRetainDays) {
        this.SettingAutoSnapshotRetainDays = settingAutoSnapshotRetainDays;
    }
    WriteStateOfSitecoreToStorage(stateOfSitecoreWindow) {
        return ContentAtticAgent_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentAtticAgent_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WriteStateOfSitecoreToStorage.name);
                let storageKey = ContentConst.Const.Storage.WindowRoot + ContentConst.Const.Storage.SnapShotPrefix + stateOfSitecoreWindow.Meta.SessionId + '.' + stateOfSitecoreWindow.Meta.TimeStamp.valueOf();
                stateOfSitecoreWindow.Meta.StorageKey = storageKey;
                var snapShotAsString = JSON.stringify(stateOfSitecoreWindow);
                this.RepoAgent.WriteByKey(stateOfSitecoreWindow.Meta.StorageKey, snapShotAsString);
                this.CleanOutOldAutoSavedData();
                resolve();
                this.Logger.FuncEnd(this.WriteStateOfSitecoreToStorage.name);
            }));
        });
    }
    GetFromStorageBySnapShotId(needleId) {
        this.Logger.FuncStart(this.GetFromStorageBySnapShotId.name, needleId.Raw);
        var DateOneWinStoreMatch = null;
        let foundStorage = this.GetStateOfStorageSnapShots();
        for (var idx = 0; idx < foundStorage.SnapShots.length; idx++) {
            var candidate = foundStorage.SnapShots[idx];
            if (candidate.Meta.SnapshotId.Raw === needleId.Raw) {
                DateOneWinStoreMatch = candidate;
                break;
            }
        }
        if (!DateOneWinStoreMatch) {
            this.ErrorHand.WarningAndContinue(this.GetFromStorageBySnapShotId.name, 'No match found for: ' + needleId.Raw);
        }
        this.Logger.FuncEnd(this.GetFromStorageBySnapShotId.name);
        return DateOneWinStoreMatch;
    }
    ValidateStorageData(oneRaw) {
        var candidate = JSON.parse(oneRaw.data);
        if (candidate) {
            if (!candidate.Meta) {
                candidate.Meta = new DefaultMetaData_DefaultMetaData();
            }
            candidate.Meta.TimeStamp = new Date(candidate.Meta.TimeStamp);
            if (!candidate.Meta.WindowType) {
                candidate.Meta.WindowType = ScWindowType.Unknown;
                candidate.Friendly.WindowType = ScWindowType[candidate.Meta.WindowType];
            }
            if (!candidate.Friendly) {
                candidate.Friendly = new DefaultFriendly_DefaultFriendly();
            }
            if (!candidate.Friendly.NickName) {
                candidate.Friendly.NickName = '';
            }
        }
        else {
            this.ErrorHand.HandleFatalError(this.ValidateStorageData.name, 'Saved data did not import correctly');
        }
        return candidate;
    }
    GetAllLocalStorageAsIOneStorageData() {
        let prefix = ContentConst.Const.Storage.WindowRoot + ContentConst.Const.Storage.SnapShotPrefix;
        let result = this.RepoAgent.GetBulkLocalStorageByKeyPrefix(prefix);
        return result;
    }
    GetAllStorage() {
        var toReturn = [];
        let rawStorageData = this.GetAllLocalStorageAsIOneStorageData();
        if (rawStorageData) {
            for (var idx = 0; idx < rawStorageData.length; idx++) {
                toReturn.push(this.ValidateStorageData(rawStorageData[idx]));
            }
        }
        toReturn.sort((a, b) => +b.Meta.TimeStamp - +a.Meta.TimeStamp);
        toReturn = this.FilterOutOldData(toReturn);
        return toReturn;
    }
    CleanOneStorageItem(candidate, autoCount) {
        var maxAutoSaveDiff = this.SettingAutoSnapshotRetainDays * 24 * 60 * 60 * 1000;
        var deleteFlag = false;
        var now = new Date();
        if (candidate.Meta.Flavor == SnapShotFlavor.Autosave) {
            if (autoCount > ContentConst.Const.MaxAutoToSaveCount) {
                this.Logger.LogVal('Delete (max count :' + ContentConst.Const.MaxAutoToSaveCount + ')', candidate.Meta.TimeStamp.toString());
                deleteFlag = true;
            }
            autoCount++;
        }
        if (now.getTime() - candidate.Meta.TimeStamp.getTime() > maxAutoSaveDiff) {
            this.Logger.LogVal('Delete (Old : max' + ContentConst.Const.DefaultMaxAutoSaveAgeDays + ' days)', candidate.Meta.TimeStamp.toString());
            deleteFlag = true;
        }
        if (deleteFlag) {
            try {
                this.Logger.LogVal('Cleaning old autosave', candidate.Meta.SnapshotId);
                window.localStorage.removeItem(candidate.Meta.StorageKey);
            }
            catch (e) {
                this.ErrorHand.HandleFatalError(this.CleanOutOldAutoSavedData.name, 'unable to delete key: ' + candidate.Meta.SnapshotId);
            }
        }
        return autoCount;
    }
    CleanFoundStorage(currentWindowStorage) {
        try {
            if (currentWindowStorage) {
                var cacheLength = currentWindowStorage.SnapShots.length;
                var autoCount = 0;
                for (var idx = 0; idx < cacheLength; idx++) {
                    var candidate = currentWindowStorage.SnapShots[idx];
                    autoCount = this.CleanOneStorageItem(candidate, autoCount);
                }
            }
        }
        catch (err) {
            this.ErrorHand.HandleFatalError(this.CleanFoundStorage.name, err);
        }
    }
    CleanOutOldAutoSavedData() {
        this.Logger.FuncStart(this.CleanOutOldAutoSavedData.name);
        try {
            if (!this.SettingAutoSnapshotRetainDays || this.SettingAutoSnapshotRetainDays < 1) {
                this.SettingAutoSnapshotRetainDays = ContentConst.Const.DefaultMaxAutoSaveAgeDays;
            }
            let currentWindowStorage = this.GetStateOfStorageSnapShots();
            this.CleanFoundStorage(currentWindowStorage);
        }
        catch (err) {
            throw (this.CleanOutOldAutoSavedData.name, err);
        }
        this.Logger.FuncEnd(this.CleanOutOldAutoSavedData.name);
    }
    GetStateOfStorageSnapShots() {
        this.Logger.FuncStart(this.GetStateOfStorageSnapShots.name);
        let stateOfSnapshotStorage = new DefaultStateOfStorageSnapshots();
        let result = this.GetAllStorage();
        stateOfSnapshotStorage.SnapShots = result;
        stateOfSnapshotStorage.CreationDate = new Date();
        this.UpdateCounts(stateOfSnapshotStorage);
        this.Logger.FuncEnd(this.GetStateOfStorageSnapShots.name);
        return stateOfSnapshotStorage;
    }
    UpdateCounts(storageAllSnapshots) {
        storageAllSnapshots.FavoriteCount = 0;
        storageAllSnapshots.SnapShotsAutoCount = 0;
        storageAllSnapshots.PlainCount = 0;
        for (var idx = 0; idx < storageAllSnapshots.SnapShots.length; idx++) {
            var candidate = storageAllSnapshots.SnapShots[idx];
            if (candidate.Meta.Flavor === SnapShotFlavor.Autosave) {
                storageAllSnapshots.SnapShotsAutoCount++;
            }
            else if (candidate.Meta.Flavor === SnapShotFlavor.Favorite) {
                storageAllSnapshots.FavoriteCount++;
            }
            else {
                storageAllSnapshots.PlainCount++;
            }
        }
    }
    FilterOutOldData(data) {
        var toReturn = data;
        return toReturn;
    }
    RemoveAndConfirmRemoval(storageMatch) {
        this.Logger.LogVal('Key to Delete', storageMatch.Meta.SnapshotId);
        let storageKey = storageMatch.Meta.StorageKey;
        this.RepoAgent.RemoveByKey(storageKey);
        let result = this.RepoAgent.ReadDataOfKey(storageKey);
        if (result) {
            this.ErrorHand.HandleFatalError(this.RemoveAndConfirmRemoval.name, 'Snapshot still exists after deleting');
        }
    }
    RemoveSnapshotFromStorageById(targetId) {
        this.Logger.FuncStart(this.RemoveSnapshotFromStorageById.name);
        try {
            if (targetId) {
                var storageMatch = this.GetFromStorageBySnapShotId(targetId);
                if (storageMatch) {
                    this.RemoveAndConfirmRemoval(storageMatch);
                }
                else {
                    this.ErrorHand.WarningAndContinue(this.RemoveSnapshotFromStorageById.name, 'no storage match');
                }
            }
            else {
                this.ErrorHand.WarningAndContinue(this.RemoveSnapshotFromStorageById.name, 'no target id');
            }
        }
        catch (err) {
            this.ErrorHand.HandleFatalError(this.RemoveSnapshotFromStorageById.name, err);
        }
        this.Logger.FuncEnd(this.RemoveSnapshotFromStorageById.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content-Top/scripts/Managers/ContentMessageManager.js

class ContentMessageManager_ContentMessageManager extends _HindeCoreBase_FrontBase {
    constructor(hindeCore, contentMessageBroker) {
        super(hindeCore);
        this.Logger.CTORStart(ContentMessageManager_ContentMessageManager.name);
        this.ContentMessageBroker = contentMessageBroker;
        this.Logger.CTOREnd(ContentMessageManager_ContentMessageManager.name);
    }
    InitContentMessageManager() {
        this.Logger.FuncStart([ContentMessageManager_ContentMessageManager.name, this.InitContentMessageManager.name]);
        this.ContentMessageBroker.BeginListening();
        this.Logger.FuncEnd([ContentMessageManager_ContentMessageManager.name, this.InitContentMessageManager.name]);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/ReplyCommandMsgFlag.js
var ReplyCommandMsgFlag;
(function (ReplyCommandMsgFlag) {
    ReplyCommandMsgFlag[ReplyCommandMsgFlag["Unknown"] = 0] = "Unknown";
    ReplyCommandMsgFlag[ReplyCommandMsgFlag["RespCurState"] = 10499463] = "RespCurState";
    ReplyCommandMsgFlag[ReplyCommandMsgFlag["RespListeningAndReady"] = 10781265] = "RespListeningAndReady";
    ReplyCommandMsgFlag[ReplyCommandMsgFlag["RespNotReady"] = 10058031] = "RespNotReady";
    ReplyCommandMsgFlag[ReplyCommandMsgFlag["RespTaskFailed"] = 10685617] = "RespTaskFailed";
    ReplyCommandMsgFlag[ReplyCommandMsgFlag["RespTaskSuccessful"] = 10030157] = "RespTaskSuccessful";
    ReplyCommandMsgFlag[ReplyCommandMsgFlag["RespFailedDidNotValidate"] = 10922052] = "RespFailedDidNotValidate";
})(ReplyCommandMsgFlag || (ReplyCommandMsgFlag = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultMessageContentToController_Payload.js

class DefaultMessageContentToController_Payload_DefaultMessageContentToController_Payload {
    constructor() {
        this.StateOfStorageSnapShots = new DefaultStateOfStorageSnapshots();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/DefaultMsgContentToController.js


class DefaultMsgContentToController_DefaultMsgContentToController {
    constructor(replyCommandFlag) {
        this.Payload = new DefaultMessageContentToController_Payload_DefaultMessageContentToController_Payload();
        this.MsgFlagReply = ReplyCommandMsgFlag.Unknown;
        this.MsgFlagReply = replyCommandFlag;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content-Top/scripts/Proxies/BrowserMessageBroker_Content.js
var BrowserMessageBroker_Content_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






class BrowserMessageBroker_Content_BrowserMessageBroker_Content extends _HindeCoreBase_FrontBase {
    constructor(hindeCore, settingsAgent, apiManager, atticMan, contentBrowserProxy, autoSnapShotAgent, commandRouter) {
        super(hindeCore);
        this.Logger.CTORStart(BrowserMessageBroker_Content_BrowserMessageBroker_Content.name);
        this.SettingsAgent = settingsAgent;
        this.HindSiteScUiProxy = apiManager;
        this.AtticAgent = atticMan;
        this.ContentBrowserProxy = contentBrowserProxy;
        this.AutoSnapShotAgent = autoSnapShotAgent;
        this.CommandRouter = commandRouter;
        this.Instantiate();
        this.Logger.CTOREnd(BrowserMessageBroker_Content_BrowserMessageBroker_Content.name);
    }
    Instantiate() {
    }
    BeginListening() {
        this.Logger.FuncStart(this.BeginListening.name);
        this.WireEvents();
        this.Logger.Log('Listening for messages');
        this.Logger.FuncEnd(this.BeginListening.name);
    }
    WireEvents() {
        if (this.ContentBrowserProxy) {
            this.ContentBrowserProxy.AddListenerForPopUp((request) => this.ContentReceiveRequest(request));
        }
    }
    ValidateRequest(messageFromController) {
        this.Logger.FuncStart(this.ValidateRequest.name);
        var isValid = true;
        if (messageFromController) {
            if (messageFromController.CurrentContentPrefs) {
            }
            else {
                this.ErrorHand.WarningAndContinue(this.ValidateRequest.name, 'No CurrentContentPrefs');
                messageFromController.IsValid = false;
                isValid = false;
            }
        }
        else {
            this.ErrorHand.WarningAndContinue(this.ValidateRequest.name, 'messageFromController is null');
            isValid = false;
        }
        messageFromController.IsValid = isValid;
        this.Logger.FuncEnd(this.ValidateRequest.name, isValid.toString());
        return messageFromController;
    }
    NotifyFail(failrReason) {
        this.ErrorHand.ErrorAndContinue(this.NotifyFail.name, 'Fail ' + failrReason);
    }
    ContentReceiveRequest(messageControllerToContent) {
        return BrowserMessageBroker_Content_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => BrowserMessageBroker_Content_awaiter(this, void 0, void 0, function* () {
                this.Logger.Log('');
                this.Logger.Log('');
                this.Logger.Log('');
                this.Logger.FuncStart(this.ContentReceiveRequest.name, StaticHelpers_StaticHelpers.MsgFlagAsString(messageControllerToContent.MsgFlag));
                this.Logger.LogVal('ce butt', this.SettingsAgent.GetByKey(_30_SettingKey_SettingKey.AutoLogin).ValueAsBool());
                if (messageControllerToContent) {
                    messageControllerToContent = this.ValidateRequest(messageControllerToContent);
                    if (messageControllerToContent.IsValid) {
                        this.SettingsAgent.UpdateSettingsFromPopUpMsg(messageControllerToContent.CurrentContentPrefs);
                        yield this.ReqMsgRouter(messageControllerToContent)
                            .then((msgContentToController) => {
                            this.Logger.Log('responding: ' + ReplyCommandMsgFlag[msgContentToController.MsgFlagReply]);
                            resolve(msgContentToController);
                        })
                            .catch((err) => {
                            this.NotifyFail(err);
                            resolve(new DefaultMsgContentToController_DefaultMsgContentToController(ReplyCommandMsgFlag.RespTaskFailed));
                        });
                    }
                    else {
                        resolve(new DefaultMsgContentToController_DefaultMsgContentToController(ReplyCommandMsgFlag.RespFailedDidNotValidate));
                    }
                }
                else {
                    reject('no request');
                }
                this.Logger.FuncEnd(this.ContentReceiveRequest.name, StaticHelpers_StaticHelpers.MsgFlagAsString(messageControllerToContent.MsgFlag));
                this.Logger.Log('');
                this.Logger.Log('');
                this.Logger.Log('');
                this.Logger.Log('Resuming Standby');
                this.Logger.Log('');
                this.Logger.Log('');
                this.Logger.Log('');
            }));
        });
    }
    ReqMsgRouter(messageFromController) {
        return BrowserMessageBroker_Content_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => BrowserMessageBroker_Content_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.ReqMsgRouter.name, StaticHelpers_StaticHelpers.MsgFlagAsString(messageFromController.MsgFlag));
                let commandRouterParams = {
                    MsgFlag: messageFromController.MsgFlag,
                    NewNickName: messageFromController.StateOfPopUI.NewNickName,
                    SelectSnapShotId: messageFromController.StateOfPopUI.SelectSnapShotId,
                    SelectText: '',
                };
                yield this.CommandRouter.RouteCommand(commandRouterParams)
                    .then(() => this.ConstructResponse(messageFromController.MsgFlag))
                    .then((response) => {
                    resolve(response);
                })
                    .catch((err) => reject(this.ReqMsgRouter.name + ' | ' + err));
                this.Logger.FuncEnd(this.ReqMsgRouter.name);
            }));
        });
    }
    ConstructResponse(msgFlag) {
        return BrowserMessageBroker_Content_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => BrowserMessageBroker_Content_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.ConstructResponse.name);
                let responseContentToController = new DefaultMsgContentToController_DefaultMsgContentToController(ReplyCommandMsgFlag.Unknown);
                yield this.HindSiteScUiProxy.GetStateOfScUiProxy()
                    .then((stateOfScUiProxy) => {
                    responseContentToController.Payload.StateOfScUiProxy_Live = stateOfScUiProxy;
                    responseContentToController.Payload.LastReq = msgFlag;
                    responseContentToController.MsgFlagReply = ReplyCommandMsgFlag.RespTaskSuccessful;
                    responseContentToController.Payload.LastReqFriendly = ReqCommandMsgFlag[msgFlag];
                    responseContentToController.Payload.ErrorStack = ['todo'];
                })
                    .then(() => this.AtticAgent.GetStateOfStorageSnapShots())
                    .then((stateOfStorageSnapShots) => responseContentToController.Payload.StateOfStorageSnapShots = stateOfStorageSnapShots)
                    .then(() => resolve(responseContentToController))
                    .catch((err) => reject(err));
                this.Logger.FuncEnd(this.ConstructResponse.name);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/CommandHandlerDataForContent/ApiCommandPayload.js
class ApiCommandPayload {
    constructor() {
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/CommandHandlerDataForContent/CommandPayloadForInternal.js

class CommandPayloadForInternal_CommandPayloadForInternal extends _CommonBase {
    constructor(hindeCore, atticAgent, toastAgent, settingsAgent, autoSnapShotAgent, apiPayload) {
        super(hindeCore);
        this.ContentMessageBroker = null;
        this.hindeCore = null;
        this.TargetDoc = null;
        this.TargetNickName = '';
        this.ToastAgent = null;
        this.TopLevelDoc = null;
        this.AtticAgent = atticAgent;
        this.ToastAgent = toastAgent;
        this.SettingsAgent = settingsAgent;
        this.AutoSnapShotAgent = autoSnapShotAgent;
        this.ApiPayload = apiPayload;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/CommandType.js
var CommandType;
(function (CommandType) {
    CommandType[CommandType["Unknown"] = 0] = "Unknown";
    CommandType[CommandType["PopUp"] = 1] = "PopUp";
    CommandType[CommandType["Content"] = 2] = "Content";
    CommandType[CommandType["Api"] = 3] = "Api";
    CommandType[CommandType["ContentInternal"] = 4] = "ContentInternal";
})(CommandType || (CommandType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/HotKeyEvent/HotKeyEvent_Observer.js

class HotKeyEvent_Observer_HotKeyEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(commonCore, callback) {
        super(commonCore, HotKeyEvent_Observer_HotKeyEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content-Top/scripts/Events/CommandStartEndCancelEvent/CommandStartEndCancelEvent_Observer.js


class CommandStartEndCancelEvent_Observer_CommandStartEndCancelEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, CommandStartEndCancelEvent_Observer_CommandStartEndCancelEvent_Observer.name, callback);
        this.TypeDiscriminator = TypeDiscriminator.CommandStartEndCancelEvent_Observer;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content-Top/scripts/Events/CommandStartEndCancelEvent/CommandStartEndCancelEvent_Subject.js


class CommandStartEndCancelEvent_Subject_CommandStartEndCancelEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor() {
        super(...arguments);
        this.TypeDiscriminator = TypeDiscriminator.CommandStartEndCancelEvent_Subject;
        this.ShowLogActions = true;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content-Top/scripts/Events/CommandStartEndCancelEvent/CommandState_State.js
var CommandState_State;
(function (CommandState_State) {
    CommandState_State[CommandState_State["Unknwon"] = 0] = "Unknwon";
    CommandState_State[CommandState_State["CommandStarted"] = 1] = "CommandStarted";
    CommandState_State[CommandState_State["CommandCompletedSuccessfully"] = 2] = "CommandCompletedSuccessfully";
    CommandState_State[CommandState_State["CommandCompletedWithError"] = 3] = "CommandCompletedWithError";
    CommandState_State[CommandState_State["CommandCanceled"] = 4] = "CommandCanceled";
})(CommandState_State || (CommandState_State = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content-Top/scripts/Recipes/_ContentRecipeBase.js


class _ContentRecipeBase_ContentRecipeBase extends _HindeCoreBase_FrontBase {
    constructor(hindeCore, commandParams, dependancies, friendly) {
        super(hindeCore);
        if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(commandParams)) {
            this.Friendly = friendly;
            this.CommandParams = commandParams;
            this.Dependancies = dependancies;
        }
        else {
            this.ErrorHand.HandleFatalError(_ContentRecipeBase_ContentRecipeBase.name, 'null check: ' + this.Friendly);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content-Top/scripts/Recipes/RecipeChangeNickName.js
var RecipeChangeNickName_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class RecipeChangeNickName_RecipeChangeNickName extends _ContentRecipeBase_ContentRecipeBase {
    constructor(hindeCore, commandParams, dependancies) {
        super(hindeCore, commandParams, dependancies, RecipeChangeNickName_RecipeChangeNickName.name);
        if (StaticHelpers_StaticHelpers.IsNullOrUndefined([this.CommandParams.NewNickname, this.CommandParams.TargetSnapShotId, this.Dependancies.AtticAgent])) {
            this.ErrorHand.HandleFatalError(RecipeChangeNickName_RecipeChangeNickName.name, 'Null check');
        }
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeChangeNickName_awaiter(this, void 0, void 0, function* () {
            this.UpdateNickname()
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    UpdateNickname() {
        return new Promise((resolve, reject) => RecipeChangeNickName_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.UpdateNickname.name);
            if (this.CommandParams.TargetSnapShotId) {
                if (this.CommandParams.NewNickname) {
                    var storageMatch;
                    storageMatch = this.Dependancies.AtticAgent.GetFromStorageBySnapShotId(this.CommandParams.TargetSnapShotId);
                    if (storageMatch) {
                        if ((storageMatch.Meta.Flavor === SnapShotFlavor.Autosave
                            ||
                                (storageMatch.Meta.Flavor === SnapShotFlavor.Unknown))) {
                            storageMatch.Meta.Flavor = SnapShotFlavor.Manual;
                        }
                        storageMatch.Friendly.NickName = this.CommandParams.NewNickname;
                    }
                    else {
                        reject(this.UpdateNickname.name + ' - No storage match');
                    }
                    this.Dependancies.AtticAgent.WriteStateOfSitecoreToStorage(storageMatch);
                    resolve();
                }
                else {
                    reject(this.UpdateNickname.name + ' - something was missing');
                }
            }
            else {
                reject(this.UpdateNickname.name + ' no payload or id');
            }
            this.Logger.FuncEnd(this.UpdateNickname.name);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content-Top/scripts/Recipes/RecipeForceAutoSnapShot.js
var RecipeForceAutoSnapShot_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class RecipeForceAutoSnapShot_RecipeForceAutoSnapShot extends _ContentRecipeBase_ContentRecipeBase {
    constructor(hindeCore, commandParams, dependancies) {
        super(hindeCore, commandParams, dependancies, RecipeForceAutoSnapShot_RecipeForceAutoSnapShot.name);
    }
    Execute() {
        return RecipeForceAutoSnapShot_awaiter(this, void 0, void 0, function* () {
            try {
                this.Dependancies.AutoSnapShotAgent.AutoSaveSnapShot();
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.Execute.name, err);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content-Top/scripts/Recipes/RecipeInitFromQueryStr.js
var RecipeInitFromQueryStr_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class RecipeInitFromQueryStr_RecipeSetStateFromMostRecent extends _ContentRecipeBase_ContentRecipeBase {
    constructor(hindeCore, commandData, dependancies) {
        super(hindeCore, commandData, dependancies, RecipeInitFromQueryStr_RecipeInitFromQueryStr.name);
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeInitFromQueryStr_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(RecipeInitFromQueryStr_RecipeSetStateFromMostRecent.name);
            let dataStorage = this.Dependancies.AtticAgent.GetStateOfStorageSnapShots();
            if (dataStorage) {
                let mostRecentDate = new Date(1970, 1, 1);
                let mostRecent = null;
                dataStorage.SnapShots.forEach((snapShot) => {
                    if (snapShot.Meta.TimeStamp > mostRecentDate) {
                        mostRecentDate = snapShot.Meta.TimeStamp;
                        mostRecent = snapShot;
                    }
                });
                yield this.Dependancies.ScUiProxy.SetStateOfSitecoreWindowAsync(this.CommandParams.ApiPayload, mostRecent)
                    .then(() => resolve())
                    .catch((err) => reject(RecipeInitFromQueryStr_RecipeSetStateFromMostRecent.name + ' | ' + err));
            }
            this.Logger.FuncEnd(RecipeInitFromQueryStr_RecipeSetStateFromMostRecent.name);
        }));
    }
}
class RecipeInitFromQueryStr_RecipeInitFromQueryStr extends _ContentRecipeBase_ContentRecipeBase {
    constructor(hindeCore, commandData, dependancies) {
        super(hindeCore, commandData, dependancies, RecipeInitFromQueryStr_RecipeInitFromQueryStr.name);
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeInitFromQueryStr_awaiter(this, void 0, void 0, function* () {
            yield this.PvtInitFromQueryString()
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    PvtInitFromQueryString() {
        return RecipeInitFromQueryStr_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeInitFromQueryStr_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.PvtInitFromQueryString.name);
                if (this.Dependancies.DocumentJacket.UrlJacket.QueryStringHasKey(QueryStrKey.hsTargetSs)) {
                    let qsValue = (this.Dependancies.DocumentJacket.UrlJacket.GetQueryStringValueByKey(QueryStrKey.hsTargetSs));
                    if (Guid_Guid.IsValidGuidStr(qsValue)) {
                        let targetGuid = Guid_Guid.ParseGuid(qsValue, false);
                        if (targetGuid && targetGuid !== Guid_Guid.GetEmptyGuid()) {
                            this.Logger.LogVal("targetGuid", targetGuid.Raw);
                            var dataOneWindowStorage;
                            dataOneWindowStorage = this.Dependancies.AtticAgent.GetFromStorageBySnapShotId(targetGuid);
                            this.Dependancies.ScUiProxy.SetStateOfSitecoreWindowAsync(this.CommandParams.ApiPayload, dataOneWindowStorage);
                        }
                        else {
                            reject('Either no snapshot provided or an illegal one was found');
                        }
                    }
                    else {
                        this.Logger.Log('guid is not a valid guid');
                    }
                }
                else {
                    this.Logger.Log('Does not have qs target');
                    resolve();
                }
                this.Logger.FuncEnd(this.PvtInitFromQueryString.name);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content-Top/scripts/Recipes/RecipeRemoveItemFromStorage.js
var RecipeRemoveItemFromStorage_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class RecipeRemoveItemFromStorage_RecipeRemoveItemFromStorage extends _ContentRecipeBase_ContentRecipeBase {
    constructor(hindeCore, commandData, dependancies) {
        super(hindeCore, commandData, dependancies, RecipeRemoveItemFromStorage_RecipeRemoveItemFromStorage.name);
    }
    Execute() {
        return RecipeRemoveItemFromStorage_awaiter(this, void 0, void 0, function* () {
            try {
                this.Dependancies.AtticAgent.RemoveSnapshotFromStorageById(this.CommandParams.TargetSnapShotId);
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.Execute.name, err);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content-Top/scripts/Recipes/RecipeSaveState.js
var RecipeSaveState_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class RecipeSaveState_RecipeSaveStateManual extends _ContentRecipeBase_ContentRecipeBase {
    constructor(hindeCore, commandData, dependancies) {
        super(hindeCore, commandData, dependancies, RecipeSaveState_RecipeSaveStateManual.name);
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeSaveState_awaiter(this, void 0, void 0, function* () {
            yield this.Dependancies.ScUiProxy.GetStateOfScUiProxyWindow(SnapShotFlavor.Manual)
                .then((windowState) => {
                this.Dependancies.AtticAgent.WriteStateOfSitecoreToStorage(windowState);
            })
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content-Top/scripts/Recipes/RecipeToggleFavorite.js
var RecipeToggleFavorite_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class RecipeToggleFavorite_RecipeToggleFavorite extends _ContentRecipeBase_ContentRecipeBase {
    constructor(hindeCore, commandData, dependancies) {
        super(hindeCore, commandData, dependancies, RecipeToggleFavorite_RecipeToggleFavorite.name);
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeToggleFavorite_awaiter(this, void 0, void 0, function* () {
            if (this.CommandParams.TargetSnapShotId) {
                let result = this.Dependancies.AtticAgent.GetFromStorageBySnapShotId(this.CommandParams.TargetSnapShotId);
                if (result.Meta.Flavor === SnapShotFlavor.Favorite) {
                    result.Meta.Flavor = SnapShotFlavor.Manual;
                }
                else {
                    result.Meta.Flavor = SnapShotFlavor.Favorite;
                }
                this.Dependancies.AtticAgent.WriteStateOfSitecoreToStorage(result);
                resolve();
            }
            else {
                reject('no targetId');
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content-Top/scripts/Proxies/CommandRunnerInternal.js
var CommandRunnerInternal_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class CommandRunnerInternal_CommandRunnerInternal extends _HindeCoreBase_FrontBase {
    constructor(hindeCore, atticAgent, autoSnapShotAgent, scUiProxy, documentJacket) {
        super(hindeCore);
        this.Dependancies = {
            AtticAgent: atticAgent,
            AutoSnapShotAgent: autoSnapShotAgent,
            ScUiProxy: scUiProxy,
            HindeCore: this.HindeCore,
            DocumentJacket: documentJacket
        };
    }
    SetNickName(commandParams) {
        return CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
                let recipe = new RecipeChangeNickName_RecipeChangeNickName(this.HindeCore, commandParams, this.Dependancies);
                recipe.Execute()
                    .then(() => resolve())
                    .catch((err) => reject(this.DebugForceAutoSnapShot.name + ' | ' + err));
            }));
        });
    }
    Ping() {
        return new Promise((resolve, reject) => CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
            resolve(ReplyCommandMsgFlag.RespListeningAndReady);
        }));
    }
    DebugForceAutoSnapShot(commandParams) {
        return CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
                let recipe = new RecipeForceAutoSnapShot_RecipeForceAutoSnapShot(this.HindeCore, commandParams, this.Dependancies);
                recipe.Execute()
                    .then(() => resolve())
                    .catch((err) => reject(this.DebugForceAutoSnapShot.name + ' | ' + err));
            }));
        });
    }
    SaveWindowState(commandParams) {
        return CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
                let recipe = new RecipeSaveState_RecipeSaveStateManual(this.HindeCore, commandParams, this.Dependancies);
                yield recipe.Execute()
                    .then(resolve)
                    .catch((err) => reject(err));
            }));
        });
    }
    ToggleFavorite(commandParams) {
        return new Promise((resolve, reject) => CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
            yield new RecipeToggleFavorite_RecipeToggleFavorite(this.HindeCore, commandParams, this.Dependancies).Execute()
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    SetStateFromMostRecent(commandParams) {
        return CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart(this.SetStateFromMostRecent.name);
                let recipe = new RecipeInitFromQueryStr_RecipeSetStateFromMostRecent(this.HindeCore, commandParams, this.Dependancies);
                yield recipe.Execute();
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.SetStateFromQueryString.name, err);
            }
            this.Logger.FuncEnd(this.SetStateFromMostRecent.name);
        });
    }
    SetStateFromQueryString(commandParams) {
        return CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
            try {
                let recipe = new RecipeInitFromQueryStr_RecipeInitFromQueryStr(this.HindeCore, commandParams, this.Dependancies);
                recipe.Execute();
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.SetStateFromQueryString.name, err);
            }
        });
    }
    RemoveSnapShot(commandParams) {
        return CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
                let recipe = new RecipeRemoveItemFromStorage_RecipeRemoveItemFromStorage(this.HindeCore, commandParams, this.Dependancies);
                yield recipe.Execute()
                    .then(resolve)
                    .catch((err) => reject(err));
            }));
        });
    }
    SetStateOfSitecoreWindow(commandParams, dependancies) {
        return new Promise((resolve, reject) => CommandRunnerInternal_awaiter(this, void 0, void 0, function* () {
            dependancies.HindeCore.Logger.LogAsJsonPretty("IdOfSelect", commandParams.TargetSnapShotId);
            let dataOneWindowStorage = dependancies.AtticAgent.GetFromStorageBySnapShotId(commandParams.TargetSnapShotId);
            if (dataOneWindowStorage) {
                dependancies.ScUiProxy.SetStateOfSitecoreWindowAsync(commandParams.ApiPayload, dataOneWindowStorage)
                    .then(() => resolve())
                    .catch((err) => reject(this.SetStateOfSitecoreWindow.name + ' | ' + err));
            }
            ;
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content-Top/scripts/Proxies/CommandToExecuteData.js

class CommandToExecuteData_CommandToExecuteData extends _HindeCoreBase_FrontBase {
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content-Top/scripts/Proxies/CommandRouter.js
var CommandRouter_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};












class CommandRouter_CommandRouter extends _HindeCoreBase_FrontBase {
    constructor(hindeCore, scUiProxy, toastAgent, atticAgent, settingsAgent, autoSnapShotAgent, documentJacket, deepHotKeyAgent) {
        super(hindeCore);
        this.ToastAgent = toastAgent;
        this.ScUiProxy = scUiProxy;
        this.AtticAgent = atticAgent;
        this.SettingsAgent = settingsAgent;
        this.AutoSnapShotAgent = autoSnapShotAgent;
        this.DocumentJacket = documentJacket;
        this.DeepHotKeyAgent = deepHotKeyAgent;
        this.Instantiate();
    }
    Instantiate() {
        this.InternalCommandRunner = new CommandRunnerInternal_CommandRunnerInternal(this.HindeCore, this.AtticAgent, this.AutoSnapShotAgent, this.ScUiProxy, this.DocumentJacket);
        this.CommandTriggeredEvent_Subject = new CommandStartEndCancelEvent_Subject_CommandStartEndCancelEvent_Subject(this.HindeCore);
        this.CommandTriggeredEvent_Observer = new CommandStartEndCancelEvent_Observer_CommandStartEndCancelEvent_Observer(this.HindeCore, this.OnCommandStartEndCancelEvent.bind(this));
        this.CommandTriggeredEvent_Subject.RegisterObserver(this.CommandTriggeredEvent_Observer);
        this.HotKeyEvent_Observer = new HotKeyEvent_Observer_HotKeyEvent_Observer(this.CommonCore, this.CallBackOnHotKeyEvent.bind(this));
        this.DeepHotKeyAgent.HotKeyEvent_Subject.RegisterObserver(this.HotKeyEvent_Observer);
        this.Dependancies = {
            AtticAgent: this.AtticAgent,
            AutoSnapShotAgent: this.AutoSnapShotAgent,
            ScUiProxy: this.ScUiProxy,
            DocumentJacket: this.DocumentJacket,
            HindeCore: this.HindeCore
        };
    }
    CallBackOnHotKeyEvent(hotKeyEvent_Payload) {
        this.Logger.LogImportant('received : ' + ReqCommandMsgFlag[hotKeyEvent_Payload.ReqCommandMsgFlag]);
        let commandParams = {
            MsgFlag: hotKeyEvent_Payload.ReqCommandMsgFlag,
            NewNickName: null,
            SelectSnapShotId: null,
            SelectText: hotKeyEvent_Payload.SelectText,
        };
        this.RouteCommand(commandParams);
    }
    OnCommandStartEndCancelEvent(payload) {
        return CommandRouter_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.OnCommandStartEndCancelEvent.name);
            if (payload.CommandState == CommandState_State.CommandStarted) {
                this.ToastAgent.ShowToastAsync('Starting to do something');
            }
            else if (payload.CommandState == CommandState_State.CommandCompletedSuccessfully) {
            }
            this.Logger.FuncEnd(this.OnCommandStartEndCancelEvent.name);
        });
    }
    ExecuteInternalCommand(commandToExecute, routingParams) {
        return new Promise((resolve, reject) => CommandRouter_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.ExecuteInternalCommand.name);
            if (commandToExecute) {
                this.Logger.LogVal('msgFlag', ReqCommandMsgFlag[routingParams.MsgFlag]);
                let commandParams = this.BuildCommandPayloadForInternal();
                if (routingParams) {
                    commandParams.TargetSnapShotId = routingParams.SelectSnapShotId;
                    commandParams.NewNickname = routingParams.NewNickName;
                }
                let self = this;
                yield commandToExecute.bind(self.InternalCommandRunner)(commandParams, this.Dependancies)
                    .then(() => this.Logger.MarkerC())
                    .then(() => {
                    let payloadComplete = {
                        CommandState: CommandState_State.CommandCompletedSuccessfully
                    };
                })
                    .then(() => resolve())
                    .catch((err) => this.ErrorHand.HandleFatalError(this.ExecuteInternalCommand.name, err));
            }
            this.Logger.FuncEnd(this.ExecuteInternalCommand.name);
        }));
    }
    BuildCommandPayloadForInternal() {
        let scProxyPayload = this.BuildScProxyPayload();
        let commandParams = new CommandPayloadForInternal_CommandPayloadForInternal(this.HindeCore, this.AtticAgent, this.ToastAgent, this.SettingsAgent, this.AutoSnapShotAgent, scProxyPayload);
        return commandParams;
    }
    BuildScProxyPayload() {
        let commandData = new ApiCommandPayload();
        return commandData;
    }
    RouteCommand(routingParams) {
        return CommandRouter_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => CommandRouter_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.RouteCommand.name, ReqCommandMsgFlag[routingParams.MsgFlag]);
                let commandData = this.CalculateCommandToExec(routingParams.MsgFlag);
                let payload = {
                    CommandState: CommandState_State.CommandStarted
                };
                this.CommandTriggeredEvent_Subject.NotifyObserversAsync(payload);
                if (commandData.CommandType == CommandType.Api) {
                    yield this.ExecuteApiCommand(commandData.commandToExecute, routingParams.MsgFlag)
                        .then(() => resolve())
                        .catch((err) => reject(err));
                }
                else if (commandData.CommandType = CommandType.ContentInternal) {
                    yield this.ExecuteInternalCommand(commandData.commandToExecute, routingParams)
                        .then(() => {
                        this.Logger.Log('Completed the internal command');
                        resolve();
                    })
                        .catch((err) => reject(err));
                }
                if (commandData) {
                }
                else {
                    this.ErrorHand.HandleFatalError(this.RouteCommand.name, 'did not find command');
                }
                this.Logger.FuncEnd(this.RouteCommand.name);
            }));
        });
    }
    ExecuteApiCommand(functionToExecute, msgFlag) {
        return new Promise((resolve, reject) => CommandRouter_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.ExecuteApiCommand.name);
            if (functionToExecute) {
                let commandData = this.BuildScProxyPayload();
                yield functionToExecute(commandData)
                    .then((response) => {
                    this.Logger.Log('Completed the API command');
                    resolve(response);
                })
                    .catch((err) => reject(err));
            }
            else {
                reject(this.ExecuteApiCommand.name + ' | no functionToExecute');
            }
            this.Logger.FuncEnd(this.ExecuteApiCommand.name);
        }));
    }
    CalculateCommandToExec(msgFlag) {
        let commandData = new CommandToExecuteData_CommandToExecuteData(this.HindeCore);
        commandData.commandToExecute = null;
        commandData.CommandType = CommandType.Unknown;
        switch (msgFlag) {
            case ReqCommandMsgFlag.ReqAddCETab:
                commandData.CommandType = CommandType.Api;
                commandData.commandToExecute = this.ScUiProxy.AddContentEditorToDesktopAsync;
                break;
            case ReqCommandMsgFlag.ReqUpdateNickName:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.SetNickName;
                break;
            case ReqCommandMsgFlag.ReqAdminB:
                commandData.CommandType = CommandType.Api;
                commandData.commandToExecute = this.ScUiProxy.AdminB;
                break;
            case ReqCommandMsgFlag.Ping:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.Ping;
                break;
            case ReqCommandMsgFlag.ReqOpenCE:
                commandData.CommandType = CommandType.Api;
                commandData.commandToExecute = this.ScUiProxy.OpenContentEditor;
                break;
            case ReqCommandMsgFlag.ReqToggleRawValues:
                commandData.CommandType = CommandType.Api;
                commandData.commandToExecute = (() => this.ScUiProxy.TriggerCERibbonCommand(ScRibbonCommand.ToggleRawValues));
                break;
            case ReqCommandMsgFlag.OpenCERibbonPresentationDetails:
                commandData.CommandType = CommandType.Api;
                commandData.commandToExecute = (() => this.ScUiProxy.TriggerCERibbonCommand(ScRibbonCommand.PresentationDetails));
                break;
            case ReqCommandMsgFlag.OpenCERibbonNavigateLinks:
                commandData.CommandType = CommandType.Api;
                commandData.commandToExecute = (() => this.ScUiProxy.TriggerCERibbonCommand(ScRibbonCommand.NavigateLinks));
                break;
            case ReqCommandMsgFlag.ReqNavigateBack:
                commandData.CommandType = CommandType.Api;
                commandData.commandToExecute = (() => this.ScUiProxy.TriggerCERibbonCommand(ScRibbonCommand.NavigateBack));
                break;
            case ReqCommandMsgFlag.ReqNavigateForward:
                commandData.CommandType = CommandType.Api;
                commandData.commandToExecute = (() => this.ScUiProxy.TriggerCERibbonCommand(ScRibbonCommand.NavigateForward));
                break;
            case ReqCommandMsgFlag.ReqNavigateUp:
                commandData.CommandType = CommandType.Api;
                commandData.commandToExecute = (() => this.ScUiProxy.TriggerCERibbonCommand(ScRibbonCommand.NavigateUp));
                break;
            case ReqCommandMsgFlag.ReqToggleFavorite:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.ToggleFavorite;
                break;
            case ReqCommandMsgFlag.ReqQuickPublish:
                commandData.CommandType = CommandType.Api;
                commandData.commandToExecute = this.ScUiProxy.PublischActiveCE;
                break;
            case ReqCommandMsgFlag.ReqGoToSelected:
                commandData.CommandType = CommandType.Api;
                commandData.commandToExecute = ((payload) => this.ScUiProxy.CEGoSelected(payload));
                break;
            case ReqCommandMsgFlag.ReqSetStateOfSitecoreSameWindow:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.SetStateOfSitecoreWindow;
                break;
            case ReqCommandMsgFlag.ReqToggleCompactCss:
                commandData.CommandType = CommandType.Api;
                commandData.commandToExecute = this.ScUiProxy.ToggleCompactCss;
                break;
            case ReqCommandMsgFlag.ReqTakeSnapShot:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.SaveWindowState;
                break;
            case ReqCommandMsgFlag.ReqRemoveFromStorage:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.RemoveSnapShot;
                break;
            case ReqCommandMsgFlag.ReqDebugAutoSnapShot:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.DebugForceAutoSnapShot;
                break;
            case ReqCommandMsgFlag.SetStateFromQueryString:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.SetStateFromQueryString;
                break;
            case ReqCommandMsgFlag.SetStateFromMostRecent:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.SetStateFromMostRecent;
                break;
            default:
                this.Logger.LogVal('Unhandled MsgFlag', ReqCommandMsgFlag[msgFlag]);
                break;
        }
        return commandData;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/KeyBoardComboEvent/KeyBoardComboEvent_Subject.js


class KeyBoardComboEvent_Subject_KeyBoardComboEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor() {
        super(...arguments);
        this.TypeDiscriminator = TypeDiscriminator.KeyBoardComboEvent_Subject;
        this.ShowLogActions = true;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/KeyPressJacket.js


class KeyPressJacket_KeyPressJacket extends _CommonBase {
    constructor(commoncore, keyPressCombosToListenFor) {
        super(commoncore);
        this.KeyPressCombos = keyPressCombosToListenFor;
        this.Instantiate();
        this.WireEvents();
    }
    Instantiate() {
        this.KeyBoardComboEvent_Subject = new KeyBoardComboEvent_Subject_KeyBoardComboEvent_Subject(this.CommonCore);
    }
    WireEvents() {
        window.addEventListener('keyup', ((event) => this.CallBackOnNativeKeyPress(event)), false);
    }
    CallBackOnNativeKeyPress(event) {
        let inComing = {
            IsShiftKey: false,
            IsAltKey: false,
            IsCtrlKey: false,
            Which: -1,
        };
        inComing.IsShiftKey = event.shiftKey;
        inComing.IsCtrlKey = event.ctrlKey;
        inComing.IsAltKey = event.altKey;
        inComing.Which = event.which;
        let matchingCombos = [];
        this.KeyPressCombos.forEach((userKeyPressCombo) => {
            if ((inComing.Which === userKeyPressCombo.KeyWhich)
                && (inComing.IsCtrlKey === userKeyPressCombo.IsCtrlKey)
                && (inComing.IsAltKey === userKeyPressCombo.IsAltKey)
                && (inComing.IsShiftKey === userKeyPressCombo.IsShiftKey)) {
                matchingCombos.push(userKeyPressCombo.HotKeyCommandFlag);
            }
        });
        if (matchingCombos.length > 0) {
            this.Logger.LogImportant('call back native');
            matchingCombos.forEach((commandFlag) => {
                let keyBoardComboEvent_Payload = {
                    ReqCommandMsgFlag: commandFlag
                };
                this.KeyBoardComboEvent_Subject.NotifyObserversAsync(keyBoardComboEvent_Payload);
            });
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/KeyBoardComboEvent/KeyBoardComboEvent_Observer.js

class KeyBoardComboEvent_Observer_KeyBoardComboEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(commonCore, callback) {
        super(commonCore, KeyBoardComboEvent_Observer_KeyBoardComboEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/DeepHotKey/HotKeys.js

class HotKeys {
}
HotKeys.AllHotKeys = [
    { Friendly: 'Go Selected - Ctrl+Alt+G', IsAltKey: true, IsCtrlKey: true, IsShiftKey: false, HotKeyCommandFlag: ReqCommandMsgFlag.ReqGoToSelected, KeyWhich: 71 },
    { Friendly: 'Take Snap Shot - Ctrl+Alt+P', IsAltKey: true, IsCtrlKey: true, IsShiftKey: false, HotKeyCommandFlag: ReqCommandMsgFlag.ReqTakeSnapShot, KeyWhich: 80 },
    { Friendly: 'Presentation Details - Ctrl+Alt+D', IsAltKey: true, IsCtrlKey: true, IsShiftKey: false, HotKeyCommandFlag: ReqCommandMsgFlag.OpenCERibbonPresentationDetails, KeyWhich: 68 },
    { Friendly: 'Navigate Links - Ctrl+Alt+L', IsAltKey: true, IsCtrlKey: true, IsShiftKey: false, HotKeyCommandFlag: ReqCommandMsgFlag.OpenCERibbonNavigateLinks, KeyWhich: 76 },
    { Friendly: 'Toggle Raw Values - Ctrl+Alt+{ ([)', IsAltKey: true, IsCtrlKey: true, IsShiftKey: false, HotKeyCommandFlag: ReqCommandMsgFlag.ReqToggleRawValues, KeyWhich: 219 },
    { Friendly: 'Navigate Back - Ctrl+Alt+Left Arrow,)', IsAltKey: true, IsCtrlKey: true, IsShiftKey: false, HotKeyCommandFlag: ReqCommandMsgFlag.ReqNavigateBack, KeyWhich: 37 },
    { Friendly: 'Navigate Forward - Ctrl+Alt+Right Arrow', IsAltKey: true, IsCtrlKey: true, IsShiftKey: false, HotKeyCommandFlag: ReqCommandMsgFlag.ReqNavigateForward, KeyWhich: 39 },
    { Friendly: 'Navigate Up - Ctrl+Alt+Up Arrow', IsAltKey: true, IsCtrlKey: true, IsShiftKey: false, HotKeyCommandFlag: ReqCommandMsgFlag.ReqNavigateUp, KeyWhich: 38 },
];

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/HotKeyEvent/HotKeyEvent_Subject.js


class HotKeyEvent_Subject_HotKeyEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor() {
        super(...arguments);
        this.TypeDiscriminator = TypeDiscriminator.HotKeyEvent_Subject;
        this.ShowLogActions = true;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/DeepHotKey/DeepHotKeyAgent.js
var DeepHotKeyAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class DeepHotKeyAgent_DeepHotKeyAgent extends _CommonBase {
    constructor(commonCore, urlJacket) {
        super(commonCore);
        this.Logger.CTORStart(DeepHotKeyAgent_DeepHotKeyAgent.name);
        this.UrlJacket = urlJacket;
        this.Instantiate();
        this.WireEvents();
        this.Logger.CTOREnd(DeepHotKeyAgent_DeepHotKeyAgent.name);
    }
    Instantiate() {
        this.KeyPressJacket = new KeyPressJacket_KeyPressJacket(this.CommonCore, HotKeys.AllHotKeys);
        this.KeyPressJacket_Observer = new KeyBoardComboEvent_Observer_KeyBoardComboEvent_Observer(this.CommonCore, this.CallBackOnKeyboardComboEvent.bind(this));
        this.HotKeyEvent_Subject = new HotKeyEvent_Subject_HotKeyEvent_Subject(this.CommonCore);
    }
    WireEvents() {
        this.Logger.FuncStart(this.WireEvents.name, 'Is top? ' + (window.self === window.top).toString());
        this.KeyPressJacket.KeyBoardComboEvent_Subject.RegisterObserver(this.KeyPressJacket_Observer);
        window.addEventListener(SharedConst.Const.KeyWords.Javascript.Events.Message, ((messageEvent) => this.CallBackOnMessageFromFrame(messageEvent)));
        this.Logger.FuncEnd(this.WireEvents.name, 'Is top? ' + (window.self === window.top).toString());
    }
    CallBackOnMessageFromFrame(event) {
        console.log(this.CallBackOnMessageFromFrame.name);
        if (event && event.origin === this.GetDomain()) {
            let deepHotKeydata = event.data;
            if (deepHotKeydata) {
                let hotKeyPayload = {
                    ReqCommandMsgFlag: deepHotKeydata.ReqCommandMsgFlag,
                    SelectText: window.getSelection ? window.getSelection().toString() : '',
                };
                this.HotKeyEvent_Subject.NotifyObserversAsync(hotKeyPayload);
            }
            else {
                console.log('incorrect data');
            }
        }
        else {
            console.log('not a valid domain: ' + event.origin);
        }
    }
    CallBackOnKeyboardComboEvent(keyboardComboEvent_Payload) {
        return DeepHotKeyAgent_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.CallBackOnKeyboardComboEvent.name);
            this.Logger.LogVal('keyBoardComboEvent ', ReqCommandMsgFlag[keyboardComboEvent_Payload.ReqCommandMsgFlag]);
            this.HandleHotKeyPayload(keyboardComboEvent_Payload);
            this.Logger.FuncEnd(this.CallBackOnKeyboardComboEvent.name);
        });
    }
    HandleTopWindow(hotKeyPayload) {
        this.Logger.LogImportant('hotkey received at top');
    }
    GetDomain() {
        let urlParts = this.UrlJacket.GetUrlParts();
        let combined = urlParts.Protocol + '//' + urlParts.HostAndPort;
        return combined;
    }
    BubbleMessageUp(hotKeyPayload) {
        this.Logger.FuncStart(this.BubbleMessageUp.name);
        let maxIter = 100;
        let currIter = 0;
        let candidateHasParent = true;
        window.top.postMessage(hotKeyPayload, this.GetDomain());
        this.Logger.FuncEnd(this.BubbleMessageUp.name);
    }
    HandleHotKeyPayload(hotKeyPayload) {
        if (hotKeyPayload) {
            if (window.self !== window.top) {
                this.BubbleMessageUp(hotKeyPayload);
            }
        }
        else {
            this.HandleTopWindow(hotKeyPayload);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content-Top/scripts/zContentTopEntryPoint.js
var zContentTopEntryPoint_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






















class zContentTopEntryPoint_ContentEntry {
    StartUpContent() {
        return zContentTopEntryPoint_awaiter(this, void 0, void 0, function* () {
            let commonCore = CoreFactory_CoreFactory.BuildCommonCore();
            this.HindeCore = new HindeCore_HindeCore(commonCore);
            this.InstantiateAgents_Content();
            yield yield DocumentJacket_DocumentJacket.FactoryMakeDocumentJacket(this.HindeCore, document)
                .then((documentJacket) => this.TopDocumentJacket = documentJacket)
                .then(() => this.InstantiateAndInit_Managers())
                .then(() => this.AtticAgent.CleanOutOldAutoSavedData())
                .catch((err) => commonCore.ErrorHand.HandleFatalError(this.StartUpContent.name, err));
            this.HindeCore.Logger.SectionMarker('e) ' + this.StartUpContent.name);
            this.HindeCore.Logger.Log('standing by');
        });
    }
    InstantiateAgents_Content() {
        try {
            this.HindeCore.Logger.SectionMarker('Instantiate Agents');
            this.RepoAgent = new RepositoryAgent_RepositoryAgent(this.HindeCore);
            this.SettingsAgent = new SettingsAgent_SettingsAgent(this.HindeCore, this.RepoAgent);
            this.SettingsAgent.Init_SettingsAgent();
            this.InitLogger();
            this.AtticAgent = new ContentAtticAgent_ContentAtticAgent(this.RepoAgent, this.HindeCore);
            this.ToastAgent = new ToastAgent_ToastAgent(this.HindeCore, document);
            this.ToastAgent.WireEvents();
            this.AtticAgent.InitContentAtticManager(this.SettingsAgent.GetByKey(_30_SettingKey_SettingKey.AutoSaveRetainDays).ValueAsInt());
        }
        catch (err) {
            this.ErrorHand.HandleFatalError(this.InstantiateAgents_Content.name, err);
        }
    }
    InstantiateAndInit_Managers() {
        return zContentTopEntryPoint_awaiter(this, void 0, void 0, function* () {
            try {
                this.HindeCore.Logger.SectionMarker('Instantiate and Initialize Managers');
                let contentMessageMan;
                let runTimeOptions = {
                    EnableDesktopStartBarButtonRename: this.SettingsAgent.GetByKey(_30_SettingKey_SettingKey.AutoRenameCeButton).ValueAsBool(),
                };
                this.ScUiAPI = new HindSiteScUiAPI_HindSiteScUiAPI(this.HindeCore.Logger, this.HindeCore.ErrorHand, this.HindeCore.TaskMonitor, this.TopDocumentJacket, runTimeOptions);
                this.AutoSnapShotAgent = new AutoSnapShotAgent_AutoSnapShotAgent(this.HindeCore, this.SettingsAgent, this.AtticAgent, this.ScUiAPI);
                this.ContentBrowserProxy = new ContentBrowserProxy_ContentBrowserProxy(this.HindeCore);
                let urlJacket = new UrlJacket_UrlJacket(this.HindeCore, window.URL.toString());
                let deepHotKeyAgent = new DeepHotKeyAgent_DeepHotKeyAgent(this.HindeCore, urlJacket);
                this.CommandRouter = new CommandRouter_CommandRouter(this.HindeCore, this.ScUiAPI, this.ToastAgent, this.AtticAgent, this.SettingsAgent, this.AutoSnapShotAgent, this.TopDocumentJacket, deepHotKeyAgent);
                let contentMessageBroker = new BrowserMessageBroker_Content_BrowserMessageBroker_Content(this.HindeCore, this.SettingsAgent, this.ScUiAPI, this.AtticAgent, this.ContentBrowserProxy, this.AutoSnapShotAgent, this.CommandRouter);
                contentMessageMan = new ContentMessageManager_ContentMessageManager(this.HindeCore, contentMessageBroker);
                yield this.ScUiAPI.InstantiateHindSiteScUiProxy()
                    .then(() => contentMessageMan.InitContentMessageManager())
                    .then(() => {
                    this.AutoSnapShotAgent.ScheduleIntervalTasks();
                })
                    .then(() => this.StartUp())
                    .then(() => this.HindeCore.Logger.Log('Init success'))
                    .catch((err) => this.ErrorHand.HandleFatalError('Content Entry Point', err));
                this.HindeCore.Logger.SectionMarker('e) Instantiate and Initialize Managers');
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.InstantiateAndInit_Managers.name, err);
            }
        });
    }
    TriggerStartupCommands() {
        let setStateFromX = {
            MsgFlag: ReqCommandMsgFlag.SetStateFromQueryString,
            NewNickName: null,
            SelectSnapShotId: null,
            SelectText: null,
        };
        if (this.TopDocumentJacket.UrlJacket.QueryStringHasKey(QueryStrKey.hsTargetSs)) {
            setStateFromX.MsgFlag = ReqCommandMsgFlag.SetStateFromQueryString,
                this.CommandRouter.RouteCommand(setStateFromX);
        }
        else if ((this.SettingsAgent.GetByKey(_30_SettingKey_SettingKey.AutoRestoreState)).ValueAsBool()) {
            this.HindeCore.Logger.Log('yup...has the setting');
            setStateFromX.MsgFlag = ReqCommandMsgFlag.SetStateFromMostRecent;
            this.CommandRouter.RouteCommand(setStateFromX);
        }
    }
    StartUp() {
        this.HindeCore.Logger.FuncStart(this.StartUp.name);
        this.TriggerStartupCommands();
        this.HindeCore.Logger.FuncEnd(this.StartUp.name);
    }
    InitLogger() {
        this.HindeCore.Logger.FuncStart(this.InitLogger.name);
        let enableLogger = this.SettingsAgent.GetByKey(_30_SettingKey_SettingKey.EnableDebugging);
        if (enableLogger.ValueAsBool() || SharedConst.Const.Debug.ForceLoggingEnabled) {
            let consoleLogWrite = new LoggerConsoleWriter();
            var RollingLogId = new RollingLogIdDrone_RollingLogIdDrone(this.SettingsAgent, this.HindeCore);
            let storageLogWriter = new LoggerStorageWriter();
            var nextLogId = RollingLogId.GetNextLogId();
            storageLogWriter.SetLogToStorageKey(nextLogId);
            this.HindeCore.Logger.AddWriter(consoleLogWrite);
            this.HindeCore.Logger.AddWriter(storageLogWriter);
        }
        this.HindeCore.Logger.FlushBuffer();
        this.HindeCore.Logger.FuncEnd(this.InitLogger.name);
    }
}
let contentEntry = new zContentTopEntryPoint_ContentEntry();
contentEntry.StartUpContent();


/***/ })
/******/ ]);