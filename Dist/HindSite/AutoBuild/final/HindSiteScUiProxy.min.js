(self["webpackChunksitecoretoolbarscriptlets"] = self["webpackChunksitecoretoolbarscriptlets"] || []).push([[813],{

/***/ 7723:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "t": () => /* binding */ ContentBrowserProxy
/* harmony export */ });
/* harmony import */ var _Shared_scripts_Proxies_Browser_BaseBrowserProxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7266);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class ContentBrowserProxy extends _Shared_scripts_Proxies_Browser_BaseBrowserProxy__WEBPACK_IMPORTED_MODULE_0__/* .BaseBrowserProxy */ .V {
    ExtensionGetUrl(arg0) {
        return browser.extension.getURL(arg0);
    }
    AddListenerForPopUp(callback) {
        browser.runtime.onMessage.addListener((request) => callback(request));
    }
    InitAsyncProperties() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([ContentBrowserProxy.name, this.InitAsyncProperties.name], err);
            }
        });
    }
}


/***/ }),

/***/ 8456:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "k": () => /* binding */ DocumentJacket
/* harmony export */ });
/* harmony import */ var _Shared_scripts_Agents_Drones_IterationDrone_IterationDrone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(442);
/* harmony import */ var _Shared_scripts_Classes_ReadyStateNAB__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9741);
/* harmony import */ var _Shared_scripts_Classes_StaticHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1579);
/* harmony import */ var _Shared_scripts_Enums_PromiseFailAction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6933);
/* harmony import */ var _Shared_scripts_Helpers_Guid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(3473);
/* harmony import */ var _Shared_scripts_Interfaces_InjectConst__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8856);
/* harmony import */ var _Shared_scripts_SharedConst__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5077);
/* harmony import */ var _Shared_scripts_CommonCoreBase__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(6679);
/* harmony import */ var _Elements_GenericElemJacket__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(4940);
/* harmony import */ var _Elements_FrameElemJacket__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(3128);
/* harmony import */ var _UrlJacket__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(7396);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};











class DocumentJacket extends _Shared_scripts_CommonCoreBase__WEBPACK_IMPORTED_MODULE_10__/* ._CommonBase */ .a {
    constructor(commonCore, nativeDocument) {
        super(commonCore);
        this.UrlJacket = null;
        this.DocId = _Shared_scripts_Helpers_Guid__WEBPACK_IMPORTED_MODULE_4__/* .Guid.NewRandomGuid */ .i.NewRandomGuid();
        this.LastKnownReadyStateNAB = null;
        this.Logger.CTORStart(DocumentJacket.name);
        this.NativeDocument = nativeDocument;
        this.Instantiate();
        this.Logger.CTOREnd(DocumentJacket.name);
    }
    Instantiate() {
    }
    GetLastKnownReadyState() {
        return this.LastKnownReadyStateNAB;
    }
    InstantiateSyncProperties() {
        return __awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([DocumentJacket.name, this.InstantiateSyncProperties.name]);
            try {
                this.UrlJacket = new _UrlJacket__WEBPACK_IMPORTED_MODULE_9__/* .UrlJacket */ .d(this.CommonCore, this.NativeDocument.URL);
                yield this.WaitForCompleteNAB_DocumentJacket(DocumentJacket.name)
                    .catch((err) => this.ErrorHand.HandleFatalError([DocumentJacket.name, this.InstantiateSyncProperties.name], err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([DocumentJacket.name, this.InstantiateSyncProperties.name], err);
            }
            this.Logger.FuncEnd([DocumentJacket.name, this.InstantiateSyncProperties.name]);
        });
    }
    static FactoryMakeDocumentJacket(commonCore, nativeDocument) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                commonCore.Logger.FuncStart(this.FactoryMakeDocumentJacket.name);
                commonCore.ErrorHand.ThrowIfNullOrUndefined([DocumentJacket.name, this.FactoryMakeDocumentJacket.name], [nativeDocument]);
                let documentJacket = new DocumentJacket(commonCore, nativeDocument);
                yield documentJacket.InstantiateSyncProperties()
                    .then(() => resolve(documentJacket))
                    .catch((err) => reject(commonCore.ErrorHand.FormatRejectMessage(this.FactoryMakeDocumentJacket.name, err)));
                commonCore.Logger.FuncEnd(this.FactoryMakeDocumentJacket.name);
            }));
        });
    }
    GetElementById(idStr) {
        let elementJacket = null;
        let htmlElement = this.NativeDocument.getElementById(idStr);
        if (htmlElement) {
            elementJacket = new _Elements_GenericElemJacket__WEBPACK_IMPORTED_MODULE_7__/* .GenericElemJacket */ .c(this.CommonCore, htmlElement);
        }
        return elementJacket;
    }
    QuerySelector(selector) {
        let elementJacket = null;
        let htmlElement = this.NativeDocument.querySelector(selector);
        if (htmlElement) {
            elementJacket = new _Elements_GenericElemJacket__WEBPACK_IMPORTED_MODULE_7__/* .GenericElemJacket */ .c(this.CommonCore, htmlElement);
        }
        return elementJacket;
    }
    GetContentDoc() {
        return this.NativeDocument;
    }
    GetParentJacket() {
        this.Logger.FuncStart(this.GetParentJacket.name);
        let toReturn = null;
        let thisParent = parent.document;
        if (thisParent) {
            toReturn = new DocumentJacket(this.CommonCore, thisParent);
        }
        this.Logger.FuncEnd(this.GetParentJacket.name);
        return toReturn;
    }
    WaitForFirstHostedFrame(querySelector) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForFirstHostedFrame.name, querySelector);
                yield this.WaitForGenericElemJacket(querySelector)
                    .then((genericElemJacket) => _Elements_FrameElemJacket__WEBPACK_IMPORTED_MODULE_8__/* .FrameJacket.FactoryFrameElemJackets */ .r.FactoryFrameElemJackets(this.CommonCore, [genericElemJacket]))
                    .then((frameElemJackets) => resolve(frameElemJackets[0]))
                    .catch((err) => reject(this.ErrorHand.FormatRejectMessage([this.WaitForFirstHostedFrame.name], err)));
                this.Logger.FuncEnd(this.WaitForFirstHostedFrame.name, querySelector);
            }));
        });
    }
    GetHostedFirstMatchingFrameElemJacket(querySelector) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetHostedFirstMatchingFrameElemJacket.name, querySelector);
                let toReturnFrameElemJacket = null;
                this.ErrorHand.ThrowIfNullOrUndefined(this.GetHostedFirstMatchingFrameElemJacket.name, [this.NativeDocument]);
                var queryResultIframes = this.NativeDocument.querySelectorAll('iframe');
                this.Logger.LogVal('found iframes', queryResultIframes.length);
                let filteredList = this.NativeDocument.querySelectorAll('iframe' + querySelector);
                this.Logger.LogVal('found filtered iframes', filteredList.length);
                let htmlElemAr = [];
                let firstHtmlIframeElement = null;
                if (filteredList && filteredList.length > 0) {
                    firstHtmlIframeElement = filteredList[0];
                }
                yield _Elements_FrameElemJacket__WEBPACK_IMPORTED_MODULE_8__/* .FrameJacket.FactoryFrameElemJackets */ .r.FactoryFrameElemJackets(this.CommonCore, [firstHtmlIframeElement])
                    .then((frameElemJackets) => toReturnFrameElemJacket = frameElemJackets[0])
                    .then(() => resolve(toReturnFrameElemJacket))
                    .catch((err) => reject(this.ErrorHand.FormatRejectMessage([DocumentJacket.name, this.GetHostedFirstMatchingFrameElemJacket.name], err)));
                this.Logger.FuncEnd(this.GetHostedFirstMatchingFrameElemJacket.name, querySelector);
            }));
        });
    }
    QueryResultNodeListToHtmlAr(queryResult) {
        let htmlElements = [];
        if (queryResult) {
            queryResult.forEach((result) => {
                htmlElements.push(result);
            });
        }
        return htmlElements;
    }
    GetHostedFrameJackets() {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            this.ErrorHand.ThrowIfNullOrUndefined(this.GetHostedFrameJackets.name, [this.NativeDocument]);
            var queryResults = this.NativeDocument.querySelectorAll(_Shared_scripts_Interfaces_InjectConst__WEBPACK_IMPORTED_MODULE_5__/* .ContentConst.Const.Selector.SC.IframeContent.sc920 */ .y.Const.Selector.SC.IframeContent.sc920);
            if (!queryResults) {
                queryResults = this.NativeDocument.querySelectorAll(_Shared_scripts_Interfaces_InjectConst__WEBPACK_IMPORTED_MODULE_5__/* .ContentConst.Const.Selector.SC.IframeContent.sc820 */ .y.Const.Selector.SC.IframeContent.sc820);
            }
            let htmlElements = this.QueryResultNodeListToHtmlAr(queryResults);
            yield _Elements_FrameElemJacket__WEBPACK_IMPORTED_MODULE_8__/* .FrameJacket.FactoryFrameElemJackets */ .r.FactoryFrameElemJackets(this.CommonCore, htmlElements)
                .then((frameElemJackets) => resolve(frameElemJackets))
                .catch((err) => reject(this.ErrorHand.FormatRejectMessage([DocumentJacket.name, this.GetHostedFrameJackets.name], err)));
        }));
    }
    Validate() {
        let url = this.UrlJacket.BuildFullUrlFromParts();
        if (!url) {
            this.ErrorHand.HandleFatalError(this.Validate.name, 'No URL');
        }
        else if (url.AbsUrl === _Shared_scripts_SharedConst__WEBPACK_IMPORTED_MODULE_6__/* .SharedConst.Const.UrlSuffix.AboutBlank */ .v.Const.UrlSuffix.AboutBlank) {
            this.ErrorHand.HandleFatalError(this.Validate.name, _Shared_scripts_SharedConst__WEBPACK_IMPORTED_MODULE_6__/* .SharedConst.Const.UrlSuffix.AboutBlank */ .v.Const.UrlSuffix.AboutBlank + ' not allowed');
        }
    }
    WaitForGenericElemJacket(selector, promiseFailAction = _Shared_scripts_Enums_PromiseFailAction__WEBPACK_IMPORTED_MODULE_3__/* .PromiseFailAction.Default */ .D.Default) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForGenericElemJacket.name, selector);
                var htmlElement = null;
                var iterationJr = new _Shared_scripts_Agents_Drones_IterationDrone_IterationDrone__WEBPACK_IMPORTED_MODULE_0__/* .IterationDrone */ .v(this.CommonCore, this.WaitForGenericElemJacket.name + ' - selector: "' + selector + '"', true);
                let firstFind = true;
                let genericElemJacket = null;
                while (!genericElemJacket && iterationJr.DecrementAndKeepGoing()) {
                    htmlElement = this.NativeDocument.querySelector(selector);
                    if (htmlElement && !_Shared_scripts_Classes_StaticHelpers__WEBPACK_IMPORTED_MODULE_2__/* .StaticHelpers.IsNullOrUndefined */ .y.IsNullOrUndefined(htmlElement)) {
                        if (firstFind) {
                            htmlElement = null;
                            firstFind = false;
                        }
                        else {
                            this.Logger.Log('found it');
                            genericElemJacket = new _Elements_GenericElemJacket__WEBPACK_IMPORTED_MODULE_7__/* .GenericElemJacket */ .c(this.CommonCore, htmlElement);
                        }
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (genericElemJacket) {
                    resolve(genericElemJacket);
                }
                else {
                    if (promiseFailAction === _Shared_scripts_Enums_PromiseFailAction__WEBPACK_IMPORTED_MODULE_3__/* .PromiseFailAction.Default */ .D.Default || promiseFailAction == _Shared_scripts_Enums_PromiseFailAction__WEBPACK_IMPORTED_MODULE_3__/* .PromiseFailAction.RejectThrow */ .D.RejectThrow) {
                        reject(iterationJr.IsExhaustedMsg);
                    }
                    else if (promiseFailAction === _Shared_scripts_Enums_PromiseFailAction__WEBPACK_IMPORTED_MODULE_3__/* .PromiseFailAction.ResolveNull */ .D.ResolveNull) {
                        resolve(null);
                    }
                }
                this.Logger.FuncEnd(this.WaitForGenericElemJacket.name, selector);
            }));
        });
    }
    WaitForThenClick(selectorAr) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            this.ErrorHand.ThrowIfNullOrUndefined(this.WaitForThenClick.name, [selectorAr, this.NativeDocument]);
            var foundHtmlElement = null;
            var iterationJr = new _Shared_scripts_Agents_Drones_IterationDrone_IterationDrone__WEBPACK_IMPORTED_MODULE_0__/* .IterationDrone */ .v(this.CommonCore, this.WaitForThenClick.name + ' | ' + JSON.stringify(selectorAr), true);
            let foundSelector = '';
            while (!foundHtmlElement && iterationJr.DecrementAndKeepGoing()) {
                for (var idx = 0; idx < selectorAr.length; idx++) {
                    foundSelector = selectorAr[idx];
                    foundHtmlElement = this.NativeDocument.querySelector(foundSelector);
                    if (foundHtmlElement) {
                        break;
                    }
                }
                yield iterationJr.Wait();
            }
            if (foundHtmlElement) {
                try {
                    this.Logger.LogAsJsonPretty(this.WaitForThenClick.name + ' clicking', foundSelector);
                    foundHtmlElement.click();
                    resolve();
                }
                catch (err) {
                    reject(this.ErrorHand.FormatRejectMessage([DocumentJacket.name, this.WaitForThenClick.name], err));
                }
            }
            else {
                if (!foundHtmlElement && iterationJr.IsExhausted) {
                    reject(iterationJr.IsExhaustedMsg);
                }
                else {
                    reject(this.ErrorHand.FormatRejectMessage([DocumentJacket.name, this.WaitForThenClick.name], 'unknown reason'));
                }
            }
        }));
    }
    RaceWaitAndClick(selector) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                yield this.WaitForThenClick([selector.sc920, selector.sc820])
                    .then(() => resolve())
                    .catch((err) => reject(this.RaceWaitAndClick.name + ' | ' + err));
            }));
        });
    }
    WaitForAndClickWithPayload(selector, payload) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForAndClickWithPayload.name, selector);
            yield this.WaitForThenClick([selector])
                .then(() => resolve(payload))
                .catch(ex => {
                this.ErrorHand.HandleFatalError(this.WaitForAndClickWithPayload.name, ex);
                reject(ex);
            });
        }));
    }
    WaitForCompleteNAB_DocumentJacket(friendly) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart([DocumentJacket.name, this.WaitForCompleteNAB_DocumentJacket.name], friendly);
                this.Logger.LogVal('url', this.NativeDocument.URL);
                this.Logger.LogVal('readyState', this.NativeDocument.readyState);
                this.ErrorHand.ThrowIfNullOrUndefined(this.WaitForCompleteNAB_DocumentJacket.name, this.NativeDocument);
                var iterationJr = new _Shared_scripts_Agents_Drones_IterationDrone_IterationDrone__WEBPACK_IMPORTED_MODULE_0__/* .IterationDrone */ .v(this.CommonCore, this.WaitForCompleteNAB_DocumentJacket.name, false);
                this.LastKnownReadyStateNAB = new _Shared_scripts_Classes_ReadyStateNAB__WEBPACK_IMPORTED_MODULE_1__/* .ReadyStateNAB */ .e(this.CommonCore, this.NativeDocument);
                while (iterationJr.DecrementAndKeepGoing() && !this.LastKnownReadyStateNAB.IsCompleteNAB()) {
                    this.LastKnownReadyStateNAB.LogDebugValues();
                    yield iterationJr.Wait();
                }
                this.LastKnownReadyStateNAB.LogDebugValues();
                if (iterationJr.IsExhausted) {
                    this.Logger.Log(iterationJr.IsExhaustedMsg);
                    reject(iterationJr.IsExhaustedMsg);
                }
                else {
                    resolve(this.LastKnownReadyStateNAB);
                }
                this.Logger.FuncEnd([DocumentJacket.name, this.WaitForCompleteNAB_DocumentJacket.name], friendly);
            }));
        });
    }
}


/***/ }),

/***/ 3128:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "r": () => /* binding */ FrameJacket
/* harmony export */ });
/* harmony import */ var _Shared_scripts_Agents_Drones_IterationDrone_IterationDrone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(442);
/* harmony import */ var _Shared_scripts_Classes_ReadyStateNAB__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9741);
/* harmony import */ var _Shared_scripts_SharedConst__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5077);
/* harmony import */ var _Document_DocumentJacket__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8456);
/* harmony import */ var _ElementJacketOfType__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(7304);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class FrameJacket extends _ElementJacketOfType__WEBPACK_IMPORTED_MODULE_4__/* .ElementJacketOfType */ .X {
    constructor(commonCore, htmlIframeElement) {
        super(commonCore, htmlIframeElement);
    }
    static MfgrFrameElemJacketsStep1(commonCore, inputValue) {
        let htmlIframeElement = null;
        if (inputValue instanceof _ElementJacketOfType__WEBPACK_IMPORTED_MODULE_4__/* .ElementJacketOfType */ .X) {
            if (inputValue.NodeTagName === _Shared_scripts_SharedConst__WEBPACK_IMPORTED_MODULE_2__/* .SharedConst.Const.KeyWords.NodeTagName.IFrame */ .v.Const.KeyWords.NodeTagName.IFrame) {
                htmlIframeElement = inputValue.NativeElement;
            }
            else {
                commonCore.ErrorHand.HandleFatalError([FrameJacket.name, this.FactoryFrameElemJackets.name], 'Invalid tag name: ' + inputValue.NodeTagName);
            }
        }
        else if (inputValue instanceof HTMLElement) {
            htmlIframeElement = inputValue;
        }
        let frameElemJacket = new FrameJacket(commonCore, htmlIframeElement);
        return frameElemJacket;
    }
    static FactoryFrameElemJackets(commonCore, inputValue) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            commonCore.Logger.FuncStart([FrameJacket.name, this.FactoryFrameElemJackets.name]);
            let frameElemJacketAr = [];
            inputValue.forEach((inputValue) => {
                frameElemJacketAr.push(this.MfgrFrameElemJacketsStep1(commonCore, inputValue));
            });
            let promiseArFrame = [];
            frameElemJacketAr.forEach((frameElemJacket) => {
                promiseArFrame.push(frameElemJacket.PrepareFrameJacket());
            });
            yield Promise.all(promiseArFrame)
                .then(() => resolve(frameElemJacketAr))
                .catch((err) => reject(commonCore.ErrorHand.FormatRejectMessage([FrameJacket.name, this.FactoryFrameElemJackets.name], err)));
            commonCore.Logger.FuncEnd([FrameJacket.name, this.FactoryFrameElemJackets.name]);
        }));
    }
    PrepareFrameJacket() {
        return __awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([FrameJacket.name, this.PrepareFrameJacket.name]);
            try {
                yield this.WaitForCompleteNABFrameElement(FrameJacket.name + this.PrepareFrameJacket.name)
                    .then(() => _Document_DocumentJacket__WEBPACK_IMPORTED_MODULE_3__/* .DocumentJacket.FactoryMakeDocumentJacket */ .k.FactoryMakeDocumentJacket(this.CommonCore, this.NativeElement.contentDocument))
                    .then((documentJacket) => this.DocumentJacket = documentJacket)
                    .catch((err) => this.ErrorHand.HandleFatalError(this.PrepareFrameJacket.name, err));
                this.NativeIframeId = this.NativeElement.id;
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.PrepareFrameJacket.name, err);
            }
            this.Logger.FuncEnd([FrameJacket.name, this.PrepareFrameJacket.name]);
        });
    }
    GetUrlJacket() {
        return this.DocumentJacket.UrlJacket;
    }
    SetFrameStyling(StateOfFrameStyling) {
        this.Logger.FuncStart(this.SetFrameStyling.name, FrameJacket.name);
        this.NativeElement.style.height = StateOfFrameStyling.Height;
        this.NativeElement.style.left = StateOfFrameStyling.Left;
        this.NativeElement.style.position = StateOfFrameStyling.Position;
        this.NativeElement.style.top = StateOfFrameStyling.Top;
        this.NativeElement.style.width = StateOfFrameStyling.Width;
        this.NativeElement.style.zIndex = StateOfFrameStyling.ZIndex;
        this.Logger.FuncEnd(this.SetFrameStyling.name, FrameJacket.name);
    }
    GetFrameStyling() {
        let toReturn = null;
        try {
            let sourceStyle = this.NativeElement.style;
            toReturn = {
                Height: sourceStyle.height,
                Left: sourceStyle.left,
                Position: sourceStyle.position,
                Top: sourceStyle.top,
                Width: sourceStyle.width,
                ZIndex: sourceStyle.zIndex
            };
        }
        catch (err) {
            this.ErrorHand.HandleFatalError(this.GetFrameStyling.name, err);
        }
        return toReturn;
    }
    TriggerInboundEventsAsync() {
    }
    GetIframeHtmlElem() {
        return this.NativeElement;
    }
    GetNativeContentDoc() {
        return this.DocumentJacket;
    }
    src() {
        return this.NativeElement.src;
    }
    GetNativeIframeId() {
        return this.NativeIframeId;
    }
    WaitForNABHostedDoc() {
        return __awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForNABHostedDoc.name);
            try {
                var iterationJr = new _Shared_scripts_Agents_Drones_IterationDrone_IterationDrone__WEBPACK_IMPORTED_MODULE_0__/* .IterationDrone */ .v(this.CommonCore, this.WaitForNABHostedDoc.name, false);
                let readyStateNAB = null;
                let keepGoing = true;
                while (iterationJr.DecrementAndKeepGoing() && keepGoing) {
                    if (this.NativeElement.contentDocument) {
                        readyStateNAB = new _Shared_scripts_Classes_ReadyStateNAB__WEBPACK_IMPORTED_MODULE_1__/* .ReadyStateNAB */ .e(this.CommonCore, this.NativeElement.contentDocument);
                        keepGoing = readyStateNAB.DocIsAboutBlank();
                        readyStateNAB.LogDebugValues();
                    }
                    else {
                        keepGoing = true;
                    }
                    yield iterationJr.Wait();
                }
                if (iterationJr.IsExhausted) {
                    this.Logger.Log(iterationJr.IsExhaustedMsg);
                }
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.WaitForNABHostedDoc.name, err);
            }
            this.Logger.FuncEnd(this.WaitForNABHostedDoc.name);
        });
    }
    WaitForCompleteNABFrameElement(friendly) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart([FrameJacket.name, this.WaitForCompleteNABFrameElement.name], friendly);
                if (this.NativeElement) {
                    yield this.WaitForNABHostedDoc()
                        .then(() => _Document_DocumentJacket__WEBPACK_IMPORTED_MODULE_3__/* .DocumentJacket.FactoryMakeDocumentJacket */ .k.FactoryMakeDocumentJacket(this.CommonCore, this.NativeElement.contentDocument))
                        .then((documentJacket) => this.DocumentJacket = documentJacket)
                        .then(() => this.DocumentJacket.WaitForCompleteNAB_DocumentJacket(friendly))
                        .then(() => resolve(this.DocumentJacket.GetLastKnownReadyState()))
                        .catch((err) => reject(this.ErrorHand.FormatRejectMessage([FrameJacket.name, this.WaitForCompleteNABFrameElement.name], err)));
                }
                else {
                    reject(this.ErrorHand.FormatRejectMessage([FrameJacket.name, this.WaitForCompleteNABFrameElement.name], 'No target doc: ' + friendly));
                }
                this.Logger.FuncEnd([FrameJacket.name, this.WaitForCompleteNABFrameElement.name], friendly);
                ;
            }));
        });
    }
}


/***/ }),

/***/ 4940:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "c": () => /* binding */ GenericElemJacket
/* harmony export */ });
/* harmony import */ var _ElementJacketOfType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7304);

class GenericElemJacket extends _ElementJacketOfType__WEBPACK_IMPORTED_MODULE_0__/* .ElementJacketOfType */ .X {
}


/***/ }),

/***/ 7396:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "d": () => /* binding */ UrlJacket
/* harmony export */ });
/* harmony import */ var _Shared_scripts_Enums_QueryStrKey__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(474);
/* harmony import */ var _Shared_scripts_SharedConst__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5077);
/* harmony import */ var _Shared_scripts_CommonCoreBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6679);



class UrlJacket extends _Shared_scripts_CommonCoreBase__WEBPACK_IMPORTED_MODULE_2__/* ._CommonBase */ .a {
    constructor(commonCore, url) {
        super(commonCore);
        this.OriginalURL = url;
        this.ErrorHand.ThrowIfNullOrUndefined(UrlJacket.name, url);
        this.Init_GenericUrlAgent();
    }
    Init_GenericUrlAgent() {
        try {
            this.SetFromHref(this.OriginalURL);
        }
        catch (err) {
            this.ErrorHand.HandleFatalError(this.Init_GenericUrlAgent.name, err);
        }
    }
    GetUrlParts() {
        return this.UrlParts;
    }
    GetOriginalURL() {
        return this.OriginalURL;
    }
    QueryStringHasKey(key) {
        let toReturn = false;
        if (key !== null) {
            let keyAsStr = _Shared_scripts_Enums_QueryStrKey__WEBPACK_IMPORTED_MODULE_0__/* .QueryStrKey */ .a[key];
            if (keyAsStr) {
                toReturn = this.UrlParts && this.UrlParts.UrlSearchParameters && this.UrlParts.UrlSearchParameters.has(keyAsStr);
            }
        }
        return toReturn;
    }
    GetQueryStringValueByKey(key) {
        let toReturn = '';
        if (this.QueryStringHasKey(key)) {
            let keyAsStr = _Shared_scripts_Enums_QueryStrKey__WEBPACK_IMPORTED_MODULE_0__/* .QueryStrKey */ .a[key];
            toReturn = this.UrlParts.UrlSearchParameters.get(keyAsStr);
        }
        return toReturn;
    }
    SetParameterValueByKey(key, newValue) {
        if (this.UrlParts) {
            this.UrlParts.UrlSearchParameters.set(_Shared_scripts_Enums_QueryStrKey__WEBPACK_IMPORTED_MODULE_0__/* .QueryStrKey */ .a[key], newValue);
        }
        else {
            this.ErrorHand.HandleFatalError(this.SetParameterValueByKey.name, 'No URLParts ' + _Shared_scripts_Enums_QueryStrKey__WEBPACK_IMPORTED_MODULE_0__/* .QueryStrKey */ .a[key] + ' ' + newValue);
        }
    }
    SetFilePath(newFilePath) {
        this.UrlParts.FilePath = newFilePath;
    }
    SetFromHref(href) {
        var parser = document.createElement('a');
        parser.href = href;
        this.UrlParts = {
            OriginalRaw: href,
            Protocol: parser.protocol,
            HostAndPort: parser.host,
            UrlSearchParameters: new URLSearchParams(parser.search),
            FilePath: parser.pathname,
            Anchor: parser.hash,
            HasError: false,
        };
    }
    BuildFullUrlFromParts() {
        let toReturn = {
            AbsUrl: '',
            RelativeUrl: '',
        };
        if (this.UrlParts) {
            if (this.UrlParts && !this.UrlParts.HasError) {
                toReturn.AbsUrl = this.UrlParts.Protocol + '//' + this.UrlParts.HostAndPort;
                toReturn.RelativeUrl = '';
                if (this.UrlParts.FilePath.length > 0) {
                    toReturn.AbsUrl += this.UrlParts.FilePath;
                    toReturn.RelativeUrl += this.UrlParts.FilePath;
                }
                if (this.UrlParts.UrlSearchParameters) {
                    toReturn.AbsUrl += '?' + this.UrlParts.UrlSearchParameters.toString();
                    toReturn.RelativeUrl += '?' + this.UrlParts.UrlSearchParameters.toString();
                }
                if (this.UrlParts.Anchor.length > 0) {
                    toReturn.AbsUrl += '#' + this.UrlParts.Anchor;
                    toReturn.RelativeUrl += '#' + this.UrlParts.Anchor;
                }
            }
        }
        else {
            this.ErrorHand.HandleFatalError(this.BuildFullUrlFromParts.name, 'Null UrlParts');
        }
        return toReturn;
    }
    ExtractParameters(url) {
        let toReturn = [];
        if (url) {
            let splitStr = url.split('?');
            if (splitStr.length > 1) {
                let paramString = splitStr[1].replace(_Shared_scripts_SharedConst__WEBPACK_IMPORTED_MODULE_1__/* .SharedConst.Const.Regex.QueryStrSeparatorQuest */ .v.Const.Regex.QueryStrSeparatorQuest, '');
                let pairStr = paramString.split('&');
                if (pairStr && pairStr.length > 0) {
                    for (var idx = 0; idx < pairStr.length; idx++) {
                        let oneParamAr = pairStr[idx].split('=');
                        let paramPair = {
                            Key: '',
                            value: ''
                        };
                        if (oneParamAr) {
                            paramPair.Key = oneParamAr[0];
                            if (oneParamAr.length > 1) {
                                paramPair.value = oneParamAr[1];
                            }
                            toReturn.push(paramPair);
                        }
                    }
                }
            }
        }
        return toReturn;
    }
}


/***/ }),

/***/ 3062:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "l": () => /* binding */ HindSiteScUiProxy
});

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/APICommand.js
var APICommand = __webpack_require__(2721);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/Guid.js
var Guid = __webpack_require__(3473);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/InjectConst.js
var InjectConst = __webpack_require__(8856);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Drones/IterationDrone/IterationDrone.js
var IterationDrone = __webpack_require__(442);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/_CommonCoreBase.js
var _CommonCoreBase = __webpack_require__(6679);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/_APICoreBase.js
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class _APICoreBase extends _CommonCoreBase/* _CommonBase */.a {
    constructor(apiCore) {
        super(apiCore);
        apiCore.ErrorHand.ThrowIfNullOrUndefinedStatic(_CommonCoreBase/* _CommonBase.name */.a.name, [apiCore]);
        apiCore.ErrorHand.ThrowIfNullOrUndefinedStatic(_CommonCoreBase/* _CommonBase.name */.a.name, [apiCore.ErrorHand, apiCore.Logger, apiCore.TaskMonitor]);
        this.Logger = apiCore.Logger;
        this.ApiCore = apiCore;
        this.ErrorHand = apiCore.ErrorHand;
        this.TaskMonitor = apiCore.TaskMonitor;
        this.RunTimeOptions = apiCore.RunTimeOptions;
    }
    WaitForTimePeriod(timeToWaitMs, friendly) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForTimePeriod.name, friendly);
            var iterationJr = new IterationDrone/* IterationDrone */.v(this.ApiCore, this.WaitForTimePeriod.name, true);
            let startTimeStamp = new Date().getTime();
            let timeElapsed = 0;
            while (iterationJr.DecrementAndKeepGoing() && timeElapsed < timeToWaitMs) {
                timeElapsed = new Date().getTime() - startTimeStamp;
                yield iterationJr.Wait();
            }
            resolve();
            this.Logger.FuncEnd(this.WaitForTimePeriod.name, friendly);
        }));
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/ContentTop/scripts/Proxies/ContentBrowserProxy.js
var ContentBrowserProxy = __webpack_require__(7723);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Managers/SitecoreUiManager/SitecoreUiManager.js
var SitecoreUiManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class ScUiManager extends _APICoreBase {
    constructor(apiCore) {
        super(apiCore);
    }
    InitSitecoreUiManager() {
        return SitecoreUiManager_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.InitSitecoreUiManager.name);
            try {
                this.InjectCss();
            }
            catch (err) {
                throw (err);
            }
            this.Logger.FuncEnd(this.InitSitecoreUiManager.name);
        });
    }
    InjectCss() {
        let contentBrowserProxy = new ContentBrowserProxy/* ContentBrowserProxy */.t(this.ApiCore);
        const style = document.createElement('link');
        style.type = 'text/css';
        style.href = contentBrowserProxy.ExtensionGetUrl('AutoBuild/final/content.min.css');
        style.rel = "stylesheet";
        document.getElementsByTagName("head")[0].appendChild(style);
    }
    AdminB(documentJacket, callbackOnComplete) {
        this.Logger.FuncStart(this.AdminB.name, 'targetDoc: ' + Guid/* Guid.AsShort */.i.AsShort(documentJacket.DocId));
        this.Logger.Log('callback passed: ' + (callbackOnComplete !== null));
        let userNameElem = documentJacket.GetElementById(InjectConst/* ContentConst.Const.ElemId.SC.scLoginUserName */.y.Const.ElemId.SC.scLoginUserName);
        let passwordElem = documentJacket.GetElementById(InjectConst/* ContentConst.Const.ElemId.SC.scLoginPassword */.y.Const.ElemId.SC.scLoginPassword);
        if (this.Logger.IsNotNullOrUndefinedBool('userNameElem', userNameElem)
            &&
                this.Logger.IsNotNullOrUndefinedBool('passwordElem', passwordElem)) {
            userNameElem.NativeElement.setAttribute('value', InjectConst/* ContentConst.Const.Names.scDefaultAdminUserName */.y.Const.Names.scDefaultAdminUserName);
            passwordElem.NativeElement.setAttribute('value', InjectConst/* ContentConst.Const.Names.scDefaultAdminPassword */.y.Const.Names.scDefaultAdminPassword);
            var loginButton = this.GetLoginButton(documentJacket);
            if (this.Logger.IsNotNullOrUndefinedBool('loginButton', loginButton)) {
                this.Logger.Log('clicking loginbutton');
                loginButton.NativeElement.click();
                if (callbackOnComplete) {
                    this.Logger.Log('Triggering callback');
                    setTimeout(callbackOnComplete, InjectConst/* ContentConst.Const.Timeouts.PostLoginBtnClick */.y.Const.Timeouts.PostLoginBtnClick);
                }
                else {
                    this.Logger.Log('no callback passed');
                }
            }
            else {
                this.ErrorHand.HandleFatalError(this.AdminB.name, 'No loginButton');
            }
        }
        else {
            this.ErrorHand.HandleFatalError(this.AdminB.name, 'No Username or password field');
        }
        this.Logger.FuncEnd(this.AdminB.name);
    }
    GetLoginButton(documentJacket) {
        this.Logger.FuncStart(this.GetLoginButton.name);
        var toReturn = documentJacket.GetElementById(InjectConst/* ContentConst.Const.ElemId.SC.scLoginBtn.sc920 */.y.Const.ElemId.SC.scLoginBtn.sc920);
        if (!toReturn) {
            toReturn = documentJacket.QuerySelector(InjectConst/* ContentConst.Const.Selector.SC.LoginBtn.sc820 */.y.Const.Selector.SC.LoginBtn.sc820);
        }
        this.Logger.Log('toReturn: ' + toReturn);
        this.Logger.FuncEnd(this.GetLoginButton.name);
        return toReturn;
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/UrlAgent/ScWindowTypeResolver.js + 1 modules
var ScWindowTypeResolver = __webpack_require__(2276);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultFriendly.js
var DefaultFriendly = __webpack_require__(2262);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultMetaData.js
var DefaultMetaData = __webpack_require__(3953);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfScUiProxy.js + 1 modules
var DefaultStateOfScUiProxy = __webpack_require__(222);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfTree.js
var DefaultStateOfTree = __webpack_require__(9524);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/StaticHelpers.js
var StaticHelpers = __webpack_require__(1579);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/40 - ScProxyDisciminator.js
var _40_ScProxyDisciminator = __webpack_require__(7170);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/50 - scWindowType.js
var _50_scWindowType = __webpack_require__(7644);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SnapShotFlavor.js
var SnapShotFlavor = __webpack_require__(6189);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DesktopStartBarProxy/AsyncLock.js
var AsyncLock_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class AsyncLock extends _APICoreBase {
    constructor() {
        super(...arguments);
        this.IsLocked = false;
        this.CreatorFriendly = '';
        this.CurrentOwnerFriendly = '';
    }
    ReleaseLock() {
        this.Logger.FuncStart(this.ReleaseLock.name, this.CurrentOwnerFriendly);
        this.IsLocked = false;
        this.CurrentOwnerFriendly = '';
        this.Logger.FuncEnd(this.ReleaseLock.name, this.CurrentOwnerFriendly);
    }
    WaitForLockControl(candidate) {
        return AsyncLock_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => AsyncLock_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForLockControl.name, this.CurrentOwnerFriendly);
                var iterationJr = new IterationDrone/* IterationDrone */.v(this.ApiCore, this.WaitForLockControl.name, true, 30);
                while (this.IsLocked && iterationJr.DecrementAndKeepGoing()) {
                    this.Logger.LogVal('candidate', candidate);
                    this.Logger.LogVal('current owner', this.CurrentOwnerFriendly);
                    yield iterationJr.Wait();
                }
                if (!this.IsLocked) {
                    this.CurrentOwnerFriendly = candidate;
                    this.IsLocked = true;
                    resolve();
                }
                if (iterationJr.IsExhausted) {
                    reject(iterationJr.IsExhaustedMsg);
                }
                this.Logger.FuncEnd(this.WaitForLockControl.name, this.CurrentOwnerFriendly);
            }));
        });
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/DOMJacket/scripts/Elements/FrameElemJacket.js
var FrameElemJacket = __webpack_require__(3128);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/PromiseResult.js

class PromiseResult extends _CommonCoreBase/* _CommonBase */.a {
    constructor(nickname, hindeCore) {
        super(hindeCore);
        this.prefix = 'Promise Successful? -> ';
        this.NickName = nickname;
    }
    WasSuccessful() {
        return this.Success;
    }
    MarkSuccessful() {
        this.Success = true;
        if (this.Logger) {
            this.Logger.LogVal(this.prefix + this.NickName, this.Success);
        }
        else {
            console.log('no logger success');
        }
    }
    MarkFailed(ex) {
        if (ex) {
            ex = ex.toString();
        }
        else {
            ex = '{no fail message}';
        }
        this.RejectReasons += ', ' + ex;
        this.Success = false;
        if (this.Logger) {
            this.ErrorHand.HandleFatalError(this.prefix + this.NickName, this.Success + '  err: ' + ex);
        }
        else {
            console.log('no logger fail ' + ex);
        }
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/SharedConst.js
var SharedConst = __webpack_require__(5077);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/FactoryHelper.js

class FactoryHelper extends _APICoreBase {
    constructor(apiCore) {
        super(apiCore);
    }
    CEFrameFactory(frameJacket, nickname) {
        this.Logger.FuncStart(this.CEFrameFactory.name);
        this.ErrorHand.ThrowIfNullOrUndefined(this.CEFrameFactory.name, [frameJacket]);
        let toReturn = null;
        throw ('need to finish this');
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentEditorPublishProxy.js
var ContentEditorPublishProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class ContentEditorPublishProxy extends _APICoreBase {
    constructor(apiCore, contentEditorProxy, documentJacket) {
        super(apiCore);
        this.ContentEditorProxy = contentEditorProxy;
        this.DocumentJacket = documentJacket;
        this.FactoryHelp = new FactoryHelper(this.ApiCore);
    }
    Execute() {
        return new Promise((resolve, reject) => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            yield this.PublishActiveCE()
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    PublishActiveCE() {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.PublishActiveCE.name);
            try {
                yield this.PublishCE(this.DocumentJacket);
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.PublishActiveCE.name, err);
            }
            this.Logger.FuncEnd(this.PublishActiveCE.name);
        });
    }
    __debugDataPublishChain(dataPublishChain, nickname) {
        this.Logger.FuncStart(this.__debugDataPublishChain.name, nickname);
        this.Logger.LogVal('docToPublish', this.Logger.IsNullOrUndefined(dataPublishChain.ScDocumentProxyToPublish));
        this.Logger.FuncEnd(this.__debugDataPublishChain.name);
        return dataPublishChain;
    }
    PublishCE(docToPublish) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.PublishCE.name);
            try {
                var dataPublishChain = {
                    ScDocumentProxyToPublish: docToPublish,
                    TopScDocumentProxy: this.DocumentJacket,
                    Iframe0BlueScContentIFrameId0: null,
                    JqIframe: null,
                    CEFrameRed: null
                };
                yield this.ClickPublishOnNav(dataPublishChain)
                    .then((dataPublishChain) => this.ClickMenuButtonPublishDropDown(dataPublishChain))
                    .then((dataPublishChain) => this.ClickMenuDropDownPublishItem(dataPublishChain))
                    .then((dataPublishChain) => this.GetThePublishItemDialog(dataPublishChain))
                    .then((dataPublishChain) => this.GetDialogIframe0Blue(dataPublishChain))
                    .then((dataPublishChain) => this.__WaitForAndClickPublishNextButton(dataPublishChain))
                    .then((dataPublishChain) => this.GetMessageDialog(dataPublishChain))
                    .then((dataPublishChain) => this.__waitForAndClickOk(dataPublishChain))
                    .then((dataPublishChain) => this.__waitForAndClickClose(dataPublishChain))
                    .catch(ex => {
                    this.ErrorHand.HandleFatalError(this.PublishCE.name, ex);
                });
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.PublishCE.name, err);
            }
            this.Logger.FuncEnd(this.PublishCE.name);
        });
    }
    ClickPublishOnNav(payload) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.ClickPublishOnNav.name);
            try {
                yield payload.ScDocumentProxyToPublish.WaitForThenClick([InjectConst/* ContentConst.Const.Selector.SC.ScRibbon.Publish.NavPublishStrip */.y.Const.Selector.SC.ScRibbon.Publish.NavPublishStrip]);
                yield payload.ScDocumentProxyToPublish.WaitForThenClick([InjectConst/* ContentConst.Const.Selector.SC.ScRibbon.Publish.NavPublishStrip */.y.Const.Selector.SC.ScRibbon.Publish.NavPublishStrip]);
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.ClickPublishOnNav.name, err);
            }
            this.Logger.FuncEnd(this.ClickPublishOnNav.name);
            return payload;
        });
    }
    __waitForAndClickClose(dataPublishChain) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            try {
                yield dataPublishChain.Iframe0BlueScContentIFrameId0.GetHostedAsDocumentJacket().WaitForGenericElemJacket(InjectConst/* ContentConst.Const.Selector.SC.ScRibbon.Publish.SettingsHidden */.y.Const.Selector.SC.ScRibbon.Publish.SettingsHidden)
                    .then(() => dataPublishChain.Iframe0BlueScContentIFrameId0.GetHostedAsDocumentJacket().WaitForGenericElemJacket(InjectConst/* ContentConst.Const.Selector.SC.ScRibbon.Publish.TheItemHasBeenPublished */.y.Const.Selector.SC.ScRibbon.Publish.TheItemHasBeenPublished, SharedConst/* SharedConst.Const.IterHelper.MaxCount.OverridePublishing */.v.Const.IterHelper.MaxCount.OverridePublishing))
                    .then(() => dataPublishChain.Iframe0BlueScContentIFrameId0.GetHostedAsDocumentJacket().WaitForThenClick([InjectConst/* ContentConst.Const.Selector.SC.Cancel */.y.Const.Selector.SC.Cancel]));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.__waitForAndClickClose.name, err);
            }
            return dataPublishChain;
        });
    }
    __waitForAndClickOk(dataPublishChain) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            try {
                yield dataPublishChain.CEFrameRed.GetHostedAsDocumentJacket().WaitForThenClick([InjectConst/* ContentConst.Const.Selector.SC.Ok */.y.Const.Selector.SC.Ok]);
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.__waitForAndClickOk.name, err);
            }
            return dataPublishChain;
        });
    }
    __WaitForAndClickPublishNextButton(dataPublishChain) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            yield dataPublishChain.Iframe0BlueScContentIFrameId0.GetHostedAsDocumentJacket().WaitForThenClick([InjectConst/* ContentConst.Const.Selector.SC.NextButton */.y.Const.Selector.SC.NextButton]);
            return dataPublishChain;
        });
    }
    ClickMenuButtonPublishDropDown(payload = null) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            yield payload.ScDocumentProxyToPublish.WaitForThenClick([InjectConst/* ContentConst.Const.Selector.SC.ScRibbon.Publish.MenuButtonPublish */.y.Const.Selector.SC.ScRibbon.Publish.MenuButtonPublish]);
            return payload;
        });
    }
    ClickMenuDropDownPublishItem(payload = null) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            return yield payload.ScDocumentProxyToPublish.WaitForAndClickWithPayload(InjectConst/* ContentConst.Const.Selector.SC.ScRibbon.Publish.MenuDropDownPublishItem */.y.Const.Selector.SC.ScRibbon.Publish.MenuDropDownPublishItem, payload);
        });
    }
    GetThePublishItemDialog(dataPublishChain = null) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            try {
                let frameElemJacketB = null;
                yield dataPublishChain.TopScDocumentProxy.WaitForGenericElemJacket(InjectConst/* ContentConst.Const.Selector.SC.Frames.JqueryModalDialogsFrame.Id */.y.Const.Selector.SC.Frames.JqueryModalDialogsFrame.Id)
                    .then((elementJacket) => FrameElemJacket/* FrameJacket.FactoryFrameElemJackets */.r.FactoryFrameElemJackets(this.CommonCore, [elementJacket]))
                    .then((frameElemJackets) => frameElemJacketB = frameElemJackets[0])
                    .then(() => this.FactoryHelp.CEFrameFactory(frameElemJacketB, 'jqIframe'))
                    .then((result) => dataPublishChain.JqIframe = result)
                    .then(() => dataPublishChain.JqIframe.WaitForCompleteNABFrameProxyOrReject())
                    .catch((err) => this.ErrorHand.HandleFatalError(this.GetThePublishItemDialog.name, err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.GetThePublishItemDialog.name, err);
            }
            return dataPublishChain;
        });
    }
    GetMessageDialog(dataPublishChain) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            let toReturnPublishChain = dataPublishChain;
            yield this.WaitForIframeElemAndReturnCEFrameProxyWhenReady(InjectConst/* ContentConst.Const.Selector.SC.Frames.scContentIframeId1.Id */.y.Const.Selector.SC.Frames.scContentIframeId1.Id, 'iframeRed')
                .then((result) => toReturnPublishChain.CEFrameRed = result)
                .catch((err) => this.ErrorHand.HandleFatalError(this.GetMessageDialog.name, err));
            return toReturnPublishChain;
        });
    }
    WaitForIframeElemAndReturnCEFrameProxyWhenReady(selector, iframeNickName) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForIframeElemAndReturnCEFrameProxyWhenReady.name);
                let factoryHelp = new FactoryHelper(this.ApiCore);
                let frameJacket = null;
                yield this.DocumentJacket.WaitForGenericElemJacket(selector)
                    .then((genericElemJacket) => FrameElemJacket/* FrameJacket.FactoryFrameElemJackets */.r.FactoryFrameElemJackets(this.CommonCore, [genericElemJacket]))
                    .then((frameElemJackets) => frameJacket = frameElemJackets[0])
                    .then(() => factoryHelp.CEFrameFactory(frameJacket, iframeNickName))
                    .then((result) => resolve(result))
                    .catch((err) => reject(err));
                this.Logger.FuncEnd(this.WaitForIframeElemAndReturnCEFrameProxyWhenReady.name);
            }));
        });
    }
    GetDialogIframe0Blue(dataPublishChain = null) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetDialogIframe0Blue.name);
                let promiseResult = new PromiseResult(this.GetDialogIframe0Blue.name, this.ApiCore);
                this.Logger.LogAsJsonPretty('dataPublishChain', dataPublishChain);
                yield this.WaitForIframeElemAndReturnCEFrameProxyWhenReady(InjectConst/* ContentConst.Const.Selector.SC.Frames.ScContentIframeId0.Id */.y.Const.Selector.SC.Frames.ScContentIframeId0.Id, 'Iframe0Blue')
                    .then((result) => {
                    this.Logger.MarkerC();
                    dataPublishChain.Iframe0BlueScContentIFrameId0 = result;
                    promiseResult.MarkSuccessful();
                })
                    .catch((err) => promiseResult.MarkFailed(err));
                this.Logger.LogAsJsonPretty('dataPublishChain.Iframe0Blue', dataPublishChain.Iframe0BlueScContentIFrameId0);
                this.Logger.FuncEnd(this.GetDialogIframe0Blue.name);
                if (promiseResult.WasSuccessful()) {
                    resolve(dataPublishChain);
                }
                else {
                    reject(promiseResult.RejectReasons);
                }
            }));
        });
    }
    __waitForThenFunc(selector, targetDoc, dataPublishChain, optionFunc) {
        return new Promise((resolve, reject) => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.__waitForThenFunc.name, selector);
            this.Logger.LogAsJsonPretty(this.__waitForThenFunc.name, targetDoc);
            var found = null;
            yield targetDoc.WaitForGenericElemJacket(selector)
                .then((result) => found = result)
                .catch((err) => this.ErrorHand.HandleFatalError([ContentEditorDocProxy.name, this.__waitForThenFunc.name], err));
            if (found) {
                this.Logger.Log('found');
                if (optionFunc) {
                    this.Logger.Log('executing func');
                    dataPublishChain = yield optionFunc(found, dataPublishChain);
                }
                this.__debugDataPublishChain(dataPublishChain, this.__waitForThenFunc.name);
                this.Logger.FuncEnd(this.__waitForThenFunc.name, selector);
                resolve(dataPublishChain);
            }
            else {
                reject('not found');
            }
        }));
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/DOMJacket/scripts/UrlJacket.js
var UrlJacket = __webpack_require__(7396);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/60 - ScIconPath.js
var ScIconPath;
(function (ScIconPath) {
    ScIconPath[ScIconPath["Unknown"] = 0] = "Unknown";
    ScIconPath[ScIconPath["IconCache"] = 60373484] = "IconCache";
    ScIconPath[ScIconPath["IconCacheApplications16x16"] = 60606715] = "IconCacheApplications16x16";
    ScIconPath[ScIconPath["IconCacheOffice16x16"] = 60423364] = "IconCacheOffice16x16";
    ScIconPath[ScIconPath["IconCachePeople16x16"] = 60646660] = "IconCachePeople16x16";
    ScIconPath[ScIconPath["IconCacheSoftware16x16"] = 60448136] = "IconCacheSoftware16x16";
    ScIconPath[ScIconPath["StandardMedia"] = 60133523] = "StandardMedia";
})(ScIconPath || (ScIconPath = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentTreeProxy/ScContentTreeNodeProxy/IConResolver.js




class IConResolver extends _APICoreBase {
    ResolveIconData(mainIconSrc) {
        let toReturn = this.DefaultScIcon();
        let urlJacket = new UrlJacket/* UrlJacket */.d(this.ApiCore, mainIconSrc);
        let relativePath = urlJacket.BuildFullUrlFromParts().RelativeUrl;
        if (false) {}
        else if (relativePath.startsWith(SharedConst/* SharedConst.Const.UrlRelativePrefix.IconCacheApplications16x16 */.v.Const.UrlRelativePrefix.IconCacheApplications16x16)) {
            toReturn.IconSuffix = relativePath.replace(SharedConst/* SharedConst.Const.UrlRelativePrefix.IconCacheApplications16x16 */.v.Const.UrlRelativePrefix.IconCacheApplications16x16, '');
            toReturn.IconPath = ScIconPath.IconCacheApplications16x16;
        }
        else if (relativePath.startsWith(SharedConst/* SharedConst.Const.UrlRelativePrefix.IconCacheOffice16x16 */.v.Const.UrlRelativePrefix.IconCacheOffice16x16)) {
            toReturn.IconSuffix = relativePath.replace(SharedConst/* SharedConst.Const.UrlRelativePrefix.IconCacheOffice16x16 */.v.Const.UrlRelativePrefix.IconCacheOffice16x16, '');
            toReturn.IconPath = ScIconPath.IconCacheOffice16x16;
        }
        else if (relativePath.startsWith(SharedConst/* SharedConst.Const.UrlRelativePrefix.IconCachePeople16x16 */.v.Const.UrlRelativePrefix.IconCachePeople16x16)) {
            toReturn.IconSuffix = relativePath.replace(SharedConst/* SharedConst.Const.UrlRelativePrefix.IconCachePeople16x16 */.v.Const.UrlRelativePrefix.IconCachePeople16x16, '');
            toReturn.IconPath = ScIconPath.IconCachePeople16x16;
        }
        else if (relativePath.startsWith(SharedConst/* SharedConst.Const.UrlRelativePrefix.IconCacheSoftware16x16 */.v.Const.UrlRelativePrefix.IconCacheSoftware16x16)) {
            toReturn.IconSuffix = relativePath.replace(SharedConst/* SharedConst.Const.UrlRelativePrefix.IconCacheSoftware16x16 */.v.Const.UrlRelativePrefix.IconCacheSoftware16x16, '');
            toReturn.IconPath = ScIconPath.IconCacheSoftware16x16;
        }
        else if (relativePath.startsWith(SharedConst/* SharedConst.Const.UrlRelativePrefix.IconCache */.v.Const.UrlRelativePrefix.IconCache)) {
            toReturn.IconSuffix = relativePath.replace(SharedConst/* SharedConst.Const.UrlRelativePrefix.IconCache */.v.Const.UrlRelativePrefix.IconCache, '');
            toReturn.IconPath = ScIconPath.IconCache;
        }
        else if (relativePath.startsWith(SharedConst/* SharedConst.Const.UrlRelativePrefix.IconShellStandardMedia */.v.Const.UrlRelativePrefix.IconShellStandardMedia)) {
            toReturn.IconSuffix = relativePath.replace(SharedConst/* SharedConst.Const.UrlRelativePrefix.IconShellStandardMedia */.v.Const.UrlRelativePrefix.IconShellStandardMedia, '');
            toReturn.IconPath = ScIconPath.StandardMedia;
        }
        else {
            toReturn.IconSuffix = relativePath;
            toReturn.IconPath = ScIconPath.Unknown;
        }
        return toReturn;
    }
    ResolveIconPath(itemIconSource) {
        let toReturn;
        if (false) {}
        else if (itemIconSource.IconPath === ScIconPath.Unknown) {
            toReturn = itemIconSource.IconSuffix;
        }
        else if (itemIconSource.IconPath === ScIconPath.IconCache) {
            toReturn = SharedConst/* SharedConst.Const.UrlRelativePrefix.IconCache */.v.Const.UrlRelativePrefix.IconCache + itemIconSource.IconSuffix;
        }
        else {
            this.ErrorHand.HandleFatalError([IConResolver.name, this.ResolveIconPath.name], 'unaccounted for iconPath type');
        }
        return toReturn;
    }
    DefaultScIcon() {
        return {
            IconSuffix: '',
            IconPath: ScIconPath.Unknown,
        };
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/_BaseScProxy.js
var _BaseScProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class _BaseScProxy extends _APICoreBase {
    constructor(apiCore) {
        super(apiCore);
        this.HostedProxies = [];
        this.IsStateFull = true;
        this.StateHasBeenSet = false;
    }
    TriggerEventsForInbound() {
        this.TriggerEventsForInboundSelf();
        this.TriggerEventsForInboundHosted();
    }
    TriggerEventsForInboundSelf() {
    }
    TriggerInboundEventsAsyncOnHosted() {
        if (this.HostedProxies) {
            this.HostedProxies.forEach((hostedProxy) => hostedProxy.TriggerEventsForInbound());
        }
    }
    GetOnlyOrNullHostedProxiesByDisciminator(needleScProxyDiscriminator) {
        let toReturn = null;
        let found = this.GetHostedProxiesStateByDisciminator(needleScProxyDiscriminator);
        if (found.length === 1) {
            toReturn = found[0];
        }
        else {
            this.ErrorHand.WarningAndContinue([_BaseScProxy.name, this.GetOnlyOrNullHostedProxiesByDisciminator.name, this.ScProxyDisciminatorFriendly], 'Num needles found: ' + found.length + ' of ' + found.length + ' candidates');
        }
        return toReturn;
    }
    GetHostedProxiesStateByDisciminator(needleScProxyDiscriminator) {
        let toReturn = [];
        if (this.HostedProxies) {
            this.HostedProxies.forEach((hostedProxy) => { if (hostedProxy.ScProxyDisciminator === needleScProxyDiscriminator) {
                toReturn.push(hostedProxy);
            } });
        }
        return toReturn;
    }
    OnFocus() {
        return _BaseScProxy_awaiter(this, void 0, void 0, function* () {
        });
    }
    GetStateOfHosted() {
        return _BaseScProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => _BaseScProxy_awaiter(this, void 0, void 0, function* () {
                let promAr = [];
                if (this.HostedProxies) {
                    this.HostedProxies.forEach((hostedProxy) => promAr.push(hostedProxy.GetState()));
                }
                yield Promise.all(promAr)
                    .then((promAllResult) => resolve(promAllResult))
                    .catch((err) => reject(this.ErrorHand.FormatRejectMessage([_BaseScProxy.name, this.GetStateOfHosted.name], err)));
            }));
        });
    }
    GetState() {
        return _BaseScProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => _BaseScProxy_awaiter(this, void 0, void 0, function* () {
                let toReturn = null;
                if (this.IsStateFull) {
                    yield this.GetStateOfSelf()
                        .then((state) => toReturn = state)
                        .then(() => this.GetStateOfHosted())
                        .then((stateOfHostedProxies) => toReturn.Children = stateOfHostedProxies)
                        .then(() => resolve(toReturn))
                        .catch((err) => reject(this.ErrorHand.FormatRejectMessage([_BaseScProxy.name, this.GetState.name, this.ScProxyDisciminatorFriendly], err)));
                }
                else {
                    resolve(toReturn);
                }
            }));
        });
    }
    GetStateOfSelf() {
        return _BaseScProxy_awaiter(this, void 0, void 0, function* () {
            let toReturn = {
                DisciminatorFriendly: this.ScProxyDisciminatorFriendly,
                Disciminator: this.ScProxyDisciminator,
                Children: [],
            };
            return Promise.resolve(toReturn);
        });
    }
    SetState(state) {
        return _BaseScProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => _BaseScProxy_awaiter(this, void 0, void 0, function* () {
                yield this.SetStateSelf(state)
                    .then(() => this.SetStateOfHosted(state.Children))
                    .then(() => resolve())
                    .catch((err) => reject(this.ErrorHand.FormatRejectMessage([_BaseScProxy.name, this.SetState.name, this.ScProxyDisciminatorFriendly], err)));
            }));
        });
    }
    SetStateSelf(state) {
        return _BaseScProxy_awaiter(this, void 0, void 0, function* () {
        });
    }
    GetMatchingHostedProxy(needleDiscriminator) {
        let toReturn = null;
        if (this.HostedProxies) {
            this.HostedProxies.forEach((hostedProxy) => {
                if (hostedProxy && hostedProxy.ScProxyDisciminator === needleDiscriminator
                    &&
                        !hostedProxy.StateHasBeenSet) {
                    toReturn = hostedProxy;
                }
            });
        }
        return toReturn;
    }
    SetStateOfHosted(states) {
        return _BaseScProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => _BaseScProxy_awaiter(this, void 0, void 0, function* () {
                if (!states) {
                    states = [];
                }
                ;
                let promAr = [];
                states.forEach((stateOf) => {
                    if (stateOf) {
                        let foundMatch = this.GetMatchingHostedProxy(stateOf.Disciminator);
                        if (foundMatch) {
                            foundMatch.StateHasBeenSet = true;
                            promAr.push(foundMatch.SetState(stateOf));
                        }
                    }
                });
                yield Promise.all(promAr)
                    .then((promArResults) => resolve(promArResults))
                    .catch((err) => reject(this.ErrorHand.FormatRejectMessage([_BaseScProxy.name, this.SetStateOfHosted.name, this.ScProxyDisciminatorFriendly], err)));
            }));
        });
    }
    TriggerEventsForInboundHosted() {
        if (this.HostedProxies) {
            this.HostedProxies.forEach((hostedProxy) => hostedProxy.TriggerEventsForInbound());
        }
    }
    InstantiateAwaitElementsTop() {
        return _BaseScProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([_BaseScProxy.name, this.InstantiateAwaitElementsTop.name, this.ScProxyDisciminatorFriendly]);
            yield this.InstantiateAwaitElementsSelf()
                .then(() => this.InstantiateElementsOnHostedProxies())
                .then(() => Promise.resolve())
                .catch((err) => Promise.reject(this.ErrorHand.FormatRejectMessage([_BaseScProxy.name, this.InstantiateAwaitElementsTop.name, this.ScProxyDisciminatorFriendly], err)));
            this.Logger.FuncEnd([_BaseScProxy.name, this.InstantiateAwaitElementsTop.name, this.ScProxyDisciminatorFriendly]);
        });
    }
    InstantiateAwaitElementsSelf() {
        return _BaseScProxy_awaiter(this, void 0, void 0, function* () {
        });
    }
    InstantiateElementsOnHostedProxies() {
        return _BaseScProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([_BaseScProxy.name, this.InstantiateElementsOnHostedProxies.name, this.ScProxyDisciminatorFriendly], 'count: ' + this.HostedProxies.length);
            let promAr = [];
            this.HostedProxies.forEach((hostedProxy) => promAr.push(hostedProxy.InstantiateAwaitElementsTop()));
            yield Promise.all(promAr)
                .catch((err) => this.ErrorHand.HandleFatalError(this.ScProxyDisciminatorFriendly, err));
            this.Logger.FuncEnd([_BaseScProxy.name, this.InstantiateElementsOnHostedProxies.name, this.ScProxyDisciminatorFriendly]);
        });
    }
    WireEvents() {
        this.Logger.FuncStart([_BaseScProxy.name, this.WireEvents.name, this.ScProxyDisciminatorFriendly]);
        this.WireEventsSelf();
        this.WireEventsOnHostedProxies();
        this.Logger.FuncEnd([_BaseScProxy.name, this.WireEvents.name, this.ScProxyDisciminatorFriendly]);
    }
    WireEventsSelf() {
    }
    WireEventsOnHostedProxies() {
        this.Logger.FuncStart([_BaseScProxy.name, this.WireEventsOnHostedProxies.name, this.ScProxyDisciminatorFriendly]);
        if (this.HostedProxies) {
            this.HostedProxies.forEach((hostedProxy) => {
                if (hostedProxy) {
                    hostedProxy.WireEvents();
                }
                else {
                    this.ErrorHand.WarningAndContinue(this.WireEventsOnHostedProxies.name, 'Null hosted proxy. On behalf of: ' + this.ScProxyDisciminatorFriendly);
                }
            });
        }
        this.Logger.FuncEnd([_BaseScProxy.name, this.WireEventsOnHostedProxies.name, this.ScProxyDisciminatorFriendly]);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/FrameProxies/_BaseElemProxy.js

class _BaseElemProxy extends _BaseScProxy {
    constructor(apiCore, containerElemJacket) {
        super(apiCore);
        this.ContainerElemJacket = containerElemJacket;
    }
    GetZindexAsInt() {
        let toReturn = this.ContainerElemJacket.ZindexAsInt();
        this.Logger.LogVal(this.GetZindexAsInt.name, toReturn.toString());
        return toReturn;
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferChar.js
var BufferChar = __webpack_require__(9702);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferDirection.js
var BufferDirection = __webpack_require__(2580);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DesktopStartBarProxy/DesktopStartBarButtonProxy.js
var DesktopStartBarButtonProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class DesktopStartBarButtonProxy extends _BaseElemProxy {
    constructor(apiCore, iframeElemId, documentJacket, conResolver) {
        super(apiCore, documentJacket);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.DesktopStartBarButtonProxy */.K.DesktopStartBarButtonProxy;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.DesktopStartBarButtonProxy */.K.DesktopStartBarButtonProxy];
        this.FrameId = iframeElemId;
        this.ConResolver = conResolver;
        this.InstantiateInstance();
    }
    InstantiateInstance() {
        this.StartBarButtonElemId = InjectConst/* ContentConst.Const.Names.Desktop.StartBarApplicationPrefix */.y.Const.Names.Desktop.StartBarApplicationPrefix + this.FrameId;
    }
    Instantiate_DestopStartBarButtonProxyAsyncItems() {
        return DesktopStartBarButtonProxy_awaiter(this, void 0, void 0, function* () {
            try {
                let querySelectBtn = '[id=' + this.StartBarButtonElemId + ']';
                yield this.ContainerElemJacket.WaitFor(querySelectBtn)
                    .then((elementJacket) => this.FoundStartBarButton = elementJacket)
                    .then(() => this.FoundStartBarButton.WaitFor(':scope > div > span', this.Instantiate_DestopStartBarButtonProxyAsyncItems.name))
                    .then((containerSpanElement) => this.ContainerSpanElement = containerSpanElement);
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.Instantiate_DestopStartBarButtonProxyAsyncItems.name, err);
            }
        });
    }
    AncestorNodeSpan(lineage) {
        let htmlSpanElement = document.createElement('span');
        let l1text = StaticHelpers/* StaticHelpers.BufferString */.y.BufferString(lineage.L1Text, 5, BufferChar/* BufferChar.space */.D.space, BufferDirection/* BufferDirection.right */.z.right);
        let l2text = StaticHelpers/* StaticHelpers.BufferString */.y.BufferString(lineage.L2Text, 5, BufferChar/* BufferChar.space */.D.space, BufferDirection/* BufferDirection.right */.z.right);
        htmlSpanElement.innerText = l1text + '_/' + l2text + '_';
        htmlSpanElement.style.left = '19px';
        htmlSpanElement.style.position = 'absolute';
        htmlSpanElement.style.top = '0px';
        htmlSpanElement.style.opacity = '0.3';
        htmlSpanElement.style.fontSize = '11px';
        return htmlSpanElement;
    }
    LxNodeSpan(nodeText) {
        let htmlSpanElement = document.createElement('span');
        htmlSpanElement.innerText = StaticHelpers/* StaticHelpers.BufferString */.y.BufferString(nodeText, InjectConst/* ContentConst.Const.Numbers.Desktop.MaxToolBarNameChars */.y.Const.Numbers.Desktop.MaxToolBarNameChars, BufferChar/* BufferChar.space */.D.space, BufferDirection/* BufferDirection.right */.z.right);
        htmlSpanElement.style.left = '15px';
        htmlSpanElement.style.position = 'absolute';
        htmlSpanElement.style.top = '0px';
        return htmlSpanElement;
    }
    LxNodeImg(iconSource) {
        let newMainIconNode = document.createElement('img');
        newMainIconNode.border = '0';
        newMainIconNode.classList.add("scContentTreeNodeIcon");
        newMainIconNode.height = 16;
        newMainIconNode.src = iconSource;
        newMainIconNode.style.left = '0px';
        newMainIconNode.style.position = 'absolute';
        newMainIconNode.style.top = '-8px';
        newMainIconNode.width = 16;
        return newMainIconNode;
    }
    AncestorNodeIcon(itemIconSource) {
        let newItemIconNode = document.createElement('img');
        newItemIconNode.border = '0px';
        newItemIconNode.classList.add("scContentTreeNodeIcon");
        newItemIconNode.height = 16;
        newItemIconNode.src = this.ConResolver.ResolveIconPath(itemIconSource);
        newItemIconNode.style.position = "absolute";
        newItemIconNode.style.opacity = "0.9";
        newItemIconNode.width = 16;
        return newItemIconNode;
    }
    ProcessColor(icon) {
        let borderColor = '';
        if (icon.indexOf('photo_scenery.png') > -1) {
            borderColor = SharedConst/* SharedConst.Const.Colors.colorMediaLibrary */.v.Const.Colors.colorMediaLibrary;
        }
        else if (icon.indexOf('cubes_blue.png') > -1) {
            borderColor = SharedConst/* SharedConst.Const.Colors.colorContent */.v.Const.Colors.colorContent;
        }
        else if (icon.indexOf('windows.png') > -1) {
            borderColor = SharedConst/* SharedConst.Const.Colors.colorLayout */.v.Const.Colors.colorLayout;
        }
        else if (icon.indexOf('workstation1.png') > -1) {
            borderColor = SharedConst/* SharedConst.Const.Colors.colorSystem */.v.Const.Colors.colorSystem;
        }
        else if (icon.indexOf('form_blue.png') > -1) {
            borderColor = SharedConst/* SharedConst.Const.Colors.colorTemplates */.v.Const.Colors.colorTemplates;
        }
        return borderColor;
    }
    DrawBorderColor(stateOfContentTree) {
        let borderColor = '';
        borderColor = this.ProcessColor(stateOfContentTree.ContentTreeNodeDeep.Lineage.L1Icon.IconSuffix);
        if (borderColor.length > 0) {
            this.FoundStartBarButton.NativeElement.style.borderBottomColor = borderColor;
        }
    }
    BuildLxSpan(stateOfContentTree) {
        let nodeImage = this.LxNodeImg(this.ConResolver.ResolveIconPath(stateOfContentTree.ContentTreeNodeDeep.IconSrc));
        let nodeSpan = this.LxNodeSpan(stateOfContentTree.ContentTreeNodeDeep.Friendly);
        let toReturn = document.createElement('span');
        toReturn.style.position = 'relative';
        toReturn.style.left = '-8px';
        toReturn.style.top = '8px';
        toReturn.style.marginRight = '-4px';
        toReturn.classList.add("scContentTreeNodeIcon");
        toReturn.appendChild(nodeImage);
        toReturn.appendChild(nodeSpan);
        return toReturn;
    }
    BuildAncestorSpan(stateOfContentTree) {
        let nodeImage = this.AncestorNodeIcon(stateOfContentTree.ContentTreeNodeDeep.Lineage.L1Icon);
        let nodeSpan = this.AncestorNodeSpan(stateOfContentTree.ContentTreeNodeDeep.Lineage);
        let toReturn = document.createElement('span');
        toReturn.style.position = 'absolute';
        toReturn.style.top = '-17px';
        toReturn.style.left = '-17px';
        toReturn.appendChild(nodeImage);
        toReturn.appendChild(nodeSpan);
        return toReturn;
    }
    DrawTextAndIcons(stateOfContentTree) {
        let ancestorSpan = this.BuildAncestorSpan(stateOfContentTree);
        let lxSpan = this.BuildLxSpan(stateOfContentTree);
        let bothWrapper = document.createElement('span');
        bothWrapper.style.position = "relative";
        bothWrapper.appendChild(ancestorSpan);
        bothWrapper.appendChild(lxSpan);
        if (this.ContainerSpanElement) {
            this.ContainerSpanElement.NativeElement.innerHTML = bothWrapper.outerHTML;
        }
        else {
            this.ErrorHand.HandleFatalError(this.SetStateOfDesktopStartBarButtonAsync.name, 'no container span element');
        }
    }
    SetStateOfDesktopStartBarButtonAsync(stateOfContentTree) {
        this.Logger.FuncStart(this.SetStateOfDesktopStartBarButtonAsync.name);
        this.TaskMonitor.AsyncTaskStarted(this.SetStateOfDesktopStartBarButtonAsync.name);
        this.ErrorHand.ThrowIfNullOrUndefined(this.SetStateOfDesktopStartBarButtonAsync.name, [stateOfContentTree]);
        this.Logger.LogAsJsonPretty('stateOfContentTree.ActiveNodeFlat', stateOfContentTree.ContentTreeNodeDeep);
        if (stateOfContentTree) {
            this.DrawTextAndIcons(stateOfContentTree);
            this.DrawBorderColor(stateOfContentTree);
        }
        else {
            this.ErrorHand.WarningAndContinue(this.SetStateOfDesktopStartBarButtonAsync.name, 'no tree data');
        }
        this.TaskMonitor.AsyncTaskCompleted(this.SetStateOfDesktopStartBarButtonAsync.name);
        this.Logger.FuncEnd(this.SetStateOfDesktopStartBarButtonAsync.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DesktopStartBarProxy/AllStartMenuButtonSelectos.js


class AllStartMenuButtonSelectors {
}
AllStartMenuButtonSelectors.AllWindowTypes = [
    {
        ScWindowTypeX: _50_scWindowType/* ScWindowType.AccessViewer */.D.AccessViewer,
        Pop1Selector: InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup1.SecurityTools */.y.Const.Selector.SC.StartMenu.Popup1.SecurityTools,
        Pop2Selector: InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup2.AccessViewer */.y.Const.Selector.SC.StartMenu.Popup2.AccessViewer,
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: _50_scWindowType/* ScWindowType.Archive */.D.Archive,
        Pop1Selector: InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup1.AllApplications */.y.Const.Selector.SC.StartMenu.Popup1.AllApplications,
        Pop2Selector: InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup2.Archive */.y.Const.Selector.SC.StartMenu.Popup2.Archive,
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: _50_scWindowType/* ScWindowType.ContentEditor */.D.ContentEditor,
        Pop1Selector: InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup1.StartMenuLeftOption */.y.Const.Selector.SC.StartMenu.Popup1.StartMenuLeftOption,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: _50_scWindowType/* ScWindowType.DomainManager */.D.DomainManager,
        Pop1Selector: InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup2.DomainManager */.y.Const.Selector.SC.StartMenu.Popup2.DomainManager,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: _50_scWindowType/* ScWindowType.InstalledLicenses */.D.InstalledLicenses,
        Pop1Selector: InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup3.InstalledLicenses */.y.Const.Selector.SC.StartMenu.Popup3.InstalledLicenses,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: _50_scWindowType/* ScWindowType.InstallationWizard */.D.InstallationWizard,
        Pop1Selector: InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup2.InstallationWizard */.y.Const.Selector.SC.StartMenu.Popup2.InstallationWizard,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: _50_scWindowType/* ScWindowType.KeyboardMap */.D.KeyboardMap,
        Pop1Selector: InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup2.KeyboardMap */.y.Const.Selector.SC.StartMenu.Popup2.KeyboardMap,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: _50_scWindowType/* ScWindowType.LicenseDetails */.D.LicenseDetails,
        Pop1Selector: InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup3.LicenseDetails */.y.Const.Selector.SC.StartMenu.Popup3.LicenseDetails,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: _50_scWindowType/* ScWindowType.LogViewer */.D.LogViewer,
        Pop1Selector: InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup2.LogViewer */.y.Const.Selector.SC.StartMenu.Popup2.LogViewer,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: _50_scWindowType/* ScWindowType.MarketingControlPanel */.D.MarketingControlPanel,
        Pop1Selector: InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup2.MarketingControlPanel */.y.Const.Selector.SC.StartMenu.Popup2.MarketingControlPanel,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: _50_scWindowType/* ScWindowType.MediaLibrary */.D.MediaLibrary,
        Pop1Selector: InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup1.MediaLibrary */.y.Const.Selector.SC.StartMenu.Popup1.MediaLibrary,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: _50_scWindowType/* ScWindowType.PackageDesigner */.D.PackageDesigner,
        Pop1Selector: InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup2.PackageDesignerButton */.y.Const.Selector.SC.StartMenu.Popup2.PackageDesignerButton,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: _50_scWindowType/* ScWindowType.Run */.D.Run,
        Pop1Selector: InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup2.Run */.y.Const.Selector.SC.StartMenu.Popup2.Run,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: _50_scWindowType/* ScWindowType.RoleManager */.D.RoleManager,
        Pop1Selector: InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup2.RoleManager */.y.Const.Selector.SC.StartMenu.Popup2.RoleManager,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: _50_scWindowType/* ScWindowType.RecycleBin */.D.RecycleBin,
        Pop1Selector: InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup1.RecycleBin */.y.Const.Selector.SC.StartMenu.Popup1.RecycleBin,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: _50_scWindowType/* ScWindowType.ScanForBrokenLinks */.D.ScanForBrokenLinks,
        Pop1Selector: InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup2.ScanForBrokenLinks */.y.Const.Selector.SC.StartMenu.Popup2.ScanForBrokenLinks,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: _50_scWindowType/* ScWindowType.SecurityEditor */.D.SecurityEditor,
        Pop1Selector: InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup2.SecurityEditor */.y.Const.Selector.SC.StartMenu.Popup2.SecurityEditor,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: _50_scWindowType/* ScWindowType.TemplateManager */.D.TemplateManager,
        Pop1Selector: InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup1.TemplateManager */.y.Const.Selector.SC.StartMenu.Popup1.TemplateManager,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: _50_scWindowType/* ScWindowType.UserManager */.D.UserManager,
        Pop1Selector: InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup2.UserManager */.y.Const.Selector.SC.StartMenu.Popup2.UserManager,
        Pop2Selector: '',
        Pop3Selector: '',
    },
    {
        ScWindowTypeX: _50_scWindowType/* ScWindowType.Workbox */.D.Workbox,
        Pop1Selector: InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup2.Workbox */.y.Const.Selector.SC.StartMenu.Popup2.Workbox,
        Pop2Selector: '',
        Pop3Selector: '',
    },
];

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DesktopStartBarProxy/StartMenuButtonResolver.js



class StartMenuButtonResolver extends _APICoreBase {
    GetButtonSelectors(scWindowType) {
        let allWindowTypes = AllStartMenuButtonSelectors.AllWindowTypes;
        let toReturn = null;
        allWindowTypes.forEach((selectorSet) => {
            if (selectorSet.ScWindowTypeX === scWindowType) {
                toReturn = selectorSet;
            }
        });
        if (!toReturn) {
            toReturn = {
                Pop1Selector: '',
                Pop2Selector: '',
                Pop3Selector: '',
                ScWindowTypeX: _50_scWindowType/* ScWindowType.Unknown */.D.Unknown,
            };
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DesktopStartBarProxy/DTStartBarProxy.js
var DTStartBarProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class DTStartBarElemProxy extends _BaseElemProxy {
    constructor(apiCore, containerElemJacket) {
        super(apiCore, containerElemJacket);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.DTStartBarElem */.K.DTStartBarElem;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.DTStartBarElem */.K.DTStartBarElem];
        this.IsStateFull = false;
        this.StartBarButtonProxyBucket = [];
        this.Logger.CTORStart(DTStartBarElemProxy.name);
        this.InstantiateInstance();
        this.Logger.CTOREnd(DTStartBarElemProxy.name);
    }
    InstantiateInstance() {
        this.ConResolver = new IConResolver(this.ApiCore);
    }
    TriggerRedButtonAsync(scWindowType, methodLock) {
        return DTStartBarProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.TriggerRedButtonAsync.name);
            try {
                this.StartMenuButtonResolver = new StartMenuButtonResolver(this.ApiCore);
                let buttonSelectors = this.StartMenuButtonResolver.GetButtonSelectors(scWindowType);
                if (!buttonSelectors || !buttonSelectors.Pop1Selector) {
                    this.Logger.LogAsJsonPretty('buttonSelectors', buttonSelectors);
                    this.ErrorHand.HandleFatalError([this.TriggerRedButtonAsync.name], 'something is wrong with the button selectors');
                }
                yield methodLock.WaitForLockControl(_50_scWindowType/* ScWindowType */.D[scWindowType])
                    .then(() => this.ContainerElemJacket.RaceWaitAndClick(InjectConst/* ContentConst.Const.Selector.SC.scStartButtonVSpec */.y.Const.Selector.SC.scStartButtonVSpec))
                    .then(() => this.TaskMonitor.AsyncTaskStarted(this.TriggerRedButtonAsync.name))
                    .then(() => this.TriggerPopXButton(buttonSelectors.Pop1Selector, InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup1.Id */.y.Const.Selector.SC.StartMenu.Popup1.Id))
                    .then(() => this.TriggerPopXButton(buttonSelectors.Pop2Selector, InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup2.Id */.y.Const.Selector.SC.StartMenu.Popup2.Id))
                    .then(() => this.TriggerPopXButton(buttonSelectors.Pop3Selector, InjectConst/* ContentConst.Const.Selector.SC.StartMenu.Popup3.Id */.y.Const.Selector.SC.StartMenu.Popup3.Id))
                    .then(() => methodLock.ReleaseLock())
                    .then(() => this.WaitForTimePeriod(1, this.TriggerRedButtonAsync.name))
                    .then(() => this.TaskMonitor.AsyncTaskCompleted(this.TriggerRedButtonAsync.name))
                    .catch((err) => this.ErrorHand.HandleFatalError(this.TriggerRedButtonAsync.name, err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.TriggerRedButtonAsync.name, err);
            }
            this.Logger.FuncEnd(this.TriggerRedButtonAsync.name);
        });
    }
    TriggerPopXButton(buttonSelector, containerSelector) {
        return DTStartBarProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.TriggerPopXButton.name, buttonSelector + ' | ' + containerSelector);
            try {
                if (buttonSelector && buttonSelector.length > 0 && containerSelector && containerSelector.length > 0) {
                    let containerElemJacket = null;
                    let buttonElemJacket = null;
                    yield this.ContainerElemJacket.WaitFor(containerSelector)
                        .then((elementJacket) => containerElemJacket = elementJacket)
                        .then(() => containerElemJacket.WaitFor(buttonSelector, this.TriggerRedButtonAsync.name))
                        .then((elementJacket) => buttonElemJacket = elementJacket)
                        .then(() => this.Logger.LogImportant('About to click ' + buttonSelector))
                        .then(() => buttonElemJacket.Click())
                        .then(() => this.WaitForTimePeriod(1, this.TriggerPopXButton.name))
                        .catch((err) => this.ErrorHand.HandleFatalError(this.TriggerPopXButton.name + ' ' + buttonSelector + ' ' + containerSelector, err));
                }
                else {
                }
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.TriggerPopXButton.name, err);
            }
            this.Logger.FuncEnd(this.TriggerPopXButton.name, buttonSelector + ' | ' + containerSelector);
        });
    }
    GetAssociatedStartBarButton(dTFrameProxyMutationEventPayload) {
        return DTStartBarProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DTStartBarProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetAssociatedStartBarButton.name);
                this.ErrorHand.ThrowIfNullOrUndefined(this.GetAssociatedStartBarButton.name, [dTFrameProxyMutationEventPayload]);
                let foundStartBarButtonProxy = null;
                this.StartBarButtonProxyBucket.forEach((startBarButtonProxy) => {
                    if (startBarButtonProxy.FrameId === dTFrameProxyMutationEventPayload.FrameId) {
                        foundStartBarButtonProxy = startBarButtonProxy;
                    }
                });
                if (!foundStartBarButtonProxy) {
                    foundStartBarButtonProxy = new DesktopStartBarButtonProxy(this.ApiCore, dTFrameProxyMutationEventPayload.FrameId, this.ContainerElemJacket, this.ConResolver);
                    yield foundStartBarButtonProxy.Instantiate_DestopStartBarButtonProxyAsyncItems()
                        .catch((err) => reject(this.GetAssociatedStartBarButton.name + ' | ' + err));
                    this.StartBarButtonProxyBucket.push(foundStartBarButtonProxy);
                }
                resolve(foundStartBarButtonProxy);
                this.Logger.FuncEnd(this.GetAssociatedStartBarButton.name);
            }));
        });
    }
    OnTreeMutationEvent_DesktopStartBarProxy(dTAreaProxyMutationEvent_Payload) {
        this.Logger.FuncStart(this.OnTreeMutationEvent_DesktopStartBarProxy.name);
        this.TaskMonitor.AsyncTaskStarted(this.OnTreeMutationEvent_DesktopStartBarProxy.name);
        if (dTAreaProxyMutationEvent_Payload) {
            if (dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload
                &&
                    dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload.ContentEditorProxyMutationPayload
                &&
                    dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload.ContentEditorProxyMutationPayload.TreeMutationEvent_Payload
                &&
                    dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload.ContentEditorProxyMutationPayload.TreeMutationEvent_Payload.ContentTree
                &&
                    dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload.ContentEditorProxyMutationPayload.TreeMutationEvent_Payload.ContentTree.ContentTreeNodeDeep) {
                let contentTreeProxyMutationEvent_Payload = dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload.ContentEditorProxyMutationPayload.TreeMutationEvent_Payload;
                if (contentTreeProxyMutationEvent_Payload.ContentTree.ContentTreeNodeDeep) {
                    this.GetAssociatedStartBarButton(dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload)
                        .then((startBarButtonProxy) => startBarButtonProxy.SetStateOfDesktopStartBarButtonAsync(contentTreeProxyMutationEvent_Payload.ContentTree))
                        .catch((err) => this.ErrorHand.HandleFatalError(this.OnTreeMutationEvent_DesktopStartBarProxy.name, err));
                }
                else {
                    this.Logger.Log('null activeNodeFlat provided');
                }
            }
            else {
                this.Logger.LogAsJsonPretty('dTAreaProxyMutationEvent_Payload', dTAreaProxyMutationEvent_Payload);
            }
        }
        else {
            this.ErrorHand.HandleFatalError(this.OnTreeMutationEvent_DesktopStartBarProxy.name, 'Null payload');
        }
        this.TaskMonitor.AsyncTaskCompleted(this.OnTreeMutationEvent_DesktopStartBarProxy.name);
        this.Logger.FuncEnd(this.OnTreeMutationEvent_DesktopStartBarProxy.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ScRibbonProxy/AllRibbonCommands.js


class AllRibbonCommands {
}
AllRibbonCommands.Const = [
    {
        ScRibbonCommand: APICommand/* APICommandFlag.PresentationDetails */.v.PresentationDetails,
        Step1Selector: InjectConst/* ContentConst.Const.Selector.SC.ScRibbon.Presentation.Id */.y.Const.Selector.SC.ScRibbon.Presentation.Id,
        Step2Selector: InjectConst/* ContentConst.Const.Selector.SC.ScRibbon.Presentation.Details */.y.Const.Selector.SC.ScRibbon.Presentation.Details
    },
    {
        ScRibbonCommand: APICommand/* APICommandFlag.NavigateLinks */.v.NavigateLinks,
        Step1Selector: InjectConst/* ContentConst.Const.Selector.SC.ScRibbon.Navigate.Id */.y.Const.Selector.SC.ScRibbon.Navigate.Id,
        Step2Selector: InjectConst/* ContentConst.Const.Selector.SC.ScRibbon.Navigate.Links */.y.Const.Selector.SC.ScRibbon.Navigate.Links
    },
    {
        ScRibbonCommand: APICommand/* APICommandFlag.ToggleRawValues */.v.ToggleRawValues,
        Step1Selector: InjectConst/* ContentConst.Const.Selector.SC.ScRibbon.View.Id */.y.Const.Selector.SC.ScRibbon.View.Id,
        Step2Selector: InjectConst/* ContentConst.Const.Selector.SC.ScRibbon.View.RawValues */.y.Const.Selector.SC.ScRibbon.View.RawValues
    },
    {
        ScRibbonCommand: APICommand/* APICommandFlag.NavigateBack */.v.NavigateBack,
        Step1Selector: InjectConst/* ContentConst.Const.Selector.SC.ScRibbon.Navigate.Id */.y.Const.Selector.SC.ScRibbon.Navigate.Id,
        Step2Selector: InjectConst/* ContentConst.Const.Selector.SC.ScRibbon.View.NavigateBack */.y.Const.Selector.SC.ScRibbon.View.NavigateBack
    },
    {
        ScRibbonCommand: APICommand/* APICommandFlag.NavigateForward */.v.NavigateForward,
        Step1Selector: InjectConst/* ContentConst.Const.Selector.SC.ScRibbon.Navigate.Id */.y.Const.Selector.SC.ScRibbon.Navigate.Id,
        Step2Selector: InjectConst/* ContentConst.Const.Selector.SC.ScRibbon.View.NavigateForward */.y.Const.Selector.SC.ScRibbon.View.NavigateForward
    },
    {
        ScRibbonCommand: APICommand/* APICommandFlag.NavigateUp */.v.NavigateUp,
        Step1Selector: InjectConst/* ContentConst.Const.Selector.SC.ScRibbon.Navigate.Id */.y.Const.Selector.SC.ScRibbon.Navigate.Id,
        Step2Selector: InjectConst/* ContentConst.Const.Selector.SC.ScRibbon.View.NavigateUp */.y.Const.Selector.SC.ScRibbon.View.NavigateUp
    },
];

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ScRibbonProxy/RibbonMenuButtonResolver.js



class RibbonMenuButtonResolver extends _APICoreBase {
    GetRibbonButtonSequence(scRibbonCommand) {
        let ribbonClickSequences = AllRibbonCommands.Const;
        let toReturnRibbonClickSequence = null;
        ribbonClickSequences.forEach((ribbonClickSequence) => {
            if (ribbonClickSequence.ScRibbonCommand === scRibbonCommand) {
                toReturnRibbonClickSequence = ribbonClickSequence;
            }
        });
        if (!toReturnRibbonClickSequence) {
            toReturnRibbonClickSequence = {
                ScRibbonCommand: APICommand/* APICommandFlag.Unknown */.v.Unknown,
                Step1Selector: null,
                Step2Selector: null,
            };
        }
        return toReturnRibbonClickSequence;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ScRibbonProxy/ScRibbonProxy.js
var ScRibbonProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class ScRibbonProxy extends _APICoreBase {
    constructor(apiCore, documentJacket) {
        super(apiCore);
        this.Logger.CTORStart(DTStartBarElemProxy.name);
        this.DocumentJacket = documentJacket;
        this.InstantiateInstance();
        this.Logger.CTOREnd(DTStartBarElemProxy.name);
    }
    InstantiateInstance() {
    }
    TriggerRibbonMenuItem(scRibbonButtonCommand, methodLock) {
        return ScRibbonProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([ScRibbonProxy.name, this.TriggerRibbonMenuItem.name], APICommand/* APICommandFlag */.v[scRibbonButtonCommand]);
            try {
                this.RibbonMenuButtonResolver = new RibbonMenuButtonResolver(this.ApiCore);
                let ribbonClickSequence = this.RibbonMenuButtonResolver.GetRibbonButtonSequence(scRibbonButtonCommand);
                if (!ribbonClickSequence || !ribbonClickSequence.ScRibbonCommand) {
                    this.Logger.LogAsJsonPretty('ribbonButtonSequence', ribbonClickSequence);
                    this.ErrorHand.HandleFatalError([this.TriggerRibbonMenuItem.name], 'something is wrong with the ribbon selectors');
                }
                yield methodLock.WaitForLockControl(APICommand/* APICommandFlag */.v[scRibbonButtonCommand])
                    .then(() => this.DocumentJacket.WaitForThenClick([ribbonClickSequence.Step1Selector]))
                    .then(() => this.TaskMonitor.AsyncTaskStarted(this.TriggerRibbonMenuItem.name))
                    .then(() => this.DocumentJacket.WaitForThenClick([ribbonClickSequence.Step2Selector]))
                    .catch((err) => this.ErrorHand.WarningAndContinue(this.TriggerRibbonMenuItem.name, err))
                    .finally(() => {
                    methodLock.ReleaseLock();
                    this.TaskMonitor.AsyncTaskCompleted(this.TriggerRibbonMenuItem.name);
                });
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.TriggerRibbonMenuItem.name, err);
            }
            this.Logger.FuncEnd(this.TriggerRibbonMenuItem.name);
        });
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/70 - TypeDiscriminator.js
var _70_TypeDiscriminator = __webpack_require__(8162);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/_HindSiteEvent/HindeSiteEvent_Subject.js
var HindeSiteEvent_Subject = __webpack_require__(4697);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/ContentEditorProxyMutationEvent/ContentEditorProxyMutationEvent_Subject.js


class __ContentTreeBasedProxyMutationEvent__Subject extends HindeSiteEvent_Subject/* _HindeSiteEvent_Subject */.C {
    constructor() {
        super(...arguments);
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.__ContentTreeBasedProxyMutationEvent__Subject */.g.__ContentTreeBasedProxyMutationEvent__Subject;
        this.Friendly_Subject = __ContentTreeBasedProxyMutationEvent__Subject.name;
        this.ShowLogActions = true;
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/_HindSiteEvent/HindSiteEvent_Observer.js
var HindSiteEvent_Observer = __webpack_require__(2005);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/ContentTreeProxyMutationEvent/ContentTreeProxyMutationEvent_Observer.js


class ContentTreeBasedProxyMutationEvent_Observer extends HindSiteEvent_Observer/* _HindSiteEvent_Observer */.k {
    constructor(apiCore, callback) {
        super(apiCore, ContentTreeBasedProxyMutationEvent_Observer.name, callback);
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.__ContentTreeBasedProxyMutationEvent_Observer */.g.__ContentTreeBasedProxyMutationEvent_Observer;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/scripts/Events/ElementJacketMutationEvent/ElementJacketMutationEvent_Observer.js


class ElementJacketMutationEvent_Observer extends HindSiteEvent_Observer/* _HindSiteEvent_Observer */.k {
    constructor(apiCore, callback) {
        super(apiCore, ElementJacketMutationEvent_Observer.name, callback);
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.ElementJacketMutationEvent_Observer */.g.ElementJacketMutationEvent_Observer;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfDTFrame.js

class DefaultStateOfFrameProxy {
    constructor() {
        this.Disciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.FrameProxy */.K.FrameProxy;
        this.DisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.FrameProxy */.K.FrameProxy];
        this.FrameStyling = null;
        this.Children = [];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/ContentEditorProxyMutationEvent/ContentEditorProxyMutationEvent_Observer.js


class _ContentTreeBasedProxyMutationEvent_Observer extends HindSiteEvent_Observer/* _HindSiteEvent_Observer */.k {
    constructor(apiCore, ownerFrameProxy) {
        super(apiCore, _ContentTreeBasedProxyMutationEvent_Observer.name);
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator._ContentTreeBasedProxyMutationEvent_Observer */.g._ContentTreeBasedProxyMutationEvent_Observer;
        this.ShowLogActions = true;
        this.OwnerDTFrameProxy = ownerFrameProxy;
    }
    UpdateAsync(payload) {
        this.OwnerDTFrameProxy.OnContentEditorProxyMutation(payload);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/DTFrameProxyMutationEvent/DTFrameProxyMutationEvent_Subject.js


class DTFrameProxyMutationEvent_Subject extends HindeSiteEvent_Subject/* _HindeSiteEvent_Subject */.C {
    constructor() {
        super(...arguments);
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.DTFrameProxyMutationEvent_Subject */.g.DTFrameProxyMutationEvent_Subject;
        this.Friendly_Subject = DTFrameProxyMutationEvent_Subject.name;
        this.ShowLogActions = true;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/FrameProxies/ScFrameProxyFactory.js
var ScFrameProxyFactory_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class ScFrameProxyFactory extends _APICoreBase {
    constructor(apiCore, frameJacket) {
        super(apiCore);
        this.ScFrameProxy = null;
        this.FrameJacket = frameJacket;
    }
    Make() {
        return ScFrameProxyFactory_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
            });
        });
    }
    ProcessStep2(scFrameProxy) {
        return new Promise((resolve, reject) => ScFrameProxyFactory_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([ScFrameProxyFactory.name, this.ProcessStep2.name]);
            yield this.FrameJacket.WaitForCompleteNABFrameElement(this.ProcessStep2.name)
                .then(() => scFrameProxy.InstantiateAwaitElementsTop())
                .then(() => scFrameProxy.WireEvents())
                .then(() => resolve(scFrameProxy))
                .catch((err) => reject(this.ErrorHand.FormatRejectMessage([ScFrameProxyFactory.name, this.ProcessStep2.name], err)));
            this.Logger.FuncEnd([ScFrameProxyFactory.name, this.ProcessStep2.name]);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/FrameProxies/GenericFrameProxy.js
var GenericFrameProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};










class GenericFrameProxy extends _BaseElemProxy {
    constructor(apiCore, frameJacket, jqueryModalDialogsFrameProxy) {
        super(apiCore, frameJacket);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.FrameProxy */.K.FrameProxy;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.FrameProxy */.K.FrameProxy];
        this.Id = null;
        this.JqueryModalDialogsFrameProxy = jqueryModalDialogsFrameProxy;
        this.InstantiateInstance();
    }
    SendCommand(flowCommand) { }
    InstantiateInstance() {
        this.ScDocProxyResolver = new ScDocProxyResolver(this.ApiCore);
    }
    InstantiateAwaitElementsSelf() {
        return GenericFrameProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => GenericFrameProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart([GenericFrameProxy.name, this.InstantiateAwaitElementsSelf.name, this.ScProxyDisciminatorFriendly]);
                this.ErrorHand.ThrowIfNullOrUndefined(this.InstantiateAwaitElementsSelf.name, [this.ContainerElemJacket]);
                let frameJacket = this.ContainerJacketAsFrameJacket();
                if (frameJacket) {
                    yield frameJacket.WaitForCompleteNABFrameElement(this.ScProxyDisciminatorFriendly)
                        .then((result) => {
                        if (!result.IsCompleteNAB()) {
                            reject(result.DocumentReadtStateFriendly());
                        }
                    })
                        .then(() => this.ScDocProxyResolver.ScDocProxyFactoryMake(frameJacket.DocumentJacket, this.JqueryModalDialogsFrameProxy))
                        .then((scDocProxy) => this.HostedProxies.push(scDocProxy))
                        .then(() => {
                        this.DTFrameProxyMutationEvent_Subject = new DTFrameProxyMutationEvent_Subject(this.ApiCore);
                        this._ContentTreeBasedProxyMutationEvent_Observer = new _ContentTreeBasedProxyMutationEvent_Observer(this.ApiCore, this);
                    })
                        .then(() => resolve())
                        .catch((err) => reject(this.InstantiateAwaitElementsSelf.name + ' | ' + err));
                }
                this.Logger.FuncEnd([GenericFrameProxy.name, this.InstantiateAwaitElementsSelf.name, this.ScProxyDisciminatorFriendly]);
            }));
        });
    }
    WireEventsSelf() {
        this.Logger.FuncStart([GenericFrameProxy.name, this.WireEventsSelf.name, this.ScProxyDisciminatorFriendly]);
        let hostedDocProxy = this.GetHostedDocProxy();
        if (hostedDocProxy) {
            if (hostedDocProxy instanceof _ContentTreeBasedDocProxy) {
                hostedDocProxy.__ContentTreeBasedProxyMutationEvent_Subject.RegisterObserver(this._ContentTreeBasedProxyMutationEvent_Observer);
            }
        }
        else {
            this.ErrorHand.HandleFatalError([GenericFrameProxy.name, this.WireEventsSelf.name, this.ScProxyDisciminatorFriendly], 'No hosted doc found');
        }
        this.Logger.FuncEnd([GenericFrameProxy.name, this.WireEventsSelf.name, this.ScProxyDisciminatorFriendly]);
    }
    GetStateOfSelf() {
        return GenericFrameProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => GenericFrameProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart([GenericFrameProxy.name, this.GetStateOfSelf.name]);
                let stateOfDTFrame = new DefaultStateOfFrameProxy();
                let frameJacket = this.ContainerJacketAsFrameJacket();
                if (frameJacket) {
                    stateOfDTFrame.FrameStyling = stateOfDTFrame.FrameStyling = frameJacket.GetFrameStyling();
                    stateOfDTFrame.ZIndex = this.GetZindexAsInt();
                }
                resolve(stateOfDTFrame);
                this.Logger.FuncEnd([GenericFrameProxy.name, this.GetStateOfSelf.name]);
            }));
        });
    }
    SetStateSelf(stateOfDTFrame) {
        return GenericFrameProxy_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart(this.SetStateSelf.name, GenericFrameProxy.name);
                this.DTFrameProxyMutationEvent_Subject.DisableNotifications();
                this.SetFrameStyling(stateOfDTFrame);
                yield this.SetStateOfHosted(stateOfDTFrame.Children)
                    .then(() => this.DTFrameProxyMutationEvent_Subject.EnableNotifications())
                    .catch((err) => this.ErrorHand.HandleFatalError([GenericFrameProxy.name, this.SetStateSelf.name], err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.SetStateSelf.name, err);
            }
            this.Logger.FuncEnd(this.SetStateSelf.name, GenericFrameProxy.name);
        });
    }
    GetHostedAsDocumentJacket() {
        let toReturn = null;
        let firstHosted = this.GetHostedDocProxy();
        let frameElemJacket = this.ContainerJacketAsFrameJacket();
        if (frameElemJacket) {
            toReturn = frameElemJacket.DocumentJacket;
        }
        return toReturn;
    }
    ContainerJacketAsFrameJacket() {
        let toReturn = null;
        if (this.ContainerElemJacket) {
            toReturn = this.ContainerElemJacket;
        }
        return toReturn;
    }
    GetNativeFrameId() {
        return this.ContainerJacketAsFrameJacket().GetNativeIframeId();
    }
    GetScWindowType() {
        let scPageTypeResolver = new ScWindowTypeResolver/* ScWindowTypeResolver */.X(this.ApiCore);
        return scPageTypeResolver.GetScWindowType(this.ContainerJacketAsFrameJacket().DocumentJacket.UrlJacket);
    }
    SetFrameStyling(stateOfDTFrame) {
        this.Logger.FuncStart(this.SetFrameStyling.name);
        this.ContainerJacketAsFrameJacket().SetFrameStyling(stateOfDTFrame.FrameStyling);
        this.Logger.FuncEnd(this.SetFrameStyling.name);
    }
    OnContentEditorProxyMutation(payload) {
        let dtFrameProxyMutationEvent_Payload = {
            ContentEditorProxyMutationPayload: payload,
            FrameId: this.ContainerJacketAsFrameJacket().GetNativeIframeId()
        };
        this.DTFrameProxyMutationEvent_Subject.NotifyObserversAsync(dtFrameProxyMutationEvent_Payload);
    }
    GetHostedDocProxy() {
        this.Logger.FuncStart([GenericFrameProxy.name, this.GetHostedDocProxy.name, this.ScProxyDisciminatorFriendly], 'Hosted Count: ' + this.HostedProxies.length);
        let toReturn = null;
        this.HostedProxies.forEach((hostedProxy) => {
            if (hostedProxy instanceof _ScDocProxyOfTypeT) {
                toReturn = hostedProxy;
            }
        });
        if (!toReturn) {
            this.Logger.LogAsJsonPretty('did not find hosted doc proxy', this.HostedProxies);
        }
        this.Logger.FuncEnd([GenericFrameProxy.name, this.GetHostedDocProxy.name, this.ScProxyDisciminatorFriendly], (toReturn !== null).toString());
        return toReturn;
    }
    static ScFrameProxyFactory(apiCore, frameElemJacket, jqueryModalDialogsFrameProxy) {
        return GenericFrameProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => GenericFrameProxy_awaiter(this, void 0, void 0, function* () {
                apiCore.Logger.FuncStart([GenericFrameProxy.name, this.ScFrameProxyFactory.name]);
                let scFrameProxyFactory = new ScFrameProxyFactory(apiCore, frameElemJacket);
                yield scFrameProxyFactory.ProcessStep2(new GenericFrameProxy(apiCore, frameElemJacket, jqueryModalDialogsFrameProxy))
                    .then((scFrameProxy) => resolve(scFrameProxy))
                    .catch((err) => reject(apiCore.ErrorHand.FormatRejectMessage([GenericFrameProxy.name, this.ScFrameProxyFactory.name], err)));
                apiCore.Logger.FuncEnd([GenericFrameProxy.name, this.ScFrameProxyFactory.name]);
            }));
        });
    }
    WaitForCompleteNABFrameProxyOrReject() {
        return GenericFrameProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => GenericFrameProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForCompleteNABFrameProxyOrReject.name, this.ScProxyDisciminatorFriendly);
                let frameJacket = this.ContainerJacketAsFrameJacket();
                if (frameJacket) {
                    yield frameJacket.WaitForCompleteNABFrameElement(this.ScProxyDisciminatorFriendly)
                        .then((result) => {
                        if (result.IsCompleteNAB()) {
                            resolve(result.DocumentReadyState());
                        }
                        else {
                            reject(result.DocumentReadtStateFriendly);
                        }
                    })
                        .catch((err) => reject(this.WaitForCompleteNABFrameProxyOrReject.name + ' | ' + err));
                }
                this.Logger.FuncEnd(this.WaitForCompleteNABFrameProxyOrReject.name, this.ScProxyDisciminatorFriendly);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/ScDocProxyWatcherForFrames.js
var ScDocProxyWatcherForFrames_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






class ScDocProxyWatcherForFrames extends _APICoreBase {
    constructor(apiCore, documentJacket, scProxyDisciminatorFriendly) {
        super(apiCore);
        this.HostedFrameStatelessFrameProxies = [];
        this.Logger.CTORStart(ScDocProxyWatcherForFrames.name);
        this.DocumentJacket = documentJacket;
        this.ScProxyDisciminatorFriendly = scProxyDisciminatorFriendly;
        this.Logger.CTOREnd(ScDocProxyWatcherForFrames.name);
    }
    EnableWatcherForFrames() {
        return ScDocProxyWatcherForFrames_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([ScDocProxyWatcherForFrames.name, this.EnableWatcherForFrames.name], 'on behalf of: ' + this.ScProxyDisciminatorFriendly);
            try {
                let bodyElement;
                let watcherParams = {
                    Attributes: false,
                    ChildList: true,
                    OwnerFriendly: this.ScProxyDisciminatorFriendly,
                    Subtree: false,
                    TagFilter: ['IFRAME']
                };
                this.DocumentJacketMutationEvent_Observer = new ElementJacketMutationEvent_Observer(this.ApiCore, this.CallbackOnDocumentJacketMutationEvent.bind(this));
                yield this.DocumentJacket.WaitForGenericElemJacket(InjectConst/* ContentConst.Const.Selector.Html.Body */.y.Const.Selector.Html.Body)
                    .then((elemJacket) => bodyElement = elemJacket)
                    .then(() => bodyElement.AddWatcher(watcherParams))
                    .then((elemJacketMutationEvent_Subject) => this.ElemJacketMutationEvent_Subject = elemJacketMutationEvent_Subject)
                    .then(() => {
                    if (this.ElemJacketMutationEvent_Subject) {
                        this.ElemJacketMutationEvent_Subject.RegisterObserver(this.DocumentJacketMutationEvent_Observer);
                    }
                    else {
                        this.ErrorHand.WarningAndContinue(this.EnableWatcherForFrames.name, 'no ElemJacketMutationEvent_Subject');
                    }
                })
                    .catch((err) => this.ErrorHand.HandleFatalError([ScDocProxyWatcherForFrames.name, this.EnableWatcherForFrames.name], err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([ScDocProxyWatcherForFrames.name, this.EnableWatcherForFrames.name], err);
            }
            this.Logger.FuncEnd([ScDocProxyWatcherForFrames.name, this.EnableWatcherForFrames.name], 'on behalf of: ' + this.ScProxyDisciminatorFriendly);
        });
    }
    CallbackOnDocumentJacketMutationEvent(DocumentJacketMutationEvent_Payload) {
        this.Logger.FuncStart(this.CallbackOnDocumentJacketMutationEvent.name);
        if (DocumentJacketMutationEvent_Payload && DocumentJacketMutationEvent_Payload.AddedGenericElemJacket) {
            this.HandleElemJacketAddedToDocument(DocumentJacketMutationEvent_Payload.AddedGenericElemJacket);
        }
        this.Logger.FuncEnd(this.CallbackOnDocumentJacketMutationEvent.name);
    }
    HandleElemJacketAddedToDocument(elemJacket) {
        return ScDocProxyWatcherForFrames_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([ScDocProxyWatcherForFrames.name, this.HandleElemJacketAddedToDocument.name]);
            if (elemJacket) {
                if (elemJacket.NodeTagName === SharedConst/* SharedConst.Const.KeyWords.NodeTagName.IFrame */.v.Const.KeyWords.NodeTagName.IFrame) {
                    yield FrameElemJacket/* FrameJacket.FactoryFrameElemJackets */.r.FactoryFrameElemJackets(this.ApiCore, [elemJacket])
                        .then((frameElemJackets) => this.HandleFrameElemJacketAddedToDoc(frameElemJackets[0]))
                        .catch((err) => this.ErrorHand.HandleFatalError([ScDocProxyWatcherForFrames.name, this.HandleFrameElemJacketAddedToDoc.name], err));
                }
            }
            else {
                this.Logger.Log('No FrameJacket - no action');
            }
            this.Logger.FuncEnd([ScDocProxyWatcherForFrames.name, this.HandleElemJacketAddedToDocument.name]);
        });
    }
    HandleFrameElemJacketAddedToDoc(frameElemJacket) {
        return ScDocProxyWatcherForFrames_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([ScDocProxyWatcherForFrames.name, this.CallbackOnDocumentJacketMutationEvent.name]);
            try {
                yield GenericFrameProxy.ScFrameProxyFactory(this.ApiCore, frameElemJacket, null)
                    .then((stateLessFrameProxy) => this.HostedFrameStatelessFrameProxies.push(stateLessFrameProxy))
                    .then(() => this.Logger.Log(this.HandleFrameElemJacketAddedToDoc.name + 'step1 Complete'))
                    .catch((err) => this.ErrorHand.HandleFatalError(this.HandleElemJacketAddedToDocument.name, err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([ScDocProxyWatcherForFrames.name, this.HandleFrameElemJacketAddedToDoc.name], err);
            }
            this.Logger.FuncEnd([ScDocProxyWatcherForFrames.name, this.CallbackOnDocumentJacketMutationEvent.name]);
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/FrameProxies/ScDocProxyOfTypeT.js
var ScDocProxyOfTypeT_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class _ScDocProxyOfTypeT extends _BaseScProxy {
    constructor(apiCore, documentJacket) {
        super(apiCore);
        this.Friendly = '{unknown friendly}';
        this.DocumentJacket = documentJacket;
    }
    GetStateOfSelf() {
        return ScDocProxyOfTypeT_awaiter(this, void 0, void 0, function* () {
            let stateOf = {
                Disciminator: this.ScProxyDisciminator,
                DisciminatorFriendly: this.ScProxyDisciminatorFriendly,
                Children: []
            };
            return Promise.resolve(stateOf);
        });
    }
    SetStateSelf(state) {
        return ScDocProxyOfTypeT_awaiter(this, void 0, void 0, function* () {
        });
    }
    CreateWatcherForFrames() {
        return ScDocProxyOfTypeT_awaiter(this, void 0, void 0, function* () {
            try {
                this.WatcherForFrames = new ScDocProxyWatcherForFrames(this.ApiCore, this.DocumentJacket, this.ScProxyDisciminatorFriendly);
                yield this.WatcherForFrames.EnableWatcherForFrames()
                    .catch((err) => this.ErrorHand.HandleFatalError([_ScDocProxyOfTypeT.name, this.CreateWatcherForFrames.name, this.ScProxyDisciminatorFriendly], err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([_ScDocProxyOfTypeT.name, this.CreateWatcherForFrames.name, this.ScProxyDisciminatorFriendly], err);
            }
        });
    }
    WireWatcherForFrames() {
        this.Logger.FuncStart([_ScDocProxyOfTypeT.name, this.WireWatcherForFrames.name, this.ScProxyDisciminatorFriendly]);
        try {
        }
        catch (err) {
            this.ErrorHand.HandleFatalError([_ScDocProxyOfTypeT.name, this.WireWatcherForFrames.name, this.ScProxyDisciminatorFriendly], err);
        }
        this.Logger.FuncEnd([_ScDocProxyOfTypeT.name, this.WireWatcherForFrames.name, this.ScProxyDisciminatorFriendly]);
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/DOMJacket/scripts/Elements/GenericElemJacket.js
var GenericElemJacket = __webpack_require__(4940);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/scripts/Events/NativeClassNameChangeEvent/NativeClassNameChangeEvent_Observer.js


class NativeClassNameChangeEvent_Observer extends HindSiteEvent_Observer/* _HindSiteEvent_Observer */.k {
    constructor(commonCore, callback) {
        super(commonCore, NativeClassNameChangeEvent_Observer.name, callback);
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.NativeClassNameChangeEvent_Observer */.g.NativeClassNameChangeEvent_Observer;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/scripts/Events/NativeClassNameChangeEvent/NativeClassNameChangeEvent_Subject.js
var NativeClassNameChangeEvent_Subject_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class NativeClassNameChangeEvent_Subject extends HindeSiteEvent_Subject/* _HindeSiteEvent_Subject */.C {
    constructor(commonCore, treeElementJacket) {
        super(commonCore);
        this.Friendly_Subject = NativeClassNameChangeEvent_Subject.name;
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.NativeClassNameChangeEvent_Subject */.g.NativeClassNameChangeEvent_Subject;
        this.ShowLogActions = true;
        this.TreeElement = treeElementJacket.NativeElement;
        this.InitTreeMutationEvent_Observer();
    }
    InitTreeMutationEvent_Observer() {
        try {
            if (this.TreeElement) {
                let self = this;
                let observer = new MutationObserver((mutations) => self.OnNativeMutationEvent(mutations));
                observer.observe(this.TreeElement, { attributes: true, subtree: true, childList: true });
            }
        }
        catch (err) {
            this.ErrorHand.HandleFatalError(this.InitTreeMutationEvent_Observer.name, err);
        }
    }
    OnNativeMutationEvent(mutationRecords) {
        mutationRecords.forEach((mutationRecord, index) => NativeClassNameChangeEvent_Subject_awaiter(this, void 0, void 0, function* () {
            if (mutationRecord.attributeName === 'class') {
                let anchorTest = (mutationRecord.target);
                if (anchorTest) {
                    if (anchorTest.classList.contains(InjectConst/* ContentConst.Const.ClassNames.SC.scContentTreeNodeActive */.y.Const.ClassNames.SC.scContentTreeNodeActive)) {
                        this.NotifyObserversAsync(null);
                    }
                }
            }
        }));
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfContentTree.js
var DefaultStateOfContentTree = __webpack_require__(7148);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/ContentTreeProxyMutationEvent/ContentTreeProxyMutationEvent_Subject.js


class ContentTreeMutationEvent_Subject extends HindeSiteEvent_Subject/* _HindeSiteEvent_Subject */.C {
    constructor(apiCore) {
        super(apiCore);
        this.Friendly_Subject = ContentTreeMutationEvent_Subject.name;
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.ContentTreeMutationEvent_Subject */.g.ContentTreeMutationEvent_Subject;
        this.ShowLogActions = true;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfScContentTreeNode.js

class DefaultStateOfScContentTreeNode {
    constructor() {
        this.Disciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.ContentTreeNode */.K.ContentTreeNode;
        this.DisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.ContentTreeNode */.K.ContentTreeNode];
        this.Friendly = '';
        this.IsExpanded = false;
        this.IsActive = false;
        this.Coord = {
            LevelIndex: -1,
            LevelWidth: -1,
            SiblingIndex: -1
        };
        this.ItemId = null;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentTreeProxy/ScContentTreeNodeProxy/ScContentTreeNodeGetState.js
var ScContentTreeNodeGetState_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class ScContentTreeNodeGetState extends _APICoreBase {
    constructor(apiCore, treeNodeProperties) {
        super(apiCore);
        this.TreeNodeProperties = treeNodeProperties;
    }
    GetStateOfScContentTreeNodeGeneric(includeChildren) {
        return ScContentTreeNodeGetState_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeGetState_awaiter(this, void 0, void 0, function* () {
                this.StateOfScContentTreeNode = new DefaultStateOfScContentTreeNode();
                if (this.TreeNodeProperties) {
                    this.StateOfScContentTreeNode.Coord = this.TreeNodeProperties.CandidateTreeNode.Coord;
                    yield this.HarvestNodeState()
                        .catch((err) => this.ErrorHand.HandleFatalError(this.GetStateOfScContentTreeNodeGeneric.name, err));
                }
                resolve(this.StateOfScContentTreeNode);
            }));
        });
    }
    GetOwnProperties() {
        this.Logger.FuncStart([ScContentTreeNodeGetState.name, this.GetOwnProperties.name]);
        this.ErrorHand.ThrowIfNullOrUndefined(this.GetOwnProperties.name, [this.TreeNodeProperties.CandidateTreeNode.LinkNodeElem, this.TreeNodeProperties.CandidateTreeNode.glyphElem]);
        this.StateOfScContentTreeNode.IsActive = this.TreeNodeProperties.IsActive;
        this.StateOfScContentTreeNode.IsExpanded = this.TreeNodeProperties.IsExpanded;
        this.StateOfScContentTreeNode.Friendly = this.TreeNodeProperties.InnerText;
        this.StateOfScContentTreeNode.ItemId = this.GetApparentItemId(this.TreeNodeProperties.CandidateTreeNode.glyphElem);
        this.StateOfScContentTreeNode.IconSrc = this.TreeNodeProperties.GetIconSrc();
        this.Logger.FuncEnd([ScContentTreeNodeGetState.name, this.GetOwnProperties.name]);
    }
    GetApparentItemId(htmlImageElement) {
        let glyphNodeIdSuffix = htmlImageElement.NativeElement.id.replace(InjectConst/* ContentConst.Const.Names.SC.TreeGlyphPrefix */.y.Const.Names.SC.TreeGlyphPrefix, '');
        let toReturnGuidData = Guid/* Guid.ParseGuid */.i.ParseGuid(glyphNodeIdSuffix, true);
        return toReturnGuidData;
    }
    HarvestNodeState(forceRefreshData = false) {
        return ScContentTreeNodeGetState_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeGetState_awaiter(this, void 0, void 0, function* () {
                this.GetOwnProperties();
                resolve();
            }));
        });
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/DOMJacket/scripts/DOMJacketEntry.js + 2 modules
var DOMJacketEntry = __webpack_require__(7406);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentTreeProxy/ScContentTreeNodeProxy/TreeNodeProxyCandidate.js
var TreeNodeProxyCandidate_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class TreeNodeProxyCandidate extends _APICoreBase {
    constructor(apiCore, containerElemJacket, coord) {
        super(apiCore);
        this.ContainerElemJacket = containerElemJacket;
        this.Coord = coord;
    }
    ProcessCandidate() {
        return TreeNodeProxyCandidate_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => TreeNodeProxyCandidate_awaiter(this, void 0, void 0, function* () {
                if (this.ContainerElemJacket) {
                    if (this.ContainerElemJacket.NativeElement.hasAttribute('src')) {
                        this.InferFromImageElement(this.ContainerElemJacket.NativeElement);
                    }
                    else if (this.ContainerElemJacket.NativeElement.hasAttribute('href')) {
                        this.InferFromAnchorElement(this.ContainerElemJacket.NativeElement);
                    }
                    else if (this.ContainerElemJacket.NativeElement.classList.contains('scContentTreeNode')) {
                        this.InferFromDivElement(this.ContainerElemJacket.NativeElement);
                    }
                    else {
                        this.ErrorHand.HandleFatalError(TreeNodeProxyCandidate.name, 'invalid source element type: ' + (typeof this.ContainerElemJacket));
                    }
                }
                else {
                    this.ErrorHand.HandleFatalError(TreeNodeProxyCandidate.name, 'null sourceElement or associatedDoc');
                }
                yield this.GetOwnGlyphNodeElem()
                    .then(() => this.PollinateNodeElem())
                    .then(() => resolve(this))
                    .catch((err) => reject(this.ErrorHand.FormatRejectMessage([TreeNodeProxyCandidate.name, this.ProcessCandidate.name], err)));
            }));
        });
    }
    IsNoteWorthy() {
        return this.QueryIsExpanded() || this.QueryIsActive();
    }
    InferFromAnchorElement(anchorElement) {
        if (anchorElement) {
            this.Logger.Log(this.InferFromAnchorElement.name);
            this.ScContentTreeNodeDivElem = new DOMJacketEntry/* ElementDivJacket */.j(this.ApiCore, anchorElement.parentElement);
        }
    }
    GetOwnGlyphNodeElem() {
        return TreeNodeProxyCandidate_awaiter(this, void 0, void 0, function* () {
            try {
                yield this.ScContentTreeNodeDivElem.WaitFor(":scope > img", this.GetOwnGlyphNodeElem.name)
                    .then((elemImgJacket) => this.glyphElem = elemImgJacket)
                    .catch((err) => this.ErrorHand.HandleFatalError(this.GetOwnGlyphNodeElem.name, err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.GetOwnGlyphNodeElem.name, err);
            }
        });
    }
    InferFromDivElement(divElement) {
        if (divElement) {
            this.ScContentTreeNodeDivElem = new DOMJacketEntry/* ElementDivJacket */.j(this.ApiCore, divElement);
        }
    }
    InferFromImageElement(imageElement) {
        if (imageElement) {
            this.ScContentTreeNodeDivElem = new DOMJacketEntry/* ElementDivJacket */.j(this.ApiCore, imageElement.parentElement);
        }
    }
    PollinateNodeElem() {
        return TreeNodeProxyCandidate_awaiter(this, void 0, void 0, function* () {
            try {
                this.ErrorHand.ThrowIfNullOrUndefinedStatic(this.PollinateNodeElem.name, [this.ScContentTreeNodeDivElem]);
                yield this.ScContentTreeNodeDivElem.WaitFor(":scope > a", this.PollinateNodeElem.name)
                    .then((htmlAnchorElement) => this.LinkNodeElem = htmlAnchorElement)
                    .catch((err) => this.ErrorHand.HandleFatalError(this.PollinateNodeElem.name, err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([TreeNodeProxyCandidate.name, this.PollinateNodeElem.name], err);
            }
        });
    }
    QueryIsActive() {
        let classList = this.LinkNodeElem.NativeElement.classList;
        let toReturn = classList.contains(InjectConst/* ContentConst.Const.ClassNames.SC.scContentTreeNodeActive */.y.Const.ClassNames.SC.scContentTreeNodeActive);
        return toReturn;
    }
    QueryIsExpanded() {
        var toReturn = false;
        var srcAttr = this.glyphElem.NativeElement.getAttribute('src');
        if (srcAttr !== null) {
            if (srcAttr.indexOf(InjectConst/* ContentConst.Const.Names.SC.TreeExpandedPng.sc920 */.y.Const.Names.SC.TreeExpandedPng.sc920) > -1) {
                toReturn = true;
            }
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentTreeProxy/ScContentTreeNodeProxy/TreeNodeProperties.js
var TreeNodeProperties_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class TreeNodeProperties extends _APICoreBase {
    constructor(apiCore, candidateTreeNode, containerElemJacket, ownerNode, conResolver, parentTreeNode) {
        super(apiCore);
        this.Children = [];
        this.ContainerElemJacket = containerElemJacket;
        this.IsExpanded = candidateTreeNode.QueryIsExpanded();
        this.IsActive = candidateTreeNode.QueryIsActive();
        this.CandidateTreeNode = candidateTreeNode;
        this.OwnerNode = ownerNode;
        this.IconResolver = conResolver;
        this.ParentTreeNode = parentTreeNode;
        this.Instantiate();
    }
    Instantiate() {
        try {
        }
        catch (err) {
            this.ErrorHand.HandleFatalError(this.Instantiate.name, err);
        }
    }
    InstantiateAwaitElementsSelf() {
        return TreeNodeProperties_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([TreeNodeProperties.name, this.InstantiateAwaitElementsSelf.name]);
            yield this.GetOwnChildren()
                .then(() => this.HarvestProperties())
                .then(() => this.HarvestLineageProperties())
                .catch((err) => this.ErrorHand.FormatRejectMessage([TreeNodeProperties.name, this.InstantiateAwaitElementsSelf.name], err));
            this.Logger.FuncEnd([TreeNodeProperties.name, this.InstantiateAwaitElementsSelf.name]);
        });
    }
    HarvestProperties() {
        this.InnerText = this.CandidateTreeNode.LinkNodeElem.NativeElement.innerText;
    }
    Friendly() {
        let toReturn = 'lvl: ' + this.CandidateTreeNode.Coord.LevelIndex + ' Sib idx: ' + this.CandidateTreeNode.Coord.SiblingIndex + ' tot sib: ' + this.CandidateTreeNode.Coord.LevelWidth;
        return toReturn;
    }
    GetOwnChildren() {
        return new Promise((resolve, reject) => TreeNodeProperties_awaiter(this, void 0, void 0, function* () {
            try {
                let nativeChildNodes = null;
                if (this.IsActive || this.IsExpanded) {
                    nativeChildNodes = this.CandidateTreeNode.ScContentTreeNodeDivElem.NativeElement.querySelectorAll(':scope > div > ' + InjectConst/* ContentConst.Const.Selector.SC.ContentTree.ScContentTreeNode */.y.Const.Selector.SC.ContentTree.ScContentTreeNode);
                    let promAr = [];
                    let candidateChildren = [];
                    nativeChildNodes.forEach((childNode, index) => {
                        let childJacket = new DOMJacketEntry/* ElementDivJacket */.j(this.ApiCore, childNode);
                        let candidateCoord = {
                            LevelIndex: this.CandidateTreeNode.Coord.LevelIndex + 1,
                            LevelWidth: nativeChildNodes.length,
                            SiblingIndex: index,
                        };
                        let candidateChild = new TreeNodeProxyCandidate(this.ApiCore, childJacket, candidateCoord);
                        promAr.push(candidateChild.ProcessCandidate());
                        candidateChildren.push(candidateChild);
                    });
                    yield Promise.all(promAr)
                        .then((treeNodeProxyCandidates) => treeNodeProxyCandidates.forEach((processedCandidateChildCandidate) => {
                        if (processedCandidateChildCandidate.IsNoteWorthy()) {
                            this.Children.push(new ScContentTreeNodeProxy(this.ApiCore, processedCandidateChildCandidate, processedCandidateChildCandidate.ContainerElemJacket, this.OwnerNode, this.IconResolver));
                        }
                    }))
                        .catch((err) => reject(err));
                }
                resolve();
            }
            catch (err) {
                reject(this.GetOwnChildren.name + ' | ' + err);
            }
        }));
    }
    HarvestLineageProperties() {
        let mainIconSrc = this.GetMainIconSrc();
        this.Linieage.L1Icon = mainIconSrc;
        if (this.CandidateTreeNode.Coord.LevelIndex === 0) {
            this.Linieage.L1Icon = this.IconResolver.DefaultScIcon();
            this.Linieage.L1Text = '';
            this.Linieage.L2Icon = this.IconResolver.DefaultScIcon();
            this.Linieage.L2Text = '';
        }
        else if (this.CandidateTreeNode.Coord.LevelIndex === 1) {
            this.Linieage.L1Icon = this.GetIconSrc();
            this.Linieage.L1Text = this.Friendly();
            this.Linieage.L2Icon = this.IconResolver.ResolveIconData('');
            this.Linieage.L2Text = '';
        }
        else if (this.CandidateTreeNode.Coord.LevelIndex === 2) {
            if (this.ParentTreeNode) {
                this.Linieage.L1Icon = this.Linieage.L1Icon;
                this.Linieage.L1Text = this.Linieage.L1Text;
            }
            else {
                this.Linieage.L1Icon = this.IconResolver.ResolveIconData('');
                this.Linieage.L1Text = '';
            }
            this.Linieage.L2Icon = this.GetIconSrc();
            this.Linieage.L2Text = this.Friendly();
        }
        else {
            if (this.ParentTreeNode) {
                this.Linieage.L1Icon = this.ParentTreeNode.TreeNodeProperties.Linieage.L1Icon;
                this.Linieage.L1Text = this.ParentTreeNode.TreeNodeProperties.Linieage.L1Text;
                this.Linieage.L2Icon = this.ParentTreeNode.TreeNodeProperties.Linieage.L2Icon;
                this.Linieage.L2Text = this.ParentTreeNode.TreeNodeProperties.Linieage.L2Text;
            }
            else {
                this.Linieage.L1Icon = this.IconResolver.ResolveIconData('');
                this.Linieage.L1Text = '';
                this.Linieage.L2Icon = this.IconResolver.ResolveIconData('');
                this.Linieage.L2Text = '';
            }
        }
        if (this.CandidateTreeNode.Coord.LevelIndex == 0) {
            this.Linieage.L1Icon = this.IconResolver.ResolveIconData('');
        }
        else if (this.CandidateTreeNode.Coord.LevelIndex == 1) {
            this.Linieage.L1Icon = this.GetIconSrc();
        }
        else {
            if (this.ParentTreeNode) {
                this.Linieage.L1Icon = this.ParentTreeNode.TreeNodeProperties.Linieage.L1Icon;
            }
            else {
                this.Linieage.L1Icon = this.IconResolver.ResolveIconData('');
            }
        }
    }
    GetIconSrc() {
        let toReturn = null;
        let foundElement = this.CandidateTreeNode.ScContentTreeNodeDivElem.querySelector(InjectConst/* ContentConst.Const.Selector.SC.ContentTree.scContentTreeNodeIcon */.y.Const.Selector.SC.ContentTree.scContentTreeNodeIcon);
        if (foundElement) {
            toReturn = this.IconResolver.ResolveIconData(foundElement.NativeElement.src);
        }
        return toReturn;
    }
    GetMainIconSrc() {
        let toReturn = null;
        let penultimateNode = this.OwnerNode;
        let penultimateElem = this.CandidateTreeNode.ScContentTreeNodeDivElem.NativeElement.closest('[id=ContentTreeActualSize] > .scContentTreeNode >  div > .scContentTreeNode');
        if (penultimateElem) {
            let penElemJacket = new DOMJacketEntry/* ElementDivJacket */.j(this.ApiCore, penultimateElem);
        }
        if (penultimateNode !== null) {
            toReturn = penultimateNode.TreeNodeProperties.GetIconSrc();
        }
        return toReturn;
    }
    IsContentTreeNode() {
        var toReturn = false;
        var className = this.CandidateTreeNode.ScContentTreeNodeDivElem.NativeElement.className;
        toReturn = className === InjectConst/* ContentConst.Const.ClassNames.SC.ContentTreeNode */.y.Const.ClassNames.SC.ContentTreeNode;
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentTreeProxy/ScContentTreeNodeProxy/ScContentTreeNodeProxy.js
var ScContentTreeNodeProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class ScContentTreeNodeProxy extends _BaseElemProxy {
    constructor(apiCore, candidateTreeNode, sourceElemJacket, parent, conResolver) {
        super(apiCore, sourceElemJacket);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.ContentTreeNode */.K.ContentTreeNode;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.ContentTreeNode */.K.ContentTreeNode];
        this.Logger.CTORStart(ScContentTreeNodeProxy.name);
        this.TreeNodeProperties = new TreeNodeProperties(apiCore, candidateTreeNode, sourceElemJacket, this, conResolver, parent);
        this.Logger.CTOREnd(ScContentTreeNodeProxy.name);
    }
    InstantiateAwaitElementsSelf() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([ScContentTreeNodeProxy.name, this.InstantiateAwaitElementsSelf.name], this.TreeNodeProperties.Friendly());
            yield this.TreeNodeProperties.InstantiateAwaitElementsSelf()
                .then(() => this.TreeNodeProperties.Children.forEach((treeNodeProxy) => this.HostedProxies.push(treeNodeProxy)))
                .catch((err) => {
                Promise.reject(this.ErrorHand.FormatRejectMessage([ScContentTreeNodeProxy.name, this.InstantiateAwaitElementsSelf.name], err));
            });
            this.Logger.FuncEnd([ScContentTreeNodeProxy.name, this.InstantiateAwaitElementsSelf.name], this.TreeNodeProperties.Friendly() + ' ' + this.HostedProxies.length);
        });
    }
    GetStateOfSelf() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart([ScContentTreeNodeProxy.name, this.GetStateOfSelf.name, this.TreeNodeProperties.InnerText], 'Children: ' + this.TreeNodeProperties.Children.length);
                let contentTreeNodeProxyGetState = new ScContentTreeNodeGetState(this.ApiCore, this.TreeNodeProperties);
                yield contentTreeNodeProxyGetState.GetStateOfScContentTreeNodeGeneric(true)
                    .then((stateOfScContentTreeNodeDeep) => resolve(stateOfScContentTreeNodeDeep))
                    .catch((err) => reject(this.GetStateOfSelf.name + ' | ' + err));
                this.Logger.FuncEnd([ScContentTreeNodeProxy.name, this.GetStateOfSelf.name, this.TreeNodeProperties.InnerText]);
            }));
        });
    }
    SetStateOfTreeNode(newData, depth) {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                if (newData.IsExpanded) {
                    yield this.ExpandNode();
                }
                if (newData.IsActive) {
                    yield this.ActivateNode();
                }
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.SetStateOfTreeNode.name, err);
            }
        });
    }
    ActivateNode() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.ActivateNode.name);
                this.Logger.Log('activating node: ' + this.TreeNodeProperties.Friendly());
                yield this.TreeNodeProperties.CandidateTreeNode.LinkNodeElem.WaitForElemToHaveClassOrReject([InjectConst/* ContentConst.Const.ClassNames.SC.scContentTreeNodeActive */.y.Const.ClassNames.SC.scContentTreeNodeActive, InjectConst/* ContentConst.Const.ClassNames.SC.scContentTreeNodeNormal */.y.Const.ClassNames.SC.scContentTreeNodeNormal], this.TreeNodeProperties.Friendly());
                this.TreeNodeProperties.CandidateTreeNode.LinkNodeElem.NativeElement.click();
                yield this.TreeNodeProperties.CandidateTreeNode.LinkNodeElem.WaitForElemToHaveClassOrReject([InjectConst/* ContentConst.Const.ClassNames.SC.scContentTreeNodeActive */.y.Const.ClassNames.SC.scContentTreeNodeActive], this.TreeNodeProperties.Friendly())
                    .then(() => resolve())
                    .catch((err) => reject(this.ActivateNode.name + ' | ' + err));
                this.Logger.FuncEnd(this.ActivateNode.name);
            }));
        });
    }
    ExpandNode() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.TreeNodeProperties.IsExpanded) {
                    this.TreeNodeProperties.CandidateTreeNode.glyphElem.NativeElement.click();
                }
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.ExpandNode.name, err);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentTreeProxy/ContentTreeElemProxy.js
var ContentTreeElemProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};












class ContentTreeElemProxy extends _BaseElemProxy {
    constructor(apiCore, treeContainerJacket, TreeRootSelector) {
        super(apiCore, treeContainerJacket);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.ContentTree */.K.ContentTree;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.ContentTree */.K.ContentTree];
        this.ErrorHand.ThrowIfNullOrUndefined(ContentTreeElemProxy.name, [treeContainerJacket]);
        this.TreeRootSelector = TreeRootSelector;
        this.InstantiateInstance();
    }
    InstantiateInstance() {
        this.ConResolver = new IConResolver(this.ApiCore);
    }
    InstantiateAwaitElementsSelf() {
        return ContentTreeElemProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.InstantiateAwaitElementsSelf.name);
            try {
                yield yield this.GetRootNodeProxy(this.ContainerElemJacket)
                    .then((treeNodeProxy) => this.HostedProxies.push(treeNodeProxy))
                    .then(() => {
                    this.ContentTreeMutationEvent_Subject = new ContentTreeMutationEvent_Subject(this.ApiCore);
                    this.NativeClassNameChangeEvent_Subject = new NativeClassNameChangeEvent_Subject(this.ApiCore, this.ContainerElemJacket);
                    this.NativeClassNameChangeEvent_Observer = new NativeClassNameChangeEvent_Observer(this.ApiCore, this.CallBackOnNativeClassNameChangeEventAsync.bind(this));
                });
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.InstantiateAwaitElementsSelf.name, err);
            }
            this.Logger.FuncEnd(this.InstantiateAwaitElementsSelf.name);
        });
    }
    WireEventsSelf() {
        this.Logger.FuncStart(this.WireEventsSelf.name);
        this.NativeClassNameChangeEvent_Subject.RegisterObserver(this.NativeClassNameChangeEvent_Observer);
        this.Logger.FuncEnd(this.WireEventsSelf.name);
    }
    CallBackOnNativeClassNameChangeEventAsync(notUsed) {
        this.Logger.FuncStart(this.CallBackOnNativeClassNameChangeEventAsync.name);
        this.TaskMonitor.AsyncTaskStarted(this.CallBackOnNativeClassNameChangeEventAsync.name);
        if (this.ContentTreeMutationEvent_Subject) {
            this.GetState()
                .then((stateOfContentTree) => {
                let TreeMutationEvent_Payload = {
                    ContentTree: stateOfContentTree
                };
                this.ContentTreeMutationEvent_Subject.NotifyObserversAsync(TreeMutationEvent_Payload);
            })
                .then(() => this.Logger.Log(this.CallBackOnNativeClassNameChangeEventAsync.name + ' completed'))
                .catch((err) => this.ErrorHand.HandleFatalError(this.CallBackOnNativeClassNameChangeEventAsync.name, err));
        }
        this.TaskMonitor.AsyncTaskCompleted(this.CallBackOnNativeClassNameChangeEventAsync.name);
        this.Logger.FuncEnd(this.CallBackOnNativeClassNameChangeEventAsync.name);
    }
    TriggerInboundEventAsync() {
        this.Logger.FuncStart([ContentTreeElemProxy.name, this.TriggerInboundEventAsync.name]);
        this.CallBackOnNativeClassNameChangeEventAsync(null);
        this.TriggerInboundEventsAsyncOnHosted();
        this.Logger.FuncEnd([ContentTreeElemProxy.name, this.TriggerInboundEventAsync.name]);
    }
    GetTreeNodeByGlyph(targetNode) {
        return new Promise((resolve, reject) => ContentTreeElemProxy_awaiter(this, void 0, void 0, function* () {
            let scContentTreeNodeProxy = null;
            if (targetNode && this.ContainerElemJacket) {
                var treeGlyphTargetId = InjectConst/* ContentConst.Const.Names.SC.TreeGlyphPrefix */.y.Const.Names.SC.TreeGlyphPrefix + Guid/* Guid.WithoutDashes */.i.WithoutDashes(targetNode.ItemId);
                yield this.ContainerElemJacket.WaitFor('[id=' + treeGlyphTargetId + ']', this.GetTreeNodeByGlyph.name + ' ' + treeGlyphTargetId)
                    .then((elemJacket) => this.GetTreeNodeCommon(elemJacket, targetNode.Coord))
                    .then((scContentTreeNodeProxy) => resolve(scContentTreeNodeProxy))
                    .catch((err) => reject(this.GetTreeNodeByGlyph.name + ' | ' + err));
            }
            else {
                reject(() => this.ErrorHand.FormatRejectMessage(this.GetTreeNodeByGlyph.name, 'null target node or null treeContainerJacket'));
            }
        }));
    }
    GetTreeNodeCommon(elemJacket, coord) {
        return ContentTreeElemProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentTreeElemProxy_awaiter(this, void 0, void 0, function* () {
                let treeNodeCandidate = null;
                let scContentTreeNodeProxy = null;
                treeNodeCandidate = new TreeNodeProxyCandidate(this.ApiCore, elemJacket, coord);
                yield treeNodeCandidate.ProcessCandidate()
                    .then(() => scContentTreeNodeProxy = new ScContentTreeNodeProxy(this.ApiCore, treeNodeCandidate, treeNodeCandidate.ContainerElemJacket, null, this.ConResolver))
                    .then(() => resolve(scContentTreeNodeProxy))
                    .catch((err) => reject(this.ErrorHand.HandleFatalError([ContentTreeElemProxy.name, this.GetTreeNodeCommon.name], err)));
            }));
        });
    }
    SetStateOfNodeRecursive(currentNodeData, depth) {
        return ContentTreeElemProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.SetStateOfNodeRecursive.name, currentNodeData.Friendly + ' ' + depth.toString());
            try {
                let maxIterDepth = 200;
                let promisesAr = [];
                if (depth > maxIterDepth) {
                    this.ErrorHand.HandleFatalError(this.SetStateOfNodeRecursive.name, 'Iteration check - max depth exceed. Something is probably wrong');
                }
                if (depth < maxIterDepth && currentNodeData) {
                    let targetScContentTreeNodeProxy = null;
                    yield this.GetTreeNodeByGlyph(currentNodeData)
                        .then((scContentTreeNodeProxy) => targetScContentTreeNodeProxy = scContentTreeNodeProxy)
                        .catch((err) => this.ErrorHand.WarningAndContinue(this.SetStateOfNodeRecursive.name, 'Tree node not found: ' + currentNodeData.Friendly + ' ' + currentNodeData.ItemId));
                    if (targetScContentTreeNodeProxy) {
                        yield targetScContentTreeNodeProxy.SetStateOfTreeNode(currentNodeData, depth);
                    }
                    if (currentNodeData.Children.length > 0) {
                        currentNodeData.Children.forEach((nodeChild) => promisesAr.push(this.SetStateOfNodeRecursive(nodeChild, depth + 1)));
                        yield Promise.all(promisesAr);
                    }
                }
                else {
                    this.ErrorHand.HandleFatalError(this.SetStateOfNodeRecursive.name, 'no node date or max depth hit ' + depth.toString());
                }
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.SetStateOfNodeRecursive.name, err);
            }
            this.Logger.FuncEnd(this.SetStateOfNodeRecursive.name, currentNodeData.Friendly);
        });
    }
    SetStateSelf(stateOfContentTree) {
        return ContentTreeElemProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([ContentTreeElemProxy.name, this.SetStateSelf.name]);
            this.TaskMonitor.AsyncTaskStarted(this.SetStateSelf.name);
            try {
                this.ContentTreeMutationEvent_Subject.DisableNotifications();
                yield this.SetStateOfNodeRecursive(stateOfContentTree.ContentTreeNodeDeep, 0);
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.SetStateSelf.name, err);
            }
            this.ContentTreeMutationEvent_Subject.EnableNotifications();
            this.TaskMonitor.AsyncTaskCompleted(this.SetStateSelf.name);
            this.Logger.FuncEnd([ContentTreeElemProxy.name, this.SetStateSelf.name]);
        });
    }
    GetActiveTreeNodeFromAncestorNode(stateOfScContentTreeNodeDeep) {
        let foundNode = null;
        if (stateOfScContentTreeNodeDeep.IsActive) {
            foundNode = stateOfScContentTreeNodeDeep;
        }
        else {
            stateOfScContentTreeNodeDeep.Children.forEach((child) => {
                let candidate = this.GetActiveTreeNodeFromAncestorNode(child);
                if (candidate !== null) {
                    foundNode = candidate;
                }
            });
        }
        return foundNode;
    }
    GetStateOfSelf() {
        return new Promise((resolve, reject) => ContentTreeElemProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([ContentTreeElemProxy.name, this.GetStateOfSelf.name]);
            let stateOfContentTree = new DefaultStateOfContentTree/* DefaultStateOfContentTree */.z();
            this.ErrorHand.ThrowIfNullOrUndefined(this.GetStateOfSelf.name, [stateOfContentTree]);
            let treeRootProxy = null;
            this.HostedProxies.length = 0;
            yield this.GetRootNodeProxy(this.ContainerElemJacket)
                .then((treeNodeProxy) => treeRootProxy = treeNodeProxy)
                .then(() => treeRootProxy.InstantiateAwaitElementsTop())
                .then(() => this.HostedProxies.push(treeRootProxy))
                .then(() => resolve(stateOfContentTree))
                .catch((err) => reject(this.ErrorHand.FormatRejectMessage([ContentTreeElemProxy.name, this.GetStateOfSelf.name], err)));
            this.Logger.FuncEnd([ContentTreeElemProxy.name, this.GetStateOfSelf.name]);
        }));
    }
    GetRootNodeProxy(rootTreeNodeJacket) {
        return new Promise((resolve, reject) => ContentTreeElemProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetRootNodeProxy.name);
            this.ErrorHand.ThrowIfNullOrUndefined([ContentTreeElemProxy.name, this.GetRootNodeProxy.name], [rootTreeNodeJacket]);
            let treeRootNodeProxy = null;
            if (this.ContainerElemJacket) {
                if (rootTreeNodeJacket) {
                    let parentHtmlElement = rootTreeNodeJacket.NativeElement.parentElement;
                    var rootParent = new GenericElemJacket/* GenericElemJacket */.c(this.ApiCore, parentHtmlElement);
                    let coord = {
                        LevelIndex: 0,
                        SiblingIndex: 0,
                        LevelWidth: 1,
                    };
                    if (rootParent) {
                        yield rootParent.WaitFor(InjectConst/* ContentConst.Const.Selector.SC.ContentTree.ScContentTreeNodeGlyph */.y.Const.Selector.SC.ContentTree.ScContentTreeNodeGlyph, this.GetRootNodeProxy.name)
                            .then((firstChildGlyphNode) => this.GetTreeNodeCommon(firstChildGlyphNode, coord))
                            .then((scContentTreeNodeProxy) => treeRootNodeProxy = scContentTreeNodeProxy)
                            .then(() => resolve(treeRootNodeProxy))
                            .catch((err) => reject(this.GetRootNodeProxy.name + ' | ' + err));
                    }
                    else {
                        this.ErrorHand.HandleFatalError([ContentTreeElemProxy.name, this.GetRootNodeProxy.name], 'No root parent');
                    }
                }
                else {
                    reject(this.ErrorHand.FormatRejectMessage(this.GetRootNodeProxy.name, 'no root node'));
                }
            }
            else {
                reject(this.ErrorHand.FormatRejectMessage(this.GetRootNodeProxy.name, 'no Container'));
            }
            this.Logger.FuncEnd(this.GetRootNodeProxy.name);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/_ContentTreeBasedProxy.js
var _ContentTreeBasedProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class _ContentTreeBasedDocProxy extends _ScDocProxyOfTypeT {
    constructor(apiCore, documentJacket) {
        super(apiCore, documentJacket);
        this.Logger.CTORStart(_ContentTreeBasedDocProxy.name);
        this.AssociatedHindsiteId = Guid/* Guid.NewRandomGuid */.i.NewRandomGuid();
        this.ValidateAssociatedDocContentEditor();
        this.Instantiate();
        this.Logger.CTOREnd(_ContentTreeBasedDocProxy.name);
    }
    Instantiate() {
    }
    InstantiateAwaitElementsSelf() {
        return _ContentTreeBasedProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([_ContentTreeBasedDocProxy.name, this.InstantiateAwaitElementsSelf.name, this.ScProxyDisciminatorFriendly]);
            yield this.DocumentJacket.WaitForGenericElemJacket(InjectConst/* ContentConst.Const.Selector.SC.ContentTree.ScContentTreeContainer */.y.Const.Selector.SC.ContentTree.ScContentTreeContainer)
                .then((treeContainer) => this.HostedProxies.push(new ContentTreeElemProxy(this.ApiCore, treeContainer, this.TreeRootSelector)))
                .then(() => {
                this.__ContentTreeBasedProxyMutationEvent_Subject = new __ContentTreeBasedProxyMutationEvent__Subject(this.ApiCore);
                this.TreeMutationEvent_Observer = new ContentTreeBasedProxyMutationEvent_Observer(this.ApiCore, this.CallBackOn__ContentTreeBasedProxyTreeMutationEventAsync.bind(this));
            })
                .then(() => { })
                .catch((err) => this.ErrorHand.HandleFatalError(this.InstantiateAwaitElementsSelf.name, err));
            this.Logger.FuncEnd([_ContentTreeBasedDocProxy.name, this.InstantiateAwaitElementsSelf.name, this.ScProxyDisciminatorFriendly]);
        });
    }
    WireEventsSelf() {
        this.Logger.FuncStart([_ContentTreeBasedDocProxy.name, this.WireEventsSelf.name, this.ScProxyDisciminatorFriendly]);
        let contentTreeProxy = this.GetOnlyOrNullHostedProxiesByDisciminator(_40_ScProxyDisciminator/* ScProxyDisciminator.ContentTree */.K.ContentTree);
        if (contentTreeProxy) {
            contentTreeProxy.ContentTreeMutationEvent_Subject.RegisterObserver(this.TreeMutationEvent_Observer);
        }
        else {
            this.ErrorHand.HandleFatalError([_ContentTreeBasedDocProxy.name, this.WireEventsSelf.name], "Solo contentTree not found");
        }
        this.Logger.FuncEnd([_ContentTreeBasedDocProxy.name, this.WireEventsSelf.name, this.ScProxyDisciminatorFriendly]);
    }
    SetStateSelf(stateOfContentTreeBasedProxies) {
        return _ContentTreeBasedProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => _ContentTreeBasedProxy_awaiter(this, void 0, void 0, function* () {
                this.ErrorHand.ThrowIfNullOrUndefined(this.SetStateSelf.name + ' ' + _ContentTreeBasedDocProxy.name, stateOfContentTreeBasedProxies);
                this.__ContentTreeBasedProxyMutationEvent_Subject.DisableNotifications();
                yield this.WaitForTimePeriod(1, this.SetStateSelf.name)
                    .then(() => this.WaitForNoUiFrontOverlay(this.SetStateSelf.name))
                    .then(() => {
                    this.__ContentTreeBasedProxyMutationEvent_Subject.EnableNotifications();
                    resolve(true);
                })
                    .catch((err) => {
                    this.__ContentTreeBasedProxyMutationEvent_Subject.EnableNotifications();
                    reject(this.SetStateSelf.name + " " + err);
                });
            }));
        });
    }
    WaitForNoUiFrontOverlay(friendly) {
        return new Promise((resolve, reject) => _ContentTreeBasedProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForNoUiFrontOverlay.name, friendly);
            var iterationJr = new IterationDrone/* IterationDrone */.v(this.ApiCore, this.WaitForNoUiFrontOverlay.name, true);
            let overLayExists = true;
            let iframeElem = document.getElementById('jqueryModalDialogsFrame');
            let iframeContentDoc = iframeElem.contentDocument;
            let iframeContentDocBody = iframeContentDoc.body;
            while (iterationJr.DecrementAndKeepGoing() && overLayExists) {
                yield iterationJr.Wait();
                let foundElem = iframeContentDocBody.querySelector(':scope > .ui-widget-overlay.ui-front');
                overLayExists = foundElem !== null;
            }
            if (iterationJr.IsExhausted) {
                this.Logger.Log(iterationJr.IsExhaustedMsg);
                reject(iterationJr.IsExhaustedMsg);
            }
            else {
                resolve();
            }
            this.Logger.FuncEnd(this.WaitForNoUiFrontOverlay.name, friendly);
        }));
    }
    GetStateSelf() {
        return new Promise((resolve, reject) => _ContentTreeBasedProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(_ContentTreeBasedDocProxy.name, this.GetStateSelf.name);
            let toReturn = {
                DisciminatorFriendly: _40_ScProxyDisciminator/* ScProxyDisciminator */.K[this.ScProxyDisciminator],
                Disciminator: this.ScProxyDisciminator,
                Children: []
            };
            resolve(toReturn);
        }));
    }
    CallBackOn__ContentTreeBasedProxyTreeMutationEventAsync(treeMutationEvent_Payload) {
        this.Logger.FuncStart(this.CallBackOn__ContentTreeBasedProxyTreeMutationEventAsync.name);
        this.TaskMonitor.AsyncTaskStarted(this.CallBackOn__ContentTreeBasedProxyTreeMutationEventAsync.name);
        let _contentEditorProxyMutationEvent_Payload = {
            TreeMutationEvent_Payload: treeMutationEvent_Payload,
        };
        if (this.__ContentTreeBasedProxyMutationEvent_Subject) {
            this.__ContentTreeBasedProxyMutationEvent_Subject.NotifyObserversAsync(_contentEditorProxyMutationEvent_Payload);
        }
        this.TaskMonitor.AsyncTaskCompleted(this.CallBackOn__ContentTreeBasedProxyTreeMutationEventAsync.name);
        this.Logger.FuncEnd(this.CallBackOn__ContentTreeBasedProxyTreeMutationEventAsync.name);
    }
    ValidateAssociatedDocContentEditor() {
        if (!this.DocumentJacket) {
            this.ErrorHand.HandleFatalError(this.ValidateAssociatedDocContentEditor.name, 'No doc provided');
        }
        this.DocumentJacket.Validate();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentEditorProxy.js
var ContentEditorProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class ContentEditorDocProxy extends _ContentTreeBasedDocProxy {
    constructor(apiCore, documentJacket, friendly) {
        super(apiCore, documentJacket);
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.ContentEditor */.K.ContentEditor];
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.ContentEditor */.K.ContentEditor;
        this.TreeRootSelector = InjectConst/* ContentConst.Const.Selector.SC.ContentTree.BuiltIn.TreeNodeSitecoreRoot */.y.Const.Selector.SC.ContentTree.BuiltIn.TreeNodeSitecoreRoot;
        this.Logger.CTORStart(ContentEditorDocProxy.name);
        this.Logger.CTOREnd(ContentEditorDocProxy.name);
    }
    PublishItem() {
        return ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            let publishProxy = new ContentEditorPublishProxy(this.ApiCore, this, this.DocumentJacket);
            yield publishProxy.Execute();
        });
    }
    TriggerCERibbonCommand(scRibbonCommand) {
        this.Logger.FuncStart([ContentEditorDocProxy.name, this.TriggerCERibbonCommand.name], APICommand/* APICommandFlag */.v[scRibbonCommand]);
        let scRibbonProxy = new ScRibbonProxy(this.ApiCore, this.DocumentJacket);
        let asyncLock = new AsyncLock(this.ApiCore);
        scRibbonProxy.TriggerRibbonMenuItem(scRibbonCommand, asyncLock);
        this.Logger.FuncEnd([ContentEditorDocProxy.name, this.TriggerCERibbonCommand.name]);
    }
    SetCompactCss() {
        this.Logger.FuncStart(this.SetCompactCss.name, Guid/* Guid.AsShort */.i.AsShort(this.DocumentJacket.DocId));
        this.Logger.FuncStart(this.SetCompactCss.name, Guid/* Guid.AsShort */.i.AsShort(this.DocumentJacket.DocId));
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfDesktop.js
var DefaultStateOfDesktop = __webpack_require__(6820);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfDTArea.js

class DefaultStateOfDTArea {
    constructor() {
        this.Disciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.DTArea */.K.DTArea;
        this.DisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.DTArea */.K.DTArea];
        this.ActiveFrameIndex = -1;
        this.Children = [];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Collections/DTAreaValidProxies.js
class DTAreaValidProxies {
}
DTAreaValidProxies.Values = [];

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/DTAreaProxyMutationEvent/DTAreaProxyMutationEvent_Subject.js


class DTAreaProxyMutationEvent_Subject extends HindeSiteEvent_Subject/* _HindeSiteEvent_Subject */.C {
    constructor() {
        super(...arguments);
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.DTAreaProxyMutationEvent_Subject */.g.DTAreaProxyMutationEvent_Subject;
        this.Friendly_Subject = DTAreaProxyMutationEvent_Subject.name;
        this.ShowLogActions = true;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/DTFrameProxyMutationEvent/DTFrameProxyMutationEvent_Observer.js


class DTFrameProxyMutationEvent_Observer extends HindSiteEvent_Observer/* _HindSiteEvent_Observer */.k {
    constructor(apiCore, callback) {
        super(apiCore, DTFrameProxyMutationEvent_Observer.name, callback);
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.DTFrameProxyMutationEvent_Observer */.g.DTFrameProxyMutationEvent_Observer;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DTAreaElemProxy.js
var DTAreaElemProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};













class DTAreaElemProxy extends _BaseElemProxy {
    constructor(apiCore, jqueryModalDialogsFrameProxy, containerElemJacket) {
        super(apiCore, containerElemJacket);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.DTArea */.K.DTArea;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.DTArea */.K.DTArea];
        this.IncomingSetStateList = [];
        this.JqueryModalDialogsFrameProxy = jqueryModalDialogsFrameProxy;
        this.ErrorHand.ThrowIfNullOrUndefined(DTAreaElemProxy.name, [containerElemJacket, this.JqueryModalDialogsFrameProxy]);
    }
    InstantiateAwaitElementsSelf() {
        return DTAreaElemProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([DTAreaElemProxy.name, this.InstantiateAwaitElementsSelf.name]);
            try {
                this.DTAreaProxyMutationEvent_Subject = new DTAreaProxyMutationEvent_Subject(this.ApiCore);
                this.DTFrameProxyManyMutationEvent_Observer = new DTFrameProxyMutationEvent_Observer(this.ApiCore, this.OnDTFProxyMutationEvent.bind(this));
                this.DocumentProxyMutationEvent_Observer = new ElementJacketMutationEvent_Observer(this.ApiCore, this.CallBackOnElementMutationEvent.bind(this));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.InstantiateAwaitElementsSelf.name, err);
            }
            this.Logger.FuncEnd([DTAreaElemProxy.name, this.InstantiateAwaitElementsSelf.name]);
        });
    }
    WireEventsSelf() {
        this.Logger.FuncStart([DTAreaElemProxy.name, this.WireEventsSelf.name]);
        let watcherParams = {
            OwnerFriendly: DTAreaElemProxy.name,
            Attributes: false,
            ChildList: true,
            Subtree: false,
            TagFilter: ['IFRAME']
        };
        this.ContainerElemJacket.AddWatcher(watcherParams)
            .then((elemJacketWatcher) => this.ElemJacketMutationEvent_Subject = elemJacketWatcher)
            .then(() => this.ElemJacketMutationEvent_Subject.RegisterObserver(this.DocumentProxyMutationEvent_Observer))
            .catch((err) => this.ErrorHand.HandleFatalError([DTAreaElemProxy.name, this.WireEventsSelf.name], err));
        this.Logger.FuncEnd([DTAreaElemProxy.name, this.WireEventsSelf.name]);
    }
    GetStateOfSelf() {
        return new Promise((resolve, reject) => DTAreaElemProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([DTAreaElemProxy.name, this.GetStateOfSelf.name]);
            let stateOfDTArea = new DefaultStateOfDTArea();
            let promiseAr = [];
            resolve(stateOfDTArea);
            this.Logger.FuncEnd([DTAreaElemProxy.name, this.GetStateOfSelf.name]);
        }));
    }
    QueueFrameProxyDocStates(proxyStates) {
        this.Logger.FuncStart(this.QueueFrameProxyDocStates.name, DTAreaElemProxy.name);
        if (proxyStates) {
            if (!StaticHelpers/* StaticHelpers.IsNullOrUndefined */.y.IsNullOrUndefined([this.ContainerElemJacket])) {
                proxyStates.forEach((stateOf, index) => {
                    if (stateOf) {
                        if (DTAreaValidProxies.Values.indexOf(stateOf.Disciminator) > -1) {
                        }
                        else {
                            this.ErrorHand.WarningAndContinue(this.QueueFrameProxyDocStates.name, 'invalid discriminator ' + _40_ScProxyDisciminator/* ScProxyDisciminator */.K[stateOf.Disciminator]);
                        }
                    }
                    else {
                        this.ErrorHand.WarningAndContinue([DTAreaElemProxy.name, this.QueueFrameProxyDocStates.name], 'null state found. idx: ' + index);
                        this.Logger.LogAsJsonPretty('proxyStates', proxyStates);
                    }
                });
            }
            else {
                this.ErrorHand.HandleFatalError(this.QueueFrameProxyDocStates.name, ' bad data');
            }
        }
        else {
            this.ErrorHand.HandleFatalError(this.QueueFrameProxyDocStates.name, '  No state provided');
        }
        this.Logger.FuncEnd(this.QueueFrameProxyDocStates.name, DTAreaElemProxy.name);
    }
    CallBackOnElementMutationEvent(elementJacketMutationEvent_Payload) {
        return DTAreaElemProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([DTAreaElemProxy.name, this.CallBackOnElementMutationEvent.name]);
            try {
                if (elementJacketMutationEvent_Payload.AddedGenericElemJacket && elementJacketMutationEvent_Payload.AddedGenericElemJacket.NodeTagName === SharedConst/* SharedConst.Const.KeyWords.NodeTagName.IFrame */.v.Const.KeyWords.NodeTagName.IFrame) {
                    yield this.HandleAddedJacketOfType(elementJacketMutationEvent_Payload.AddedGenericElemJacket)
                        .then(() => this.HandleRemovedIframe(elementJacketMutationEvent_Payload.RemovedIFrameId))
                        .then(() => { })
                        .catch((err) => this.ErrorHand.HandleFatalError(this.CallBackOnElementMutationEvent.name, err));
                }
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.CallBackOnElementMutationEvent.name, err);
            }
            this.Logger.FuncEnd([DTAreaElemProxy.name, this.CallBackOnElementMutationEvent.name]);
        });
    }
    HandleAddedJacketOfType(genericElemJacket) {
        return DTAreaElemProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([DTAreaElemProxy.name, this.HandleAddedJacketOfType.name]);
            if (genericElemJacket) {
                if (genericElemJacket.NodeTagName === SharedConst/* SharedConst.Const.KeyWords.NodeTagName.IFrame */.v.Const.KeyWords.NodeTagName.IFrame) {
                    this.HandleAddedFrameJacket(genericElemJacket);
                }
            }
            else {
                this.Logger.Log('Not a FrameJacket - no action');
            }
            this.Logger.FuncEnd([DTAreaElemProxy.name, this.HandleAddedJacketOfType.name]);
        });
    }
    HandleAddedFrameJacket(genericElemJacket) {
        return DTAreaElemProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.HandleAddedFrameJacket.name);
            let newScFrameProxy = null;
            let frameElemJacket = null;
            yield FrameElemJacket/* FrameJacket.FactoryFrameElemJackets */.r.FactoryFrameElemJackets(this.CommonCore, [genericElemJacket])
                .then((frameElemjackets) => frameElemJacket = frameElemjackets[0])
                .then(() => GenericFrameProxy.ScFrameProxyFactory(this.ApiCore, frameElemJacket, this.JqueryModalDialogsFrameProxy))
                .then((scFrameProxy) => newScFrameProxy = scFrameProxy)
                .then(() => {
                let currentWindowType = newScFrameProxy.GetScWindowType();
                let stateFullProxyFactory = new ScDocProxyResolver(this.ApiCore);
                let recognizedWindowtypes = stateFullProxyFactory.ScWindowTypes();
                if (recognizedWindowtypes.indexOf(currentWindowType) < 0) {
                    this.Logger.LogVal('scWindowType', _50_scWindowType/* ScWindowType */.D[currentWindowType]);
                    this.ErrorHand.HandleFatalError(this.HandleAddedJacketOfType.name, 'unrecognized window type aaa: ' + _50_scWindowType/* ScWindowType */.D[currentWindowType]);
                }
            })
                .then(() => this.ProcessNewScFrameProxy(newScFrameProxy))
                .then(() => this.Logger.Log(this.HandleAddedJacketOfType.name + ' Complete'))
                .catch((err) => this.ErrorHand.HandleFatalError(this.HandleAddedJacketOfType.name, err));
            this.Logger.FuncEnd(this.HandleAddedFrameJacket.name);
        });
    }
    HandleRemovedIframe(needleIframeId) {
        return DTAreaElemProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([DTAreaElemProxy.name, this.HandleRemovedIframe.name], 'HandleRemovedIframe: ' + needleIframeId);
            try {
                this.Logger.LogVal('Bucket size before', this.HostedProxies.length);
                if (needleIframeId && needleIframeId.length > 0) {
                    let foundMatch = -1;
                    this.HostedProxies.forEach((hostedProxy, index) => {
                        let frameProxy = hostedProxy;
                        if (frameProxy && frameProxy.GetNativeFrameId() === needleIframeId) {
                            foundMatch = index;
                        }
                    });
                    if (foundMatch > -1) {
                        this.Logger.Log('match found');
                        this.HostedProxies.splice(foundMatch, 1);
                    }
                    else {
                        this.ErrorHand.WarningAndContinue(this.HandleRemovedIframe.name, 'No match found for frame to be removed: ' + needleIframeId);
                    }
                }
                else {
                    this.Logger.Log("No needle id, no action");
                }
                this.Logger.LogVal('Bucket size after', this.HostedProxies.length);
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.HandleRemovedIframe.name, err);
            }
            this.Logger.FuncEnd([DTAreaElemProxy.name, this.HandleRemovedIframe.name]);
        });
    }
    ProcessNewScFrameProxy(scFrameProxy) {
        return DTAreaElemProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.ProcessNewScFrameProxy.name);
            try {
                yield this.newFrameStep1_Instantiate(scFrameProxy)
                    .then(() => this.NewFrameStep5_AddToHostedProxies(scFrameProxy))
                    .then(() => this.NewFrameStep2_SetStateOfDTFrameIfQueued(scFrameProxy))
                    .then(() => this.NewFrameStep3_WireEventsForArea(scFrameProxy))
                    .then(() => this.NewFrameStep4_NotifyObserversOfAreaProxyMutation(scFrameProxy))
                    .then(() => this.NewFrameStep6_TriggerEvents(scFrameProxy))
                    .catch((err) => this.ErrorHand.HandleFatalError(this.ProcessNewScFrameProxy.name, err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.ProcessNewScFrameProxy.name, err);
            }
            this.Logger.FuncEnd(this.ProcessNewScFrameProxy.name);
        });
    }
    newFrameStep1_Instantiate(scFrameProxy) {
        return DTAreaElemProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.newFrameStep1_Instantiate.name);
            this.Logger.FuncEnd(this.newFrameStep1_Instantiate.name);
        });
    }
    GetQueuedStateForDiscriminator(needleScProxyDiscriminator) {
        let foundMatchingState = null;
        let foundMatchingIndex = -1;
        this.IncomingSetStateList.forEach((stateOf, index) => {
            if (stateOf.Disciminator === needleScProxyDiscriminator) {
                foundMatchingState = stateOf;
                foundMatchingIndex = index;
            }
        });
        if (foundMatchingIndex > -1) {
            this.IncomingSetStateList.splice(foundMatchingIndex, 1);
        }
        else {
        }
        return foundMatchingState;
    }
    NewFrameStep2_SetStateOfDTFrameIfQueued(scFrameProxy) {
        return DTAreaElemProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.NewFrameStep2_SetStateOfDTFrameIfQueued.name);
            this.Logger.LogVal('looking for discriminator: ', _40_ScProxyDisciminator/* ScProxyDisciminator */.K[scFrameProxy.ScProxyDisciminator]);
            let foundStateOf = this.GetQueuedStateForDiscriminator(scFrameProxy.ScProxyDisciminator);
            if (foundStateOf) {
                yield scFrameProxy.SetState(foundStateOf)
                    .catch((err) => this.ErrorHand.HandleFatalError([DTAreaElemProxy.name, this.NewFrameStep2_SetStateOfDTFrameIfQueued.name], err));
            }
            else {
                this.Logger.Log('no queued states');
            }
            this.Logger.FuncEnd(this.NewFrameStep2_SetStateOfDTFrameIfQueued.name);
        });
    }
    NewFrameStep3_WireEventsForArea(scFrameproxy) {
        this.Logger.FuncStart(this.NewFrameStep3_WireEventsForArea.name);
        if (scFrameproxy.DTFrameProxyMutationEvent_Subject) {
            scFrameproxy.DTFrameProxyMutationEvent_Subject.RegisterObserver(this.DTFrameProxyManyMutationEvent_Observer);
        }
        else {
            this.ErrorHand.HandleFatalError([DTAreaElemProxy.name, this.NewFrameStep3_WireEventsForArea.name], 'Null ProxyMutationEvent_Subject');
        }
        this.Logger.FuncEnd(this.NewFrameStep3_WireEventsForArea.name);
    }
    NewFrameStep4_NotifyObserversOfAreaProxyMutation(AddedDTFrameProxy) {
        this.Logger.FuncStart(this.NewFrameStep4_NotifyObserversOfAreaProxyMutation.name);
        let payload = {
            AddedDTFrameProxies: [AddedDTFrameProxy],
            RemovedDTFrameProxies: [],
            DTFrameProxyMutationEvent_Payload: null,
        };
        this.DTAreaProxyMutationEvent_Subject.NotifyObserversAsync(payload);
        this.Logger.FuncEnd(this.NewFrameStep4_NotifyObserversOfAreaProxyMutation.name);
    }
    NewFrameStep5_AddToHostedProxies(scFrameProxy) {
        this.Logger.FuncStart(this.NewFrameStep5_AddToHostedProxies.name, 'count before: ' + this.HostedProxies.length);
        let toReturn = false;
        if (!this.HostedHasSameFrameProxy(scFrameProxy)) {
            this.HostedProxies.push(scFrameProxy);
            toReturn = true;
        }
        this.Logger.FuncEnd(this.NewFrameStep5_AddToHostedProxies.name, 'count after: ' + this.HostedProxies.length);
        return (toReturn);
    }
    NewFrameStep6_TriggerEvents(scFrameProxy) {
        this.Logger.FuncStart(this.NewFrameStep6_TriggerEvents.name);
        scFrameProxy.TriggerEventsForInbound();
        this.Logger.FuncEnd(this.NewFrameStep6_TriggerEvents.name);
    }
    OnDTFProxyMutationEvent(dTFrameProxyMutationEvent_Payload) {
        this.Logger.FuncStart(this.OnDTFProxyMutationEvent.name);
        let dTAreaProxyMutationEvent = {
            DTFrameProxyMutationEvent_Payload: dTFrameProxyMutationEvent_Payload,
            AddedDTFrameProxies: [],
            RemovedDTFrameProxies: []
        };
        this.DTAreaProxyMutationEvent_Subject.NotifyObserversAsync(dTAreaProxyMutationEvent);
        this.Logger.FuncEnd(this.OnDTFProxyMutationEvent.name);
    }
    AddToIncomingSetStateList(stateOfFrame) {
        this.Logger.FuncStart(this.AddToIncomingSetStateList.name, stateOfFrame.Children.length);
        stateOfFrame.Children.forEach((stateOfDTFrame) => this.IncomingSetStateList.push(stateOfDTFrame));
        this.Logger.FuncEnd(this.AddToIncomingSetStateList.name);
    }
    PublishTopFrame() {
        return DTAreaElemProxy_awaiter(this, void 0, void 0, function* () {
            let dtFrameProxy = this.GetTopFrame();
            if (dtFrameProxy) {
            }
        });
    }
    GetTopFrame() {
        let toReturn = null;
        let maxZFound = -1;
        this.HostedProxies.forEach((baseScProxy) => {
            if (baseScProxy instanceof GenericFrameProxy) {
                let cadidateVal = baseScProxy.GetZindexAsInt();
                if (cadidateVal > maxZFound) {
                    maxZFound = cadidateVal;
                    toReturn = baseScProxy;
                }
            }
        });
        this.Logger.LogVal(this.GetTopFrame.name, toReturn.GetZindexAsInt().toString());
        return toReturn;
    }
    HostedHasSameFrameProxy(scFrameProxy) {
        let toReturn = true;
        if (this.HostedProxies.indexOf(scFrameProxy) < 0) {
            toReturn = false;
        }
        else {
            toReturn = true;
            this.ErrorHand.WarningAndContinue(this.HostedHasSameFrameProxy.name, 'Proxy already exists in bucket');
        }
        return toReturn;
    }
    TriggerCERibbonCommand(ribbonCommand) {
        let topFrameProxy = this.GetTopFrame();
        if (topFrameProxy.HostedProxies[0].ScProxyDisciminator === _40_ScProxyDisciminator/* ScProxyDisciminator.ContentEditor */.K.ContentEditor) {
            let contentEditorProxy = (topFrameProxy.HostedProxies[0]);
            if (contentEditorProxy) {
                contentEditorProxy.TriggerCERibbonCommand(ribbonCommand);
            }
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/DTAreaProxyMutationEvent/DTAreaProxyMutationEvent_Observer.js


class DTAreaProxyMutationEvent_Observer extends HindSiteEvent_Observer/* _HindSiteEvent_Observer */.k {
    constructor(apiCore, callback) {
        super(apiCore, DTAreaProxyMutationEvent_Observer.name, callback);
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.DTAreaProxyMutationEvent_Observer */.g.DTAreaProxyMutationEvent_Observer;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DesktopProxy.js
var DesktopProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};











class DesktopProxy extends _ScDocProxyOfTypeT {
    constructor(apiCore, documentJacket) {
        super(apiCore, documentJacket);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.Desktop */.K.Desktop;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.Desktop */.K.Desktop];
        this.JqueryModalDialogsFrameProxy = null;
        this.Logger.CTORStart(DesktopProxy.name);
        if (documentJacket) {
        }
        else {
            this.ErrorHand.HandleFatalError(DesktopProxy.name, 'No associated doc');
        }
        this.Instantiate();
        this.Logger.CTOREnd(DesktopProxy.name);
    }
    Instantiate() {
        let dTStartBarProxy = new DTStartBarElemProxy(this.ApiCore, this.DocumentJacket.QuerySelector(SharedConst/* SharedConst.Const.KeyWords.Html.Tags.Body */.v.Const.KeyWords.Html.Tags.Body));
        this.HostedProxies.push(dTStartBarProxy);
        this.DTAreaProxyMutationEvent_Observer = new DTAreaProxyMutationEvent_Observer(this.ApiCore, this.OnAreaProxyMutationEvent.bind(this));
    }
    InstantiateAwaitElementsSelf() {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart([DesktopProxy.name, this.InstantiateAwaitElementsSelf.name]);
                yield this.GetJqueryModalsFrameProxy()
                    .then((jqueryModalDialogsFrameProxy) => this.JqueryModalDialogsFrameProxy = jqueryModalDialogsFrameProxy)
                    .then(() => this.DocumentJacket.WaitForGenericElemJacket('.DesktopArea'))
                    .then((genericElemJacket) => {
                    let dTAreaProxy = new DTAreaElemProxy(this.ApiCore, this.JqueryModalDialogsFrameProxy, genericElemJacket);
                    this.HostedProxies.push(dTAreaProxy);
                })
                    .catch((err) => this.ErrorHand.HandleFatalError([DesktopProxy.name, this.InstantiateAwaitElementsSelf.name], err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.InstantiateAwaitElementsSelf.name, err);
            }
            this.Logger.FuncEnd([DesktopProxy.name, this.InstantiateAwaitElementsSelf.name]);
        });
    }
    WireEventsSelf() {
        this.Logger.FuncStart(this.WireEventsSelf.name, DesktopProxy.name);
        let dtareaProxy = this.GetOnlyOrNullHostedProxiesByDisciminator(_40_ScProxyDisciminator/* ScProxyDisciminator.DTArea */.K.DTArea);
        if (dtareaProxy) {
            dtareaProxy.DTAreaProxyMutationEvent_Subject.RegisterObserver(this.DTAreaProxyMutationEvent_Observer);
        }
        else {
            this.ErrorHand.HandleFatalError([DesktopProxy.name, this.WireEventsSelf.name], 'null dtarea proxy');
        }
        this.Logger.FuncEnd(this.WireEventsSelf.name, DesktopProxy.name);
    }
    GetStateOfSelf() {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DesktopProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart([DesktopProxy.name, this.GetStateOfSelf.name]);
                let toReturnDesktopState = new DefaultStateOfDesktop/* DefaultStateOfDesktop */.p();
                resolve(toReturnDesktopState);
                this.Logger.FuncEnd([DesktopProxy.name, this.GetStateOfSelf.name]);
            }));
        });
    }
    GetFrameDocProxies(Children) {
        let frameDocProxies = [];
        if (Children) {
            Children.forEach((child) => {
                if (child && child.Disciminator === _40_ScProxyDisciminator/* ScProxyDisciminator.FrameProxy */.K.FrameProxy && child.Children) {
                    let firstChild = child.Children[0];
                    frameDocProxies.push(firstChild.Disciminator);
                }
            });
        }
        return frameDocProxies;
    }
    SetStateSelf(stateOfDesktop) {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.SetStateSelf.name, DesktopProxy.name);
            this.TaskMonitor.AsyncTaskStarted(this.SetStateSelf.name);
            try {
                let promAr = [];
                let dtareaProxy = this.GetOnlyOrNullHostedProxiesByDisciminator(_40_ScProxyDisciminator/* ScProxyDisciminator.DTArea */.K.DTArea);
                let dTStartBarProxy = this.GetOnlyOrNullHostedProxiesByDisciminator(_40_ScProxyDisciminator/* ScProxyDisciminator.DTStartBarElem */.K.DTStartBarElem);
                if (dtareaProxy && dTStartBarProxy) {
                    let frameDocProxiesToSpawn = this.GetFrameDocProxies(stateOfDesktop.Children);
                    dtareaProxy.QueueFrameProxyDocStates(stateOfDesktop.Children);
                    let asyncLock = new AsyncLock(this.ApiCore);
                    frameDocProxiesToSpawn.forEach((disciminator) => {
                        if (disciminator !== _40_ScProxyDisciminator/* ScProxyDisciminator.FallBack */.K.FallBack) {
                            let proxyResolver = new ScDocProxyResolver(this.ApiCore);
                            let windowType = proxyResolver.MapProxyDiscriminatorToScWindowType(disciminator);
                            if (windowType !== _50_scWindowType/* ScWindowType.Unknown */.D.Unknown) {
                                promAr.push(dTStartBarProxy.TriggerRedButtonAsync(windowType, asyncLock));
                            }
                        }
                        else {
                        }
                    });
                    yield Promise.all(promAr)
                        .catch((err) => this.ErrorHand.HandleFatalError(this.SetStateSelf.name, err));
                }
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.SetStateSelf.name + ' ' + DesktopProxy.name, err);
            }
            this.TaskMonitor.AsyncTaskCompleted(this.SetStateSelf.name);
            this.Logger.FuncEnd(this.SetStateSelf.name, DesktopProxy.name);
        });
    }
    TriggerEventsForInboundSelf() {
    }
    AddContentEditorFrameAsync() {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.AddContentEditorFrameAsync.name);
            try {
                let asyncLock = new AsyncLock(this.ApiCore);
                let dTStartBarProxy = this.GetOnlyOrNullHostedProxiesByDisciminator(_40_ScProxyDisciminator/* ScProxyDisciminator.DTStartBarElem */.K.DTStartBarElem);
                if (dTStartBarProxy) {
                    yield dTStartBarProxy.TriggerRedButtonAsync(_50_scWindowType/* ScWindowType.ContentEditor */.D.ContentEditor, asyncLock)
                        .catch((err) => this.ErrorHand.HandleFatalError(this.AddContentEditorFrameAsync.name, err));
                }
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.AddContentEditorFrameAsync.name, err);
            }
            this.Logger.FuncEnd(this.AddContentEditorFrameAsync.name);
        });
    }
    GetAssociatedDoc() {
        return this.DocumentJacket;
    }
    GetJqueryModalsFrameProxy() {
        return new Promise((resolve, reject) => DesktopProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([DesktopProxy.name, this.GetJqueryModalsFrameProxy.name]);
            let jqueryIframeelem = null;
            yield this.DocumentJacket.GetHostedFirstMatchingFrameElemJacket("[id=jqueryModalDialogsFrame]")
                .then((frameElemJacket) => jqueryIframeelem = frameElemJacket)
                .then(() => GenericFrameProxy.ScFrameProxyFactory(this.ApiCore, jqueryIframeelem, null))
                .then((scFrameProxy) => resolve(scFrameProxy))
                .catch((err) => reject(this.ErrorHand.FormatRejectMessage([DesktopProxy.name, this.GetJqueryModalsFrameProxy.name], err)));
            this.Logger.FuncEnd([DesktopProxy.name, this.GetJqueryModalsFrameProxy.name]);
        }));
    }
    OnAreaProxyMutationEvent(dTAreaProxyMutationEvent_Payload) {
        this.Logger.FuncStart(this.OnAreaProxyMutationEvent.name);
        if (this.RunTimeOptions.EnableDesktopStartBarButtonRename) {
            let dTStartBarProxy = this.GetOnlyOrNullHostedProxiesByDisciminator(_40_ScProxyDisciminator/* ScProxyDisciminator.DTStartBarElem */.K.DTStartBarElem);
            if (dTStartBarProxy) {
                dTStartBarProxy.OnTreeMutationEvent_DesktopStartBarProxy(dTAreaProxyMutationEvent_Payload);
            }
        }
        this.Logger.FuncEnd(this.OnAreaProxyMutationEvent.name);
    }
    TriggerCERibbonCommand(ribbonCommand) {
        this.Logger.FuncStart([DesktopProxy.name, this.TriggerCERibbonCommand.name]);
        let dTStartBarProxy = this.GetOnlyOrNullHostedProxiesByDisciminator(_40_ScProxyDisciminator/* ScProxyDisciminator.DTStartBarElem */.K.DTStartBarElem);
        if (dTStartBarProxy) {
        }
        this.Logger.FuncEnd([DesktopProxy.name, this.TriggerCERibbonCommand.name]);
    }
    PublishItem() {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            let dTStartBarProxy = this.GetOnlyOrNullHostedProxiesByDisciminator(_40_ScProxyDisciminator/* ScProxyDisciminator.DTStartBarElem */.K.DTStartBarElem);
            if (dTStartBarProxy) {
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/AccessViewerProxy.js


class AccessViewerProxy extends _ScDocProxyOfTypeT {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.AccessViewer */.K.AccessViewer;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.AccessViewer */.K.AccessViewer];
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/PromiseFailAction.js
var PromiseFailAction = __webpack_require__(6933);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateLessDocProxies/StateLessElemProxies/PackageDesignerInstallerRibbonToolbarProxy.js
var PackageDesignerInstallerRibbonToolbarProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class PackageDesignerInstallerRibbonToolbarElemProxy extends _BaseElemProxy {
    constructor(apiCore, elementDivJacket, jqueryModalDialogsFrameProxy) {
        super(apiCore, elementDivJacket);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.PackageDesignerInstallerRibbonToolbarElemProxy */.K.PackageDesignerInstallerRibbonToolbarElemProxy;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.PackageDesignerInstallerRibbonToolbarElemProxy */.K.PackageDesignerInstallerRibbonToolbarElemProxy];
        this.IsStateFull = false;
        this.JqueryModalDialogsFrameProxy = jqueryModalDialogsFrameProxy;
        this.ErrorHand.ThrowIfNullOrUndefined(PackageDesignerInstallerRibbonToolbarElemProxy.name, [jqueryModalDialogsFrameProxy]);
    }
    AttachClickEventToGenZip() {
        return PackageDesignerInstallerRibbonToolbarProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([PackageDesignerInstallerRibbonToolbarElemProxy.name, this.AttachClickEventToGenZip.name]);
            this.ContainerElemJacket.WaitFor(InjectConst/* ContentConst.Const.Selector.SC.InstallerDesigner.GenerateZip */.y.Const.Selector.SC.InstallerDesigner.GenerateZip)
                .then((genericElemJacket) => this.GenerateZipButton = genericElemJacket)
                .then(() => this.GenerateZipButton.NativeElement.addEventListener('click', ((event) => this.CallBackOnGenerateZipButtonClicked(event))))
                .catch((err) => this.ErrorHand.HandleFatalError([PackageDesignerInstallerRibbonToolbarElemProxy.name, this.AttachClickEventToGenZip.name], err));
            this.Logger.FuncEnd([PackageDesignerInstallerRibbonToolbarElemProxy.name, this.AttachClickEventToGenZip.name]);
        });
    }
    CallBackOnGenerateZipButtonClicked(event) {
    }
    InstantiateAwaitElementsSelf() {
        return PackageDesignerInstallerRibbonToolbarProxy_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart([PackageDesignerInstallerRibbonToolbarElemProxy.name, this.InstantiateAwaitElementsSelf.name]);
                yield this.AttachClickEventToGenZip()
                    .catch((err) => this.ErrorHand.HandleFatalError([PackageDesignerInstallerRibbonToolbarElemProxy.name, this.InstantiateAwaitElementsSelf.name], err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([PackageDesignerInstallerRibbonToolbarElemProxy.name, this.InstantiateAwaitElementsSelf.name], err);
            }
            this.Logger.FuncEnd([PackageDesignerInstallerRibbonToolbarElemProxy.name, this.InstantiateAwaitElementsSelf.name]);
        });
    }
    OpenFile(fileName) {
        return PackageDesignerInstallerRibbonToolbarProxy_awaiter(this, void 0, void 0, function* () {
            yield this.ContainerElemJacket.WaitFor(InjectConst/* ContentConst.Const.Selector.SC.PackageDesigner.Ribbon.Open */.y.Const.Selector.SC.PackageDesigner.Ribbon.Open, this.OpenFile.name)
                .then((elemJacket) => elemJacket.NativeElement.click())
                .catch((err) => this.ErrorHand.HandleFatalError([PackageDesignerInstallerRibbonToolbarElemProxy.name, this.OpenFile.name], err));
            if (this.JqueryModalDialogsFrameProxy) {
                let flowCommand = {};
                this.JqueryModalDialogsFrameProxy.SendCommand(flowCommand);
            }
            else {
                this.ErrorHand.HandleFatalError(this.OpenFile.name, 'no jquery proxy');
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/AppToolsInstallerDesignerProxy.js
var AppToolsInstallerDesignerProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class AppToolsInstallerDesignerProxy extends _ScDocProxyOfTypeT {
    constructor(apiCore, documentJacket, jqueryModalDialogsFrameProxy) {
        super(apiCore, documentJacket);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.AppToolsInstallerDesigner */.K.AppToolsInstallerDesigner;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.AppToolsInstallerDesigner */.K.AppToolsInstallerDesigner];
        this.packagedesignerInstallerRibbonToolbarElem = null;
        this.Logger.CTORStart(AppToolsInstallerDesignerProxy.name);
        this.JqueryModalDialogsFrameProxy = jqueryModalDialogsFrameProxy;
        this.ErrorHand.ThrowIfNullOrUndefined([AppToolsInstallerDesignerProxy.name], [documentJacket, jqueryModalDialogsFrameProxy]);
        this.Logger.CTOREnd(AppToolsInstallerDesignerProxy.name);
    }
    InstantiateAwaitElementsSelf() {
        return AppToolsInstallerDesignerProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([AppToolsInstallerDesignerProxy.name, this.InstantiateAwaitElementsSelf.name]);
            yield this.HarvestRibbonToolbar()
                .catch((err) => this.ErrorHand.HandleFatalError([AppToolsInstallerDesignerProxy.name, this.InstantiateAwaitElementsSelf.name], err));
            this.Logger.FuncEnd([AppToolsInstallerDesignerProxy.name, this.InstantiateAwaitElementsSelf.name]);
        });
    }
    OpenFile(fileName) {
        return AppToolsInstallerDesignerProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([AppToolsInstallerDesignerProxy.name, this.OpenFile.name]);
            try {
                this.packagedesignerInstallerRibbonToolbarElem = null;
                if (this.packagedesignerInstallerRibbonToolbarElem) {
                    yield this.packagedesignerInstallerRibbonToolbarElem.OpenFile(fileName)
                        .catch((err) => this.ErrorHand.HandleFatalError(this.OpenFile.name, err));
                }
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([AppToolsInstallerDesignerProxy.name, this.OpenFile.name], err);
            }
            this.Logger.FuncEnd([AppToolsInstallerDesignerProxy.name, this.OpenFile.name]);
        });
    }
    HarvestRibbonToolbar() {
        return AppToolsInstallerDesignerProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([AppToolsInstallerDesignerProxy.name, this.HarvestRibbonToolbar.name]);
            yield this.DocumentJacket.WaitForGenericElemJacket(InjectConst/* ContentConst.Const.Selector.SC.PackageDesigner.Ribbon.InstallerRibbon_Toolbar */.y.Const.Selector.SC.PackageDesigner.Ribbon.InstallerRibbon_Toolbar, PromiseFailAction/* PromiseFailAction.RejectThrow */.D.RejectThrow)
                .then((elementDivJacket) => this.packagedesignerInstallerRibbonToolbarElem = new PackageDesignerInstallerRibbonToolbarElemProxy(this.ApiCore, elementDivJacket, this.JqueryModalDialogsFrameProxy))
                .catch((err) => this.ErrorHand.HandleFatalError([AppToolsInstallerDesignerProxy.name, this.HarvestRibbonToolbar.name], err));
            this.Logger.FuncEnd([AppToolsInstallerDesignerProxy.name, this.HarvestRibbonToolbar.name]);
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/ArchiveProxy.js


class ArchiveProxy extends _ScDocProxyOfTypeT {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.Archive */.K.Archive;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/DomainManagerProxy.js


class DomainManagerProxy extends _ScDocProxyOfTypeT {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.DomainManager */.K.DomainManager;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/EmailExpeprienceManagerProxy.js


class EmailExpeprienceManagerProxy extends _ScDocProxyOfTypeT {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.EmailExperienceManager */.K.EmailExperienceManager;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/FallBackDocProxy.js
var FallBackDocProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class FallBackDocProxy extends _ScDocProxyOfTypeT {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.FallBack */.K.FallBack];
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.FallBack */.K.FallBack;
    }
    GetStateOfSelf() {
        return FallBackDocProxy_awaiter(this, void 0, void 0, function* () {
            let toReturn = {
                Disciminator: this.ScProxyDisciminator,
                DisciminatorFriendly: _40_ScProxyDisciminator/* ScProxyDisciminator */.K[this.ScProxyDisciminator],
                Children: [],
            };
            try {
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.GetStateOfSelf + '.' + FallBackDocProxy.name, err);
            }
            return toReturn;
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/InstallationWizardProxy.js


class InstallationWizardProxy extends _ScDocProxyOfTypeT {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.InstallationWizard */.K.InstallationWizard;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/InstallLicensesProxy.js


class InstallLicensesProxy extends _ScDocProxyOfTypeT {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.InstalledLicenses */.K.InstalledLicenses;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/KeyBoardMapProxy.js


class KeyBoardMapProxy extends _ScDocProxyOfTypeT {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.KeyBoardMap */.K.KeyBoardMap;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/LaunchPadProxy.js


class LaunchPadProxy extends _ScDocProxyOfTypeT {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.LaunchPad */.K.LaunchPad;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.LaunchPad */.K.LaunchPad];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/LicenseDetailsProxy.js


class LicenseDetailsProxy extends _ScDocProxyOfTypeT {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.LicenseDetails */.K.LicenseDetails;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/LogViewerProxy.js


class LogViewerProxy extends _ScDocProxyOfTypeT {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.LogViewer */.K.LogViewer;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/MarketingControlPanelProxy.js



class MarketingControlPanelDocProxy extends _ContentTreeBasedDocProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.MarketingControlPanel */.K.MarketingControlPanel;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.MarketingControlPanel */.K.MarketingControlPanel];
        this.TreeRootSelector = InjectConst/* ContentConst.Const.Selector.SC.ContentTree.BuiltIn.MarketingControlPanelRoodNode */.y.Const.Selector.SC.ContentTree.BuiltIn.MarketingControlPanelRoodNode;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/MediaLibraryProxy.js



class MediaLibraryProxy extends _ContentTreeBasedDocProxy {
    constructor() {
        super(...arguments);
        this.TreeRootSelector = InjectConst/* ContentConst.Const.Selector.SC.ContentTree.BuiltIn.MediaLibraryAnchorRootNode */.y.Const.Selector.SC.ContentTree.BuiltIn.MediaLibraryAnchorRootNode;
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.MediaLibrary */.K.MediaLibrary;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.MediaLibrary */.K.MediaLibrary];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfPackageDesigner.js

class DefaultStateOfPackageDesigner {
    constructor() {
        this.DisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.PackageDesigner */.K.PackageDesigner];
        this.Disciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.PackageDesigner */.K.PackageDesigner;
        this.Children = [];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateLessDocProxies/StateLessDocProxies/InstallerDesignerProxy.js


class InstallerDesignerProxy extends _ScDocProxyOfTypeT {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.InstallerDesignerDocProxy */.K.InstallerDesignerDocProxy;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.InstallerDesignerDocProxy */.K.InstallerDesignerDocProxy];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/PackageDesignerDocProxy.js
var PackageDesignerDocProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class PackageDesignerDocProxy extends _ScDocProxyOfTypeT {
    constructor(apiCore, documentJacket) {
        super(apiCore, documentJacket);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.PackageDesigner */.K.PackageDesigner;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.PackageDesigner */.K.PackageDesigner];
        this.Logger.CTORStart(PackageDesignerDocProxy.name);
        this.ErrorHand.ThrowIfNullOrUndefined([PackageDesignerDocProxy.name], [documentJacket]);
        this.Logger.CTOREnd(PackageDesignerDocProxy.name);
    }
    InstantiateAwaitElementsSelf() {
        return PackageDesignerDocProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([PackageDesignerDocProxy.name, this.InstantiateAwaitElementsSelf.name], this.Friendly);
            yield this.HarvestElements()
                .then(() => this.CreateWatcherForFrames())
                .catch((err) => this.ErrorHand.HandleFatalError([PackageDesignerDocProxy.name, this.InstantiateAwaitElementsSelf.name], err));
            try {
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.InstantiateAwaitElementsSelf.name, err);
            }
            this.Logger.FuncEnd([PackageDesignerDocProxy.name, this.InstantiateAwaitElementsSelf.name], this.Friendly);
        });
    }
    HarvestElements() {
        return PackageDesignerDocProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([PackageDesignerDocProxy.name, this.HarvestElements.name], this.Friendly);
            try {
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([PackageDesignerDocProxy.name, this.WireEventsSelf.name], err);
            }
            this.Logger.FuncEnd([PackageDesignerDocProxy.name, this.HarvestElements.name], this.Friendly);
        });
    }
    WireEventsSelf() {
        this.Logger.FuncStart(this.WireEventsSelf.name, this.Friendly);
        this.WireWatcherForFrames();
        this.Logger.FuncEnd(this.WireEventsSelf.name, this.Friendly);
    }
    GetStateOfSelf() {
        return PackageDesignerDocProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.Logger.FuncStart(this.GetStateOfSelf.name, PackageDesignerDocProxy.name);
                let stateOfPackageDesigner = new DefaultStateOfPackageDesigner();
                stateOfPackageDesigner.StatusText = this.GetLoadedPackageFileName();
                resolve(stateOfPackageDesigner);
                this.Logger.FuncEnd(this.GetStateOfSelf.name, PackageDesignerDocProxy.name);
            });
        });
    }
    OpenFile(fileName) {
        return PackageDesignerDocProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([InstallerDesignerProxy.name, this.OpenFile.name]);
            this.Logger.FuncEnd([InstallerDesignerProxy.name, this.OpenFile.name]);
        });
    }
    SetStateSelf(stateOfPackageDesigner) {
        return PackageDesignerDocProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => PackageDesignerDocProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.SetStateSelf.name, PackageDesignerDocProxy.name);
                if (stateOfPackageDesigner) {
                    if (stateOfPackageDesigner.StatusText.length > 0) {
                        yield this.OpenFile(stateOfPackageDesigner.StatusText)
                            .then(() => resolve())
                            .catch((err) => reject(this.ErrorHand.FormatRejectMessage([PackageDesignerDocProxy.name, this.SetStateSelf.name], err)));
                    }
                }
                this.Logger.FuncEnd(this.SetStateSelf.name, PackageDesignerDocProxy.name);
            }));
        });
    }
    TriggerEventsForInboundSelf() {
        this.Logger.Log('todo ' + PackageDesignerDocProxy.name);
    }
    GetLoadedPackageFileName() {
        let toReturn = '';
        let appFrame = this.DocumentJacket.GetElementById('AppFrame').NativeElement;
        if (appFrame) {
            let contentDoc = appFrame.contentDocument;
            if (contentDoc) {
                let target = contentDoc.getElementById(InjectConst/* ContentConst.Const.ElemId.SC.PackageDesigner.StatusText */.y.Const.ElemId.SC.PackageDesigner.StatusText);
                if (target) {
                    toReturn = target.innerText;
                }
            }
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/RecycleBinProxy.js


class RecycleBinProxy extends _ScDocProxyOfTypeT {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.RecycleBin */.K.RecycleBin;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/RoleManagerProxy.js


class RoleManagerProxy extends _ScDocProxyOfTypeT {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.RoleManager */.K.RoleManager;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/RunProxy.js


class RunProxy extends _ScDocProxyOfTypeT {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.Run */.K.Run;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/ScanForBrokenLinksProxy.js


class ScanForBrokenLinksProxy extends _ScDocProxyOfTypeT {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.ScanForBrokenLinks */.K.ScanForBrokenLinks;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/SecurityEditorProxy.js


class SecurityEditorDocProxy extends _ScDocProxyOfTypeT {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.SecurityEditor */.K.SecurityEditor;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/TemplateManagerProxy.js



class TemplateManagerProxy extends _ContentTreeBasedDocProxy {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.TemplateManager */.K.TemplateManager;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.TemplateManager */.K.TemplateManager];
        this.TreeRootSelector = InjectConst/* ContentConst.Const.Selector.SC.ContentTree.BuiltIn.TemplatesAnchorRootNode */.y.Const.Selector.SC.ContentTree.BuiltIn.TemplatesAnchorRootNode;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/UserManagerProxy.js


class UserManagerProxy extends _ScDocProxyOfTypeT {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.UserManager */.K.UserManager;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateFullDocProxies/WorkboxProxy.js


class WorkboxProxy extends _ScDocProxyOfTypeT {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.Workbox */.K.Workbox;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[this.ScProxyDisciminator];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateLessDocProxies/StateLessDocProxies/InstallerBuildPackageDocProxy.js
var InstallerBuildPackageDocProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class InstallerBuildPackageDocProxy extends _ScDocProxyOfTypeT {
    constructor() {
        super(...arguments);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.InstallerBuildPackageDocProxy */.K.InstallerBuildPackageDocProxy;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.InstallerBuildPackageDocProxy */.K.InstallerBuildPackageDocProxy];
    }
    OnFocus() {
        return InstallerBuildPackageDocProxy_awaiter(this, void 0, void 0, function* () {
            let parentElem = null;
            yield this.DocumentJacket.WaitForGenericElemJacket(InjectConst/* ContentConst.Const.Selector.SC.Frames.ScContentIframeId0.PackageFile */.y.Const.Selector.SC.Frames.ScContentIframeId0.PackageFile)
                .then((genericElemJacket) => parentElem = genericElemJacket.NativeElement.parentElement)
                .then(() => {
                this.AddPackageNameCandidateButtons(parentElem);
            })
                .catch((err) => this.ErrorHand.HandleFatalError([InstallerBuildPackageDocProxy.name, this.OnFocus.name], err));
        });
    }
    AddPackageNameCandidateButtons(parentElem) {
        for (var idx = 0; idx < 3; idx++) {
            let candidateButton = this.BuildOneCandidatePackageNameButton('candidate-package-name-' + idx, 'Candidate Name ' + idx);
            parentElem.appendChild(candidateButton);
        }
    }
    BuildOneCandidatePackageNameButton(buttonId, candidatePackageName) {
        let buttonToReturn = document.createElement('input');
        buttonToReturn.type = 'button';
        buttonToReturn.classList.add('candidate-package-name');
        buttonToReturn.id = buttonId;
        buttonToReturn.setAttribute('data-candidate-package-name', candidatePackageName);
        buttonToReturn.value = candidatePackageName;
        buttonToReturn.addEventListener('click', ((event) => this.PopulateCandidatePackageName(event)));
        let wrapperDiv = document.createElement('div');
        wrapperDiv.appendChild(buttonToReturn);
        return wrapperDiv;
    }
    PopulateCandidatePackageName(event) {
        this.Logger.LogImportant('Populate! ');
    }
    OpenFile(fileName) {
        return InstallerBuildPackageDocProxy_awaiter(this, void 0, void 0, function* () {
            try {
                let FileNameInput = null;
                let OpenOkButton = null;
                let CancelButton = null;
                let trimmedFileName = fileName.trim();
                yield this.DocumentJacket.WaitForGenericElemJacket(InjectConst/* ContentConst.Const.Selector.SC.Frames.ScContentIframeId0.Ok */.y.Const.Selector.SC.Frames.ScContentIframeId0.Ok)
                    .then((genericElemJacket) => OpenOkButton = genericElemJacket)
                    .then(() => this.DocumentJacket.WaitForGenericElemJacket(InjectConst/* ContentConst.Const.Selector.SC.Frames.ScContentIframeId0.Cancel */.y.Const.Selector.SC.Frames.ScContentIframeId0.Cancel))
                    .then((genericElemJacket) => CancelButton = genericElemJacket)
                    .then(() => this.DocumentJacket.WaitForGenericElemJacket(InjectConst/* ContentConst.Const.Selector.SC.Frames.ScContentIframeId0.PackageFile */.y.Const.Selector.SC.Frames.ScContentIframeId0.PackageFile))
                    .then((genericElemJacket) => FileNameInput = genericElemJacket)
                    .then(() => {
                    if (trimmedFileName.length > 0) {
                        FileNameInput.NativeElement.value = fileName;
                        OpenOkButton.NativeElement.click();
                    }
                    else {
                        CancelButton.NativeElement.click();
                    }
                })
                    .catch((err) => this.ErrorHand.HandleFatalError([InstallerBuildPackageDocProxy.name, this.OpenFile.name], err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([InstallerBuildPackageDocProxy.name, this.OpenFile.name], err);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/StateLessDocProxies/StateLessDocProxies/JqueryModalDialogsDocProxy.js
var JqueryModalDialogsDocProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class JqueryModalDialogsDocProxy extends _ScDocProxyOfTypeT {
    constructor(apiCore, documentJacket) {
        super(apiCore, documentJacket);
        this.ScProxyDisciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.JqueryModalDialogsDocProxy */.K.JqueryModalDialogsDocProxy;
        this.ScProxyDisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.JqueryModalDialogsDocProxy */.K.JqueryModalDialogsDocProxy];
    }
    InstantiateAwaitElementsSelf() {
        return JqueryModalDialogsDocProxy_awaiter(this, void 0, void 0, function* () {
            try {
                yield this.CreateWatcherForFrames()
                    .catch((err) => this.ErrorHand.HandleFatalError([JqueryModalDialogsDocProxy.name, this.WireEventsSelf.name], err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([JqueryModalDialogsDocProxy.name, this.WireEventsSelf.name], err);
            }
        });
    }
    WireEventsSelf() {
        this.WireWatcherForFrames();
    }
    OpenFile(fileName) {
        return JqueryModalDialogsDocProxy_awaiter(this, void 0, void 0, function* () {
            try {
                let id0FrameProxy = null;
                let id0FrameJacket = null;
                let proxyFactory = new ScDocProxyResolver(this.ApiCore);
                yield this.DocumentJacket.WaitForCompleteNAB_DocumentJacket('jquery jacket')
                    .then(() => this.DocumentJacket.GetHostedFirstMatchingFrameElemJacket(InjectConst/* ContentConst.Const.Selector.SC.Frames.ScContentIframeId0.Id */.y.Const.Selector.SC.Frames.ScContentIframeId0.Id))
                    .then((matchingJacket) => id0FrameJacket = matchingJacket)
                    .catch((err) => this.ErrorHand.HandleFatalError(this.OpenFile.name, err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([JqueryModalDialogsDocProxy.name, this.OpenFile.name], err);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ScDocProxyResolver.js
var ScDocProxyResolver_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};































class ScDocProxyResolver extends _APICoreBase {
    constructor(apiCore) {
        super(apiCore);
    }
    ScWindowTypes() {
        return [
            _50_scWindowType/* ScWindowType.AccessViewer */.D.AccessViewer,
            _50_scWindowType/* ScWindowType.Archive */.D.Archive,
            _50_scWindowType/* ScWindowType.ContentEditor */.D.ContentEditor,
            _50_scWindowType/* ScWindowType.ControlPanel */.D.ControlPanel,
            _50_scWindowType/* ScWindowType.Debug */.D.Debug,
            _50_scWindowType/* ScWindowType.Desktop */.D.Desktop,
            _50_scWindowType/* ScWindowType.DomainManager */.D.DomainManager,
            _50_scWindowType/* ScWindowType.EmailExperienceManager */.D.EmailExperienceManager,
            _50_scWindowType/* ScWindowType.ExperienceAnalytics */.D.ExperienceAnalytics,
            _50_scWindowType/* ScWindowType.ExperienceEditor_Normal */.D.ExperienceEditor_Normal,
            _50_scWindowType/* ScWindowType.ExperienceEditor_Preview */.D.ExperienceEditor_Preview,
            _50_scWindowType/* ScWindowType.ExperienceOptimization */.D.ExperienceOptimization,
            _50_scWindowType/* ScWindowType.ExperienceProfile */.D.ExperienceProfile,
            _50_scWindowType/* ScWindowType.FallBack */.D.FallBack,
            _50_scWindowType/* ScWindowType.FederatedExperienceManager */.D.FederatedExperienceManager,
            _50_scWindowType/* ScWindowType.Forms */.D.Forms,
            _50_scWindowType/* ScWindowType.InstallationWizard */.D.InstallationWizard,
            _50_scWindowType/* ScWindowType.InstalledLicenses */.D.InstalledLicenses,
            _50_scWindowType/* ScWindowType.KeyboardMap */.D.KeyboardMap,
            _50_scWindowType/* ScWindowType.Launchpad */.D.Launchpad,
            _50_scWindowType/* ScWindowType.LicenseDetails */.D.LicenseDetails,
            _50_scWindowType/* ScWindowType.ListManager */.D.ListManager,
            _50_scWindowType/* ScWindowType.LoginPage */.D.LoginPage,
            _50_scWindowType/* ScWindowType.LogViewer */.D.LogViewer,
            _50_scWindowType/* ScWindowType.MarketingAutomation */.D.MarketingAutomation,
            _50_scWindowType/* ScWindowType.MarketingControlPanel */.D.MarketingControlPanel,
            _50_scWindowType/* ScWindowType.MediaLibrary */.D.MediaLibrary,
            _50_scWindowType/* ScWindowType.PackageDesigner */.D.PackageDesigner,
            _50_scWindowType/* ScWindowType.PathAnalyzer */.D.PathAnalyzer,
            _50_scWindowType/* ScWindowType.RecycleBin */.D.RecycleBin,
            _50_scWindowType/* ScWindowType.RoleManager */.D.RoleManager,
            _50_scWindowType/* ScWindowType.Run */.D.Run,
            _50_scWindowType/* ScWindowType.ScanForBrokenLinks */.D.ScanForBrokenLinks,
            _50_scWindowType/* ScWindowType.SecurityEditor */.D.SecurityEditor,
            _50_scWindowType/* ScWindowType.TemplateManager */.D.TemplateManager,
            _50_scWindowType/* ScWindowType.UpdateCenter */.D.UpdateCenter,
            _50_scWindowType/* ScWindowType.UserManager */.D.UserManager,
            _50_scWindowType/* ScWindowType.Workbox */.D.Workbox,
            _50_scWindowType/* ScWindowType.JqueryModalDialogs */.D.JqueryModalDialogs,
            _50_scWindowType/* ScWindowType.InstallerBuildPackage */.D.InstallerBuildPackage,
        ];
    }
    ScDocProxyFactory(windowType, documentJacket, jqueryModalDialogsFrameProxy) {
        let ScDocProxy = null;
        if (false) {}
        else if (windowType === _50_scWindowType/* ScWindowType.AccessViewer */.D.AccessViewer) {
            ScDocProxy = new AccessViewerProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.AppToolsInstallerDesigner */.D.AppToolsInstallerDesigner) {
            ScDocProxy = new AppToolsInstallerDesignerProxy(this.ApiCore, documentJacket, jqueryModalDialogsFrameProxy);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.Archive */.D.Archive) {
            ScDocProxy = new ArchiveProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.ContentEditor */.D.ContentEditor) {
            ScDocProxy = new ContentEditorDocProxy(this.ApiCore, documentJacket, 'Solo Content Editor doc');
        }
        else if (windowType === _50_scWindowType/* ScWindowType.ControlPanel */.D.ControlPanel) {
            ScDocProxy = new FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.Debug */.D.Debug) {
            ScDocProxy = new FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.Desktop */.D.Desktop) {
            ScDocProxy = new DesktopProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.DomainManager */.D.DomainManager) {
            ScDocProxy = new DomainManagerProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.EmailExperienceManager */.D.EmailExperienceManager) {
            ScDocProxy = new EmailExpeprienceManagerProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.ExperienceAnalytics */.D.ExperienceAnalytics) {
            ScDocProxy = new FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.ExperienceEditor_Edit */.D.ExperienceEditor_Edit) {
            ScDocProxy = new FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.ExperienceEditor_Normal */.D.ExperienceEditor_Normal) {
            ScDocProxy = new FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.ExperienceEditor_Preview */.D.ExperienceEditor_Preview) {
            ScDocProxy = new FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.ExperienceOptimization */.D.ExperienceOptimization) {
            ScDocProxy = new FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.ExperienceProfile */.D.ExperienceProfile) {
            ScDocProxy = new FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.FallBack */.D.FallBack) {
            ScDocProxy = new FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.FederatedExperienceManager */.D.FederatedExperienceManager) {
            ScDocProxy = new FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.Forms */.D.Forms) {
            ScDocProxy = new FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.InstallationWizard */.D.InstallationWizard) {
            ScDocProxy = new InstallationWizardProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.InstalledLicenses */.D.InstalledLicenses) {
            ScDocProxy = new InstallLicensesProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.KeyboardMap */.D.KeyboardMap) {
            ScDocProxy = new KeyBoardMapProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.Launchpad */.D.Launchpad) {
            ScDocProxy = new LaunchPadProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.LicenseDetails */.D.LicenseDetails) {
            ScDocProxy = new LicenseDetailsProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.ListManager */.D.ListManager) {
            ScDocProxy = new FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.LoginPage */.D.LoginPage) {
            ScDocProxy = new FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.LogViewer */.D.LogViewer) {
            ScDocProxy = new LogViewerProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.MarketingControlPanel */.D.MarketingControlPanel) {
            ScDocProxy = new MarketingControlPanelDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.MarketingAutomation */.D.MarketingAutomation) {
            ScDocProxy = new FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.MediaLibrary */.D.MediaLibrary) {
            ScDocProxy = new MediaLibraryProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.PackageDesigner */.D.PackageDesigner) {
            ScDocProxy = new PackageDesignerDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.PathAnalyzer */.D.PathAnalyzer) {
            ScDocProxy = new FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.Publish */.D.Publish) {
            ScDocProxy = new FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.RecycleBin */.D.RecycleBin) {
            ScDocProxy = new RecycleBinProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.RoleManager */.D.RoleManager) {
            ScDocProxy = new RoleManagerProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.Run */.D.Run) {
            ScDocProxy = new RunProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.ScanForBrokenLinks */.D.ScanForBrokenLinks) {
            ScDocProxy = new ScanForBrokenLinksProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.SecurityEditor */.D.SecurityEditor) {
            ScDocProxy = new SecurityEditorDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.TemplateManager */.D.TemplateManager) {
            ScDocProxy = new TemplateManagerProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.UpdateCenter */.D.UpdateCenter) {
            ScDocProxy = new FallBackDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.UserManager */.D.UserManager) {
            ScDocProxy = new UserManagerProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.Workbox */.D.Workbox) {
            ScDocProxy = new WorkboxProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.JqueryModalDialogs */.D.JqueryModalDialogs) {
            ScDocProxy = new JqueryModalDialogsDocProxy(this.ApiCore, documentJacket);
        }
        else if (windowType === _50_scWindowType/* ScWindowType.InstallerBuildPackage */.D.InstallerBuildPackage) {
            ScDocProxy = new InstallerBuildPackageDocProxy(this.ApiCore, documentJacket);
        }
        return ScDocProxy;
    }
    ScDocProxyFactoryMake(documentJacket, jqueryModalDialogsFrameProxy) {
        return new Promise((resolve, reject) => ScDocProxyResolver_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([ScDocProxyResolver.name, this.ScDocProxyFactoryMake.name], documentJacket.UrlJacket.GetUrlParts().FilePath);
            let scDocProxy = null;
            let windowTypeResolver = new ScWindowTypeResolver/* ScWindowTypeResolver */.X(this.CommonCore);
            let detectedWindowType = windowTypeResolver.GetScWindowType(documentJacket.UrlJacket);
            if (this.ScWindowTypes().indexOf(detectedWindowType) > -1) {
                scDocProxy = this.ScDocProxyFactory(detectedWindowType, documentJacket, jqueryModalDialogsFrameProxy);
            }
            else {
                this.ErrorHand.HandleFatalError([ScDocProxyResolver.name, this.ScDocProxyFactoryMake.name], 'unhandled windowType ' + _50_scWindowType/* ScWindowType */.D[detectedWindowType]);
            }
            resolve(scDocProxy);
            this.Logger.FuncEnd([ScDocProxyResolver.name, this.ScDocProxyFactoryMake.name], _50_scWindowType/* ScWindowType */.D[detectedWindowType] + ' ' + documentJacket.UrlJacket.GetUrlParts().FilePath);
        }));
    }
    MapProxyDiscriminatorToScWindowType(proxyDiscriminator) {
        let toReturn = _50_scWindowType/* ScWindowType.Unknown */.D.Unknown;
        if (false) {}
        else if (proxyDiscriminator === _40_ScProxyDisciminator/* ScProxyDisciminator.AccessViewer */.K.AccessViewer) {
            toReturn = _50_scWindowType/* ScWindowType.AccessViewer */.D.AccessViewer;
        }
        else if (proxyDiscriminator === _40_ScProxyDisciminator/* ScProxyDisciminator.Archive */.K.Archive) {
            toReturn = _50_scWindowType/* ScWindowType.Archive */.D.Archive;
        }
        else if (proxyDiscriminator === _40_ScProxyDisciminator/* ScProxyDisciminator.ContentEditor */.K.ContentEditor) {
            toReturn = _50_scWindowType/* ScWindowType.ContentEditor */.D.ContentEditor;
        }
        else if (proxyDiscriminator === _40_ScProxyDisciminator/* ScProxyDisciminator.Desktop */.K.Desktop) {
            this.ErrorHand.HandleFatalError(this.MapProxyDiscriminatorToScWindowType.name, 'Something has gone wrong');
        }
        else if (proxyDiscriminator === _40_ScProxyDisciminator/* ScProxyDisciminator.DomainManager */.K.DomainManager) {
            toReturn = _50_scWindowType/* ScWindowType.DomainManager */.D.DomainManager;
        }
        else if (proxyDiscriminator === _40_ScProxyDisciminator/* ScProxyDisciminator.InstallationWizard */.K.InstallationWizard) {
            toReturn = _50_scWindowType/* ScWindowType.InstallationWizard */.D.InstallationWizard;
        }
        else if (proxyDiscriminator === _40_ScProxyDisciminator/* ScProxyDisciminator.InstalledLicenses */.K.InstalledLicenses) {
            toReturn = _50_scWindowType/* ScWindowType.InstalledLicenses */.D.InstalledLicenses;
        }
        else if (proxyDiscriminator === _40_ScProxyDisciminator/* ScProxyDisciminator.JqueryModalDialogsDocProxy */.K.JqueryModalDialogsDocProxy) {
            toReturn = _50_scWindowType/* ScWindowType.JqueryModalDialogs */.D.JqueryModalDialogs;
        }
        else if (proxyDiscriminator === _40_ScProxyDisciminator/* ScProxyDisciminator.KeyBoardMap */.K.KeyBoardMap) {
            toReturn = _50_scWindowType/* ScWindowType.KeyboardMap */.D.KeyboardMap;
        }
        else if (proxyDiscriminator === _40_ScProxyDisciminator/* ScProxyDisciminator.LicenseDetails */.K.LicenseDetails) {
            toReturn = _50_scWindowType/* ScWindowType.LicenseDetails */.D.LicenseDetails;
        }
        else if (proxyDiscriminator === _40_ScProxyDisciminator/* ScProxyDisciminator.LogViewer */.K.LogViewer) {
            toReturn = _50_scWindowType/* ScWindowType.LogViewer */.D.LogViewer;
        }
        else if (proxyDiscriminator === _40_ScProxyDisciminator/* ScProxyDisciminator.MarketingControlPanel */.K.MarketingControlPanel) {
            toReturn = _50_scWindowType/* ScWindowType.MarketingControlPanel */.D.MarketingControlPanel;
        }
        else if (proxyDiscriminator === _40_ScProxyDisciminator/* ScProxyDisciminator.MediaLibrary */.K.MediaLibrary) {
            toReturn = _50_scWindowType/* ScWindowType.MediaLibrary */.D.MediaLibrary;
        }
        else if (proxyDiscriminator === _40_ScProxyDisciminator/* ScProxyDisciminator.PackageDesigner */.K.PackageDesigner) {
            toReturn = _50_scWindowType/* ScWindowType.PackageDesigner */.D.PackageDesigner;
        }
        else if (proxyDiscriminator === _40_ScProxyDisciminator/* ScProxyDisciminator.RecycleBin */.K.RecycleBin) {
            toReturn = _50_scWindowType/* ScWindowType.RecycleBin */.D.RecycleBin;
        }
        else if (proxyDiscriminator === _40_ScProxyDisciminator/* ScProxyDisciminator.RoleManager */.K.RoleManager) {
            toReturn = _50_scWindowType/* ScWindowType.RoleManager */.D.RoleManager;
        }
        else if (proxyDiscriminator === _40_ScProxyDisciminator/* ScProxyDisciminator.Run */.K.Run) {
            toReturn = _50_scWindowType/* ScWindowType.Run */.D.Run;
        }
        else if (proxyDiscriminator === _40_ScProxyDisciminator/* ScProxyDisciminator.ScanForBrokenLinks */.K.ScanForBrokenLinks) {
            toReturn = _50_scWindowType/* ScWindowType.ScanForBrokenLinks */.D.ScanForBrokenLinks;
        }
        else if (proxyDiscriminator === _40_ScProxyDisciminator/* ScProxyDisciminator.SecurityEditor */.K.SecurityEditor) {
            toReturn = _50_scWindowType/* ScWindowType.SecurityEditor */.D.SecurityEditor;
        }
        else if (proxyDiscriminator === _40_ScProxyDisciminator/* ScProxyDisciminator.TemplateManager */.K.TemplateManager) {
            toReturn = _50_scWindowType/* ScWindowType.TemplateManager */.D.TemplateManager;
        }
        else if (proxyDiscriminator === _40_ScProxyDisciminator/* ScProxyDisciminator.UserManager */.K.UserManager) {
            toReturn = _50_scWindowType/* ScWindowType.UserManager */.D.UserManager;
        }
        else if (proxyDiscriminator === _40_ScProxyDisciminator/* ScProxyDisciminator.Workbox */.K.Workbox) {
            toReturn = _50_scWindowType/* ScWindowType.Workbox */.D.Workbox;
        }
        else if (proxyDiscriminator === _40_ScProxyDisciminator/* ScProxyDisciminator.AppToolsInstallerDesigner */.K.AppToolsInstallerDesigner) {
            toReturn = _50_scWindowType/* ScWindowType.AppToolsInstallerDesigner */.D.AppToolsInstallerDesigner;
        }
        else {
            this.ErrorHand.HandleFatalError(this.MapProxyDiscriminatorToScWindowType.name, 'unhandled mapping ' + _40_ScProxyDisciminator/* ScProxyDisciminator */.K[proxyDiscriminator]);
        }
        ;
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ScWindowFacade.js
var ScWindowFacade_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};













class ScWindowTreeProxy extends _APICoreBase {
    constructor(apiCore, documentJacket) {
        super(apiCore);
        this.Logger.CTORStart(ScWindowTreeProxy.name);
        this.DocumentJacket = documentJacket;
        this.Instantiate();
        this.Logger.CTOREnd(ScWindowTreeProxy.name);
    }
    Instantiate() {
        this.Logger.FuncStart([ScWindowTreeProxy.name, this.Instantiate.name]);
        this.ScPageTypeResolver = new ScWindowTypeResolver/* ScWindowTypeResolver */.X(this.ApiCore);
        this.ScDocProxyResolver = new ScDocProxyResolver(this.ApiCore);
        this.Logger.FuncEnd([ScWindowTreeProxy.name, this.Instantiate.name]);
    }
    InstantiatetRoot() {
        return ScWindowFacade_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart([ScWindowTreeProxy.name, this.InstantiatetRoot.name]);
                this.TabSessionId = sessionStorage.getItem(InjectConst/* ContentConst.Const.Storage.SessionKey */.y.Const.Storage.SessionKey);
                if (!this.TabSessionId) {
                    this.TabSessionId = Guid/* Guid.WithoutDashes */.i.WithoutDashes(Guid/* Guid.NewRandomGuid */.i.NewRandomGuid());
                    sessionStorage.setItem(InjectConst/* ContentConst.Const.Storage.SessionKey */.y.Const.Storage.SessionKey, this.TabSessionId);
                }
                let windowType = _50_scWindowType/* ScWindowType.Unknown */.D.Unknown;
                yield this.DocumentJacket.WaitForCompleteNAB_DocumentJacket('Window.Document')
                    .then((result) => windowType = this.ScPageTypeResolver.GetScWindowType(this.DocumentJacket.UrlJacket))
                    .then(() => this.ScDocProxyResolver.ScDocProxyFactoryMake(this.DocumentJacket, null))
                    .then((scDocProxy) => this.RootProxy = scDocProxy)
                    .then(() => this.RootProxy.InstantiateAwaitElementsTop())
                    .then(() => this.RootProxy.WireEvents())
                    .then(() => this.RootProxy.OnFocus())
                    .catch((err) => this.ErrorHand.HandleFatalError(this.InstantiatetRoot.name, err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError(this.InstantiatetRoot.name, err);
            }
            this.Logger.FuncEnd([ScWindowTreeProxy.name, this.InstantiatetRoot.name]);
        });
    }
    GetCurrentPageType() {
        return this.ScPageTypeResolver.GetScWindowType(this.DocumentJacket.UrlJacket);
    }
    TriggerCERibbonCommand(ribbonCommand) {
        this.Logger.FuncStart([ScWindowTreeProxy.name, this.TriggerCERibbonCommand.name]);
        if (this.RootProxy) {
            if (this.RootProxy.ScProxyDisciminator === _40_ScProxyDisciminator/* ScProxyDisciminator.ContentEditor */.K.ContentEditor) {
                let contentEditorProxy = this.RootProxy;
                if (contentEditorProxy) {
                    contentEditorProxy.TriggerCERibbonCommand(ribbonCommand);
                }
            }
            else if (this.RootProxy.ScProxyDisciminator === _40_ScProxyDisciminator/* ScProxyDisciminator.Desktop */.K.Desktop) {
                let desktopProxy = this.RootProxy;
                if (desktopProxy) {
                    desktopProxy.TriggerCERibbonCommand(ribbonCommand);
                }
            }
        }
        this.Logger.FuncEnd([ScWindowTreeProxy.name, this.TriggerCERibbonCommand.name]);
    }
    SetCompactCss(documentJacket) {
        return ScWindowFacade_awaiter(this, void 0, void 0, function* () {
        });
    }
    GetState() {
        return new Promise((resolve, reject) => ScWindowFacade_awaiter(this, void 0, void 0, function* () {
            let toReturn = new DefaultStateOfTree/* DefaultWindowStateTree */.d();
            if (this.RootProxy) {
                yield this.RootProxy.GetState()
                    .then((stateOf_) => toReturn = stateOf_)
                    .then(() => resolve(toReturn))
                    .catch((err) => reject(this.GetState.name + ' | ' + err));
            }
            else {
                resolve(toReturn);
            }
        }));
    }
    GetStateOfScUiProxy(snapshotFlavor) {
        return new Promise((resolve, reject) => ScWindowFacade_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetStateOfScUiProxy.name);
            let toReturnStateOfSitecoreWindow = new DefaultStateOfScUiProxy/* DefaultStateOfScUiProxy */.K();
            yield this.GetState()
                .then((dataSitecoreWindowStates) => toReturnStateOfSitecoreWindow.WindowState = dataSitecoreWindowStates)
                .then(() => {
                toReturnStateOfSitecoreWindow.Meta = this.PopulateMetaData(snapshotFlavor, toReturnStateOfSitecoreWindow.WindowState);
                toReturnStateOfSitecoreWindow.Friendly = this.PopulateFriendly(toReturnStateOfSitecoreWindow.Meta);
            })
                .then(() => resolve(toReturnStateOfSitecoreWindow))
                .catch((err) => reject(this.GetStateOfScUiProxy.name + ' | ' + err));
            this.Logger.FuncEnd(this.GetStateOfScUiProxy.name);
        }));
    }
    PublishActiveCE() {
        return ScWindowFacade_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScWindowFacade_awaiter(this, void 0, void 0, function* () {
                if (this.GetCurrentPageType() == _50_scWindowType/* ScWindowType.ContentEditor */.D.ContentEditor) {
                    yield this.RootProxy.PublishItem()
                        .then(() => resolve())
                        .catch((err) => reject(this.PublishActiveCE.name + ' | ' + err));
                }
                else if (this.GetCurrentPageType() == _50_scWindowType/* ScWindowType.Desktop */.D.Desktop) {
                    this.RootProxy.PublishItem()
                        .then(() => resolve())
                        .catch((err) => reject(this.PublishActiveCE.name + ' | ' + err));
                }
                else {
                    reject(this.PublishActiveCE.name + ' Unhandled page type');
                }
            }));
        });
    }
    SetStateOfScWin(dataToRestore) {
        return ScWindowFacade_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScWindowFacade_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart([ScWindowTreeProxy.name, this.SetStateOfScWin.name]);
                if (dataToRestore) {
                    if (dataToRestore.Meta.WindowType == _50_scWindowType/* ScWindowType.Desktop */.D.Desktop) {
                        if (dataToRestore.WindowState) {
                            yield this.RootProxy.SetState(dataToRestore.WindowState)
                                .then(() => resolve())
                                .catch((err) => reject(this.SetStateOfScWin.name + ' | ' + err));
                        }
                        else {
                            this.ErrorHand.HandleFatalError(this.SetStateOfScWin.name, 'no states in dataToRestore');
                        }
                    }
                    else {
                        reject(this.SetStateOfScWin.name + 'Data not restored. Not in Desktop or Content Editor');
                    }
                }
                else {
                    this.ErrorHand.WarningAndContinue(this.SetStateOfScWin.name, " No data found to restore");
                    resolve();
                }
                reject(this.ErrorHand.FormatRejectMessage([ScWindowTreeProxy.name, this.SetStateOfScWin.name], 'unknown reason'));
                this.Logger.FuncEnd([ScWindowTreeProxy.name, this.SetStateOfScWin.name]);
            }));
        });
    }
    PopulateFriendly(metadata) {
        let toReturn = new DefaultFriendly/* DefaultFriendly */.S();
        toReturn.WindowType = _50_scWindowType/* ScWindowType */.D[metadata.WindowType];
        toReturn.TimeStamp = StaticHelpers/* StaticHelpers.MakeFriendlyDate */.y.MakeFriendlyDate(metadata.TimeStamp);
        toReturn.Flavor = SnapShotFlavor/* SnapShotFlavor */.n[metadata.Flavor];
        return toReturn;
    }
    Hash(input) {
        let hash = 0;
        let strLen = input.length;
        let charCode;
        if (strLen !== 0) {
            for (var idx = 0; idx < strLen; idx++) {
                charCode = input.charCodeAt(idx);
                hash = ((hash << 5) - hash) + charCode;
                hash = hash & hash;
            }
        }
        return hash;
    }
    PopulateMetaData(snapshotFlavor, stateOfScWindow) {
        let toReturn = new DefaultMetaData/* DefaultMetaData */.S();
        toReturn.WindowType = this.ScPageTypeResolver.GetScWindowType(this.DocumentJacket.UrlJacket);
        toReturn.TimeStamp = new Date();
        toReturn.SessionId = this.TabSessionId;
        toReturn.Flavor = snapshotFlavor;
        toReturn.Hash = this.Hash(JSON.stringify(stateOfScWindow));
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/HindSiteScUiProxy.js
var HindSiteScUiProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class HindSiteScUiProxy {
    constructor(loggerAgent, errorHand, taskMon, documentJacket, runTimeOptions) {
        this.IsInstatiated = false;
        this.ApiCore = {
            ErrorHand: errorHand,
            Logger: loggerAgent,
            RunTimeOptions: runTimeOptions,
            TaskMonitor: taskMon,
        };
        this.Logger = this.ApiCore.Logger;
        this.ErrorHand = this.ApiCore.ErrorHand;
        this.Logger.CTORStart(HindSiteScUiProxy.name);
        this.DocumentJacket = documentJacket;
        this.Logger.CTOREnd(HindSiteScUiProxy.name);
    }
    StartUp() {
        return HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([HindSiteScUiProxy.name, this.StartUp.name]);
            try {
                if (!this.IsInstatiated) {
                    this.ScWindowFacade = new ScWindowTreeProxy(this.ApiCore, this.DocumentJacket);
                    yield this.ScWindowFacade.InstantiatetRoot()
                        .then(() => this.IsInstatiated = true)
                        .catch((err) => this.ErrorHand.HandleFatalError([HindSiteScUiProxy.name, this.StartUp.name], err));
                }
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([HindSiteScUiProxy.name, this.StartUp.name], err);
            }
            this.Logger.FuncEnd([HindSiteScUiProxy.name, this.StartUp.name]);
        });
    }
    APICommand(commandData) {
        return new Promise((resolve, reject) => HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart([HindSiteScUiProxy.name, this.APICommand.name], APICommand/* APICommandFlag */.v[commandData.APICommand]);
            let returnPayload = this.DefaultReturnPayload();
            yield this.StartUp()
                .then(() => HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.LogAsJsonPretty(this.APICommand.name, commandData);
                switch (commandData.APICommand) {
                    case APICommand/* APICommandFlag.NavigateBack */.v.NavigateBack:
                        this.TriggerCERibbonCommand(commandData)
                            .then((scUiReturnPayload) => returnPayload = scUiReturnPayload)
                            .catch((err) => this.ErrorHand.FormatRejectMessage([HindSiteScUiProxy.name, this.APICommand.name, JSON.stringify(commandData, null, 2)], err));
                        break;
                    case APICommand/* APICommandFlag.NavigateForward */.v.NavigateForward:
                        this.TriggerCERibbonCommand(commandData)
                            .then((scUiReturnPayload) => returnPayload = scUiReturnPayload)
                            .catch((err) => this.ErrorHand.FormatRejectMessage([HindSiteScUiProxy.name, this.APICommand.name, JSON.stringify(commandData, null, 2)], err));
                        break;
                    case APICommand/* APICommandFlag.NavigateLinks */.v.NavigateLinks:
                        this.TriggerCERibbonCommand(commandData)
                            .then((scUiReturnPayload) => returnPayload = scUiReturnPayload)
                            .catch((err) => this.ErrorHand.FormatRejectMessage([HindSiteScUiProxy.name, this.APICommand.name, JSON.stringify(commandData, null, 2)], err));
                        break;
                    case APICommand/* APICommandFlag.NavigateUp */.v.NavigateUp:
                        this.TriggerCERibbonCommand(commandData)
                            .then((scUiReturnPayload) => returnPayload = scUiReturnPayload)
                            .catch((err) => this.ErrorHand.FormatRejectMessage([HindSiteScUiProxy.name, this.APICommand.name, JSON.stringify(commandData, null, 2)], err));
                        break;
                    case APICommand/* APICommandFlag.PresentationDetails */.v.PresentationDetails:
                        this.TriggerCERibbonCommand(commandData)
                            .then((scUiReturnPayload) => returnPayload = scUiReturnPayload)
                            .catch((err) => this.ErrorHand.FormatRejectMessage([HindSiteScUiProxy.name, this.APICommand.name, JSON.stringify(commandData, null, 2)], err));
                        break;
                    case APICommand/* APICommandFlag.ToggleRawValues */.v.ToggleRawValues:
                        this.TriggerCERibbonCommand(commandData)
                            .then((scUiReturnPayload) => returnPayload = scUiReturnPayload)
                            .catch((err) => this.ErrorHand.FormatRejectMessage([HindSiteScUiProxy.name, this.APICommand.name, JSON.stringify(commandData, null, 2)], err));
                        break;
                    case APICommand/* APICommandFlag.GetStateOfScUiProxy */.v.GetStateOfScUiProxy:
                        yield this.GetStateOfScUiProxy(commandData)
                            .then((scUiReturnPayload) => returnPayload = scUiReturnPayload)
                            .catch((err) => this.ErrorHand.FormatRejectMessage([HindSiteScUiProxy.name, this.APICommand.name, JSON.stringify(commandData, null, 2)], err));
                        break;
                    case APICommand/* APICommandFlag.AddContentEditorToDesktopAsync */.v.AddContentEditorToDesktopAsync:
                        this.AddContentEditorToDesktopAsync(commandData)
                            .then((scUiReturnPayload) => returnPayload = scUiReturnPayload)
                            .catch((err) => this.ErrorHand.FormatRejectMessage([HindSiteScUiProxy.name, this.APICommand.name, JSON.stringify(commandData, null, 2)], err));
                        break;
                    case APICommand/* APICommandFlag.PublischActiveCE */.v.PublischActiveCE:
                        this.PublischActiveCE(commandData)
                            .then((scUiReturnPayload) => returnPayload = scUiReturnPayload)
                            .catch((err) => this.ErrorHand.FormatRejectMessage([HindSiteScUiProxy.name, this.APICommand.name, JSON.stringify(commandData, null, 2)], err));
                        break;
                    case APICommand/* APICommandFlag.ToggleCompactCss */.v.ToggleCompactCss:
                        this.ToggleCompactCss(commandData)
                            .then((scUiReturnPayload) => returnPayload = scUiReturnPayload)
                            .catch((err) => this.ErrorHand.FormatRejectMessage([HindSiteScUiProxy.name, this.APICommand.name, JSON.stringify(commandData, null, 2)], err));
                        break;
                    case APICommand/* APICommandFlag.SetStateOfSitecoreWindowAsync */.v.SetStateOfSitecoreWindowAsync:
                        this.SetStateOfSitecoreWindowAsync(commandData)
                            .then((scUiReturnPayload) => returnPayload = scUiReturnPayload)
                            .catch((err) => this.ErrorHand.FormatRejectMessage([HindSiteScUiProxy.name, this.APICommand.name, JSON.stringify(commandData, null, 2)], err));
                        break;
                    case APICommand/* APICommandFlag.CEGoSelected */.v.CEGoSelected:
                        this.CEGoSelected(commandData)
                            .then((scUiReturnPayload) => returnPayload = scUiReturnPayload)
                            .catch((err) => this.ErrorHand.FormatRejectMessage([HindSiteScUiProxy.name, this.APICommand.name, JSON.stringify(commandData, null, 2)], err));
                        break;
                    case APICommand/* APICommandFlag.OpenContentEditor */.v.OpenContentEditor:
                        this.OpenContentEditor(commandData)
                            .then((scUiReturnPayload) => returnPayload = scUiReturnPayload)
                            .catch((err) => this.ErrorHand.FormatRejectMessage([HindSiteScUiProxy.name, this.APICommand.name, JSON.stringify(commandData, null, 2)], err));
                        break;
                    case APICommand/* APICommandFlag.AdminB */.v.AdminB:
                        this.AdminB(commandData)
                            .then((scUiReturnPayload) => returnPayload = scUiReturnPayload)
                            .catch((err) => this.ErrorHand.FormatRejectMessage([HindSiteScUiProxy.name, this.APICommand.name, JSON.stringify(commandData, null, 2)], err));
                        break;
                    default:
                }
            }))
                .then(() => resolve(returnPayload))
                .catch((err) => reject(this.ErrorHand.FormatRejectMessage([HindSiteScUiProxy.name, this.GetStateOfScUiProxy.name], err)));
            this.Logger.FuncEnd([HindSiteScUiProxy.name, this.APICommand.name], APICommand/* APICommandFlag */.v[commandData.APICommand]);
        }));
    }
    DefaultReturnPayload() {
        let defaultVal = {
            StateOfScUi: null,
        };
        return defaultVal;
    }
    GetStateOfScUiProxy(apiCallPayload) {
        return HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
                let returnPayload = this.DefaultReturnPayload();
                yield this.StartUp()
                    .then(() => this.ScWindowFacade.GetStateOfScUiProxy(apiCallPayload.SnapShotFlavor))
                    .then((stateOfScUi) => returnPayload.StateOfScUi = stateOfScUi)
                    .then(() => resolve(returnPayload))
                    .catch((err) => this.ErrorHand.HandleFatalError([HindSiteScUiProxy.name, this.GetStateOfScUiProxy.name], err));
            }));
        });
    }
    AddContentEditorToDesktopAsync(apiCallPayload) {
        return HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
                let returnPayload = this.DefaultReturnPayload();
                yield this.StartUp()
                    .then(() => this.ScWindowFacade.RootProxy.AddContentEditorFrameAsync())
                    .then(() => resolve(returnPayload))
                    .catch((err) => reject(err));
            }));
        });
    }
    PublischActiveCE(apiCallPayload) {
        return HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
                let returnPayload = this.DefaultReturnPayload();
                yield this.StartUp()
                    .then(() => this.ScWindowFacade.PublishActiveCE())
                    .then(() => resolve(returnPayload))
                    .catch((err) => reject(this.ErrorHand.FormatRejectMessage([HindSiteScUiProxy.name, this.PublischActiveCE.name], err)));
            }));
        });
    }
    ToggleCompactCss(apiCallPayload) {
        return HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
                let returnPayload = this.DefaultReturnPayload();
                yield this.StartUp()
                    .then(() => resolve(returnPayload))
                    .catch((err) => reject(err));
            }));
        });
    }
    SetStateOfSitecoreWindowAsync(apiCallPayload) {
        return HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
                let returnPayload = this.DefaultReturnPayload();
                this.Logger.FuncStart([HindSiteScUiProxy.name, this.SetStateOfSitecoreWindowAsync.name]);
                yield this.StartUp()
                    .then(() => this.ScWindowFacade.SetStateOfScWin(apiCallPayload.StateOfScUi))
                    .then(() => resolve(returnPayload))
                    .catch((err) => reject(err));
                this.Logger.FuncEnd([HindSiteScUiProxy.name, this.SetStateOfSitecoreWindowAsync.name]);
            }));
        });
    }
    CEGoSelected(apiCallPayload) {
        return HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
                let returnPayload = this.DefaultReturnPayload();
                yield this.StartUp()
                    .then(() => {
                    let text = '';
                    if (window.getSelection()) {
                        text = window.getSelection().toString();
                        alert(text);
                    }
                })
                    .then(() => resolve(returnPayload))
                    .catch((err) => reject(err));
            }));
        });
    }
    TriggerCERibbonCommand(apiCallPayload) {
        return HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart([HindSiteScUiProxy.name, this.TriggerCERibbonCommand.name], APICommand/* APICommandFlag */.v[apiCallPayload.APICommand]);
                let returnPayload = this.DefaultReturnPayload();
                yield this.StartUp()
                    .then(() => {
                    if ((typeof apiCallPayload.APICommand !== 'undefined') && apiCallPayload.APICommand !== APICommand/* APICommandFlag.Unknown */.v.Unknown) {
                        this.ScWindowFacade.TriggerCERibbonCommand(apiCallPayload.APICommand);
                    }
                    else {
                        this.ErrorHand.WarningAndContinue(this.TriggerCERibbonCommand.name, 'Invalid scRibbonCommand');
                    }
                })
                    .then(() => resolve(returnPayload))
                    .catch((err) => reject(this.ErrorHand.FormatRejectMessage(this.TriggerCERibbonCommand.name, err)));
                this.Logger.FuncEnd([HindSiteScUiProxy.name, this.TriggerCERibbonCommand.name]);
            }));
        });
    }
    OpenContentEditor(apiCallPayload) {
        return HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            throw new Error("Method not implemented.");
        });
    }
    AdminB(apiCallPayload) {
        return HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart([HindSiteScUiProxy.name, this.TriggerCERibbonCommand.name], APICommand/* APICommandFlag */.v[apiCallPayload.APICommand]);
                let returnPayload = this.DefaultReturnPayload();
                yield this.StartUp()
                    .then(() => {
                    this.ScUiMan = new ScUiManager(this.ApiCore);
                    this.ScUiMan.InitSitecoreUiManager();
                    this.ScUiMan.AdminB(this.DocumentJacket, null);
                })
                    .then(() => resolve(returnPayload))
                    .catch((err) => reject(this.ErrorHand.FormatRejectMessage(this.TriggerCERibbonCommand.name, err)));
            }));
        });
    }
}


/***/ }),

/***/ 2276:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "X": () => /* binding */ ScWindowTypeResolver
});

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/50 - scWindowType.js
var _50_scWindowType = __webpack_require__(7644);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/QueryStrKey.js
var QueryStrKey = __webpack_require__(474);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Collections/ScWindowTypeDeterminators.js


class ScWindowTypeDeterminators {
}
ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell = /sitecore\/shell/ig;
ScWindowTypeDeterminators.regexMatchAll = /.*/ig;
ScWindowTypeDeterminators.regexMatchApplicationsContentManager = /sitecore\/shell\/Applications\/Content.*Manager/ig;
ScWindowTypeDeterminators.XMLControlApplication = {
    Key: QueryStrKey/* QueryStrKey.xmlcontrol */.a.xmlcontrol,
    ValueMatch: /Application/ig,
};
ScWindowTypeDeterminators.ScWindowTypeDeterminators = [
    {
        ConfidenceScore: 0,
        Friendly: "Access View",
        QueryKeyValuePairs: [],
        RegexPathTest: /sitecore\/shell\/Applications\/Tools\/Installer\/Designer/ig,
        ScWindowType: _50_scWindowType/* ScWindowType.AppToolsInstallerDesigner */.D.AppToolsInstallerDesigner,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.AppToolsInstallerDesigner */.D.AppToolsInstallerDesigner],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Access View",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey/* QueryStrKey.he */.a.he,
                ValueMatch: /Access.?Viewer/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: _50_scWindowType/* ScWindowType.AccessViewer */.D.AccessViewer,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.AccessViewer */.D.AccessViewer],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Archive",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey/* QueryStrKey.he */.a.he,
                ValueMatch: /Archive/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: _50_scWindowType/* ScWindowType.Archive */.D.Archive,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.Archive */.D.Archive],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Content Editor Hosted",
        QueryKeyValuePairs: [
            {
                Key: QueryStrKey/* QueryStrKey.he */.a.he,
                ValueMatch: /Content.*Editor/ig,
            }
        ],
        RegexPathTest: /\/sitecore\/shell\/Applications\/Content-Editor/ig,
        ScWindowType: _50_scWindowType/* ScWindowType.ContentEditor */.D.ContentEditor,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.ContentEditor */.D.ContentEditor],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Content Editor Stand Alone",
        QueryKeyValuePairs: [
            {
                Key: QueryStrKey/* QueryStrKey.he */.a.he,
                ValueMatch: /\/sitecore\/shell\/Applications\/Content.*Editor/ig,
            }
        ],
        RegexPathTest: /sitecore\/shell\/Applications\/Content.*Editor/ig,
        ScWindowType: _50_scWindowType/* ScWindowType.ContentEditor */.D.ContentEditor,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.ContentEditor */.D.ContentEditor],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Control Panel",
        QueryKeyValuePairs: [],
        RegexPathTest: /sitecore\/shell\/Applications\/Control.*20panel/ig,
        ScWindowType: _50_scWindowType/* ScWindowType.ControlPanel */.D.ControlPanel,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.ControlPanel */.D.ControlPanel],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Desktop",
        QueryKeyValuePairs: [],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: _50_scWindowType/* ScWindowType.Desktop */.D.Desktop,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.Desktop */.D.Desktop],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Debug",
        QueryKeyValuePairs: [
            {
                Key: QueryStrKey/* QueryStrKey.sc_debug */.a.sc_debug,
                ValueMatch: /1/ig,
            },
        ],
        RegexPathTest: /.*/ig,
        ScWindowType: _50_scWindowType/* ScWindowType.Debug */.D.Debug,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.Debug */.D.Debug],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Domain Manager",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey/* QueryStrKey.he */.a.he,
                ValueMatch: /Domain.?Manager/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: _50_scWindowType/* ScWindowType.DomainManager */.D.DomainManager,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.DomainManager */.D.DomainManager],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Email Experience Manager",
        QueryKeyValuePairs: [],
        RegexPathTest: /sitecore\/shell\/client\/Applications\/ECM\/Dashboard/ig,
        ScWindowType: _50_scWindowType/* ScWindowType.EmailExperienceManager */.D.EmailExperienceManager,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.EmailExperienceManager */.D.EmailExperienceManager],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Experience Analytics",
        QueryKeyValuePairs: [],
        RegexPathTest: /sitecore\/client\/Applications\/ExperienceAnalytics\/Dashboard/ig,
        ScWindowType: _50_scWindowType/* ScWindowType.ExperienceAnalytics */.D.ExperienceAnalytics,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.ExperienceAnalytics */.D.ExperienceAnalytics],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Experience Profile",
        QueryKeyValuePairs: [],
        RegexPathTest: /sitecore\/client\/Applications\/ExperienceProfile/ig,
        ScWindowType: _50_scWindowType/* ScWindowType.ExperienceProfile */.D.ExperienceProfile,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.ExperienceProfile */.D.ExperienceProfile],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Experience Editor - Edit",
        QueryKeyValuePairs: [
            {
                Key: QueryStrKey/* QueryStrKey.sc_mode */.a.sc_mode,
                ValueMatch: /edit/ig,
            },
        ],
        RegexPathTest: /.*/ig,
        ScWindowType: _50_scWindowType/* ScWindowType.ExperienceEditor_Edit */.D.ExperienceEditor_Edit,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.ExperienceEditor_Edit */.D.ExperienceEditor_Edit],
    },
    {
        ConfidenceScore: 0,
        Friendly: "FallBack",
        QueryKeyValuePairs: [],
        RegexPathTest: /sitecore\//ig,
        ScWindowType: _50_scWindowType/* ScWindowType.FallBack */.D.FallBack,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.FallBack */.D.FallBack],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Federated Experience Manager",
        QueryKeyValuePairs: [],
        RegexPathTest: /\/sitecore\/client\/Applications\/fxm\/DomainDashboard/ig,
        ScWindowType: _50_scWindowType/* ScWindowType.FederatedExperienceManager */.D.FederatedExperienceManager,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.FederatedExperienceManager */.D.FederatedExperienceManager],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Installation Wizard",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey/* QueryStrKey.he */.a.he,
                ValueMatch: /Installation?.Wizard/ig,
            },
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: _50_scWindowType/* ScWindowType.InstallationWizard */.D.InstallationWizard,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.InstallationWizard */.D.InstallationWizard],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Installer Build Package",
        QueryKeyValuePairs: [
            {
                Key: QueryStrKey/* QueryStrKey.xmlcontrol */.a.xmlcontrol,
                ValueMatch: /Installer.?BuildPackage/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: _50_scWindowType/* ScWindowType.InstallerBuildPackage */.D.InstallerBuildPackage,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.InstallerBuildPackage */.D.InstallerBuildPackage],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Installed Licenses",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey/* QueryStrKey.he */.a.he,
                ValueMatch: /Installed.?Licenses/ig,
            },
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: _50_scWindowType/* ScWindowType.InstalledLicenses */.D.InstalledLicenses,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.InstalledLicenses */.D.InstalledLicenses],
    },
    {
        ConfidenceScore: 0,
        Friendly: "JqueryModalDialogs",
        QueryKeyValuePairs: [],
        RegexPathTest: /sitecore\/shell\/Controls\/JqueryModalDialogs.html/ig,
        ScWindowType: _50_scWindowType/* ScWindowType.JqueryModalDialogs */.D.JqueryModalDialogs,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.JqueryModalDialogs */.D.JqueryModalDialogs],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Keyboard Map",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey/* QueryStrKey.he */.a.he,
                ValueMatch: /Keyboard.?Map/ig,
            },
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: _50_scWindowType/* ScWindowType.KeyboardMap */.D.KeyboardMap,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.KeyboardMap */.D.KeyboardMap],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Launchpad",
        QueryKeyValuePairs: [],
        RegexPathTest: /sitecore\/client\/Applications\/Launchpad/ig,
        ScWindowType: _50_scWindowType/* ScWindowType.Launchpad */.D.Launchpad,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.Launchpad */.D.Launchpad],
    },
    {
        ConfidenceScore: 0,
        Friendly: "License Details",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey/* QueryStrKey.he */.a.he,
                ValueMatch: /License.?Details/ig,
            },
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: _50_scWindowType/* ScWindowType.LicenseDetails */.D.LicenseDetails,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.LicenseDetails */.D.LicenseDetails],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Login",
        QueryKeyValuePairs: [],
        RegexPathTest: /sitecore\/login/ig,
        ScWindowType: _50_scWindowType/* ScWindowType.LoginPage */.D.LoginPage,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.LoginPage */.D.LoginPage],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Log Viewer",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey/* QueryStrKey.he */.a.he,
                ValueMatch: /Log.?Viewer/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: _50_scWindowType/* ScWindowType.LogViewer */.D.LogViewer,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.LogViewer */.D.LogViewer],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Marketing Control Panel",
        QueryKeyValuePairs: [
            {
                Key: QueryStrKey/* QueryStrKey.he */.a.he,
                ValueMatch: /Marketing.?Control.?Panel/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexMatchApplicationsContentManager,
        ScWindowType: _50_scWindowType/* ScWindowType.MarketingControlPanel */.D.MarketingControlPanel,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.MarketingControlPanel */.D.MarketingControlPanel],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Media Library",
        QueryKeyValuePairs: [
            {
                Key: QueryStrKey/* QueryStrKey.he */.a.he,
                ValueMatch: /Media.?Library/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexMatchApplicationsContentManager,
        ScWindowType: _50_scWindowType/* ScWindowType.MediaLibrary */.D.MediaLibrary,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.MediaLibrary */.D.MediaLibrary],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Package Designer",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey/* QueryStrKey.he */.a.he,
                ValueMatch: /Package.?Designer/ig
            },
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: _50_scWindowType/* ScWindowType.PackageDesigner */.D.PackageDesigner,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.PackageDesigner */.D.PackageDesigner],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Preview",
        RegexPathTest: ScWindowTypeDeterminators.regexMatchAll,
        QueryKeyValuePairs: [
            {
                Key: QueryStrKey/* QueryStrKey.sc_mode */.a.sc_mode,
                ValueMatch: /preview/ig
            }
        ],
        ScWindowType: _50_scWindowType/* ScWindowType.ExperienceEditor_Preview */.D.ExperienceEditor_Preview,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.ExperienceEditor_Preview */.D.ExperienceEditor_Preview],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Publish",
        QueryKeyValuePairs: [],
        RegexPathTest: /sitecore\/shell\/Applications\/Publish/ig,
        ScWindowType: _50_scWindowType/* ScWindowType.Publish */.D.Publish,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.Publish */.D.Publish],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Recycle Bin",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey/* QueryStrKey.he */.a.he,
                ValueMatch: /Recycle.?Bin/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: _50_scWindowType/* ScWindowType.RecycleBin */.D.RecycleBin,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.RecycleBin */.D.RecycleBin],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Run",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey/* QueryStrKey.he */.a.he,
                ValueMatch: /Run/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: _50_scWindowType/* ScWindowType.Run */.D.Run,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.Run */.D.Run],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Role Manager",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey/* QueryStrKey.he */.a.he,
                ValueMatch: /Role.?Manager/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: _50_scWindowType/* ScWindowType.RoleManager */.D.RoleManager,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.RoleManager */.D.RoleManager],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Scan for Broken Links",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey/* QueryStrKey.he */.a.he,
                ValueMatch: /Scan.?for.?Broken.?Links/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: _50_scWindowType/* ScWindowType.ScanForBrokenLinks */.D.ScanForBrokenLinks,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.ScanForBrokenLinks */.D.ScanForBrokenLinks],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Security Editor",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey/* QueryStrKey.he */.a.he,
                ValueMatch: /Security.?Editor/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: _50_scWindowType/* ScWindowType.SecurityEditor */.D.SecurityEditor,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.SecurityEditor */.D.SecurityEditor],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Template Manager",
        QueryKeyValuePairs: [
            {
                Key: QueryStrKey/* QueryStrKey.he */.a.he,
                ValueMatch: /Template.*Manager/ig,
            }, {
                Key: QueryStrKey/* QueryStrKey.mo */.a.mo,
                ValueMatch: /templateworkspace/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexMatchApplicationsContentManager,
        ScWindowType: _50_scWindowType/* ScWindowType.TemplateManager */.D.TemplateManager,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.TemplateManager */.D.TemplateManager],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Update Center",
        QueryKeyValuePairs: [],
        RegexPathTest: /sitecore\/shell\/client\/applications\/updatecenter\/updates/ig,
        ScWindowType: _50_scWindowType/* ScWindowType.FallBack */.D.FallBack,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.FallBack */.D.FallBack],
    },
    {
        ConfidenceScore: 0,
        Friendly: "User Manager",
        QueryKeyValuePairs: [
            ScWindowTypeDeterminators.XMLControlApplication,
            {
                Key: QueryStrKey/* QueryStrKey.he */.a.he,
                ValueMatch: /User.?Manager/ig,
            }
        ],
        RegexPathTest: ScWindowTypeDeterminators.regexPathTest_Sitecore_Shell,
        ScWindowType: _50_scWindowType/* ScWindowType.UserManager */.D.UserManager,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.UserManager */.D.UserManager],
    },
    {
        ConfidenceScore: 0,
        Friendly: "Work Box",
        QueryKeyValuePairs: [],
        RegexPathTest: /sitecore\/shell\/Applications\/Workbox/ig,
        ScWindowType: _50_scWindowType/* ScWindowType.Workbox */.D.Workbox,
        ScWindowTypeFriendly: _50_scWindowType/* ScWindowType */.D[_50_scWindowType/* ScWindowType.Workbox */.D.Workbox],
    },
];

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/_CommonCoreBase.js
var _CommonCoreBase = __webpack_require__(6679);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/UrlAgent/ScWindowTypeResolver.js



class ScWindowTypeResolver extends _CommonCoreBase/* _CommonBase */.a {
    constructor(commonCore) {
        super(commonCore);
        this.Logger.CTORStart(ScWindowTypeResolver.name);
        this.Logger.CTOREnd(ScWindowTypeResolver.name);
    }
    RunJacketAgainstAllDeterminators(UrlJacket) {
        let determinators = ScWindowTypeDeterminators.ScWindowTypeDeterminators;
        let toReturnPageDeterminator = null;
        determinators.forEach((determinant) => {
            let passed = true;
            determinant.ConfidenceScore = 0;
            passed = this.TestJacketAgainstRegex(determinant.RegexPathTest, UrlJacket);
            if (passed) {
                let regExAsStr = determinant.RegexPathTest.toString();
                if (regExAsStr.charAt(0) === "/") {
                    regExAsStr = regExAsStr.substr(1);
                }
                if (regExAsStr.charAt(regExAsStr.length - 1) === "/") {
                    regExAsStr = regExAsStr.substr(0, regExAsStr.length - 1);
                }
                let slashCount = regExAsStr.split('/').length;
                determinant.ConfidenceScore += slashCount;
            }
            determinant.QueryKeyValuePairs.forEach((queryKeyvaluePair) => {
                let queryTest = UrlJacket.QueryStringHasKey(queryKeyvaluePair.Key);
                if (queryTest) {
                    queryTest = this.__urlTestAgainstRegex(queryKeyvaluePair.ValueMatch, UrlJacket.GetQueryStringValueByKey(queryKeyvaluePair.Key));
                }
                passed = passed && queryTest;
                if (passed) {
                    determinant.ConfidenceScore++;
                }
            });
            if (passed) {
                if (!toReturnPageDeterminator || toReturnPageDeterminator.ConfidenceScore < determinant.ConfidenceScore) {
                    toReturnPageDeterminator = determinant;
                }
            }
        });
        this.Logger.LogAsJsonPretty('From URL', UrlJacket.BuildFullUrlFromParts().AbsUrl);
        this.Logger.LogAsJsonPretty('Final determinant winner', toReturnPageDeterminator);
        return toReturnPageDeterminator;
    }
    TestJacketAgainstRegex(regexPattern, UrlJacket) {
        return this.__urlTestAgainstRegex(regexPattern, UrlJacket.BuildFullUrlFromParts().AbsUrl);
    }
    __urlTestAgainstRegex(regexPattern, testee) {
        let testResult = new RegExp(regexPattern).test(testee);
        return testResult;
    }
    GetScWindowType(UrlJacket) {
        var toReturn = _50_scWindowType/* ScWindowType.Unknown */.D.Unknown;
        let result = this.RunJacketAgainstAllDeterminators(UrlJacket);
        if (!result) {
            this.ErrorHand.HandleFatalError(this.GetScWindowType.name, 'Undetermined page: ' + UrlJacket.BuildFullUrlFromParts().AbsUrl);
        }
        else {
            toReturn = result.ScWindowType;
        }
        this.Logger.LogImportant(this.GetScWindowType.name + ' ' + _50_scWindowType/* ScWindowType */.D[toReturn]);
        return toReturn;
    }
}


/***/ }),

/***/ 2262:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "S": () => /* binding */ DefaultFriendly
/* harmony export */ });
/* harmony import */ var _Enums_50_scWindowType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7644);
/* harmony import */ var _Enums_SnapShotFlavor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6189);


class DefaultFriendly {
    constructor() {
        this.Flavor = _Enums_SnapShotFlavor__WEBPACK_IMPORTED_MODULE_1__/* .SnapShotFlavor */ .n[_Enums_SnapShotFlavor__WEBPACK_IMPORTED_MODULE_1__/* .SnapShotFlavor.Live */ .n.Live];
        this.NickName = '';
        this.TimeStamp = '';
        this.WindowType = _Enums_50_scWindowType__WEBPACK_IMPORTED_MODULE_0__/* .ScWindowType */ .D[_Enums_50_scWindowType__WEBPACK_IMPORTED_MODULE_0__/* .ScWindowType.Unknown */ .D.Unknown];
    }
}


/***/ }),

/***/ 3953:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "S": () => /* binding */ DefaultMetaData
/* harmony export */ });
/* harmony import */ var _Enums_50_scWindowType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7644);
/* harmony import */ var _Enums_SnapShotFlavor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6189);
/* harmony import */ var _Helpers_Guid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3473);



class DefaultMetaData {
    constructor() {
        this.Flavor = _Enums_SnapShotFlavor__WEBPACK_IMPORTED_MODULE_1__/* .SnapShotFlavor.Live */ .n.Live;
        this.SessionId = '';
        this.SnapshotId = _Helpers_Guid__WEBPACK_IMPORTED_MODULE_2__/* .Guid.NewRandomGuid */ .i.NewRandomGuid();
        this.StorageKey = '';
        this.TimeStamp = null;
        this.WindowType = _Enums_50_scWindowType__WEBPACK_IMPORTED_MODULE_0__/* .ScWindowType.Unknown */ .D.Unknown;
        this.Hash = -1;
        this.StorageId = _Helpers_Guid__WEBPACK_IMPORTED_MODULE_2__/* .Guid.NewRandomGuid */ .i.NewRandomGuid();
    }
}


/***/ }),

/***/ 7148:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "z": () => /* binding */ DefaultStateOfContentTree
/* harmony export */ });
/* harmony import */ var _Enums_40_ScProxyDisciminator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7170);

class DefaultStateOfContentTree {
    constructor() {
        this.Disciminator = _Enums_40_ScProxyDisciminator__WEBPACK_IMPORTED_MODULE_0__/* .ScProxyDisciminator.ContentTree */ .K.ContentTree;
        this.DisciminatorFriendly = _Enums_40_ScProxyDisciminator__WEBPACK_IMPORTED_MODULE_0__/* .ScProxyDisciminator */ .K[_Enums_40_ScProxyDisciminator__WEBPACK_IMPORTED_MODULE_0__/* .ScProxyDisciminator.ContentTree */ .K.ContentTree];
        this.ContentTreeNodeDeep = null;
    }
}


/***/ }),

/***/ 6820:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "p": () => /* binding */ DefaultStateOfDesktop
/* harmony export */ });
/* harmony import */ var _Enums_40_ScProxyDisciminator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7170);

class DefaultStateOfDesktop {
    constructor() {
        this.DisciminatorFriendly = _Enums_40_ScProxyDisciminator__WEBPACK_IMPORTED_MODULE_0__/* .ScProxyDisciminator */ .K[_Enums_40_ScProxyDisciminator__WEBPACK_IMPORTED_MODULE_0__/* .ScProxyDisciminator.Desktop */ .K.Desktop];
        this.Disciminator = _Enums_40_ScProxyDisciminator__WEBPACK_IMPORTED_MODULE_0__/* .ScProxyDisciminator.Desktop */ .K.Desktop;
        this.Children = [];
    }
}


/***/ }),

/***/ 222:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "K": () => /* binding */ DefaultStateOfScUiProxy
});

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/StaticHelpers.js
var StaticHelpers = __webpack_require__(1579);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultFriendly.js
var DefaultFriendly = __webpack_require__(2262);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultMetaData.js
var DefaultMetaData = __webpack_require__(3953);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/40 - ScProxyDisciminator.js
var _40_ScProxyDisciminator = __webpack_require__(7170);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfStateOfScWindowProxy.js

class DefaultStateOfRoot {
    constructor() {
        this.DisciminatorFriendly = _40_ScProxyDisciminator/* ScProxyDisciminator */.K[_40_ScProxyDisciminator/* ScProxyDisciminator.Root */.K.Root];
        this.Disciminator = _40_ScProxyDisciminator/* ScProxyDisciminator.Root */.K.Root;
        this.Children = [];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfScUiProxy.js




class DefaultStateOfScUiProxy {
    constructor() {
        this.Friendly = new DefaultFriendly/* DefaultFriendly */.S();
        this.Meta = new DefaultMetaData/* DefaultMetaData */.S();
        this.ErrorStack = [];
        this.WindowState = new DefaultStateOfRoot();
        this.StorageSchema = '2020.10.09.20:19';
        this.Meta.TimeStamp = new Date();
        this.Friendly.TimeStamp = StaticHelpers/* StaticHelpers.MakeFriendlyDate */.y.MakeFriendlyDate(this.Meta.TimeStamp);
    }
}


/***/ }),

/***/ 9524:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "d": () => /* binding */ DefaultWindowStateTree
/* harmony export */ });
/* harmony import */ var _Enums_40_ScProxyDisciminator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7170);

class DefaultWindowStateTree {
    constructor() {
        this.DisciminatorFriendly = _Enums_40_ScProxyDisciminator__WEBPACK_IMPORTED_MODULE_0__/* .ScProxyDisciminator */ .K[_Enums_40_ScProxyDisciminator__WEBPACK_IMPORTED_MODULE_0__/* .ScProxyDisciminator.WindowStateTree */ .K.WindowStateTree];
        this.Disciminator = _Enums_40_ScProxyDisciminator__WEBPACK_IMPORTED_MODULE_0__/* .ScProxyDisciminator.WindowStateTree */ .K.WindowStateTree;
        this.Children = [];
    }
}


/***/ }),

/***/ 9741:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "e": () => /* binding */ ReadyStateNAB
});

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/SharedConst.js
var SharedConst = __webpack_require__(5077);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/_CommonCoreBase.js
var _CommonCoreBase = __webpack_require__(6679);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/ReadyState.js
var DocReadyState;
(function (DocReadyState) {
    DocReadyState[DocReadyState["ReadyStateUnknown"] = 0] = "ReadyStateUnknown";
    DocReadyState[DocReadyState["Complete"] = 1] = "Complete";
    DocReadyState[DocReadyState["Interactive"] = 2] = "Interactive";
    DocReadyState[DocReadyState["Loading"] = 3] = "Loading";
})(DocReadyState || (DocReadyState = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/ReadyStateNAB.js



class ReadyStateNAB extends _CommonCoreBase/* _CommonBase */.a {
    constructor(hindeCore, document) {
        super(hindeCore);
        this.IsExausted = '';
        this.ErrorHand.ThrowIfNullOrUndefined(ReadyStateNAB.name, document);
        this.Document = document;
    }
    LogDebugValues() {
        this.Logger.LogVal('IsCompleteNAB', this.IsCompleteNAB());
        this.Logger.LogVal('Ready State', this.DocumentReadtStateFriendly());
        this.Logger.LogVal('document.URL', this.DocUrl());
        this.Logger.LogVal('Is Exhausted', this.IsExausted.toString());
        this.Logger.LogVal('DocIsAboutBlank', this.DocIsAboutBlank().toString());
    }
    DocumentReadtStateFriendly() {
        return 'DocumentReadyState :' + DocReadyState[this.DocumentReadyState()];
    }
    DocIsAboutBlank() {
        return ((this.DocUrl() === SharedConst/* SharedConst.Const.UrlSuffix.AboutBlank */.v.Const.UrlSuffix.AboutBlank) || (this.DocUrl() === ''));
    }
    SetDocument(document) {
        this.ErrorHand.ThrowIfNullOrUndefined(this.SetDocument.name, document);
        this.Document = document;
    }
    IsCompleteNAB() {
        return this.DocumentReadyState() === DocReadyState.Complete && !(this.DocIsAboutBlank());
    }
    DocumentReadyState() {
        let toReturn = DocReadyState.ReadyStateUnknown;
        let currentReadyState = document.readyState.toString();
        if (currentReadyState === 'complete') {
            toReturn = DocReadyState.Complete;
        }
        else if (currentReadyState === 'interactive') {
            toReturn = DocReadyState.Interactive;
        }
        else if (currentReadyState === 'loading') {
            toReturn = DocReadyState.Loading;
        }
        return toReturn;
    }
    DocUrl() {
        return this.Document.URL;
    }
}


/***/ }),

/***/ 7170:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "K": () => /* binding */ ScProxyDisciminator
/* harmony export */ });
var ScProxyDisciminator;
(function (ScProxyDisciminator) {
    ScProxyDisciminator[ScProxyDisciminator["Unknown"] = 0] = "Unknown";
    ScProxyDisciminator[ScProxyDisciminator["AccessViewer"] = 40641679] = "AccessViewer";
    ScProxyDisciminator[ScProxyDisciminator["Archive"] = 40018831] = "Archive";
    ScProxyDisciminator[ScProxyDisciminator["CEFrame"] = 40708783] = "CEFrame";
    ScProxyDisciminator[ScProxyDisciminator["ContentEditor"] = 40805149] = "ContentEditor";
    ScProxyDisciminator[ScProxyDisciminator["Desktop"] = 40034160] = "Desktop";
    ScProxyDisciminator[ScProxyDisciminator["DomainManager"] = 40883841] = "DomainManager";
    ScProxyDisciminator[ScProxyDisciminator["DTArea"] = 40950793] = "DTArea";
    ScProxyDisciminator[ScProxyDisciminator["FrameProxy"] = 40071479] = "FrameProxy";
    ScProxyDisciminator[ScProxyDisciminator["EmailExperienceManager"] = 40597945] = "EmailExperienceManager";
    ScProxyDisciminator[ScProxyDisciminator["FallBack"] = 40949195] = "FallBack";
    ScProxyDisciminator[ScProxyDisciminator["Root"] = 40945013] = "Root";
    ScProxyDisciminator[ScProxyDisciminator["InstallationWizard"] = 40632864] = "InstallationWizard";
    ScProxyDisciminator[ScProxyDisciminator["InstalledLicenses"] = 40808841] = "InstalledLicenses";
    ScProxyDisciminator[ScProxyDisciminator["InstallerBuildPackageDocProxy"] = 40493480] = "InstallerBuildPackageDocProxy";
    ScProxyDisciminator[ScProxyDisciminator["InstallerBuildPackageFrameProxy"] = 40985241] = "InstallerBuildPackageFrameProxy";
    ScProxyDisciminator[ScProxyDisciminator["InstallerDesignerDocProxy"] = 40651221] = "InstallerDesignerDocProxy";
    ScProxyDisciminator[ScProxyDisciminator["JqueryModalDialogsDocProxy"] = 40307944] = "JqueryModalDialogsDocProxy";
    ScProxyDisciminator[ScProxyDisciminator["JqueryModalDialogsFrameProxy"] = 40077497] = "JqueryModalDialogsFrameProxy";
    ScProxyDisciminator[ScProxyDisciminator["KeyBoardMap"] = 40403688] = "KeyBoardMap";
    ScProxyDisciminator[ScProxyDisciminator["LaunchPad"] = 40676087] = "LaunchPad";
    ScProxyDisciminator[ScProxyDisciminator["LicenseDetails"] = 40873407] = "LicenseDetails";
    ScProxyDisciminator[ScProxyDisciminator["LogViewer"] = 40853367] = "LogViewer";
    ScProxyDisciminator[ScProxyDisciminator["MarketingControlPanel"] = 40404046] = "MarketingControlPanel";
    ScProxyDisciminator[ScProxyDisciminator["MediaLibrary"] = 40530411] = "MediaLibrary";
    ScProxyDisciminator[ScProxyDisciminator["PackageDesigner"] = 40598666] = "PackageDesigner";
    ScProxyDisciminator[ScProxyDisciminator["RecycleBin"] = 40453647] = "RecycleBin";
    ScProxyDisciminator[ScProxyDisciminator["RoleManager"] = 40572798] = "RoleManager";
    ScProxyDisciminator[ScProxyDisciminator["Run"] = 40143691] = "Run";
    ScProxyDisciminator[ScProxyDisciminator["ScanForBrokenLinks"] = 40825954] = "ScanForBrokenLinks";
    ScProxyDisciminator[ScProxyDisciminator["ScDocumentProxy"] = 40712530] = "ScDocumentProxy";
    ScProxyDisciminator[ScProxyDisciminator["SecurityEditor"] = 40314710] = "SecurityEditor";
    ScProxyDisciminator[ScProxyDisciminator["TemplateManager"] = 40992685] = "TemplateManager";
    ScProxyDisciminator[ScProxyDisciminator["UserManager"] = 40249854] = "UserManager";
    ScProxyDisciminator[ScProxyDisciminator["Workbox"] = 40855665] = "Workbox";
    ScProxyDisciminator[ScProxyDisciminator["AppToolsInstallerDesigner"] = 40521954] = "AppToolsInstallerDesigner";
    ScProxyDisciminator[ScProxyDisciminator["DTStartBarElem"] = 40028264] = "DTStartBarElem";
    ScProxyDisciminator[ScProxyDisciminator["PackageDesignerInstallerRibbonToolbarElemProxy"] = 40141250] = "PackageDesignerInstallerRibbonToolbarElemProxy";
    ScProxyDisciminator[ScProxyDisciminator["ContentTree"] = 40797680] = "ContentTree";
    ScProxyDisciminator[ScProxyDisciminator["DesktopStartBarButtonProxy"] = 40519977] = "DesktopStartBarButtonProxy";
    ScProxyDisciminator[ScProxyDisciminator["InstallerBrowseDocProxy"] = 40277719] = "InstallerBrowseDocProxy";
    ScProxyDisciminator[ScProxyDisciminator["InstallerBrowseFrameProxy"] = 40241408] = "InstallerBrowseFrameProxy";
    ScProxyDisciminator[ScProxyDisciminator["ContentTreeBased"] = 40522091] = "ContentTreeBased";
    ScProxyDisciminator[ScProxyDisciminator["ContentTreeNode"] = 40127505] = "ContentTreeNode";
    ScProxyDisciminator[ScProxyDisciminator["WindowStateTree"] = 40681870] = "WindowStateTree";
})(ScProxyDisciminator || (ScProxyDisciminator = {}));


/***/ }),

/***/ 2721:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "v": () => /* binding */ APICommandFlag
/* harmony export */ });
var APICommandFlag;
(function (APICommandFlag) {
    APICommandFlag[APICommandFlag["Unknown"] = 0] = "Unknown";
    APICommandFlag[APICommandFlag["PresentationDetails"] = 1] = "PresentationDetails";
    APICommandFlag[APICommandFlag["NavigateLinks"] = 2] = "NavigateLinks";
    APICommandFlag[APICommandFlag["ToggleRawValues"] = 3] = "ToggleRawValues";
    APICommandFlag[APICommandFlag["NavigateBack"] = 4] = "NavigateBack";
    APICommandFlag[APICommandFlag["NavigateForward"] = 5] = "NavigateForward";
    APICommandFlag[APICommandFlag["NavigateUp"] = 6] = "NavigateUp";
    APICommandFlag[APICommandFlag["GetStateOfScUiProxy"] = 7] = "GetStateOfScUiProxy";
    APICommandFlag[APICommandFlag["AddContentEditorToDesktopAsync"] = 8] = "AddContentEditorToDesktopAsync";
    APICommandFlag[APICommandFlag["PublischActiveCE"] = 9] = "PublischActiveCE";
    APICommandFlag[APICommandFlag["ToggleCompactCss"] = 10] = "ToggleCompactCss";
    APICommandFlag[APICommandFlag["CEGoSelected"] = 11] = "CEGoSelected";
    APICommandFlag[APICommandFlag["SetStateOfSitecoreWindowAsync"] = 12] = "SetStateOfSitecoreWindowAsync";
    APICommandFlag[APICommandFlag["OpenContentEditor"] = 13] = "OpenContentEditor";
    APICommandFlag[APICommandFlag["AdminB"] = 14] = "AdminB";
})(APICommandFlag || (APICommandFlag = {}));


/***/ }),

/***/ 6933:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "D": () => /* binding */ PromiseFailAction
/* harmony export */ });
var PromiseFailAction;
(function (PromiseFailAction) {
    PromiseFailAction[PromiseFailAction["Default"] = 0] = "Default";
    PromiseFailAction[PromiseFailAction["ResolveNull"] = 1] = "ResolveNull";
    PromiseFailAction[PromiseFailAction["RejectThrow"] = 2] = "RejectThrow";
})(PromiseFailAction || (PromiseFailAction = {}));


/***/ }),

/***/ 474:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": () => /* binding */ QueryStrKey
/* harmony export */ });
var QueryStrKey;
(function (QueryStrKey) {
    QueryStrKey[QueryStrKey["he"] = 0] = "he";
    QueryStrKey[QueryStrKey["hsTargetSs"] = 1] = "hsTargetSs";
    QueryStrKey[QueryStrKey["mo"] = 2] = "mo";
    QueryStrKey[QueryStrKey["sc_debug"] = 3] = "sc_debug";
    QueryStrKey[QueryStrKey["sc_itemid"] = 4] = "sc_itemid";
    QueryStrKey[QueryStrKey["sc_lang"] = 5] = "sc_lang";
    QueryStrKey[QueryStrKey["sc_mode"] = 6] = "sc_mode";
    QueryStrKey[QueryStrKey["sc_site"] = 7] = "sc_site";
    QueryStrKey[QueryStrKey["xmlcontrol"] = 8] = "xmlcontrol";
})(QueryStrKey || (QueryStrKey = {}));


/***/ }),

/***/ 3473:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "i": () => /* binding */ Guid
/* harmony export */ });
/* harmony import */ var _GuidData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2070);

class Guid {
    static NewRandomGuid() {
        let newGuid = new Guid();
        let randomStr = newGuid.GetRandomGuidString();
        let toReturn = new _GuidData__WEBPACK_IMPORTED_MODULE_0__/* .GuidData */ .k(randomStr);
        return toReturn;
    }
    static GetEmptyGuid() {
        return new _GuidData__WEBPACK_IMPORTED_MODULE_0__/* .GuidData */ .k();
    }
    static AsBracedGuid(guidData) {
        return '{' + guidData.Raw + "}";
    }
    static IsValidGuidStr(candidateStr) {
        let toReturn = false;
        let regexGuid = '^[\}]?[0-9a-f]{8}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{12}[\}]?$';
        let pattern = new RegExp(regexGuid, 'i');
        toReturn = pattern.test(candidateStr);
        return toReturn;
    }
    static AsShort(guidData) {
        var toReturn = '{error}';
        if (guidData) {
            if (this.IsValidGuidStr(guidData.Raw)) {
                toReturn = guidData.Raw.substr(0, Guid.ShortGuidLength);
            }
            else {
                toReturn = '{error - invalid guid string: ' + guidData.Raw + '}';
            }
        }
        return toReturn;
    }
    static WithoutDashes(guiddata) {
        let withoutDashes = guiddata.Raw.replace(/-/g, '');
        return withoutDashes;
    }
    static ParseGuid(val, throwOnError) {
        return new _GuidData__WEBPACK_IMPORTED_MODULE_0__/* .GuidData */ .k(val);
    }
    MakeNewRandomGuid() {
        let randomStr = this.GetRandomGuidString();
        return new _GuidData__WEBPACK_IMPORTED_MODULE_0__/* .GuidData */ .k(randomStr);
    }
    static GuidStrWithDashes(val) {
        let toReturn = '';
        let withoutDashes = val.replace(/-/g, '');
        var parts = [];
        if (withoutDashes.length !== 32) {
            throw (this.GuidStrWithDashes.name + ' - Wrong count wanted: ' + 32 + " got: " + withoutDashes.length + ' (without dashes) ' + withoutDashes);
        }
        parts.push(withoutDashes.slice(0, 8));
        parts.push(withoutDashes.slice(8, 12));
        parts.push(withoutDashes.slice(12, 16));
        parts.push(withoutDashes.slice(16, 20));
        parts.push(withoutDashes.slice(20, 32));
        toReturn = parts.join('-');
        return toReturn;
    }
    GetRandomGuidString() {
        var toReturn;
        var temp = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
        toReturn = temp.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0;
            var v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
        return toReturn;
    }
    MakeGuidFromString(val, throwOnError) {
        let toReturn = new _GuidData__WEBPACK_IMPORTED_MODULE_0__/* .GuidData */ .k(val);
        return toReturn;
    }
}
Guid.ShortGuidLength = 4;


/***/ }),

/***/ 2070:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "k": () => /* binding */ GuidData
/* harmony export */ });
/* harmony import */ var _Guid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3473);

class GuidData {
    constructor(raw = null) {
        if (!raw) {
            this.Raw = GuidData.ConstEmptyGuid;
        }
        else {
            if (_Guid__WEBPACK_IMPORTED_MODULE_0__/* .Guid.IsValidGuidStr */ .i.IsValidGuidStr(raw)) {
                this.Raw = _Guid__WEBPACK_IMPORTED_MODULE_0__/* .Guid.GuidStrWithDashes */ .i.GuidStrWithDashes(raw);
            }
            else {
                throw ('Invalid GUID string: ' + raw);
            }
        }
    }
}
GuidData.ConstEmptyGuid = '00000000-0000-0000-0000-000000000000';


/***/ }),

/***/ 8856:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "y": () => /* binding */ ContentConst
/* harmony export */ });
class ContentConst {
}
ContentConst.Const = {
    MaxAutoToSaveCount: 10,
    DefaultMaxAutoSaveAgeDays: 7,
    DefaultAutoRenameCeTabButton: false,
    DefaultShowDebuggingModules: false,
    Iterations: {
        MaxSetHrefEffort: 10,
        MaxIterationSwitchBoard: 20,
    },
    Timeouts: {
        PostLoginBtnClick: 1000,
        SetHrefEffortWait: 1000,
        WaitBeforeRemovingCompleteFlagOnContent: 1500,
        AutoSaveIntervalMin: 1,
    },
    ElemId: {
        SC: {
            PackageDesigner: {
                StatusText: 'StatusText',
            },
            scLoginPassword: 'Password',
            scLoginUserName: 'UserName',
            SitecoreRootAnchorNodeId: 'Tree_Node_11111111111111111111111111111111',
            SitecoreRootApparentIdRaw: '11111111111111111111111111111111',
            SitecoreRootGlyphId: 'Tree_Glyph_11111111111111111111111111111111',
            scLoginBtn: {
                sc920: 'LogInBtn',
                sc820: null
            },
        }
    },
    ClassNames: {
        SC: {
            ContentTreeNode: 'scContentTreeNode',
            scContentTreeNodeActive: 'scContentTreeNodeActive',
            scContentTreeNodeNormal: 'scContentTreeNodeNormal',
        }
    },
    Selector: {
        Html: {
            Body: 'body'
        },
        SC: {
            ContentTree: {
                ScContentTreeNodeGlyph: '.scContentTreeNodeGlyph',
                ScContentTreeNode: '.scContentTreeNode',
                ScContentTreeContainer: '.scContentTreeContainer',
                scContentTreeNodeIcon: '.scContentTreeNodeIcon',
                BuiltIn: {
                    TreeNodeSitecoreRoot: '[id=Tree_Node_11111111111111111111111111111111]',
                    MediaLibraryAnchorRootNode: '[id=Tree_Node_3D6658D8A0BF4E75B3E2D050FABCF4E1]',
                    MarketingControlPanelRoodNode: '[id=Tree_Node_33CFB9CAF5654D5BB88A7CDFE29A6D71]',
                    TemplatesAnchorRootNode: '[id=Tree_Node_3C1715FE6A134FCF845FDE308BA9741D]',
                    LayoutRootAnchorNode: '[id=Tree_Node_EB2E4FFD27614653B05226A64D385227]',
                    SystemRootAnchorNode: '[id=Tree_Node_13D6D6C6C50B4BBDB3312B04F1A58F21]',
                    ContentRootAnchorNode: '[id=Tree_Node_0DE95AE441AB4D019EB067441B7C2450]',
                }
            },
            InstallerDesigner: {
                GenerateZip: 'img[src$="folder_zip.png"]',
            },
            PackageDesigner: {
                Ribbon: {
                    InstallerRibbon_Nav_Package: '[id=InstallerRibbon_Nav_Package]',
                    InstallerRibbon_Toolbar: '[id=InstallerRibbon_Toolbar]',
                    Open: '[title="Open an existing project"]',
                },
            },
            IdStartsWithTreeNode: '[id^=Tree_Node_]',
            IframeContent: {
                sc820: null,
                sc920: 'iframe[src*=Content], iframe[src*=MediaShop]'
            },
            Frames: {
                ScContentIframeId0: {
                    Cancel: '[id=Cancel]',
                    Filename: '[id=Filename]',
                    Id: '[id=scContentIframeId0]',
                    Ok: '[id=OK]',
                    PackageFile: '[id=PackageFile]',
                },
                AppFrame: {
                    Id: '[id=AppFrame]',
                },
                JqueryModalDialogsFrame: {
                    Id: '[id=jqueryModalDialogsFrame]',
                },
                scContentIframeId1: {
                    Id: '[id=scContentIframeId1]',
                }
            },
            NextButton: '[id=NextButton]',
            Ok: '[id=OK]',
            Cancel: '[id=CancelButton]',
            ScRibbon: {
                Navigate: {
                    Id: '[id$="_Nav_NavigateStrip"]',
                    Links: 'img[src$="link.png"]',
                },
                View: {
                    Id: '[id$="_Nav_ViewStrip"]',
                    RawValues: '[id="Check_BBDED3F008D144C82A983B54F0424BBC1"]',
                    NavigateUp: 'img[src$="navigate_up.png"]',
                    NavigateForward: 'img[src$="navigate_right.png"]',
                    NavigateBack: 'img[src$="navigate_left.png"]',
                },
                Presentation: {
                    Id: '[id$="Nav_PresentationStrip"]',
                    Details: 'img[src$="layout_details.png"]',
                },
                Publish: {
                    MenuButtonPublish: '[id=B414550BADAF4542C9ADF44BED5FA6CB3E_menu_button]',
                    MenuDropDownPublishItem: '[id=B414550BADAF4542C9ADF44BED5FA6CB3E_menu_98719A90225A4802A0625D3967E4DD47]',
                    NavPublishStrip: '[id*=_Nav_PublishStrip]',
                    PublishingHidden: '[id=Publishing][style*=\'display: none\']',
                    SettingsHidden: '[id=Settings][style*=\'display: none\']',
                    TheItemHasBeenPublished: '[id=LastPage]:not([style*=\'display:none\'])',
                }
            },
            StartMenu: {
                Popup1: {
                    DevelopmentTools: '[src="/temp/iconcache/apps/24x24/magic-cube.png"]',
                    MediaLibrary: 'img[src$="pictures.png"]',
                    RecycleBin: 'img[src$="refresh.png"]',
                    StartMenuLeftOption: 'img[src$="pencil.png"]',
                    TemplateManager: 'img[src$="newspaper.png"]',
                    SecurityTools: 'img[src$="lock-2.png"]',
                    ReportingTools: 'img[src$="scripts.png"]',
                    AllApplications: '.scStartMenuProgramsMenuText',
                    Id: '[id=Popup1]',
                },
                Popup2: {
                    AccessViewer: 'img[src$="lock.png"]',
                    Archive: 'img[src$=".png"]',
                    DomainManager: 'img[src$="routes.png"]',
                    Id: '[id=Popup2]',
                    InstallationWizard: 'img[src$="install_wizard.png"]',
                    KeyboardMap: 'img[src$="keyboardmap.png"]',
                    LogViewer: 'img[src$="logviewer.png"]',
                    MarketingControlPanel: 'img[src$="object.png"]',
                    PackageDesigner: '[id=MenuItem211048689]',
                    PackageDesignerButton: 'img[src$="packager.png"]',
                    RoleManager: 'img[src$="account.png"]',
                    Run: 'img[src$="run.png"]',
                    ScanForBrokenLinks: 'img[src$="link_broken.png"]',
                    Security: 'img[src$="blank.gif"]:nth-child(2)',
                    SecurityEditor: 'img[src$="shield.png"]',
                    System: 'img[src$="blank.gif"]:nth-child(1)',
                    UserManager: 'img[src$="user (1).png"]',
                    Workbox: 'img[src$="workbox.png"]',
                },
                Popup3: {
                    Id: '[id=Popup3]',
                    InstalledLicenses: 'img[src$="certificate.png"]',
                    LicenseDetails: 'img[src$="informations.png"]',
                },
            },
            LoginBtn: {
                sc920: null,
                sc820: 'input.btn',
            },
            scStartButtonVSpec: {
                sc920: '[id=StartButton]',
                sc820: '[id=startButton]'
            },
            Desktop: {
                DtStartBar: '[id=Startbar]',
                ContentTreeHolder: '[id=ContentTreeHolder]',
                Id: '[id=Desktop]',
            },
        },
    },
    Storage: {
        SettingsSuffix: '.Settings',
        ShowDebugData: false,
        SnapShotPrefix: 'ScSnapShot.',
        WindowRoot: 'HindSite.',
        SessionKey: 'HindSite.SessionKey',
    },
    Numbers: {
        Desktop: {
            MaxToolBarNameChars: 13,
            TimeNewCEWaitForScOverlayToClearMs: 1500,
        }
    },
    MaxIter: 100,
    MaxNullOrUndefinedIter: 100,
    prop: {
        AllTreeData: 'AllTreeData',
    },
    Names: {
        SC: {
            TreeGlyphPrefix: 'Tree_Glyph_',
            TreeNodePrefix: 'Tree_Node_',
            TreeExpandedPng: {
                sc920: 'treemenu_expanded.png',
                sc820: 'todo'
            }
        },
        Desktop: {
            StartBarApplicationPrefix: 'startbar_application_',
        },
        PopUpUi: 'PopUpUi',
        PopUpUiStyles: 'PopUpUiStyles',
        TreeMenuExpandedPng: 'treemenu_expanded.png',
        TreeMenuCollapsedPng: 'treemenu_collapsed.png',
        scDefaultAdminPassword: 'b',
        scDefaultAdminUserName: 'admin',
    }
};


/***/ }),

/***/ 7266:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "V": () => /* binding */ BaseBrowserProxy
});

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Drones/IterationDrone/IterationDrone.js
var IterationDrone = __webpack_require__(442);
// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/_CommonCoreBase.js
var _CommonCoreBase = __webpack_require__(6679);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Proxies/Browser/BrowserTabProxy.js
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class BrowserTabProxy extends _CommonCoreBase/* _CommonBase */.a {
    constructor(commonCore, nativeBrowserTab) {
        super(commonCore);
        this.NativeBrowserTab = nativeBrowserTab;
    }
    Id() {
        return this.NativeBrowserTab.id;
    }
    url() {
        return this.NativeBrowserTab.url;
    }
    UpdateAndWaitForComplete(AbsUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                browser.tabs.update(this.NativeBrowserTab.id, { url: AbsUrl })
                    .then(() => this.TabWaitForReadyStateCompleteNative());
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([BrowserTabProxy.name, this.UpdateAndWaitForComplete.name], err);
            }
        });
    }
    TabWaitForReadyStateCompleteNative() {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let iterHelper = new IterationDrone/* IterationDrone */.v(this.CommonCore, this.TabWaitForReadyStateCompleteNative.name, true);
            while (this.NativeBrowserTab.status !== 'complete' && iterHelper.DecrementAndKeepGoing()) {
                this.Logger.LogVal('tab status', this.NativeBrowserTab.status);
                yield iterHelper.Wait;
            }
            if (this.NativeBrowserTab.status === 'complete') {
                resolve();
            }
            else {
                if (iterHelper.IsExhausted) {
                    reject(iterHelper.IsExhaustedMsg);
                }
                else {
                    reject(this.ErrorHand.FormatRejectMessage([BrowserTabProxy.name, this.TabWaitForReadyStateCompleteNative.name], 'unknown reason'));
                }
            }
        }));
    }
}

// EXTERNAL MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/70 - TypeDiscriminator.js
var _70_TypeDiscriminator = __webpack_require__(8162);
// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Proxies/Browser/_BaseBrowserProxy.js
var _BaseBrowserProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class BaseBrowserProxy extends _CommonCoreBase/* _CommonBase */.a {
    constructor(commonCore) {
        super(commonCore);
        this.TypeDiscriminator = _70_TypeDiscriminator/* TypeDiscriminator.BaseBrowserProxy */.g.BaseBrowserProxy;
        this.ActiveBrowserTabProxy = null;
    }
    UpdateAndWaitForComplete(browserTabProxy, AbsUrl) {
        return _BaseBrowserProxy_awaiter(this, void 0, void 0, function* () {
            try {
                yield browserTabProxy.UpdateAndWaitForComplete(AbsUrl)
                    .catch((err) => this.ErrorHand.HandleFatalError([BaseBrowserProxy.name, this.UpdateAndWaitForComplete.name], err));
            }
            catch (err) {
                this.ErrorHand.HandleFatalError([BaseBrowserProxy.name, this.UpdateAndWaitForComplete.name], err);
            }
        });
    }
    SetActiveBrowserTab() {
        return _BaseBrowserProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => _BaseBrowserProxy_awaiter(this, void 0, void 0, function* () {
                yield browser.tabs.query({ currentWindow: true, active: true })
                    .then((result) => {
                    this.Logger.Log('Tab result received');
                    let resultTab = result[0];
                    this.ActiveBrowserTabProxy = new BrowserTabProxy(this.CommonCore, resultTab);
                })
                    .then(() => resolve())
                    .catch((err) => reject(this.ErrorHand.FormatRejectMessage([BaseBrowserProxy.name, this.SetActiveBrowserTab.name], err)));
            }));
        });
    }
}


/***/ })

},
0,[[3062,54,407]]]);