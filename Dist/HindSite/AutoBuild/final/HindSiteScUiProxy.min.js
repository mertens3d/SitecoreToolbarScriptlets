/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "HindSiteScUiProxy", function() { return /* binding */ HindSiteScUiProxy_HindSiteScUiProxy; });

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/1xxx-MessageFlag.js
var MsgFlag;
(function (MsgFlag) {
    MsgFlag[MsgFlag["Unknown"] = 0] = "Unknown";
    MsgFlag[MsgFlag["GetAllStorageOneWindow"] = 1001] = "GetAllStorageOneWindow";
    MsgFlag[MsgFlag["NewWindowTest"] = 1002] = "NewWindowTest";
    MsgFlag[MsgFlag["Ping"] = 1003] = "Ping";
    MsgFlag[MsgFlag["ReqRemoveFromStorage"] = 1004] = "ReqRemoveFromStorage";
    MsgFlag[MsgFlag["ReqAddCETab"] = 1100] = "ReqAddCETab";
    MsgFlag[MsgFlag["ReqAdminB"] = 1101] = "ReqAdminB";
    MsgFlag[MsgFlag["ReqGoDesktop"] = 1102] = "ReqGoDesktop";
    MsgFlag[MsgFlag["ReqLoginWithAdminB"] = 1103] = "ReqLoginWithAdminB";
    MsgFlag[MsgFlag["ReqToggleFavorite"] = 1104] = "ReqToggleFavorite";
    MsgFlag[MsgFlag["ReqOpenCE"] = 1105] = "ReqOpenCE";
    MsgFlag[MsgFlag["ReqQuickPublish"] = 1106] = "ReqQuickPublish";
    MsgFlag[MsgFlag["ReqSetStateOfSitecoreSameWindow"] = 1107] = "ReqSetStateOfSitecoreSameWindow";
    MsgFlag[MsgFlag["Unused"] = 1108] = "Unused";
    MsgFlag[MsgFlag["ReqSetScModePreview"] = 1109] = "ReqSetScModePreview";
    MsgFlag[MsgFlag["ReqTakeSnapShot"] = 1110] = "ReqTakeSnapShot";
    MsgFlag[MsgFlag["ReqToggleCompactCss"] = 1111] = "ReqToggleCompactCss";
    MsgFlag[MsgFlag["ReqUpdateNickName"] = 1112] = "ReqUpdateNickName";
    MsgFlag[MsgFlag["RespCurState"] = 1200] = "RespCurState";
    MsgFlag[MsgFlag["RespTaskFailed"] = 1201] = "RespTaskFailed";
    MsgFlag[MsgFlag["RespListeningAndReady"] = 1202] = "RespListeningAndReady";
    MsgFlag[MsgFlag["_unused"] = 1203] = "_unused";
    MsgFlag[MsgFlag["RespTaskSuccessful"] = 1204] = "RespTaskSuccessful";
    MsgFlag[MsgFlag["RespTest"] = 1205] = "RespTest";
    MsgFlag[MsgFlag["RespNotReady"] = 1206] = "RespNotReady";
    MsgFlag[MsgFlag["ReqClosePopUpWindow"] = 1207] = "ReqClosePopUpWindow";
    MsgFlag[MsgFlag["ReqOpenPresentationDetails"] = 1208] = "ReqOpenPresentationDetails";
    MsgFlag[MsgFlag["CancelCommand"] = 1209] = "CancelCommand";
    MsgFlag[MsgFlag["ReqSetScModeNormal"] = 1210] = "ReqSetScModeNormal";
    MsgFlag[MsgFlag["ReqSetScModeEdit"] = 1211] = "ReqSetScModeEdit";
    MsgFlag[MsgFlag["ReqSetStateOfSitecoreNewWindow"] = 1212] = "ReqSetStateOfSitecoreNewWindow";
    MsgFlag[MsgFlag["RespFailedDidNotValidate"] = 1213] = "RespFailedDidNotValidate";
    MsgFlag[MsgFlag["ReqDebugAutoSnapShot"] = 1214] = "ReqDebugAutoSnapShot";
    MsgFlag[MsgFlag["ReqDebugTriggerReload"] = 1215] = "ReqDebugTriggerReload";
    MsgFlag[MsgFlag["ReqDebugClearConsole"] = 1216] = "ReqDebugClearConsole";
})(MsgFlag || (MsgFlag = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/scWindowType.js
var ScWindowType;
(function (ScWindowType) {
    ScWindowType[ScWindowType["Unknown"] = 0] = "Unknown";
    ScWindowType[ScWindowType["LoginPage"] = 1] = "LoginPage";
    ScWindowType[ScWindowType["Desktop"] = 2] = "Desktop";
    ScWindowType[ScWindowType["ContentEditor"] = 3] = "ContentEditor";
    ScWindowType[ScWindowType["Launchpad"] = 4] = "Launchpad";
    ScWindowType[ScWindowType["Edit"] = 5] = "Edit";
    ScWindowType[ScWindowType["Normal"] = 6] = "Normal";
    ScWindowType[ScWindowType["Preview"] = 7] = "Preview";
    ScWindowType[ScWindowType["MediaLibrary"] = 8] = "MediaLibrary";
    ScWindowType[ScWindowType["PackageDesigner"] = 9] = "PackageDesigner";
    ScWindowType[ScWindowType["InstallationWizard"] = 10] = "InstallationWizard";
})(ScWindowType || (ScWindowType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SnapShotFlavor.js
var SnapShotFlavor;
(function (SnapShotFlavor) {
    SnapShotFlavor[SnapShotFlavor["Unknown"] = 0] = "Unknown";
    SnapShotFlavor[SnapShotFlavor["Autosave"] = 1] = "Autosave";
    SnapShotFlavor[SnapShotFlavor["Favorite"] = 2] = "Favorite";
    SnapShotFlavor[SnapShotFlavor["Manual"] = 3] = "Manual";
    SnapShotFlavor[SnapShotFlavor["Live"] = 4] = "Live";
})(SnapShotFlavor || (SnapShotFlavor = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/3xxx-SettingKey.js
var SettingKey;
(function (SettingKey) {
    SettingKey[SettingKey["unknown"] = 0] = "unknown";
    SettingKey[SettingKey["AutoLogin"] = 3100] = "AutoLogin";
    SettingKey[SettingKey["__dead"] = 3101] = "__dead";
    SettingKey[SettingKey["DebugKeepDialogOpen"] = 3102] = "DebugKeepDialogOpen";
    SettingKey[SettingKey["AutoSaveIntervalMin"] = 3103] = "AutoSaveIntervalMin";
    SettingKey[SettingKey["UseCompactCss"] = 3104] = "UseCompactCss";
    SettingKey[SettingKey["AutoSaveRetainDays"] = 3105] = "AutoSaveRetainDays";
    SettingKey[SettingKey["AutoRenameCeButton"] = 3106] = "AutoRenameCeButton";
    SettingKey[SettingKey["MaxAutoSaveCount"] = 3200] = "MaxAutoSaveCount";
    SettingKey[SettingKey["EnableLogging"] = 3201] = "EnableLogging";
    SettingKey[SettingKey["LgndPopUpLog"] = 3300] = "LgndPopUpLog";
    SettingKey[SettingKey["LgndForeSite"] = 3301] = "LgndForeSite";
    SettingKey[SettingKey["LgndHindSite"] = 3302] = "LgndHindSite";
    SettingKey[SettingKey["LgndSettings"] = 3303] = "LgndSettings";
    SettingKey[SettingKey["LgndContentState"] = 3304] = "LgndContentState";
    SettingKey[SettingKey["_unused_"] = 3305] = "_unused_";
    SettingKey[SettingKey["LgndMessages"] = 3306] = "LgndMessages";
    SettingKey[SettingKey["LgndBrowserState"] = 3307] = "LgndBrowserState";
    SettingKey[SettingKey["LgndPopUpState"] = 3308] = "LgndPopUpState";
    SettingKey[SettingKey["LastUsedLogToStorageKey"] = 3400] = "LastUsedLogToStorageKey";
    SettingKey[SettingKey["AutoSnapshotBeforeWindowChange"] = 3401] = "AutoSnapshotBeforeWindowChange";
    SettingKey[SettingKey["LgndPopUpDebug"] = 3402] = "LgndPopUpDebug";
})(SettingKey || (SettingKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferChar.js
var BufferChar;
(function (BufferChar) {
    BufferChar[BufferChar["space"] = 0] = "space";
    BufferChar[BufferChar["Nbsp"] = 1] = "Nbsp";
    BufferChar[BufferChar["Period"] = 2] = "Period";
    BufferChar[BufferChar["Zero"] = 3] = "Zero";
})(BufferChar || (BufferChar = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferDirection.js
var BufferDirection;
(function (BufferDirection) {
    BufferDirection[BufferDirection["left"] = 0] = "left";
    BufferDirection[BufferDirection["right"] = 1] = "right";
})(BufferDirection || (BufferDirection = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/StaticHelpers.js






class StaticHelpers_StaticHelpers {
    static MinToMs(minutes) {
        return minutes * 60 * 1000;
    }
    static FlavorAsString(flavor) {
        return 'Flavor.' + SnapShotFlavor[flavor] + '(' + flavor + ')';
    }
    static SettingKeyAsString(settingKey) {
        let toReturn = '';
        try {
            toReturn = 'SettingKey.' + SettingKey[settingKey] + '(' + settingKey + ')';
        }
        catch (err) {
            toReturn = err;
        }
        return toReturn;
    }
    static ScWindowTypeFriendly(windowType) {
        return ScWindowType[windowType];
    }
    static MakeFriendlyDate(date) {
        var toReturn = '';
        var workingDate = new Date(date);
        if (workingDate) {
            var month = StaticHelpers_StaticHelpers.BufferString((workingDate.getMonth() + 1).toString(), 2, BufferChar.Zero, BufferDirection.left);
            var day = StaticHelpers_StaticHelpers.BufferString(workingDate.getDate().toString(), 2, BufferChar.Zero, BufferDirection.left);
            var min = StaticHelpers_StaticHelpers.BufferString(workingDate.getMinutes().toString(), 2, BufferChar.Zero, BufferDirection.left);
            var hoursRaw = workingDate.getHours();
            var hourClean = hoursRaw ? hoursRaw : 12;
            var hourCleanStr = StaticHelpers_StaticHelpers.BufferString(hourClean.toString(), 2, BufferChar.Zero, BufferDirection.left);
            toReturn = month + '.' + day + ' ' + hourCleanStr + ':' + min;
        }
        else {
            toReturn = '{error}';
            throw (this.MakeFriendlyDate.name, 'no date provided');
        }
        return toReturn;
    }
    static IsNullOrUndefined(testSubject) {
        let toReturn = false;
        try {
            if (testSubject instanceof Array) {
                testSubject.forEach((testSubject) => toReturn = toReturn || this.IsNullOrUndefined(testSubject));
            }
            else {
                toReturn = (typeof testSubject === 'undefined' || testSubject === null);
            }
        }
        catch (err) {
            console.log(err);
        }
        return toReturn;
    }
    static getBuffChar(buffCharEnum) {
        var buffChar = ' ';
        if (buffCharEnum === BufferChar.space) {
            buffChar = ' ';
        }
        else if (buffCharEnum === BufferChar.Nbsp) {
            buffChar = '&nbsp;';
        }
        else if (buffCharEnum === BufferChar.Period) {
            buffChar = '.';
        }
        else if (buffCharEnum === BufferChar.Zero) {
            buffChar = '0';
        }
        return buffChar;
    }
    static BufferString(str, desiredLength, buffCharEnum, direction) {
        var toReturn = str;
        var buffChar = this.getBuffChar(buffCharEnum);
        if (toReturn.length > desiredLength) {
            if (desiredLength > 6) {
                toReturn = toReturn.substring(0, desiredLength - 3) + '...';
            }
            else {
                toReturn = toReturn.substring(0, desiredLength);
            }
        }
        if (toReturn.length < desiredLength) {
            var bufferCharNeeded = desiredLength - toReturn.length;
            for (var idx = 0; idx < bufferCharNeeded; idx++) {
                if (direction === BufferDirection.left) {
                    toReturn = buffChar + toReturn;
                }
                else {
                    toReturn = toReturn + buffChar;
                }
            }
        }
        return toReturn;
    }
    static MsgFlagAsString(msg) {
        var toReturn = "{error}";
        if (msg) {
            try {
                toReturn = 'MsgFlag.' + MsgFlag[msg] + '(' + msg + ')';
            }
            catch (err) {
                console.log(this.MsgFlagAsString.name + ' ' + err);
            }
        }
        return 'flag: ' + toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfDesktop.js
class DefaultStateOfDesktop {
    constructor() {
        this.IndexOfActiveFrame = -1;
        this.StateOfDTFrames = [];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/SharedConst.js
let SharedConst = (() => {
    class SharedConst {
    }
    SharedConst.Const = {
        Debug: {
            ForceLoggingEnabled: false,
            SpeedUpAutoSaveIntervalFactor: 3,
        },
        IterHelper: {
            GrowthPerIteration: 0.5,
            MaxCount: {
                Default: 10,
                OverridePublishing: 15,
            },
            Timeouts: {
                Max: 10000,
                Default: 100,
            },
        },
        KeyWords: {
            Html: {
                beforeend: 'beforeend',
                optgroup: 'optgroup',
                Checkbox: 'checkbox',
                Checked: 'checked',
                Input: 'input',
                Label: 'label',
                For: 'for',
                Text: 'text',
                Number: 'number',
            },
            Javascript: {
                ReadyStates: {
                    Complete: "complete"
                }
            }
        },
        Logger: {
            MinTimeDiffMs: 100
        },
        ObjDiscriminator: {},
        Settings: {
            Defaults: {
                EnableLogging: false,
                LogToStorage: false,
                UseCompactCss: false,
                LastUsedLogToStorageKey: 0
            }
        },
        Regex: {
            ContentEditor: /Content.*?Editor/ig,
            CleanGuid: /{|-|}/ig,
            NbSp: /&nbsp;/ig,
            QueryStrSeparatorQuest: /\?/gi,
            PageType: {
                Desktop: /.*default.aspx/ig,
                Edit: /sc_itemid=.*sc_mode=edit/ig,
                Normal: /sc_itemid=.*sc_mode=normal/ig,
                Preview: /sc_itemid=.*sc_mode=preview/ig,
            },
        },
        UrlSuffix: {
            Desktop: '/sitecore/shell/default.aspx',
            Login: '/sitecore/login',
            LaunchPad: '/client/applications/launchpad',
            CE: '/sitecore/shell/Applications/Content Editor.aspx?sc_bw=1',
            None: '/',
            AboutBlank: 'about:blank',
        },
    };
    return SharedConst;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/GuidData.js


let GuidData_GuidData = (() => {
    class GuidData {
        constructor(raw = null) {
            if (!raw) {
                this.Raw = GuidData.ConstEmptyGuid;
            }
            else {
                if (Guid_Guid.IsValidGuidStr(raw)) {
                    this.Raw = Guid_Guid.GuidStrWithDashes(raw);
                }
                else {
                    throw ('Invalid GUID string: ' + raw);
                }
            }
        }
        AsBracedGuid() {
            return '{' + this.Raw + "}";
        }
        static GetEmptyGuid() {
            return new GuidData();
        }
        FormatJustNumbers(str) {
            return str.replace(SharedConst.Const.Regex.CleanGuid, '');
        }
    }
    GuidData.ConstEmptyGuid = '00000000-0000-0000-0000-000000000000';
    return GuidData;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/Guid.js

let Guid_Guid = (() => {
    class Guid {
        static NewRandomGuid() {
            let guidData = new GuidData_GuidData();
            let newGuid = new Guid();
            let randomStr = newGuid.GetRandomGuidString();
            let toReturn = new GuidData_GuidData(randomStr);
            return toReturn;
        }
        static IsValidGuidStr(candidateStr) {
            let toReturn = false;
            let regexGuid = '^[\}]?[0-9a-f]{8}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{12}[\}]?$';
            let pattern = new RegExp(regexGuid, 'i');
            toReturn = pattern.test(candidateStr);
            return toReturn;
        }
        static AsShort(guidData) {
            var toReturn = '{error}';
            if (guidData) {
                toReturn = guidData.Raw.substr(0, Guid.ShortGuidLength);
            }
            return toReturn;
        }
        static WithoutDashes(guiddata) {
            let withoutDashes = guiddata.Raw.replace(/-/g, '');
            return withoutDashes;
        }
        static ParseGuid(val, throwOnError) {
            return new GuidData_GuidData(val);
        }
        MakeNewRandomGuid() {
            let randomStr = this.GetRandomGuidString();
            return new GuidData_GuidData(randomStr);
        }
        static GuidStrWithDashes(val) {
            let toReturn = '';
            let withoutDashes = val.replace(/-/g, '');
            var parts = [];
            if (withoutDashes.length !== 32) {
                throw (this.GuidStrWithDashes.name + ' - Wrong count wanted: ' + 32 + " got: " + withoutDashes.length + ' (without dashes) ' + withoutDashes);
            }
            parts.push(withoutDashes.slice(0, 8));
            parts.push(withoutDashes.slice(8, 12));
            parts.push(withoutDashes.slice(12, 16));
            parts.push(withoutDashes.slice(16, 20));
            parts.push(withoutDashes.slice(20, 32));
            toReturn = parts.join('-');
            return toReturn;
        }
        GetRandomGuidString() {
            var toReturn;
            var temp = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
            toReturn = temp.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0;
                var v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
            return toReturn;
        }
        MakeGuidFromString(val, throwOnError) {
            let toReturn = new GuidData_GuidData(val);
            return toReturn;
        }
    }
    Guid.ShortGuidLength = 4;
    return Guid;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfContentEditor.js
class DefaultStateOfContentEditor {
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfSitecoreWindow.js






class DefaultStateOfSitecoreWindow_DefaultFriendly {
    constructor() {
        this.Flavor = SnapShotFlavor[SnapShotFlavor.Live];
        this.NickName = '';
        this.TimeStamp = '';
        this.WindowType = ScWindowType[ScWindowType.Unknown];
    }
}
class DefaultStateOfSitecoreWindow_DefaultMetaData {
    constructor() {
        this.Flavor = SnapShotFlavor.Live;
        this.SessionId = '';
        this.SnapshotId = Guid_Guid.NewRandomGuid();
        this.StorageKey = '';
        this.TimeStamp = null;
        this.WindowType = ScWindowType.Unknown;
    }
}
class DefaultStateOfSitecoreWindow_DefaultScWindowStates {
    constructor() {
        this.StateOfContentEditor = new DefaultStateOfContentEditor;
        this.StateOfDesktop = new DefaultStateOfDesktop();
    }
}
class DefaultStateOfSitecoreWindow_DefaultStateOfSitecoreWindow {
    constructor() {
        this.Friendly = new DefaultStateOfSitecoreWindow_DefaultFriendly();
        this.Meta = new DefaultStateOfSitecoreWindow_DefaultMetaData();
        this.ScWindowStates = new DefaultStateOfSitecoreWindow_DefaultScWindowStates();
        this.Meta.TimeStamp = new Date();
        this.Friendly.TimeStamp = StaticHelpers_StaticHelpers.MakeFriendlyDate(this.Meta.TimeStamp);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfSnapshots.js
class DefaultStateOfSnapshotStorage {
    constructor() {
        this.CreationDate = new Date(1970);
        this.SnapShots = [];
        this.FavoriteCount = 0;
        this.PlainCount = 0;
        this.SnapShotsAutoCount = 0;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultScWindowState.js



class DefaultScWindowState_DefaultContentReplyPayload {
    constructor() {
        this.ErrorStack = [];
        this.LastReq = MsgFlag.Unknown;
        this.LastReqFriendly = MsgFlag[MsgFlag.Unknown];
        this.LastReqSuccessful = false;
        this.StateOfSitecoreWindow = new DefaultStateOfSitecoreWindow_DefaultStateOfSitecoreWindow();
        this.StateOfStorageSnapShots = new DefaultStateOfSnapshotStorage();
    }
}
;

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Managers/LoggableBase.js
class LoggableBase {
    constructor(logger) {
        this.Logger = logger;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/_BaseFrameProxy.js



class _BaseFrameProxy_BaseFrameProxy extends LoggableBase {
    constructor(logger, iframeElem) {
        super(logger);
        this.Index = -1;
        this.HTMLIframeElement = null;
        this.Id = null;
        this.Discriminator = _BaseFrameProxy_BaseFrameProxy.name;
        this.HTMLIframeElement = iframeElem;
        this.Id = Guid_Guid.NewRandomGuid();
    }
    GetZindex() {
        let toReturn = -99;
        if (this.HTMLIframeElement && this.HTMLIframeElement.style && this.HTMLIframeElement.style.zIndex) {
            toReturn = parseInt(this.HTMLIframeElement.style.zIndex);
        }
        return toReturn;
    }
    GetContentDoc() {
        return new FactoryHelper_FactoryHelper(this.Logger).DataOneContentDocFactoryFromIframe(this);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfFrame.js


class DefaultStateOfFrame_DefaultStateOfFrame {
    constructor() {
        this.StateOfContentEditor = new DefaultStateOfContentEditor();
        this.StorageId = Guid_Guid.NewRandomGuid();
        this.Styling = null;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/InjectConst.js
let ContentConst = (() => {
    class ContentConst {
    }
    ContentConst.Const = {
        MaxAutoToSaveCount: 10,
        DefaultMaxAutoSaveAgeDays: 7,
        DefaultAutoRenameCeTabButton: false,
        Iterations: {
            MaxSetHrefEffort: 10,
            MaxIterationSwitchBoard: 20,
        },
        Timeouts: {
            PostLoginBtnClick: 1000,
            SetHrefEffortWait: 1000,
            WaitBeforeRemovingCompleteFlagOnContent: 1500,
            AutoSaveIntervalMin: 1,
        },
        ElemId: {
            sc: {
                scLoginPassword: 'Password',
                scLoginUserName: 'UserName',
                SitecoreRootAnchorNodeId: 'Tree_Node_11111111111111111111111111111111',
                SitecoreRootApparentIdRaw: '11111111111111111111111111111111',
                SitecoreRootGlyphId: 'Tree_Glyph_11111111111111111111111111111111',
                scLoginBtn: {
                    sc920: 'LogInBtn',
                    sc820: null
                },
            }
        },
        ClassNames: {
            SC: {
                ContentTreeNode: 'scContentTreeNode',
                scContentTreeNodeActive: 'scContentTreeNodeActive',
            }
        },
        Selector: {
            SC: {
                ContentEditor: {
                    ContentTreeNodeGlyph: '.scContentTreeNodeGlyph',
                    RootAnchorNode: '[id=Tree_Node_11111111111111111111111111111111]',
                    ScContentTreeContainer: '.scContentTreeContainer',
                    scContentTreeNodeIcon: '.scContentTreeNodeIcon',
                },
                Level2Nodes: {
                    MediaLibraryAnchorRootNode: '[id=Tree_Node_3D6658D8A0BF4E75B3E2D050FABCF4E1]',
                    TemplatesAnchorRootNode: '[id=Tree_Node_3C1715FE6A134FCF845FDE308BA9741D]',
                    LayoutRootAnchorNode: '[id=Tree_Node_EB2E4FFD27614653B05226A64D385227]',
                    SystemRootAnchorNode: '[id=Tree_Node_13D6D6C6C50B4BBDB3312B04F1A58F21]',
                    ContentRootAnchorNode: '[id=Tree_Node_0DE95AE441AB4D019EB067441B7C2450]',
                },
                IdStartsWithTreeNode: '[id^=Tree_Node_]',
                IframeContent: {
                    sc820: null,
                    sc920: 'iframe[src*=Content], iframe[src*=MediaShop]'
                },
                JqueryModalDialogsFrame: '[id=jqueryModalDialogsFrame]',
                ContentIframe0: '[id=scContentIframeId0]',
                NextButton: '[id=NextButton]',
                ContentIFrame1: '[id=scContentIframeId1]',
                Ok: '[id=OK]',
                Cancel: '[id=CancelButton]',
                MenuButtonPublish: '[id=B414550BADAF4542C9ADF44BED5FA6CB3E_menu_button]',
                MenuDropDownPublishItem: '[id=B414550BADAF4542C9ADF44BED5FA6CB3E_menu_98719A90225A4802A0625D3967E4DD47]',
                NavPublishStrip: '[id*=_Nav_PublishStrip]',
                StartMenuLeftOption: '.scStartMenuLeftOption',
                Publish: {
                    TheItemHasBeenPublished: '[id=LastPage]:not([style*=\'display:none\'])',
                    SettingsHidden: '[id=Settings][style*=\'display: none\']',
                    PublishingHidden: '[id=Publishing][style*=\'display: none\']',
                },
                LoginBtn: {
                    sc920: null,
                    sc820: 'input.btn',
                },
                scStartButton: {
                    sc920: '[id=StartButton]',
                    sc820: '[id=startButton]'
                },
                Desktop: {
                    DtStartBar: '[id=Startbar]',
                    ContentTreeHolder: '[id=ContentTreeHolder]',
                },
            },
        },
        Storage: {
            SettingsSuffix: '.Settings',
            ShowDebugData: false,
            SnapShotPrefix: 'ScSnapShot.',
            WindowRoot: 'HindSite.',
            SessionKey: 'HindSite.SessionKey',
        },
        Numbers: {
            Desktop: {
                MaxToolBarNameChars: 13
            }
        },
        MaxIter: 100,
        MaxNullOrUndefinedIter: 100,
        prop: {
            AllTreeData: 'AllTreeData',
        },
        Names: {
            SC: {
                TreeGlyphPrefix: 'Tree_Glyph_',
                TreeNodePrefix: 'Tree_Node_',
                TreeExpandedPng: {
                    sc920: 'treemenu_expanded.png',
                    sc820: 'todo'
                }
            },
            Desktop: {
                StartBarApplicationPrefix: 'startbar_application_',
            },
            PopUpUi: 'PopUpUi',
            PopUpUiStyles: 'PopUpUiStyles',
            TreeMenuExpandedPng: 'treemenu_expanded.png',
            TreeMenuCollapsedPng: 'treemenu_collapsed.png',
            scDefaultAdminPassword: 'b',
            scDefaultAdminUserName: 'admin',
        }
    };
    return ContentConst;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Helpers/FrameHelper.js
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class FrameHelper_FrameHelper extends LoggableBase {
    constructor(logger) {
        super(logger);
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.Logger);
        this.factoryHelper = new FactoryHelper_FactoryHelper(this.Logger);
    }
    GetIFramesFromDataOneDoc(targetDoc) {
        let toReturnIframeAr = [];
        var queryResults = targetDoc.ContentDoc.querySelectorAll(ContentConst.Const.Selector.SC.IframeContent.sc920);
        if (!queryResults) {
            queryResults = targetDoc.ContentDoc.querySelectorAll(ContentConst.Const.Selector.SC.IframeContent.sc820);
        }
        if (queryResults) {
            for (var ifrIdx = 0; ifrIdx < queryResults.length; ifrIdx++) {
                var iframeElem = queryResults[ifrIdx];
                if (iframeElem) {
                    toReturnIframeAr.push(iframeElem);
                }
            }
        }
        this.Logger.LogVal('found iframes count', toReturnIframeAr.length);
        return toReturnIframeAr;
    }
    GetIFrameAsBaseFrameProxy(iframeElem, ifrIdx) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                yield this.RecipeBasics.WaitForReadyNABHtmlIframeElement(iframeElem)
                    .then(() => this.factoryHelper.BaseFramePromiseFactory(iframeElem, 'desktop Iframe_' + ifrIdx))
                    .then((result) => resolve(result))
                    .catch((err) => reject(this.GetIFramesAsBaseFrameProxies.name + ' | ' + err));
            }));
        });
    }
    GetIFrameAsDTFrameProxy(iframeElem) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                yield this.RecipeBasics.WaitForReadyNABHtmlIframeElement(iframeElem)
                    .then(() => this.factoryHelper.DTFrameProxyFactory(iframeElem))
                    .then((result) => resolve(result))
                    .catch((err) => reject(this.GetIFramesAsBaseFrameProxies.name + ' | ' + err));
            }));
        });
    }
    GetIFramesAsDTFrameProxies(dataOneDoc) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.Logger.FuncStart(this.GetIFramesAsBaseFrameProxies.name);
                var toReturn = [];
                let iframeAr = this.GetIFramesFromDataOneDoc(dataOneDoc);
                let promiseAr = [];
                iframeAr.forEach((iframeElem) => {
                    promiseAr.push(this.GetIFrameAsDTFrameProxy(iframeElem));
                });
                Promise.all(promiseAr)
                    .then((values) => {
                    values.forEach((oneVal) => {
                        toReturn.push(oneVal);
                    });
                    this.Logger.LogVal('count: ', toReturn.length);
                })
                    .then(() => resolve(toReturn))
                    .catch((err) => reject(this.GetIFramesAsBaseFrameProxies.name + ' | ' + err));
                this.Logger.FuncEnd(this.GetIFramesAsBaseFrameProxies.name);
            });
        });
    }
    GetIFramesAsBaseFrameProxies(targetDoc) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.Logger.FuncStart(this.GetIFramesAsBaseFrameProxies.name);
                var toReturn = [];
                let iframeAr = this.GetIFramesFromDataOneDoc(targetDoc);
                let promAr = [];
                iframeAr.forEach((iframeElem, index) => {
                    promAr.push(this.GetIFrameAsBaseFrameProxy(iframeElem, index));
                });
                Promise.all(promAr)
                    .then((values) => {
                    values.forEach((oneVal) => {
                        toReturn.push(oneVal);
                    });
                    this.Logger.LogVal('count: ', toReturn.length);
                })
                    .then(() => resolve(toReturn))
                    .catch((err) => reject(this.GetIFramesAsBaseFrameProxies.name + ' | ' + err));
                this.Logger.FuncEnd(this.GetIFramesAsBaseFrameProxies.name);
            });
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Drones/IterationDrone/IterationDrone.js

class IterationDrone_IterationDrone {
    constructor(logger, nickname, logThisDroneInstance, maxIterations = null) {
        this.IsExhaustedMsg = 'Iteration helper exhausted';
        this.Logger = logger;
        this.LogThisDroneInstance = logThisDroneInstance;
        if (!maxIterations) {
            maxIterations = SharedConst.Const.IterHelper.MaxCount.Default;
        }
        this.MaxIterations = maxIterations;
        this.CurrentIteration = maxIterations;
        this.Timeout = SharedConst.Const.IterHelper.Timeouts.Default;
        this.NickName = nickname;
        this.IsExhausted = false;
    }
    DecrementAndKeepGoing() {
        var toReturn = false;
        if (this.CurrentIteration > 0) {
            this.CurrentIteration -= 1;
            this.Timeout += this.Timeout * SharedConst.Const.IterHelper.GrowthPerIteration;
            if (this.Timeout > SharedConst.Const.IterHelper.Timeouts.Max) {
                this.Timeout = SharedConst.Const.IterHelper.Timeouts.Max;
            }
            if (this.LogThisDroneInstance) {
                this.Logger.Log('DecrementAndKeepGoing: ' + this.NickName + ' ' + this.CurrentIteration + ':' + this.MaxIterations + ' | timeout: ' + this.Timeout);
            }
            toReturn = true;
        }
        else {
            this.IsExhausted = true;
            this.NotifyExhausted();
            toReturn = false;
        }
        return toReturn;
    }
    CurrentTimeout() {
        return this.Timeout;
    }
    NotifyExhausted() {
        if (this.LogThisDroneInstance) {
            this.Logger.Log('Iteration: ' + this.NickName + ' counter exhausted ' + this.CurrentIteration + ':' + this.MaxIterations);
        }
    }
    WaitAndThen(timeoutFunction) {
        if (this.LogThisDroneInstance) {
            this.Logger.FuncStart(this.WaitAndThen.name, this.NickName + ' ' + timeoutFunction.name);
        }
        var self = this;
        setTimeout(timeoutFunction(), self.Timeout);
        if (this.LogThisDroneInstance) {
            this.Logger.FuncEnd(this.WaitAndThen.name, this.NickName);
        }
    }
    Wait() {
        if (!this.OperationCancelled) {
            return new Promise((resolve) => {
                setTimeout(resolve, this.Timeout);
            });
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/PromiseResult.js
class PromiseResult {
    constructor(nickname, logger) {
        this.prefix = 'Promise Successful? -> ';
        this.Success = false;
        this.NickName = nickname;
        this.Log = logger;
    }
    WasSuccessful() {
        return this.Success;
    }
    MarkSuccessful() {
        this.Success = true;
        if (this.Log) {
            this.Log.LogVal(this.prefix + this.NickName, this.Success);
        }
        else {
            console.log('no logger success');
        }
    }
    MarkFailed(ex) {
        if (ex) {
            ex = ex.toString();
        }
        else {
            ex = '{no fail message}';
        }
        this.RejectReasons += ', ' + ex;
        this.Success = false;
        if (this.Log) {
            this.Log.ErrorAndThrow(this.prefix + this.NickName, this.Success + '  err: ' + ex);
        }
        else {
            console.log('no logger fail ' + ex);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/RecipeBasics.js
var RecipeBasics_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class RecipeBasics_RecipeBasics extends LoggableBase {
    constructor(logger) {
        super(logger);
    }
    WaitForReadyNABFrameProxy(baseframeProxy) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForReadyNABFrameProxy.name, Guid_Guid.AsShort(baseframeProxy.Id));
                yield this.WaitForReadyNABHtmlIframeElement(baseframeProxy.HTMLIframeElement)
                    .then(() => resolve(baseframeProxy))
                    .catch((err) => reject(this.WaitForReadyNABFrameProxy.name + ' | ' + err));
                this.Logger.FuncEnd(this.WaitForReadyNABFrameProxy.name);
            }));
        });
    }
    IsDocumentReadyNAB(document) {
        let toReturn = false;
        if (document) {
            let currentReadyState = document.readyState.toString();
            let isReadyStateComplete = currentReadyState === 'complete';
            let url = document.URL;
            if (isReadyStateComplete && url !== SharedConst.Const.UrlSuffix.AboutBlank && url != '') {
                toReturn = true;
            }
        }
        return toReturn;
    }
    WaitForReadyNABHtmlIframeElement(targetIframe) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForReadyNABHtmlIframeElement.name);
                if (targetIframe) {
                    var iterationJr = new IterationDrone_IterationDrone(this.Logger, this.WaitForReadyNABDocument.name, false);
                    var isReady = false;
                    let currentReadyState;
                    while (iterationJr.DecrementAndKeepGoing() && !isReady) {
                        currentReadyState = targetIframe.contentDocument.readyState.toString();
                        isReady = this.IsDocumentReadyNAB(targetIframe.contentDocument);
                        if (isReady) {
                            break;
                        }
                        else {
                            yield iterationJr.Wait();
                        }
                    }
                    if (isReady) {
                        resolve();
                    }
                    if (iterationJr.IsExhausted) {
                        reject(iterationJr.IsExhaustedMsg);
                    }
                }
                else {
                    this.Logger.ErrorAndThrow(this.WaitForReadyNABHtmlIframeElement.name, 'No target doc');
                }
                this.Logger.FuncEnd(this.WaitForReadyNABHtmlIframeElement.name);
                ;
            }));
        });
    }
    WaitForReadyNABDocument(targetDoc) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                if (targetDoc) {
                    var iterationJr = new IterationDrone_IterationDrone(this.Logger, this.WaitForReadyNABDocument.name, false);
                    var isReady = false;
                    while (iterationJr.DecrementAndKeepGoing() && !isReady) {
                        isReady = this.IsDocumentReadyNAB(targetDoc.ContentDoc);
                        if (isReady) {
                            break;
                        }
                        else {
                            yield iterationJr.Wait();
                        }
                    }
                    if (isReady) {
                        resolve();
                    }
                    if (iterationJr.IsExhausted) {
                        reject(iterationJr.IsExhaustedMsg);
                    }
                }
                else {
                    this.Logger.ErrorAndThrow(this.WaitForReadyNABDocument.name, 'No target doc');
                }
            }));
        });
    }
    GetTopLevelIframe(targetDoc) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            var toReturn = null;
            let frameHelper = new FrameHelper_FrameHelper(this.Logger);
            yield frameHelper.GetIFramesAsBaseFrameProxies(targetDoc)
                .then((allIframe) => {
                var maxZVal = -1;
                if (allIframe && allIframe.length > 0) {
                    for (var idx = 0; idx < allIframe.length; idx++) {
                        var candidateIframe = allIframe[idx];
                        if (candidateIframe && candidateIframe.GetZindex() > maxZVal) {
                            toReturn = candidateIframe;
                            maxZVal = candidateIframe.GetZindex();
                        }
                    }
                }
            });
            return toReturn;
        });
    }
    WaitForIframeElemAndReturnWhenReady(haystackDoc, selector, iframeNickName) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForIframeElemAndReturnWhenReady.name);
                let factoryHelp = new FactoryHelper_FactoryHelper(this.Logger);
                yield this.WaitForAndReturnFoundElem(haystackDoc, selector)
                    .then((foundElem) => RecipeBasics_awaiter(this, void 0, void 0, function* () { return yield factoryHelp.BaseFramePromiseFactory(foundElem, iframeNickName); }))
                    .then((result) => this.WaitForReadyNABFrameProxy(result))
                    .then((result) => resolve(result))
                    .catch((err) => reject(err));
                this.Logger.FuncEnd(this.WaitForIframeElemAndReturnWhenReady.name);
            }));
        });
    }
    WaitForNewIframeContentEditor(allIframesBefore, targetDoc) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForNewIframe.name);
                let toReturn = null;
                yield this.WaitForNewIframeNative(allIframesBefore, targetDoc)
                    .then((result) => {
                    toReturn = new DTFrameProxy_DTFrameProxy(this.Logger, result);
                })
                    .then(() => resolve(toReturn))
                    .catch((err) => reject(this.WaitForNewIframeContentEditor.name + ' | ' + err));
                this.Logger.FuncEnd(this.WaitForNewIframe.name);
            }));
        });
    }
    WaitForNewIframeNative(allIframesBefore, dateOneDoc) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForNewIframeNative.name);
                this.Logger.ThrowIfNullOrUndefined(this.WaitForNewIframe.name, allIframesBefore);
                this.Logger.ThrowIfNullOrUndefined(this.WaitForNewIframe.name, dateOneDoc);
                var toReturn = null;
                var iterationJr = new IterationDrone_IterationDrone(this.Logger, this.WaitForNewIframeNative.name, true);
                let beforeCount = allIframesBefore.length;
                while (!toReturn && iterationJr.DecrementAndKeepGoing()) {
                    var allIframesAfter;
                    let frameHelper = new FrameHelper_FrameHelper(this.Logger);
                    allIframesAfter = frameHelper.GetIFramesFromDataOneDoc(dateOneDoc);
                    var count = allIframesAfter.length;
                    if (count > beforeCount) {
                        var newIframes = allIframesAfter.filter(e => !allIframesBefore.includes(e));
                        toReturn = newIframes[0];
                        resolve(toReturn);
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                reject('probably ' + iterationJr.IsExhaustedMsg);
                this.Logger.FuncEnd(this.WaitForNewIframeNative.name);
            }));
        });
    }
    WaitForNewIframe(allIframesBefore, targetDoc) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForNewIframe.name);
                this.Logger.LogAsJsonPretty('allIframesBefore', allIframesBefore);
                this.Logger.ThrowIfNullOrUndefined(this.WaitForNewIframe.name, allIframesBefore);
                this.Logger.ThrowIfNullOrUndefined(this.WaitForNewIframe.name, targetDoc);
                var toReturn = null;
                var iterationJr = new IterationDrone_IterationDrone(this.Logger, this.WaitForNewIframe.name, true);
                let beforeCount = allIframesBefore.length;
                while (!toReturn && iterationJr.DecrementAndKeepGoing()) {
                    var allIframesAfter;
                    let frameHelper = new FrameHelper_FrameHelper(this.Logger);
                    yield frameHelper.GetIFramesAsBaseFrameProxies(targetDoc)
                        .then((result) => allIframesAfter = result)
                        .catch((err) => reject(this.WaitForNewIframe.name + ' ' + err));
                    var count = allIframesAfter.length;
                    this.Logger.Log('iFrame count before: ' + beforeCount);
                    this.Logger.Log('iFrame count after: ' + allIframesAfter.length);
                    if (count > beforeCount) {
                        var newIframes = allIframesAfter.filter(e => !allIframesBefore.includes(e));
                        toReturn = newIframes[0];
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                this.Logger.FuncEnd(this.WaitForNewIframe.name);
                if (toReturn) {
                    resolve(toReturn);
                }
                else {
                    reject(iterationJr.IsExhaustedMsg);
                }
            }));
        });
    }
    WaitForAndReturnFoundElem(haystackDoc, selector, overrideIterCount = 8) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForAndReturnFoundElem.name);
                this.Logger.LogVal('selector', selector);
                this.Logger.LogVal('doc nickname', haystackDoc.Nickname);
                var toReturnFoundElem = null;
                let promiseResult = new PromiseResult(this.WaitForAndReturnFoundElem.name, this.Logger);
                var iterationJr = new IterationDrone_IterationDrone(this.Logger, this.WaitForAndReturnFoundElem.name, true, overrideIterCount);
                while (!toReturnFoundElem && iterationJr.DecrementAndKeepGoing()) {
                    toReturnFoundElem = haystackDoc.ContentDoc.querySelector(selector);
                    if (toReturnFoundElem) {
                        this.Logger.Log('found');
                        this.Logger.LogVal('found.style.display', toReturnFoundElem.style.display);
                        promiseResult.MarkSuccessful();
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (!toReturnFoundElem && iterationJr.IsExhausted) {
                    promiseResult.MarkFailed(iterationJr.IsExhaustedMsg);
                }
                this.Logger.FuncEnd(this.WaitForAndReturnFoundElem.name);
                if (promiseResult.WasSuccessful()) {
                    resolve(toReturnFoundElem);
                }
                else {
                    reject(promiseResult.RejectReasons);
                }
            }));
        });
    }
    WaitForAndClickWithPayload(selector, targetDoc, payload) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForAndClickWithPayload.name, selector);
            yield this.WaitForThenClick([selector], targetDoc)
                .then(() => resolve(payload))
                .catch(ex => {
                this.Logger.ErrorAndThrow(this.WaitForAndClickWithPayload.name, ex);
                reject(ex);
            });
        }));
    }
    TabWaitForReadyStateCompleteNative(browserTab) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            let iterHelper = new IterationDrone_IterationDrone(this.Logger, this.TabWaitForReadyStateCompleteNative.name, true);
            let result = new PromiseResult(this.TabWaitForReadyStateCompleteNative.name, this.Logger);
            while (browserTab.status !== 'complete' && iterHelper.DecrementAndKeepGoing()) {
                this.Logger.LogVal('tab status', browserTab.status);
                yield iterHelper.Wait;
            }
            if (browserTab.status === 'complete') {
                result.MarkSuccessful();
            }
            else {
                result.MarkFailed('browser status: ' + browserTab.status);
                if (iterHelper.IsExhausted) {
                    result.MarkFailed(iterHelper.IsExhaustedMsg);
                }
            }
            if (result.WasSuccessful()) {
                resolve();
            }
            else {
                reject(result.RejectReasons);
            }
        }));
    }
    TabChainSetHrefWaitForComplete(href) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.TabChainSetHrefWaitForComplete.name, href.AbsUrl);
            yield browser.tabs.query({ currentWindow: true, active: true })
                .then((result) => {
                let targetTab = result[0];
                browser.tabs.update(targetTab.id, { url: href.AbsUrl });
                this.TabWaitForReadyStateCompleteNative(targetTab);
            })
                .then(resolve)
                .catch((ex) => reject(ex));
            this.Logger.FuncEnd(this.TabChainSetHrefWaitForComplete.name, href.AbsUrl);
        }));
    }
    RaceWaitAndClick(selector, targetDoc) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.RaceWaitAndClick.name);
                yield this.WaitForThenClick([selector.sc920, selector.sc820], targetDoc)
                    .then(() => {
                    this.Logger.FuncEnd(this.RaceWaitAndClick.name);
                    resolve();
                })
                    .catch((ex) => {
                    this.Logger.FuncEnd(this.RaceWaitAndClick.name);
                    reject(ex);
                });
            }));
        });
    }
    WaitForThenClick(selectorAr, targetDoc) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForThenClick.name);
            if (targetDoc) {
                var found = null;
                var iterationJr = new IterationDrone_IterationDrone(this.Logger, this.WaitForThenClick.name, true);
                while (!found && iterationJr.DecrementAndKeepGoing()) {
                    for (var idx = 0; idx < selectorAr.length; idx++) {
                        found = targetDoc.ContentDoc.querySelector(selectorAr[idx]);
                        if (found) {
                            this.Logger.LogVal('found target', selectorAr[idx]);
                            break;
                        }
                    }
                    if (found) {
                        this.Logger.Log('clicking');
                        try {
                            found.click();
                            resolve();
                        }
                        catch (err) {
                            reject(err);
                        }
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
            }
            else {
                reject('no target doc');
            }
            if (!found && iterationJr.IsExhausted) {
                reject(iterationJr.IsExhaustedMsg);
            }
            this.Logger.FuncEnd(this.WaitForThenClick.name);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/_HindSiteEvent/HindSiteEvent_Observer.js

class HindSiteEvent_Observer_HindSiteEvent_Observer extends LoggableBase {
    constructor(logger, friendly, callback = null) {
        super(logger);
        this.Callback = null;
        this.Callback = callback;
        this.Friendly = friendly;
    }
    UpdateAsync(payload) {
        try {
            if (this.Callback) {
                this.Callback(payload);
            }
        }
        catch (err) {
            this.Logger.ErrorAndContinue(HindSiteEvent_Observer_HindSiteEvent_Observer.name, err);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/TreeMutationEvent/TreeMutationEvent_Observer.js

class TreeMutationEvent_Observer_TreeMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(logger, ownerContentEditorProxy) {
        super(logger, TreeMutationEvent_Observer_TreeMutationEvent_Observer.name);
        this.OwnerContentEditorProxy = ownerContentEditorProxy;
    }
    SetAssociatedContentEditorProxy(contentEditorProxy) {
        this.OwnerContentEditorProxy = contentEditorProxy;
    }
    UpdateAsync(payload) {
        this.OwnerContentEditorProxy.ContentEditorProxyOnTreeMutationEvent(payload);
        payload.OwnerContentEditorProxy = this.OwnerContentEditorProxy;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfTree.js
class DefaultStateOfTree {
    constructor() {
        this.ActiveTreeNodeIndex = -1;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorTreeNodeProxy/ContentEditorTreeNodeProxy.js



class ContentEditorTreeNodeProxy_ScContentTreeNodeProxy extends LoggableBase {
    constructor(logger, sourceElement) {
        super(logger);
        if (sourceElement) {
            if (sourceElement.hasAttribute('src')) {
                this.InferFromImageElement(sourceElement);
            }
            else if (sourceElement.hasAttribute('href')) {
                this.InferFromAnchorElement(sourceElement);
            }
            else if (sourceElement.classList.contains('scContentTreeNode')) {
                this.InferFromDivElement(sourceElement);
            }
            else {
                this.Logger.ErrorAndThrow(ContentEditorTreeNodeProxy_ScContentTreeNodeProxy.name, 'invalid source element type: ' + (typeof sourceElement));
            }
        }
        else {
            this.Logger.ErrorAndThrow(ContentEditorTreeNodeProxy_ScContentTreeNodeProxy.name, 'null sourceElement or associatedDoc');
        }
    }
    InferFromDivElement(divElement) {
        if (divElement) {
            this.ScContentTreeNodeDivElem = divElement;
        }
    }
    InferFromAnchorElement(anchorElement) {
        if (anchorElement) {
            this.ScContentTreeNodeDivElem = anchorElement.parentElement;
        }
    }
    InferFromImageElement(imageElement) {
        if (imageElement) {
            this.ScContentTreeNodeDivElem = imageElement.parentElement;
        }
    }
    GetGlyphNodeElem() {
        return this.ScContentTreeNodeDivElem.querySelector(":scope > img");
    }
    GetLinkNodeElem() {
        return this.ScContentTreeNodeDivElem.querySelector(":scope > a");
    }
    GetStateOfScContentTreeNode() {
        var newData = {
            IsExpanded: this.QueryIsExpanded(),
            IsActive: this.QueryIsActive(),
            FriendlyTreeNode: this.GetNodeLinkText(),
            ItemId: this.GetApparentItemId(),
        };
        return newData;
    }
    GetApparentItemId() {
        let glyphNodeIdSuffix = this.GetGlyphNodeElem().id.replace(ContentConst.Const.Names.SC.TreeGlyphPrefix, '');
        let toReturnGuidData = Guid_Guid.ParseGuid(glyphNodeIdSuffix, true);
        return toReturnGuidData;
    }
    GetIconSrc() {
        let toReturn;
        let foundElement = this.ScContentTreeNodeDivElem.querySelector(ContentConst.Const.Selector.SC.ContentEditor.scContentTreeNodeIcon);
        if (foundElement) {
            toReturn = foundElement.src;
        }
        return toReturn;
    }
    GetParentTreeNode() {
        let toReturn = null;
        let candidate = this.ScContentTreeNodeDivElem.closest(ContentConst.Const.Selector.SC.ContentEditor.scContentTreeNodeIcon);
        if (candidate) {
            this.Logger.Log('found a candidate');
            toReturn = new ContentEditorTreeNodeProxy_ScContentTreeNodeProxy(this.Logger, candidate);
        }
        else {
            this.Logger.Log('no candidate found');
        }
        return toReturn;
    }
    IsSitecoreRootNode() {
        let toReturn = false;
        let apparentId = this.GetApparentItemId();
        if (apparentId) {
            toReturn = apparentId.Raw === ContentConst.Const.ElemId.sc.SitecoreRootApparentIdRaw;
        }
        return toReturn;
    }
    GetMainIconSrc() {
        let toReturn;
        let maxIter = 100;
        let penultimateNode = this;
        let parentNode = this;
        let penultimateElem = this.ScContentTreeNodeDivElem.closest('[id=ContentTreeActualSize] > .scContentTreeNode >  div > .scContentTreeNode');
        if (penultimateElem) {
            penultimateNode = new ContentEditorTreeNodeProxy_ScContentTreeNodeProxy(this.Logger, penultimateElem);
        }
        if (penultimateNode !== null) {
            toReturn = penultimateNode.GetIconSrc();
        }
        return toReturn;
    }
    SetStateOfTreeNode(newData) {
        if (newData.IsExpanded) {
            this.ExpandNode();
        }
        this.Logger.LogVal('IsActive', newData.IsActive.toString());
        if (newData.IsActive) {
            var hotTreeNodeId = ContentConst.Const.Names.SC.TreeGlyphPrefix + Guid_Guid.WithoutDashes(newData.ItemId);
            let hotTreeNode = this.ScContentTreeNodeDivElem.querySelector('[id=' + hotTreeNodeId + ']');
            if (hotTreeNode) {
                let hotTreeNodeProxy = new ContentEditorTreeNodeProxy_ScContentTreeNodeProxy(this.Logger, hotTreeNode);
                if (hotTreeNodeProxy) {
                    hotTreeNodeProxy.ActivateNode();
                }
                else {
                    this.Logger.ErrorAndContinue(this.SetStateOfTreeNode.name, 'hot tree node not found');
                }
            }
            else {
                this.Logger.WarningAndContinue(this.SetStateOfTreeNode.name, 'No hotTreeNode');
            }
        }
    }
    QueryIsActive() {
        var toReturn = false;
        if (this.GetLinkNodeElem()) {
            var classList = this.GetLinkNodeElem().classList;
            if (classList.contains(ContentConst.Const.ClassNames.SC.scContentTreeNodeActive)) {
                toReturn = true;
            }
        }
        return toReturn;
    }
    ActivateNode() {
        this.Logger.FuncStart(this.ActivateNode.name);
        if (this.GetLinkNodeElem()) {
            this.Logger.Log('clicking it to activate');
            this.GetLinkNodeElem().click();
            if (!this.QueryIsActive()) {
                this.Logger.WarningAndContinue(this.ActivateNode.name, 'Did not work. Trying to activate: ' + this.GetNodeLinkText());
            }
        }
        else {
            this.Logger.ErrorAndContinue(this.ActivateNode.name, 'No associated Elem');
        }
        this.Logger.FuncEnd(this.ActivateNode.name);
    }
    __collapseNode(element) {
        var currentSrc = element.getAttribute('src');
        this.Logger.Log('currentSrc' + currentSrc);
        if (currentSrc.indexOf(ContentConst.Const.Names.TreeMenuExpandedPng) > -1) {
            this.Logger.Log('clicking it to collapse');
            element.click();
        }
    }
    ExpandNode() {
        this.Logger.FuncStart(this.ExpandNode.name);
        if (!this.QueryIsExpanded()) {
            this.Logger.Log('clicking it to expand');
            this.GetGlyphNodeElem().click();
        }
        else {
            this.Logger.Log('Already expanded');
        }
        this.Logger.FuncEnd(this.ExpandNode.name);
    }
    GetNodeLinkText() {
        var toReturn = 'unknown';
        if (this.GetLinkNodeElem()) {
            toReturn = this.GetLinkNodeElem().innerText;
        }
        return toReturn;
    }
    IsContentTreeNode() {
        var toReturn = false;
        var className = this.ScContentTreeNodeDivElem.className;
        toReturn = className === ContentConst.Const.ClassNames.SC.ContentTreeNode;
        return toReturn;
    }
    QueryIsExpanded() {
        var toReturn = false;
        let candidate = this.GetGlyphNodeElem();
        if (candidate) {
            var srcAttr = candidate.getAttribute('src');
            if (srcAttr !== null) {
                if (srcAttr.indexOf(ContentConst.Const.Names.SC.TreeExpandedPng.sc920) > -1) {
                    toReturn = true;
                }
            }
            else {
                this.Logger.ErrorAndThrow(this.QueryIsExpanded.name, 'Bad Glyph/ node data');
            }
            return toReturn;
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/_HindSiteEvent/HindeSiteEvent_Subject.js

class HindeSiteEvent_Subject_HindeSiteEvent_Subject extends LoggableBase {
    constructor(logger, friendly) {
        super(logger);
        this.ObserverCollection = [];
        this.Friendly_Subject = friendly;
    }
    HasObservers() {
        return this.ObserverCollection && this.ObserverCollection.length > 0;
    }
    RegisterObserver(observer) {
        if (observer) {
            this.Logger.Log(this.RegisterObserver.name + ' ' + observer.Friendly + ' to ' + this.Friendly_Subject);
            if (this.ObserverCollection.indexOf(observer) < 0) {
                this.ObserverCollection.push(observer);
            }
            else {
                this.Logger.WarningAndContinue(this.RegisterObserver.name, 'Observer already registered');
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.RegisterObserver.name, 'Observer is null');
        }
    }
    UnregisterObserver(observer) {
        this.Logger.FuncStart(this.UnregisterObserver.name);
        if (observer) {
            let observerIndex = this.ObserverCollection.indexOf(observer);
            if (observerIndex > -1) {
                this.ObserverCollection.splice(observerIndex, 1);
            }
        }
        this.Logger.FuncEnd(this.UnregisterObserver.name);
    }
    NotifyObservers(payload) {
        this.Logger.FuncStart(this.NotifyObservers.name + ' of: ' + this.Friendly_Subject, ' observer count: ' + this.ObserverCollection.length);
        this.ObserverCollection.forEach((observer) => {
            observer.UpdateAsync(payload);
        });
        this.Logger.FuncEnd(this.NotifyObservers.name + ' of: ' + this.Friendly_Subject, ' observer count: ' + this.ObserverCollection.length);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/TreeMutationEvent/TreeMutationEvent_Subject.js


class TreeMutationEvent_Subject_TreeMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(logger, treeElement) {
        super(logger, TreeMutationEvent_Subject_TreeMutationEvent_Subject.name);
        this.TreeElement = treeElement;
        this.InitTreeMutationEvent_Observer();
    }
    InitTreeMutationEvent_Observer() {
        try {
            if (this.TreeElement) {
                let self = this;
                let observer = new MutationObserver((mutations) => self.OnTreeMutationEvent_TreeMutationEvent_Subject(mutations));
                observer.observe(this.TreeElement, { attributes: true, subtree: true, childList: true });
            }
        }
        catch (err) {
            throw (this.InitTreeMutationEvent_Observer.name + ' | ' + err);
        }
    }
    MakeScContentTreeNodeProxy(mutation) {
        let candidateNode = null;
        let mutatedAnchorElement = (mutation.target);
        candidateNode = new ContentEditorTreeNodeProxy_ScContentTreeNodeProxy(this.Logger, mutatedAnchorElement);
        return candidateNode;
    }
    OnTreeMutationEvent_TreeMutationEvent_Subject(mutationRecords) {
        mutationRecords.forEach((mutationRecord, index) => {
            if (mutationRecord.attributeName === 'class') {
                let anchorTest = (mutationRecord.target);
                if (anchorTest) {
                    let scContentTreeNodeProxy = this.MakeScContentTreeNodeProxy(mutationRecord);
                    if (scContentTreeNodeProxy) {
                        if (scContentTreeNodeProxy.QueryIsActive()) {
                            let treeMutationEvent_Payload = {
                                OwnerContentEditorProxy: null,
                                StateOfTree: null,
                                MutatedElement: (mutationRecord.target),
                                ActiveNode: scContentTreeNodeProxy,
                            };
                            this.NotifyObservers(treeMutationEvent_Payload);
                        }
                    }
                }
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/Agents/InitResultTreeProxy.js
class InitResultTreeProxy {
    constructor() {
        this.TreeInitialized = false;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorTreeProxy/ContentEditorTreeProxy.js
var ContentEditorTreeProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class ContentEditorTreeProxy_TreeProxy extends LoggableBase {
    constructor(logger, associatedDoc, treeContainerElement) {
        super(logger);
        this.AssociatedDoc = associatedDoc;
        this.TreeContainerElement = treeContainerElement;
    }
    OnReadyInitTreeProxy() {
        let initResultTreeProxy = new InitResultTreeProxy();
        this.TreeMutationEvent_Subject = new TreeMutationEvent_Subject_TreeMutationEvent_Subject(this.Logger, this.TreeContainerElement);
        initResultTreeProxy.TreeInitialized = true;
        return initResultTreeProxy;
    }
    GetTreeNodeByGlyph(targetNode) {
        let toReturn = null;
        if (targetNode && this.TreeContainerElement) {
            var treeGlyphTargetId = ContentConst.Const.Names.SC.TreeGlyphPrefix + Guid_Guid.WithoutDashes(targetNode.ItemId);
            var foundOnPageTreeGlyph = this.TreeContainerElement.querySelector('[id=' + treeGlyphTargetId + ']');
            if (foundOnPageTreeGlyph) {
                toReturn = new ContentEditorTreeNodeProxy_ScContentTreeNodeProxy(this.Logger, foundOnPageTreeGlyph);
            }
        }
        return toReturn;
    }
    SetStateOfTree(stateOfContentEditor) {
        return ContentEditorTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.SetStateOfTree.name);
            let iterHelper = new IterationDrone_IterationDrone(this.Logger, this.SetStateOfTree.name, true);
            while (stateOfContentEditor.StateOfTreeNodes.length > 0 && iterHelper.DecrementAndKeepGoing()) {
                var nextNode = stateOfContentEditor.StateOfTreeNodes.shift();
                yield this.SetStateOfTreeNode(nextNode);
            }
            this.Logger.FuncEnd(this.SetStateOfTree.name);
        });
    }
    SetStateOfTreeNode(dataStateOfTreeNode) {
        return ContentEditorTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.SetStateOfTreeNode.name);
            try {
                var iterHelper = new IterationDrone_IterationDrone(this.Logger, this.SetStateOfTreeNode.name, true);
                let treeNodeProxy = null;
                while (!treeNodeProxy && iterHelper.DecrementAndKeepGoing()) {
                    treeNodeProxy = this.GetTreeNodeByGlyph(dataStateOfTreeNode);
                    if (treeNodeProxy) {
                        treeNodeProxy.SetStateOfTreeNode(dataStateOfTreeNode);
                    }
                    else {
                        this.Logger.Log('not Found...waiting: ');
                        yield iterHelper.Wait();
                    }
                }
            }
            catch (err) {
                throw (this.SetStateOfTreeNode.name + ' | ' + err);
            }
            this.Logger.FuncEnd(this.SetStateOfTreeNode.name);
        });
    }
    WalkNodeRecursive(targetNode, depth) {
        var toReturn = [];
        depth = depth - 1;
        if (targetNode) {
            var firstChildGlyphNode = targetNode.querySelector(ContentConst.Const.Selector.SC.ContentEditor.ContentTreeNodeGlyph);
            if (firstChildGlyphNode) {
                let treeNodeProxy = new ContentEditorTreeNodeProxy_ScContentTreeNodeProxy(this.Logger, firstChildGlyphNode);
                if (treeNodeProxy.IsContentTreeNode()) {
                    if (treeNodeProxy.QueryIsExpanded() || treeNodeProxy.QueryIsActive()) {
                        let newData = treeNodeProxy.GetStateOfScContentTreeNode();
                        toReturn.push(newData);
                    }
                }
            }
            var childNodes = targetNode.children;
            if (childNodes && childNodes.length > 0 && depth > 0) {
                for (var jdx = 0; jdx < childNodes.length; jdx++) {
                    var oneChild = childNodes[jdx];
                    toReturn = toReturn.concat(this.WalkNodeRecursive(oneChild, depth));
                }
            }
        }
        return toReturn;
    }
    GetRootNodeForFrameType() {
        let toReturn = this.TreeContainerElement.querySelector(ContentConst.Const.Selector.SC.ContentEditor.RootAnchorNode);
        return toReturn;
    }
    GetStateOfTree() {
        let toReturnOneTreeState = new DefaultStateOfTree();
        try {
            toReturnOneTreeState.StateOfTreeNodes = this.GetStateOfTreeNodes();
            toReturnOneTreeState.ActiveTreeNodeIndex = null;
            toReturnOneTreeState.ActiveTreeNodeIndex = this.GetActiveNode(toReturnOneTreeState.StateOfTreeNodes);
        }
        catch (err) {
            throw (this.GetStateOfTree.name + ' | ' + err);
        }
        return toReturnOneTreeState;
    }
    GetActiveNode(allTreeNodeAr) {
        let toReturn = -1;
        if (allTreeNodeAr) {
            for (var idx = 0; idx < allTreeNodeAr.length; idx++) {
                let candidate = allTreeNodeAr[idx];
                if (candidate.IsActive) {
                    toReturn = idx;
                    break;
                }
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.GetActiveNode.name, 'No tree data provided');
        }
        return toReturn;
    }
    GetStateOfTreeNodes() {
        var toReturn = [];
        if (this.AssociatedDoc) {
            var rootNode = this.GetRootNodeForFrameType();
            if (rootNode) {
                var rootParent = rootNode.parentElement;
                toReturn = this.WalkNodeRecursive(rootParent, ContentConst.Const.MaxIter);
            }
            else {
                this.Logger.ErrorAndThrow(this.GetStateOfTreeNodes.name, 'no root node');
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.GetStateOfTreeNodes.name, 'no targetDoc');
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/ContentEditorProxyMutationEvent/ContentEditorProxyMutationEvent_Subject.js

class ContentEditorProxyMutationEvent_Subject_ContentEditorProxyMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(logger) {
        super(logger, ContentEditorProxyMutationEvent_Subject_ContentEditorProxyMutationEvent_Subject.name);
        this.Logger.InstantiateStart(ContentEditorProxyMutationEvent_Subject_ContentEditorProxyMutationEvent_Subject.name);
        this.Logger.InstantiateEnd(ContentEditorProxyMutationEvent_Subject_ContentEditorProxyMutationEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/Agents/InitResultContentEditorProxy.js
class InitResultContentEditorProxy {
    constructor() {
        this.ContentEditorProxyInitialized = false;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentEditorProxy.js
var ContentEditorProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};










class ContentEditorProxy_ContentEditorProxy extends LoggableBase {
    constructor(associatedDoc, logger) {
        super(logger);
        this.AssociatedHindsiteId = Guid_Guid.NewRandomGuid();
        this.AssociatedDoc = associatedDoc;
        this.ValidateAssociatedDocContentEditor();
    }
    OnReadyInitContentEditorProxy() {
        return new Promise((resolve, reject) => ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            let initResultContentEditorProxy = new InitResultContentEditorProxy();
            let recipeBasic = new RecipeBasics_RecipeBasics(this.Logger);
            yield recipeBasic.WaitForReadyNABDocument(this.AssociatedDoc)
                .then(() => {
                this.ChildTreeProxy = new ContentEditorTreeProxy_TreeProxy(this.Logger, this.AssociatedDoc, this.GetTreeContainer());
                initResultContentEditorProxy.InitResultTreeProxy = this.ChildTreeProxy.OnReadyInitTreeProxy();
                this.ContentEditorProxyMutationEvent_Subject = new ContentEditorProxyMutationEvent_Subject_ContentEditorProxyMutationEvent_Subject(this.Logger);
                this.TreeMutationEvent_Observer = new TreeMutationEvent_Observer_TreeMutationEvent_Observer(this.Logger, this);
                if (this.ChildTreeProxy) {
                    this.ChildTreeProxy.TreeMutationEvent_Subject.RegisterObserver(this.TreeMutationEvent_Observer);
                }
                else {
                    this.Logger.ErrorAndThrow(this.OnReadyInitContentEditorProxy.name, 'no child tree found');
                }
                initResultContentEditorProxy.ContentEditorProxyInitialized = true;
            })
                .then(() => resolve(initResultContentEditorProxy))
                .catch((err) => reject(this.OnReadyInitContentEditorProxy.name + ' | ' + err));
        }));
    }
    GetTreeContainer() {
        return this.AssociatedDoc.ContentDoc.querySelector(ContentConst.Const.Selector.SC.ContentEditor.ScContentTreeContainer);
    }
    ContentEditorProxyOnTreeMutationEvent(payload) {
        let contentEditorProxyMutationEvent_Payload = {
            AddedIframes: [],
            MutatedElement: null,
            TreeMutation: payload,
            ContentEditorProxy: this
        };
        if (this.ContentEditorProxyMutationEvent_Subject) {
            this.ContentEditorProxyMutationEvent_Subject.NotifyObservers(contentEditorProxyMutationEvent_Payload);
        }
    }
    GetStateOfContentEditor() {
        {
            let toReturnStateOfContentEditor = new DefaultStateOfContentEditor();
            toReturnStateOfContentEditor.StateOfTree = this.ChildTreeProxy.GetStateOfTree();
            return toReturnStateOfContentEditor;
        }
    }
    ValidateAssociatedDocContentEditor() {
        if (!this.AssociatedDoc) {
            this.Logger.ErrorAndThrow(this.ValidateAssociatedDocContentEditor.name, 'No doc provided');
        }
        else if (!this.AssociatedDoc.ContentDoc) {
            this.Logger.ErrorAndThrow(this.ValidateAssociatedDocContentEditor.name, 'No content doc');
        }
        else if (!this.AssociatedDoc.ContentDoc.URL) {
            this.Logger.ErrorAndThrow(this.ValidateAssociatedDocContentEditor.name, 'No URL');
        }
        else if (this.AssociatedDoc.ContentDoc.URL === SharedConst.Const.UrlSuffix.AboutBlank) {
            this.Logger.ErrorAndThrow(this.ValidateAssociatedDocContentEditor.name, SharedConst.Const.UrlSuffix.AboutBlank + ' not allowed');
        }
    }
    WaitForReadyContentEditor() {
        return ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForReadyContentEditor.name);
            try {
                let recipeBasics = new RecipeBasics_RecipeBasics(this.Logger);
                yield recipeBasics.WaitForReadyNABDocument(this.AssociatedDoc)
                    .catch((err) => this.Logger.ErrorAndThrow(this.WaitForReadyContentEditor.name, err));
            }
            catch (e) {
            }
            this.Logger.FuncEnd(this.WaitForReadyContentEditor.name);
        });
    }
    RegisterObserverForTreeMutation(treeMutationEvent_Observer) {
        this.Logger.FuncStart(this.RegisterObserverForTreeMutation.name);
        if (this.ChildTreeProxy) {
            treeMutationEvent_Observer.SetAssociatedContentEditorProxy(this);
            this.ChildTreeProxy.TreeMutationEvent_Subject.RegisterObserver(treeMutationEvent_Observer);
        }
        else {
            this.Logger.WarningAndContinue(this.RegisterObserverForTreeMutation.name, 'no associated tree proxy');
        }
        this.Logger.FuncEnd(this.RegisterObserverForTreeMutation.name);
    }
    SetCompactCss() {
        this.Logger.FuncStart(this.SetCompactCss.name, Guid_Guid.AsShort(this.AssociatedDoc.DocId));
        this.Logger.FuncStart(this.SetCompactCss.name, Guid_Guid.AsShort(this.AssociatedDoc.DocId));
    }
    SetStateOfContentEditor(dataToRestore) {
        return ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.SetStateOfContentEditor.name, Guid_Guid.AsShort(this.AssociatedDoc.DocId));
                this.Logger.Log('Node Count in storage data: ' + dataToRestore.StateOfTree.StateOfTreeNodes.length);
                yield this.ChildTreeProxy.SetStateOfTree(dataToRestore.StateOfTree)
                    .then(() => resolve(true))
                    .catch((err) => reject(this.SetStateOfContentEditor.name + " " + err));
                this.Logger.FuncEnd(this.SetStateOfContentEditor.name);
            }));
        });
    }
    GetActiveNode(allTreeNodeAr) {
        this.Logger.FuncStart(this.GetActiveNode.name);
        let toReturn = null;
        if (allTreeNodeAr) {
            for (var idx = 0; idx < allTreeNodeAr.length; idx++) {
                let candidate = allTreeNodeAr[idx];
                if (candidate.IsActive) {
                    toReturn = candidate;
                    break;
                }
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.GetActiveNode.name, 'No tree data provided');
        }
        this.Logger.FuncEnd(this.GetActiveNode.name, toReturn.FriendlyTreeNode);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/ContentEditorProxyMutationEvent/ContentEditorProxyMutationEvent_Observer.js

class ContentEditorProxyMutationEvent_Observer_ContentEditorProxyMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(logger, ownerFrameProxy) {
        super(logger, ContentEditorProxyMutationEvent_Observer_ContentEditorProxyMutationEvent_Observer.name);
        this.OwnerDTFrameProxy = ownerFrameProxy;
    }
    UpdateAsync(payload) {
        this.OwnerDTFrameProxy.OnContentEditorProxyMutation(payload);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/Agents/InitResultsDTFrameProxy.js
class InitResultsDTFrameProxy {
    constructor() {
        this.DTFrameProxyInitialized = false;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/DTFrameProxyMutationEvent/DTFrameProxyMutationEvent_Subject.js

class DTFrameProxyMutationEvent_Subject_DTFrameProxyMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(logger) {
        super(logger, DTFrameProxyMutationEvent_Subject_DTFrameProxyMutationEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/DTFrameProxy.js
var DTFrameProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class DTFrameProxy_DTFrameProxy extends _BaseFrameProxy_BaseFrameProxy {
    constructor(logger, iframeElem) {
        super(logger, iframeElem);
        this.Discriminator = DTFrameProxy_DTFrameProxy.name;
    }
    GetStateOfDTFrame() {
        let toReturn = new DefaultStateOfFrame_DefaultStateOfFrame();
        let sourceStyle = this.HTMLIframeElement.style;
        toReturn.Styling = {
            height: sourceStyle.height,
            left: sourceStyle.left,
            position: sourceStyle.position,
            top: sourceStyle.top,
            width: sourceStyle.width,
            zIndex: sourceStyle.zIndex
        };
        if (this.ContentEditorProxy) {
            toReturn.StateOfContentEditor = this.ContentEditorProxy.GetStateOfContentEditor();
        }
        return toReturn;
    }
    SetStateOfDTFrame(stateOfDTFrame) {
        return DTFrameProxy_awaiter(this, void 0, void 0, function* () {
            yield this.ContentEditorProxy.SetStateOfContentEditor(stateOfDTFrame.StateOfContentEditor)
                .then(() => {
                this.HTMLIframeElement.style.height = stateOfDTFrame.Styling.height;
                this.HTMLIframeElement.style.left = stateOfDTFrame.Styling.left;
                this.HTMLIframeElement.style.position = stateOfDTFrame.Styling.position;
                this.HTMLIframeElement.style.top = stateOfDTFrame.Styling.top;
                this.HTMLIframeElement.style.width = stateOfDTFrame.Styling.width;
                this.HTMLIframeElement.style.zIndex = stateOfDTFrame.Styling.zIndex;
            });
        });
    }
    OnContentEditorProxyMutation(payload) {
        let dtFrameProxyMutationEvent_Payload = {
            ContentEditorProxyMutationPayload: payload,
            DTFrameProxy: this
        };
        this.DTFrameProxyMutationEvent_Subject.NotifyObservers(dtFrameProxyMutationEvent_Payload);
    }
    OnReadyInitDTFrameProxy() {
        return new Promise((resolve, reject) => DTFrameProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.OnReadyInitDTFrameProxy.name);
            let recipeBasic = new RecipeBasics_RecipeBasics(this.Logger);
            let initResultFrameProxy = new InitResultsDTFrameProxy();
            yield recipeBasic.WaitForReadyNABHtmlIframeElement(this.HTMLIframeElement)
                .then(() => this.ContentEditorProxy = new ContentEditorProxy_ContentEditorProxy(this.GetContentDoc(), this.Logger))
                .then(() => this.ContentEditorProxy.OnReadyInitContentEditorProxy())
                .then((result) => initResultFrameProxy.InitResultContentEditorProxy = result)
                .then(() => {
                this.DTFrameProxyMutationEvent_Subject = new DTFrameProxyMutationEvent_Subject_DTFrameProxyMutationEvent_Subject(this.Logger);
                this.ContentEditorProxyMutationEvent_Observer = new ContentEditorProxyMutationEvent_Observer_ContentEditorProxyMutationEvent_Observer(this.Logger, this);
                this.ContentEditorProxy.ContentEditorProxyMutationEvent_Subject.RegisterObserver(this.ContentEditorProxyMutationEvent_Observer);
                initResultFrameProxy.DTFrameProxyInitialized = true;
            })
                .then(() => resolve(initResultFrameProxy))
                .catch((err) => reject(this.OnReadyInitDTFrameProxy.name + ' | ' + err));
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/FactoryHelper.js
var FactoryHelper_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class FactoryHelper_FactoryHelper extends LoggableBase {
    constructor(logger) {
        super(logger);
    }
    DataOneContentDocFactoryFromIframe(dataOneIframe) {
        var toReturn = null;
        if (dataOneIframe) {
            toReturn =
                {
                    ContentDoc: dataOneIframe.HTMLIframeElement.contentDocument,
                    DocId: Guid_Guid.NewRandomGuid(),
                    Nickname: ' - content doc'
                };
        }
        else {
            this.Logger.ErrorAndThrow(this.DataOneContentDocFactoryFromIframe.name, 'no iframe provided');
        }
        return toReturn;
    }
    BaseFramePromiseFactory(iframeElem, nickname) {
        this.Logger.FuncStart(this.BaseFramePromiseFactory.name);
        var toReturn = null;
        if (iframeElem && nickname) {
            var toReturn = new _BaseFrameProxy_BaseFrameProxy(this.Logger, iframeElem);
        }
        else {
            this.Logger.ErrorAndThrow(this.BaseFramePromiseFactory.name, 'one of these is null');
            this.Logger.LogAsJsonPretty('iframeElem', iframeElem);
            this.Logger.LogAsJsonPretty('nickname', nickname);
        }
        this.Logger.FuncEnd(this.BaseFramePromiseFactory.name);
        return toReturn;
    }
    DTFrameProxyFactory(iframeElem) {
        return FactoryHelper_awaiter(this, void 0, void 0, function* () {
            var toReturn = null;
            if (iframeElem) {
                var toReturn = new DTFrameProxy_DTFrameProxy(this.Logger, iframeElem);
                yield toReturn.OnReadyInitDTFrameProxy();
            }
            else {
                this.Logger.ErrorAndThrow(this.DTFrameProxyFactory.name, 'one of these is null');
                this.Logger.LogAsJsonPretty('iframeElem', iframeElem);
            }
            return toReturn;
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/ContentApi/Recipes/RecipeAddContentEditorToDesktop/RecipeAddContentEditorToDesktop.js
var RecipeAddContentEditorToDesktop_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class RecipeAddContentEditorToDesktop_RecipeAddNewContentEditorToDesktop extends LoggableBase {
    constructor(logger, targetDoc, ceButtonTabAgent) {
        super(logger);
        this.Logger.InstantiateStart(RecipeAddContentEditorToDesktop_RecipeAddNewContentEditorToDesktop.name);
        this.TargetDoc = targetDoc;
        this.DesktopTabButtonAgent = ceButtonTabAgent;
        this.Logger.InstantiateEnd(RecipeAddContentEditorToDesktop_RecipeAddNewContentEditorToDesktop.name);
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeAddContentEditorToDesktop_awaiter(this, void 0, void 0, function* () {
            let allIframeDataAtBeginning;
            let dtframeProxy;
            let frameHelper = new FrameHelper_FrameHelper(this.Logger);
            let recipeBasics = new RecipeBasics_RecipeBasics(this.Logger);
            allIframeDataAtBeginning = frameHelper.GetIFramesFromDataOneDoc(this.TargetDoc);
            yield recipeBasics.RaceWaitAndClick(ContentConst.Const.Selector.SC.scStartButton, this.TargetDoc)
                .then(() => recipeBasics.WaitForThenClick([ContentConst.Const.Selector.SC.StartMenuLeftOption], this.TargetDoc))
                .then(() => recipeBasics.WaitForNewIframeContentEditor(allIframeDataAtBeginning, this.TargetDoc))
                .then((result) => dtframeProxy = result)
                .then(() => dtframeProxy.OnReadyInitDTFrameProxy())
                .then((result) => {
                return this.Logger.LogAsJsonPretty('InitResultsFrameProxy', result);
            })
                .then(() => resolve(dtframeProxy))
                .catch((err) => reject(this.Execute.name + ' ' + err));
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/ContentApi/Recipes/__RecipeBase/__RecipeBase.js

class _RecipeBase_ApiRecipeBase {
    constructor(commandData) {
        this.Logger = commandData.Logger;
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.Logger);
        this.ScWinMan = commandData.ScWinMan;
        this.AtticAgent = commandData.AtticAgent;
        this.TargetDoc = commandData.TargetDoc;
        this.TargetConEdProxy = commandData.TargetCeProxy;
        this.AutoSnapShotAgent = commandData.AutoSnapShotAgent;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/ContentApi/Recipes/RecipePublishActiveCe/RecipePublishActiveCe.js
var RecipePublishActiveCe_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class RecipePublishActiveCe_RecipePublishActiveCe extends _RecipeBase_ApiRecipeBase {
    constructor(commandData, factoryHelp) {
        super(commandData);
        this.FactoryHelp = factoryHelp;
    }
    Execute() {
        return new Promise((resolve, reject) => RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            yield this.PublishActiveCE(this.ScWinMan.GetTopLevelDoc())
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    GetDocToPublish(currentWindowType, targetDoc) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetDocToPublish.name);
                try {
                    if (currentWindowType === ScWindowType.Desktop) {
                        yield this.RecipeBasics.GetTopLevelIframe(targetDoc)
                            .then((topIframe) => {
                            resolve(topIframe.GetContentDoc());
                        })
                            .catch((err) => reject(this.GetDocToPublish.name + ' ' + err));
                    }
                    else {
                        resolve(this.ScWinMan.GetTopLevelDoc());
                    }
                }
                catch (err) {
                    reject(this.GetDocToPublish.name + ' ' + err);
                }
                this.Logger.FuncEnd(this.GetDocToPublish.name);
            }));
        });
    }
    PublishActiveCE(targetDoc) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.PublishActiveCE.name);
            try {
                var currentWindowType = this.ScWinMan.GetCurrentPageType();
                yield this.GetDocToPublish(currentWindowType, targetDoc)
                    .then((docToPublish) => this.PublishCE(docToPublish))
                    .catch((err) => { throw (err); });
            }
            catch (err) {
                throw (this.PublishActiveCE.name + ' ' + err);
            }
            this.Logger.FuncEnd(this.PublishActiveCE.name);
        });
    }
    __debugDataPublishChain(dataPublishChain, nickname) {
        this.Logger.FuncStart(this.__debugDataPublishChain.name, nickname);
        this.Logger.LogVal('docToPublish', this.Logger.IsNullOrUndefined(dataPublishChain.DocToPublish));
        this.Logger.LogVal('jqIframe', this.Logger.IsNullOrUndefined(dataPublishChain.JqIframe) + ' ' + (dataPublishChain.JqIframe ? dataPublishChain.JqIframe.HTMLIframeElement.src : ''));
        this.Logger.LogVal('Iframe0blueIframe', this.Logger.IsNullOrUndefined(dataPublishChain.Iframe0Blue) + ' ' + (dataPublishChain.Iframe0Blue ? dataPublishChain.Iframe0Blue.HTMLIframeElement.src : ''));
        this.Logger.LogVal('messageDialogIframeRed', this.Logger.IsNullOrUndefined(dataPublishChain.MessageDialogIframeRed) + ' ' + (dataPublishChain.MessageDialogIframeRed ? dataPublishChain.MessageDialogIframeRed.HTMLIframeElement.src : ''));
        this.Logger.FuncEnd(this.__debugDataPublishChain.name);
        return dataPublishChain;
    }
    PublishCE(docToPublish) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.PublishCE.name);
            try {
                var dataPublishChain = {
                    DocToPublish: docToPublish,
                    TopLevelDoc: this.ScWinMan.GetTopLevelDoc(),
                    Iframe0Blue: null,
                    JqIframe: null,
                    MessageDialogIframeRed: null
                };
                yield this.ClickPublishOnNav(dataPublishChain)
                    .then((dataPublishChain) => this.ClickMenuButtonPublishDropDown(dataPublishChain))
                    .then((dataPublishChain) => this.ClickMenuDropDownPublishItem(dataPublishChain))
                    .then((dataPublishChain) => this.GetThePublishItemDialog(dataPublishChain))
                    .then((dataPublishChain) => this.GetDialogIframe0Blue(dataPublishChain))
                    .then((dataPublishChain) => this.__WaitForAndClickPublishNextButton(dataPublishChain))
                    .then((dataPublishChain) => this.GetMessageDialog(dataPublishChain))
                    .then((dataPublishChain) => this.__waitForAndClickOk(dataPublishChain))
                    .then((dataPublishChain) => this.__waitForAndClickClose(dataPublishChain))
                    .catch(ex => {
                    this.Logger.ErrorAndThrow(this.PublishCE.name, ex);
                });
            }
            catch (err) {
                throw (this.PublishCE.name + ' ' + err);
            }
            this.Logger.FuncEnd(this.PublishCE.name);
        });
    }
    ClickPublishOnNav(payload) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.ClickPublishOnNav.name);
            try {
                yield this.RecipeBasics.WaitForThenClick([ContentConst.Const.Selector.SC.NavPublishStrip], payload.DocToPublish);
                yield this.RecipeBasics.WaitForThenClick([ContentConst.Const.Selector.SC.NavPublishStrip], payload.DocToPublish);
            }
            catch (err) {
                throw (this.ClickPublishOnNav.name + ' ' + err);
            }
            this.Logger.FuncEnd(this.ClickPublishOnNav.name);
            return payload;
        });
    }
    __waitForAndClickClose(dataPublishChain) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            yield this.RecipeBasics.WaitForAndReturnFoundElem(dataPublishChain.Iframe0Blue.GetContentDoc(), ContentConst.Const.Selector.SC.Publish.SettingsHidden)
                .then(() => RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
                yield this.RecipeBasics.WaitForAndReturnFoundElem(dataPublishChain.Iframe0Blue.GetContentDoc(), ContentConst.Const.Selector.SC.Publish.TheItemHasBeenPublished, SharedConst.Const.IterHelper.MaxCount.OverridePublishing);
            }))
                .then(() => RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
                yield this.RecipeBasics.WaitForThenClick([ContentConst.Const.Selector.SC.Cancel], dataPublishChain.Iframe0Blue.GetContentDoc());
            }));
            return dataPublishChain;
        });
    }
    __waitForAndClickOk(dataPublishChain) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            yield this.RecipeBasics.WaitForThenClick([ContentConst.Const.Selector.SC.Ok], dataPublishChain.MessageDialogIframeRed.GetContentDoc());
            return dataPublishChain;
        });
    }
    __WaitForAndClickPublishNextButton(dataPublishChain) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            yield this.RecipeBasics.WaitForThenClick([ContentConst.Const.Selector.SC.NextButton], dataPublishChain.Iframe0Blue.GetContentDoc());
            return dataPublishChain;
        });
    }
    ClickMenuButtonPublishDropDown(payload = null) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            yield this.RecipeBasics.WaitForThenClick([ContentConst.Const.Selector.SC.MenuButtonPublish], payload.DocToPublish);
            return payload;
        });
    }
    ClickMenuDropDownPublishItem(payload = null) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            return yield this.RecipeBasics.WaitForAndClickWithPayload(ContentConst.Const.Selector.SC.MenuDropDownPublishItem, payload.DocToPublish, payload);
        });
    }
    GetThePublishItemDialog(dataPublishChain = null) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            try {
                yield this.RecipeBasics.WaitForAndReturnFoundElem(dataPublishChain.TopLevelDoc, ContentConst.Const.Selector.SC.JqueryModalDialogsFrame)
                    .then((found) => this.FactoryHelp.BaseFramePromiseFactory(found, 'jqIframe'))
                    .then((result) => dataPublishChain.JqIframe = result)
                    .then(() => this.RecipeBasics.WaitForReadyNABFrameProxy(dataPublishChain.JqIframe))
                    .catch((err) => { throw (this.GetThePublishItemDialog.name + ' ' + err); });
            }
            catch (err) {
                throw (this.GetThePublishItemDialog.name + ' ' + err);
            }
            return dataPublishChain;
        });
    }
    GetMessageDialog(dataPublishChain) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            let toReturnPublishChain = dataPublishChain;
            yield this.RecipeBasics.WaitForIframeElemAndReturnWhenReady(dataPublishChain.JqIframe.GetContentDoc(), ContentConst.Const.Selector.SC.ContentIFrame1, 'iframeRed')
                .then((result) => toReturnPublishChain.MessageDialogIframeRed = result)
                .catch((err) => this.Logger.ErrorAndThrow(this.GetMessageDialog.name, err));
            return toReturnPublishChain;
        });
    }
    GetDialogIframe0Blue(dataPublishChain = null) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetDialogIframe0Blue.name);
                let promiseResult = new PromiseResult(this.GetDialogIframe0Blue.name, this.Logger);
                this.Logger.LogAsJsonPretty('dataPublishChain', dataPublishChain);
                yield this.RecipeBasics.WaitForIframeElemAndReturnWhenReady(dataPublishChain.JqIframe.GetContentDoc(), ContentConst.Const.Selector.SC.ContentIframe0, 'Iframe0Blue')
                    .then((result) => {
                    this.Logger.MarkerC();
                    dataPublishChain.Iframe0Blue = result;
                    promiseResult.MarkSuccessful();
                })
                    .catch((err) => promiseResult.MarkFailed(err));
                this.Logger.LogAsJsonPretty('dataPublishChain.Iframe0Blue', dataPublishChain.Iframe0Blue);
                this.Logger.FuncEnd(this.GetDialogIframe0Blue.name);
                if (promiseResult.WasSuccessful()) {
                    resolve(dataPublishChain);
                }
                else {
                    reject(promiseResult.RejectReasons);
                }
            }));
        });
    }
    __waitForThenFunc(selector, targetDoc, dataPublishChain, optionFunc) {
        return new Promise((resolve, reject) => RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.__waitForThenFunc.name, selector);
            this.Logger.LogAsJsonPretty(this.__waitForThenFunc.name, targetDoc);
            var found = null;
            yield this.RecipeBasics.WaitForAndReturnFoundElem(targetDoc, selector)
                .then((result) => found = result);
            if (found) {
                this.Logger.Log('found');
                if (optionFunc) {
                    this.Logger.Log('executing func');
                    dataPublishChain = yield optionFunc(found, dataPublishChain);
                }
                this.__debugDataPublishChain(dataPublishChain, this.__waitForThenFunc.name);
                this.Logger.FuncEnd(this.__waitForThenFunc.name, selector);
                resolve(dataPublishChain);
            }
            else {
                reject('not found');
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/ContentApi/Recipes/RecipeRemoveItemFromStorage/RecipeForceAutoSnapShot.js
var RecipeForceAutoSnapShot_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class RecipeForceAutoSnapShot_RecipeForceAutoSnapShot extends _RecipeBase_ApiRecipeBase {
    Execute() {
        return RecipeForceAutoSnapShot_awaiter(this, void 0, void 0, function* () {
            try {
                this.AutoSnapShotAgent.AutoSaveSnapShot();
            }
            catch (err) {
                this.Logger.ErrorAndThrow(this.Execute.name, err);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/ContentApi/Recipes/RecipeRestore/RecipeRestore.js
var RecipeRestore_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class RecipeRestore_RecipeSetStateOfSitecoreWindow extends LoggableBase {
    constructor(logger, topLevelDoc, scWinRecipeParts, oneDesktopMan, oneCEAgent, dataOneWindowStorage) {
        super(logger);
        this.TopLevelDoc = topLevelDoc;
        this.ScWinRecipeParts = scWinRecipeParts;
        this.OneDesktopMan = oneDesktopMan;
        this.OneCeAgent = oneCEAgent;
        this.DataOneWindowStorage = dataOneWindowStorage;
    }
    Execute() {
        return RecipeRestore_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeRestore_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.Execute.name);
                try {
                    if (this.DataOneWindowStorage) {
                        var targetDoc = this.TopLevelDoc;
                        if (targetDoc) {
                            yield this.ScWinRecipeParts.RestoreStateToTargetDoc(targetDoc, this.DataOneWindowStorage, this.OneDesktopMan, this.OneCeAgent)
                                .then(() => resolve())
                                .catch((err) => reject(err));
                        }
                        else {
                            reject(this.Execute.name + ' no target window');
                        }
                    }
                }
                catch (err) {
                    reject(err);
                }
                this.Logger.FuncEnd(this.Execute.name);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/ContentApi/Recipes/RecipeSaveState/RecipeSaveState.js
var RecipeSaveState_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class RecipeSaveState_RecipeSaveStateManual extends _RecipeBase_ApiRecipeBase {
    constructor(commandData) {
        super(commandData);
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeSaveState_awaiter(this, void 0, void 0, function* () {
            yield this.ScWinMan.GetStateOfSitecoreWindow(SnapShotFlavor.Manual)
                .then((windowState) => {
                this.AtticAgent.WriteStateOfSitecoreToStorage(windowState);
            })
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/HindSiteScUiProxy.js
var HindSiteScUiProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};











class HindSiteScUiProxy_HindSiteScUiProxy extends LoggableBase {
    constructor(logger, toastAgent, scUiMan, scWinMan, atticAgent, autoSnapShotAgent) {
        super(logger);
        this.Logger.FuncStart(HindSiteScUiProxy_HindSiteScUiProxy.name);
        this.ToastAgent = toastAgent;
        this.ScUiMan = scUiMan;
        this.ScWinMan = scWinMan;
        this.FactoryHelp = new FactoryHelper_FactoryHelper(this.Logger);
        this.AtticAgent = atticAgent;
        this.AtticAgent.CleanOutOldAutoSavedData();
        this.AutoSnapShotAgent = autoSnapShotAgent;
        if (StaticHelpers_StaticHelpers.IsNullOrUndefined([this.AutoSnapShotAgent])) {
            this.Logger.ErrorAndThrow(HindSiteScUiProxy_HindSiteScUiProxy.name, 'null check');
        }
        this.Logger.FuncEnd(HindSiteScUiProxy_HindSiteScUiProxy.name);
    }
    GetStateOfContent() {
        return new Promise((resolve, reject) => HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            let reply = new DefaultScWindowState_DefaultContentReplyPayload();
            yield this.ScWinMan.GetStateOfSitecoreWindow(SnapShotFlavor.Live)
                .then((result) => reply.StateOfSitecoreWindow = result)
                .then(() => this.AtticAgent.GetStateOfStorageSnapShots())
                .then((result) => reply.StateOfStorageSnapShots = result)
                .then(() => reply.ErrorStack = this.Logger.ErrorStack)
                .then(() => resolve(reply))
                .catch((err) => reject(err));
        }));
    }
    AddCETab(commandData) {
        return new Promise((resolve, reject) => HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            yield new RecipeAddContentEditorToDesktop_RecipeAddNewContentEditorToDesktop(commandData.Logger, commandData.TargetDoc, commandData.DesktopProxy.DesktopStartBarAgent).Execute()
                .then(() => {
                this.ToastAgent.RaiseToastNotification(commandData.ScWinMan.GetTopLevelDoc(), "Success");
                resolve();
            })
                .catch((err) => reject(err));
        }));
    }
    PublischActiveCE(commandData) {
        return new Promise((resolve, reject) => HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            yield new RecipePublishActiveCe_RecipePublishActiveCe(commandData, this.FactoryHelp).Execute()
                .then(() => resolve)
                .catch((err) => reject(err));
        }));
    }
    DebugForceAutoSnapShot(commandData) {
        return HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
                let recipe = new RecipeForceAutoSnapShot_RecipeForceAutoSnapShot(commandData);
                recipe.Execute()
                    .then(() => resolve())
                    .catch((err) => reject(this.DebugForceAutoSnapShot.name + ' | ' + err));
            }));
        });
    }
    SaveWindowState(commandData) {
        return HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
                let recipe = new RecipeSaveState_RecipeSaveStateManual(commandData);
                yield recipe.Execute()
                    .then(resolve)
                    .catch((err) => reject(err));
            }));
        });
    }
    ToggleCompactCss(commandData) {
        return HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            }));
        });
    }
    SetStateOfSitecoreWindow(commandData, dataOneWindowStorage) {
        return new Promise((resolve, reject) => HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            let recipe = new RecipeRestore_RecipeSetStateOfSitecoreWindow(commandData.Logger, commandData.ScWinMan.GetTopLevelDoc(), commandData.ScWinMan.MakeScWinRecipeParts(), commandData.ScWinMan.DesktopProxy(), commandData.ScWinMan.ContentEditorProxy(), dataOneWindowStorage);
            yield recipe.Execute()
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    OpenContentEditor() {
        throw new Error("Method not implemented.");
    }
    Ping() {
        return new Promise((resolve, reject) => HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            resolve(MsgFlag.RespListeningAndReady);
        }));
    }
    AdminB() {
        this.ScUiMan.AdminB(this.ScWinMan.GetTopLevelDoc(), null);
    }
}


/***/ })
/******/ ]);