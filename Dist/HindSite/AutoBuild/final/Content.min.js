/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SnapShotFlavor.js
var SnapShotFlavor;
(function (SnapShotFlavor) {
    SnapShotFlavor[SnapShotFlavor["Unknown"] = 0] = "Unknown";
    SnapShotFlavor[SnapShotFlavor["Autosave"] = 1] = "Autosave";
    SnapShotFlavor[SnapShotFlavor["Favorite"] = 2] = "Favorite";
    SnapShotFlavor[SnapShotFlavor["Manual"] = 3] = "Manual";
    SnapShotFlavor[SnapShotFlavor["Live"] = 4] = "Live";
})(SnapShotFlavor || (SnapShotFlavor = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/LoggableBase.js
class _HindeCoreBase {
    constructor(hindeCore) {
        this.Logger = hindeCore.Logger;
        this.HindeCore = hindeCore;
        this.ErrorHand = hindeCore.ErrorHand;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/1xxx-MessageFlag.js
var MsgFlag;
(function (MsgFlag) {
    MsgFlag[MsgFlag["Unknown"] = 0] = "Unknown";
    MsgFlag[MsgFlag["GetAllStorageOneWindow"] = 1001] = "GetAllStorageOneWindow";
    MsgFlag[MsgFlag["NewWindowTest"] = 1002] = "NewWindowTest";
    MsgFlag[MsgFlag["Ping"] = 1003] = "Ping";
    MsgFlag[MsgFlag["ReqRemoveFromStorage"] = 1004] = "ReqRemoveFromStorage";
    MsgFlag[MsgFlag["ReqAddCETab"] = 1100] = "ReqAddCETab";
    MsgFlag[MsgFlag["ReqAdminB"] = 1101] = "ReqAdminB";
    MsgFlag[MsgFlag["ReqGoDesktop"] = 1102] = "ReqGoDesktop";
    MsgFlag[MsgFlag["ReqLoginWithAdminB"] = 1103] = "ReqLoginWithAdminB";
    MsgFlag[MsgFlag["ReqToggleFavorite"] = 1104] = "ReqToggleFavorite";
    MsgFlag[MsgFlag["ReqOpenCE"] = 1105] = "ReqOpenCE";
    MsgFlag[MsgFlag["ReqQuickPublish"] = 1106] = "ReqQuickPublish";
    MsgFlag[MsgFlag["ReqSetStateOfSitecoreSameWindow"] = 1107] = "ReqSetStateOfSitecoreSameWindow";
    MsgFlag[MsgFlag["Unused"] = 1108] = "Unused";
    MsgFlag[MsgFlag["ReqSetScModePreview"] = 1109] = "ReqSetScModePreview";
    MsgFlag[MsgFlag["ReqTakeSnapShot"] = 1110] = "ReqTakeSnapShot";
    MsgFlag[MsgFlag["ReqToggleCompactCss"] = 1111] = "ReqToggleCompactCss";
    MsgFlag[MsgFlag["ReqUpdateNickName"] = 1112] = "ReqUpdateNickName";
    MsgFlag[MsgFlag["RespCurState"] = 1200] = "RespCurState";
    MsgFlag[MsgFlag["RespTaskFailed"] = 1201] = "RespTaskFailed";
    MsgFlag[MsgFlag["RespListeningAndReady"] = 1202] = "RespListeningAndReady";
    MsgFlag[MsgFlag["_unused"] = 1203] = "_unused";
    MsgFlag[MsgFlag["RespTaskSuccessful"] = 1204] = "RespTaskSuccessful";
    MsgFlag[MsgFlag["RespTest"] = 1205] = "RespTest";
    MsgFlag[MsgFlag["RespNotReady"] = 1206] = "RespNotReady";
    MsgFlag[MsgFlag["ReqClosePopUpWindow"] = 1207] = "ReqClosePopUpWindow";
    MsgFlag[MsgFlag["ReqOpenPresentationDetails"] = 1208] = "ReqOpenPresentationDetails";
    MsgFlag[MsgFlag["CancelCommand"] = 1209] = "CancelCommand";
    MsgFlag[MsgFlag["ReqSetScModeNormal"] = 1210] = "ReqSetScModeNormal";
    MsgFlag[MsgFlag["ReqSetScModeEdit"] = 1211] = "ReqSetScModeEdit";
    MsgFlag[MsgFlag["ReqSetStateOfSitecoreNewWindow"] = 1212] = "ReqSetStateOfSitecoreNewWindow";
    MsgFlag[MsgFlag["RespFailedDidNotValidate"] = 1213] = "RespFailedDidNotValidate";
    MsgFlag[MsgFlag["ReqDebugAutoSnapShot"] = 1214] = "ReqDebugAutoSnapShot";
    MsgFlag[MsgFlag["ReqDebugTriggerReload"] = 1215] = "ReqDebugTriggerReload";
    MsgFlag[MsgFlag["ReqDebugClearConsole"] = 1216] = "ReqDebugClearConsole";
    MsgFlag[MsgFlag["SetStateFromQueryString"] = 1217] = "SetStateFromQueryString";
    MsgFlag[MsgFlag["SetStateFromMostRecent"] = 1218] = "SetStateFromMostRecent";
    MsgFlag[MsgFlag["SetStateFromStorage"] = 1219] = "SetStateFromStorage";
})(MsgFlag || (MsgFlag = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/3xxx-SettingKey.js
var _3xxx_SettingKey_SettingKey;
(function (SettingKey) {
    SettingKey[SettingKey["unknown"] = 0] = "unknown";
    SettingKey[SettingKey["AutoLogin"] = 3100] = "AutoLogin";
    SettingKey[SettingKey["__dead"] = 3101] = "__dead";
    SettingKey[SettingKey["DebugKeepDialogOpen"] = 3102] = "DebugKeepDialogOpen";
    SettingKey[SettingKey["AutoSaveIntervalMin"] = 3103] = "AutoSaveIntervalMin";
    SettingKey[SettingKey["UseCompactCss"] = 3104] = "UseCompactCss";
    SettingKey[SettingKey["AutoSaveRetainDays"] = 3105] = "AutoSaveRetainDays";
    SettingKey[SettingKey["AutoRenameCeButton"] = 3106] = "AutoRenameCeButton";
    SettingKey[SettingKey["MaxAutoSaveCount"] = 3200] = "MaxAutoSaveCount";
    SettingKey[SettingKey["EnableDebugging"] = 3201] = "EnableDebugging";
    SettingKey[SettingKey["LgndPopUpLog"] = 3300] = "LgndPopUpLog";
    SettingKey[SettingKey["LgndForeSite"] = 3301] = "LgndForeSite";
    SettingKey[SettingKey["LgndHindSite"] = 3302] = "LgndHindSite";
    SettingKey[SettingKey["LgndSettings"] = 3303] = "LgndSettings";
    SettingKey[SettingKey["LgndContentState"] = 3304] = "LgndContentState";
    SettingKey[SettingKey["_unused_"] = 3305] = "_unused_";
    SettingKey[SettingKey["LgndMessages"] = 3306] = "LgndMessages";
    SettingKey[SettingKey["LgndBrowserState"] = 3307] = "LgndBrowserState";
    SettingKey[SettingKey["LgndPopUpState"] = 3308] = "LgndPopUpState";
    SettingKey[SettingKey["LastUsedLogToStorageKey"] = 3400] = "LastUsedLogToStorageKey";
    SettingKey[SettingKey["AutoSnapshotBeforeWindowChange"] = 3401] = "AutoSnapshotBeforeWindowChange";
    SettingKey[SettingKey["LgndPopUpDebug"] = 3402] = "LgndPopUpDebug";
    SettingKey[SettingKey["AutoRestoreState"] = 3403] = "AutoRestoreState";
    SettingKey[SettingKey["_not_used"] = 3404] = "_not_used";
})(_3xxx_SettingKey_SettingKey || (_3xxx_SettingKey_SettingKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferChar.js
var BufferChar;
(function (BufferChar) {
    BufferChar[BufferChar["space"] = 0] = "space";
    BufferChar[BufferChar["Nbsp"] = 1] = "Nbsp";
    BufferChar[BufferChar["Period"] = 2] = "Period";
    BufferChar[BufferChar["Zero"] = 3] = "Zero";
})(BufferChar || (BufferChar = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferDirection.js
var BufferDirection;
(function (BufferDirection) {
    BufferDirection[BufferDirection["left"] = 0] = "left";
    BufferDirection[BufferDirection["right"] = 1] = "right";
})(BufferDirection || (BufferDirection = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/scWindowType.js
var ScWindowType;
(function (ScWindowType) {
    ScWindowType[ScWindowType["Unknown"] = 0] = "Unknown";
    ScWindowType[ScWindowType["LoginPage"] = 1] = "LoginPage";
    ScWindowType[ScWindowType["Desktop"] = 2] = "Desktop";
    ScWindowType[ScWindowType["ContentEditor"] = 3] = "ContentEditor";
    ScWindowType[ScWindowType["Launchpad"] = 4] = "Launchpad";
    ScWindowType[ScWindowType["Edit"] = 5] = "Edit";
    ScWindowType[ScWindowType["Normal"] = 6] = "Normal";
    ScWindowType[ScWindowType["Preview"] = 7] = "Preview";
    ScWindowType[ScWindowType["MediaLibrary"] = 8] = "MediaLibrary";
    ScWindowType[ScWindowType["PackageDesigner"] = 9] = "PackageDesigner";
    ScWindowType[ScWindowType["InstallationWizard"] = 10] = "InstallationWizard";
})(ScWindowType || (ScWindowType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/StaticHelpers.js






class StaticHelpers_StaticHelpers {
    static MinToMs(minutes) {
        return minutes * 60 * 1000;
    }
    static FlavorAsString(flavor) {
        return 'Flavor.' + SnapShotFlavor[flavor] + '(' + flavor + ')';
    }
    static SettingKeyAsString(settingKey) {
        let toReturn = '';
        try {
            toReturn = 'SettingKey.' + _3xxx_SettingKey_SettingKey[settingKey] + '(' + settingKey + ')';
        }
        catch (err) {
            toReturn = err;
        }
        return toReturn;
    }
    static ScWindowTypeFriendly(windowType) {
        return ScWindowType[windowType];
    }
    static MakeFriendlyDate(date) {
        var toReturn = '';
        var workingDate = new Date(date);
        if (workingDate) {
            var month = StaticHelpers_StaticHelpers.BufferString((workingDate.getMonth() + 1).toString(), 2, BufferChar.Zero, BufferDirection.left);
            var day = StaticHelpers_StaticHelpers.BufferString(workingDate.getDate().toString(), 2, BufferChar.Zero, BufferDirection.left);
            var min = StaticHelpers_StaticHelpers.BufferString(workingDate.getMinutes().toString(), 2, BufferChar.Zero, BufferDirection.left);
            var hoursRaw = workingDate.getHours();
            var hourClean = hoursRaw ? hoursRaw : 12;
            var hourCleanStr = StaticHelpers_StaticHelpers.BufferString(hourClean.toString(), 2, BufferChar.Zero, BufferDirection.left);
            toReturn = month + '.' + day + ' ' + hourCleanStr + ':' + min;
        }
        else {
            toReturn = '{error}';
            throw (this.MakeFriendlyDate.name, 'no date provided');
        }
        return toReturn;
    }
    static IsNullOrUndefined(testSubject) {
        let toReturn = false;
        try {
            if (testSubject instanceof Array) {
                testSubject.forEach((testSubject) => toReturn = toReturn || this.IsNullOrUndefined(testSubject));
            }
            else {
                toReturn = (typeof testSubject === 'undefined' || testSubject === null);
            }
        }
        catch (err) {
            console.log(err);
        }
        return toReturn;
    }
    static getBuffChar(buffCharEnum) {
        var buffChar = ' ';
        if (buffCharEnum === BufferChar.space) {
            buffChar = ' ';
        }
        else if (buffCharEnum === BufferChar.Nbsp) {
            buffChar = '&nbsp;';
        }
        else if (buffCharEnum === BufferChar.Period) {
            buffChar = '.';
        }
        else if (buffCharEnum === BufferChar.Zero) {
            buffChar = '0';
        }
        return buffChar;
    }
    static BufferString(str, desiredLength, buffCharEnum, direction) {
        var toReturn = str;
        var buffChar = this.getBuffChar(buffCharEnum);
        if (toReturn.length > desiredLength) {
            if (desiredLength > 6) {
                toReturn = toReturn.substring(0, desiredLength - 3) + '...';
            }
            else {
                toReturn = toReturn.substring(0, desiredLength);
            }
        }
        if (toReturn.length < desiredLength) {
            var bufferCharNeeded = desiredLength - toReturn.length;
            for (var idx = 0; idx < bufferCharNeeded; idx++) {
                if (direction === BufferDirection.left) {
                    toReturn = buffChar + toReturn;
                }
                else {
                    toReturn = toReturn + buffChar;
                }
            }
        }
        return toReturn;
    }
    static MsgFlagAsString(msg) {
        var toReturn = "{error}";
        if (msg) {
            try {
                toReturn = 'MsgFlag.' + MsgFlag[msg] + '(' + msg + ')';
            }
            catch (err) {
                console.log(this.MsgFlagAsString.name + ' ' + err);
            }
        }
        return 'flag: ' + toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultFriendly.js


class DefaultFriendly_DefaultFriendly {
    constructor() {
        this.Flavor = SnapShotFlavor[SnapShotFlavor.Live];
        this.NickName = '';
        this.TimeStamp = '';
        this.WindowType = ScWindowType[ScWindowType.Unknown];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/GuidData.js

let GuidData_GuidData = (() => {
    class GuidData {
        constructor(raw = null) {
            if (!raw) {
                this.Raw = GuidData.ConstEmptyGuid;
            }
            else {
                if (Guid_Guid.IsValidGuidStr(raw)) {
                    this.Raw = Guid_Guid.GuidStrWithDashes(raw);
                }
                else {
                    throw ('Invalid GUID string: ' + raw);
                }
            }
        }
    }
    GuidData.ConstEmptyGuid = '00000000-0000-0000-0000-000000000000';
    return GuidData;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/Guid.js

let Guid_Guid = (() => {
    class Guid {
        static NewRandomGuid() {
            let newGuid = new Guid();
            let randomStr = newGuid.GetRandomGuidString();
            let toReturn = new GuidData_GuidData(randomStr);
            return toReturn;
        }
        static GetEmptyGuid() {
            return new GuidData_GuidData();
        }
        static AsBracedGuid(guidData) {
            return '{' + guidData.Raw + "}";
        }
        static IsValidGuidStr(candidateStr) {
            let toReturn = false;
            let regexGuid = '^[\}]?[0-9a-f]{8}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{12}[\}]?$';
            let pattern = new RegExp(regexGuid, 'i');
            toReturn = pattern.test(candidateStr);
            return toReturn;
        }
        static AsShort(guidData) {
            var toReturn = '{error}';
            if (guidData) {
                if (this.IsValidGuidStr(guidData.Raw)) {
                    toReturn = guidData.Raw.substr(0, Guid.ShortGuidLength);
                }
                else {
                    toReturn = '{error - invalid guid string: ' + guidData.Raw + '}';
                }
            }
            return toReturn;
        }
        static WithoutDashes(guiddata) {
            let withoutDashes = guiddata.Raw.replace(/-/g, '');
            return withoutDashes;
        }
        static ParseGuid(val, throwOnError) {
            return new GuidData_GuidData(val);
        }
        MakeNewRandomGuid() {
            let randomStr = this.GetRandomGuidString();
            return new GuidData_GuidData(randomStr);
        }
        static GuidStrWithDashes(val) {
            let toReturn = '';
            let withoutDashes = val.replace(/-/g, '');
            var parts = [];
            if (withoutDashes.length !== 32) {
                throw (this.GuidStrWithDashes.name + ' - Wrong count wanted: ' + 32 + " got: " + withoutDashes.length + ' (without dashes) ' + withoutDashes);
            }
            parts.push(withoutDashes.slice(0, 8));
            parts.push(withoutDashes.slice(8, 12));
            parts.push(withoutDashes.slice(12, 16));
            parts.push(withoutDashes.slice(16, 20));
            parts.push(withoutDashes.slice(20, 32));
            toReturn = parts.join('-');
            return toReturn;
        }
        GetRandomGuidString() {
            var toReturn;
            var temp = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
            toReturn = temp.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0;
                var v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
            return toReturn;
        }
        MakeGuidFromString(val, throwOnError) {
            let toReturn = new GuidData_GuidData(val);
            return toReturn;
        }
    }
    Guid.ShortGuidLength = 4;
    return Guid;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultMetaData.js



class DefaultMetaData_DefaultMetaData {
    constructor() {
        this.Flavor = SnapShotFlavor.Live;
        this.SessionId = '';
        this.SnapshotId = Guid_Guid.NewRandomGuid();
        this.StorageKey = '';
        this.TimeStamp = null;
        this.WindowType = ScWindowType.Unknown;
        this.Hash = -1;
        this.StorageId = Guid_Guid.NewRandomGuid();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfDTArea.js
class DefaultStateOfDTArea {
    constructor() {
        this.StateOfDTFrames = [];
        this.ActiveDTFrameIndex = -1;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfDesktop.js

class DefaultStateOfDesktop_DefaultStateOfDesktop {
    constructor() {
        this.StateOfDTArea = new DefaultStateOfDTArea();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfContentTree.js
class DefaultStateOfContentTree {
    constructor() {
        this.ActiveNodeFlat = null;
        this.StateOfScContentTreeNodeDeep = null;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfContentEditor.js

class DefaultStateOfContentEditor_DefaultStateOfContentEditor {
    constructor() {
        this.StateOfContentTree = new DefaultStateOfContentTree();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfScWindowProxy.js


class DefaultStateOfScWindowProxy_DefaultStateOfScWindowProxy {
    constructor() {
        this.StateOfContentEditor = new DefaultStateOfContentEditor_DefaultStateOfContentEditor;
        this.StateOfDesktop = new DefaultStateOfDesktop_DefaultStateOfDesktop();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfScUiProxy.js




class DefaultStateOfScUiProxy_DefaultStateOfScUiProxy {
    constructor() {
        this.Friendly = new DefaultFriendly_DefaultFriendly();
        this.Meta = new DefaultMetaData_DefaultMetaData();
        this.ErrorStackScUiProxy = [];
        this.StateOfScWindow = new DefaultStateOfScWindowProxy_DefaultStateOfScWindowProxy();
        this.Meta.TimeStamp = new Date();
        this.Friendly.TimeStamp = StaticHelpers_StaticHelpers.MakeFriendlyDate(this.Meta.TimeStamp);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/FrameProxies/_BaseFrameProxy.js
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class _BaseFrameProxy_BaseFrameProxy extends _HindeCoreBase {
    constructor(hindeCore, iframeElem) {
        super(hindeCore);
        this.Index = -1;
        this.HTMLIframeElement = null;
        this.Id = null;
        this.Discriminator = _BaseFrameProxy_BaseFrameProxy.name;
        this.Friendly = '{unknown friendly}';
        this.ErrorHand.ThrowIfNullOrUndefined(_BaseFrameProxy_BaseFrameProxy.name, [iframeElem]);
        this.HTMLIframeElement = iframeElem;
        this.Id = Guid_Guid.NewRandomGuid();
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
    }
    GetZindexAsInt() {
        let toReturn = -99;
        if (this.HTMLIframeElement && this.HTMLIframeElement.style && this.HTMLIframeElement.style.zIndex) {
            toReturn = parseInt(this.HTMLIframeElement.style.zIndex);
        }
        return toReturn;
    }
    WaitForCompleteNABFrameProxyOrReject() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForCompleteNABFrameProxyOrReject.name, this.Friendly);
                yield this.RecipeBasics.WaitForCompleteNABHtmlIframeElement(this.HTMLIframeElement, this.Friendly)
                    .then((result) => {
                    result.LogDebugValues();
                    if (result.IsCompleteNAB()) {
                        this.Logger.Log('it says it is complete');
                        resolve(result.DocumentReadyState());
                    }
                    else {
                        this.Logger.Log('rejecting');
                        reject(result.DocumentReadtStateFriendly);
                    }
                })
                    .catch((err) => reject(this.WaitForCompleteNABFrameProxyOrReject.name + ' | ' + err));
                this.Logger.FuncEnd(this.WaitForCompleteNABFrameProxyOrReject.name, this.Friendly);
            }));
        });
    }
    GetContentDoc() {
        return new FactoryHelper_FactoryHelper(this.HindeCore).DataOneContentDocFactoryFromIframe(this);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/Agents/InitResultsDTFrameProxy.js
class ReportResultsInitDTFrameProxy {
    constructor() {
        this.DTFrameProxyInitialized = false;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/Agents/InitResultContentEditorProxy.js
class InitReportContentEditorProxy {
    constructor() {
        this.ContentEditorProxyInitialized = false;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/InjectConst.js
let ContentConst = (() => {
    class ContentConst {
    }
    ContentConst.Const = {
        MaxAutoToSaveCount: 10,
        DefaultMaxAutoSaveAgeDays: 7,
        DefaultAutoRenameCeTabButton: false,
        DefaultShowDebuggingModules: false,
        Iterations: {
            MaxSetHrefEffort: 10,
            MaxIterationSwitchBoard: 20,
        },
        Timeouts: {
            PostLoginBtnClick: 1000,
            SetHrefEffortWait: 1000,
            WaitBeforeRemovingCompleteFlagOnContent: 1500,
            AutoSaveIntervalMin: 1,
        },
        ElemId: {
            sc: {
                scLoginPassword: 'Password',
                scLoginUserName: 'UserName',
                SitecoreRootAnchorNodeId: 'Tree_Node_11111111111111111111111111111111',
                SitecoreRootApparentIdRaw: '11111111111111111111111111111111',
                SitecoreRootGlyphId: 'Tree_Glyph_11111111111111111111111111111111',
                scLoginBtn: {
                    sc920: 'LogInBtn',
                    sc820: null
                },
            }
        },
        ClassNames: {
            SC: {
                ContentTreeNode: 'scContentTreeNode',
                scContentTreeNodeActive: 'scContentTreeNodeActive',
                scContentTreeNodeNormal: 'scContentTreeNodeNormal',
            }
        },
        Selector: {
            SC: {
                ContentEditor: {
                    ScContentTreeNodeGlyph: '.scContentTreeNodeGlyph',
                    ScContentTreeNode: '.scContentTreeNode',
                    RootAnchorNode: '[id=Tree_Node_11111111111111111111111111111111]',
                    ScContentTreeContainer: '.scContentTreeContainer',
                    scContentTreeNodeIcon: '.scContentTreeNodeIcon',
                },
                Level2Nodes: {
                    MediaLibraryAnchorRootNode: '[id=Tree_Node_3D6658D8A0BF4E75B3E2D050FABCF4E1]',
                    TemplatesAnchorRootNode: '[id=Tree_Node_3C1715FE6A134FCF845FDE308BA9741D]',
                    LayoutRootAnchorNode: '[id=Tree_Node_EB2E4FFD27614653B05226A64D385227]',
                    SystemRootAnchorNode: '[id=Tree_Node_13D6D6C6C50B4BBDB3312B04F1A58F21]',
                    ContentRootAnchorNode: '[id=Tree_Node_0DE95AE441AB4D019EB067441B7C2450]',
                },
                IdStartsWithTreeNode: '[id^=Tree_Node_]',
                IframeContent: {
                    sc820: null,
                    sc920: 'iframe[src*=Content], iframe[src*=MediaShop]'
                },
                JqueryModalDialogsFrame: '[id=jqueryModalDialogsFrame]',
                ContentIframe0: '[id=scContentIframeId0]',
                NextButton: '[id=NextButton]',
                ContentIFrame1: '[id=scContentIframeId1]',
                Ok: '[id=OK]',
                Cancel: '[id=CancelButton]',
                MenuButtonPublish: '[id=B414550BADAF4542C9ADF44BED5FA6CB3E_menu_button]',
                MenuDropDownPublishItem: '[id=B414550BADAF4542C9ADF44BED5FA6CB3E_menu_98719A90225A4802A0625D3967E4DD47]',
                NavPublishStrip: '[id*=_Nav_PublishStrip]',
                StartMenuLeftOption: '.scStartMenuLeftOption',
                Publish: {
                    TheItemHasBeenPublished: '[id=LastPage]:not([style*=\'display:none\'])',
                    SettingsHidden: '[id=Settings][style*=\'display: none\']',
                    PublishingHidden: '[id=Publishing][style*=\'display: none\']',
                },
                LoginBtn: {
                    sc920: null,
                    sc820: 'input.btn',
                },
                scStartButton: {
                    sc920: '[id=StartButton]',
                    sc820: '[id=startButton]'
                },
                Desktop: {
                    DtStartBar: '[id=Startbar]',
                    ContentTreeHolder: '[id=ContentTreeHolder]',
                },
            },
        },
        Storage: {
            SettingsSuffix: '.Settings',
            ShowDebugData: false,
            SnapShotPrefix: 'ScSnapShot.',
            WindowRoot: 'HindSite.',
            SessionKey: 'HindSite.SessionKey',
        },
        Numbers: {
            Desktop: {
                MaxToolBarNameChars: 13,
                TimeNewCEWaitForScOverlayToClearMs: 1500,
            }
        },
        MaxIter: 100,
        MaxNullOrUndefinedIter: 100,
        prop: {
            AllTreeData: 'AllTreeData',
        },
        Names: {
            SC: {
                TreeGlyphPrefix: 'Tree_Glyph_',
                TreeNodePrefix: 'Tree_Node_',
                TreeExpandedPng: {
                    sc920: 'treemenu_expanded.png',
                    sc820: 'todo'
                }
            },
            Desktop: {
                StartBarApplicationPrefix: 'startbar_application_',
            },
            PopUpUi: 'PopUpUi',
            PopUpUiStyles: 'PopUpUiStyles',
            TreeMenuExpandedPng: 'treemenu_expanded.png',
            TreeMenuCollapsedPng: 'treemenu_collapsed.png',
            scDefaultAdminPassword: 'b',
            scDefaultAdminUserName: 'admin',
        }
    };
    return ContentConst;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/SharedConst.js
let SharedConst = (() => {
    class SharedConst {
    }
    SharedConst.Const = {
        Debug: {
            ForceLoggingEnabled: false,
            SpeedUpAutoSaveIntervalFactor: 3,
        },
        IterHelper: {
            GrowthPerIteration: 0.5,
            MaxCount: {
                Default: 10,
                OverridePublishing: 15,
            },
            Timeouts: {
                Max: 3000,
                Default: 100,
            },
        },
        KeyWords: {
            Html: {
                beforeend: 'beforeend',
                optgroup: 'optgroup',
                Checkbox: 'checkbox',
                Checked: 'checked',
                Input: 'input',
                Label: 'label',
                For: 'for',
                Text: 'text',
                Number: 'number',
            },
            Javascript: {
                ReadyStates: {
                    Complete: "complete"
                }
            }
        },
        Logger: {
            MinTimeDiffMs: 100
        },
        ObjDiscriminator: {},
        Settings: {
            Defaults: {
                EnableDebugging: false,
                LogToStorage: false,
                UseCompactCss: false,
                LastUsedLogToStorageKey: 0
            }
        },
        Regex: {
            ContentEditor: /Content.*?Editor/ig,
            CleanGuid: /{|-|}/ig,
            NbSp: /&nbsp;/ig,
            QueryStrSeparatorQuest: /\?/gi,
            PageType: {
                Desktop: /.*default.aspx/ig,
                Edit: /sc_itemid=.*sc_mode=edit/ig,
                Normal: /sc_itemid=.*sc_mode=normal/ig,
                Preview: /sc_itemid=.*sc_mode=preview/ig,
            },
        },
        UrlSuffix: {
            Desktop: '/sitecore/shell/default.aspx',
            Login: '/sitecore/login',
            LaunchPad: '/client/applications/launchpad',
            CE: '/sitecore/shell/Applications/Content Editor.aspx?sc_bw=1',
            SitecoreShellApplicationsContentEditor: 'sitecore/shell/Applications/Content-Editor',
            None: '/',
            AboutBlank: 'about:blank',
        },
    };
    return SharedConst;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/_HindSiteEvent/HindeSiteEvent_Subject.js




class HindeSiteEvent_Subject_HindeSiteEvent_Subject extends _HindeCoreBase {
    constructor(hindeCore, friendly) {
        super(hindeCore);
        this.ObserverCollection = [];
        this.Friendly_Subject = friendly;
    }
    DisableNotifications() {
        this.IsMuted = true;
    }
    EnableNotifications() {
        this.IsMuted = false;
    }
    HasObservers() {
        return this.ObserverCollection && this.ObserverCollection.length > 0;
    }
    RegisterObserver(observer) {
        if (observer) {
            if (this.ObserverCollection.indexOf(observer) < 0) {
                this.ObserverCollection.push(observer);
                this.Logger.Log(this.RegisterObserver.name + ' ' + observer.Friendly + ' to ' + this.Friendly_Subject + ' - count after: ' + this.ObserverCollection.length.toString());
            }
            else {
                this.ErrorHand.WarningAndContinue(this.RegisterObserver.name, 'Observer already registered');
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.RegisterObserver.name, 'Observer is null');
        }
    }
    UnregisterObserver(observer) {
        this.Logger.FuncStart(this.UnregisterObserver.name);
        if (observer) {
            let observerIndex = this.ObserverCollection.indexOf(observer);
            if (observerIndex > -1) {
                this.ObserverCollection.splice(observerIndex, 1);
            }
        }
        this.Logger.FuncEnd(this.UnregisterObserver.name);
    }
    NotifyObserversAsync(payload) {
        let bufferedFriendly = StaticHelpers_StaticHelpers.BufferString(this.Friendly_Subject, 20, BufferChar.Period, BufferDirection.right);
        this.Logger.FuncStart(this.NotifyObserversAsync.name + ' of: ' + bufferedFriendly, ' obs. count: ' + this.ObserverCollection.length);
        if (!this.IsMuted) {
            this.ObserverCollection.forEach((observer) => {
                observer.UpdateAsync(payload);
            });
        }
        else {
            this.Logger.Log('not Notifying...Subject is muted');
        }
        this.Logger.FuncEnd(this.NotifyObserversAsync.name + ' of: ' + bufferedFriendly, ' obs. count: ' + this.ObserverCollection.length);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/ContentEditorProxyMutationEvent/ContentEditorProxyMutationEvent_Subject.js

class ContentEditorProxyMutationEvent_Subject_ContentEditorProxyMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore) {
        super(hindeCore, ContentEditorProxyMutationEvent_Subject_ContentEditorProxyMutationEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/PromiseResult.js

class PromiseResult_PromiseResult extends _HindeCoreBase {
    constructor(nickname, hindeCore) {
        super(hindeCore);
        this.prefix = 'Promise Successful? -> ';
        this.NickName = nickname;
    }
    WasSuccessful() {
        return this.Success;
    }
    MarkSuccessful() {
        this.Success = true;
        if (this.Logger) {
            this.Logger.LogVal(this.prefix + this.NickName, this.Success);
        }
        else {
            console.log('no logger success');
        }
    }
    MarkFailed(ex) {
        if (ex) {
            ex = ex.toString();
        }
        else {
            ex = '{no fail message}';
        }
        this.RejectReasons += ', ' + ex;
        this.Success = false;
        if (this.Logger) {
            this.ErrorHand.ErrorAndThrow(this.prefix + this.NickName, this.Success + '  err: ' + ex);
        }
        else {
            console.log('no logger fail ' + ex);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentEditorPublishProxy.js
var ContentEditorPublishProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class ContentEditorPublishProxy_ContentEditorPublishProxy extends _HindeCoreBase {
    constructor(hindeCore, contentEditorProxy, associatedDoc) {
        super(hindeCore);
        this.ContentEditorProxy = contentEditorProxy;
        this.AssociatedDoc = associatedDoc;
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
        this.FactoryHelp = new FactoryHelper_FactoryHelper(this.HindeCore);
    }
    Execute() {
        return new Promise((resolve, reject) => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            yield this.PublishActiveCE()
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    GetDocToPublish(scWindowType, targetDoc) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetDocToPublish.name);
                try {
                    if (scWindowType === ScWindowType.Desktop) {
                        yield this.RecipeBasics.GetTopLevelIframe(targetDoc)
                            .then((topIframe) => {
                            resolve(topIframe.GetContentDoc());
                        })
                            .catch((err) => reject(this.GetDocToPublish.name + ' ' + err));
                    }
                    else {
                        resolve(this.AssociatedDoc);
                    }
                }
                catch (err) {
                    reject(this.GetDocToPublish.name + ' ' + err);
                }
                this.Logger.FuncEnd(this.GetDocToPublish.name);
            }));
        });
    }
    PublishActiveCE() {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.PublishActiveCE.name);
            try {
                yield this.PublishCE(this.AssociatedDoc)
                    .catch((err) => { throw (err); });
            }
            catch (err) {
                throw (this.PublishActiveCE.name + ' ' + err);
            }
            this.Logger.FuncEnd(this.PublishActiveCE.name);
        });
    }
    __debugDataPublishChain(dataPublishChain, nickname) {
        this.Logger.FuncStart(this.__debugDataPublishChain.name, nickname);
        this.Logger.LogVal('docToPublish', this.Logger.IsNullOrUndefined(dataPublishChain.DocToPublish));
        this.Logger.LogVal('jqIframe', this.Logger.IsNullOrUndefined(dataPublishChain.JqIframe) + ' ' + (dataPublishChain.JqIframe ? dataPublishChain.JqIframe.HTMLIframeElement.src : ''));
        this.Logger.LogVal('Iframe0blueIframe', this.Logger.IsNullOrUndefined(dataPublishChain.Iframe0Blue) + ' ' + (dataPublishChain.Iframe0Blue ? dataPublishChain.Iframe0Blue.HTMLIframeElement.src : ''));
        this.Logger.LogVal('messageDialogIframeRed', this.Logger.IsNullOrUndefined(dataPublishChain.MessageDialogIframeRed) + ' ' + (dataPublishChain.MessageDialogIframeRed ? dataPublishChain.MessageDialogIframeRed.HTMLIframeElement.src : ''));
        this.Logger.FuncEnd(this.__debugDataPublishChain.name);
        return dataPublishChain;
    }
    PublishCE(docToPublish) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.PublishCE.name);
            try {
                var dataPublishChain = {
                    DocToPublish: docToPublish,
                    TopLevelDoc: this.AssociatedDoc,
                    Iframe0Blue: null,
                    JqIframe: null,
                    MessageDialogIframeRed: null
                };
                yield this.ClickPublishOnNav(dataPublishChain)
                    .then((dataPublishChain) => this.ClickMenuButtonPublishDropDown(dataPublishChain))
                    .then((dataPublishChain) => this.ClickMenuDropDownPublishItem(dataPublishChain))
                    .then((dataPublishChain) => this.GetThePublishItemDialog(dataPublishChain))
                    .then((dataPublishChain) => this.GetDialogIframe0Blue(dataPublishChain))
                    .then((dataPublishChain) => this.__WaitForAndClickPublishNextButton(dataPublishChain))
                    .then((dataPublishChain) => this.GetMessageDialog(dataPublishChain))
                    .then((dataPublishChain) => this.__waitForAndClickOk(dataPublishChain))
                    .then((dataPublishChain) => this.__waitForAndClickClose(dataPublishChain))
                    .catch(ex => {
                    this.ErrorHand.ErrorAndThrow(this.PublishCE.name, ex);
                });
            }
            catch (err) {
                throw (this.PublishCE.name + ' ' + err);
            }
            this.Logger.FuncEnd(this.PublishCE.name);
        });
    }
    ClickPublishOnNav(payload) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.ClickPublishOnNav.name);
            try {
                yield this.RecipeBasics.WaitForThenClick([ContentConst.Const.Selector.SC.NavPublishStrip], payload.DocToPublish);
                yield this.RecipeBasics.WaitForThenClick([ContentConst.Const.Selector.SC.NavPublishStrip], payload.DocToPublish);
            }
            catch (err) {
                throw (this.ClickPublishOnNav.name + ' ' + err);
            }
            this.Logger.FuncEnd(this.ClickPublishOnNav.name);
            return payload;
        });
    }
    __waitForAndClickClose(dataPublishChain) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            yield this.RecipeBasics.WaitForAndReturnFoundElem(dataPublishChain.Iframe0Blue.GetContentDoc(), ContentConst.Const.Selector.SC.Publish.SettingsHidden)
                .then(() => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
                yield this.RecipeBasics.WaitForAndReturnFoundElem(dataPublishChain.Iframe0Blue.GetContentDoc(), ContentConst.Const.Selector.SC.Publish.TheItemHasBeenPublished, SharedConst.Const.IterHelper.MaxCount.OverridePublishing);
            }))
                .then(() => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
                yield this.RecipeBasics.WaitForThenClick([ContentConst.Const.Selector.SC.Cancel], dataPublishChain.Iframe0Blue.GetContentDoc());
            }));
            return dataPublishChain;
        });
    }
    __waitForAndClickOk(dataPublishChain) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            yield this.RecipeBasics.WaitForThenClick([ContentConst.Const.Selector.SC.Ok], dataPublishChain.MessageDialogIframeRed.GetContentDoc());
            return dataPublishChain;
        });
    }
    __WaitForAndClickPublishNextButton(dataPublishChain) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            yield this.RecipeBasics.WaitForThenClick([ContentConst.Const.Selector.SC.NextButton], dataPublishChain.Iframe0Blue.GetContentDoc());
            return dataPublishChain;
        });
    }
    ClickMenuButtonPublishDropDown(payload = null) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            yield this.RecipeBasics.WaitForThenClick([ContentConst.Const.Selector.SC.MenuButtonPublish], payload.DocToPublish);
            return payload;
        });
    }
    ClickMenuDropDownPublishItem(payload = null) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            return yield this.RecipeBasics.WaitForAndClickWithPayload(ContentConst.Const.Selector.SC.MenuDropDownPublishItem, payload.DocToPublish, payload);
        });
    }
    GetThePublishItemDialog(dataPublishChain = null) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            try {
                yield this.RecipeBasics.WaitForAndReturnFoundElem(dataPublishChain.TopLevelDoc, ContentConst.Const.Selector.SC.JqueryModalDialogsFrame)
                    .then((found) => this.FactoryHelp.BaseFramePromiseFactory(found, 'jqIframe'))
                    .then((result) => dataPublishChain.JqIframe = result)
                    .then(() => dataPublishChain.JqIframe.WaitForCompleteNABFrameProxyOrReject())
                    .catch((err) => { throw (this.GetThePublishItemDialog.name + ' ' + err); });
            }
            catch (err) {
                throw (this.GetThePublishItemDialog.name + ' ' + err);
            }
            return dataPublishChain;
        });
    }
    GetMessageDialog(dataPublishChain) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            let toReturnPublishChain = dataPublishChain;
            yield this.RecipeBasics.WaitForIframeElemAndReturnWhenReady(dataPublishChain.JqIframe.GetContentDoc(), ContentConst.Const.Selector.SC.ContentIFrame1, 'iframeRed')
                .then((result) => toReturnPublishChain.MessageDialogIframeRed = result)
                .catch((err) => this.ErrorHand.ErrorAndThrow(this.GetMessageDialog.name, err));
            return toReturnPublishChain;
        });
    }
    GetDialogIframe0Blue(dataPublishChain = null) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetDialogIframe0Blue.name);
                let promiseResult = new PromiseResult_PromiseResult(this.GetDialogIframe0Blue.name, this.HindeCore);
                this.Logger.LogAsJsonPretty('dataPublishChain', dataPublishChain);
                yield this.RecipeBasics.WaitForIframeElemAndReturnWhenReady(dataPublishChain.JqIframe.GetContentDoc(), ContentConst.Const.Selector.SC.ContentIframe0, 'Iframe0Blue')
                    .then((result) => {
                    this.Logger.MarkerC();
                    dataPublishChain.Iframe0Blue = result;
                    promiseResult.MarkSuccessful();
                })
                    .catch((err) => promiseResult.MarkFailed(err));
                this.Logger.LogAsJsonPretty('dataPublishChain.Iframe0Blue', dataPublishChain.Iframe0Blue);
                this.Logger.FuncEnd(this.GetDialogIframe0Blue.name);
                if (promiseResult.WasSuccessful()) {
                    resolve(dataPublishChain);
                }
                else {
                    reject(promiseResult.RejectReasons);
                }
            }));
        });
    }
    __waitForThenFunc(selector, targetDoc, dataPublishChain, optionFunc) {
        return new Promise((resolve, reject) => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.__waitForThenFunc.name, selector);
            this.Logger.LogAsJsonPretty(this.__waitForThenFunc.name, targetDoc);
            var found = null;
            yield this.RecipeBasics.WaitForAndReturnFoundElem(targetDoc, selector)
                .then((result) => found = result);
            if (found) {
                this.Logger.Log('found');
                if (optionFunc) {
                    this.Logger.Log('executing func');
                    dataPublishChain = yield optionFunc(found, dataPublishChain);
                }
                this.__debugDataPublishChain(dataPublishChain, this.__waitForThenFunc.name);
                this.Logger.FuncEnd(this.__waitForThenFunc.name, selector);
                resolve(dataPublishChain);
            }
            else {
                reject('not found');
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Drones/IterationDrone/IterationDrone.js


class IterationDrone_IterationDrone extends _HindeCoreBase {
    constructor(hindeCore, nickname, logThisDroneInstance, maxIterations = null) {
        super(hindeCore);
        this.IsExhaustedMsg = 'Iteration helper exhausted';
        this.LogThisDroneInstance = logThisDroneInstance;
        if (!maxIterations) {
            maxIterations = SharedConst.Const.IterHelper.MaxCount.Default;
        }
        this.MaxIterations = maxIterations;
        this.CurrentIteration = maxIterations;
        this.Timeout = SharedConst.Const.IterHelper.Timeouts.Default;
        this.NickName = nickname;
        this.IsExhausted = false;
    }
    DecrementAndKeepGoing() {
        var toReturn = false;
        if (this.CurrentIteration > 0) {
            this.CurrentIteration -= 1;
            this.Timeout += this.Timeout * SharedConst.Const.IterHelper.GrowthPerIteration;
            if (this.Logger.CancelRequestedFlag === true) {
                this.ErrorHand.ErrorAndThrow('CANCEL REQUESTED', '-----------------------------------');
            }
            if (this.Timeout > SharedConst.Const.IterHelper.Timeouts.Max) {
                this.Timeout = SharedConst.Const.IterHelper.Timeouts.Max;
            }
            if (this.LogThisDroneInstance) {
                this.Logger.Log(this.DecrementAndKeepGoing.name + ' ' + this.NickName + ' ' + this.CurrentIteration + ':' + this.MaxIterations + ' | cur. timeout: ' + this.Timeout);
            }
            toReturn = true;
        }
        else {
            this.IsExhausted = true;
            this.NotifyExhausted();
            toReturn = false;
        }
        return toReturn;
    }
    CurrentTimeout() {
        return this.Timeout;
    }
    NotifyExhausted() {
        if (this.LogThisDroneInstance) {
            this.Logger.Log('Iteration: ' + this.NickName + ' counter exhausted ' + this.CurrentIteration + ':' + this.MaxIterations);
        }
    }
    WaitAndThen(timeoutFunction) {
        if (this.LogThisDroneInstance) {
            this.Logger.FuncStart(this.WaitAndThen.name, this.NickName + ' ' + timeoutFunction.name);
        }
        var self = this;
        setTimeout(timeoutFunction(), self.Timeout);
        if (this.LogThisDroneInstance) {
            this.Logger.FuncEnd(this.WaitAndThen.name, this.NickName);
        }
    }
    Wait() {
        if (!this.OperationCancelled) {
            return new Promise((resolve) => {
                setTimeout(resolve, this.Timeout);
            });
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/Agents/InitResultTreeProxy.js
class InitReportTreeProxy {
    constructor() {
        this.TreeInstantiated = false;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/NativeClassNameChangeEvent/NativeClassNameChangeEvent_Subject.js
var NativeClassNameChangeEvent_Subject_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class NativeClassNameChangeEvent_Subject_NativeClassNameChangeEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore, treeElement) {
        super(hindeCore, NativeClassNameChangeEvent_Subject_NativeClassNameChangeEvent_Subject.name);
        this.TreeElement = treeElement;
        this.InitTreeMutationEvent_Observer();
    }
    InitTreeMutationEvent_Observer() {
        try {
            if (this.TreeElement) {
                let self = this;
                let observer = new MutationObserver((mutations) => self.OnNativeMutationEvent(mutations));
                observer.observe(this.TreeElement, { attributes: true, subtree: true, childList: true });
            }
        }
        catch (err) {
            throw (this.InitTreeMutationEvent_Observer.name + ' | ' + err);
        }
    }
    OnNativeMutationEvent(mutationRecords) {
        mutationRecords.forEach((mutationRecord, index) => NativeClassNameChangeEvent_Subject_awaiter(this, void 0, void 0, function* () {
            if (mutationRecord.attributeName === 'class') {
                let anchorTest = (mutationRecord.target);
                if (anchorTest) {
                    if (anchorTest.classList.contains(ContentConst.Const.ClassNames.SC.scContentTreeNodeActive)) {
                        this.NotifyObserversAsync(null);
                    }
                }
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/_HindSiteEvent/HindSiteEvent_Observer.js

class HindSiteEvent_Observer_HindSiteEvent_Observer extends _HindeCoreBase {
    constructor(hindeCore, friendly, callbackAsync = null) {
        super(hindeCore);
        this.CallbackAsync = null;
        this.CallbackAsync = callbackAsync;
        this.Friendly = friendly;
    }
    UpdateAsync(payload) {
        try {
            if (this.CallbackAsync) {
                this.CallbackAsync(payload);
            }
        }
        catch (err) {
            this.ErrorHand.ErrorAndContinue(HindSiteEvent_Observer_HindSiteEvent_Observer.name, err);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/TreeMutationEvent/NativeClassNameChangeEvent_Observer.js

class NativeClassNameChangeEvent_Observer_NativeClassNameChangeEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, NativeClassNameChangeEvent_Observer_NativeClassNameChangeEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/TreeMutationEvent/TreeMutationEvent_Subject.js

class TreeMutationEvent_Subject_TreeMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore, treeElement) {
        super(hindeCore, TreeMutationEvent_Subject_TreeMutationEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentTreeProxy/ScContentTreeNodeProxy/ScContentTreeNodeProxy.js
var ScContentTreeNodeProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class ScContentTreeNodeProxy_ScContentTreeNodeProxy extends _HindeCoreBase {
    constructor(hindeCore, sourceElement, level, siblingIndex, totalSiblings) {
        super(hindeCore);
        this.Children = [];
        this.StateOfScContentTreeNode = {
            Friendly: '',
            IsExpanded: false,
            IsActive: false,
            Coord: {
                LevelIndex: -1,
                LevelWidth: -1,
                SiblingIndex: -1
            },
            ItemId: null,
            IconSrc: '',
            MainIconSrc: '',
            NodeChildren: [],
        };
        this.HasBeenHarvested = false;
        if (sourceElement) {
            this.StateOfScContentTreeNode.Coord.LevelWidth = totalSiblings;
            this.StateOfScContentTreeNode.Coord.SiblingIndex = siblingIndex;
            this.StateOfScContentTreeNode.Coord.LevelIndex = level;
            if (sourceElement.hasAttribute('src')) {
                this.InferFromImageElement(sourceElement);
            }
            else if (sourceElement.hasAttribute('href')) {
                this.InferFromAnchorElement(sourceElement);
            }
            else if (sourceElement.classList.contains('scContentTreeNode')) {
                this.InferFromDivElement(sourceElement);
            }
            else {
                this.ErrorHand.ErrorAndThrow(ScContentTreeNodeProxy_ScContentTreeNodeProxy.name, 'invalid source element type: ' + (typeof sourceElement));
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(ScContentTreeNodeProxy_ScContentTreeNodeProxy.name, 'null sourceElement or associatedDoc');
        }
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
    }
    Instantiate() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                yield this.HarvestNodeState();
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.Instantiate.name, err);
            }
        });
    }
    InferFromDivElement(divElement) {
        if (divElement) {
            this.ScContentTreeNodeDivElem = divElement;
        }
    }
    InferFromAnchorElement(anchorElement) {
        if (anchorElement) {
            this.Logger.Log(this.InferFromAnchorElement.name);
            this.ScContentTreeNodeDivElem = anchorElement.parentElement;
        }
    }
    InferFromImageElement(imageElement) {
        if (imageElement) {
            this.ScContentTreeNodeDivElem = imageElement.parentElement;
        }
    }
    GetGlyphNodeElem() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                yield this.RecipeBasics.WaitAndReturnFoundFromContainer(this.ScContentTreeNodeDivElem, ":scope > img", this.GetGlyphNodeElem.name)
                    .then((htmlElement) => {
                    resolve(htmlElement);
                })
                    .catch((err) => {
                    reject(this.GetGlyphNodeElem.name + ' | ' + err);
                });
            }));
        });
    }
    Friendly() {
        let toReturn = 'lvl: ' + this.StateOfScContentTreeNode.Coord.LevelIndex + ' Sib idx: ' + this.StateOfScContentTreeNode.Coord.SiblingIndex + ' tot sib: ' + this.StateOfScContentTreeNode.Coord.LevelWidth;
        return toReturn;
    }
    GetLinkNodeElem() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                yield this.RecipeBasics.WaitAndReturnFoundFromContainer(this.ScContentTreeNodeDivElem, ":scope > a", this.Friendly())
                    .then((htmlAnchorElement) => {
                    resolve(htmlAnchorElement);
                })
                    .catch((err) => {
                    reject(this.GetGlyphNodeElem.name + ' | ' + err);
                });
            }));
        });
    }
    GetStateOfScContentTreeNodeGeneric(includeChildren) {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                let stateOfChildrenAr = [];
                if (includeChildren) {
                    this.Children.forEach((child) => stateOfChildrenAr.push(child.GetStateOfScContentTreeNodeDeep()));
                }
                yield Promise.all(stateOfChildrenAr)
                    .then((result) => {
                    this.StateOfScContentTreeNode.NodeChildren = [];
                    result.forEach((stateoOfScContentTreeNodeChild) => {
                        if (stateoOfScContentTreeNodeChild.IsActive || stateoOfScContentTreeNodeChild.IsExpanded) {
                            this.StateOfScContentTreeNode.NodeChildren.push(stateoOfScContentTreeNodeChild);
                        }
                    });
                })
                    .then(() => resolve(this.StateOfScContentTreeNode))
                    .catch((err) => reject(this.GetStateOfScContentTreeNodeGeneric.name + ' | ' + err));
            }));
        });
    }
    GetStateOfScContentTreeNodeDeep() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                yield this.GetStateOfScContentTreeNodeGeneric(true)
                    .then((stateOfScContentTreeNodeDeep) => resolve(stateOfScContentTreeNodeDeep))
                    .catch((err) => reject(this.GetStateOfScContentTreeNodeDeep.name + ' | ' + err));
            }));
        });
    }
    GetStateOfScContentTreeNodeFlat() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetStateOfScContentTreeNodeFlat.name);
                yield this.GetStateOfScContentTreeNodeGeneric(false)
                    .then((stateOfContentTreeNodeFlat) => resolve(stateOfContentTreeNodeFlat))
                    .catch((err) => reject(this.GetStateOfScContentTreeNodeDeep.name + ' | ' + err));
                this.Logger.FuncEnd(this.GetStateOfScContentTreeNodeFlat.name);
            }));
        });
    }
    HarvestNodeState(forceRefreshData = false) {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                if (!this.HasBeenHarvested || forceRefreshData) {
                    this.glyphElem = null;
                    this.LinkNodeElem = null;
                    this.Children = [],
                        yield this.GetLinkNodeElem()
                            .then((htmlAnchorElement) => {
                            this.LinkNodeElem = htmlAnchorElement;
                        })
                            .then(() => this.GetGlyphNodeElem())
                            .then((htmlImageElement) => {
                            this.glyphElem = htmlImageElement;
                        })
                            .then(() => {
                            this.ErrorHand.ThrowIfNullOrUndefined(this.HarvestNodeState.name, [this.LinkNodeElem, this.glyphElem]);
                            this.StateOfScContentTreeNode.IsActive = this.QueryIsActive();
                            this.StateOfScContentTreeNode.IsExpanded = this.QueryIsExpanded();
                            this.StateOfScContentTreeNode.Friendly = this.GetNodeLinkText(this.LinkNodeElem);
                            this.StateOfScContentTreeNode.ItemId = this.GetApparentItemId(this.glyphElem);
                            this.StateOfScContentTreeNode.IconSrc = this.GetIconSrc();
                            this.StateOfScContentTreeNode.MainIconSrc = this.GetMainIconSrc();
                        })
                            .then(() => this.GetChildren())
                            .then((children) => {
                            this.Children = children;
                        })
                            .then(() => resolve())
                            .catch((err) => {
                            reject(this.HarvestNodeState.name + ' | ' + err);
                        });
                    this.HasBeenHarvested = true;
                }
                else {
                    resolve();
                }
            }));
        });
    }
    GetApparentItemId(htmlImageElement) {
        let glyphNodeIdSuffix = htmlImageElement.id.replace(ContentConst.Const.Names.SC.TreeGlyphPrefix, '');
        let toReturnGuidData = Guid_Guid.ParseGuid(glyphNodeIdSuffix, true);
        return toReturnGuidData;
    }
    GetIconSrc() {
        let toReturn;
        let foundElement = this.ScContentTreeNodeDivElem.querySelector(ContentConst.Const.Selector.SC.ContentEditor.scContentTreeNodeIcon);
        if (foundElement) {
            toReturn = foundElement.src;
        }
        return toReturn;
    }
    GetChildren() {
        return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                let toReturn = [];
                let childNodes = this.ScContentTreeNodeDivElem.querySelectorAll(':scope > div > ' + ContentConst.Const.Selector.SC.ContentEditor.ScContentTreeNode);
                childNodes.forEach((childNode, index) => {
                    toReturn.push(new ScContentTreeNodeProxy_ScContentTreeNodeProxy(this.HindeCore, childNode, this.StateOfScContentTreeNode.Coord.LevelIndex + 1, index, childNodes.length));
                });
                let PromiseAr = [];
                toReturn.forEach((newScContentTreeNodeProxy) => PromiseAr.push(newScContentTreeNodeProxy.Instantiate()));
                yield Promise.all(PromiseAr);
                resolve(toReturn);
            }
            catch (err) {
                reject(this.GetChildren.name + ' | ' + err);
            }
        }));
    }
    GetMainIconSrc() {
        let toReturn;
        let penultimateNode = this;
        let penultimateElem = this.ScContentTreeNodeDivElem.closest('[id=ContentTreeActualSize] > .scContentTreeNode >  div > .scContentTreeNode');
        if (penultimateElem) {
            penultimateNode = new ScContentTreeNodeProxy_ScContentTreeNodeProxy(this.HindeCore, penultimateElem, 0, 0, 1);
        }
        if (penultimateNode !== null) {
            toReturn = penultimateNode.GetIconSrc();
        }
        return toReturn;
    }
    SetStateOfTreeNode(newData, depth) {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                if (newData.IsExpanded) {
                    yield this.ExpandNode();
                }
                if (newData.IsActive) {
                    yield this.ActivateNode();
                }
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.SetStateOfTreeNode.name, err);
            }
        });
    }
    QueryIsActive() {
        let classList = this.LinkNodeElem.classList;
        let toReturn = classList.contains(ContentConst.Const.ClassNames.SC.scContentTreeNodeActive);
        return toReturn;
    }
    ActivateNode() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.ActivateNode.name);
                this.Logger.Log('activating node: ' + this.StateOfScContentTreeNode.Friendly);
                yield this.RecipeBasics.WaitForElemToHaveClassOrReject(this.LinkNodeElem, [ContentConst.Const.ClassNames.SC.scContentTreeNodeActive, ContentConst.Const.ClassNames.SC.scContentTreeNodeNormal], this.StateOfScContentTreeNode.Friendly);
                this.LinkNodeElem.click();
                yield this.RecipeBasics.WaitForElemToHaveClassOrReject(this.LinkNodeElem, [ContentConst.Const.ClassNames.SC.scContentTreeNodeActive], this.StateOfScContentTreeNode.Friendly)
                    .then(() => resolve())
                    .catch((err) => reject(this.ActivateNode.name + ' | ' + err));
                this.Logger.FuncEnd(this.ActivateNode.name);
            }));
        });
    }
    __collapseNode(element) {
        var currentSrc = element.getAttribute('src');
        this.Logger.Log('currentSrc' + currentSrc);
        if (currentSrc.indexOf(ContentConst.Const.Names.TreeMenuExpandedPng) > -1) {
            this.Logger.Log('clicking it to collapse');
            element.click();
        }
    }
    ExpandNode() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.QueryIsExpanded()) {
                    this.glyphElem.click();
                }
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.ExpandNode.name, err);
            }
        });
    }
    GetNodeLinkText(htmlElement) {
        return htmlElement.innerText;
    }
    IsContentTreeNode() {
        var toReturn = false;
        var className = this.ScContentTreeNodeDivElem.className;
        toReturn = className === ContentConst.Const.ClassNames.SC.ContentTreeNode;
        return toReturn;
    }
    QueryIsExpanded() {
        var toReturn = false;
        var srcAttr = this.glyphElem.getAttribute('src');
        if (srcAttr !== null) {
            if (srcAttr.indexOf(ContentConst.Const.Names.SC.TreeExpandedPng.sc920) > -1) {
                toReturn = true;
            }
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentTreeProxy/ContentTreeProxy.js
var ContentTreeProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};











class ContentTreeProxy_ContentTreeProxy extends _HindeCoreBase {
    constructor(hindeCore, associatedDoc, treeContainerElement) {
        super(hindeCore);
        this.ErrorHand.ThrowIfNullOrUndefined(ContentTreeProxy_ContentTreeProxy.name, [associatedDoc, treeContainerElement]);
        this.AssociatedDoc = associatedDoc;
        this.TreeContainerElement = treeContainerElement;
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
    }
    Instantiate_TreeProxy() {
        return ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.Instantiate_TreeProxy.name);
            try {
                yield this.GetRootNodeForFrameType()
                    .then((htmlElement) => {
                    this.rootTreeNodeHtmlElement = htmlElement;
                    this.initReportTreeProxy = new InitReportTreeProxy();
                    this.initReportTreeProxy.TreeInstantiated = true;
                    this.TreeMutationEvent_Subject = new TreeMutationEvent_Subject_TreeMutationEvent_Subject(this.HindeCore, this.TreeContainerElement);
                    this.NativeClassNameChangeEvent_Subject = new NativeClassNameChangeEvent_Subject_NativeClassNameChangeEvent_Subject(this.HindeCore, this.TreeContainerElement);
                    this.NativeClassNameChangeEvent_Observer = new NativeClassNameChangeEvent_Observer_NativeClassNameChangeEvent_Observer(this.HindeCore, this.CallBackOnNativeClassNameChangeEventAsync.bind(this));
                });
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.Instantiate_TreeProxy.name, err);
            }
            this.Logger.FuncEnd(this.Instantiate_TreeProxy.name);
        });
    }
    WireEvents_TreeProxy() {
        this.Logger.FuncStart(this.WireEvents_TreeProxy.name);
        this.NativeClassNameChangeEvent_Subject.RegisterObserver(this.NativeClassNameChangeEvent_Observer);
        this.initReportTreeProxy.EventsWired = true;
        this.Logger.FuncEnd(this.WireEvents_TreeProxy.name);
    }
    CallBackOnNativeClassNameChangeEventAsync(notUsed) {
        this.Logger.FuncStart(this.CallBackOnNativeClassNameChangeEventAsync.name);
        if (this.TreeMutationEvent_Subject) {
            this.GetStateOfContentTree()
                .then((stateOfContentTree) => {
                let TreeMutationEvent_Payload = {
                    StateOfContentTree: stateOfContentTree
                };
                this.TreeMutationEvent_Subject.NotifyObserversAsync(TreeMutationEvent_Payload);
            })
                .then(() => this.Logger.Log(this.CallBackOnNativeClassNameChangeEventAsync.name + ' completed'))
                .catch((err) => this.ErrorHand.ErrorAndThrow(this.CallBackOnNativeClassNameChangeEventAsync.name, err));
        }
        this.Logger.FuncEnd(this.CallBackOnNativeClassNameChangeEventAsync.name);
    }
    TriggerActiveNodeChangeEvent() {
        this.Logger.FuncStart(this.TriggerActiveNodeChangeEvent.name);
        this.CallBackOnNativeClassNameChangeEventAsync(null);
        this.Logger.FuncEnd(this.TriggerActiveNodeChangeEvent.name);
    }
    GetTreeNodeByGlyph(targetNode) {
        return new Promise((resolve, reject) => ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            let scContentTreeNodeProxy = null;
            if (targetNode && this.TreeContainerElement) {
                var treeGlyphTargetId = ContentConst.Const.Names.SC.TreeGlyphPrefix + Guid_Guid.WithoutDashes(targetNode.ItemId);
                yield this.RecipeBasics.WaitAndReturnFoundFromContainer(this.TreeContainerElement, '[id=' + treeGlyphTargetId + ']', this.GetTreeNodeByGlyph.name + ' ' + treeGlyphTargetId)
                    .then((htmlElement) => scContentTreeNodeProxy = new ScContentTreeNodeProxy_ScContentTreeNodeProxy(this.HindeCore, htmlElement, targetNode.Coord.LevelIndex, targetNode.Coord.SiblingIndex, targetNode.Coord.LevelWidth))
                    .then(() => scContentTreeNodeProxy.Instantiate())
                    .then(() => resolve(scContentTreeNodeProxy))
                    .catch((err) => reject(this.GetTreeNodeByGlyph.name + ' | ' + err));
            }
        }));
    }
    SetStateOfNodeRecursive(currentNodeData, depth) {
        return ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.SetStateOfNodeRecursive.name, currentNodeData.Friendly);
            try {
                let maxIterDepth = 200;
                let targetScContentTreeNodeProxy = null;
                let promisesAr = [];
                if (depth > maxIterDepth) {
                    this.ErrorHand.ErrorAndThrow(this.SetStateOfNodeRecursive.name, 'Iteration check - max depth exceed. Something is probably wrong');
                }
                if (depth < maxIterDepth && currentNodeData) {
                    yield this.GetTreeNodeByGlyph(currentNodeData)
                        .then((scContentTreeNodeProxy) => {
                        targetScContentTreeNodeProxy = scContentTreeNodeProxy;
                    })
                        .then(() => targetScContentTreeNodeProxy.SetStateOfTreeNode(currentNodeData, depth))
                        .then(() => {
                        if (currentNodeData.NodeChildren.length > 0) {
                            currentNodeData.NodeChildren.forEach((nodeChild) => promisesAr.push(this.SetStateOfNodeRecursive(nodeChild, depth + 1)));
                        }
                    })
                        .then(() => Promise.all(promisesAr));
                }
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.SetStateOfNodeRecursive.name, err);
            }
            this.Logger.FuncEnd(this.SetStateOfNodeRecursive.name, currentNodeData.Friendly);
        });
    }
    SetStateOfContentTree(currentNodeData) {
        return ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.SetStateOfContentTree.name);
            try {
                this.TreeMutationEvent_Subject.DisableNotifications();
                let iterHelper = new IterationDrone_IterationDrone(this.HindeCore, this.SetStateOfContentTree.name, true);
                yield this.SetStateOfNodeRecursive(currentNodeData, 0);
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.SetStateOfContentTree.name, err);
            }
            this.TreeMutationEvent_Subject.EnableNotifications();
            this.Logger.FuncEnd(this.SetStateOfContentTree.name);
        });
    }
    GetRootNodeForFrameType() {
        return ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                yield this.RecipeBasics.WaitForAndReturnFoundElem(this.AssociatedDoc, ContentConst.Const.Selector.SC.ContentEditor.RootAnchorNode)
                    .then((htmlElement) => this.rootTreeNodeHtmlElement = htmlElement);
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.GetRootNodeForFrameType.name, err);
            }
            let toReturn = this.TreeContainerElement.querySelector(ContentConst.Const.Selector.SC.ContentEditor.RootAnchorNode);
            return toReturn;
        });
    }
    GetActiveTreeNodeFromAncestorNode(stateOfScContentTreeNodeDeep) {
        let foundNode = null;
        if (stateOfScContentTreeNodeDeep.IsActive) {
            foundNode = stateOfScContentTreeNodeDeep;
        }
        else {
            stateOfScContentTreeNodeDeep.NodeChildren.forEach((child) => {
                let candidate = this.GetActiveTreeNodeFromAncestorNode(child);
                if (candidate !== null) {
                    foundNode = candidate;
                }
            });
        }
        return foundNode;
    }
    GetStateOfContentTree() {
        return new Promise((resolve, reject) => ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetStateOfContentTree.name);
            let stateOfContentTree = new DefaultStateOfContentTree();
            yield this.GetStateOfContentTreeNodeDeep()
                .then((result) => stateOfContentTree.StateOfScContentTreeNodeDeep = result)
                .then(() => {
                let activeNodeFlat = this.GetActiveTreeNodeFromAncestorNode(stateOfContentTree.StateOfScContentTreeNodeDeep);
                if (activeNodeFlat) {
                    stateOfContentTree.ActiveNodeFlat = activeNodeFlat;
                }
            })
                .then(() => resolve(stateOfContentTree))
                .catch((err) => reject(this.GetStateOfContentTree.name + ' | ' + err));
            this.Logger.FuncEnd(this.GetStateOfContentTree.name);
        }));
    }
    GetTreeNodeProxy() {
        return new Promise((resolve, reject) => ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            if (this.AssociatedDoc) {
                if (this.rootTreeNodeHtmlElement) {
                    var rootParent = this.rootTreeNodeHtmlElement.parentElement;
                    yield this.RecipeBasics.WaitAndReturnFoundFromContainer(rootParent, ContentConst.Const.Selector.SC.ContentEditor.ScContentTreeNodeGlyph, this.GetStateOfContentTreeNodeDeep.name)
                        .then((firstChildGlyphNode) => ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
                        this._treeNodeProxy = new ScContentTreeNodeProxy_ScContentTreeNodeProxy(this.HindeCore, firstChildGlyphNode, 0, 0, 1);
                        yield this._treeNodeProxy.Instantiate();
                    }))
                        .catch((err) => reject(this.GetTreeNodeProxy.name + ' | ' + err));
                }
                else {
                    this.ErrorHand.ErrorAndThrow(this.GetStateOfContentTreeNodeDeep.name, 'no root node');
                }
            }
            else {
                this.ErrorHand.ErrorAndThrow(this.GetStateOfContentTreeNodeDeep.name, 'no targetDoc');
            }
            resolve(this._treeNodeProxy);
        }));
    }
    GetStateOfContentTreeNodeDeep() {
        return new Promise((resolve, reject) => ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetStateOfContentTreeNodeDeep.name);
            yield this.GetTreeNodeProxy()
                .then((scContentTreeNodeProxy) => scContentTreeNodeProxy.GetStateOfScContentTreeNodeDeep())
                .then((stateOfScContentTreeNodeProxy) => {
                resolve(stateOfScContentTreeNodeProxy);
            })
                .catch((err) => reject(this.GetStateOfContentTreeNodeDeep.name + ' | ' + err));
            this.Logger.FuncEnd(this.GetStateOfContentTreeNodeDeep.name);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/TreeMutationEvent/ContentTreeProxyMutationEvent_Observer.js

class ContentTreeProxyMutationEvent_Observer_ContentTreeProxyMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, ContentTreeProxyMutationEvent_Observer_ContentTreeProxyMutationEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentEditorProxy.js
var ContentEditorProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};











class ContentEditorProxy_ContentEditorProxy extends _HindeCoreBase {
    constructor(hindeCore, associatedDoc, friendly) {
        super(hindeCore);
        this.Logger.CTORStart(ContentEditorProxy_ContentEditorProxy.name);
        this.AssociatedHindsiteId = Guid_Guid.NewRandomGuid();
        this.AssociatedDoc = associatedDoc;
        this.ValidateAssociatedDocContentEditor();
        this.Friendly = friendly;
        this.Logger.CTOREnd(ContentEditorProxy_ContentEditorProxy.name);
    }
    PublishItem() {
        return ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            let publishProxy = new ContentEditorPublishProxy_ContentEditorPublishProxy(this.HindeCore, this, this.AssociatedDoc);
            yield publishProxy.Execute();
        });
    }
    Instantiate_ContentEditorProxy() {
        return ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.Instantiate_ContentEditorProxy.name);
            try {
                this.initResultContentEditorProxy = new InitReportContentEditorProxy();
                this.RecipeBasic = new RecipeBasics_RecipeBasics(this.HindeCore);
                yield this.RecipeBasic.WaitForCompleteNABDataOneDoc(this.AssociatedDoc, this.Friendly)
                    .then(() => {
                    this.ContentEditorProxyMutationEvent_Subject = new ContentEditorProxyMutationEvent_Subject_ContentEditorProxyMutationEvent_Subject(this.HindeCore);
                    this.TreeMutationEvent_Observer = new ContentTreeProxyMutationEvent_Observer_ContentTreeProxyMutationEvent_Observer(this.HindeCore, this.CallBackOnContentEditorProxyTreeMutationEventAsync.bind(this));
                })
                    .then(() => this.RecipeBasic.WaitForAndReturnFoundElem(this.AssociatedDoc, ContentConst.Const.Selector.SC.ContentEditor.ScContentTreeContainer))
                    .then((treeContainer) => this.ContentTreeProxy = new ContentTreeProxy_ContentTreeProxy(this.HindeCore, this.AssociatedDoc, treeContainer))
                    .then(() => this.ContentTreeProxy.Instantiate_TreeProxy())
                    .then(() => this.initResultContentEditorProxy.ContentEditorProxyInitialized = true)
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.Instantiate_ContentEditorProxy.name, err));
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.Instantiate_ContentEditorProxy.name, err);
            }
            this.Logger.FuncEnd(this.Instantiate_ContentEditorProxy.name);
        });
    }
    WireEvents_ContentEditorProxy() {
        this.Logger.FuncStart(this.WireEvents_ContentEditorProxy.name);
        this.ContentTreeProxy.WireEvents_TreeProxy();
        this.ContentTreeProxy.TreeMutationEvent_Subject.RegisterObserver(this.TreeMutationEvent_Observer);
        this.Logger.FuncEnd(this.WireEvents_ContentEditorProxy.name);
    }
    CallBackOnContentEditorProxyTreeMutationEventAsync(treeMutationEvent_Payload) {
        this.Logger.FuncStart(this.CallBackOnContentEditorProxyTreeMutationEventAsync.name);
        let contentEditorProxyMutationEvent_Payload = {
            TreeMutationEvent_Payload: treeMutationEvent_Payload,
        };
        if (this.ContentEditorProxyMutationEvent_Subject) {
            this.ContentEditorProxyMutationEvent_Subject.NotifyObserversAsync(contentEditorProxyMutationEvent_Payload);
        }
        this.Logger.FuncEnd(this.CallBackOnContentEditorProxyTreeMutationEventAsync.name);
    }
    TriggerActiveNodeChangeEvent() {
        this.ErrorHand.ThrowIfNullOrUndefined(this.TriggerActiveNodeChangeEvent.name, this.ContentTreeProxy);
        this.ContentTreeProxy.TriggerActiveNodeChangeEvent();
    }
    GetStateOfContentEditorProxy() {
        return new Promise((resolve, reject) => ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetStateOfContentEditorProxy.name);
            let toReturnStateOfContentEditor = new DefaultStateOfContentEditor_DefaultStateOfContentEditor();
            yield this.ContentTreeProxy.GetStateOfContentTree()
                .then((stateOfContentTree) => toReturnStateOfContentEditor.StateOfContentTree = stateOfContentTree)
                .then(() => resolve(toReturnStateOfContentEditor))
                .catch((err) => reject(this.GetStateOfContentEditorProxy.name + ' | ' + err));
            this.Logger.FuncEnd(this.GetStateOfContentEditorProxy.name);
        }));
    }
    ValidateAssociatedDocContentEditor() {
        if (!this.AssociatedDoc) {
            this.ErrorHand.ErrorAndThrow(this.ValidateAssociatedDocContentEditor.name, 'No doc provided');
        }
        else if (!this.AssociatedDoc.ContentDoc) {
            this.ErrorHand.ErrorAndThrow(this.ValidateAssociatedDocContentEditor.name, 'No content doc');
        }
        else if (!this.AssociatedDoc.ContentDoc.URL) {
            this.ErrorHand.ErrorAndThrow(this.ValidateAssociatedDocContentEditor.name, 'No URL');
        }
        else if (this.AssociatedDoc.ContentDoc.URL === SharedConst.Const.UrlSuffix.AboutBlank) {
            this.ErrorHand.ErrorAndThrow(this.ValidateAssociatedDocContentEditor.name, SharedConst.Const.UrlSuffix.AboutBlank + ' not allowed');
        }
    }
    WaitForCompleteNABContentEditor() {
        return ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForCompleteNABContentEditor.name);
            try {
                let recipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
                yield recipeBasics.WaitForCompleteNABDataOneDoc(this.AssociatedDoc, this.Friendly)
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.WaitForCompleteNABContentEditor.name, err));
            }
            catch (e) {
            }
            this.Logger.FuncEnd(this.WaitForCompleteNABContentEditor.name);
        });
    }
    SetCompactCss() {
        this.Logger.FuncStart(this.SetCompactCss.name, Guid_Guid.AsShort(this.AssociatedDoc.DocId));
        this.Logger.FuncStart(this.SetCompactCss.name, Guid_Guid.AsShort(this.AssociatedDoc.DocId));
    }
    SetStateOfContentEditorAsync(dataToRestore) {
        return ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.SetStateOfContentEditorAsync.name, Guid_Guid.AsShort(this.AssociatedDoc.DocId));
                this.ContentEditorProxyMutationEvent_Subject.DisableNotifications();
                yield this.RecipeBasic.WaitForTimePeriod(1000, this.SetStateOfContentEditorAsync.name)
                    .then(() => this.RecipeBasic.WaitForNoUiFrontOverlay(this.SetStateOfContentEditorAsync.name))
                    .then(() => this.ContentTreeProxy.SetStateOfContentTree(dataToRestore.StateOfContentTree.StateOfScContentTreeNodeDeep))
                    .then(() => {
                    this.ContentEditorProxyMutationEvent_Subject.EnableNotifications();
                    resolve(true);
                })
                    .catch((err) => {
                    this.ContentEditorProxyMutationEvent_Subject.EnableNotifications();
                    reject(this.SetStateOfContentEditorAsync.name + " " + err);
                });
                this.Logger.FuncEnd(this.SetStateOfContentEditorAsync.name);
            }));
        });
    }
    GetActiveNode(allTreeNodeAr) {
        this.Logger.FuncStart(this.GetActiveNode.name);
        let toReturn = null;
        if (allTreeNodeAr) {
            for (var idx = 0; idx < allTreeNodeAr.length; idx++) {
                let candidate = allTreeNodeAr[idx];
                if (candidate.IsActive) {
                    toReturn = candidate;
                    break;
                }
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.GetActiveNode.name, 'No tree data provided');
        }
        this.Logger.FuncEnd(this.GetActiveNode.name, toReturn.Friendly);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/ContentEditorProxyMutationEvent/ContentEditorProxyMutationEvent_Observer.js

class ContentEditorProxyMutationEvent_Observer_ContentEditorProxyMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, ownerFrameProxy) {
        super(hindeCore, ContentEditorProxyMutationEvent_Observer_ContentEditorProxyMutationEvent_Observer.name);
        this.OwnerDTFrameProxy = ownerFrameProxy;
    }
    UpdateAsync(payload) {
        this.OwnerDTFrameProxy.OnContentEditorProxyMutation(payload);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/DTFrameProxyMutationEvent/DTFrameProxyMutationEvent_Subject.js

class DTFrameProxyMutationEvent_Subject_DTFrameProxyMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore) {
        super(hindeCore, DTFrameProxyMutationEvent_Subject_DTFrameProxyMutationEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfDTFrame.js

class DefaultStateOfDTFrame_DefaultStateOfDTFrame {
    constructor() {
        this.StateOfContentEditor = new DefaultStateOfContentEditor_DefaultStateOfContentEditor();
        this.StateOfFrameStyling = null;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/FrameProxies/DTFrameProxy.js
var DTFrameProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class DTFrameProxy_DTFrameProxy extends _BaseFrameProxy_BaseFrameProxy {
    constructor(hindeCore, iframeElem) {
        super(hindeCore, iframeElem);
        this.Discriminator = DTFrameProxy_DTFrameProxy.name;
        if (iframeElem) {
            this.Friendly = 'DTFrameProxy_' + iframeElem.id;
        }
        else {
            this.ErrorHand.ErrorAndThrow(DTFrameProxy_DTFrameProxy.name, ' null check');
        }
    }
    Instantiate_DTFrameProxy() {
        return DTFrameProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DTFrameProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.Instantiate_DTFrameProxy.name, this.Friendly);
                let recipeBasic = new RecipeBasics_RecipeBasics(this.HindeCore);
                this.initReportFrameProxy = new ReportResultsInitDTFrameProxy();
                yield recipeBasic.WaitForCompleteNABHtmlIframeElement(this.HTMLIframeElement, this.Friendly)
                    .then((result) => {
                    if (!result.IsCompleteNAB()) {
                        reject(result.DocumentReadtStateFriendly());
                    }
                })
                    .then(() => this.ContentEditorProxy = new ContentEditorProxy_ContentEditorProxy(this.HindeCore, this.GetContentDoc(), this.Friendly))
                    .then(() => this.ContentEditorProxy.Instantiate_ContentEditorProxy())
                    .then(() => {
                    this.DTFrameProxyMutationEvent_Subject = new DTFrameProxyMutationEvent_Subject_DTFrameProxyMutationEvent_Subject(this.HindeCore);
                    this.ContentEditorProxyMutationEvent_Observer = new ContentEditorProxyMutationEvent_Observer_ContentEditorProxyMutationEvent_Observer(this.HindeCore, this);
                    this.initReportFrameProxy.DTFrameProxyInitialized = true;
                })
                    .then(() => resolve())
                    .catch((err) => reject(this.Instantiate_DTFrameProxy.name + ' | ' + err));
                this.Logger.FuncEnd(this.Instantiate_DTFrameProxy.name, this.Friendly);
            }));
        });
    }
    WireEvents_DTFrameProxy() {
        return DTFrameProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WireEvents_DTFrameProxy.name);
            this.ContentEditorProxy.ContentEditorProxyMutationEvent_Subject.RegisterObserver(this.ContentEditorProxyMutationEvent_Observer);
            this.ContentEditorProxy.WireEvents_ContentEditorProxy();
            this.Logger.FuncEnd(this.WireEvents_DTFrameProxy.name);
        });
    }
    GetStateOfDTFrame() {
        return new Promise((resolve, reject) => DTFrameProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetStateOfDTFrame.name);
            let stateOfDTFrame = new DefaultStateOfDTFrame_DefaultStateOfDTFrame();
            let sourceStyle = this.HTMLIframeElement.style;
            stateOfDTFrame.StateOfFrameStyling = {
                Height: sourceStyle.height,
                Left: sourceStyle.left,
                Position: sourceStyle.position,
                Top: sourceStyle.top,
                Width: sourceStyle.width,
                ZIndex: sourceStyle.zIndex
            };
            stateOfDTFrame.ZIndex = this.GetZindexAsInt();
            if (this.ContentEditorProxy) {
                yield this.ContentEditorProxy.GetStateOfContentEditorProxy()
                    .then((stateOfContentEditorProxy) => stateOfDTFrame.StateOfContentEditor = stateOfContentEditorProxy)
                    .catch((err) => this.GetStateOfDTFrame.name + ' | ' + err);
            }
            resolve(stateOfDTFrame);
            this.Logger.FuncEnd(this.GetStateOfDTFrame.name);
        }));
    }
    SetFrameStyling(stateOfDTFrame) {
        this.Logger.FuncStart(this.SetFrameStyling.name);
        this.HTMLIframeElement.style.height = stateOfDTFrame.StateOfFrameStyling.Height;
        this.HTMLIframeElement.style.left = stateOfDTFrame.StateOfFrameStyling.Left;
        this.HTMLIframeElement.style.position = stateOfDTFrame.StateOfFrameStyling.Position;
        this.HTMLIframeElement.style.top = stateOfDTFrame.StateOfFrameStyling.Top;
        this.HTMLIframeElement.style.width = stateOfDTFrame.StateOfFrameStyling.Width;
        this.HTMLIframeElement.style.zIndex = stateOfDTFrame.StateOfFrameStyling.ZIndex;
        this.Logger.FuncEnd(this.SetFrameStyling.name);
    }
    SetStateOfDTFrame(stateOfDTFrame) {
        return DTFrameProxy_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart(this.SetStateOfDTFrame.name);
                this.DTFrameProxyMutationEvent_Subject.DisableNotifications();
                yield this.ContentEditorProxy.SetStateOfContentEditorAsync(stateOfDTFrame.StateOfContentEditor)
                    .then(() => {
                    this.SetFrameStyling(stateOfDTFrame);
                    this.DTFrameProxyMutationEvent_Subject.EnableNotifications();
                });
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.SetStateOfDTFrame.name, err);
            }
            this.Logger.FuncEnd(this.SetStateOfDTFrame.name);
        });
    }
    OnContentEditorProxyMutation(payload) {
        let dtFrameProxyMutationEvent_Payload = {
            ContentEditorProxyMutationPayload: payload,
            FrameId: this.HTMLIframeElement.id
        };
        this.DTFrameProxyMutationEvent_Subject.NotifyObserversAsync(dtFrameProxyMutationEvent_Payload);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/FactoryHelper.js
var FactoryHelper_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class FactoryHelper_FactoryHelper extends _HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
    }
    DataOneContentDocFactoryFromIframe(dataOneIframe) {
        var toReturn = null;
        if (dataOneIframe) {
            toReturn =
                {
                    ContentDoc: dataOneIframe.HTMLIframeElement.contentDocument,
                    DocId: Guid_Guid.NewRandomGuid(),
                    Nickname: ' - content doc'
                };
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.DataOneContentDocFactoryFromIframe.name, 'no iframe provided');
        }
        return toReturn;
    }
    BaseFramePromiseFactory(iframeElem, nickname) {
        this.Logger.FuncStart(this.BaseFramePromiseFactory.name);
        var toReturn = null;
        if (iframeElem && nickname) {
            var toReturn = new _BaseFrameProxy_BaseFrameProxy(this.HindeCore, iframeElem);
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.BaseFramePromiseFactory.name, 'one of these is null');
            this.Logger.LogAsJsonPretty('iframeElem', iframeElem);
            this.Logger.LogAsJsonPretty('nickname', nickname);
        }
        this.Logger.FuncEnd(this.BaseFramePromiseFactory.name);
        return toReturn;
    }
    DTFrameProxyFactory(iframeElem) {
        return FactoryHelper_awaiter(this, void 0, void 0, function* () {
            var toReturn = null;
            if (iframeElem) {
                var toReturn = new DTFrameProxy_DTFrameProxy(this.HindeCore, iframeElem);
                yield toReturn.Instantiate_DTFrameProxy();
            }
            else {
                this.ErrorHand.ErrorAndThrow(this.DTFrameProxyFactory.name, 'one of these is null');
                this.Logger.LogAsJsonPretty('iframeElem', iframeElem);
            }
            return toReturn;
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Helpers/FrameHelper.js
var FrameHelper_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class FrameHelper_FrameHelper extends _HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
        this.factoryHelper = new FactoryHelper_FactoryHelper(this.HindeCore);
    }
    GetIFramesFromDataOneDoc(targetDoc) {
        let toReturnIframeAr = [];
        this.ErrorHand.ThrowIfNullOrUndefined(this.GetIFramesFromDataOneDoc.name, [targetDoc]);
        var queryResults = targetDoc.ContentDoc.querySelectorAll(ContentConst.Const.Selector.SC.IframeContent.sc920);
        if (!queryResults) {
            queryResults = targetDoc.ContentDoc.querySelectorAll(ContentConst.Const.Selector.SC.IframeContent.sc820);
        }
        if (queryResults) {
            for (var ifrIdx = 0; ifrIdx < queryResults.length; ifrIdx++) {
                var iframeElem = queryResults[ifrIdx];
                if (iframeElem) {
                    toReturnIframeAr.push(iframeElem);
                }
            }
        }
        this.Logger.LogVal('found iframes count', toReturnIframeAr.length);
        return toReturnIframeAr;
    }
    GetIFrameAsBaseFrameProxy(iframeElem, ifrIdx) {
        return FrameHelper_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => FrameHelper_awaiter(this, void 0, void 0, function* () {
                let friendly = 'desktop Iframe_' + ifrIdx;
                yield this.RecipeBasics.WaitForCompleteNABHtmlIframeElement(iframeElem, friendly)
                    .then((result) => {
                    if (!result.IsCompleteNAB()) {
                        reject(result.DocumentReadtStateFriendly());
                    }
                })
                    .then(() => this.factoryHelper.BaseFramePromiseFactory(iframeElem, friendly))
                    .then((result) => resolve(result))
                    .catch((err) => reject(this.GetIFramesAsBaseFrameProxies.name + ' | ' + err));
            }));
        });
    }
    GetIFrameAsDTFrameProxy(iframeElem) {
        return FrameHelper_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => FrameHelper_awaiter(this, void 0, void 0, function* () {
                yield this.RecipeBasics.WaitForCompleteNABHtmlIframeElement(iframeElem, iframeElem.id)
                    .then(() => this.factoryHelper.DTFrameProxyFactory(iframeElem))
                    .then((result) => resolve(result))
                    .catch((err) => reject(this.GetIFramesAsBaseFrameProxies.name + ' | ' + err));
            }));
        });
    }
    GetIFramesAsDTFrameProxies(dataOneDoc) {
        return FrameHelper_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.Logger.FuncStart(this.GetIFramesAsBaseFrameProxies.name);
                var toReturn = [];
                let iframeAr = this.GetIFramesFromDataOneDoc(dataOneDoc);
                let promiseAr = [];
                iframeAr.forEach((iframeElem) => {
                    promiseAr.push(this.GetIFrameAsDTFrameProxy(iframeElem));
                });
                Promise.all(promiseAr)
                    .then((values) => {
                    values.forEach((oneVal) => {
                        toReturn.push(oneVal);
                    });
                    this.Logger.LogVal('count: ', toReturn.length);
                })
                    .then(() => resolve(toReturn))
                    .catch((err) => reject(this.GetIFramesAsBaseFrameProxies.name + ' | ' + err));
                this.Logger.FuncEnd(this.GetIFramesAsBaseFrameProxies.name);
            });
        });
    }
    GetIFramesAsBaseFrameProxies(targetDoc) {
        return FrameHelper_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.Logger.FuncStart(this.GetIFramesAsBaseFrameProxies.name);
                var toReturn = [];
                let iframeAr = this.GetIFramesFromDataOneDoc(targetDoc);
                let promAr = [];
                iframeAr.forEach((iframeElem, index) => {
                    promAr.push(this.GetIFrameAsBaseFrameProxy(iframeElem, index));
                });
                Promise.all(promAr)
                    .then((values) => {
                    values.forEach((oneVal) => {
                        toReturn.push(oneVal);
                    });
                    this.Logger.LogVal('count: ', toReturn.length);
                })
                    .then(() => resolve(toReturn))
                    .catch((err) => reject(this.GetIFramesAsBaseFrameProxies.name + ' | ' + err));
                this.Logger.FuncEnd(this.GetIFramesAsBaseFrameProxies.name);
            });
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/ReadyState.js


class ReadyState_ReadyStateNAB extends _HindeCoreBase {
    constructor(hindeCore, document) {
        super(hindeCore);
        this.IsExausted = '';
        this.ErrorHand.ThrowIfNullOrUndefined(ReadyState_ReadyStateNAB.name, document);
        this.Document = document;
    }
    LogDebugValues() {
        this.Logger.LogVal('IsCompleteNAB', this.IsCompleteNAB());
        this.Logger.LogVal('Ready State', this.DocumentReadtStateFriendly());
        this.Logger.LogVal('document.URL', this.DocUrl());
        this.Logger.LogVal('Is Exhausted', this.IsExausted.toString());
        this.Logger.LogVal('DocIsAboutBlank', this.DocIsAboutBlank().toString());
    }
    DocumentReadtStateFriendly() {
        return 'DocumentReadyState :' + DocumentReadyState[this.DocumentReadyState()];
    }
    DocIsAboutBlank() {
        return ((this.DocUrl() === SharedConst.Const.UrlSuffix.AboutBlank) || (this.DocUrl() === ''));
    }
    SetDocument(document) {
        this.ErrorHand.ThrowIfNullOrUndefined(this.SetDocument.name, document);
        this.Document = document;
    }
    IsCompleteNAB() {
        return this.DocumentReadyState() === DocumentReadyState.Complete && !(this.DocIsAboutBlank());
    }
    DocumentReadyState() {
        let toReturn = DocumentReadyState.ReadyStateUnknown;
        let currentReadyState = document.readyState.toString();
        if (currentReadyState === 'complete') {
            toReturn = DocumentReadyState.Complete;
        }
        else if (currentReadyState === 'interactive') {
            toReturn = DocumentReadyState.Interactive;
        }
        else if (currentReadyState === 'loading') {
            toReturn = DocumentReadyState.Loading;
        }
        return toReturn;
    }
    DocUrl() {
        return this.Document.URL;
    }
}
var DocumentReadyState;
(function (DocumentReadyState) {
    DocumentReadyState[DocumentReadyState["ReadyStateUnknown"] = 0] = "ReadyStateUnknown";
    DocumentReadyState[DocumentReadyState["Complete"] = 1] = "Complete";
    DocumentReadyState[DocumentReadyState["Interactive"] = 2] = "Interactive";
    DocumentReadyState[DocumentReadyState["Loading"] = 3] = "Loading";
})(DocumentReadyState || (DocumentReadyState = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/RecipeBasics.js
var RecipeBasics_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class RecipeBasics_RecipeBasics extends _HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
    }
    WaitForCompleteNABHtmlIframeElement(targetIframe, friendly) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForCompleteNABHtmlIframeElement.name, friendly);
                if (targetIframe) {
                    var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForCompleteNABHtmlIframeElement.name, false);
                    let readyStateNAB = new ReadyState_ReadyStateNAB(this.HindeCore, targetIframe.contentDocument);
                    while (iterationJr.DecrementAndKeepGoing() && readyStateNAB.DocIsAboutBlank()) {
                        yield iterationJr.Wait();
                        readyStateNAB.SetDocument(targetIframe.contentDocument);
                        readyStateNAB.LogDebugValues();
                    }
                    if (iterationJr.IsExhausted) {
                        this.Logger.Log(iterationJr.IsExhaustedMsg);
                        resolve(readyStateNAB);
                    }
                    else {
                        yield this.WaitForCompleteNABDocumentNative(targetIframe.contentDocument, friendly)
                            .then((result) => {
                            this.Logger.LogVal(this.WaitForCompleteNABHtmlIframeElement.name, result.DocumentReadtStateFriendly());
                            resolve(result);
                        })
                            .catch((err) => reject(this.WaitForCompleteNABHtmlIframeElement + ' | ' + err));
                    }
                }
                else {
                    this.ErrorHand.ErrorAndThrow(this.WaitForCompleteNABHtmlIframeElement.name, 'No target doc: ' + friendly);
                }
                this.Logger.FuncEnd(this.WaitForCompleteNABHtmlIframeElement.name, friendly);
                ;
            }));
        });
    }
    WaitForCompleteNABDocumentNative(document, friendly) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForCompleteNABDocumentNative.name, friendly);
                if (document) {
                    var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForCompleteNABDocumentNative.name, false);
                    let readyStateNAB = new ReadyState_ReadyStateNAB(this.HindeCore, document);
                    while (iterationJr.DecrementAndKeepGoing() && !readyStateNAB.IsCompleteNAB()) {
                        readyStateNAB.LogDebugValues();
                        yield iterationJr.Wait();
                    }
                    if (iterationJr.IsExhausted) {
                        this.Logger.Log(iterationJr.IsExhaustedMsg);
                        reject(iterationJr.IsExhaustedMsg);
                    }
                    else {
                        resolve(readyStateNAB);
                    }
                }
                else {
                    reject(this.WaitForCompleteNABDocumentNative.name + ' |  ' + 'No target doc');
                }
                this.Logger.FuncEnd(this.WaitForCompleteNABDocumentNative.name, friendly);
            }));
        });
    }
    WaitForNoUiFrontOverlay(friendly) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForNoUiFrontOverlay.name, friendly);
            var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForNoUiFrontOverlay.name, true);
            let overLayExists = true;
            let iframeElem = document.getElementById('jqueryModalDialogsFrame');
            let iframeContentDoc = iframeElem.contentDocument;
            let iframeContentDocBody = iframeContentDoc.body;
            while (iterationJr.DecrementAndKeepGoing() && overLayExists) {
                yield iterationJr.Wait();
                let foundElem = iframeContentDocBody.querySelector(':scope > .ui-widget-overlay.ui-front');
                overLayExists = foundElem !== null;
            }
            if (iterationJr.IsExhausted) {
                this.Logger.Log(iterationJr.IsExhaustedMsg);
                reject(iterationJr.IsExhaustedMsg);
            }
            else {
                resolve();
            }
            this.Logger.FuncEnd(this.WaitForNoUiFrontOverlay.name, friendly);
        }));
    }
    WaitForTimePeriod(timeToWaitMs, friendly) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForTimePeriod.name, friendly);
            var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForTimePeriod.name, true);
            let startTimeStamp = new Date().getTime();
            let timeElapsed = 0;
            while (iterationJr.DecrementAndKeepGoing() && timeElapsed < timeToWaitMs) {
                timeElapsed = new Date().getTime() - startTimeStamp;
                yield iterationJr.Wait();
            }
            if (iterationJr.IsExhausted) {
                this.Logger.Log(iterationJr.IsExhaustedMsg);
                reject(iterationJr.IsExhaustedMsg);
            }
            else {
                resolve();
            }
            this.Logger.FuncEnd(this.WaitForTimePeriod.name, friendly);
        }));
    }
    WaitForCompleteNABDataOneDoc(targetDoc, friendly) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForCompleteNABDataOneDoc.name, friendly);
                if (targetDoc) {
                    yield this.WaitForCompleteNABDocumentNative(targetDoc.ContentDoc, friendly)
                        .then((result) => {
                        result.LogDebugValues();
                        resolve(result);
                    })
                        .catch((err) => reject(this.WaitForCompleteNABDataOneDoc.name + ' | ' + err));
                }
                else {
                    reject(this.WaitForCompleteNABDataOneDoc.name + ' No target doc');
                }
                this.Logger.FuncEnd(this.WaitForCompleteNABDataOneDoc.name, friendly);
            }));
        });
    }
    GetTopLevelIframe(targetDoc) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            var toReturn = null;
            let frameHelper = new FrameHelper_FrameHelper(this.HindeCore);
            yield frameHelper.GetIFramesAsBaseFrameProxies(targetDoc)
                .then((allIframe) => {
                var maxZVal = -1;
                if (allIframe && allIframe.length > 0) {
                    for (var idx = 0; idx < allIframe.length; idx++) {
                        var candidateIframe = allIframe[idx];
                        if (candidateIframe && candidateIframe.GetZindexAsInt() > maxZVal) {
                            toReturn = candidateIframe;
                            maxZVal = candidateIframe.GetZindexAsInt();
                        }
                    }
                }
            });
            return toReturn;
        });
    }
    WaitForIframeElemAndReturnWhenReady(haystackDoc, selector, iframeNickName) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForIframeElemAndReturnWhenReady.name);
                let factoryHelp = new FactoryHelper_FactoryHelper(this.HindeCore);
                yield this.WaitForAndReturnFoundElem(haystackDoc, selector)
                    .then((foundElem) => RecipeBasics_awaiter(this, void 0, void 0, function* () { return yield factoryHelp.BaseFramePromiseFactory(foundElem, iframeNickName); }))
                    .then((result) => resolve(result))
                    .catch((err) => reject(err));
                this.Logger.FuncEnd(this.WaitForIframeElemAndReturnWhenReady.name);
            }));
        });
    }
    WaitForNewIframeContentEditor(allIframesBefore, targetDoc) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForNewIframe.name);
                let toReturn = null;
                yield this.WaitForNewIframeNative(allIframesBefore, targetDoc)
                    .then((result) => {
                    toReturn = new DTFrameProxy_DTFrameProxy(this.HindeCore, result);
                })
                    .then(() => resolve(toReturn))
                    .catch((err) => reject(this.WaitForNewIframeContentEditor.name + ' | ' + err));
                this.Logger.FuncEnd(this.WaitForNewIframe.name);
            }));
        });
    }
    WaitForNewIframeNative(allIframesBefore, dateOneDoc) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForNewIframeNative.name);
                this.ErrorHand.ThrowIfNullOrUndefined(this.WaitForNewIframe.name, [allIframesBefore, dateOneDoc]);
                var toReturn = null;
                var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForNewIframeNative.name, true);
                let beforeCount = allIframesBefore.length;
                while (!toReturn && iterationJr.DecrementAndKeepGoing()) {
                    var allIframesAfter;
                    let frameHelper = new FrameHelper_FrameHelper(this.HindeCore);
                    allIframesAfter = frameHelper.GetIFramesFromDataOneDoc(dateOneDoc);
                    var count = allIframesAfter.length;
                    if (count > beforeCount) {
                        var newIframes = allIframesAfter.filter(e => !allIframesBefore.includes(e));
                        toReturn = newIframes[0];
                        resolve(toReturn);
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                reject('probably ' + iterationJr.IsExhaustedMsg);
                this.Logger.FuncEnd(this.WaitForNewIframeNative.name);
            }));
        });
    }
    WaitForNewIframe(allIframesBefore, targetDoc) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForNewIframe.name);
                this.Logger.LogAsJsonPretty('allIframesBefore', allIframesBefore);
                this.ErrorHand.ThrowIfNullOrUndefined(this.WaitForNewIframe.name, [allIframesBefore, targetDoc]);
                var toReturn = null;
                var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForNewIframe.name, true);
                let beforeCount = allIframesBefore.length;
                while (!toReturn && iterationJr.DecrementAndKeepGoing()) {
                    var allIframesAfter;
                    let frameHelper = new FrameHelper_FrameHelper(this.HindeCore);
                    yield frameHelper.GetIFramesAsBaseFrameProxies(targetDoc)
                        .then((result) => allIframesAfter = result)
                        .catch((err) => reject(this.WaitForNewIframe.name + ' ' + err));
                    var count = allIframesAfter.length;
                    this.Logger.Log('iFrame count before: ' + beforeCount);
                    this.Logger.Log('iFrame count after: ' + allIframesAfter.length);
                    if (count > beforeCount) {
                        var newIframes = allIframesAfter.filter(e => !allIframesBefore.includes(e));
                        toReturn = newIframes[0];
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                this.Logger.FuncEnd(this.WaitForNewIframe.name);
                if (toReturn) {
                    resolve(toReturn);
                }
                else {
                    reject(iterationJr.IsExhaustedMsg);
                }
            }));
        });
    }
    WaitForElemToHaveClassOrReject(htmlElement, classNames, friendly) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForElemToHaveClassOrReject.name, friendly + ' - ' + classNames);
                this.ErrorHand.ThrowIfNullOrUndefined(this.WaitForElemToHaveClassOrReject.name, [htmlElement, classNames]);
                this.Logger.LogAsJsonPretty('classNames', classNames);
                var elemHasClassName = false;
                var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForElemToHaveClassOrReject.name + ' : ' + classNames + ' ' + friendly, true);
                while (!elemHasClassName && iterationJr.DecrementAndKeepGoing()) {
                    let classList = htmlElement.classList;
                    classNames.forEach((className) => {
                        if (classList.contains(className)) {
                            elemHasClassName = true;
                        }
                    });
                    this.Logger.LogAsJsonPretty('classList', classList);
                    if (elemHasClassName) {
                        this.Logger.Log('has it');
                        resolve();
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (iterationJr.IsExhausted) {
                    reject(iterationJr.IsExhaustedMsg);
                }
                this.Logger.FuncEnd(this.WaitForElemToHaveClassOrReject.name, friendly);
            }));
        });
    }
    WaitAndReturnFoundFromContainer(haystackElem, selector, friendly) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.ErrorHand.ThrowIfNullOrUndefined(this.WaitAndReturnFoundFromContainer.name, [haystackElem, selector]);
                var toReturnFoundElem = null;
                var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitAndReturnFoundFromContainer.name + ' : ' + selector + ' ' + friendly, true);
                while (!toReturnFoundElem && iterationJr.DecrementAndKeepGoing()) {
                    toReturnFoundElem = haystackElem.querySelector(selector);
                    if (toReturnFoundElem) {
                        resolve(toReturnFoundElem);
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (iterationJr.IsExhausted) {
                    reject(iterationJr.IsExhaustedMsg);
                }
            }));
        });
    }
    WaitForAndReturnFoundElem(haystackDoc, selector, overrideIterCount = 8) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForAndReturnFoundElem.name);
                var toReturnFoundElem = null;
                var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForAndReturnFoundElem.name + ' - ' + selector + ' - ' + haystackDoc.Nickname, true, overrideIterCount);
                while (!toReturnFoundElem && iterationJr.DecrementAndKeepGoing()) {
                    toReturnFoundElem = haystackDoc.ContentDoc.querySelector(selector);
                    if (toReturnFoundElem) {
                        resolve(toReturnFoundElem);
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                reject(iterationJr.IsExhaustedMsg);
                this.Logger.FuncEnd(this.WaitForAndReturnFoundElem.name);
            }));
        });
    }
    WaitForAndClickWithPayload(selector, targetDoc, payload) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForAndClickWithPayload.name, selector);
            yield this.WaitForThenClick([selector], targetDoc)
                .then(() => resolve(payload))
                .catch(ex => {
                this.ErrorHand.ErrorAndThrow(this.WaitForAndClickWithPayload.name, ex);
                reject(ex);
            });
        }));
    }
    TabWaitForReadyStateCompleteNative(browserTab) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            let iterHelper = new IterationDrone_IterationDrone(this.HindeCore, this.TabWaitForReadyStateCompleteNative.name, true);
            let result = new PromiseResult_PromiseResult(this.TabWaitForReadyStateCompleteNative.name, this.HindeCore);
            while (browserTab.status !== 'complete' && iterHelper.DecrementAndKeepGoing()) {
                this.Logger.LogVal('tab status', browserTab.status);
                yield iterHelper.Wait;
            }
            if (browserTab.status === 'complete') {
                result.MarkSuccessful();
            }
            else {
                result.MarkFailed('browser status: ' + browserTab.status);
                if (iterHelper.IsExhausted) {
                    result.MarkFailed(iterHelper.IsExhaustedMsg);
                }
            }
            if (result.WasSuccessful()) {
                resolve();
            }
            else {
                reject(result.RejectReasons);
            }
        }));
    }
    TabChainSetHrefWaitForComplete(href) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.TabChainSetHrefWaitForComplete.name, href.AbsUrl);
            yield browser.tabs.query({ currentWindow: true, active: true })
                .then((result) => {
                let targetTab = result[0];
                browser.tabs.update(targetTab.id, { url: href.AbsUrl });
                this.TabWaitForReadyStateCompleteNative(targetTab);
            })
                .then(resolve)
                .catch((ex) => reject(ex));
            this.Logger.FuncEnd(this.TabChainSetHrefWaitForComplete.name, href.AbsUrl);
        }));
    }
    RaceWaitAndClick(selector, targetDoc) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                yield this.WaitForThenClick([selector.sc920, selector.sc820], targetDoc)
                    .then(() => resolve())
                    .catch((err) => reject(this.RaceWaitAndClick.name + ' | ' + err));
            }));
        });
    }
    WaitForThenClick(selectorAr, targetDoc) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            this.ErrorHand.ThrowIfNullOrUndefined(this.WaitForThenClick.name, [selectorAr, targetDoc]);
            var found = null;
            var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForThenClick.name, true);
            while (!found && iterationJr.DecrementAndKeepGoing()) {
                for (var idx = 0; idx < selectorAr.length; idx++) {
                    found = targetDoc.ContentDoc.querySelector(selectorAr[idx]);
                    if (found) {
                        break;
                    }
                }
            }
            if (found) {
                try {
                    this.Logger.LogAsJsonPretty(this.WaitForThenClick.name + ' clicking', selectorAr);
                    found.click();
                    resolve();
                }
                catch (err) {
                    reject(this.WaitForThenClick.name + ' | ' + err);
                }
            }
            else {
                yield iterationJr.Wait()
                    .catch((err) => reject(this.WaitForThenClick.name + ' | ' + err));
            }
            if (!found && iterationJr.IsExhausted) {
                reject(iterationJr.IsExhaustedMsg);
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/Agents/InitResultsScWindowManager.js
class InitReportScWindowManager {
    constructor() {
        this.InitResultsDesktop = null;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/Agents/InitResultsDesktopProxy.js
class InitReport_DesktopProxy {
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DesktopPopUpMenuProxy.js
var DesktopPopUpMenuProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class DesktopPopUpMenuProxy_DTPopUpMenuProxy extends _HindeCoreBase {
    RecipeAddNewContentEditorToDesktop(AssociatedDoc) {
        return new Promise((resolve, reject) => DesktopPopUpMenuProxy_awaiter(this, void 0, void 0, function* () {
            this.ErrorHand.ThrowIfNullOrUndefined(this.RecipeAddNewContentEditorToDesktop.name, AssociatedDoc);
            let allIframeDataAtBeginning;
            let dtframeProxy;
            let frameHelper = new FrameHelper_FrameHelper(this.HindeCore);
            let recipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
            allIframeDataAtBeginning = frameHelper.GetIFramesFromDataOneDoc(AssociatedDoc);
            yield recipeBasics.WaitForThenClick([ContentConst.Const.Selector.SC.StartMenuLeftOption], AssociatedDoc)
                .catch((err) => reject(this.RecipeAddNewContentEditorToDesktop.name + ' ' + err));
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DesktopStartBarProxy/DesktopStartBarButtonProxy.js
var DesktopStartBarButtonProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






class DesktopStartBarButtonProxy_DesktopStartBarButtonProxy extends _HindeCoreBase {
    constructor(hindeCore, iframeElemId, associatedDoc) {
        super(hindeCore);
        this.AssociatedDoc = associatedDoc;
        this.FrameId = iframeElemId;
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
    }
    Instantiate_DestopStartBarButtonProxy() {
        return DesktopStartBarButtonProxy_awaiter(this, void 0, void 0, function* () {
            try {
                this.StartBarButtonElemId = ContentConst.Const.Names.Desktop.StartBarApplicationPrefix + this.FrameId;
                let querySelectBtn = '[id=' + this.StartBarButtonElemId + ']';
                this.FoundStartBarButton = this.AssociatedDoc.ContentDoc.querySelector(querySelectBtn);
                yield this.RecipeBasics.WaitAndReturnFoundFromContainer(this.FoundStartBarButton, ':scope > div > span', this.SetStateOfDesktopStartBarButtonAsync.name)
                    .then((containerSpanElement) => this.ContainerSpanElement = containerSpanElement);
            }
            catch (err) {
            }
        });
    }
    DesignMainIconNode(mainIconSrc) {
        let newMainIconNode = document.createElement('img');
        newMainIconNode.width = 16;
        newMainIconNode.height = 16;
        newMainIconNode.src = mainIconSrc;
        newMainIconNode.style.position = 'relative';
        newMainIconNode.style.left = '-8px';
        newMainIconNode.style.top = '-8px';
        newMainIconNode.style.marginRight = '-4px';
        newMainIconNode.style.opacity = '0.5';
        newMainIconNode.border = '0';
        newMainIconNode.classList.add("scContentTreeNodeIcon");
        return newMainIconNode;
    }
    DesignItemIconNode(itemIconSource) {
        let newItemIconNode = document.createElement('img');
        newItemIconNode.width = 16;
        newItemIconNode.height = 16;
        newItemIconNode.src = itemIconSource;
        newItemIconNode.border = '0px';
        newItemIconNode.classList.add("scContentTreeNodeIcon");
        return newItemIconNode;
    }
    SetStateOfDesktopStartBarButtonAsync(stateOfContentTree) {
        this.Logger.FuncStart(this.SetStateOfDesktopStartBarButtonAsync.name);
        this.ErrorHand.ThrowIfNullOrUndefined(this.SetStateOfDesktopStartBarButtonAsync.name, [stateOfContentTree]);
        let itemIconSource = stateOfContentTree.ActiveNodeFlat.IconSrc;
        let mainIconSrc = stateOfContentTree.ActiveNodeFlat.MainIconSrc;
        let text = StaticHelpers_StaticHelpers.BufferString(stateOfContentTree.ActiveNodeFlat.Friendly, ContentConst.Const.Numbers.Desktop.MaxToolBarNameChars, BufferChar.space, BufferDirection.right);
        this.Logger.LogVal('iconSrc', itemIconSource);
        this.Logger.LogVal('mainIconSrc', mainIconSrc);
        if (itemIconSource.length > 0) {
            let newItemIconNode = this.DesignItemIconNode(itemIconSource);
            let newMainIconNode = this.DesignMainIconNode(mainIconSrc);
            if (this.ContainerSpanElement) {
                this.ContainerSpanElement.innerHTML = newMainIconNode.outerHTML + newItemIconNode.outerHTML + text;
            }
            else {
                this.ErrorHand.ErrorAndThrow(this.SetStateOfDesktopStartBarButtonAsync.name, 'no container span element');
            }
        }
        else {
            this.ErrorHand.WarningAndContinue(this.SetStateOfDesktopStartBarButtonAsync.name, 'no icon source');
        }
        this.Logger.FuncEnd(this.SetStateOfDesktopStartBarButtonAsync.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DesktopStartBarProxy/DesktopStartBarProxy.js
var DesktopStartBarProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class DesktopStartBarProxy_DTStartBarProxy extends _HindeCoreBase {
    constructor(hindeCore, associatedDoc) {
        super(hindeCore);
        this.StartBarButtonProxyBucket = [];
        this.Logger.CTORStart(DesktopStartBarProxy_DTStartBarProxy.name);
        this.AssociatedDoc = associatedDoc;
        this.Logger.CTOREnd(DesktopStartBarProxy_DTStartBarProxy.name);
    }
    Instantiate_DTStartBarProxy() {
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
    }
    GetStartBarButtonById(targetId) {
        return this.AssociatedDoc.ContentDoc.querySelector('[id=' + targetId + ']');
    }
    GetStartBarElement() {
        if (!this.__statBarElem) {
            this.__statBarElem = this.AssociatedDoc.ContentDoc.querySelector(ContentConst.Const.Selector.SC.Desktop.DtStartBar);
        }
        return this.__statBarElem;
    }
    TriggerRedButton() {
        return DesktopStartBarProxy_awaiter(this, void 0, void 0, function* () {
            try {
                yield this.RecipeBasics.RaceWaitAndClick(ContentConst.Const.Selector.SC.scStartButton, this.AssociatedDoc);
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.TriggerRedButton.name, err);
            }
        });
    }
    GetAssociatedStartBarButton(dTFrameProxyMutationEventPayload) {
        return DesktopStartBarProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DesktopStartBarProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetAssociatedStartBarButton.name);
                this.ErrorHand.ThrowIfNullOrUndefined(this.GetAssociatedStartBarButton.name, [dTFrameProxyMutationEventPayload]);
                let foundStartBarButtonProxy = null;
                this.StartBarButtonProxyBucket.forEach((startBarButtonProxy) => {
                    if (startBarButtonProxy.FrameId === dTFrameProxyMutationEventPayload.FrameId) {
                        foundStartBarButtonProxy = startBarButtonProxy;
                        this.Logger.Log('found a match');
                    }
                });
                if (!foundStartBarButtonProxy) {
                    this.Logger.Log('no match found, making it');
                    foundStartBarButtonProxy = new DesktopStartBarButtonProxy_DesktopStartBarButtonProxy(this.HindeCore, dTFrameProxyMutationEventPayload.FrameId, this.AssociatedDoc);
                    yield foundStartBarButtonProxy.Instantiate_DestopStartBarButtonProxy()
                        .catch((err) => this.ErrorHand.ErrorAndThrow(this.GetAssociatedStartBarButton.name, err));
                    this.StartBarButtonProxyBucket.push(foundStartBarButtonProxy);
                }
                resolve(foundStartBarButtonProxy);
                this.Logger.FuncEnd(this.GetAssociatedStartBarButton.name);
            }));
        });
    }
    OnTreeMutationEvent_DesktopStartBarProxy(dTAreaProxyMutationEvent_Payload) {
        this.Logger.FuncStart(this.OnTreeMutationEvent_DesktopStartBarProxy.name);
        if (dTAreaProxyMutationEvent_Payload) {
            if (dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload
                &&
                    dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload.ContentEditorProxyMutationPayload
                &&
                    dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload.ContentEditorProxyMutationPayload.TreeMutationEvent_Payload
                &&
                    dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload.ContentEditorProxyMutationPayload.TreeMutationEvent_Payload.StateOfContentTree
                &&
                    dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload.ContentEditorProxyMutationPayload.TreeMutationEvent_Payload.StateOfContentTree.ActiveNodeFlat) {
                let contentTreeProxyMutationEvent_Payload = dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload.ContentEditorProxyMutationPayload.TreeMutationEvent_Payload;
                if (contentTreeProxyMutationEvent_Payload.StateOfContentTree.ActiveNodeFlat) {
                    this.GetAssociatedStartBarButton(dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload)
                        .then((startBarButtonProxy) => startBarButtonProxy.SetStateOfDesktopStartBarButtonAsync(contentTreeProxyMutationEvent_Payload.StateOfContentTree))
                        .catch((err) => this.ErrorHand.ErrorAndThrow(this.OnTreeMutationEvent_DesktopStartBarProxy.name, err));
                }
                else {
                    this.Logger.Log('null activeNodeFlat provided');
                }
            }
            else {
                this.Logger.LogAsJsonPretty('dTAreaProxyMutationEvent_Payload', dTAreaProxyMutationEvent_Payload);
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.OnTreeMutationEvent_DesktopStartBarProxy.name, 'Null payload');
        }
        this.Logger.FuncEnd(this.OnTreeMutationEvent_DesktopStartBarProxy.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/Agents/InitReport_DTAreaProxy.js
class InitReport_DTAreaProxy {
    constructor() {
        this.InitResultsDTFrameProxies = [];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/NativeIFrameAddedEvent/NativeIFrameAddedEvent_Observer.js

class NativeIFrameAddedEvent_Observer_NativeIFrameAddedEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, NativeIFrameAddedEvent_Observer_NativeIFrameAddedEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/NativeIFrameAddedEvent/NativeIFrameAddedEvent_Subject.js


class NativeIFrameAddedEvent_Subject_NativeIFrameAddedEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore, targetDoc) {
        super(hindeCore, NativeIFrameAddedEvent_Subject_NativeIFrameAddedEvent_Subject.name);
        this.Logger.CTORStart(NativeIFrameAddedEvent_Subject_NativeIFrameAddedEvent_Subject.name);
        if (!targetDoc) {
            this.ErrorHand.ErrorAndThrow(NativeIFrameAddedEvent_Subject_NativeIFrameAddedEvent_Subject.name, 'No target doc');
        }
        this.AssociatedDoc = targetDoc;
        this.InitMutationObserver();
        this.Logger.CTOREnd(NativeIFrameAddedEvent_Subject_NativeIFrameAddedEvent_Subject.name);
    }
    CallBackOnNativeMutation(mutations) {
        this.Logger.FuncStart(this.CallBackOnNativeMutation.name);
        if (this.HasObservers()) {
            mutations.forEach((mutation, index) => {
                this.Logger.Log('processing mutation ' + (index + 1) + ':' + mutations.length);
                this.Logger.LogVal('mutation.addedNodes.length ', mutation.addedNodes.length);
                if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                    let mutatedElement = (mutation.target);
                    let addedDTFrameProxies = [];
                    mutation.addedNodes.forEach((addedNode) => {
                        if (addedNode instanceof HTMLIFrameElement) {
                            let dtFrameProxy = new DTFrameProxy_DTFrameProxy(this.HindeCore, addedNode);
                            addedDTFrameProxies.push(dtFrameProxy);
                        }
                    });
                    if (addedDTFrameProxies.length > 0) {
                        this.Logger.LogVal('addedDTFrameProxies.length', addedDTFrameProxies.length);
                        let desktopMutatedEvent_Payload = {
                            MutatedElement: mutatedElement,
                            AddedDTFrameProxies: addedDTFrameProxies,
                            DTFrameProxyMutationEvent_Payload: null
                        };
                        this.NotifyObserversAsync(desktopMutatedEvent_Payload);
                    }
                    else {
                        this.Logger.Log('no notification, no DTFrameProxy added');
                    }
                }
            });
        }
        else {
            this.Logger.Log('No observers');
        }
        this.Logger.FuncEnd(this.CallBackOnNativeMutation.name);
    }
    InitMutationObserver() {
        this.Logger.FuncStart(this.InitMutationObserver.name);
        try {
            if (this.AssociatedDoc) {
                let self = this;
                let mutationObserver = new MutationObserver((mutations) => { self.CallBackOnNativeMutation(mutations); });
                let desktop = this.AssociatedDoc.ContentDoc.getElementById('Desktop');
                if (desktop) {
                    mutationObserver.observe(desktop, { attributes: false, subtree: false, childList: true });
                }
            }
            else {
                this.ErrorHand.ErrorAndThrow(this.InitMutationObserver.name, 'no AssociatedDoc');
            }
        }
        catch (err) {
            throw (err);
        }
        this.Logger.FuncEnd(this.InitMutationObserver.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/DTAreaProxyMutationEvent/DTAreaProxyMutationEvent_Subject.js

class DTAreaProxyMutationEvent_Subject_DTAreaProxyMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore) {
        super(hindeCore, DTAreaProxyMutationEvent_Subject_DTAreaProxyMutationEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/DTFrameProxyMutationEvent/DTFrameProxyMutationEvent_Observer.js

class DTFrameProxyMutationEvent_Observer_DTFrameProxyMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, DTFrameProxyMutationEvent_Observer_DTFrameProxyMutationEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DTAreaProxy.js
var DTAreaProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};










class DTAreaProxy_DTAreaProxy extends _HindeCoreBase {
    constructor(hindeCore, associatedDoc, parentDesktopProxy) {
        super(hindeCore);
        this.FramesBucket = [];
        this.IncomingSetStateList = [];
        this.AssociatedDoc = associatedDoc;
        this.ParentDesktopProxy = parentDesktopProxy;
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
    }
    Instantiate_DTAreaProxy() {
        return DTAreaProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.Instantiate_DTAreaProxy.name);
            try {
                this.InitReportForDTAreaProxy = new InitReport_DTAreaProxy();
                this.NativeIFrameAddedEvent_Subject = new NativeIFrameAddedEvent_Subject_NativeIFrameAddedEvent_Subject(this.HindeCore, this.AssociatedDoc);
                this.DTAreaProxyMutationEvent_Subject = new DTAreaProxyMutationEvent_Subject_DTAreaProxyMutationEvent_Subject(this.HindeCore);
                this.DTFrameProxyMutationEvent_Observer = new DTFrameProxyMutationEvent_Observer_DTFrameProxyMutationEvent_Observer(this.HindeCore, this.OnDTFProxyMutationEvent.bind(this));
                this.NativeIframeAddedEvent_Observer = new NativeIFrameAddedEvent_Observer_NativeIFrameAddedEvent_Observer(this.HindeCore, this.CallBackOnNativeIFrameAddedEvent.bind(this));
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.Instantiate_DTAreaProxy.name, err);
            }
            this.Logger.FuncEnd(this.Instantiate_DTAreaProxy.name);
        });
    }
    WireEvents_DTAreaProxy() {
        this.Logger.FuncStart(this.WireEvents_DTAreaProxy.name);
        this.NativeIFrameAddedEvent_Subject.RegisterObserver(this.NativeIframeAddedEvent_Observer);
        this.Logger.FuncEnd(this.WireEvents_DTAreaProxy.name);
    }
    CallBackOnNativeIFrameAddedEvent(payload) {
        return DTAreaProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.CallBackOnNativeIFrameAddedEvent.name);
            try {
                if (payload && payload.AddedDTFrameProxies.length > 0) {
                    payload.AddedDTFrameProxies.forEach((dtFrameProxy) => DTAreaProxy_awaiter(this, void 0, void 0, function* () {
                        yield dtFrameProxy.WaitForCompleteNABFrameProxyOrReject()
                            .then(() => {
                            let indexOf = dtFrameProxy.HTMLIframeElement.contentDocument.URL.indexOf(SharedConst.Const.UrlSuffix.SitecoreShellApplicationsContentEditor);
                            this.Logger.LogVal('indexof', indexOf);
                            if (indexOf > -1) {
                                this.ProcessNewFrameProxy(dtFrameProxy);
                            }
                        })
                            .then(() => this.Logger.Log(this.CallBackOnNativeIFrameAddedEvent.name + ' Complete'))
                            .catch((err) => this.ErrorHand.ErrorAndThrow(this.CallBackOnNativeIFrameAddedEvent.name, err));
                    }));
                }
                else {
                    this.ErrorHand.WarningAndContinue(this.CallBackOnNativeIFrameAddedEvent.name, 'Something in the payload did not match');
                }
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.CallBackOnNativeIFrameAddedEvent.name, err);
            }
            this.Logger.FuncEnd(this.CallBackOnNativeIFrameAddedEvent.name);
        });
    }
    ProcessNewFrameProxy(dtFrameProxy) {
        return DTAreaProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.ProcessNewFrameProxy.name, dtFrameProxy.Friendly);
            this.Logger.LogVal('iframe id', dtFrameProxy.HTMLIframeElement.id);
            try {
                yield dtFrameProxy.WaitForCompleteNABFrameProxyOrReject()
                    .then(() => this.newFrameStep1_Instantiate(dtFrameProxy))
                    .then(() => this.NewFrameStep2_SetStateOfDTFrameIfQueued(dtFrameProxy))
                    .then(() => this.NewFrameStep3_WireEvents(dtFrameProxy))
                    .then(() => this.NewFrameStep4_NotifyObserversOfAreaProxyMutation(dtFrameProxy))
                    .then(() => this.NewFrameStep5_AddToDTFrameProxyBucket(dtFrameProxy))
                    .then(() => this.NewFrameStep6_TriggerEvents(dtFrameProxy))
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.ProcessNewFrameProxy.name, err));
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.ProcessNewFrameProxy.name, err);
            }
            this.Logger.FuncEnd(this.ProcessNewFrameProxy.name, dtFrameProxy.Friendly);
        });
    }
    newFrameStep1_Instantiate(dtFrameProxy) {
        return DTAreaProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.newFrameStep1_Instantiate.name);
            try {
                yield dtFrameProxy.Instantiate_DTFrameProxy()
                    .then(() => { })
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.newFrameStep1_Instantiate.name, err));
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.newFrameStep1_Instantiate.name, err);
            }
            this.Logger.FuncEnd(this.newFrameStep1_Instantiate.name);
        });
    }
    NewFrameStep3_WireEvents(dtFrameProxy) {
        this.Logger.FuncStart(this.NewFrameStep3_WireEvents.name);
        dtFrameProxy.DTFrameProxyMutationEvent_Subject.RegisterObserver(this.DTFrameProxyMutationEvent_Observer);
        dtFrameProxy.WireEvents_DTFrameProxy();
        this.Logger.FuncEnd(this.NewFrameStep3_WireEvents.name);
    }
    NewFrameStep2_SetStateOfDTFrameIfQueued(dtFrameProxy) {
        return DTAreaProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.NewFrameStep2_SetStateOfDTFrameIfQueued.name);
            let queuedState = this.IncomingSetStateList.shift();
            if (queuedState) {
                yield dtFrameProxy.SetStateOfDTFrame(queuedState);
            }
            else {
                this.Logger.Log('no queued states');
            }
            this.Logger.FuncEnd(this.NewFrameStep2_SetStateOfDTFrameIfQueued.name);
        });
    }
    NewFrameStep4_NotifyObserversOfAreaProxyMutation(dtFrameProxy) {
        this.Logger.FuncStart(this.NewFrameStep4_NotifyObserversOfAreaProxyMutation.name);
        let payload = {
            AddedDTFrameProxies: [dtFrameProxy],
            MutatedElement: null,
            DTFrameProxyMutationEvent_Payload: null
        };
        this.DTAreaProxyMutationEvent_Subject.NotifyObserversAsync(payload);
        this.Logger.FuncEnd(this.NewFrameStep4_NotifyObserversOfAreaProxyMutation.name);
    }
    SetStateOfDTArea(StateOfDTArea) {
        return new Promise((resolve, reject) => DTAreaProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.SetStateOfDTArea.name);
            let contentEditorCountNeeded = 0;
            if (StateOfDTArea) {
                if (!StaticHelpers_StaticHelpers.IsNullOrUndefined([this.AssociatedDoc])) {
                    this.AddToIncomingSetStateList(StateOfDTArea);
                    contentEditorCountNeeded = StateOfDTArea.StateOfDTFrames.length;
                }
                else {
                    reject(this.SetStateOfDTArea.name + ' bad data');
                }
            }
            else {
                reject(this.SetStateOfDTArea.name + '  No state provided');
            }
            resolve(contentEditorCountNeeded);
            this.Logger.FuncEnd(this.SetStateOfDTArea.name);
        }));
    }
    NewFrameStep5_AddToDTFrameProxyBucket(dtframeProxy) {
        this.Logger.FuncStart(this.NewFrameStep5_AddToDTFrameProxyBucket.name);
        let toReturn = false;
        if (!this.BucketHasSameItem(dtframeProxy)) {
            this.FramesBucket.push(dtframeProxy);
            toReturn = true;
        }
        this.Logger.FuncEnd(this.NewFrameStep5_AddToDTFrameProxyBucket.name);
        return (toReturn);
    }
    NewFrameStep6_TriggerEvents(dtframeProxy) {
        this.Logger.FuncStart(this.NewFrameStep6_TriggerEvents.name);
        dtframeProxy.ContentEditorProxy.TriggerActiveNodeChangeEvent();
        this.Logger.FuncEnd(this.NewFrameStep6_TriggerEvents.name);
    }
    OnDTFProxyMutationEvent(dTFrameProxyMutationEvent_Payload) {
        this.Logger.FuncStart(this.OnDTFProxyMutationEvent.name);
        let dTAreaProxyMutationEvent = {
            DTFrameProxyMutationEvent_Payload: dTFrameProxyMutationEvent_Payload,
        };
        this.DTAreaProxyMutationEvent_Subject.NotifyObserversAsync(dTAreaProxyMutationEvent);
        this.Logger.FuncEnd(this.OnDTFProxyMutationEvent.name);
    }
    AddToIncomingSetStateList(stateOfFrame) {
        this.Logger.FuncStart(this.AddToIncomingSetStateList.name);
        stateOfFrame.StateOfDTFrames.forEach((stateOfDTFrame) => this.IncomingSetStateList.push(stateOfDTFrame));
        this.Logger.FuncEnd(this.AddToIncomingSetStateList.name);
    }
    PublishTopFrame() {
        return DTAreaProxy_awaiter(this, void 0, void 0, function* () {
            let dtFrameProxy = this.GetTopFrame();
            if (dtFrameProxy) {
                yield dtFrameProxy.ContentEditorProxy.PublishItem();
            }
        });
    }
    GetTopFrame() {
        let toReturn = null;
        this.FramesBucket.forEach((dtframeProxy) => {
            if (dtframeProxy.GetZindexAsInt() == 1) {
                toReturn = dtframeProxy;
            }
        });
        return toReturn;
    }
    GetStateOfDTAreaProxy() {
        return new Promise((resolve, reject) => DTAreaProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetStateOfDTAreaProxy.name, this.FramesBucket.length.toString());
            let stateOfDTArea = new DefaultStateOfDTArea();
            let promiseAr = [];
            for (var idx = 0; idx < this.FramesBucket.length; idx++) {
                let dtframeProxy = this.FramesBucket[idx];
                promiseAr.push(dtframeProxy.GetStateOfDTFrame());
            }
            ;
            yield Promise.all(promiseAr)
                .then((stateOfDTFrames) => {
                stateOfDTFrames.forEach((stateOfDTFrame, index) => {
                    stateOfDTArea.StateOfDTFrames.push(stateOfDTFrame);
                    if (stateOfDTFrame.ZIndex === 1) {
                        stateOfDTArea.ActiveDTFrameIndex = index;
                    }
                });
            })
                .then(() => resolve(stateOfDTArea))
                .catch((err) => reject(this.GetStateOfDTAreaProxy.name + ' | ' + err));
            this.Logger.FuncEnd(this.GetStateOfDTAreaProxy.name);
        }));
    }
    BucketHasSameItem(dtFrameBucketItem) {
        let toReturn = true;
        if (this.FramesBucket.indexOf(dtFrameBucketItem) < 0) {
            toReturn = false;
        }
        else {
            toReturn = true;
            this.ErrorHand.WarningAndContinue(this.BucketHasSameItem.name, 'Proxy already exists in bucket');
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/DTAreaProxyMutationEvent/DTAreaProxyMutationEvent_Observer.js

class DTAreaProxyMutationEvent_Observer_DTAreaProxyMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, DTAreaProxyMutationEvent_Observer_DTAreaProxyMutationEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/DesktopProxyMutationEvent/DesktopProxyMutationEvent_Subject.js

class DesktopProxyMutationEvent_Subject_DesktopProxyMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore) {
        super(hindeCore, DesktopProxyMutationEvent_Subject_DesktopProxyMutationEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DesktopProxy.js
var DesktopProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};










class DesktopProxy_DesktopProxy extends _HindeCoreBase {
    constructor(hindeCore, associatedDoc) {
        super(hindeCore);
        this.Logger.CTORStart(DesktopProxy_DesktopProxy.name);
        if (associatedDoc) {
            this.AssociatedDoc = associatedDoc;
        }
        else {
            this.ErrorHand.ErrorAndThrow(DesktopProxy_DesktopProxy.name, 'No associated doc');
        }
        this.Logger.CTOREnd(DesktopProxy_DesktopProxy.name);
    }
    Instantiate_DesktopProxy() {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart(this.Instantiate_DesktopProxy.name);
                let initReportDesktopProxy = new InitReport_DesktopProxy();
                this.DTAreaProxyMutationEvent_Observer = new DTAreaProxyMutationEvent_Observer_DTAreaProxyMutationEvent_Observer(this.HindeCore, this.OnAreaProxyMutationEvent.bind(this));
                this.DTAreaProxy = new DTAreaProxy_DTAreaProxy(this.HindeCore, this.AssociatedDoc, this);
                this.DesktopProxyMutationEvent_Subject = new DesktopProxyMutationEvent_Subject_DesktopProxyMutationEvent_Subject(this.HindeCore);
                yield this.DTAreaProxy.Instantiate_DTAreaProxy();
                this.DTStartBarProxy = new DesktopStartBarProxy_DTStartBarProxy(this.HindeCore, this.AssociatedDoc);
                this.RecipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
                yield this.DTStartBarProxy.Instantiate_DTStartBarProxy();
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.Instantiate_DesktopProxy.name, err);
            }
            this.Logger.FuncEnd(this.Instantiate_DesktopProxy.name);
        });
    }
    WireEvents_DesktopProxy() {
        this.Logger.FuncStart(this.WireEvents_DesktopProxy.name);
        this.DTAreaProxy.WireEvents_DTAreaProxy();
        this.DTAreaProxy.DTAreaProxyMutationEvent_Subject.RegisterObserver(this.DTAreaProxyMutationEvent_Observer);
        this.Logger.FuncEnd(this.WireEvents_DesktopProxy.name);
    }
    PublishItem() {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            yield this.DTAreaProxy.PublishTopFrame();
        });
    }
    AddContentEditorAsync() {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            try {
                this.DTPopUpMenuProxy = new DesktopPopUpMenuProxy_DTPopUpMenuProxy(this.HindeCore);
                yield this.DTStartBarProxy.TriggerRedButton()
                    .then(() => this.DTPopUpMenuProxy.RecipeAddNewContentEditorToDesktop(this.AssociatedDoc))
                    .then(() => this.RecipeBasics.WaitForTimePeriod(ContentConst.Const.Numbers.Desktop.TimeNewCEWaitForScOverlayToClearMs, this.AddContentEditorAsync.name))
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.AddContentEditorAsync.name, err));
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.AddContentEditorAsync.name, err);
            }
        });
    }
    OnAreaProxyMutationEvent(dTAreaProxyMutationEvent_Payload) {
        this.Logger.FuncStart(this.OnAreaProxyMutationEvent.name);
        this.DTStartBarProxy.OnTreeMutationEvent_DesktopStartBarProxy(dTAreaProxyMutationEvent_Payload);
        this.Logger.FuncEnd(this.OnAreaProxyMutationEvent.name);
    }
    GetAssociatedDoc() {
        return this.AssociatedDoc;
    }
    GetStateOfDesktop() {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DesktopProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetStateOfDesktop.name);
                let toReturnDesktopState = new DefaultStateOfDesktop_DefaultStateOfDesktop();
                yield this.DTAreaProxy.GetStateOfDTAreaProxy()
                    .then((stateOfDTAreaProxy) => toReturnDesktopState.StateOfDTArea = stateOfDTAreaProxy)
                    .then(() => resolve(toReturnDesktopState))
                    .catch((err) => reject(this.GetStateOfDesktop.name + ' | ' + err));
                this.Logger.FuncEnd(this.GetStateOfDesktop.name);
            }));
        });
    }
    SetStateOfDesktopAsync(stateOfDesktop) {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.SetStateOfDesktopAsync.name);
            try {
                let promAr = [];
                this.DTAreaProxy.SetStateOfDTArea(stateOfDesktop.StateOfDTArea)
                    .then((requestedNewFrameCount) => {
                    this.Logger.LogVal('StateOfDTFrame count', requestedNewFrameCount.toString());
                    for (var idx = 0; idx < requestedNewFrameCount; idx++) {
                        promAr.push(this.AddContentEditorAsync());
                    }
                }).
                    then(() => Promise.all(promAr))
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.SetStateOfDesktopAsync.name, err));
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.SetStateOfDesktopAsync.name, err);
            }
            this.Logger.FuncEnd(this.SetStateOfDesktopAsync.name);
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ScWindowProxy.js
var ScWindowProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};














class ScWindowProxy_ScWindowProxy extends _HindeCoreBase {
    constructor(hindeCore, scUrlAgent) {
        super(hindeCore);
        this.Logger.CTORStart(ScWindowProxy_ScWindowProxy.name);
        this.ScUrlAgent = scUrlAgent;
        this.Logger.CTOREnd(ScWindowProxy_ScWindowProxy.name);
    }
    PublishActiveCE() {
        return new Promise((resolve, reject) => ScWindowProxy_awaiter(this, void 0, void 0, function* () {
            if (this.GetCurrentPageType() == ScWindowType.ContentEditor) {
                yield this.ContentEditorProxy.PublishItem()
                    .then(() => resolve());
            }
            else if (this.GetCurrentPageType() == ScWindowType.Desktop) {
                this.DesktopProxy.PublishItem()
                    .then(() => resolve())
                    .catch((err) => reject(this.PublishActiveCE.name + ' | ' + err));
            }
            else {
                reject(this.PublishActiveCE.name + ' Unhandled page type');
            }
        }));
    }
    Init() {
        this.TabSessionId = sessionStorage.getItem(ContentConst.Const.Storage.SessionKey);
        if (!this.TabSessionId) {
            this.TabSessionId = Guid_Guid.WithoutDashes(Guid_Guid.NewRandomGuid());
            sessionStorage.setItem(ContentConst.Const.Storage.SessionKey, this.TabSessionId);
        }
    }
    Instantiate_ScWindowProxy() {
        return ScWindowProxy_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart(this.Instantiate_ScWindowProxy.name);
                let recipesBasic = new RecipeBasics_RecipeBasics(this.HindeCore);
                this.InitReportScWindowManager = new InitReportScWindowManager();
                yield recipesBasic.WaitForCompleteNABDataOneDoc(this.GetTopLevelDoc(), 'Window.Document')
                    .then((result) => {
                    if (this.ScUrlAgent.GetScWindowType() === ScWindowType.Desktop) {
                        this.DesktopProxy = new DesktopProxy_DesktopProxy(this.HindeCore, this.GetTopLevelDoc());
                        this.DesktopProxy.Instantiate_DesktopProxy()
                            .then(() => this.DesktopProxy.WireEvents_DesktopProxy());
                    }
                })
                    .then(() => {
                    if (this.ScUrlAgent.GetScWindowType() === ScWindowType.ContentEditor) {
                        this.ContentEditorProxy = new ContentEditorProxy_ContentEditorProxy(this.HindeCore, this.GetTopLevelDoc(), 'Solo Content Editor doc');
                        this.ContentEditorProxy.Instantiate_ContentEditorProxy()
                            .then(() => this.ContentEditorProxy.WireEvents_ContentEditorProxy());
                    }
                })
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.Instantiate_ScWindowProxy.name, err));
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.Instantiate_ScWindowProxy.name, err);
            }
            this.Logger.FuncEnd(this.Instantiate_ScWindowProxy.name);
        });
    }
    GetCurrentPageType() {
        return this.ScUrlAgent.GetScWindowType();
    }
    GetTopLevelDoc() {
        if (!this.TopDoc) {
            this.TopDoc = {
                ContentDoc: window.document,
                DocId: Guid_Guid.NewRandomGuid(),
                Nickname: 'top doc'
            };
        }
        return this.TopDoc;
    }
    SetCompactCss(targetDoc) {
        return ScWindowProxy_awaiter(this, void 0, void 0, function* () {
            yield this.ContentEditorProxy.SetCompactCss();
        });
    }
    GetStates() {
        return new Promise((resolve, reject) => ScWindowProxy_awaiter(this, void 0, void 0, function* () {
            let toReturn = new DefaultStateOfScWindowProxy_DefaultStateOfScWindowProxy();
            if (this.ScUrlAgent.GetScWindowType() === ScWindowType.Desktop) {
                yield this.DesktopProxy.GetStateOfDesktop()
                    .then((result) => toReturn.StateOfDesktop = result)
                    .then(() => resolve(toReturn))
                    .catch((err) => reject(this.GetStates.name + ' | ' + err));
            }
            if (this.ScUrlAgent.GetScWindowType() === ScWindowType.ContentEditor) {
                yield this.ContentEditorProxy.GetStateOfContentEditorProxy()
                    .then((stateOfContentEditorProxy) => toReturn.StateOfContentEditor = stateOfContentEditorProxy)
                    .then(() => resolve(toReturn))
                    .catch((err) => reject(this.GetStates.name + ' | ' + err));
            }
        }));
    }
    GetStateOfScUiProxy(snapshotFlavor) {
        return new Promise((resolve, reject) => ScWindowProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetStateOfScUiProxy.name);
            let toReturnStateOfSitecoreWindow = new DefaultStateOfScUiProxy_DefaultStateOfScUiProxy();
            yield this.GetStates()
                .then((dataSitecoreWindowStates) => toReturnStateOfSitecoreWindow.StateOfScWindow = dataSitecoreWindowStates)
                .then(() => {
                toReturnStateOfSitecoreWindow.Meta = this.PopulateMetaData(snapshotFlavor, toReturnStateOfSitecoreWindow.StateOfScWindow);
                toReturnStateOfSitecoreWindow.Friendly = this.PopulateFriendly(toReturnStateOfSitecoreWindow.Meta);
            })
                .then(() => resolve(toReturnStateOfSitecoreWindow))
                .catch((err) => reject(this.GetStateOfScUiProxy.name + ' | ' + err));
            this.Logger.FuncEnd(this.GetStateOfScUiProxy.name);
        }));
    }
    SetStateOfScWin(dataToRestore) {
        return ScWindowProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScWindowProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.SetStateOfScWin.name);
                if (dataToRestore) {
                    if (dataToRestore.Meta.WindowType == ScWindowType.Desktop) {
                        if (dataToRestore.StateOfScWindow.StateOfDesktop) {
                            yield this.DesktopProxy.SetStateOfDesktopAsync(dataToRestore.StateOfScWindow.StateOfDesktop)
                                .then(() => resolve())
                                .catch((err) => reject(this.SetStateOfScWin.name + ' | ' + err));
                        }
                        else {
                            this.ErrorHand.ErrorAndThrow(this.SetStateOfScWin.name, 'no states in dataToRestore');
                        }
                    }
                    else if (dataToRestore.Meta.WindowType === ScWindowType.ContentEditor) {
                        yield this.ContentEditorProxy.SetStateOfContentEditorAsync(dataToRestore.StateOfScWindow.StateOfContentEditor)
                            .then(() => resolve())
                            .catch((err) => reject(err));
                    }
                    else {
                        reject(this.SetStateOfScWin.name + 'Data not restored. Not in Desktop or Content Editor');
                    }
                }
                else {
                    this.ErrorHand.WarningAndContinue(this.SetStateOfScWin.name, " No data found to restore");
                    resolve();
                }
                reject(this.SetStateOfScWin.name + ' : unknown reason');
                this.Logger.FuncEnd(this.SetStateOfScWin.name);
            }));
        });
    }
    PopulateFriendly(metadata) {
        let toReturn = new DefaultFriendly_DefaultFriendly();
        toReturn.WindowType = ScWindowType[metadata.WindowType];
        toReturn.TimeStamp = StaticHelpers_StaticHelpers.MakeFriendlyDate(metadata.TimeStamp);
        toReturn.Flavor = SnapShotFlavor[metadata.Flavor];
        return toReturn;
    }
    Hash(input) {
        let hash = 0;
        let strLen = input.length;
        let charCode;
        if (strLen !== 0) {
            for (var idx = 0; idx < strLen; idx++) {
                charCode = input.charCodeAt(idx);
                hash = ((hash << 5) - hash) + charCode;
                hash = hash & hash;
            }
        }
        return hash;
    }
    PopulateMetaData(snapshotFlavor, stateOfScWindow) {
        let toReturn = new DefaultMetaData_DefaultMetaData();
        toReturn.WindowType = this.ScUrlAgent.GetScWindowType();
        toReturn.TimeStamp = new Date();
        toReturn.SessionId = this.TabSessionId;
        toReturn.Flavor = snapshotFlavor;
        toReturn.Hash = this.Hash(JSON.stringify(stateOfScWindow));
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/HindSiteScUiProxy.js
var HindSiteScUiProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class HindSiteScUiProxy_HindSiteScUiProxy extends _HindeCoreBase {
    constructor(hindeCore, scUiMan, scUrlAgent, TopDoc, toastAgent) {
        super(hindeCore);
        this.Logger.CTORStart(HindSiteScUiProxy_HindSiteScUiProxy.name);
        this.ScUrlAgent = scUrlAgent;
        this.ScUiMan = scUiMan;
        this.TopLevelDoc = TopDoc;
        this.ToastAgent = toastAgent;
        this.Logger.CTOREnd(HindSiteScUiProxy_HindSiteScUiProxy.name);
    }
    OnReady_InstantiateHindSiteScUiProxy() {
        return HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.OnReady_InstantiateHindSiteScUiProxy.name);
            try {
                this.ScWindowProxy = new ScWindowProxy_ScWindowProxy(this.HindeCore, this.ScUrlAgent);
                yield this.ScWindowProxy.Instantiate_ScWindowProxy();
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.OnReady_InstantiateHindSiteScUiProxy.name, err);
            }
            this.Logger.FuncEnd(this.OnReady_InstantiateHindSiteScUiProxy.name);
        });
    }
    GetStateOfScUiProxyWindow(snapshotFlavor) {
        return this.ScWindowProxy.GetStateOfScUiProxy(snapshotFlavor);
    }
    RaiseToastNotification(arg0) {
        this.ToastAgent.RaiseToastNotification(arg0);
    }
    GetStateOfScUiProxy() {
        return new Promise((resolve, reject) => HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            let reply = null;
            yield this.ScWindowProxy.GetStateOfScUiProxy(SnapShotFlavor.Live)
                .then((result) => reply = result)
                .then(() => reply.ErrorStackScUiProxy = this.ErrorHand.ErrorStack)
                .then(() => resolve(reply))
                .catch((err) => reject(err));
        }));
    }
    AddContentEditorToDesktopAsync(apiCallPayload) {
        return new Promise((resolve, reject) => HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            this.ScWindowProxy.DesktopProxy.AddContentEditorAsync()
                .then(() => resolve())
                .catch((err) => reject());
        }));
    }
    PublischActiveCE(commandData) {
        return new Promise((resolve, reject) => HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            this.ScWindowProxy.PublishActiveCE()
                .then(() => resolve())
                .ca;
        }));
    }
    ToggleCompactCss(commandData) {
        return HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            }));
        });
    }
    SetStateOfSitecoreWindowAsync(commandData, dataOneWindowStorage) {
        return new Promise((resolve, reject) => HindSiteScUiProxy_awaiter(this, void 0, void 0, function* () {
            this.ScWindowProxy.SetStateOfScWin(dataOneWindowStorage)
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    OpenContentEditor() {
        throw new Error("Method not implemented.");
    }
    AdminB(commandData) {
        this.ScUiMan.AdminB(this.TopLevelDoc, null);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Managers/SitecoreUiManager/SitecoreUiManager.js
var SitecoreUiManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class SitecoreUiManager_ScUiManager extends _HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
    }
    InitSitecoreUiManager() {
        return SitecoreUiManager_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.InitSitecoreUiManager.name);
            try {
                this.InjectCss();
            }
            catch (err) {
                throw (err);
            }
            this.Logger.FuncEnd(this.InitSitecoreUiManager.name);
        });
    }
    InjectCss() {
        const style = document.createElement('link');
        style.type = 'text/css';
        style.href = browser.extension.getURL('AutoBuild/final/content.min.css');
        style.rel = "stylesheet";
        document.getElementsByTagName("head")[0].appendChild(style);
    }
    AdminB(targetDoc, callbackOnComplete) {
        this.Logger.FuncStart(this.AdminB.name, 'targetDoc: ' + Guid_Guid.AsShort(targetDoc.DocId));
        this.Logger.Log('callback passed: ' + (callbackOnComplete !== null));
        var userNameElem = targetDoc.ContentDoc.getElementById(ContentConst.Const.ElemId.sc.scLoginUserName);
        var passwordElem = targetDoc.ContentDoc.getElementById(ContentConst.Const.ElemId.sc.scLoginPassword);
        if (this.Logger.IsNotNullOrUndefinedBool('userNameElem', userNameElem)
            &&
                this.Logger.IsNotNullOrUndefinedBool('passwordElem', passwordElem)) {
            userNameElem.setAttribute('value', ContentConst.Const.Names.scDefaultAdminUserName);
            passwordElem.setAttribute('value', ContentConst.Const.Names.scDefaultAdminPassword);
            var loginButton = this.GetLoginButton(targetDoc);
            if (this.Logger.IsNotNullOrUndefinedBool('loginButton', loginButton)) {
                this.Logger.Log('clicking loginbutton');
                loginButton.click();
                if (callbackOnComplete) {
                    this.Logger.Log('Triggering callback');
                    setTimeout(callbackOnComplete, ContentConst.Const.Timeouts.PostLoginBtnClick);
                }
                else {
                    this.Logger.Log('no callback passed');
                }
            }
            else {
                this.ErrorHand.ErrorAndThrow(this.AdminB.name, 'No loginButton');
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.AdminB.name, 'No Username or password field');
        }
        this.Logger.FuncEnd(this.AdminB.name);
    }
    GetLoginButton(targetDoc) {
        this.Logger.FuncStart(this.GetLoginButton.name);
        var toReturn = targetDoc.ContentDoc.getElementById(ContentConst.Const.ElemId.sc.scLoginBtn.sc920);
        if (!toReturn) {
            toReturn = targetDoc.ContentDoc.querySelector(ContentConst.Const.Selector.SC.LoginBtn.sc820);
        }
        this.Logger.Log('toReturn: ' + toReturn);
        this.Logger.FuncEnd(this.GetLoginButton.name);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LogWriterBuffer.js
class LogWriterBuffer {
    constructor() {
        this.FriendlyName = LogWriterBuffer.name;
        this.LogPreInitBuffer = [];
        this.bufferPrefix = '* ';
    }
    WriteText(text) {
        this.LogPreInitBuffer.push(this.bufferPrefix + text);
    }
    GetBuffer() {
        let iterCheckMax = 1000;
        let toReturn = [];
        while (this.LogPreInitBuffer.length > 0 && iterCheckMax > 0) {
            iterCheckMax--;
            toReturn.push(this.LogPreInitBuffer.shift());
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LoggerTimer.js

class LoggerTimer_LoggerTimer {
    constructor() {
        this.TimeStart = new Date();
        this.TimeLast = this.TimeStart.getTime();
        this.TimeMarkStart = this.TimeLast;
    }
    GetTimeDiff() {
        let toReturn = '';
        let timeNow = new Date().getTime();
        let timeDiffSinceLastMs = timeNow - this.TimeLast;
        let timeDiffOVerAll = timeNow - this.TimeMarkStart;
        let toReturnSinceLast;
        let toReturnSinceStart;
        let padLength = 5;
        if (timeDiffSinceLastMs >= SharedConst.Const.Logger.MinTimeDiffMs) {
            toReturnSinceLast = this.padFront(timeDiffSinceLastMs, padLength);
        }
        else {
            toReturnSinceLast = this.padFront(' ', padLength, ' ');
        }
        ;
        toReturnSinceStart = this.padFront(timeDiffOVerAll, padLength, '0');
        toReturn = toReturnSinceStart + ' ' + toReturnSinceLast;
        this.TimeLast = timeNow;
        return toReturn;
    }
    padFront(input, desiredLength = 2, padChar = '0') {
        let toReturn = input.toString();
        let maxIter = 10;
        while ((toReturn.length < desiredLength) && maxIter > 0) {
            maxIter--;
            toReturn = padChar + toReturn;
        }
        return toReturn;
    }
    LogTimeStamp() {
        var result = this.padFront(this.TimeStart.getDate()) + "/" + this.padFront(this.TimeStart.getMonth() + 1) + "/" + this.TimeStart.getFullYear() + " " + this.padFront(this.TimeStart.getHours()) + ":" + this.padFront(this.TimeStart.getMinutes());
        return result;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LoggerAgent.js
var LoggerAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






class ErrorHandlerAgent {
    constructor() {
        this.ErrorStack = [];
    }
    ThrowIfNullOrUndefined(title, testSubject) {
        if (testSubject instanceof Array) {
            testSubject.forEach((testSubject) => this.ThrowIfNullOrUndefined(title, testSubject));
        }
        else {
            if (typeof testSubject === 'undefined' || testSubject === null) {
                this.ErrorAndThrow(title, 'Failed Null check');
            }
        }
    }
    WarningAndContinue(container, text) {
        if (!container) {
            container = 'unknown';
        }
        if (!text) {
            text = 'unknown';
        }
        this.ErrorLogger('');
        this.ErrorLogger('\t\t** WARNING ** ' + container + ' ' + text);
        this.ErrorLogger('');
    }
    ErrorAndContinue(container, text) {
        if (!container) {
            container = 'unknown';
        }
        if (!text) {
            text = 'unknown';
        }
        this.ErrorStack.push({
            ContainerFunc: container,
            ErrorString: text
        });
        this.ErrorLogger('');
        this.ErrorLogger('\t\ts) ** ERROR ** container: ' + container);
        this.ErrorLogger('');
        this.ErrorLogger('\t\t error message: ' + text);
        this.ErrorLogger('');
        this.ErrorLogger('\t\te)** ERROR container: ** ' + container);
        this.ErrorLogger('');
    }
    ErrorLogger(text) {
        return LoggerAgent_awaiter(this, void 0, void 0, function* () {
            console.log('**********' + text + '**********');
        });
    }
    ErrorAndThrow(container, text) {
        this.ErrorAndContinue(container, text);
        throw container + " " + text;
    }
}
class LoggerAgent_LoggerAgent {
    constructor() {
        this.MaxIndent = 20;
        this.AllLogWriters = [];
        this.__debugTextChangedCallbacks = [];
        this.UseTimeStamp = true;
        this.CancelRequestedFlag = false;
        this.MaxDepthBeforeThrow = 2000;
        this.Timer = new LoggerTimer_LoggerTimer;
        this.BufferWriter = new LogWriterBuffer();
        this.AddWriter(this.BufferWriter);
        this.__callDepth = -1;
        this.LogVal('TimeStamp', this.Timer.LogTimeStamp());
    }
    FlushBuffer() {
        this.RemoveWriter(this.BufferWriter);
        this.LogVal('TimeStamp B', Date.now());
        let bufferAr = this.BufferWriter.GetBuffer();
        for (var idx = 0; idx < bufferAr.length; idx++) {
            this.Log(bufferAr[idx]);
        }
    }
    CancelRequested() {
        this.CancelRequestedFlag = true;
    }
    RemoveWriter(BufferWriter) {
        for (var idx = 0; idx < this.AllLogWriters.length; idx++) {
            let candidate = this.AllLogWriters[idx];
            if (candidate == BufferWriter) {
                this.AllLogWriters.splice(idx, 1);
                break;
            }
        }
    }
    AddWriter(writter) {
        this.HasWriters = true;
        this.AllLogWriters.push(writter);
    }
    SectionMarker(sectionTag) {
        this.Log("");
        this.Log("======================= " + sectionTag + " =======================");
        this.Log("");
    }
    IsNotNullOrUndefinedBool(title, subject) {
        var toReturn = false;
        if (subject) {
            if ((typeof subject) === 'undefined') {
                this.LogVal(title + ' Is Not Undefined', '!!! false !!!');
            }
            else {
                toReturn = true;
            }
        }
        else {
            this.LogVal(title + ' Is Not Null', '!!! false !!!');
        }
        return toReturn;
    }
    HandlerClearDebugText(self, verify = false) {
        this.FuncStart(this.HandlerClearDebugText.name);
        var proceed = true;
        if (verify) {
            proceed = confirm('Clear Debug TextArea ?');
        }
        if (proceed) {
            var newText = '--- Debug Text Reset ---';
        }
        this.FuncEnd(this.HandlerClearDebugText.name);
    }
    MarkerA() {
        this.__markerRaw('A');
    }
    MarkerB() {
        this.__markerRaw('B');
    }
    MarkerC() {
        this.__markerRaw('C');
    }
    MarkerD() {
        this.__markerRaw('D');
    }
    MarkerE() { this.__markerRaw('E'); }
    MarkerF() { this.__markerRaw('F'); }
    __markerRaw(marker) {
        this.Log('Marker ' + marker);
    }
    LogAsJsonPretty(texValName, jsonObj) {
        try {
            this.LogVal(texValName, JSON.stringify(jsonObj, null, 2));
        }
        catch (err) {
            this.Log('Unable to stringify obj');
        }
    }
    LogVal(textValName, textVal) {
        if (typeof textVal === 'undefined') {
            textVal = '{undefined}';
        }
        else if (textVal === null) {
            textVal = '{null}';
        }
        else {
            var asGuid = textVal;
            if (typeof asGuid === typeof GuidData_GuidData) {
                textVal = asGuid.Raw;
            }
        }
        textVal = textVal.toString();
        textValName = StaticHelpers_StaticHelpers.BufferString(textValName.toString(), 50, BufferChar.space, BufferDirection.right);
        const debugPrefix = '  ~~~  ';
        this.Log(debugPrefix + textValName + ' : ' + textVal);
    }
    Log(text, optionalValue = '', hasPrefix = false) {
        return LoggerAgent_awaiter(this, void 0, void 0, function* () {
            if (this.HasWriters) {
                var indent = '  ';
                let indentDepth = this.__callDepth % this.MaxIndent;
                for (var idx = 0; idx < indentDepth; idx++) {
                    text = indent + text;
                }
                var prefixLength = 3;
                if (!hasPrefix) {
                    for (var idx = 0; idx < prefixLength; idx++) {
                        text = ' ' + text;
                    }
                }
                this.__triggerAllDebugTextChangedCallbacks({
                    NewText: text,
                    Append: true
                });
                if (this.UseTimeStamp) {
                    let timeDiff = this.Timer.GetTimeDiff() + '  ';
                    text = timeDiff + text;
                }
                this.WriteToAllWriters(text);
            }
        });
    }
    WriteToAllWriters(text) {
        if (this.AllLogWriters) {
            this.AllLogWriters.forEach((oneWriter) => {
                if (oneWriter) {
                    try {
                        oneWriter.WriteText(text);
                    }
                    catch (err) {
                        console.log(this.WriteToAllWriters.name + ' ' + oneWriter.FriendlyName + ' | ' + err);
                    }
                }
                else {
                    console.log('Null writer');
                }
            });
        }
    }
    __triggerAllDebugTextChangedCallbacks(data) {
        for (var idx = 0; idx < this.__debugTextChangedCallbacks.length; idx++) {
            var oneCallback = this.__debugTextChangedCallbacks[idx];
            oneCallback.Func(oneCallback.Caller, data);
        }
    }
    CtorName(ctorName) {
        this.Log('Constructor: ' + ctorName);
    }
    FuncStart(textOrFunc, optionalValue) {
        textOrFunc = 's' + ' ' + this.__callDepth + ') ' + textOrFunc;
        if (!optionalValue) {
            optionalValue = '';
        }
        else {
            optionalValue = optionalValue.toString();
        }
        if (optionalValue.length > 0) {
            textOrFunc = textOrFunc + ' : ' + optionalValue;
        }
        this.Log(textOrFunc, '', true);
        this.__callDepth++;
        if (this.__callDepth > this.MaxDepthBeforeThrow) {
            throw ('Logger - Max Depth Exceeded: ' + this.__callDepth);
        }
    }
    CTORStart(text) {
        this.FuncStart("[CTOR] " + text);
    }
    CTOREnd(text) {
        this.FuncEnd("[CTOR] " + text);
    }
    FuncEnd(text, optionalValueInput) {
        this.__callDepth--;
        if (this.__callDepth < 0) {
            this.__callDepth = 0;
        }
        text = 'e' + ' ' + this.__callDepth + ') ' + text;
        if (optionalValue !== null && (typeof optionalValue === typeof Boolean)) {
            optionalValue = optionalValue.toString();
        }
        if (!optionalValueInput) {
            optionalValueInput = '';
        }
        var optionalValue = optionalValueInput.toString();
        if (optionalValue.length > 0) {
            text = text + ' : ' + optionalValue;
        }
        this.Log(text, optionalValue, true);
    }
    NotNullCheck(title, value) {
        if (typeof value === 'undefined') {
            this.LogVal(title, 'Is Undefined');
        }
        else if (!value) {
            this.LogVal(title, 'Is Null');
        }
        else {
            this.LogVal(title, 'Is Not Null');
        }
    }
    IsNullOrUndefined(subject) {
        var toReturn = '{unknown}';
        if (subject) {
            if ((typeof subject) === 'undefined') {
                toReturn = 'Is Undefined';
            }
            else {
                toReturn = 'Not Null';
            }
        }
        else {
            toReturn = 'Is Null';
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LoggerConsoleWriter.js
class LoggerConsoleWriter {
    constructor() {
        this.FriendlyName = LoggerConsoleWriter.name;
    }
    WriteText(text) {
        console.log(text);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LoggerStorageWriter.js
var LoggerStorageWriter_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class LoggerStorageWriter {
    constructor() {
        this.FriendlyName = LoggerStorageWriter.name;
        this.CurrentStorageLogKey = '0';
        this.LogToStoragePrefix = 'Hindsite.Log.';
        this.StorageLogCombined = "";
    }
    WriteText(text) {
    }
    SetLogToStorageKey(logToStorageIndex) {
        this.CurrentStorageLogKey = this.LogToStoragePrefix + logToStorageIndex;
    }
    WriteLogToStorage(logMessage) {
        return LoggerStorageWriter_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => LoggerStorageWriter_awaiter(this, void 0, void 0, function* () {
                this.StorageLogCombined += "|||" + JSON.stringify(logMessage);
                if (this.CurrentStorageLogKey) {
                    window.localStorage.setItem(this.CurrentStorageLogKey, this.StorageLogCombined);
                }
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/RepositoryAgent/RepositoryAgent.js

class RepositoryAgent_RepositoryAgent extends _HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
    }
    RemoveByKey(key) {
        try {
            window.localStorage.removeItem(key);
        }
        catch (err) {
            this.ErrorHand.ErrorAndThrow(this.RemoveByKey.name, err);
        }
    }
    InitRepositoryAgent() {
        this.Logger.FuncStart(RepositoryAgent_RepositoryAgent.name, this.InitRepositoryAgent.name);
        this.Logger.FuncEnd(RepositoryAgent_RepositoryAgent.name, this.InitRepositoryAgent.name);
    }
    GetBulkLocalStorageByKeyPrefix(targetPrefix) {
        var toReturn = [];
        try {
            var storageLength = window.localStorage.length;
            for (var idx = 0; idx < storageLength; idx++) {
                var candidate = {
                    data: '',
                    key: '',
                };
                candidate.key = window.localStorage.key(idx);
                if (candidate.key.startsWith(targetPrefix)) {
                    candidate.data = window.localStorage.getItem(candidate.key);
                    if (typeof candidate != 'undefined' && typeof candidate.data != 'undefined' && candidate != null && candidate.data != null) {
                        toReturn.push(candidate);
                    }
                }
            }
        }
        catch (err) {
            this.ErrorHand.ErrorAndThrow(this.GetBulkLocalStorageByKeyPrefix.name, err);
        }
        return toReturn;
    }
    ReadDataOfKey(targetKey) {
        this.Logger.FuncStart(this.ReadDataOfKey.name);
        let storageValue = null;
        let toReturn = '';
        storageValue = window.localStorage.getItem(targetKey);
        if (storageValue != null) {
            toReturn = storageValue.toString();
        }
        else {
            this.Logger.Log(this.ReadDataOfKey.name, "No value returned from storage");
        }
        this.Logger.FuncEnd(this.ReadDataOfKey.name);
        return toReturn;
    }
    WriteByKey(storageKey, jsonString) {
        window.localStorage.setItem(storageKey, jsonString);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Const/PopConst.js
let PopConst = (() => {
    class PopConst {
    }
    PopConst.Const = {
        ClassNames: {
            HS: {
                Collapsed: 'in',
                Down: 'down',
                Buttons: {
                    AdminB: 'admin-b',
                    Cancel: 'cancel',
                    CompactCe: 'details',
                    Edit: 'edit',
                    GoContentEditor: 'ce',
                    GoDesktop: 'desktop-icon',
                    Ping: 'edit',
                    PresentationDetails: 'details',
                    QuickPublish: 'publish',
                    RemoveFromStorage: 'delete-snapshot',
                    RestoreNewTab: 'restore-snapshot',
                    RestoreSameTab: 'restore-snapshot',
                    RestoreStateTBD: 'restore-snapshot',
                    ScModeEdit: 'edit',
                    ScModeNormal: 'normal',
                    ScModePrev: 'preview-icon',
                    TakeSnapShot: 'take-snapshot',
                    ToggleFavorite: 'btn-favorite',
                    UpdateNickname: 'set-nickname',
                    Icons: {
                        CloseWindow: 'icon-close-window',
                        AddContentEditorTab: 'icon-add-ce-tab',
                    }
                },
            },
        },
        ElemId: {
            InputNickname: 'id-input-nickname',
            HindSiteParentInfo: 'spanParentInfo',
            HS: {
                SelectHeaderAuto: 'sel-header-auto',
                SelectHeaderAutoTitle: 'sel-header-auto-title',
                SelectHeaderFavorite: 'sel-header-favorite',
                SelectHeaderFavoriteTitle: 'sel-header-favorite-title',
                SelectHeaderManual: 'sel-header-manual',
                SelectHeaderManualTitle: 'sel-header-manual-title',
                TabId: 'orig-win-id',
            }
        },
        Numbers: {
            MinMenuHeight: 600,
            MinMenuWidth: 600,
            MaxAutoSaveCount: 10,
            AutoSaveIntervalMin: 5,
        },
        Notify: {
            Default: 'Complete',
            PublishComplete: 'Publishing Complete',
        },
        Selector: {
            HS: {
                AutoSnapshotBeforeWindowChange: '[id=id-settings-auto-snapshot-on-window-change]',
                BuildStamp: '[id=build-stamp]',
                DivOverlayModule: '[id=menu-overlay]',
                DivStateContent: '[id=feedback-div-state-content]',
                FeedbackBrowserState: '[id=feedback-div-browser-state]',
                FeedbackPopUpState: '[id=feedback-div-pop-up-state]',
                FeedbackContentState: '[id=feedback-div-state-content]',
                FeedbackLogElement: '[id=feedback-pop-up-log]',
                FeedbackMessages: '[id=feedback-messages]',
                FeedbackStorage: '[id=feedback-storage]',
                HsCancel: '[id=Cancel]',
                HsRemoveFromStorage: '[id=id-ph-remove-one-from-local-storage]',
                HsRestoreWindowStateSameTab: '[id=id-ph-btn-restore-state-same-tab]',
                HsRestoreWindowStateNewTab: '[id=id-ph-btn-restore-state-new-tab]',
                iCBoxdSettingsAutoLogin: '[id=id-ph-settings-auto-login]',
                IdFieldSetDebug: '[id=id-fieldset-debug]',
                ToggleFavorite: '[id=id-ph-btn-toggle-favorite]',
                SettingAutoSaveInterval: '[id=id-settings-auto-save-interval]',
                SettingAutoSaveMaxCount: '[id=id-settings-auto-save-max-count]',
                SettingAutoSaveSnapshotRetainDays: '[id=id-settings-auto-save-snap-shot-retain-days]',
                SettingAutoRenameCeTabButton: '[id=id-settings-auto-rename-ce-tab-button]',
                SettingNotUsed: '[id=id-settings-not-used]',
                TakeSnapshot: '[id=id-ph-btn-take-snapshot]',
                UpdateNicknameB: '[id=id-ph-btn-update-nickname]',
                ModuleContainers: {
                    SettingShowDebuggingModules: '[id=id-setting-show-debugging-modules]',
                    BtnAddContentEditor: '[id=id-ph-btn-add-drframe-content-editor]',
                    BtnAdminB: '[id=id-ph-btn-adminb]',
                    BtnCompactScUi: '[id=id-ph-btn-compact-sc-ui]',
                    BtnDebugClearPopUpConsole: '[id=id-container-btn-debug-clear-console]',
                    BtnDebugForceAutoSnapShot: '[id=id-container-btn-debug-force-auto-snapshot]',
                    BtnDebugTriggerPopUpReload: '[id=id-container-btn-debug-trigger-pop-up-reload]',
                    BtnGoContentEditor: '[id=id-ph-btn-go-content-editor]',
                    BtnModeEdit: '[id=id-ph-btn-sc-mode-edit]',
                    BtnModeNorm: '[id=id-ph-btn-norm]',
                    BtnModePrev: '[id=id-ph-btn-prev]',
                    BtnPresentationDetails: '[id=id-ph-btn-presentation-details]',
                    BtnQuickPublish: '[id=id-ph-btn-quick-publish]',
                    BtnWindowClose: '[id=id-ph-close-window]',
                    SettingEnableDebugging: '[id=id-ph-settings-enable-debugging]',
                    Desktop: '[id=id-ph-btn-desktop]',
                    LgndBrowserState: '[id=lgnd-browser-state]',
                    LgndContentState: '[id=lgnd-content-state]',
                    LgndForeSite: '[id=lgnd-fore-site]',
                    LgndHindSite: '[id=lgnd-hind-site]',
                    LgndMessages: '[id=lgnd-messages]',
                    LgndPopUpDebug: '[id=lgnd-pop-up-debug]',
                    LgndPopUpLog: '[id=lgnd-pop-up-log]',
                    LgndPopUpState: '[id=lgnd-pop-up-state]',
                    LgndSettings: '[id=lgnd-settings]',
                    PrefAutoLogin: '[id=id-ph-settings-auto-login]',
                    SelStateSnapShot: '[id=id-container-select-state]',
                    SettingAutoRestoreState: '[id=id-settings-auto-restore-state]',
                    SettingDebugKeepDialogOpen: '[id=id-ph-settings-debug-keep-dialog-open]',
                    SettingUseCompactCss: '[id=id-ph-settings-use-compact]',
                }
            },
        },
        Settings: {
            Defaults: {
                AutoSaveEnabled: false,
                AutoRestoreState: false,
                DebugKeepDialogOpen: false,
                LgndBrowserState: false,
                LgndContentState: false,
                LgndForeSite: true,
                LgndHindSite: true,
                LgndMessages: false,
                LgndPopUpLog: false,
                LgndPopUpState: false,
                LgndPopUpDebug: false,
                LgndSettings: false,
            }
        },
        Storage: {
            SettingsSuffix: 'todo',
            KeyGenericSettings: 'HindSite.' + 'GenericSettings',
            StorageLogKeyPrefix: 'HindSite.' + 'Log.',
            Defaults: {
                bool: {
                    AutoSaveEnabled: false,
                    AutoLogin: false,
                    DefaultDebugKeepDialogOpen: false,
                    AutoSnapshotBeforeWindowChange: false,
                }
            }
        },
        SnapShotFormat: {
            lenTimestamp: 13,
            lenNickname: 16,
            lenPageType: 7,
            lenPrefix: 6,
            lenShortId: 4,
            colSep: ' - ',
            lenCeCount: 3,
            MainSectionNode: 9,
            lenActiveNode: 9,
            lenFavorite: 3,
        },
        Timeouts: {
            WaitBeforeRemovingCompleteFlag: 1500,
            AutoLoginCheckInterval: 3000,
        },
    };
    return PopConst;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/UiModuleManagerPassThroughEvent/UiModuleManagerPassThroughEvent_Observer.js

class UiModuleManagerPassThroughEvent_Observer_UiModuleManagerPassThroughEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, UiModuleManagerPassThroughEvent_Observer_UiModuleManagerPassThroughEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/Enabled.js
var UiEnableState;
(function (UiEnableState) {
    UiEnableState[UiEnableState["Unknown"] = 0] = "Unknown";
    UiEnableState[UiEnableState["Enabled"] = 1] = "Enabled";
    UiEnableState[UiEnableState["Disabled"] = 2] = "Disabled";
})(UiEnableState || (UiEnableState = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/ModuleKey.js
var ModuleKey;
(function (ModuleKey) {
    ModuleKey[ModuleKey["Unknown"] = 0] = "Unknown";
    ModuleKey[ModuleKey["BroswerState"] = 1] = "BroswerState";
    ModuleKey[ModuleKey["ButtonCancel"] = 2] = "ButtonCancel";
    ModuleKey[ModuleKey["ButtonClose"] = 3] = "ButtonClose";
    ModuleKey[ModuleKey["ButtonTypical"] = 4] = "ButtonTypical";
    ModuleKey[ModuleKey["ButtonWithInput"] = 5] = "ButtonWithInput";
    ModuleKey[ModuleKey["ContentState"] = 6] = "ContentState";
    ModuleKey[ModuleKey["FeedbackModule"] = 7] = "FeedbackModule";
    ModuleKey[ModuleKey["PopUpState"] = 8] = "PopUpState";
    ModuleKey[ModuleKey["SelectSnapShot"] = 9] = "SelectSnapShot";
    ModuleKey[ModuleKey["CheckBox"] = 10] = "CheckBox";
    ModuleKey[ModuleKey["AccordionTypical"] = 11] = "AccordionTypical";
    ModuleKey[ModuleKey["Number"] = 12] = "Number";
    ModuleKey[ModuleKey["AccordionDebugging"] = 13] = "AccordionDebugging";
})(ModuleKey || (ModuleKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SettingFlavor.js
var SettingFlavor;
(function (SettingFlavor) {
    SettingFlavor[SettingFlavor["unknown"] = 0] = "unknown";
    SettingFlavor[SettingFlavor["PopUp"] = 1] = "PopUp";
    SettingFlavor[SettingFlavor["ContentAndPopUpStoredInPopUp"] = 2] = "ContentAndPopUpStoredInPopUp";
    SettingFlavor[SettingFlavor["ContentAndPopUpStoredInEach"] = 3] = "ContentAndPopUpStoredInEach";
    SettingFlavor[SettingFlavor["ContentOnly"] = 4] = "ContentOnly";
})(SettingFlavor || (SettingFlavor = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SettingType.js
var SettingType;
(function (SettingType) {
    SettingType[SettingType["Unknown"] = 0] = "Unknown";
    SettingType[SettingType["BoolCheckBox"] = 1] = "BoolCheckBox";
    SettingType[SettingType["AccordionTypical"] = 2] = "AccordionTypical";
    SettingType[SettingType["AccordionDebugging"] = 3] = "AccordionDebugging";
    SettingType[SettingType["Number"] = 4] = "Number";
})(SettingType || (SettingType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/UiPresence.js
var UiPresence;
(function (UiPresence) {
    UiPresence[UiPresence["Unknown"] = 0] = "Unknown";
    UiPresence[UiPresence["HasUi"] = 1] = "HasUi";
    UiPresence[UiPresence["HasNoUi"] = 2] = "HasNoUi";
})(UiPresence || (UiPresence = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/HindSiteSetting.js
class HindSiteSetting {
    constructor(settingKey, dataType, uiContainerSelector, defaultValue, settingFlavor, friendly, enableState, hasUi, moduleType) {
        this.SettingKey = settingKey;
        this.DataType = dataType;
        this.ValueAsObj = defaultValue;
        this.UiContainerSelector = uiContainerSelector;
        this.DefaultValue = defaultValue;
        this.SettingFlavor = settingFlavor;
        this.FriendlySetting = friendly;
        this.HasUi = hasUi;
        this.EnabledState = enableState;
        this.ModuleType = moduleType;
    }
    ValueAsInt() {
        var toReturn = Number.MIN_SAFE_INTEGER;
        if (this.ValueAsObj !== undefined && this.ValueAsObj !== null) {
            toReturn = parseInt(this.ValueAsObj.toString());
        }
        return toReturn;
    }
    ValueAsBool() {
        let toReturn = this.DefaultValue;
        if (this.ValueAsObj !== undefined && this.ValueAsObj !== null) {
            toReturn = this.ValueAsObj;
        }
        else {
            toReturn = this.DefaultValue;
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/HindSiteSettingForNumbers.js

class HindSiteSettingForNumbers_HindSiteSettingForNumbers extends HindSiteSetting {
    constructor(settingKey, dataType, uiContainerSelector, defaultValue, settingFlavor, friendly, enableState, hasUi, moduleType, min, max) {
        super(settingKey, dataType, uiContainerSelector, defaultValue, settingFlavor, friendly, enableState, hasUi, moduleType);
        this.Min = min;
        this.Max = max;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/HindSiteSettingWrapper.js

class HindSiteSettingWrapper_HindSiteSettingWrapper extends _HindeCoreBase {
    constructor(hindeCore, hindSiteSetting) {
        super(hindeCore);
        this.HindSiteSetting = hindSiteSetting;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/DefaultSettings.js













class DefaultSettings_DefaultSettings extends _HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
    }
    GetDefaultSettingsWrapper() {
        let rawData = [
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LastUsedLogToStorageKey, SettingType.Number, null, SharedConst.Const.Settings.Defaults.EnableDebugging, SettingFlavor.ContentAndPopUpStoredInEach, 'Rolling Prefix key for log to storage', UiEnableState.Enabled, UiPresence.HasNoUi, ModuleKey.Unknown),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.EnableDebugging, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.ModuleContainers.SettingEnableDebugging, SharedConst.Const.Settings.Defaults.EnableDebugging, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Enable Debugging', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.UseCompactCss, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.ModuleContainers.SettingUseCompactCss, SharedConst.Const.Settings.Defaults.UseCompactCss, SettingFlavor.ContentOnly, 'Use Compact CSS', UiEnableState.Disabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.AutoSnapshotBeforeWindowChange, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.AutoSnapshotBeforeWindowChange, PopConst.Const.Storage.Defaults.bool.AutoSnapshotBeforeWindowChange, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Save Snapshot on HindSite Window Change', UiEnableState.Disabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.AutoLogin, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.iCBoxdSettingsAutoLogin, PopConst.Const.Storage.Defaults.bool.AutoLogin, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Login', UiEnableState.Disabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndPopUpLog, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndPopUpLog, PopConst.Const.Settings.Defaults.LgndPopUpLog, SettingFlavor.PopUp, 'Debugging - Pop Up Log', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndForeSite, SettingType.AccordionTypical, PopConst.Const.Selector.HS.ModuleContainers.LgndForeSite, PopConst.Const.Settings.Defaults.LgndForeSite, SettingFlavor.PopUp, 'Fore&bull;Site', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionTypical),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndHindSite, SettingType.AccordionTypical, PopConst.Const.Selector.HS.ModuleContainers.LgndHindSite, PopConst.Const.Settings.Defaults.LgndHindSite, SettingFlavor.PopUp, 'Hind&bull;Site', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionTypical),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndSettings, SettingType.AccordionTypical, PopConst.Const.Selector.HS.ModuleContainers.LgndSettings, PopConst.Const.Settings.Defaults.LgndSettings, SettingFlavor.PopUp, 'Settings', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionTypical),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndMessages, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndMessages, PopConst.Const.Settings.Defaults.LgndMessages, SettingFlavor.PopUp, 'Debugging - Messages', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndPopUpState, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndPopUpState, PopConst.Const.Settings.Defaults.LgndPopUpState, SettingFlavor.PopUp, 'Debugging - State of Pop-Up', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndPopUpDebug, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndPopUpDebug, PopConst.Const.Settings.Defaults.LgndPopUpState, SettingFlavor.PopUp, 'Debugging', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndContentState, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndContentState, PopConst.Const.Settings.Defaults.LgndContentState, SettingFlavor.PopUp, 'Debugging - Content State', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndBrowserState, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndBrowserState, PopConst.Const.Settings.Defaults.LgndBrowserState, SettingFlavor.PopUp, 'Debugging - Browser State', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSettingForNumbers_HindSiteSettingForNumbers(_3xxx_SettingKey_SettingKey.MaxAutoSaveCount, SettingType.Number, PopConst.Const.Selector.HS.SettingAutoSaveMaxCount, PopConst.Const.Numbers.MaxAutoSaveCount, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Save Max Count', UiEnableState.Disabled, UiPresence.HasUi, ModuleKey.Number, 1, 100),
            new HindSiteSettingForNumbers_HindSiteSettingForNumbers(_3xxx_SettingKey_SettingKey.AutoSaveIntervalMin, SettingType.Number, PopConst.Const.Selector.HS.SettingAutoSaveInterval, PopConst.Const.Numbers.AutoSaveIntervalMin, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Save Interval (Min) - 0 to disable', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.Number, 0, 100),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.DebugKeepDialogOpen, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.ModuleContainers.SettingDebugKeepDialogOpen, PopConst.Const.Settings.Defaults.DebugKeepDialogOpen, SettingFlavor.PopUp, 'Keep Dialog Open', UiEnableState.Disabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.AutoRestoreState, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.ModuleContainers.SettingAutoRestoreState, PopConst.Const.Settings.Defaults.AutoRestoreState, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto-Restore State', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSettingForNumbers_HindSiteSettingForNumbers(_3xxx_SettingKey_SettingKey.AutoSaveRetainDays, SettingType.Number, PopConst.Const.Selector.HS.SettingAutoSaveSnapshotRetainDays, ContentConst.Const.DefaultMaxAutoSaveAgeDays, SettingFlavor.ContentOnly, 'Days to Retain Auto Snap Shots', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.Number, 0, 100),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.AutoRenameCeButton, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.SettingAutoRenameCeTabButton, ContentConst.Const.DefaultAutoRenameCeTabButton, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto rename Content Editor tab button to match active node', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.CheckBox),
        ];
        let toReturn = [];
        rawData.forEach((settingValue) => {
            toReturn.push(new HindSiteSettingWrapper_HindSiteSettingWrapper(this.HindeCore, settingValue));
        });
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/HindSiteSettingsBucket.js



class HindSiteSettingsBucket_HindSiteSettingsBucket extends _HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
        this.SettingWrappers = [];
        this.SettingWrappers = (new DefaultSettings_DefaultSettings(this.HindeCore)).GetDefaultSettingsWrapper();
    }
    GetByKey(needleSettingKey) {
        var toReturn = null;
        for (var idx = 0; idx < this.SettingWrappers.length; idx++) {
            let candidate = this.SettingWrappers[idx];
            if (candidate.HindSiteSetting.SettingKey === needleSettingKey) {
                toReturn = candidate;
                break;
            }
        }
        if (!toReturn) {
            this.ErrorHand.ErrorAndContinue(this.GetByKey.name, 'Setting not found ' + StaticHelpers_StaticHelpers.SettingKeyAsString(needleSettingKey));
        }
        return toReturn;
    }
    GetSettingsByFlavor(targetFlavors) {
        let toReturn = [];
        for (var idx = 0; idx < this.SettingWrappers.length; idx++) {
            let candidate = this.SettingWrappers[idx];
            if (targetFlavors.indexOf(candidate.HindSiteSetting.SettingFlavor) > -1) {
                toReturn.push(candidate);
            }
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/SettingsAgent.js






class SettingsAgent_SettingsAgent extends _HindeCoreBase {
    constructor(hindeCore, repoAgent) {
        super(hindeCore);
        this.RepoAgent = repoAgent;
        this.HindSiteSettingsBucket = new HindSiteSettingsBucket_HindSiteSettingsBucket(this.HindeCore);
    }
    GetSettingsByFlavor(arg0) {
        return this.HindSiteSettingsBucket.GetSettingsByFlavor(arg0);
    }
    GetByKey(settingKey) {
        let toReturn = null;
        let settingsWrapper = this.HindSiteSettingsBucket.GetByKey(settingKey);
        if (settingsWrapper) {
            toReturn = settingsWrapper.HindSiteSetting;
        }
        return toReturn;
    }
    Init_SettingsAgent() {
        this.Logger.FuncStart(this.Init_SettingsAgent.name);
        let settingsFromStorage = this.ReadGenericSettingsFromStorage();
        this.UpdateSettingValuesFromStorage(settingsFromStorage);
        this.Logger.FuncEnd(this.Init_SettingsAgent.name);
    }
    WireEvents() {
        this.UiElementChangeEvent_Observer = new UiModuleManagerPassThroughEvent_Observer_UiModuleManagerPassThroughEvent_Observer(this.HindeCore, this.OnUiModuleManagerPassThroughEvent);
    }
    OnUiModuleManagerPassThroughEvent(payload) {
        alert('pass through');
    }
    UpdateSettingsFromPopUpMsg(newSettings) {
        this.Logger.FuncStart(this.UpdateSettingsFromPopUpMsg.name);
        if (newSettings) {
            for (var idx = 0; idx < newSettings.length; idx++) {
                let oneSetting = newSettings[idx];
                this.SetByKey(oneSetting.SettingKey, oneSetting.ValueAsObj);
            }
        }
        this.Logger.FuncEnd(this.UpdateSettingsFromPopUpMsg.name);
    }
    ReadGenericSettingsFromStorage() {
        this.Logger.FuncStart(this.ReadGenericSettingsFromStorage.name);
        let toReturn = [];
        let storedValue = this.RepoAgent.ReadDataOfKey(PopConst.Const.Storage.KeyGenericSettings);
        if (storedValue) {
            toReturn = JSON.parse(storedValue.toString());
        }
        else {
            toReturn = [];
        }
        this.Logger.FuncEnd(this.ReadGenericSettingsFromStorage.name);
        return toReturn;
    }
    UpdateSettingValuesFromStorage(settingsFromStorage) {
        this.Logger.FuncStart(this.UpdateSettingValuesFromStorage.name);
        try {
            for (var idx = 0; idx < settingsFromStorage.length; idx++) {
                let storageSetting = settingsFromStorage[idx];
                let settingWrapper = this.HindSiteSettingsBucket.GetByKey(storageSetting.SettingKey);
                if (settingWrapper) {
                    let matchingSetting = settingWrapper.HindSiteSetting;
                    if (matchingSetting) {
                        matchingSetting.ValueAsObj = storageSetting.ValueAsObj;
                    }
                    else {
                        this.ErrorHand.ErrorAndContinue(this.UpdateSettingValuesFromStorage.name, 'matching setting not found ' + StaticHelpers_StaticHelpers.SettingKeyAsString(storageSetting.SettingKey));
                    }
                }
                else {
                    this.ErrorHand.ErrorAndThrow(this.UpdateSettingValuesFromStorage.name, 'null matching setting');
                }
            }
        }
        catch (err) {
            this.ErrorHand.ErrorAndContinue(this.UpdateSettingValuesFromStorage.name, err);
        }
        this.Logger.FuncEnd(this.UpdateSettingValuesFromStorage.name);
    }
    BooleanSettingChanged(settingKey, valueAsBool) {
        this.Logger.LogVal(this.BooleanSettingChanged.name, _3xxx_SettingKey_SettingKey[settingKey]);
        this.SetByKey(settingKey, valueAsBool);
    }
    NumberSettingChanged(SettingKey, valueAsNumber) {
        this.Logger.Log(StaticHelpers_StaticHelpers.SettingKeyAsString(SettingKey));
        this.Logger.LogVal('valueAsNumber', valueAsNumber.toString());
        this.SetByKey(SettingKey, valueAsNumber);
    }
    SetByKey(settingKey, value) {
        let foundSetting = this.HindSiteSettingsBucket.GetByKey(settingKey);
        if (foundSetting) {
            foundSetting.HindSiteSetting.ValueAsObj = value;
            this.WriteAllSettingValuesToStorage();
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.SetByKey.name, 'setting match not found');
        }
    }
    WriteAllSettingValuesToStorage() {
        let settingValues = [];
        for (var udx = 0; udx < this.HindSiteSettingsBucket.SettingWrappers.length; udx++) {
            let hindSiteWrapper = this.HindSiteSettingsBucket.SettingWrappers[udx];
            if (hindSiteWrapper.HindSiteSetting.ValueAsObj !== null) {
                settingValues.push({
                    SettingKey: hindSiteWrapper.HindSiteSetting.SettingKey,
                    ValueAsObj: hindSiteWrapper.HindSiteSetting.ValueAsObj,
                    SettingKeyFriendly: StaticHelpers_StaticHelpers.SettingKeyAsString(hindSiteWrapper.HindSiteSetting.SettingKey)
                });
            }
        }
        this.RepoAgent.WriteByKey(PopConst.Const.Storage.KeyGenericSettings, JSON.stringify(settingValues));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/SingleClickEvent/SingleClickEvent_Observer.js

class SingleClickEvent_Observer_SingleClickEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, SingleClickEvent_Observer_SingleClickEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/SingleClickEvent/SingleClickEvent_Subject.js

class SingleClickEvent_Subject_SingleClickEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore, friendly) {
        super(hindeCore, friendly + ' ' + SingleClickEvent_Subject_SingleClickEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/ToastAgent/ToastAgent.js
var ToastAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class ToastAgent_ToastAgent extends _HindeCoreBase {
    constructor(hindeCore, targetDoc) {
        super(hindeCore);
        this.classSlideUp = 'slide-up';
        this.classSlideDown = 'slide-down';
        this.HasBeenInit = false;
        this.TargetDoc = targetDoc;
        this.DivineElements();
    }
    LowerPerpetualToast(message) {
        return ToastAgent_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.RaisePerpetualToast.name);
            this.SetSliderDivText(message);
            yield this.LowerToastA();
            this.Logger.FuncEnd(this.RaisePerpetualToast.name);
        });
    }
    RaisePerpetualToast(message) {
        return ToastAgent_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart(this.RaisePerpetualToast.name);
                this.SetSliderDivText(message);
                yield this.RaiseToastA();
                this.Logger.FuncEnd(this.RaisePerpetualToast.name);
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.RaisePerpetualToast.name, err);
            }
        });
    }
    OnRaiseToastReq() {
        return ToastAgent_awaiter(this, void 0, void 0, function* () {
            var self = this;
            this.FlagSlider.classList.remove(self.classSlideUp);
            this.FlagSlider.classList.add(self.classSlideDown);
        });
    }
    DivineElements() {
        if (!this.HasBeenInit) {
            this.BodyTag = this.TargetDoc.getElementsByTagName('body')[0];
            this.ToastContainer = this.CreateToastContainer(this.TargetDoc);
            this.CreateSliderDiv();
            this.CreateCancelButton();
            this.FlagSlider.appendChild(this.ButtonElem);
            this.BodyTag.appendChild(this.ToastContainer);
        }
        this.HasBeenInit = true;
    }
    RaiseToastA() {
        return ToastAgent_awaiter(this, void 0, void 0, function* () {
            try {
                var self = this;
                yield setTimeout(function () {
                    return ToastAgent_awaiter(this, void 0, void 0, function* () {
                        self.ToastContainer.appendChild(self.FlagSlider);
                        self.FlagSlider.classList.remove(self.classSlideDown);
                        self.FlagSlider.classList.add(self.classSlideUp);
                    });
                }, 1000);
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.RaiseToastA.name, err);
            }
        });
    }
    LowerToastA() {
        return ToastAgent_awaiter(this, void 0, void 0, function* () {
            try {
                var self = this;
                yield setTimeout(function () {
                    return ToastAgent_awaiter(this, void 0, void 0, function* () {
                        self.FlagSlider.classList.remove(self.classSlideUp);
                        self.FlagSlider.classList.add(self.classSlideDown);
                    });
                }, 3000);
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.LowerToastA.name, err);
            }
        });
    }
    RaiseToastNotification(message) {
        this.Logger.FuncStart(this.RaiseToastNotification.name);
        this.SetSliderDivText(message);
        this.RaiseToastA();
        var self = this;
        this.Logger.FuncEnd(this.RaiseToastNotification.name);
    }
    SetSliderDivText(sliderDivText) {
        if (this.FlagSlider) {
            this.FlagTextDiv.innerHTML = '<div class="header">HindSite</div><div class="message">' + sliderDivText + '</div>';
        }
    }
    TestCancelCallback() {
        this.Logger.CancelRequested();
    }
    CreateCancelButton() {
        this.ButtonElem = this.TargetDoc.createElement('input');
        this.ButtonElem.type = "button";
        this.ButtonElem.value = "Cancel";
        this.OnButtonClick_Subject = new SingleClickEvent_Subject_SingleClickEvent_Subject(this.HindeCore, this.CreateCancelButton.name);
        this.OnButtonClick_ObserverTest = new SingleClickEvent_Observer_SingleClickEvent_Observer(this.HindeCore, this.TestCancelCallback.bind(this));
        this.OnButtonClick_Subject.RegisterObserver(this.OnButtonClick_ObserverTest);
        this.ButtonElem.addEventListener('click', (() => {
            let payload = {
                HandlerData: null
            };
            this.OnButtonClick_Subject.NotifyObserversAsync(payload);
        }));
    }
    CreateSliderDiv() {
        this.FlagSlider = this.TargetDoc.createElement('div');
        this.FlagSlider.classList.add('slider');
        this.FlagSlider.classList.add(this.classSlideDown);
        this.FlagTextDiv = this.TargetDoc.createElement('div');
        this.FlagSlider.appendChild(this.FlagTextDiv);
    }
    CreateToastContainer(targetDoc) {
        let flagContainer = targetDoc.createElement('div');
        flagContainer.classList.add('toast');
        return flagContainer;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/QueryStrKey.js
var QueryStrKey;
(function (QueryStrKey) {
    QueryStrKey[QueryStrKey["hsTargetSs"] = 0] = "hsTargetSs";
    QueryStrKey[QueryStrKey["sc_mode"] = 1] = "sc_mode";
    QueryStrKey[QueryStrKey["sc_itemid"] = 2] = "sc_itemid";
    QueryStrKey[QueryStrKey["sc_lang"] = 3] = "sc_lang";
    QueryStrKey[QueryStrKey["sc_site"] = 4] = "sc_site";
})(QueryStrKey || (QueryStrKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/scMode.js
var scMode;
(function (scMode) {
    scMode[scMode["Unknown"] = 0] = "Unknown";
    scMode[scMode["Edit"] = 1] = "Edit";
    scMode[scMode["Preview"] = 2] = "Preview";
    scMode[scMode["Normal"] = 3] = "Normal";
})(scMode || (scMode = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/UrlAgent/GenericUrlAgent.js
var GenericUrlAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class GenericUrlAgent_GenericUrlAgent extends _HindeCoreBase {
    constructor(hindeCore, browserProxy) {
        super(hindeCore);
        this.BrowserProxy = browserProxy;
    }
    GetUrlParts() {
        return this.UrlParts;
    }
    QueryStringHasKey(key) {
        let toReturn = false;
        if (key !== null) {
            let keyAsStr = QueryStrKey[key];
            if (keyAsStr) {
                toReturn = this.UrlParts && this.UrlParts.Parameters && this.UrlParts.Parameters.has(keyAsStr);
            }
        }
        return toReturn;
    }
    GetQueryStringValueByKey(key) {
        let toReturn = '';
        if (this.QueryStringHasKey(key)) {
            let keyAsStr = QueryStrKey[key];
            toReturn = this.UrlParts.Parameters.get(keyAsStr);
        }
        return toReturn;
    }
    SetParameterValueByKey(key, newValue) {
        if (this.UrlParts) {
            this.UrlParts.Parameters.set(QueryStrKey[key], newValue);
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.SetParameterValueByKey.name, 'No URLParts ' + QueryStrKey[key] + ' ' + newValue);
        }
    }
    SetFilePath(newFilePath) {
        this.UrlParts.FilePath = newFilePath;
    }
    Init_FromBrowserProxy() {
        return GenericUrlAgent_awaiter(this, void 0, void 0, function* () {
            this.Logger.Log(this.Init_FromBrowserProxy.name);
            if (this.BrowserProxy) {
                this.SetFromHref(this.BrowserProxy.Url);
            }
            else {
                throw (this.Init_FromBrowserProxy.name + '| no proxy');
            }
        });
    }
    InitFromWindowLocation() {
        try {
            this.Logger.Log('Init from window.location.href');
            let urlToUse = window.location.href;
            this.SetFromHref(urlToUse);
        }
        catch (err) {
            throw (this.InitFromWindowLocation.name + err);
        }
    }
    Init_GenericUrlAgent() {
        try {
            this.Logger.FuncStart(this.Init_GenericUrlAgent.name);
            if (this.BrowserProxy) {
                this.Init_FromBrowserProxy();
            }
            else {
                this.InitFromWindowLocation();
            }
        }
        catch (err) {
            throw (this.Init_GenericUrlAgent.name + ' | ' + err);
        }
        this.Logger.FuncEnd(this.Init_GenericUrlAgent.name);
    }
    SetFromHref(href) {
        var parser = document.createElement('a');
        parser.href = href;
        this.UrlParts = {
            OriginalRaw: href,
            Protocol: parser.protocol,
            HostAndPort: parser.host,
            Parameters: new URLSearchParams(window.location.search),
            FilePath: parser.pathname,
            Anchor: parser.hash,
            HasError: false,
        };
    }
    BuildFullUrlFromParts() {
        let toReturn = {
            AbsUrl: '',
        };
        if (this.UrlParts) {
            if (this.UrlParts && !this.UrlParts.HasError) {
                toReturn.AbsUrl = this.UrlParts.Protocol + '//' + this.UrlParts.HostAndPort;
                if (this.UrlParts.FilePath.length > 0) {
                    toReturn.AbsUrl += this.UrlParts.FilePath;
                }
                if (this.UrlParts.Parameters) {
                    toReturn.AbsUrl += '?' + this.UrlParts.Parameters.toString();
                }
                if (this.UrlParts.Anchor.length > 0) {
                    toReturn.AbsUrl += '#' + this.UrlParts.Anchor;
                }
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.BuildFullUrlFromParts.name, 'Null UrlParts');
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/UrlAgent/ScUrlAgent.js





class ScUrlAgent_ScUrlAgent extends GenericUrlAgent_GenericUrlAgent {
    constructor(hindeCore, browserProxy) {
        super(hindeCore, browserProxy);
    }
    __urlTestAgainstRegex(regexPattern, url) {
        return new RegExp(regexPattern).test(url);
    }
    Init_ScUrlAgent() {
        this.Logger.FuncStart(this.Init_ScUrlAgent.name);
        this.Init_GenericUrlAgent();
        this.Logger.FuncEnd(this.Init_ScUrlAgent.name);
    }
    GetFullUrl() {
        return this.BuildFullUrlFromParts();
    }
    GetScWindowType() {
        var toReturn = ScWindowType.Unknown;
        let testPath = this.BuildFullUrlFromParts();
        if (testPath) {
            if (testPath.AbsUrl.indexOf(SharedConst.Const.UrlSuffix.Login) > -1) {
                toReturn = ScWindowType.LoginPage;
            }
            else if (new RegExp(SharedConst.Const.Regex.ContentEditor).test(testPath.AbsUrl)) {
                toReturn = ScWindowType.ContentEditor;
            }
            else if (testPath.AbsUrl.toLowerCase().indexOf(SharedConst.Const.UrlSuffix.LaunchPad.toLowerCase()) > -1) {
                toReturn = ScWindowType.Launchpad;
            }
            else if (this.__urlTestAgainstRegex(SharedConst.Const.Regex.PageType.Desktop, testPath.AbsUrl)) {
                toReturn = ScWindowType.Desktop;
            }
            else if (this.__urlTestAgainstRegex(SharedConst.Const.Regex.PageType.Preview, testPath.AbsUrl)) {
                toReturn = ScWindowType.Preview;
            }
            else if (this.__urlTestAgainstRegex(SharedConst.Const.Regex.PageType.Edit, testPath.AbsUrl)) {
                toReturn = ScWindowType.Edit;
            }
            else if (this.__urlTestAgainstRegex(SharedConst.Const.Regex.PageType.Normal, testPath.AbsUrl)) {
                toReturn = ScWindowType.Normal;
            }
            else {
                toReturn = ScWindowType.Unknown;
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.GetScWindowType.name, 'null url');
        }
        return toReturn;
    }
    BuildEditPrevNormUrl(newMode, contState) {
        this.UrlParts.Anchor = '';
        this.UrlParts.FilePath = '';
        this.SetParameterValueByKey(QueryStrKey.sc_mode, scMode[newMode]);
        this.SetParameterValueByKey(QueryStrKey.sc_lang, 'en');
        this.SetParameterValueByKey(QueryStrKey.sc_site, 'website');
    }
    SetScMode(newMode) {
        if (this.UrlParts && newMode) {
            if (this.UrlParts && this.UrlParts)
                this.SetParameterValueByKey(QueryStrKey.sc_mode, scMode[newMode]);
        }
    }
    SetFilePathFromWindowType(windowType = null) {
        if (!windowType) {
            windowType = ScWindowType.Unknown;
        }
        switch (windowType) {
            case ScWindowType.ContentEditor:
                this.SetFilePath(SharedConst.Const.UrlSuffix.CE);
                break;
            case ScWindowType.Desktop:
                this.SetFilePath(SharedConst.Const.UrlSuffix.Desktop);
                break;
            case ScWindowType.Edit:
                this.SetFilePath(SharedConst.Const.UrlSuffix.None);
                break;
            case ScWindowType.Preview:
                this.SetFilePath(SharedConst.Const.UrlSuffix.None);
                break;
            case ScWindowType.Normal:
                this.SetFilePath(SharedConst.Const.UrlSuffix.None);
                break;
            default:
                this.SetFilePath('');
                this.ErrorHand.ErrorAndThrow(this.SetFilePathFromWindowType.name, 'unaccounted for window type');
                break;
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Drones/RollingLogIdDrone/RollingLogIdDrone.js


class RollingLogIdDrone_RollingLogIdDrone extends _HindeCoreBase {
    constructor(settingsAgent, hindeCore) {
        super(hindeCore);
        this.maxKey = 5;
        this.minKey = 1;
        this.Logger.CTORStart(RollingLogIdDrone_RollingLogIdDrone.name);
        this.SettingsAgent = settingsAgent;
    }
    GetNextLogId() {
        let nextKeyInt = this.minKey;
        let nextKeyToReturn;
        var result = this.GetLastUsedLogId().ValueAsInt();
        nextKeyInt = result + 1;
        if (nextKeyInt > this.maxKey) {
            nextKeyInt = this.minKey;
        }
        this.SettingsAgent.SetByKey(_3xxx_SettingKey_SettingKey.LastUsedLogToStorageKey, nextKeyInt.toString());
        nextKeyToReturn = nextKeyInt.toString();
        return nextKeyToReturn;
    }
    GetLastUsedLogId() {
        var lastUsedLogIdSetting = this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.LastUsedLogToStorageKey);
        return lastUsedLogIdSetting;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/ContentApi/Recipes/RecipeAutoSaveState.js
var RecipeAutoSaveState_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class RecipeAutoSaveState_RecipeAutoSaveState extends _HindeCoreBase {
    constructor(hindeCore, scUiProxy, atticAgent) {
        super(hindeCore);
        this.ScUiProxy = scUiProxy;
        this.AtticAgent = atticAgent;
    }
    ExecuteAsync(windowStatePrior) {
        return RecipeAutoSaveState_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeAutoSaveState_awaiter(this, void 0, void 0, function* () {
                this.ScUiProxy.GetStateOfScUiProxyWindow(SnapShotFlavor.Autosave)
                    .then((windowStateNew) => {
                    if (!this.AreStateOfSitecoreWindowsEqual(windowStateNew, windowStatePrior)) {
                        this.Logger.Log('states are different, save snap shot');
                        this.AtticAgent.WriteStateOfSitecoreToStorage(windowStateNew);
                    }
                    else {
                        this.Logger.Log('states are same, no save');
                    }
                    resolve(windowStateNew);
                })
                    .catch((err) => reject(err));
            }));
        });
    }
    AreStateOfContentTreeNodesEqual(stateOfScContentTreeNodeA, stateOfContentTreeNodeB) {
        let toReturn = true;
        toReturn = toReturn && (((stateOfScContentTreeNodeA === null) === (stateOfContentTreeNodeB === null)));
        if (stateOfScContentTreeNodeA !== null) {
            toReturn = toReturn && (stateOfScContentTreeNodeA.ItemId.Raw === stateOfContentTreeNodeB.ItemId.Raw);
            toReturn = toReturn && (stateOfScContentTreeNodeA.IsActive === stateOfContentTreeNodeB.IsActive);
            toReturn = toReturn && (stateOfScContentTreeNodeA.IsExpanded === stateOfContentTreeNodeB.IsExpanded);
        }
        this.Logger.LogVal(this.AreStateOfContentTreeNodesEqual.name, toReturn);
        return toReturn;
    }
    AreStatesOfTreeEqual(StateOfContentTreeProxyA, StateOfContentTreeProxyB) {
        let toReturn = true;
        toReturn = toReturn && (((StateOfContentTreeProxyA === null) === (StateOfContentTreeProxyB === null)));
        if (StateOfContentTreeProxyA) {
            toReturn = toReturn && (StateOfContentTreeProxyA.ActiveNodeFlat === StateOfContentTreeProxyB.ActiveNodeFlat);
        }
        this.Logger.LogVal(this.AreStatesOfTreeEqual.name, toReturn);
        return toReturn;
    }
    AreStatesOfContentEditorEqual(stateOfContentEditorA, stateOfContentEditorB) {
        let toReturn = true;
        toReturn = toReturn && (((stateOfContentEditorA === null) === (stateOfContentEditorB === null)));
        if (stateOfContentEditorA) {
            toReturn = toReturn && this.AreStatesOfTreeEqual(stateOfContentEditorA.StateOfContentTree, stateOfContentEditorB.StateOfContentTree);
        }
        this.Logger.LogVal(this.AreStatesOfContentEditorEqual.name, toReturn);
        return toReturn;
    }
    AreStatesOfFrameEqual(stateOfFrameA, stateOfFrameB) {
        let toReturn = true;
        toReturn = toReturn && (((stateOfFrameA === null) === (stateOfFrameB === null)));
        if (stateOfFrameA) {
            toReturn = toReturn && (stateOfFrameA.ZIndex === stateOfFrameB.ZIndex);
            toReturn = toReturn && this.AreStatesOfContentEditorEqual(stateOfFrameA.StateOfContentEditor, stateOfFrameB.StateOfContentEditor);
        }
        this.Logger.LogVal(this.AreStatesOfFrameEqual.name, toReturn);
        return toReturn;
    }
    AreStateOfSitecoreWindowsEqual(stateOfSitecoreWindowA, stateOfSitecoreWindowB) {
        this.Logger.FuncStart(this.AreDataSitecoreWindowStatesEqual.name);
        let toReturn = true;
        toReturn = toReturn && (((stateOfSitecoreWindowA === null) === (stateOfSitecoreWindowB === null)));
        toReturn = toReturn && this.AreDataSitecoreWindowStatesEqual(stateOfSitecoreWindowA.StateOfScWindow, stateOfSitecoreWindowB.StateOfScWindow);
        this.Logger.LogVal(this.AreStateOfSitecoreWindowsEqual.name, toReturn);
        this.Logger.FuncEnd(this.AreDataSitecoreWindowStatesEqual.name);
        return toReturn;
    }
    AreDataSitecoreWindowStatesEqual(stateOfSitecoreWindowA, stateOfSitecoreWindowB) {
        let toReturn = true;
        toReturn = toReturn && (((stateOfSitecoreWindowA === null) === (stateOfSitecoreWindowB === null)));
        if (stateOfSitecoreWindowA !== null) {
            toReturn = toReturn && this.AreStateOfDesktopTheSame(stateOfSitecoreWindowA.StateOfDesktop, stateOfSitecoreWindowB.StateOfDesktop);
            toReturn = toReturn && this.AreStatesOfContentEditorEqual(stateOfSitecoreWindowA.StateOfContentEditor, stateOfSitecoreWindowB.StateOfContentEditor);
        }
        this.Logger.LogVal(this.AreDataSitecoreWindowStatesEqual.name, toReturn);
        return toReturn;
    }
    AreStateOfDesktopTheSame(stateOfDesktopA, stateOfDesktopB) {
        let toReturn = true;
        toReturn = stateOfDesktopA.StateOfDTArea.ActiveDTFrameIndex === stateOfDesktopB.StateOfDTArea.ActiveDTFrameIndex;
        toReturn = toReturn && (stateOfDesktopA.StateOfDTArea.StateOfDTFrames.length === stateOfDesktopB.StateOfDTArea.StateOfDTFrames.length);
        if (toReturn && stateOfDesktopA.StateOfDTArea.StateOfDTFrames.length > 0) {
            for (var idx = 0; idx < length; idx++) {
                toReturn = toReturn && this.AreStatesOfFrameEqual(stateOfDesktopA.StateOfDTArea.StateOfDTFrames[idx], stateOfDesktopB.StateOfDTArea.StateOfDTFrames[idx]);
            }
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Agents/AutoSnapShotAgent.js
var AutoSnapShotAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class AutoSnapShotAgent_AutoSnapShotAgent extends _HindeCoreBase {
    constructor(hindeCore, settingsAgent, atticAgent, scUiProxy) {
        super(hindeCore);
        this.AutoSaveHasBeenScheduled = false;
        this.LastKnownSavedState = null;
        this.SettingsAgent = settingsAgent;
        this.AtticAgent = atticAgent;
        this.ScUiProxy = scUiProxy;
    }
    AutoSaveSnapShot() {
        return AutoSnapShotAgent_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.AutoSaveSnapShot.name);
            if (!this.RecipeAutoSaveState) {
                this.RecipeAutoSaveState = new RecipeAutoSaveState_RecipeAutoSaveState(this.HindeCore, this.ScUiProxy, this.AtticAgent);
            }
            this.RecipeAutoSaveState.ExecuteAsync(this.LastKnownSavedState)
                .then((result) => this.LastKnownSavedState = result);
            this.Logger.FuncEnd(this.AutoSaveSnapShot.name);
        });
    }
    ScheduleIntervalTasks() {
        this.Logger.FuncStart(this.ScheduleIntervalTasks.name);
        this.Logger.LogVal('Has been scheduled: ', this.AutoSaveHasBeenScheduled);
        let autoSaveSetting = this.SettingsAgent.HindSiteSettingsBucket.GetByKey(_3xxx_SettingKey_SettingKey.AutoSaveIntervalMin);
        this.Logger.LogVal('autoSaveSetting: ', autoSaveSetting.HindSiteSetting.ValueAsInt());
        if (autoSaveSetting.HindSiteSetting.ValueAsInt() > 0) {
            if (!this.AutoSaveHasBeenScheduled) {
                var self = this;
                var intervalMs = StaticHelpers_StaticHelpers.MinToMs(autoSaveSetting.HindSiteSetting.ValueAsInt());
                window.setInterval(() => {
                    self.AutoSaveSnapShot();
                }, intervalMs / SharedConst.Const.Debug.SpeedUpAutoSaveIntervalFactor);
                this.AutoSaveHasBeenScheduled = true;
            }
        }
        this.Logger.FuncEnd(this.ScheduleIntervalTasks.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfSnapshots.js
class DefaultStateOfStorageSnapshots {
    constructor() {
        this.CreationDate = new Date(1970);
        this.SnapShots = [];
        this.FavoriteCount = 0;
        this.PlainCount = 0;
        this.SnapShotsAutoCount = 0;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Agents/ContentAtticAgent.js
var ContentAtticAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class ContentAtticAgent_ContentAtticAgent extends _HindeCoreBase {
    constructor(repoAgent, hindeCore) {
        super(hindeCore);
        this.Logger.FuncStart(ContentAtticAgent_ContentAtticAgent.name);
        this.RepoAgent = repoAgent;
        this.Logger.FuncEnd(ContentAtticAgent_ContentAtticAgent.name);
    }
    InitContentAtticManager(settingAutoSnapshotRetainDays) {
        this.SettingAutoSnapshotRetainDays = settingAutoSnapshotRetainDays;
    }
    WriteStateOfSitecoreToStorage(stateOfSitecoreWindow) {
        return ContentAtticAgent_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentAtticAgent_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WriteStateOfSitecoreToStorage.name);
                let storageKey = ContentConst.Const.Storage.WindowRoot + ContentConst.Const.Storage.SnapShotPrefix + stateOfSitecoreWindow.Meta.SessionId + '.' + stateOfSitecoreWindow.Meta.TimeStamp.valueOf();
                stateOfSitecoreWindow.Meta.StorageKey = storageKey;
                var snapShotAsString = JSON.stringify(stateOfSitecoreWindow);
                this.RepoAgent.WriteByKey(stateOfSitecoreWindow.Meta.StorageKey, snapShotAsString);
                this.CleanOutOldAutoSavedData();
                resolve();
                this.Logger.FuncEnd(this.WriteStateOfSitecoreToStorage.name);
            }));
        });
    }
    GetFromStorageBySnapShotId(needleId) {
        this.Logger.FuncStart(this.GetFromStorageBySnapShotId.name, needleId.Raw);
        var DateOneWinStoreMatch = null;
        let foundStorage = this.GetStateOfStorageSnapShots();
        for (var idx = 0; idx < foundStorage.SnapShots.length; idx++) {
            var candidate = foundStorage.SnapShots[idx];
            if (candidate.Meta.SnapshotId.Raw === needleId.Raw) {
                DateOneWinStoreMatch = candidate;
                break;
            }
        }
        if (!DateOneWinStoreMatch) {
            this.ErrorHand.WarningAndContinue(this.GetFromStorageBySnapShotId.name, 'No match found for: ' + needleId.Raw);
        }
        this.Logger.FuncEnd(this.GetFromStorageBySnapShotId.name);
        return DateOneWinStoreMatch;
    }
    ValidateStorageData(oneRaw) {
        var candidate = JSON.parse(oneRaw.data);
        if (candidate) {
            if (!candidate.Meta) {
                candidate.Meta = new DefaultMetaData_DefaultMetaData();
            }
            candidate.Meta.TimeStamp = new Date(candidate.Meta.TimeStamp);
            if (!candidate.Meta.WindowType) {
                candidate.Meta.WindowType = ScWindowType.Unknown;
                candidate.Friendly.WindowType = ScWindowType[candidate.Meta.WindowType];
            }
            if (!candidate.Friendly) {
                candidate.Friendly = new DefaultFriendly_DefaultFriendly();
            }
            if (!candidate.Friendly.NickName) {
                candidate.Friendly.NickName = '';
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.ValidateStorageData.name, 'Saved data did not import correctly');
        }
        return candidate;
    }
    GetAllLocalStorageAsIOneStorageData() {
        let prefix = ContentConst.Const.Storage.WindowRoot + ContentConst.Const.Storage.SnapShotPrefix;
        let result = this.RepoAgent.GetBulkLocalStorageByKeyPrefix(prefix);
        return result;
    }
    GetAllStorage() {
        var toReturn = [];
        let rawStorageData = this.GetAllLocalStorageAsIOneStorageData();
        if (rawStorageData) {
            for (var idx = 0; idx < rawStorageData.length; idx++) {
                toReturn.push(this.ValidateStorageData(rawStorageData[idx]));
            }
        }
        toReturn.sort((a, b) => +b.Meta.TimeStamp - +a.Meta.TimeStamp);
        toReturn = this.FilterOutOldData(toReturn);
        return toReturn;
    }
    CleanOneStorageItem(candidate, autoCount) {
        var maxAutoSaveDiff = this.SettingAutoSnapshotRetainDays * 24 * 60 * 60 * 1000;
        var deleteFlag = false;
        var now = new Date();
        if (candidate.Meta.Flavor == SnapShotFlavor.Autosave) {
            if (autoCount > ContentConst.Const.MaxAutoToSaveCount) {
                this.Logger.LogVal('Delete (max count :' + ContentConst.Const.MaxAutoToSaveCount + ')', candidate.Meta.TimeStamp.toString());
                deleteFlag = true;
            }
            autoCount++;
        }
        if (now.getTime() - candidate.Meta.TimeStamp.getTime() > maxAutoSaveDiff) {
            this.Logger.LogVal('Delete (Old : max' + ContentConst.Const.DefaultMaxAutoSaveAgeDays + ' days)', candidate.Meta.TimeStamp.toString());
            deleteFlag = true;
        }
        if (deleteFlag) {
            try {
                this.Logger.LogVal('Cleaning old autosave', candidate.Meta.SnapshotId);
                window.localStorage.removeItem(candidate.Meta.StorageKey);
            }
            catch (e) {
                this.ErrorHand.ErrorAndThrow(this.CleanOutOldAutoSavedData.name, 'unable to delete key: ' + candidate.Meta.SnapshotId);
            }
        }
        return autoCount;
    }
    CleanFoundStorage(currentWindowStorage) {
        try {
            if (currentWindowStorage) {
                var cacheLength = currentWindowStorage.SnapShots.length;
                var autoCount = 0;
                for (var idx = 0; idx < cacheLength; idx++) {
                    var candidate = currentWindowStorage.SnapShots[idx];
                    autoCount = this.CleanOneStorageItem(candidate, autoCount);
                }
            }
        }
        catch (err) {
            throw (this.CleanFoundStorage.name, err);
        }
    }
    CleanOutOldAutoSavedData() {
        this.Logger.FuncStart(this.CleanOutOldAutoSavedData.name);
        try {
            if (!this.SettingAutoSnapshotRetainDays || this.SettingAutoSnapshotRetainDays < 1) {
                this.SettingAutoSnapshotRetainDays = ContentConst.Const.DefaultMaxAutoSaveAgeDays;
            }
            let currentWindowStorage = this.GetStateOfStorageSnapShots();
            this.CleanFoundStorage(currentWindowStorage);
        }
        catch (err) {
            throw (this.CleanOutOldAutoSavedData.name, err);
        }
        this.Logger.FuncEnd(this.CleanOutOldAutoSavedData.name);
    }
    GetStateOfStorageSnapShots() {
        this.Logger.FuncStart(this.GetStateOfStorageSnapShots.name);
        let stateOfSnapshotStorage = new DefaultStateOfStorageSnapshots();
        let result = this.GetAllStorage();
        stateOfSnapshotStorage.SnapShots = result;
        stateOfSnapshotStorage.CreationDate = new Date();
        this.UpdateCounts(stateOfSnapshotStorage);
        this.Logger.FuncEnd(this.GetStateOfStorageSnapShots.name);
        return stateOfSnapshotStorage;
    }
    UpdateCounts(storageAllSnapshots) {
        storageAllSnapshots.FavoriteCount = 0;
        storageAllSnapshots.SnapShotsAutoCount = 0;
        storageAllSnapshots.PlainCount = 0;
        for (var idx = 0; idx < storageAllSnapshots.SnapShots.length; idx++) {
            var candidate = storageAllSnapshots.SnapShots[idx];
            if (candidate.Meta.Flavor === SnapShotFlavor.Autosave) {
                storageAllSnapshots.SnapShotsAutoCount++;
            }
            else if (candidate.Meta.Flavor === SnapShotFlavor.Favorite) {
                storageAllSnapshots.FavoriteCount++;
            }
            else {
                storageAllSnapshots.PlainCount++;
            }
        }
    }
    FilterOutOldData(data) {
        var toReturn = data;
        return toReturn;
    }
    RemoveAndConfirmRemoval(storageMatch) {
        this.Logger.LogVal('Key to Delete', storageMatch.Meta.SnapshotId);
        let storageKey = storageMatch.Meta.StorageKey;
        this.RepoAgent.RemoveByKey(storageKey);
        let result = this.RepoAgent.ReadDataOfKey(storageKey);
        if (result) {
            this.ErrorHand.ErrorAndThrow(this.RemoveAndConfirmRemoval.name, 'Snapshot still exists after deleting');
        }
    }
    RemoveSnapshotFromStorageById(targetId) {
        this.Logger.FuncStart(this.RemoveSnapshotFromStorageById.name);
        try {
            if (targetId) {
                var storageMatch = this.GetFromStorageBySnapShotId(targetId);
                if (storageMatch) {
                    this.RemoveAndConfirmRemoval(storageMatch);
                }
                else {
                    this.ErrorHand.WarningAndContinue(this.RemoveSnapshotFromStorageById.name, 'no storage match');
                }
            }
            else {
                this.ErrorHand.WarningAndContinue(this.RemoveSnapshotFromStorageById.name, 'no target id');
            }
        }
        catch (err) {
            this.ErrorHand.ErrorAndThrow(this.RemoveSnapshotFromStorageById.name, err);
        }
        this.Logger.FuncEnd(this.RemoveSnapshotFromStorageById.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Agents/MiscAgent.js


class MiscAgent_MiscAgent extends _HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
        this.Logger.FuncStart(MiscAgent_MiscAgent.name);
        this.Logger.FuncEnd(MiscAgent_MiscAgent.name);
    }
    NotNullOrUndefined(subjectAnyOrAr, label = '', iterationCheck = null) {
        var toReturn = false;
        if (!iterationCheck) {
            iterationCheck = ContentConst.Const.MaxNullOrUndefinedIter;
        }
        iterationCheck -= 1;
        if (iterationCheck > 0) {
            if (label === '') {
                label = this.NotNullOrUndefined.name + ' : no label provided';
            }
            if (subjectAnyOrAr === 'undefined') {
                this.ErrorHand.ErrorAndThrow(label, 'Is undefined');
            }
            else if (!subjectAnyOrAr) {
                this.ErrorHand.ErrorAndThrow(label, 'Is Null');
            }
            else {
                this.Logger.LogVal(label, 'Passed');
                toReturn = true;
                if (Array.isArray(subjectAnyOrAr)) {
                    for (var idx = 0; idx < subjectAnyOrAr.length; idx++) {
                        toReturn = toReturn && this.NotNullOrUndefined(subjectAnyOrAr[idx], (idx + 1) + ':' + subjectAnyOrAr.length + ' ' + label, iterationCheck);
                    }
                }
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.NotNullOrUndefined.name, 'max iteration hit');
        }
        this.Logger.LogVal('toReturn', toReturn);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/ContentMessageManager.js

class ContentMessageManager_ContentMessageManager extends _HindeCoreBase {
    constructor(hindeCore, contentMessageBroker) {
        super(hindeCore);
        this.Logger.FuncStart(ContentMessageManager_ContentMessageManager.name);
        this.ContentMessageBroker = contentMessageBroker;
        this.Logger.FuncEnd(ContentMessageManager_ContentMessageManager.name);
    }
    InitContentMessageManager() {
        this.Logger.FuncStart(this.InitContentMessageManager.name + ' ' + ContentMessageManager_ContentMessageManager.name);
        this.ContentMessageBroker.BeginListening();
        this.Logger.FuncEnd(this.InitContentMessageManager.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/CommandHandlerDataForContent/ApiCommandPayload.js
class ApiCommandPayload {
    constructor() {
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/CommandHandlerDataForContent/CommandPayloadForInternal.js

class CommandPayloadForInternal_CommandPayloadForInternal extends _HindeCoreBase {
    constructor(hindeCore, atticAgent, toastAgent, scUiMan, settingsAgent, autoSnapShotAgent, apiPayload) {
        super(hindeCore);
        this.ContentMessageBroker = null;
        this.DesktopProxy = null;
        this.hindeCore = null;
        this.ScUiMan = null;
        this.TargetDoc = null;
        this.TargetNickName = '';
        this.ToastAgent = null;
        this.TopLevelDoc = null;
        this.AtticAgent = atticAgent;
        this.ToastAgent = toastAgent;
        this.ScUiMan = scUiMan;
        this.SettingsAgent = settingsAgent;
        this.AutoSnapShotAgent = autoSnapShotAgent;
        this.ApiPayload = apiPayload;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/CommandType.js
var CommandType;
(function (CommandType) {
    CommandType[CommandType["Unknown"] = 0] = "Unknown";
    CommandType[CommandType["PopUp"] = 1] = "PopUp";
    CommandType[CommandType["Content"] = 2] = "Content";
    CommandType[CommandType["Api"] = 3] = "Api";
    CommandType[CommandType["ContentInternal"] = 4] = "ContentInternal";
})(CommandType || (CommandType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/CommandToExecuteData.js

class CommandToExecuteData_CommandToExecuteData extends _HindeCoreBase {
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Recipes/_ContentRecipeBase.js


class _ContentRecipeBase_ContentRecipeBase extends _HindeCoreBase {
    constructor(hindeCore, commandParams, dependancies, friendly) {
        super(hindeCore);
        if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(commandParams)) {
            this.Friendly = friendly;
            this.CommandParams = commandParams;
            this.Dependancies = dependancies;
        }
        else {
            this.ErrorHand.ErrorAndThrow(_ContentRecipeBase_ContentRecipeBase.name, 'null check: ' + this.Friendly);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Recipes/RecipeForceAutoSnapShot.js
var RecipeForceAutoSnapShot_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class RecipeForceAutoSnapShot_RecipeForceAutoSnapShot extends _ContentRecipeBase_ContentRecipeBase {
    constructor(hindeCore, commandParams, dependancies) {
        super(hindeCore, commandParams, dependancies, RecipeForceAutoSnapShot_RecipeForceAutoSnapShot.name);
    }
    Execute() {
        return RecipeForceAutoSnapShot_awaiter(this, void 0, void 0, function* () {
            try {
                this.Dependancies.AutoSnapShotAgent.AutoSaveSnapShot();
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.Execute.name, err);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Recipes/RecipeInitFromQueryStr.js
var RecipeInitFromQueryStr_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class RecipeInitFromQueryStr_RecipeSetStateFromMostRecent extends _ContentRecipeBase_ContentRecipeBase {
    constructor(hindeCore, commandData, dependancies) {
        super(hindeCore, commandData, dependancies, RecipeInitFromQueryStr_RecipeInitFromQueryStr.name);
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeInitFromQueryStr_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(RecipeInitFromQueryStr_RecipeSetStateFromMostRecent.name);
            let dataStorage = this.Dependancies.AtticAgent.GetStateOfStorageSnapShots();
            if (dataStorage) {
                let mostRecentDate = new Date(1970, 1, 1);
                let mostRecent = null;
                dataStorage.SnapShots.forEach((snapShot) => {
                    if (snapShot.Meta.TimeStamp > mostRecentDate) {
                        mostRecentDate = snapShot.Meta.TimeStamp;
                        mostRecent = snapShot;
                    }
                });
                yield this.Dependancies.ScUiProxy.SetStateOfSitecoreWindowAsync(this.CommandParams.ApiPayload, mostRecent)
                    .then(() => resolve())
                    .catch((err) => reject(RecipeInitFromQueryStr_RecipeSetStateFromMostRecent.name + ' | ' + err));
            }
            this.Logger.FuncEnd(RecipeInitFromQueryStr_RecipeSetStateFromMostRecent.name);
        }));
    }
}
class RecipeInitFromQueryStr_RecipeInitFromQueryStr extends _ContentRecipeBase_ContentRecipeBase {
    constructor(hindeCore, commandData, dependancies) {
        super(hindeCore, commandData, dependancies, RecipeInitFromQueryStr_RecipeInitFromQueryStr.name);
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeInitFromQueryStr_awaiter(this, void 0, void 0, function* () {
            yield this.PvtInitFromQueryString()
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    PvtInitFromQueryString() {
        return RecipeInitFromQueryStr_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeInitFromQueryStr_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.PvtInitFromQueryString.name);
                if (this.Dependancies.ScUrlAgent.QueryStringHasKey(QueryStrKey.hsTargetSs)) {
                    let qsValue = (this.Dependancies.ScUrlAgent.GetQueryStringValueByKey(QueryStrKey.hsTargetSs));
                    if (Guid_Guid.IsValidGuidStr(qsValue)) {
                        let targetGuid = Guid_Guid.ParseGuid(qsValue, false);
                        if (targetGuid && targetGuid !== Guid_Guid.GetEmptyGuid()) {
                            this.Logger.LogVal("targetGuid", targetGuid.Raw);
                            var dataOneWindowStorage;
                            dataOneWindowStorage = this.Dependancies.AtticAgent.GetFromStorageBySnapShotId(targetGuid);
                            this.Dependancies.ScUiProxy.SetStateOfSitecoreWindowAsync(this.CommandParams.ApiPayload, dataOneWindowStorage);
                        }
                        else {
                            reject('Either no snapshot provided or an illegal one was found');
                        }
                    }
                    else {
                        this.Logger.Log('guid is not a valid guid');
                    }
                }
                else {
                    this.Logger.Log('Does not have qs target');
                    resolve();
                }
                this.Logger.FuncEnd(this.PvtInitFromQueryString.name);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Recipes/RecipeRemoveItemFromStorage.js
var RecipeRemoveItemFromStorage_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class RecipeRemoveItemFromStorage_RecipeRemoveItemFromStorage extends _ContentRecipeBase_ContentRecipeBase {
    constructor(hindeCore, commandData, dependancies) {
        super(hindeCore, commandData, dependancies, RecipeRemoveItemFromStorage_RecipeRemoveItemFromStorage.name);
    }
    Execute() {
        return RecipeRemoveItemFromStorage_awaiter(this, void 0, void 0, function* () {
            try {
                this.Dependancies.AtticAgent.RemoveSnapshotFromStorageById(this.CommandParams.TargetSnapShotId);
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.Execute.name, err);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Recipes/RecipeSaveState.js
var RecipeSaveState_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class RecipeSaveState_RecipeSaveStateManual extends _ContentRecipeBase_ContentRecipeBase {
    constructor(hindeCore, commandData, dependancies) {
        super(hindeCore, commandData, dependancies, RecipeSaveState_RecipeSaveStateManual.name);
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeSaveState_awaiter(this, void 0, void 0, function* () {
            yield this.Dependancies.ScUiProxy.GetStateOfScUiProxyWindow(SnapShotFlavor.Manual)
                .then((windowState) => {
                this.Dependancies.AtticAgent.WriteStateOfSitecoreToStorage(windowState);
            })
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Recipes/RecipeToggleFavorite.js
var RecipeToggleFavorite_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class RecipeToggleFavorite_RecipeToggleFavorite extends _ContentRecipeBase_ContentRecipeBase {
    constructor(hindeCore, commandData, dependancies) {
        super(hindeCore, commandData, dependancies, RecipeToggleFavorite_RecipeToggleFavorite.name);
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeToggleFavorite_awaiter(this, void 0, void 0, function* () {
            if (this.CommandParams.TargetSnapShotId) {
                let result = this.Dependancies.AtticAgent.GetFromStorageBySnapShotId(this.CommandParams.TargetSnapShotId);
                if (result.Meta.Flavor === SnapShotFlavor.Favorite) {
                    result.Meta.Flavor = SnapShotFlavor.Manual;
                }
                else {
                    result.Meta.Flavor = SnapShotFlavor.Favorite;
                }
                this.Dependancies.AtticAgent.WriteStateOfSitecoreToStorage(result);
                resolve();
            }
            else {
                reject('no targetId');
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Recipes/RecipeChangeNickName.js
var RecipeChangeNickName_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class RecipeChangeNickName_RecipeChangeNickName extends _ContentRecipeBase_ContentRecipeBase {
    constructor(hindeCore, commandParams, dependancies) {
        super(hindeCore, commandParams, dependancies, RecipeChangeNickName_RecipeChangeNickName.name);
        if (StaticHelpers_StaticHelpers.IsNullOrUndefined([this.CommandParams.NewNickname, this.CommandParams.TargetSnapShotId, this.Dependancies.AtticAgent])) {
            this.ErrorHand.ErrorAndThrow(RecipeChangeNickName_RecipeChangeNickName.name, 'Null check');
        }
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeChangeNickName_awaiter(this, void 0, void 0, function* () {
            this.UpdateNickname()
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    UpdateNickname() {
        return new Promise((resolve, reject) => RecipeChangeNickName_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.UpdateNickname.name);
            if (this.CommandParams.TargetSnapShotId) {
                if (this.CommandParams.NewNickname) {
                    var storageMatch;
                    storageMatch = this.Dependancies.AtticAgent.GetFromStorageBySnapShotId(this.CommandParams.TargetSnapShotId);
                    if (storageMatch) {
                        if ((storageMatch.Meta.Flavor === SnapShotFlavor.Autosave
                            ||
                                (storageMatch.Meta.Flavor === SnapShotFlavor.Unknown))) {
                            storageMatch.Meta.Flavor = SnapShotFlavor.Manual;
                        }
                        storageMatch.Friendly.NickName = this.CommandParams.NewNickname;
                    }
                    else {
                        reject(this.UpdateNickname.name + ' - No storage match');
                    }
                    this.Dependancies.AtticAgent.WriteStateOfSitecoreToStorage(storageMatch);
                    resolve();
                }
                else {
                    reject(this.UpdateNickname.name + ' - something was missing');
                }
            }
            else {
                reject(this.UpdateNickname.name + ' no payload or id');
            }
            this.Logger.FuncEnd(this.UpdateNickname.name);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/InternalCommandRunner.js
var InternalCommandRunner_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class InternalCommandRunner_InternalCommandRunner extends _HindeCoreBase {
    constructor(hindeCore, atticAgent, autoSnapShotAgent, scUiProxy, scUrlAgent) {
        super(hindeCore);
        this.Dependancies = {
            AtticAgent: atticAgent,
            AutoSnapShotAgent: autoSnapShotAgent,
            ScUiProxy: scUiProxy,
            HindeCore: this.HindeCore,
            ScUrlAgent: scUrlAgent
        };
    }
    SetNickName(commandParams) {
        return InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
                let recipe = new RecipeChangeNickName_RecipeChangeNickName(this.HindeCore, commandParams, this.Dependancies);
                recipe.Execute()
                    .then(() => resolve())
                    .catch((err) => reject(this.DebugForceAutoSnapShot.name + ' | ' + err));
            }));
        });
    }
    Ping() {
        return new Promise((resolve, reject) => InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
            resolve(MsgFlag.RespListeningAndReady);
        }));
    }
    DebugForceAutoSnapShot(commandParams) {
        return InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
                let recipe = new RecipeForceAutoSnapShot_RecipeForceAutoSnapShot(this.HindeCore, commandParams, this.Dependancies);
                recipe.Execute()
                    .then(() => resolve())
                    .catch((err) => reject(this.DebugForceAutoSnapShot.name + ' | ' + err));
            }));
        });
    }
    SaveWindowState(commandParams) {
        return InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
                let recipe = new RecipeSaveState_RecipeSaveStateManual(this.HindeCore, commandParams, this.Dependancies);
                yield recipe.Execute()
                    .then(resolve)
                    .catch((err) => reject(err));
            }));
        });
    }
    ToggleFavorite(commandParams) {
        return new Promise((resolve, reject) => InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
            yield new RecipeToggleFavorite_RecipeToggleFavorite(this.HindeCore, commandParams, this.Dependancies).Execute()
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    SetStateFromMostRecent(commandParams) {
        return InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart(this.SetStateFromMostRecent.name);
                let recipe = new RecipeInitFromQueryStr_RecipeSetStateFromMostRecent(this.HindeCore, commandParams, this.Dependancies);
                yield recipe.Execute();
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.SetStateFromQueryString.name, err);
            }
            this.Logger.FuncEnd(this.SetStateFromMostRecent.name);
        });
    }
    SetStateFromQueryString(commandParams) {
        return InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
            try {
                let recipe = new RecipeInitFromQueryStr_RecipeInitFromQueryStr(this.HindeCore, commandParams, this.Dependancies);
                recipe.Execute();
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.SetStateFromQueryString.name, err);
            }
        });
    }
    RemoveSnapShot(commandParams) {
        return InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
                let recipe = new RecipeRemoveItemFromStorage_RecipeRemoveItemFromStorage(this.HindeCore, commandParams, this.Dependancies);
                yield recipe.Execute()
                    .then(resolve)
                    .catch((err) => reject(err));
            }));
        });
    }
    SetStateOfSitecoreWindow(commandParams, dependancies) {
        return new Promise((resolve, reject) => InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
            dependancies.HindeCore.Logger.LogAsJsonPretty("IdOfSelect", commandParams.TargetSnapShotId);
            let dataOneWindowStorage = dependancies.AtticAgent.GetFromStorageBySnapShotId(commandParams.TargetSnapShotId);
            if (dataOneWindowStorage) {
                dependancies.ScUiProxy.SetStateOfSitecoreWindowAsync(commandParams.ApiPayload, dataOneWindowStorage)
                    .then(() => resolve())
                    .catch((err) => reject(this.SetStateOfSitecoreWindow.name + ' | ' + err));
            }
            ;
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Events/CommandStartEndCancelEvent/CommandStartEndCancelEvent_Observer.js

class CommandStartEndCancelEvent_Observer_CommandStartEndCancelEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, CommandStartEndCancelEvent_Observer_CommandStartEndCancelEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Events/CommandStartEndCancelEvent/ICommandStartEndCancelEvent_Payload.js
var CommandState_State;
(function (CommandState_State) {
    CommandState_State[CommandState_State["Unknwon"] = 0] = "Unknwon";
    CommandState_State[CommandState_State["CommandStarted"] = 1] = "CommandStarted";
    CommandState_State[CommandState_State["CommandCompletedSuccessfully"] = 2] = "CommandCompletedSuccessfully";
    CommandState_State[CommandState_State["CommandCompletedWithError"] = 3] = "CommandCompletedWithError";
    CommandState_State[CommandState_State["CommandCanceled"] = 4] = "CommandCanceled";
})(CommandState_State || (CommandState_State = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Events/CommandStartEndCancelEvent/CommandStartEndCancelEvent_Subject.js

class CommandStartEndCancelEvent_Subject_CommandStartEndCancelEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore, friendly) {
        super(hindeCore, friendly + ' ' + CommandStartEndCancelEvent_Subject_CommandStartEndCancelEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/CommandRouter.js
var CommandRouter_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};











class CommandRouter_CommandRouter extends _HindeCoreBase {
    constructor(hindeCore, scUiProxy, toastAgent, scUiMan, atticAgent, settingsAgent, autoSnapShotAgent, scUrlAgent) {
        super(hindeCore);
        this.ToastAgent = toastAgent;
        this.ScUiMan = scUiMan;
        this.ScUiProxy = scUiProxy;
        this.AtticAgent = atticAgent;
        this.SettingsAgent = settingsAgent;
        this.AutoSnapShotAgent = autoSnapShotAgent;
        this.ScUrlAgent = scUrlAgent;
        this.InternalCommandRunner = new InternalCommandRunner_InternalCommandRunner(this.HindeCore, this.AtticAgent, this.AutoSnapShotAgent, this.ScUiProxy, this.ScUrlAgent);
        this.CommandTriggeredEvent_Subject = new CommandStartEndCancelEvent_Subject_CommandStartEndCancelEvent_Subject(this.HindeCore, CommandRouter_CommandRouter.name);
        this.CommandTriggeredEvent_Observer = new CommandStartEndCancelEvent_Observer_CommandStartEndCancelEvent_Observer(this.HindeCore, this.OnCommandStartEndCancelEvent.bind(this));
        this.CommandTriggeredEvent_Subject.RegisterObserver(this.CommandTriggeredEvent_Observer);
        this.Dependancies = {
            AtticAgent: this.AtticAgent,
            AutoSnapShotAgent: this.AutoSnapShotAgent,
            ScUiProxy: this.ScUiProxy,
            ScUrlAgent: this.ScUrlAgent,
            HindeCore: this.HindeCore
        };
    }
    OnCommandStartEndCancelEvent(payload) {
        return CommandRouter_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.OnCommandStartEndCancelEvent.name);
            if (payload.CommandState == CommandState_State.CommandStarted) {
                yield this.ToastAgent.RaisePerpetualToast('Starting to do something');
            }
            else if (payload.CommandState == CommandState_State.CommandCompletedSuccessfully) {
            }
            this.Logger.FuncEnd(this.OnCommandStartEndCancelEvent.name);
        });
    }
    ExecuteInternalCommand(commandToExecute, routingParams) {
        return new Promise((resolve, reject) => CommandRouter_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.ExecuteInternalCommand.name);
            if (commandToExecute) {
                this.Logger.LogVal('msgFlag', MsgFlag[routingParams.MsgFlag]);
                let commandParams = this.BuildCommandPayloadForInternal();
                if (routingParams) {
                    commandParams.TargetSnapShotId = routingParams.SelectSnapShotId;
                    commandParams.NewNickname = routingParams.NewNickName;
                }
                let payload = {
                    CommandState: CommandState_State.CommandStarted
                };
                let self = this;
                this.CommandTriggeredEvent_Subject.NotifyObserversAsync(payload);
                yield commandToExecute.bind(self.InternalCommandRunner)(commandParams, this.Dependancies)
                    .then(() => this.Logger.MarkerC())
                    .then(() => {
                    let payloadComplete = {
                        CommandState: CommandState_State.CommandCompletedSuccessfully
                    };
                })
                    .then(() => this.Logger.MarkerD())
                    .then(() => resolve())
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.ExecuteInternalCommand.name, err));
            }
            this.Logger.FuncEnd(this.ExecuteInternalCommand.name);
        }));
    }
    BuildCommandPayloadForInternal() {
        let scProxyPayload = this.BuildScProxyPayload();
        let commandParams = new CommandPayloadForInternal_CommandPayloadForInternal(this.HindeCore, this.AtticAgent, this.ToastAgent, this.ScUiMan, this.SettingsAgent, this.AutoSnapShotAgent, scProxyPayload);
        return commandParams;
    }
    BuildScProxyPayload() {
        let commandData = new ApiCommandPayload();
        return commandData;
    }
    RouteCommand(routingParams) {
        return CommandRouter_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => CommandRouter_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.RouteCommand.name, MsgFlag[routingParams.MsgFlag]);
                let commandData = this.CalculateCommandToExec(routingParams.MsgFlag);
                if (commandData.CommandType == CommandType.Api) {
                    yield this.ExecuteApiCommand(commandData.commandToExecute, routingParams.MsgFlag)
                        .then(() => this.ScUiProxy.RaiseToastNotification('Completed'))
                        .then(() => resolve())
                        .catch((err) => reject(err));
                }
                else if (commandData.CommandType = CommandType.ContentInternal) {
                    yield this.ExecuteInternalCommand(commandData.commandToExecute, routingParams)
                        .then(() => resolve())
                        .catch((err) => reject(err));
                }
                if (commandData) {
                }
                else {
                    this.ErrorHand.ErrorAndThrow(this.RouteCommand.name, 'did not find command');
                }
                this.Logger.FuncEnd(this.RouteCommand.name);
            }));
        });
    }
    ExecuteApiCommand(functionToExecute, msgFlag) {
        return new Promise((resolve, reject) => CommandRouter_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.ExecuteApiCommand.name);
            if (functionToExecute) {
                let commandData = this.BuildScProxyPayload();
                yield functionToExecute.bind(this)(commandData)
                    .then((response) => resolve(response))
                    .catch((err) => reject(err));
            }
            else {
                reject(this.ExecuteApiCommand.name + ' | no functionToExecute');
            }
            this.Logger.FuncEnd(this.ExecuteApiCommand.name);
        }));
    }
    CalculateCommandToExec(msgFlag) {
        let commandData = new CommandToExecuteData_CommandToExecuteData(this.HindeCore);
        commandData.commandToExecute = null;
        commandData.CommandType = CommandType.Unknown;
        switch (msgFlag) {
            case MsgFlag.ReqAddCETab:
                commandData.CommandType = CommandType.Api;
                commandData.commandToExecute = this.ScUiProxy.AddContentEditorToDesktopAsync;
                break;
            case MsgFlag.ReqUpdateNickName:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.SetNickName;
                break;
            case MsgFlag.ReqAdminB:
                commandData.CommandType = CommandType.Api;
                commandData.commandToExecute = this.ScUiProxy.AdminB;
                break;
            case MsgFlag.Ping:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.Ping;
                break;
            case MsgFlag.ReqOpenCE:
                commandData.CommandType = CommandType.Api;
                commandData.commandToExecute = this.ScUiProxy.OpenContentEditor;
                break;
            case MsgFlag.ReqToggleFavorite:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.ToggleFavorite;
                break;
            case MsgFlag.ReqQuickPublish:
                commandData.CommandType = CommandType.Api;
                commandData.commandToExecute = this.ScUiProxy.PublischActiveCE;
                break;
            case MsgFlag.ReqSetStateOfSitecoreSameWindow:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.SetStateOfSitecoreWindow;
                break;
            case MsgFlag.ReqToggleCompactCss:
                commandData.CommandType = CommandType.Api;
                commandData.commandToExecute = this.ScUiProxy.ToggleCompactCss;
                break;
            case MsgFlag.ReqTakeSnapShot:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.SaveWindowState;
                break;
            case MsgFlag.ReqRemoveFromStorage:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.RemoveSnapShot;
                break;
            case MsgFlag.ReqDebugAutoSnapShot:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.DebugForceAutoSnapShot;
                break;
            case MsgFlag.SetStateFromQueryString:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.SetStateFromQueryString;
                break;
            case MsgFlag.SetStateFromMostRecent:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.SetStateFromMostRecent;
                break;
            default:
                this.Logger.Log('Unhandled MsgFlag', StaticHelpers_StaticHelpers.MsgFlagAsString(msgFlag));
                break;
        }
        return commandData;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/ContentBrowserProxy.js

class ContentBrowserProxy_ContentBrowserProxy extends _HindeCoreBase {
    AddListener(callback) {
        browser.runtime.onMessage.addListener((request) => callback(request));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultMessageContentToController_Payload.js

class DefaultMessageContentToController_Payload_DefaultMessageContentToController_Payload {
    constructor() {
        this.StateOfStorageSnapShots = new DefaultStateOfStorageSnapshots();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/MsgPayloadResponseFromContent.js


class MsgPayloadResponseFromContent_DefaultMsgContentToController {
    constructor(msgFlag) {
        this.Payload = new DefaultMessageContentToController_Payload_DefaultMessageContentToController_Payload();
        this.MsgFlag = MsgFlag.Unknown;
        this.MsgFlag = msgFlag;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/ContentMessageBroker.js
var ContentMessageBroker_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class ContentMessageBroker_MessageBroker_Content extends _HindeCoreBase {
    constructor(hindeCore, settingsAgent, apiManager, atticMan, contentBrowserProxy, autoSnapShotAgent, commandRouter, scUrlAgent) {
        super(hindeCore);
        this.Logger.CTORStart(ContentMessageBroker_MessageBroker_Content.name);
        this.SettingsAgent = settingsAgent;
        this.HindSiteScUiProxy = apiManager;
        this.AtticAgent = atticMan;
        this.ContentBrowserProxy = contentBrowserProxy;
        this.AutoSnapShotAgent = autoSnapShotAgent;
        this.CommandRouter = commandRouter;
        this.ScUrlAgent = scUrlAgent;
        this.Logger.CTOREnd(ContentMessageBroker_MessageBroker_Content.name);
    }
    BeginListening() {
        this.Logger.FuncStart(this.BeginListening.name);
        var self = this;
        if (this.ContentBrowserProxy) {
            this.ContentBrowserProxy.AddListener((request) => this.ContentReceiveRequest(request));
        }
        this.Logger.Log('Listening for messages');
        this.Logger.FuncEnd(this.BeginListening.name);
    }
    ValidateRequest(messageFromController) {
        this.Logger.FuncStart(this.ValidateRequest.name);
        var isValid = true;
        if (messageFromController) {
            if (messageFromController.CurrentContentPrefs) {
            }
            else {
                this.ErrorHand.WarningAndContinue(this.ValidateRequest.name, 'No CurrentContentPrefs');
                messageFromController.IsValid = false;
                isValid = false;
            }
        }
        else {
            this.ErrorHand.WarningAndContinue(this.ValidateRequest.name, 'messageFromController is null');
            isValid = false;
        }
        messageFromController.IsValid = isValid;
        this.Logger.FuncEnd(this.ValidateRequest.name, isValid.toString());
        return messageFromController;
    }
    NotifyFail(failrReason) {
        this.ErrorHand.ErrorAndContinue(this.NotifyFail.name, 'Fail ' + failrReason);
    }
    ContentReceiveRequest(messageFromController) {
        return ContentMessageBroker_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentMessageBroker_awaiter(this, void 0, void 0, function* () {
                this.Logger.Log('');
                this.Logger.Log('');
                this.Logger.Log('');
                this.Logger.FuncStart(this.ContentReceiveRequest.name, StaticHelpers_StaticHelpers.MsgFlagAsString(messageFromController.MsgFlag));
                this.Logger.LogVal('ce butt', this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.AutoLogin).ValueAsBool());
                if (messageFromController) {
                    messageFromController = this.ValidateRequest(messageFromController);
                    if (messageFromController.IsValid) {
                        this.SettingsAgent.UpdateSettingsFromPopUpMsg(messageFromController.CurrentContentPrefs);
                        yield this.ReqMsgRouter(messageFromController)
                            .then((msgContentToController) => {
                            this.Logger.Log('responding: ' + StaticHelpers_StaticHelpers.MsgFlagAsString(msgContentToController.MsgFlag));
                            resolve(msgContentToController);
                        })
                            .catch((err) => {
                            this.NotifyFail(err);
                            resolve(new MsgPayloadResponseFromContent_DefaultMsgContentToController(MsgFlag.RespTaskFailed));
                        });
                    }
                    else {
                        resolve(new MsgPayloadResponseFromContent_DefaultMsgContentToController(MsgFlag.RespFailedDidNotValidate));
                    }
                }
                else {
                    reject('no request');
                }
                this.Logger.FuncEnd(this.ContentReceiveRequest.name, StaticHelpers_StaticHelpers.MsgFlagAsString(messageFromController.MsgFlag));
                this.Logger.Log('');
                this.Logger.Log('');
                this.Logger.Log('');
                this.Logger.Log('Resuming Standby');
                this.Logger.Log('');
                this.Logger.Log('');
                this.Logger.Log('');
            }));
        });
    }
    ReqMsgRouter(messageFromController) {
        return ContentMessageBroker_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentMessageBroker_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.ReqMsgRouter.name, StaticHelpers_StaticHelpers.MsgFlagAsString(messageFromController.MsgFlag));
                let commandRouterParams = {
                    MsgFlag: messageFromController.MsgFlag,
                    NewNickName: messageFromController.StateOfPopUI.NewNickName,
                    SelectSnapShotId: messageFromController.StateOfPopUI.SelectSnapShotId
                };
                yield this.CommandRouter.RouteCommand(commandRouterParams)
                    .then(() => this.ConstructResponse(messageFromController.MsgFlag))
                    .then((response) => {
                    resolve(response);
                })
                    .catch((err) => reject(this.ReqMsgRouter.name + ' | ' + err));
                this.Logger.FuncEnd(this.ReqMsgRouter.name);
            }));
        });
    }
    ConstructResponse(msgFlag) {
        return ContentMessageBroker_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentMessageBroker_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.ConstructResponse.name);
                let responseContentToController = new MsgPayloadResponseFromContent_DefaultMsgContentToController(MsgFlag.Unknown);
                yield this.HindSiteScUiProxy.GetStateOfScUiProxy()
                    .then((stateOfScUiProxy) => {
                    responseContentToController.Payload.StateOfScUiProxy_Live = stateOfScUiProxy;
                    responseContentToController.Payload.LastReq = msgFlag;
                    responseContentToController.MsgFlag = MsgFlag.RespTaskSuccessful;
                    responseContentToController.Payload.LastReqFriendly = MsgFlag[msgFlag];
                    responseContentToController.Payload.ErrorStack = ['todo'];
                })
                    .then(() => this.AtticAgent.GetStateOfStorageSnapShots())
                    .then((stateOfStorageSnapShots) => responseContentToController.Payload.StateOfStorageSnapShots = stateOfStorageSnapShots)
                    .then(() => resolve(responseContentToController))
                    .catch((err) => reject(err));
                this.Logger.FuncEnd(this.ConstructResponse.name);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/zContentEntryPoint.js
var zContentEntryPoint_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





















class zContentEntryPoint_ContentEntry {
    Main() {
        return zContentEntryPoint_awaiter(this, void 0, void 0, function* () {
            this.InstantiateAndInit_LoggerAndSettings();
            this.InstantiateAndInitAgents_Content();
            yield this.InstantiateAndInit_Managers()
                .then(() => {
                this.AtticAgent.CleanOutOldAutoSavedData();
            });
            this.Logger.SectionMarker('e) ' + this.Main.name);
            this.Logger.Log('standing by');
        });
    }
    InstantiateAndInitAgents_Content() {
        try {
            this.Logger.SectionMarker('Instantiate Agents');
            this.AtticAgent = new ContentAtticAgent_ContentAtticAgent(this.RepoAgent, this.HindeCore);
            this.MiscAgent = new MiscAgent_MiscAgent(this.HindeCore);
            this.ToastAgent = new ToastAgent_ToastAgent(this.HindeCore, document);
            this.ScUrlAgent = new ScUrlAgent_ScUrlAgent(this.HindeCore, null);
            this.ScUrlAgent.Init_ScUrlAgent();
            this.AtticAgent.InitContentAtticManager(this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.AutoSaveRetainDays).ValueAsInt());
        }
        catch (err) {
            this.ErrorHand.ErrorAndThrow(this.InstantiateAndInitAgents_Content.name, err);
        }
    }
    InstantiateAndInit_Managers() {
        return zContentEntryPoint_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.SectionMarker('Instantiate and Initialize Managers');
                let scUiMan;
                let contentMessageMan;
                scUiMan = new SitecoreUiManager_ScUiManager(this.HindeCore);
                let topLevelDoc = {
                    ContentDoc: document,
                    DocId: null,
                    Nickname: 'TopLevelDoc'
                };
                this.ScUiProxy = new HindSiteScUiProxy_HindSiteScUiProxy(this.HindeCore, scUiMan, this.ScUrlAgent, topLevelDoc, this.ToastAgent);
                this.AutoSnapShotAgent = new AutoSnapShotAgent_AutoSnapShotAgent(this.HindeCore, this.SettingsAgent, this.AtticAgent, this.ScUiProxy);
                this.ContentBrowserProxy = new ContentBrowserProxy_ContentBrowserProxy(this.HindeCore);
                this.CommandRouter = new CommandRouter_CommandRouter(this.HindeCore, this.ScUiProxy, this.ToastAgent, scUiMan, this.AtticAgent, this.SettingsAgent, this.AutoSnapShotAgent, this.ScUrlAgent);
                let contentMessageBroker = new ContentMessageBroker_MessageBroker_Content(this.HindeCore, this.SettingsAgent, this.ScUiProxy, this.AtticAgent, this.ContentBrowserProxy, this.AutoSnapShotAgent, this.CommandRouter, this.ScUrlAgent);
                contentMessageMan = new ContentMessageManager_ContentMessageManager(this.HindeCore, contentMessageBroker);
                yield scUiMan.InitSitecoreUiManager()
                    .then(() => contentMessageMan.InitContentMessageManager())
                    .then(() => this.ScUiProxy.OnReady_InstantiateHindSiteScUiProxy())
                    .then((result) => this.Logger.LogAsJsonPretty('InitResultsScWindowManager', result))
                    .then(() => {
                    this.AutoSnapShotAgent.ScheduleIntervalTasks();
                })
                    .then(() => this.StartUp())
                    .then(() => this.Logger.Log('Init success'))
                    .catch((err) => this.ErrorHand.ErrorAndThrow('Content Entry Point', err));
                this.Logger.SectionMarker('e) Instantiate and Initialize Managers');
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.InstantiateAndInit_Managers.name, err);
            }
        });
    }
    StartUp() {
        this.Logger.FuncStart(this.StartUp.name);
        let setStateFromX = {
            MsgFlag: MsgFlag.SetStateFromQueryString,
            NewNickName: null,
            SelectSnapShotId: null,
        };
        if (this.ScUrlAgent.QueryStringHasKey(QueryStrKey.hsTargetSs)) {
            setStateFromX.MsgFlag = MsgFlag.SetStateFromQueryString,
                this.CommandRouter.RouteCommand(setStateFromX);
        }
        else if ((this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.AutoRestoreState)).ValueAsBool()) {
            this.Logger.Log('yup...has the setting');
            setStateFromX.MsgFlag = MsgFlag.SetStateFromMostRecent;
            this.CommandRouter.RouteCommand(setStateFromX);
        }
        this.Logger.FuncEnd(this.StartUp.name);
    }
    InitLogging() {
        this.Logger.FuncStart(this.InitLogging.name);
        let enableLogger = this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.EnableDebugging);
        if (enableLogger.ValueAsBool() || SharedConst.Const.Debug.ForceLoggingEnabled) {
            let consoleLogWrite = new LoggerConsoleWriter();
            var RollingLogId = new RollingLogIdDrone_RollingLogIdDrone(this.SettingsAgent, this.HindeCore);
            let storageLogWriter = new LoggerStorageWriter();
            var nextLogId = RollingLogId.GetNextLogId();
            storageLogWriter.SetLogToStorageKey(nextLogId);
            this.Logger.AddWriter(consoleLogWrite);
            this.Logger.AddWriter(storageLogWriter);
        }
        this.Logger.FlushBuffer();
        this.Logger.FuncEnd(this.InitLogging.name);
    }
    InstantiateAndInit_LoggerAndSettings() {
        this.Logger = new LoggerAgent_LoggerAgent();
        this.ErrorHand = new ErrorHandlerAgent();
        this.HindeCore = {
            Logger: this.Logger,
            ErrorHand: this.ErrorHand,
        };
        this.RepoAgent = new RepositoryAgent_RepositoryAgent(this.HindeCore);
        this.SettingsAgent = new SettingsAgent_SettingsAgent(this.HindeCore, this.RepoAgent);
        this.SettingsAgent.Init_SettingsAgent();
        this.InitLogging();
    }
}
let contentEntry = new zContentEntryPoint_ContentEntry();
contentEntry.Main();


/***/ })
/******/ ]);