/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/1xxx-MessageFlag.js
var MsgFlag;
(function (MsgFlag) {
    MsgFlag[MsgFlag["Unknown"] = 0] = "Unknown";
    MsgFlag[MsgFlag["GetAllStorageOneWindow"] = 1001] = "GetAllStorageOneWindow";
    MsgFlag[MsgFlag["NewWindowTest"] = 1002] = "NewWindowTest";
    MsgFlag[MsgFlag["Ping"] = 1003] = "Ping";
    MsgFlag[MsgFlag["ReqRemoveFromStorage"] = 1004] = "ReqRemoveFromStorage";
    MsgFlag[MsgFlag["ReqAddCETab"] = 1100] = "ReqAddCETab";
    MsgFlag[MsgFlag["ReqAdminB"] = 1101] = "ReqAdminB";
    MsgFlag[MsgFlag["ReqGoDesktop"] = 1102] = "ReqGoDesktop";
    MsgFlag[MsgFlag["ReqLoginWithAdminB"] = 1103] = "ReqLoginWithAdminB";
    MsgFlag[MsgFlag["ReqMarkFavorite"] = 1104] = "ReqMarkFavorite";
    MsgFlag[MsgFlag["ReqOpenCE"] = 1105] = "ReqOpenCE";
    MsgFlag[MsgFlag["ReqQuickPublish"] = 1106] = "ReqQuickPublish";
    MsgFlag[MsgFlag["ReqRestoreClick"] = 1107] = "ReqRestoreClick";
    MsgFlag[MsgFlag["Unused"] = 1108] = "Unused";
    MsgFlag[MsgFlag["ReqSetScMode"] = 1109] = "ReqSetScMode";
    MsgFlag[MsgFlag["ReqTakeSnapShot"] = 1110] = "ReqTakeSnapShot";
    MsgFlag[MsgFlag["ReqToggleCompactCss"] = 1111] = "ReqToggleCompactCss";
    MsgFlag[MsgFlag["ReqUpdateNickName"] = 1112] = "ReqUpdateNickName";
    MsgFlag[MsgFlag["RespCurState"] = 1200] = "RespCurState";
    MsgFlag[MsgFlag["RespTaskFailed"] = 1201] = "RespTaskFailed";
    MsgFlag[MsgFlag["RespListeningAndReady"] = 1202] = "RespListeningAndReady";
    MsgFlag[MsgFlag["_unused"] = 1203] = "_unused";
    MsgFlag[MsgFlag["RespTaskSuccessful"] = 1204] = "RespTaskSuccessful";
    MsgFlag[MsgFlag["RespTest"] = 1205] = "RespTest";
    MsgFlag[MsgFlag["RespNotReady"] = 1206] = "RespNotReady";
})(MsgFlag || (MsgFlag = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/3xxx-SettingKey.js
var _3xxx_SettingKey_SettingKey;
(function (SettingKey) {
    SettingKey[SettingKey["unknown"] = 0] = "unknown";
    SettingKey[SettingKey["AutoLogin"] = 3100] = "AutoLogin";
    SettingKey[SettingKey["__dead"] = 3101] = "__dead";
    SettingKey[SettingKey["DebugKeepDialogOpen"] = 3102] = "DebugKeepDialogOpen";
    SettingKey[SettingKey["AutoSaveIntervalMin"] = 3103] = "AutoSaveIntervalMin";
    SettingKey[SettingKey["UseCompactCss"] = 3104] = "UseCompactCss";
    SettingKey[SettingKey["AutoSaveRetainDays"] = 3105] = "AutoSaveRetainDays";
    SettingKey[SettingKey["AutoRenameCeButton"] = 3106] = "AutoRenameCeButton";
    SettingKey[SettingKey["MaxAutoSaveCount"] = 3200] = "MaxAutoSaveCount";
    SettingKey[SettingKey["EnableLogging"] = 3201] = "EnableLogging";
    SettingKey[SettingKey["LgndPopUpLog"] = 3300] = "LgndPopUpLog";
    SettingKey[SettingKey["LgndForeSite"] = 3301] = "LgndForeSite";
    SettingKey[SettingKey["LgndHindSite"] = 3302] = "LgndHindSite";
    SettingKey[SettingKey["LgndSettings"] = 3303] = "LgndSettings";
    SettingKey[SettingKey["LgndContentState"] = 3304] = "LgndContentState";
    SettingKey[SettingKey["_unused_"] = 3305] = "_unused_";
    SettingKey[SettingKey["LgndMessages"] = 3306] = "LgndMessages";
    SettingKey[SettingKey["LgndBrowserState"] = 3307] = "LgndBrowserState";
    SettingKey[SettingKey["LgndPopUpState"] = 3308] = "LgndPopUpState";
    SettingKey[SettingKey["LastUsedLogToStorageKey"] = 3400] = "LastUsedLogToStorageKey";
    SettingKey[SettingKey["AutoSnapshotBeforeWindowChange"] = 3401] = "AutoSnapshotBeforeWindowChange";
})(_3xxx_SettingKey_SettingKey || (_3xxx_SettingKey_SettingKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferChar.js
var BufferChar;
(function (BufferChar) {
    BufferChar[BufferChar["space"] = 0] = "space";
    BufferChar[BufferChar["Nbsp"] = 1] = "Nbsp";
    BufferChar[BufferChar["Period"] = 2] = "Period";
    BufferChar[BufferChar["Zero"] = 3] = "Zero";
})(BufferChar || (BufferChar = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferDirection.js
var BufferDirection;
(function (BufferDirection) {
    BufferDirection[BufferDirection["left"] = 0] = "left";
    BufferDirection[BufferDirection["right"] = 1] = "right";
})(BufferDirection || (BufferDirection = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/scWindowType.js
var ScWindowType;
(function (ScWindowType) {
    ScWindowType[ScWindowType["Unknown"] = 0] = "Unknown";
    ScWindowType[ScWindowType["LoginPage"] = 1] = "LoginPage";
    ScWindowType[ScWindowType["Desktop"] = 2] = "Desktop";
    ScWindowType[ScWindowType["ContentEditor"] = 3] = "ContentEditor";
    ScWindowType[ScWindowType["Launchpad"] = 4] = "Launchpad";
    ScWindowType[ScWindowType["Edit"] = 5] = "Edit";
    ScWindowType[ScWindowType["Normal"] = 6] = "Normal";
    ScWindowType[ScWindowType["Preview"] = 7] = "Preview";
})(ScWindowType || (ScWindowType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SnapShotFlavor.js
var SnapShotFlavor;
(function (SnapShotFlavor) {
    SnapShotFlavor[SnapShotFlavor["Unknown"] = 0] = "Unknown";
    SnapShotFlavor[SnapShotFlavor["Autosave"] = 1] = "Autosave";
    SnapShotFlavor[SnapShotFlavor["Favorite"] = 2] = "Favorite";
    SnapShotFlavor[SnapShotFlavor["Manual"] = 3] = "Manual";
})(SnapShotFlavor || (SnapShotFlavor = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/StaticHelpers.js






class StaticHelpers_StaticHelpers {
    static MinToMs(minutes) {
        return minutes * 60 * 1000;
    }
    static FlavorAsString(flavor) {
        return 'Flavor.' + SnapShotFlavor[flavor] + '(' + flavor + ')';
    }
    static SettingKeyAsString(settingKey) {
        let toReturn = '';
        try {
            toReturn = 'SettingKey.' + _3xxx_SettingKey_SettingKey[settingKey] + '(' + settingKey + ')';
        }
        catch (err) {
            toReturn = err;
        }
        return toReturn;
    }
    static ScWindowTypeFriendly(windowType) {
        return ScWindowType[windowType];
    }
    static MakeFriendlyDate(date) {
        var toReturn = '';
        var workingDate = new Date(date);
        if (workingDate) {
            var month = StaticHelpers_StaticHelpers.BufferString((workingDate.getMonth() + 1).toString(), 2, BufferChar.Zero, BufferDirection.left);
            var day = StaticHelpers_StaticHelpers.BufferString(workingDate.getDate().toString(), 2, BufferChar.Zero, BufferDirection.left);
            var min = StaticHelpers_StaticHelpers.BufferString(workingDate.getMinutes().toString(), 2, BufferChar.Zero, BufferDirection.left);
            var hoursRaw = workingDate.getHours();
            var hourClean = hoursRaw ? hoursRaw : 12;
            var hourCleanStr = StaticHelpers_StaticHelpers.BufferString(hourClean.toString(), 2, BufferChar.Zero, BufferDirection.left);
            toReturn = month + '.' + day + ' ' + hourCleanStr + ':' + min;
        }
        else {
            toReturn = '{error}';
            throw (this.MakeFriendlyDate.name, 'no date provided');
        }
        return toReturn;
    }
    static getBuffChar(buffCharEnum) {
        var buffChar = ' ';
        if (buffCharEnum === BufferChar.space) {
            buffChar = ' ';
        }
        else if (buffCharEnum === BufferChar.Nbsp) {
            buffChar = '&nbsp;';
        }
        else if (buffCharEnum === BufferChar.Period) {
            buffChar = '.';
        }
        else if (buffCharEnum === BufferChar.Zero) {
            buffChar = '0';
        }
        return buffChar;
    }
    static BufferString(str, desiredLength, buffCharEnum, direction) {
        var toReturn = str;
        var buffChar = this.getBuffChar(buffCharEnum);
        if (toReturn.length > desiredLength) {
            if (desiredLength > 6) {
                toReturn = toReturn.substring(0, desiredLength - 3) + '...';
            }
            else {
                toReturn = toReturn.substring(0, desiredLength);
            }
        }
        if (toReturn.length < desiredLength) {
            var bufferCharNeeded = desiredLength - toReturn.length;
            for (var idx = 0; idx < bufferCharNeeded; idx++) {
                if (direction === BufferDirection.left) {
                    toReturn = buffChar + toReturn;
                }
                else {
                    toReturn = toReturn + buffChar;
                }
            }
        }
        return toReturn;
    }
    static MsgFlagAsString(msg) {
        var toReturn = "{error}";
        if (msg) {
            try {
                toReturn = 'MsgFlag.' + MsgFlag[msg] + '(' + msg + ')';
            }
            catch (e) {
            }
        }
        return 'flag: ' + toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/SharedConst.js
let SharedConst = (() => {
    class SharedConst {
    }
    SharedConst.Const = {
        Debug: {
            ForceLoggingEnabled: false
        },
        IterHelper: {
            GrowthPerIteration: 0.5,
            MaxCount: {
                Default: 10,
                OverridePublishing: 15,
            },
            Timeouts: {
                Max: 10000,
                Default: 100,
            },
        },
        ObjDiscriminator: {
            DataOneTreeNode: 'IDataOneTreeNode',
        },
        Settings: {
            Defaults: {
                EnableLogging: false,
                LogToStorage: false,
                UseCompactCss: false,
            }
        },
        Regex: {
            ContentEditor: /Content.*?Editor/ig,
            CleanGuid: /{|-|}/ig,
            NbSp: /&nbsp;/ig,
            QueryStrSeparatorQuest: /\?/gi,
            PageType: {
                Desktop: /.*default.aspx/ig,
                Edit: /sc_itemid=.*sc_mode=edit/ig,
                Normal: /sc_itemid=.*sc_mode=normal/ig,
                Preview: /sc_itemid=.*sc_mode=preview/ig,
            },
        },
        UrlSuffix: {
            Desktop: '/sitecore/shell/default.aspx',
            Login: '/sitecore/login',
            LaunchPad: '/client/applications/launchpad',
            CE: '/sitecore/shell/Applications/Content Editor.aspx?sc_bw=1',
            None: '/',
            AboutBlank: 'about:blank',
        },
    };
    return SharedConst;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/GuidData.js

let GuidData_GuidData = (() => {
    class GuidData {
        constructor(raw = null) {
            this.StorageType = 'GuidAsString';
            this.StorageType = 'GuidAsString';
            this.Type = 'Guid';
            if (!raw) {
                this.Raw = GuidData.ConstEmptyGuid;
            }
            else {
                if (GuidData.IsValidGuidStr(raw)) {
                    this.Raw = this.GuidStrWithDashes(raw);
                }
                else {
                    throw ('Invalid GUID string: ' + raw);
                }
            }
        }
        GuidStrWithDashes(val) {
            let toReturn = '';
            let withoutDashes = val.replace(/-/g, '');
            var parts = [];
            if (withoutDashes.length !== 32) {
                throw (this.GuidStrWithDashes.name + ' - Wrong count wanted: ' + 32 + " got: " + withoutDashes.length + ' (without dashes) ' + withoutDashes);
            }
            parts.push(withoutDashes.slice(0, 8));
            parts.push(withoutDashes.slice(8, 12));
            parts.push(withoutDashes.slice(12, 16));
            parts.push(withoutDashes.slice(16, 20));
            parts.push(withoutDashes.slice(20, 32));
            toReturn = parts.join('-');
            return toReturn;
        }
        AsBracedGuid() {
            return '{' + this.Raw + "}";
        }
        static GetEmptyGuid() {
            return new GuidData();
        }
        FormatJustNumbers(str) {
            return str.replace(SharedConst.Const.Regex.CleanGuid, '');
        }
        static IsValidGuidStr(candidateStr) {
            let toReturn = false;
            let regexGuid = '^[\}]?[0-9a-f]{8}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{12}[\}]?$';
            let pattern = new RegExp(regexGuid, 'i');
            toReturn = pattern.test(candidateStr);
            return toReturn;
        }
    }
    GuidData.ConstEmptyGuid = '00000000-0000-0000-0000-000000000000';
    return GuidData;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LogWriterBuffer.js
class LogWriterBuffer {
    constructor() {
        this.LogPreInitBuffer = [];
        this.bufferPrefix = '* ';
    }
    WriteText(text) {
        this.LogPreInitBuffer.push(this.bufferPrefix + text);
    }
    GetBuffer() {
        let iterCheckMax = 1000;
        let toReturn = [];
        while (this.LogPreInitBuffer.length > 0 && iterCheckMax > 0) {
            iterCheckMax--;
            toReturn.push(this.LogPreInitBuffer.shift());
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LoggerAgent.js
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class LoggerAgent_LoggerAgent {
    constructor() {
        this.ErrorStack = [];
        this.__debugTextChangedCallbacks = [];
        this.__allLogWriters = [];
        this.BufferWriter = new LogWriterBuffer();
        this.AddWriter(this.BufferWriter);
        this.__callDepth = -1;
        this.LogTimeStamp();
    }
    LogTimeStamp() {
        var dateobj = new Date();
        var result = this.pad(dateobj.getDate()) + "/" + this.pad(dateobj.getMonth() + 1) + "/" + dateobj.getFullYear() + " " + this.pad(dateobj.getHours()) + ":" + this.pad(dateobj.getMinutes());
        this.LogVal('TimeStamp', result);
    }
    pad(n) { return n < 10 ? "0" + n : n; }
    FlushBuffer() {
        this.RemoveWriter(this.BufferWriter);
        this.LogVal('TimeStamp B', Date.now());
        let bufferAr = this.BufferWriter.GetBuffer();
        for (var idx = 0; idx < bufferAr.length; idx++) {
            this.Log(bufferAr[idx]);
        }
    }
    RemoveWriter(BufferWriter) {
        for (var idx = 0; idx < this.__allLogWriters.length; idx++) {
            let candidate = this.__allLogWriters[idx];
            if (candidate == BufferWriter) {
                this.__allLogWriters.splice(idx, 1);
                break;
            }
        }
    }
    AddWriter(writter) {
        this.HasWriters = true;
        this.__allLogWriters.push(writter);
    }
    SectionMarker(sectionTag) {
        this.Log("");
        this.Log("======================= " + sectionTag + " =======================");
        this.Log("");
    }
    ThrowIfNullOrUndefined(title, subject) {
        if (!this.IsNotNullOrUndefinedBool(title, subject)) {
            throw 'Failed';
        }
    }
    IsNotNullOrUndefinedBool(title, subject) {
        var toReturn = false;
        if (subject) {
            if ((typeof subject) === 'undefined') {
                this.LogVal(title + ' Is Not Undefined', '!!! false !!!');
            }
            else {
                this.LogVal(title + ' Is Not Null', 'true');
                toReturn = true;
            }
        }
        else {
            this.LogVal(title + ' Is Not Null', '!!! false !!!');
        }
        return toReturn;
    }
    HndlrClearDebugText(self, verify = false) {
        this.FuncStart(this.HndlrClearDebugText.name);
        var proceed = true;
        if (verify) {
            proceed = confirm('Clear Debug TextArea ?');
        }
        if (proceed) {
            var newText = '--- Debug Text Reset ---';
            self.__triggerAllDebugTextChangedCallbacks({
                NewText: newText,
                Append: false
            });
        }
        this.FuncEnd(this.HndlrClearDebugText.name);
    }
    MarkerA() {
        this.__markerRaw('A');
    }
    MarkerB() {
        this.__markerRaw('B');
    }
    MarkerC() {
        this.__markerRaw('C');
    }
    MarkerD() {
        this.__markerRaw('D');
    }
    MarkerE() { this.__markerRaw('E'); }
    MarkerF() { this.__markerRaw('F'); }
    __markerRaw(marker) {
        this.Log('Marker ' + marker);
    }
    LogAsJsonPretty(texValName, jsonObj) {
        this.LogVal(texValName, JSON.stringify(jsonObj, null, 1));
    }
    LogVal(textValName, textVal) {
        if (typeof textVal === 'undefined') {
            textVal = '{undefined}';
        }
        else if (textVal === null) {
            textVal = '{null}';
        }
        else {
            var asGuid = textVal;
            if (typeof asGuid === typeof GuidData_GuidData) {
                textVal = asGuid.Raw;
            }
        }
        textVal = textVal.toString();
        textValName = StaticHelpers_StaticHelpers.BufferString(textValName.toString(), 50, BufferChar.space, BufferDirection.right);
        const debugPrefix = '  ~~~  ';
        this.Log(debugPrefix + textValName + ' : ' + textVal);
    }
    Log(text, optionalValue = '', hasPrefix = false) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.HasWriters) {
                var indent = '  ';
                for (var idx = 0; idx < this.__callDepth; idx++) {
                    text = indent + text;
                }
                var prefixLength = 3;
                if (!hasPrefix) {
                    for (var idx = 0; idx < prefixLength; idx++) {
                        text = ' ' + text;
                    }
                }
                this.__triggerAllDebugTextChangedCallbacks({
                    NewText: text,
                    Append: true
                });
                this.__WriteToAllWriters(text);
            }
        });
    }
    __WriteToAllWriters(text) {
        for (var idx = 0; idx < this.__allLogWriters.length; idx++) {
            var oneWriter = this.__allLogWriters[idx];
            oneWriter.WriteText(text);
        }
    }
    __triggerAllDebugTextChangedCallbacks(data) {
        for (var idx = 0; idx < this.__debugTextChangedCallbacks.length; idx++) {
            var oneCallback = this.__debugTextChangedCallbacks[idx];
            oneCallback.Func(oneCallback.Caller, data);
        }
    }
    CtorName(ctorName) {
        this.Log('Constructor: ' + ctorName);
    }
    FuncStart(textOrFunc, optionalValue) {
        textOrFunc = 's' + ' ' + this.__callDepth + ') ' + textOrFunc;
        if (!optionalValue) {
            optionalValue = '';
        }
        else {
            optionalValue = optionalValue.toString();
        }
        if (optionalValue.length > 0) {
            textOrFunc = textOrFunc + ' : ' + optionalValue;
        }
        this.Log(textOrFunc, '', true);
        this.__callDepth++;
        if (this.__callDepth > 10) {
            this.__callDepth = 10;
        }
    }
    InstantiateStart(text) {
        this.FuncStart("[Instantiate] " + text);
    }
    InstantiateEnd(text) {
        this.FuncEnd("[Instantiate] " + text);
    }
    FuncEnd(text, optionalValueInput) {
        this.__callDepth--;
        if (this.__callDepth < 0) {
            this.__callDepth = 0;
        }
        text = 'e' + ' ' + this.__callDepth + ') ' + text;
        if (!optionalValueInput) {
            optionalValueInput = '';
        }
        var optionalValue = optionalValueInput.toString();
        if (optionalValue.length > 0) {
            text = text + ' : ' + optionalValue;
        }
        this.Log(text, optionalValue, true);
    }
    ErrorAndThrow(container, text) {
        this.ErrorAndContinue(container, text);
        throw container + " " + text;
    }
    ErrorAndContinue(container, text) {
        if (!container) {
            container = 'unknown';
        }
        if (!text) {
            text = 'unknown';
        }
        this.ErrorStack.push({
            ContainerFunc: container,
            ErrorString: text
        });
        this.Log('');
        this.Log('\t\t** ERROR ** ' + container);
        this.Log('');
        this.Log('\t\t  ' + text);
        this.Log('');
        this.Log('\t\t** ERROR ** ' + container);
        this.Log('');
    }
    WarningAndContinue(container, text) {
        if (!container) {
            container = 'unknown';
        }
        if (!text) {
            text = 'unknown';
        }
        this.Log('');
        this.Log('\t\t** WARNING ** ' + container + ' ' + text);
        this.Log('');
    }
    NotNullCheck(title, value) {
        if (typeof value === 'undefined') {
            this.LogVal(title, 'Is Undefined');
        }
        else if (!value) {
            this.LogVal(title, 'Is Null');
        }
        else {
            this.LogVal(title, 'Is Not Null');
        }
    }
    IsNullOrUndefined(subject) {
        var toReturn = '{unknown}';
        if (subject) {
            if ((typeof subject) === 'undefined') {
                toReturn = 'Is Undefined';
            }
            else {
                toReturn = 'Not Null';
            }
        }
        else {
            toReturn = 'Is Null';
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LoggerConsoleWriter.js
class LoggerConsoleWriter {
    WriteText(text) {
        console.log(text);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LoggerStorageWriter.js
var LoggerStorageWriter_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class LoggerStorageWriter {
    constructor() {
        this.CurrentStorageLogKey = '0';
        this.LogToStoragePrefix = 'Hindsite.Log.';
        this.StorageLogCombined = "";
    }
    WriteText(text) {
    }
    SetLogToStorageKey(logToStorageIndex) {
        this.CurrentStorageLogKey = this.LogToStoragePrefix + logToStorageIndex;
    }
    WriteLogToStorage(logMessage) {
        return LoggerStorageWriter_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => LoggerStorageWriter_awaiter(this, void 0, void 0, function* () {
                this.StorageLogCombined += "|||" + JSON.stringify(logMessage);
                if (this.CurrentStorageLogKey) {
                    window.localStorage.setItem(this.CurrentStorageLogKey, this.StorageLogCombined);
                }
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/RepositoryAgent/RepositoryAgent.js
class RepositoryAgent {
    constructor(loggerAgent) {
        this.Logger = loggerAgent;
    }
    InitRepositoryAgent() {
        this.Logger.FuncStart(RepositoryAgent.name, this.InitRepositoryAgent.name);
        this.Logger.FuncEnd(RepositoryAgent.name, this.InitRepositoryAgent.name);
    }
    GetBulkLocalStorageByKeyPrefix(targetPrefix) {
        return new Promise((resolve, reject) => {
            var toReturn = [];
            try {
                var storageLength = window.localStorage.length;
                for (var idx = 0; idx < storageLength; idx++) {
                    var candidate = {
                        data: '',
                        key: '',
                    };
                    candidate.key = window.localStorage.key(idx);
                    if (candidate.key.startsWith(targetPrefix)) {
                        candidate.data = window.localStorage.getItem(candidate.key);
                        if (typeof candidate != 'undefined' && typeof candidate.data != 'undefined' && candidate != null && candidate.data != null) {
                            toReturn.push(candidate);
                        }
                    }
                }
                resolve(toReturn);
            }
            catch (ex) {
                reject(ex);
            }
        });
    }
    ReadDataOfKey(targetKey) {
        this.Logger.FuncStart(this.ReadDataOfKey.name);
        let storageValue = null;
        let toReturn = '';
        this.Logger.LogVal('target key ', targetKey);
        storageValue = window.localStorage.getItem(targetKey);
        if (storageValue != null) {
            toReturn = storageValue.toString();
        }
        else {
            this.Logger.Log(this.ReadDataOfKey.name, "No value returned from storage");
        }
        this.Logger.FuncEnd(this.ReadDataOfKey.name);
        return toReturn;
    }
    WriteByKey(storageKey, jsonString) {
        this.Logger.FuncStart(this.WriteByKey.name);
        window.localStorage.setItem(storageKey, jsonString);
        this.Logger.FuncEnd(this.WriteByKey.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/OneGenericSetting.js
class OneGenericSetting {
    constructor(settingKey, dataType, valueAsObj, uiSelector, defaultValue, settingFlavor, friendly, enabled, hasUi = true) {
        this.SettingKey = settingKey;
        this.DataType = dataType;
        this.ValueAsObj = valueAsObj;
        this.UiSelector = uiSelector;
        this.DefaultValue = defaultValue;
        this.SettingFlavor = settingFlavor;
        this.Friendly = friendly;
        this.HasUi = hasUi;
        this.Enabled = enabled;
    }
    ValueAsInt() {
        var toReturn = Number.MIN_SAFE_INTEGER;
        if (this.ValueAsObj !== undefined && this.ValueAsObj !== null) {
            toReturn = parseInt(this.ValueAsObj.toString());
        }
        return toReturn;
    }
    ValueAsBool() {
        let toReturn = this.DefaultValue;
        if (this.ValueAsObj !== undefined && this.ValueAsObj !== null) {
            toReturn = this.ValueAsObj;
        }
        else {
            toReturn = this.DefaultValue;
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SettingType.js
var SettingType;
(function (SettingType) {
    SettingType[SettingType["Unknown"] = 0] = "Unknown";
    SettingType[SettingType["BoolCheckBox"] = 1] = "BoolCheckBox";
    SettingType[SettingType["Accordion"] = 2] = "Accordion";
    SettingType[SettingType["Number"] = 3] = "Number";
})(SettingType || (SettingType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SettingFlavor.js
var SettingFlavor;
(function (SettingFlavor) {
    SettingFlavor[SettingFlavor["unknown"] = 0] = "unknown";
    SettingFlavor[SettingFlavor["PopUp"] = 1] = "PopUp";
    SettingFlavor[SettingFlavor["ContentAndPopUpStoredInPopUp"] = 2] = "ContentAndPopUpStoredInPopUp";
    SettingFlavor[SettingFlavor["ContentAndPopUpStoredInEach"] = 3] = "ContentAndPopUpStoredInEach";
    SettingFlavor[SettingFlavor["ContentOnly"] = 4] = "ContentOnly";
})(SettingFlavor || (SettingFlavor = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Classes/PopConst.js
let PopConst = (() => {
    class PopConst {
    }
    PopConst.Const = {
        ClassNames: {
            HS: {
                Collapsed: 'in',
            },
        },
        ElemId: {
            InputNickname: 'id-input-nickname',
            HindSiteParentInfo: 'spanParentInfo',
            HS: {
                SelectHeaderAuto: 'sel-header-auto',
                SelectHeaderAutoTitle: 'sel-header-auto-title',
                SelectHeaderFavorite: 'sel-header-favorite',
                SelectHeaderFavoriteTitle: 'sel-header-favorite-title',
                SelectHeaderManual: 'sel-header-manual',
                SelectHeaderManualTitle: 'sel-header-manual-title',
                TabId: 'orig-win-id',
            }
        },
        Numbers: {
            MinMenuHeight: 600,
            MinMenuWidth: 600,
            MaxAutoSaveCount: 10,
            AutoSaveIntervalMin: 5,
        },
        Notify: {
            Default: 'Complete',
            PublishComplete: 'Publishing Complete',
        },
        Selector: {
            Btn: {
                WindowClose: '[id=close-window]',
            },
            Legend: {
                LgndBrowserState: '[id=lgnd-browser-state]',
                LgndContentState: '[id=lgnd-content-state]',
                LgndForeSite: '[id=lgnd-fore-site]',
                LgndHindSite: '[id=lgnd-hind-site]',
                LgndMessages: '[id=lgnd-messages]',
                LgndPopUpLog: '[id=lgnd-pop-up-log]',
                LgndPopUpState: '[id=lgnd-pop-up-state]',
                LgndSettings: '[id=lgnd-settings]',
            },
            HS: {
                AdminB: '[id=AdminB]',
                AutoSnapshotBeforeWindowChange: '[id=id-settings-auto-snapshot-on-window-change]',
                BigRed: '[id=BigRed]',
                BuildStamp: '[id=build-stamp]',
                CompactCE: '[id=CompactCE]',
                Desktop: '[id=Desktop]',
                DivOverlayModule: '[id=menu-overlay]',
                DivStateContent: '[id=feedback-div-state-content]',
                FeedbackBrowserState: '[id=feedback-div-browser-state]',
                FeedbackPopUpState: '[id=feedback-div-pop-up-state]',
                FeedbackContentState: '[id=feedback-div-state-content]',
                FeedbackLogElement: '[id=feedback-pop-up-log]',
                FeedbackMessages: '[id=feedback-messages]',
                FeedbackStorage: '[id=feedback-storage]',
                GoCE: '[id=CE]',
                HsCancel: '[id=Cancel]',
                HsRemoveFromStorage: '[id=RemoveOneFromLocalStorage]',
                HsRestoreWindowStateSameTab: '[id=id-restore-state-same-tab]',
                HsRestoreWindowStateNewTab: '[id=id-restore-state-new-tab]',
                iCBoxdSettingsAutoLogin: '[id=id-settings-auto-login]',
                IdFieldSetDebug: '[id=id-fieldset-debug]',
                EnableLogging: '[id=id-settings-show-log-data]',
                ToggleFavorite: '[id=id-toggle-favorite]',
                ModeEdit: '[id=sc-mode-edit]',
                ModeNorm: '[id=Norm]',
                ModePrev: '[id=Prev]',
                PrefAutoLogin: '[id=id-settings-auto-login]',
                PresentationDetails: '[id=PresentationDetails]',
                QuickPublish: '[id=QuickPublish]',
                SelStateSnapShot: '[id=selState]',
                SettingAutoSaveInterval: '[id=id-settings-auto-save-interval]',
                SettingAutoSaveMaxCount: '[id=id-settings-auto-save-max-count]',
                SettingDebugKeepDialogOpen: '[id=id-settings-debug-keep-dialog-open]',
                SettingAutoSaveSnapshotRetainDays: '[id=id-settings-auto-save-snap-shot-retain-days]',
                SettingAutoRenameCeTabButton: '[id=id-settings-auto-rename-ce-tab-button]',
                SettingNotUsed: '[id=id-settings-not-used]',
                SettingUseCompactCss: '[id=id-settings-use-compact]',
                TakeSnapshot: '[id=SaveWindowState]',
                UpdateNicknameB: '[id=id-btn-update-nickname]',
            },
        },
        Settings: {
            Defaults: {
                AutoSaveEnabled: false,
                DebugKeepDialogOpen: false,
                LgndBrowserState: false,
                LgndContentState: false,
                LgndForeSite: true,
                LgndHindSite: true,
                LgndMessages: false,
                LgndPopUpLog: false,
                LgndPopUpState: false,
                LgndSettings: false,
            }
        },
        Storage: {
            SettingsSuffix: 'todo',
            KeyGenericSettings: 'HindSite.' + 'GenericSettings',
            StorageLogKeyPrefix: 'HindSite.' + 'Log.',
            Defaults: {
                bool: {
                    AutoSaveEnabled: false,
                    AutoLogin: false,
                    DefaultDebugKeepDialogOpen: false,
                    AutoSnapshotBeforeWindowChange: false,
                }
            }
        },
        SnapShotFormat: {
            lenTimestamp: 13,
            lenNickname: 16,
            lenPageType: 7,
            lenPrefix: 6,
            lenShortId: 4,
            colSep: ' - ',
            lenCeCount: 3,
            lenActiveNode: 16,
            lenFavorite: 3,
        },
        Timeouts: {
            WaitBeforeRemovingCompleteFlag: 1500,
            AutoLoginCheckInterval: 3000,
        },
    };
    return PopConst;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/Enabled.js
var Enabled;
(function (Enabled) {
    Enabled[Enabled["Unknown"] = 0] = "Unknown";
    Enabled[Enabled["Enabled"] = 1] = "Enabled";
    Enabled[Enabled["Disabled"] = 2] = "Disabled";
})(Enabled || (Enabled = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/InjectConst.js
let ContentConst = (() => {
    class ContentConst {
    }
    ContentConst.Const = {
        MaxAutoToSaveCount: 10,
        DefaultMaxAutoSaveAgeDays: 7,
        DefaultAutoRenameCeTabButton: false,
        Iterations: {
            MaxSetHrefEffort: 10,
            MaxIterationSwitchBoard: 20,
        },
        Timeouts: {
            PostLoginBtnClick: 1000,
            SetHrefEffortWait: 1000,
            WaitBeforeRemovingCompleteFlagOnContent: 1500,
            AutoSaveIntervalMin: 1,
        },
        ElemId: {
            sc: {
                scLoginUserName: 'UserName',
                scLoginPassword: 'Password',
                SitecoreRootNodeId: 'Tree_Node_11111111111111111111111111111111',
                SitecoreRootGlyphId: 'Tree_Glyph_11111111111111111111111111111111',
                scLoginBtn: {
                    sc920: 'LogInBtn',
                    sc820: null
                },
            }
        },
        ClassNames: {
            ContentTreeNode: 'scContentTreeNode',
            SC: {
                scContentTreeNodeActive: 'scContentTreeNodeActive',
            }
        },
        Selector: {
            SC: {
                ContentTreeNodeGlyph: '.scContentTreeNodeGlyph',
                IdStartsWithTreeNode: '[id^=Tree_Node_]',
                IframeContent: {
                    sc820: null,
                    sc920: 'iframe[src*=Content]'
                },
                JqueryModalDialogsFrame: '[id=jqueryModalDialogsFrame]',
                ContentIframe0: '[id=scContentIframeId0]',
                NextButton: '[id=NextButton]',
                ContentIFrame1: '[id=scContentIframeId1]',
                Ok: '[id=OK]',
                Cancel: '[id=CancelButton]',
                MenuButtonPublish: '[id=B414550BADAF4542C9ADF44BED5FA6CB3E_menu_button]',
                MenuDropDownPublishItem: '[id=B414550BADAF4542C9ADF44BED5FA6CB3E_menu_98719A90225A4802A0625D3967E4DD47]',
                NavPublishStrip: '[id*=_Nav_PublishStrip]',
                StartMenuLeftOption: '.scStartMenuLeftOption',
                Publish: {
                    TheItemHasBeenPublished: '[id=LastPage]:not([style*=\'display:none\'])',
                    SettingsHidden: '[id=Settings][style*=\'display: none\']',
                    PublishingHidden: '[id=Publishing][style*=\'display: none\']',
                },
                LoginBtn: {
                    sc920: null,
                    sc820: 'input.btn',
                },
                scStartButton: {
                    sc920: '[id=StartButton]',
                    sc820: '[id=startButton]'
                },
                Desktop: {
                    DtStartBar: '[id=Startbar]',
                    ContentTreeHolder: '[id=ContentTreeHolder]',
                },
            },
        },
        Storage: {
            SettingsSuffix: '.Settings',
            ShowDebugData: false,
            SnapShotPrefix: 'WindowSnapShot.',
            WindowRoot: 'HindSite.',
        },
        Numbers: {
            Desktop: {
                MaxToolBarNameChars: 13
            }
        },
        MaxIter: 100,
        MaxNullOrUndefinedIter: 100,
        prop: {
            AllTreeData: 'AllTreeData',
        },
        Names: {
            SC: {
                TreeGlyphPrefix: 'Tree_Glyph_',
                TreeNodePrefix: 'Tree_Node_',
                TreeExpandedPng: {
                    sc920: 'treemenu_expanded.png',
                    sc820: 'todo'
                }
            },
            Desktop: {
                StartBarApplicationPrefix: 'startbar_application_',
            },
            PopUp: 'PopUp',
            PopUpStyles: 'PopUpStyles',
            TreeMenuExpandedPng: 'treemenu_expanded.png',
            TreeMenuCollapsedPng: 'treemenu_collapsed.png',
            scDefaultAdminPassword: 'b',
            scDefaultAdminUserName: 'admin',
        }
    };
    return ContentConst;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/ConstAllSettings.js








class ConstAllSettings_ConstAllSettings {
    constructor() {
        this.AllSettings = [
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.LastUsedLogToStorageKey, SettingType.Number, 0, null, 0, SettingFlavor.ContentAndPopUpStoredInEach, 'Rolling Prefix key for log to storage', Enabled.Enabled, false),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.EnableLogging, SettingType.BoolCheckBox, true, PopConst.Const.Selector.HS.EnableLogging, SharedConst.Const.Settings.Defaults.EnableLogging, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Enable Logging', Enabled.Enabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.UseCompactCss, SettingType.BoolCheckBox, false, PopConst.Const.Selector.HS.SettingUseCompactCss, SharedConst.Const.Settings.Defaults.UseCompactCss, SettingFlavor.ContentOnly, 'Use Compact CSS', Enabled.Disabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.AutoSnapshotBeforeWindowChange, SettingType.BoolCheckBox, null, PopConst.Const.Selector.HS.AutoSnapshotBeforeWindowChange, PopConst.Const.Storage.Defaults.bool.AutoSnapshotBeforeWindowChange, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Save Snapshot on HindSite Window Change', Enabled.Disabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.AutoLogin, SettingType.BoolCheckBox, null, PopConst.Const.Selector.HS.iCBoxdSettingsAutoLogin, PopConst.Const.Storage.Defaults.bool.AutoLogin, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Login', Enabled.Disabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.LgndPopUpLog, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndPopUpLog, PopConst.Const.Settings.Defaults.LgndPopUpLog, SettingFlavor.PopUp, 'Pop Up Log', Enabled.Enabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.LgndForeSite, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndForeSite, PopConst.Const.Settings.Defaults.LgndForeSite, SettingFlavor.PopUp, 'Fore&bull;Site', Enabled.Enabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.LgndHindSite, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndHindSite, PopConst.Const.Settings.Defaults.LgndHindSite, SettingFlavor.PopUp, 'Hind&bull;Site', Enabled.Enabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.LgndSettings, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndSettings, PopConst.Const.Settings.Defaults.LgndSettings, SettingFlavor.PopUp, 'Settings', Enabled.Enabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.LgndMessages, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndMessages, PopConst.Const.Settings.Defaults.LgndMessages, SettingFlavor.PopUp, 'Messages', Enabled.Enabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.LgndPopUpState, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndPopUpState, PopConst.Const.Settings.Defaults.LgndPopUpState, SettingFlavor.PopUp, 'Pop Up State', Enabled.Enabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.LgndContentState, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndContentState, PopConst.Const.Settings.Defaults.LgndContentState, SettingFlavor.PopUp, 'Content State', Enabled.Enabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.LgndBrowserState, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndBrowserState, PopConst.Const.Settings.Defaults.LgndBrowserState, SettingFlavor.PopUp, 'Browser State', Enabled.Enabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.MaxAutoSaveCount, SettingType.Number, null, PopConst.Const.Selector.HS.SettingAutoSaveMaxCount, PopConst.Const.Numbers.MaxAutoSaveCount, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Save Max Count', Enabled.Disabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.AutoSaveIntervalMin, SettingType.Number, null, PopConst.Const.Selector.HS.SettingAutoSaveInterval, PopConst.Const.Numbers.AutoSaveIntervalMin, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Save Interval (Min) - 0 to disable', Enabled.Enabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.DebugKeepDialogOpen, SettingType.BoolCheckBox, null, PopConst.Const.Selector.HS.SettingDebugKeepDialogOpen, PopConst.Const.Settings.Defaults.DebugKeepDialogOpen, SettingFlavor.PopUp, '(Debug) Keep Dialog Open', Enabled.Enabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.AutoSaveRetainDays, SettingType.Number, null, PopConst.Const.Selector.HS.SettingAutoSaveSnapshotRetainDays, ContentConst.Const.DefaultMaxAutoSaveAgeDays, SettingFlavor.ContentOnly, 'Days to Retain Auto Snap Shots', Enabled.Enabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.AutoRenameCeButton, SettingType.BoolCheckBox, false, PopConst.Const.Selector.HS.SettingAutoRenameCeTabButton, ContentConst.Const.DefaultAutoRenameCeTabButton, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto rename Content Editor tab button to match active node', Enabled.Enabled)
        ];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/SettingsAgent.js


class SettingsAgent_SettingsAgent {
    constructor(logger, repoAgent) {
        this.SettingsAr = [];
        this.Logger = logger;
        this.RepoAgent = repoAgent;
    }
    UpdateSettingsFromPopUpMsg(newSettings) {
        this.Logger.FuncStart(this.UpdateSettingsFromPopUpMsg.name);
        if (newSettings) {
            for (var idx = 0; idx < newSettings.length; idx++) {
                let oneSetting = newSettings[idx];
                this.SetByKey(oneSetting.SettingKey, oneSetting.ValueAsObj);
            }
        }
        this.Logger.FuncEnd(this.UpdateSettingsFromPopUpMsg.name);
    }
    InitSettingsAgent(allDefaultSettings) {
        this.Logger.FuncStart(this.InitSettingsAgent.name, allDefaultSettings.length);
        this.SettingsAr = allDefaultSettings;
        let settingsFromStorage = this.ReadGenericSettingsFromStorage();
        this.UpdateSettingValuesFromStorage(settingsFromStorage);
        this.Logger.FuncEnd(this.InitSettingsAgent.name);
    }
    GetAllSettings() {
        return this.SettingsAr;
    }
    ReadGenericSettingsFromStorage() {
        this.Logger.FuncStart(this.ReadGenericSettingsFromStorage.name);
        let toReturn = [];
        let storedValue = this.RepoAgent.ReadDataOfKey(PopConst.Const.Storage.KeyGenericSettings);
        if (storedValue) {
            toReturn = JSON.parse(storedValue.toString());
        }
        else {
            toReturn = [];
        }
        this.Logger.FuncEnd(this.ReadGenericSettingsFromStorage.name);
        return toReturn;
    }
    LogAllSettings() {
        this.Logger.LogAsJsonPretty('this.SettingsAr', this.SettingsAr);
    }
    UpdateSettingValuesFromStorage(settingsFromStorage) {
        this.Logger.FuncStart(this.UpdateSettingValuesFromStorage.name);
        try {
            for (var idx = 0; idx < settingsFromStorage.length; idx++) {
                let storageSetting = settingsFromStorage[idx];
                let matchingSetting = this.GetByKey(storageSetting.SettingKey);
                if (matchingSetting) {
                    matchingSetting.ValueAsObj = storageSetting.ValueAsObj;
                }
                else {
                    this.Logger.ErrorAndContinue(this.UpdateSettingValuesFromStorage.name, 'matching setting not found ' + StaticHelpers_StaticHelpers.SettingKeyAsString(storageSetting.SettingKey));
                }
            }
        }
        catch (err) {
            this.Logger.ErrorAndThrow(this.UpdateSettingValuesFromStorage.name, err);
        }
        this.Logger.FuncEnd(this.UpdateSettingValuesFromStorage.name);
    }
    GetSettingsByFlavor(targetFlavors) {
        let toReturn = [];
        for (var idx = 0; idx < this.SettingsAr.length; idx++) {
            let candidate = this.SettingsAr[idx];
            if (targetFlavors.indexOf(candidate.SettingFlavor) > -1) {
                toReturn.push(candidate);
            }
        }
        return toReturn;
    }
    CheckBoxSettingChanged(SettingKey, valueAsObj) {
        this.SetByKey(SettingKey, valueAsObj);
    }
    NumberSettingChanged(SettingKey, valueAsNumber) {
        this.Logger.Log(StaticHelpers_StaticHelpers.SettingKeyAsString(SettingKey));
        this.Logger.LogVal('valueAsNumber', valueAsNumber.toString());
        this.SetByKey(SettingKey, valueAsNumber);
    }
    GetByKey(needleSettingKey) {
        this.Logger.FuncStart(this.GetByKey.name, StaticHelpers_StaticHelpers.SettingKeyAsString(needleSettingKey));
        var toReturn = null;
        for (var idx = 0; idx < this.SettingsAr.length; idx++) {
            let candidate = this.SettingsAr[idx];
            if (candidate.SettingKey === needleSettingKey) {
                toReturn = candidate;
                break;
            }
        }
        if (!toReturn) {
            this.Logger.ErrorAndContinue(this.NumberSettingChanged.name, 'Setting not found ' + StaticHelpers_StaticHelpers.SettingKeyAsString(needleSettingKey));
        }
        this.Logger.FuncEnd(this.GetByKey.name, toReturn ? toReturn.ValueAsObj : 'null');
        return toReturn;
    }
    SetByKey(settingKey, value) {
        this.Logger.FuncStart(this.SetByKey.name, StaticHelpers_StaticHelpers.SettingKeyAsString(settingKey));
        this.Logger.LogAsJsonPretty('value', value);
        let foundSetting = this.GetByKey(settingKey);
        if (foundSetting) {
            foundSetting.ValueAsObj = value;
            this.WriteAllSettingValuesToStorage();
        }
        else {
            this.Logger.ErrorAndThrow(this.SetByKey.name, 'setting match not found');
        }
        this.Logger.FuncEnd(this.SetByKey.name, StaticHelpers_StaticHelpers.SettingKeyAsString(settingKey));
    }
    WriteAllSettingValuesToStorage() {
        this.Logger.FuncStart(this.WriteAllSettingValuesToStorage.name);
        let settingValues = [];
        for (var udx = 0; udx < this.SettingsAr.length; udx++) {
            if (this.SettingsAr[udx].ValueAsObj !== null) {
                settingValues.push({
                    SettingKey: this.SettingsAr[udx].SettingKey,
                    ValueAsObj: this.SettingsAr[udx].ValueAsObj,
                    SettingKeyFriendly: StaticHelpers_StaticHelpers.SettingKeyAsString(this.SettingsAr[udx].SettingKey)
                });
            }
        }
        this.RepoAgent.WriteByKey(PopConst.Const.Storage.KeyGenericSettings, JSON.stringify(settingValues));
        this.Logger.FuncEnd(this.WriteAllSettingValuesToStorage.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/ToastAgent/ToastAgent.js
var ToastAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class ToastAgent {
    constructor(loggerAgent) {
        this.classSlideUp = 'slide-up';
        this.classSlideDown = 'slide-down';
        this.Logger = loggerAgent;
    }
    PopUpToastNotification(targetDoc = null, Message) {
        this.Logger.FuncStart(this.PopUpToastNotification.name);
        this.Logger.LogVal("Message", Message);
        if (targetDoc) {
            let bodyTag = targetDoc.ContentDoc.getElementsByTagName('body')[0];
            let toastContainer = this.CreateToastContainer(targetDoc);
            let flagSlider = this.CreateSliderDiv(targetDoc, Message);
            toastContainer.appendChild(flagSlider);
            var self = this;
            setTimeout(function () {
                return ToastAgent_awaiter(this, void 0, void 0, function* () {
                    flagSlider.classList.remove(self.classSlideDown);
                    flagSlider.classList.add(self.classSlideUp);
                    setTimeout(function () {
                        return ToastAgent_awaiter(this, void 0, void 0, function* () {
                            flagSlider.classList.remove(self.classSlideUp);
                            flagSlider.classList.add(self.classSlideDown);
                            setTimeout(function () {
                                toastContainer.remove();
                            }, 3000);
                        });
                    }, 3000);
                });
            }, 3000);
            bodyTag.appendChild(toastContainer);
        }
        this.Logger.FuncEnd(this.PopUpToastNotification.name);
    }
    CreateSliderDiv(targetDoc, Message) {
        let flagSlider = targetDoc.ContentDoc.createElement('div');
        flagSlider.classList.add('slider');
        flagSlider.classList.add(this.classSlideDown);
        flagSlider.innerHTML = '<div class="header">HindSite</div><div class="message">' + Message + '</div>';
        return flagSlider;
    }
    CreateToastContainer(targetDoc) {
        let flagContainer = targetDoc.ContentDoc.createElement('div');
        flagContainer.classList.add('toast');
        return flagContainer;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/QueryStrKey.js
var QueryStrKey;
(function (QueryStrKey) {
    QueryStrKey[QueryStrKey["hsTargetSs"] = 0] = "hsTargetSs";
    QueryStrKey[QueryStrKey["sc_mode"] = 1] = "sc_mode";
    QueryStrKey[QueryStrKey["sc_itemid"] = 2] = "sc_itemid";
    QueryStrKey[QueryStrKey["sc_lang"] = 3] = "sc_lang";
    QueryStrKey[QueryStrKey["sc_site"] = 4] = "sc_site";
})(QueryStrKey || (QueryStrKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/scMode.js
var scMode;
(function (scMode) {
    scMode[scMode["Unknown"] = 0] = "Unknown";
    scMode[scMode["Edit"] = 1] = "Edit";
    scMode[scMode["Preview"] = 2] = "Preview";
    scMode[scMode["Normal"] = 3] = "Normal";
})(scMode || (scMode = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/UrlAgent/GenericUrlAgent.js
var GenericUrlAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class GenericUrlAgent_GenericUrlAgent {
    constructor(logger) {
        this.Logger = logger;
    }
    GetUrlParts() {
        return this.UrlParts;
    }
    QueryStringHasKey(key) {
        let toReturn = false;
        if (key !== null) {
            let keyAsStr = QueryStrKey[key];
            if (keyAsStr) {
                toReturn = this.UrlParts && this.UrlParts.Parameters && this.UrlParts.Parameters.has(keyAsStr);
            }
        }
        return toReturn;
    }
    GetQueryStringValueByKey(key) {
        let toReturn = '';
        if (this.QueryStringHasKey(key)) {
            let keyAsStr = QueryStrKey[key];
            toReturn = this.UrlParts.Parameters.get(keyAsStr);
        }
        return toReturn;
    }
    SetParameterValueByKey(key, newValue) {
        if (this.UrlParts) {
            this.UrlParts.Parameters.set(QueryStrKey[key], newValue);
        }
        else {
            this.Logger.ErrorAndThrow(this.SetParameterValueByKey.name, 'No URLParts ' + QueryStrKey[key] + ' ' + newValue);
        }
    }
    SetFilePath(newFilePath) {
        this.UrlParts.FilePath = newFilePath;
    }
    InitGenericUrlAgent() {
        return new Promise((resolve, reject) => GenericUrlAgent_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart(this.InitGenericUrlAgent.name);
                if (browser.tabs) {
                    yield browser.tabs.query({ currentWindow: true, active: true })
                        .then((result) => {
                        this.Logger.LogAsJsonPretty('result', result);
                        let resultTab = result[0];
                        this.SetFromHref(resultTab.url);
                        resolve();
                    })
                        .catch((err) => reject(err));
                }
                else {
                    this.Logger.Log('Init from window.location.href');
                    let urlToUse = window.location.href;
                    this.SetFromHref(urlToUse);
                }
                resolve();
            }
            catch (ex) {
                reject(ex);
            }
            this.Logger.FuncEnd(this.InitGenericUrlAgent.name);
        }));
    }
    SetFromHref(href) {
        var parser = document.createElement('a');
        parser.href = href;
        this.UrlParts = {
            OriginalRaw: href,
            Protocol: parser.protocol,
            HostAndPort: parser.host,
            Parameters: new URLSearchParams(window.location.search),
            FilePath: parser.pathname,
            Anchor: parser.hash,
            HasError: false,
        };
    }
    BuildFullUrlFromParts() {
        let toReturn = {
            AbsUrl: '',
        };
        if (this.UrlParts) {
            if (this.UrlParts && !this.UrlParts.HasError) {
                toReturn.AbsUrl = this.UrlParts.Protocol + '//' + this.UrlParts.HostAndPort;
                if (this.UrlParts.FilePath.length > 0) {
                    toReturn.AbsUrl += this.UrlParts.FilePath;
                }
                if (this.UrlParts.Parameters) {
                    toReturn.AbsUrl += '?' + this.UrlParts.Parameters.toString();
                }
                if (this.UrlParts.Anchor.length > 0) {
                    toReturn.AbsUrl += '#' + this.UrlParts.Anchor;
                }
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.BuildFullUrlFromParts.name, 'Null UrlParts');
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/UrlAgent/ScUrlAgent.js
var ScUrlAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class ScUrlAgent_ScUrlAgent extends GenericUrlAgent_GenericUrlAgent {
    constructor(logger) {
        super(logger);
    }
    __urlTestAgainstRegex(regexPattern, url) {
        return new RegExp(regexPattern).test(url);
    }
    InitScUrlAgent() {
        const _super = Object.create(null, {
            InitGenericUrlAgent: { get: () => super.InitGenericUrlAgent }
        });
        return ScUrlAgent_awaiter(this, void 0, void 0, function* () {
            yield _super.InitGenericUrlAgent.call(this);
        });
    }
    GetFullUrl() {
        return this.BuildFullUrlFromParts();
    }
    GetScWindowType() {
        this.Logger.FuncStart(this.GetScWindowType.name);
        var toReturn = ScWindowType.Unknown;
        let testPath = this.BuildFullUrlFromParts();
        if (testPath) {
            this.Logger.LogVal('current url', testPath.AbsUrl);
            if (testPath.AbsUrl.indexOf(SharedConst.Const.UrlSuffix.Login) > -1) {
                toReturn = ScWindowType.LoginPage;
            }
            else if (new RegExp(SharedConst.Const.Regex.ContentEditor).test(testPath.AbsUrl)) {
                toReturn = ScWindowType.ContentEditor;
            }
            else if (testPath.AbsUrl.toLowerCase().indexOf(SharedConst.Const.UrlSuffix.LaunchPad.toLowerCase()) > -1) {
                toReturn = ScWindowType.Launchpad;
            }
            else if (this.__urlTestAgainstRegex(SharedConst.Const.Regex.PageType.Desktop, testPath.AbsUrl)) {
                toReturn = ScWindowType.Desktop;
            }
            else if (this.__urlTestAgainstRegex(SharedConst.Const.Regex.PageType.Preview, testPath.AbsUrl)) {
                toReturn = ScWindowType.Preview;
            }
            else if (this.__urlTestAgainstRegex(SharedConst.Const.Regex.PageType.Edit, testPath.AbsUrl)) {
                toReturn = ScWindowType.Edit;
            }
            else if (this.__urlTestAgainstRegex(SharedConst.Const.Regex.PageType.Normal, testPath.AbsUrl)) {
                toReturn = ScWindowType.Normal;
            }
            else {
                toReturn = ScWindowType.Unknown;
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.GetScWindowType.name, 'null url');
        }
        this.Logger.FuncEnd(this.GetScWindowType.name, ScWindowType[toReturn]);
        return toReturn;
    }
    BuildEditPrevNormUrl(newMode, contState) {
        this.UrlParts.Anchor = '';
        this.UrlParts.FilePath = '';
        this.SetParameterValueByKey(QueryStrKey.sc_itemid, contState.ActiveCe.ActiveNode.NodeId.AsBracedGuid());
        this.SetParameterValueByKey(QueryStrKey.sc_mode, scMode[newMode]);
        this.SetParameterValueByKey(QueryStrKey.sc_lang, 'en');
        this.SetParameterValueByKey(QueryStrKey.sc_site, 'website');
    }
    SetScMode(newMode) {
        if (this.UrlParts && newMode) {
            if (this.UrlParts && this.UrlParts)
                this.SetParameterValueByKey(QueryStrKey.sc_mode, scMode[newMode]);
        }
    }
    SetFilePathFromWindowType(windowType = null) {
        if (!windowType) {
            windowType = ScWindowType.Unknown;
        }
        switch (windowType) {
            case ScWindowType.ContentEditor:
                this.SetFilePath(SharedConst.Const.UrlSuffix.CE);
                break;
            case ScWindowType.Desktop:
                this.SetFilePath(SharedConst.Const.UrlSuffix.Desktop);
                break;
            case ScWindowType.Edit:
                this.SetFilePath(SharedConst.Const.UrlSuffix.None);
                break;
            case ScWindowType.Preview:
                this.SetFilePath(SharedConst.Const.UrlSuffix.None);
                break;
            case ScWindowType.Normal:
                this.SetFilePath(SharedConst.Const.UrlSuffix.None);
                break;
            default:
                this.SetFilePath('');
                this.Logger.ErrorAndThrow(this.SetFilePathFromWindowType.name, 'unaccounted for window type');
                break;
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Drones/RollingLogIdDrone/RollingLogIdDrone.js

class RollingLogIdDrone_RollingLogIdDrone {
    constructor(settingsAgent, loggerAgent) {
        this.maxKey = 5;
        this.minKey = 1;
        this.Logger = loggerAgent;
        this.Logger.InstantiateStart(RollingLogIdDrone_RollingLogIdDrone.name);
        this.SettingsAgent = settingsAgent;
        this.Logger.FuncEnd(RollingLogIdDrone_RollingLogIdDrone.name);
    }
    GetNextLogId() {
        let nextKeyInt = this.minKey;
        let nextKeyToReturn;
        var result = this.GetLastUsedLogId().ValueAsInt();
        nextKeyInt = result + 1;
        if (nextKeyInt > this.maxKey) {
            nextKeyInt = this.minKey;
        }
        this.SettingsAgent.SetByKey(_3xxx_SettingKey_SettingKey.LastUsedLogToStorageKey, nextKeyInt.toString());
        nextKeyToReturn = nextKeyInt.toString();
        return nextKeyToReturn;
    }
    GetLastUsedLogId() {
        var lastUsedLogIdSetting = this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.LastUsedLogToStorageKey);
        return lastUsedLogIdSetting;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/LoggableBase.js
class LoggableBase {
    constructor(logger) {
        this.Logger = logger;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Drones/IterationDrone/IterationDrone.js

class IterationDrone_IterationDrone {
    constructor(logger, nickname, maxIterations = null) {
        this.IsExhaustedMsg = 'Iteration helper exhausted';
        this.Logger = logger;
        if (!maxIterations) {
            maxIterations = SharedConst.Const.IterHelper.MaxCount.Default;
        }
        this.__maxIterations = maxIterations;
        this.__currentIteration = maxIterations;
        this.__timeout = SharedConst.Const.IterHelper.Timeouts.Default;
        this.__nickName = nickname;
        this.IsExhausted = false;
    }
    DecrementAndKeepGoing() {
        var toReturn = false;
        if (this.__currentIteration > 0) {
            this.__currentIteration -= 1;
            this.__timeout += this.__timeout * SharedConst.Const.IterHelper.GrowthPerIteration;
            if (this.__timeout > SharedConst.Const.IterHelper.Timeouts.Max) {
                this.__timeout = SharedConst.Const.IterHelper.Timeouts.Max;
            }
            this.Logger.Log('DecrementAndKeepGoing: ' + this.__nickName + ' ' + this.__currentIteration + ':' + this.__maxIterations + ' | timeout: ' + this.__timeout);
            toReturn = true;
        }
        else {
            this.IsExhausted = true;
            this.NotifyExhausted();
            toReturn = false;
        }
        return toReturn;
    }
    CurrentTimeout() {
        return this.__timeout;
    }
    NotifyExhausted() {
        this.Logger.Log('Iteration: ' + this.__nickName + ' counter exhausted ' + this.__currentIteration + ':' + this.__maxIterations);
    }
    WaitAndThen(timeoutFunction) {
        this.Logger.FuncStart(this.WaitAndThen.name, this.__nickName + ' ' + timeoutFunction.name);
        var self = this;
        setTimeout(timeoutFunction(), self.__timeout);
        this.Logger.FuncEnd(this.WaitAndThen.name, this.__nickName);
    }
    Wait() {
        if (!this.OperationCancelled) {
            return new Promise((resolve) => {
                setTimeout(resolve, this.__timeout);
            });
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/Guid.js

let Guid_Guid = (() => {
    class Guid {
        static NewRandomGuid() {
            let guidData = new GuidData_GuidData();
            let newGuid = new Guid();
            let randomStr = newGuid.GetRandomGuidString();
            let toReturn = new GuidData_GuidData(randomStr);
            return toReturn;
        }
        static AsShort(guidData) {
            var toReturn = '{error}';
            toReturn = guidData.Raw.substr(0, Guid.ShortGuidLength);
            return toReturn;
        }
        static WithoutDashes(guiddata) {
            let withoutDashes = guiddata.Raw.replace(/-/g, '');
            return withoutDashes;
        }
        static ParseGuid(val, throwOnError) {
            let newGuid = new GuidData_GuidData();
            return new GuidData_GuidData(val);
        }
        MakeNewRandomGuid() {
            let randomStr = this.GetRandomGuidString();
            return new GuidData_GuidData(randomStr);
        }
        GetRandomGuidString() {
            var toReturn;
            var temp = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
            toReturn = temp.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0;
                var v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
            return toReturn;
        }
        MakeGuidFromString(val, throwOnError) {
            let toReturn = new GuidData_GuidData(val);
            return toReturn;
        }
    }
    Guid.ShortGuidLength = 4;
    return Guid;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/PromiseResult.js
class PromiseResult {
    constructor(nickname, logger) {
        this.prefix = 'Promise Successful? -> ';
        this.Success = false;
        this.NickName = nickname;
        this.Log = logger;
    }
    WasSuccessful() {
        return this.Success;
    }
    MarkSuccessful() {
        this.Success = true;
        if (this.Log) {
            this.Log.LogVal(this.prefix + this.NickName, this.Success);
        }
        else {
            console.log('no logger success');
        }
    }
    MarkFailed(ex) {
        if (ex) {
            ex = ex.toString();
        }
        else {
            ex = '{no fail message}';
        }
        this.RejectReasons += ', ' + ex;
        this.Success = false;
        if (this.Log) {
            this.Log.ErrorAndThrow(this.prefix + this.NickName, this.Success + '  err: ' + ex);
        }
        else {
            console.log('no logger fail ' + ex);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/Data/IDataOneIframe.js
var IDataOneIframe_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class IDataOneIframe_IframeProxy extends LoggableBase {
    constructor(logger, iframeElem, nickName) {
        super(logger);
        this.Index = -1;
        this.IframeElem = null;
        this.Id = null;
        this.Nickname = null;
        this.IframeElem = iframeElem;
        this.Id = Guid_Guid.NewRandomGuid();
        this.Nickname = nickName;
    }
    WaitForReady() {
        return IDataOneIframe_awaiter(this, void 0, void 0, function* () {
            try {
                let recipeBasic = new RecipeBasics_RecipeBasics(this.Logger);
                yield recipeBasic.WaitForPageReadyHtmlIframeElement(this.IframeElem);
            }
            catch (err) {
                throw (this.WaitForReady.name + ' ' + err);
            }
        });
    }
    GetZindex() {
        let toReturn = -99;
        if (this.IframeElem && this.IframeElem.style && this.IframeElem.style.zIndex) {
            toReturn = parseInt(this.IframeElem.style.zIndex);
        }
        return toReturn;
    }
    GetContentDoc() {
        return new FactoryHelper_FactoryHelper(this.Logger).DataOneContentDocFactoryFromIframe(this);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/FactoryHelper.js



class FactoryHelper_FactoryHelper extends LoggableBase {
    DataOneContentDocFactoryFromIframe(dataOneIframe) {
        var toReturn = null;
        if (dataOneIframe) {
            toReturn =
                {
                    ContentDoc: dataOneIframe.IframeElem.contentDocument,
                    DocId: Guid_Guid.NewRandomGuid(),
                    Nickname: dataOneIframe.Nickname + ' - content doc'
                };
        }
        else {
            this.Logger.ErrorAndThrow(this.DataOneContentDocFactoryFromIframe.name, 'no iframe provided');
        }
        return toReturn;
    }
    DataOneIframeFactory(iframeElem, nickname) {
        this.Logger.FuncStart(this.DataOneIframeFactory.name);
        var toReturn = null;
        if (iframeElem && nickname) {
            var toReturn = new IDataOneIframe_IframeProxy(this.Logger, iframeElem, nickname);
        }
        else {
            this.Logger.ErrorAndThrow(this.DataOneIframeFactory.name, 'one of these is null');
            this.Logger.LogAsJsonPretty('iframeElem', iframeElem);
            this.Logger.LogAsJsonPretty('nickname', nickname);
        }
        this.Logger.FuncEnd(this.DataOneIframeFactory.name);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Helpers/IframeHelper.js



class IframeHelper_IframeHelper extends LoggableBase {
    GetHostedIframes(targetDoc) {
        return new Promise((resolve, reject) => {
            this.Logger.FuncStart(this.GetHostedIframes.name);
            let successful = true;
            let rejectReason = '';
            var toReturn = [];
            var iframeAr = targetDoc.ContentDoc.querySelectorAll(ContentConst.Const.Selector.SC.IframeContent.sc920);
            if (!iframeAr) {
                iframeAr = targetDoc.ContentDoc.querySelectorAll(ContentConst.Const.Selector.SC.IframeContent.sc820);
            }
            this.Logger.LogVal('found iframes count', iframeAr.length);
            if (iframeAr) {
                for (var ifrIdx = 0; ifrIdx < iframeAr.length; ifrIdx++) {
                    this.Logger.Log('pushing: ' + ifrIdx);
                    var iframeElem = iframeAr[ifrIdx];
                    let factoryHelper = new FactoryHelper_FactoryHelper(this.Logger);
                    var dataOneIframe = factoryHelper.DataOneIframeFactory(iframeElem, 'desktop Iframe_' + ifrIdx);
                    toReturn.push(dataOneIframe);
                }
                this.Logger.LogVal('GetAllLiveIframeData: iframe count', toReturn.length);
                resolve(toReturn);
            }
            else {
                reject('no iframes found');
                this.Logger.Log(rejectReason);
            }
            this.Logger.FuncEnd(this.GetHostedIframes.name);
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/RecipeBasics.js
var RecipeBasics_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class RecipeBasics_RecipeBasics extends LoggableBase {
    constructor(logger) {
        super(logger);
        this.FactoryHelp = new FactoryHelper_FactoryHelper(this.Logger);
    }
    WaitForReadyIframe(dataOneIframe) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForReadyIframe.name, dataOneIframe.Nickname + ' ' + Guid_Guid.AsShort(dataOneIframe.Id));
                var iterationJr = new IterationDrone_IterationDrone(this.Logger, this.WaitForReadyIframe.name);
                let IsReady = false;
                while (iterationJr.DecrementAndKeepGoing() && !IsReady) {
                    var currentReadyState = dataOneIframe.IframeElem.contentDocument.readyState.toString();
                    var isReadyStateComplete = currentReadyState === 'complete';
                    var currentDocUrl = dataOneIframe.IframeElem.contentDocument.URL;
                    if (isReadyStateComplete && (currentDocUrl !== SharedConst.Const.UrlSuffix.AboutBlank)) {
                        this.Logger.LogVal('currentDocUrl', currentDocUrl);
                        IsReady = true;
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (IsReady) {
                    this.Logger.Log(dataOneIframe.GetContentDoc().ContentDoc.URL);
                    resolve(dataOneIframe);
                }
                if (iterationJr.IsExhausted) {
                    reject(iterationJr.IsExhaustedMsg);
                }
                this.Logger.FuncEnd(this.WaitForReadyIframe.name);
            }));
        });
    }
    IsDocumentReady(document) {
        let toReturn = false;
        if (document) {
            let currentReadyState = document.readyState.toString();
            let isReadyStateComplete = currentReadyState === 'complete';
            let url = document.URL;
            if (isReadyStateComplete && url !== SharedConst.Const.UrlSuffix.AboutBlank && url != '') {
                toReturn = true;
            }
            this.Logger.LogVal('url', url);
            ;
            this.Logger.LogVal('readyState', currentReadyState);
            ;
            this.Logger.LogVal('isReadyStateComplete', isReadyStateComplete);
            this.Logger.LogVal('toReturn', toReturn);
        }
        return toReturn;
    }
    WaitForPageReadyHtmlIframeElement(targetIframe) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForPageReadyHtmlIframeElement.name);
                if (targetIframe) {
                    var iterationJr = new IterationDrone_IterationDrone(this.Logger, this.WaitForPageReadyNative.name);
                    var isReady = false;
                    let currentReadyState;
                    while (iterationJr.DecrementAndKeepGoing() && !isReady) {
                        currentReadyState = targetIframe.contentDocument.readyState.toString();
                        isReady = this.IsDocumentReady(targetIframe.contentDocument);
                        if (isReady) {
                            break;
                        }
                        else {
                            yield iterationJr.Wait();
                        }
                    }
                    if (isReady) {
                        resolve();
                    }
                    if (iterationJr.IsExhausted) {
                        reject(iterationJr.IsExhaustedMsg);
                    }
                    this.Logger.Log('ready state: ' + currentReadyState + ' is ready: ' + isReady.toString());
                }
                else {
                    this.Logger.ErrorAndThrow(this.WaitForPageReadyHtmlIframeElement.name, 'No target doc');
                }
                this.Logger.FuncEnd(this.WaitForPageReadyHtmlIframeElement.name);
                ;
            }));
        });
    }
    WaitForPageReadyNative(targetDoc) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForPageReadyNative.name);
                if (targetDoc) {
                    var iterationJr = new IterationDrone_IterationDrone(this.Logger, this.WaitForPageReadyNative.name);
                    var isReady = false;
                    let currentReadyState;
                    while (iterationJr.DecrementAndKeepGoing() && !isReady) {
                        isReady = this.IsDocumentReady(targetDoc.ContentDoc);
                        if (isReady) {
                            break;
                        }
                        else {
                            yield iterationJr.Wait();
                        }
                    }
                    if (isReady) {
                        resolve();
                    }
                    if (iterationJr.IsExhausted) {
                        reject(iterationJr.IsExhaustedMsg);
                    }
                    this.Logger.Log('ready state: ' + currentReadyState + ' is ready: ' + isReady.toString());
                }
                else {
                    this.Logger.ErrorAndThrow(this.WaitForPageReadyNative.name, 'No target doc');
                }
                this.Logger.FuncEnd(this.WaitForPageReadyNative.name);
                ;
            }));
        });
    }
    GetTopLevelIframe(targetDoc) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetTopLevelIframe.name);
                var toReturn = null;
                var allIframe;
                let iframeHelper = new IframeHelper_IframeHelper(this.Logger);
                yield iframeHelper.GetHostedIframes(targetDoc)
                    .then((result) => {
                    allIframe = result;
                    var maxZVal = -1;
                    if (allIframe && allIframe.length > 0) {
                        for (var idx = 0; idx < allIframe.length; idx++) {
                            var candidateIframe = allIframe[idx];
                            if (candidateIframe && candidateIframe.GetZindex() > maxZVal) {
                                toReturn = candidateIframe;
                                maxZVal = candidateIframe.GetZindex();
                            }
                        }
                    }
                })
                    .then(() => resolve(toReturn))
                    .catch((err) => this.Logger.ErrorAndThrow(this.GetTopLevelIframe.name, err));
                this.Logger.FuncEnd(this.GetTopLevelIframe.name);
            }));
        });
    }
    WaitForIframeElemAndReturnWhenReady(haystackDoc, selector, iframeNickName) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForIframeElemAndReturnWhenReady.name);
                var toReturnIframeProxy = null;
                yield this.WaitForAndReturnFoundElem(haystackDoc, selector)
                    .then((foundElem) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                    if (foundElem) {
                        toReturnIframeProxy = this.FactoryHelp.DataOneIframeFactory(foundElem, iframeNickName);
                    }
                }))
                    .then(() => this.WaitForReadyIframe(toReturnIframeProxy))
                    .then(() => {
                    resolve(toReturnIframeProxy);
                })
                    .catch((err) => reject(err));
                this.Logger.FuncEnd(this.WaitForIframeElemAndReturnWhenReady.name);
            }));
        });
    }
    WaitForNewIframe(allIframesBefore, targetDoc) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForNewIframe.name);
                this.Logger.LogAsJsonPretty('allIframesBefore', allIframesBefore);
                this.Logger.ThrowIfNullOrUndefined(this.WaitForNewIframe.name, allIframesBefore);
                this.Logger.ThrowIfNullOrUndefined(this.WaitForNewIframe.name, targetDoc);
                var toReturn = null;
                var iterationJr = new IterationDrone_IterationDrone(this.Logger, this.WaitForNewIframe.name);
                let beforeCount = allIframesBefore.length;
                let iframeHelper = new IframeHelper_IframeHelper(this.Logger);
                while (!toReturn && iterationJr.DecrementAndKeepGoing()) {
                    var allIframesAfter;
                    yield iframeHelper.GetHostedIframes(targetDoc)
                        .then((result) => allIframesAfter = result)
                        .catch((err) => this.Logger.ErrorAndThrow(this.WaitForNewIframe.name, err));
                    var count = allIframesAfter.length;
                    this.Logger.Log('iFrame count before: ' + beforeCount);
                    this.Logger.Log('iFrame count after: ' + allIframesAfter.length);
                    if (count > beforeCount) {
                        var newIframes = allIframesAfter.filter(e => !allIframesBefore.includes(e));
                        toReturn = newIframes[0];
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                this.Logger.FuncEnd(this.WaitForNewIframe.name);
                if (toReturn) {
                    resolve(toReturn);
                }
                else {
                    reject(iterationJr.IsExhaustedMsg);
                }
            }));
        });
    }
    WaitForAndReturnFoundElem(haystackDoc, selector, overrideIterCount = 8) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForAndReturnFoundElem.name);
                this.Logger.LogVal('selector', selector);
                this.Logger.LogVal('doc nickname', haystackDoc.Nickname);
                var toReturnFoundElem = null;
                let promiseResult = new PromiseResult(this.WaitForAndReturnFoundElem.name, this.Logger);
                var iterationJr = new IterationDrone_IterationDrone(this.Logger, this.WaitForAndReturnFoundElem.name, overrideIterCount);
                while (!toReturnFoundElem && iterationJr.DecrementAndKeepGoing()) {
                    toReturnFoundElem = haystackDoc.ContentDoc.querySelector(selector);
                    if (toReturnFoundElem) {
                        this.Logger.Log('found');
                        this.Logger.LogVal('found.style.display', toReturnFoundElem.style.display);
                        promiseResult.MarkSuccessful();
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (!toReturnFoundElem && iterationJr.IsExhausted) {
                    promiseResult.MarkFailed(iterationJr.IsExhaustedMsg);
                }
                this.Logger.FuncEnd(this.WaitForAndReturnFoundElem.name);
                if (promiseResult.WasSuccessful()) {
                    resolve(toReturnFoundElem);
                }
                else {
                    reject(promiseResult.RejectReasons);
                }
            }));
        });
    }
    WaitForAndClickWithPayload(selector, targetDoc, payload) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForAndClickWithPayload.name, selector);
            yield this.WaitForThenClick([selector], targetDoc)
                .then(() => resolve(payload))
                .catch(ex => {
                this.Logger.ErrorAndThrow(this.WaitForAndClickWithPayload.name, ex);
                reject(ex);
            });
        }));
    }
    TabWaitForReadyStateCompleteNative(browserTab) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            let iterHelper = new IterationDrone_IterationDrone(this.Logger, this.TabWaitForReadyStateCompleteNative.name);
            let result = new PromiseResult(this.TabWaitForReadyStateCompleteNative.name, this.Logger);
            while (browserTab.status !== 'complete' && iterHelper.DecrementAndKeepGoing()) {
                this.Logger.LogVal('tab status', browserTab.status);
                yield iterHelper.Wait;
            }
            if (browserTab.status === 'complete') {
                result.MarkSuccessful();
            }
            else {
                result.MarkFailed('browser status: ' + browserTab.status);
                if (iterHelper.IsExhausted) {
                    result.MarkFailed(iterHelper.IsExhaustedMsg);
                }
            }
            if (result.WasSuccessful()) {
                resolve();
            }
            else {
                reject(result.RejectReasons);
            }
        }));
    }
    TabChainSetHrefWaitForComplete(href) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.TabChainSetHrefWaitForComplete.name, href.AbsUrl);
            yield browser.tabs.query({ currentWindow: true, active: true })
                .then((result) => {
                let targetTab = result[0];
                browser.tabs.update(targetTab.id, { url: href.AbsUrl });
                this.TabWaitForReadyStateCompleteNative(targetTab);
            })
                .then(resolve)
                .catch((ex) => reject(ex));
            this.Logger.FuncEnd(this.TabChainSetHrefWaitForComplete.name, href.AbsUrl);
        }));
    }
    RaceWaitAndClick(selector, targetDoc) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.RaceWaitAndClick.name);
                yield this.WaitForThenClick([selector.sc920, selector.sc820], targetDoc)
                    .then(() => {
                    this.Logger.FuncEnd(this.RaceWaitAndClick.name);
                    resolve();
                })
                    .catch((ex) => {
                    this.Logger.FuncEnd(this.RaceWaitAndClick.name);
                    reject(ex);
                });
            }));
        });
    }
    WaitForThenClick(selectorAr, targetDoc) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForThenClick.name);
            if (targetDoc) {
                this.Logger.LogAsJsonPretty('selectors', selectorAr);
                var found = null;
                var iterationJr = new IterationDrone_IterationDrone(this.Logger, this.WaitForThenClick.name);
                while (!found && iterationJr.DecrementAndKeepGoing()) {
                    for (var idx = 0; idx < selectorAr.length; idx++) {
                        found = targetDoc.ContentDoc.querySelector(selectorAr[idx]);
                        if (found) {
                            this.Logger.LogVal('found target', selectorAr[idx]);
                            break;
                        }
                    }
                    if (found) {
                        this.Logger.Log('clicking');
                        try {
                            found.click();
                            resolve();
                        }
                        catch (err) {
                            reject(err);
                        }
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
            }
            else {
                reject('no target doc');
            }
            if (!found && iterationJr.IsExhausted) {
                reject(iterationJr.IsExhaustedMsg);
            }
            this.Logger.FuncEnd(this.WaitForThenClick.name);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/ContentApi/Recipes/__RecipeBase/__RecipeBase.js

class _RecipeBase_RecipeBase {
    constructor(commandData) {
        this.Logger = commandData.Logger;
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.Logger);
        this.ScWinMan = commandData.ScWinMan;
        this.AtticAgent = commandData.AtticAgent;
        this.TargetSnapShotId = commandData.TargetSnapShotId;
        this.TargetSnapShotFlavor = commandData.TargetSnapShotFlavor;
        this.TargetDoc = commandData.TargetDoc;
        this.TargetConEdProxy = commandData.TargetCeProxy;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/ContentApi/Recipes/RecipeSaveState/RecipeSaveState.js
var RecipeSaveState_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class RecipeSaveState_RecipeSaveState extends _RecipeBase_RecipeBase {
    constructor(commandData) {
        super(commandData);
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeSaveState_awaiter(this, void 0, void 0, function* () {
            yield this.ScWinMan.GetScWindowStateB(this.TargetSnapShotFlavor)
                .then((windowState) => this.AtticAgent.WriteToStorage(windowState))
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/CommandHndlrDataForContent/CommandHndlrDataForContent.js

class CommandHndlrDataForContent_CommandHndlrDataForContent {
    constructor(logger, atticAgent, scWinMan, toastAgent, scUiMan, settingsAgent) {
        this.AtticAgent = null;
        this.ContentMessageBroker = null;
        this.DesktopProxy = null;
        this.Logger = null;
        this.ScUiMan = null;
        this.ScWinMan = null;
        this.TargetDoc = null;
        this.TargetNickName = '';
        this.TargetSnapShotFlavor = SnapShotFlavor.Unknown;
        this.TargetSnapShotId = null;
        this.ToastAgent = null;
        this.TopLevelDoc = () => this.ScWinMan.GetTopLevelDoc();
        this.Logger = logger;
        this.AtticAgent = atticAgent;
        this.ScWinMan = scWinMan;
        this.ToastAgent = toastAgent;
        this.ScUiMan = scUiMan;
        this.SettingsAgent = settingsAgent;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Agents/AutoSnapShotAgent/AutoSnapShotAgent.js
var AutoSnapShotAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class AutoSnapShotAgent_AutoSnapShotAgent {
    constructor(logger, settingsAgent, scWinMan, atticAgent, scUiMan, toastAgent) {
        this.AutoSaveHasBeenScheduled = false;
        this.Logger = logger;
        this.SettingsAgent = settingsAgent;
        this.ScWinMan = scWinMan;
        this.AtticAgent = atticAgent;
        this.ScUiMan = scUiMan;
        this.ToastAgent = toastAgent;
    }
    AutoSaveSnapShot() {
        return AutoSnapShotAgent_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.AutoSaveSnapShot.name);
            let commandData = new CommandHndlrDataForContent_CommandHndlrDataForContent(this.Logger, this.AtticAgent, this.ScWinMan, this.ToastAgent, this.ScUiMan, this.SettingsAgent);
            commandData.TargetSnapShotFlavor = SnapShotFlavor.Autosave;
            let recipeSaveState = new RecipeSaveState_RecipeSaveState(commandData);
            yield recipeSaveState.Execute();
            this.Logger.FuncEnd(this.AutoSaveSnapShot.name);
        });
    }
    ScheduleIntervalTasks() {
        this.Logger.FuncStart(this.ScheduleIntervalTasks.name);
        this.Logger.LogVal('Has been scheduled: ', this.AutoSaveHasBeenScheduled);
        let autoSaveSetting = this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.AutoSaveIntervalMin);
        this.Logger.LogVal('autoSaveSetting: ', autoSaveSetting.ValueAsInt());
        if (autoSaveSetting.ValueAsInt() > 0) {
            if (!this.AutoSaveHasBeenScheduled) {
                var self = this;
                var intervalMs = StaticHelpers_StaticHelpers.MinToMs(autoSaveSetting.ValueAsInt());
                window.setInterval(() => {
                    self.AutoSaveSnapShot();
                }, intervalMs);
                this.AutoSaveHasBeenScheduled = true;
            }
        }
        this.Logger.FuncEnd(this.ScheduleIntervalTasks.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Agents/ContentAtticAgent/ContentAtticAgent.js
var ContentAtticAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class ContentAtticAgent_ContentAtticAgent {
    constructor(repo, logger) {
        this.Logger = logger;
        this.Logger.FuncStart(ContentAtticAgent_ContentAtticAgent.name);
        this.Repo = repo;
        this.Logger.FuncEnd(ContentAtticAgent_ContentAtticAgent.name);
    }
    InitContentAtticManager(settingAutoSnapshotRetainDays) {
        this.SettingAutoSnapshotRetainDays = settingAutoSnapshotRetainDays;
    }
    WriteToStorage(dataOneWindow) {
        return ContentAtticAgent_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentAtticAgent_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WriteToStorage.name);
                var snapShotAsString = JSON.stringify(dataOneWindow);
                yield window.localStorage.setItem(ContentConst.Const.Storage.WindowRoot + ContentConst.Const.Storage.SnapShotPrefix + dataOneWindow.GuidId.Raw, snapShotAsString);
                yield this.CleanOutOldAutoSavedData()
                    .then(() => resolve())
                    .catch((err) => reject(err));
                this.Logger.FuncEnd(this.WriteToStorage.name);
            }));
        });
    }
    GetFromStorageById(needleId) {
        return ContentAtticAgent_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentAtticAgent_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetFromStorageById.name, needleId.Raw);
                var DateOneWinStoreMatch = null;
                yield this.GetAllSnapShotsMany()
                    .then((foundStorage) => {
                    for (var idx = 0; idx < foundStorage.CurrentSnapShots.length; idx++) {
                        var candidate = foundStorage.CurrentSnapShots[idx];
                        if (candidate.GuidId.Raw === needleId.Raw) {
                            DateOneWinStoreMatch = candidate;
                            this.Logger.Log('found match');
                            break;
                        }
                    }
                    resolve(DateOneWinStoreMatch);
                })
                    .catch((err) => reject(err));
                this.Logger.FuncEnd(this.GetFromStorageById.name);
            }));
        });
    }
    __parseRawData(oneRaw) {
        var candidate = JSON.parse(oneRaw.data);
        console.log;
        if (candidate) {
            candidate.TimeStamp = new Date(candidate.TimeStamp);
            candidate.RawData = oneRaw;
            if (!candidate.WindowType) {
                candidate.WindowType = ScWindowType.Unknown;
                candidate.WindowFriendly = ScWindowType[candidate.WindowType];
            }
            if (!candidate.NickName) {
                candidate.NickName = '';
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.__parseRawData.name, 'Saved data did not import correctly');
        }
        return candidate;
    }
    GetAllLocalStorageAsIOneStorageData() {
        return new Promise((resolve, reject) => ContentAtticAgent_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetAllLocalStorageAsIOneStorageData.name);
            let prefix = ContentConst.Const.Storage.WindowRoot + ContentConst.Const.Storage.SnapShotPrefix;
            yield this.Repo.GetBulkLocalStorageByKeyPrefix(prefix)
                .then((result) => resolve(result))
                .catch((err) => reject(err));
            this.Logger.FuncEnd(this.GetAllLocalStorageAsIOneStorageData.name);
        }));
    }
    __getAllStorageReal() {
        return ContentAtticAgent_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentAtticAgent_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.__getAllStorageReal.name);
                var toReturn = [];
                var rawStorageData;
                yield this.GetAllLocalStorageAsIOneStorageData()
                    .then((result) => rawStorageData = result)
                    .then(() => {
                    if (rawStorageData) {
                        for (var idx = 0; idx < rawStorageData.length; idx++) {
                            toReturn.push(this.__parseRawData(rawStorageData[idx]));
                        }
                    }
                })
                    .then(() => {
                    toReturn.sort((a, b) => +b.TimeStamp - +a.TimeStamp);
                })
                    .then(() => {
                    toReturn = this.FilterOutOldData(toReturn);
                    resolve(toReturn);
                })
                    .catch((err) => reject(err));
                this.Logger.FuncEnd(this.__getAllStorageReal.name);
            }));
        });
    }
    CleanOutOldAutoSavedData() {
        return ContentAtticAgent_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.CleanOutOldAutoSavedData.name);
            var cleanData = [];
            var now = new Date();
            if (!this.SettingAutoSnapshotRetainDays || this.SettingAutoSnapshotRetainDays < 1) {
                this.SettingAutoSnapshotRetainDays = ContentConst.Const.DefaultMaxAutoSaveAgeDays;
            }
            var maxAutoSaveDiff = this.SettingAutoSnapshotRetainDays * 24 * 60 * 60 * 1000;
            let currentWindowStorage = yield this.GetAllSnapShotsMany();
            if (currentWindowStorage) {
                var cacheLength = currentWindowStorage.CurrentSnapShots.length;
                var autoCount = 0;
                for (var idx = 0; idx < cacheLength; idx++) {
                    var deleteFlag = false;
                    var candidate = currentWindowStorage.CurrentSnapShots[idx];
                    if (candidate.Flavor == SnapShotFlavor.Autosave) {
                        if (autoCount > ContentConst.Const.MaxAutoToSaveCount) {
                            this.Logger.LogVal('Delete (max count :' + ContentConst.Const.MaxAutoToSaveCount + ')', candidate.TimeStamp.toString());
                            deleteFlag = true;
                        }
                        autoCount++;
                    }
                    if (now.getTime() - candidate.TimeStamp.getTime() > maxAutoSaveDiff) {
                        this.Logger.LogVal('Delete (Old : max' + ContentConst.Const.DefaultMaxAutoSaveAgeDays + ' days)', candidate.TimeStamp.toString());
                        deleteFlag = true;
                    }
                    if (!deleteFlag) {
                        cleanData.push(candidate);
                    }
                    else {
                        try {
                            this.Logger.LogVal('Cleaning old autosave', candidate.RawData.key);
                            window.localStorage.removeItem(candidate.RawData.key);
                        }
                        catch (e) {
                            this.Logger.ErrorAndThrow(this.CleanOutOldAutoSavedData.name, 'unable to delete key: ' + candidate.RawData.key);
                        }
                    }
                }
            }
            this.Logger.FuncEnd(this.CleanOutOldAutoSavedData.name);
        });
    }
    GetAllSnapShotsMany() {
        return new Promise((resolve, reject) => ContentAtticAgent_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetAllSnapShotsMany.name);
            let snapShotsMany = {
                CurrentSnapShots: [],
                Birthday: new Date(1970),
                FavoriteCount: 0,
                SnapShotsAutoCount: 0,
                PlainCount: 0,
            };
            yield this.__getAllStorageReal()
                .then((result) => {
                snapShotsMany.CurrentSnapShots = result;
                snapShotsMany.Birthday = new Date();
                this.UpdateCounts(snapShotsMany);
                snapShotsMany.CurrentSnapShots = this.ConvertGuidData(snapShotsMany.CurrentSnapShots);
                resolve(snapShotsMany);
            })
                .catch((err) => reject(err));
            this.Logger.FuncEnd(this.GetAllSnapShotsMany.name);
        }));
    }
    ConvertGuidData(candidateSnapShots) {
        let toReturn = [];
        for (var idx = 0; idx < candidateSnapShots.length; idx++) {
            var candidate = candidateSnapShots[idx];
            try {
                if (candidate.GuidId && GuidData_GuidData.IsValidGuidStr(candidate.GuidId.Raw)) {
                    candidate.GuidId = new GuidData_GuidData(candidate.GuidId.Raw);
                    toReturn.push(candidate);
                }
                else {
                    this.Logger.ErrorAndContinue(this.ConvertGuidData.name, 'invalid guid for ID, record is being ignored. Got: ' + candidate.GuidId.Raw);
                }
            }
            catch (err) {
            }
        }
        return toReturn;
    }
    UpdateCounts(storageAllSnapshots) {
        storageAllSnapshots.FavoriteCount = 0;
        storageAllSnapshots.SnapShotsAutoCount = 0;
        storageAllSnapshots.PlainCount = 0;
        for (var idx = 0; idx < storageAllSnapshots.CurrentSnapShots.length; idx++) {
            var candidate = storageAllSnapshots.CurrentSnapShots[idx];
            if (candidate.Flavor === SnapShotFlavor.Autosave) {
                storageAllSnapshots.SnapShotsAutoCount++;
            }
            else if (candidate.Flavor === SnapShotFlavor.Favorite) {
                storageAllSnapshots.FavoriteCount++;
            }
            else {
                storageAllSnapshots.PlainCount++;
            }
        }
    }
    FilterOutOldData(data) {
        var toReturn = data;
        return toReturn;
    }
    TimeNicknameFavStrForConfirmation(data) {
        var result = data.TimeStampFriendly + ' ' + data.NickName + ' ' + Guid_Guid.AsShort(data.GuidId);
        result = result.replace(new RegExp(/&nbsp;/ig), '');
        return result;
    }
    ConfirmRemoveAndCheck(storageMatch) {
        return new Promise((resolve, reject) => ContentAtticAgent_awaiter(this, void 0, void 0, function* () {
            this.Logger.LogVal('Key to Delete', storageMatch.RawData.key);
            let targetId = storageMatch.GuidId;
            yield window.localStorage.removeItem(storageMatch.RawData.key);
            yield this.GetFromStorageById(targetId)
                .then((result) => {
                if (!result) {
                    resolve();
                }
                else {
                    reject('Snapshot still exists after deleting');
                }
            });
        }));
    }
    RemoveSnapshotFromStorageById(targetId) {
        return new Promise((resolve, reject) => ContentAtticAgent_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.RemoveSnapshotFromStorageById.name);
            try {
                if (targetId) {
                    var storageMatch = yield this.GetFromStorageById(targetId);
                    if (storageMatch) {
                        yield this.ConfirmRemoveAndCheck(storageMatch)
                            .then(() => resolve())
                            .catch((err) => reject(err));
                    }
                    else {
                        reject('no storage match');
                    }
                }
                else {
                    reject('no target id');
                }
            }
            catch (e) {
                reject(e);
            }
            this.Logger.FuncEnd(this.RemoveSnapshotFromStorageById.name);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Agents/MiscAgent/MiscAgent.js


class MiscAgent_MiscAgent extends LoggableBase {
    constructor(logger) {
        super(logger);
        this.Logger.FuncStart(MiscAgent_MiscAgent.name);
        this.Logger.FuncEnd(MiscAgent_MiscAgent.name);
    }
    NotNullOrUndefined(subjectAnyOrAr, label = '', iterationCheck = null) {
        var toReturn = false;
        if (!iterationCheck) {
            iterationCheck = ContentConst.Const.MaxNullOrUndefinedIter;
        }
        iterationCheck -= 1;
        if (iterationCheck > 0) {
            if (label === '') {
                label = this.NotNullOrUndefined.name + ' : no label provided';
            }
            if (subjectAnyOrAr === 'undefined') {
                this.Logger.ErrorAndThrow(label, 'Is undefined');
            }
            else if (!subjectAnyOrAr) {
                this.Logger.ErrorAndThrow(label, 'Is Null');
            }
            else {
                this.Logger.LogVal(label, 'Passed');
                toReturn = true;
                if (Array.isArray(subjectAnyOrAr)) {
                    for (var idx = 0; idx < subjectAnyOrAr.length; idx++) {
                        toReturn = toReturn && this.NotNullOrUndefined(subjectAnyOrAr[idx], (idx + 1) + ':' + subjectAnyOrAr.length + ' ' + label, iterationCheck);
                    }
                }
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.NotNullOrUndefined.name, 'max iteration hit');
        }
        this.Logger.LogVal('toReturn', toReturn);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/MsgFromXBase.js

class MsgFromXBase_MsgFromXBase {
    constructor(msgFlag) {
        this.MsgFlag = MsgFlag.Unknown;
        this.MsgFlag = msgFlag;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/PayloadDataFromContent.js
class PayloadDataFromContent {
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/MsgPayloadResponseFromContent.js



class MsgPayloadResponseFromContent_MsgFromContent extends MsgFromXBase_MsgFromXBase {
    constructor(msgFlag) {
        super(msgFlag);
        this.Data = new PayloadDataFromContent();
        this.ScWindowState = {
            SnapShotsMany: {
                CurrentSnapShots: [],
                FavoriteCount: 0,
                SnapShotsAutoCount: 0,
                PlainCount: 0,
                Birthday: new Date(1970),
            },
            DesktopState: null,
            LastReq: MsgFlag.Unknown,
            ErrorStack: [],
            LastReqSuccessful: false,
            ActiveCe: null
        };
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/PayloadDataReqPopUp.js
class PayloadDataFromPopUp {
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/ContentApi/Recipes/RecipeChangeNickName/RecipeChangeNickName.js
var RecipeChangeNickName_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class RecipeChangeNickName_RecipeChangeNickName extends LoggableBase {
    constructor(logger, newNickName, targetSnapShotId, atticAgent) {
        super(logger);
        this.NewNickname = newNickName;
        this.TargetSnapShotId = targetSnapShotId;
        this.AtticAgent = atticAgent;
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeChangeNickName_awaiter(this, void 0, void 0, function* () {
            yield this.UpdateNickname()
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    UpdateNickname() {
        return new Promise((resolve, reject) => RecipeChangeNickName_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.UpdateNickname.name);
            if (this.TargetSnapShotId) {
                if (this.NewNickname) {
                    var storageMatch;
                    yield this.AtticAgent.GetFromStorageById(this.TargetSnapShotId)
                        .then((result) => storageMatch = result)
                        .then(() => {
                        if (storageMatch) {
                            if ((storageMatch.Flavor === SnapShotFlavor.Autosave
                                ||
                                    (storageMatch.Flavor === SnapShotFlavor.Unknown))) {
                                storageMatch.Flavor = SnapShotFlavor.Manual;
                            }
                            storageMatch.NickName = this.NewNickname;
                        }
                        else {
                            reject(this.UpdateNickname.name + ' - No storage match');
                        }
                    })
                        .then(() => this.AtticAgent.WriteToStorage(storageMatch))
                        .then(() => resolve())
                        .catch((err) => reject(err));
                }
                else {
                    reject(this.UpdateNickname.name + ' - something was missing');
                }
            }
            else {
                reject(this.UpdateNickname.name + ' no payload or id');
            }
            this.Logger.FuncEnd(this.UpdateNickname.name);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Drones/ContentMessageBroker/ContentMessageBroker.js
var ContentMessageBroker_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};









class ContentMessageBroker_ContentMessageBroker extends LoggableBase {
    constructor(logger, settingsAgent, apiManager, atticMan, toastAgent, scUiMan, scWinMan) {
        super(logger);
        this.Logger.InstantiateStart(ContentMessageBroker_ContentMessageBroker.name);
        this.Logger = logger;
        this.SettingsAgent = settingsAgent;
        this.ApiManager = apiManager;
        this.AtticAgent = atticMan;
        this.ToastAgent = toastAgent;
        this.ScUiMan = scUiMan;
        this.ScWinMan = scWinMan;
        this.Logger.InstantiateEnd(ContentMessageBroker_ContentMessageBroker.name);
    }
    BeginListening() {
        this.Logger.FuncStart(this.BeginListening.name);
        var self = this;
        browser.runtime.onMessage.addListener(request => self.ContentReceiveRequest(request));
        this.Logger.Log('Listening for messages');
        this.Logger.FuncEnd(this.BeginListening.name);
    }
    ValidateRequest(reqMsgFromPopup) {
        this.Logger.FuncStart(this.ValidateRequest.name);
        var isValid = true;
        if (reqMsgFromPopup) {
            if (reqMsgFromPopup.CurrentContentPrefs) {
                if (reqMsgFromPopup.Data) {
                }
                else {
                    reqMsgFromPopup.Data = new PayloadDataFromPopUp();
                }
            }
            else {
                this.Logger.ErrorAndThrow(this.ValidateRequest.name, 'No CurrentContentPrefs');
                reqMsgFromPopup.IsValid = false;
                isValid = false;
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.ValidateRequest.name, 'no reqMsgFromPopup');
        }
        reqMsgFromPopup.IsValid = isValid;
        this.Logger.FuncEnd(this.ValidateRequest.name, isValid.toString());
        return reqMsgFromPopup;
    }
    NotifyFail(failrReason) {
        this.Logger.ErrorAndContinue(this.NotifyFail.name, 'Fail ' + failrReason);
    }
    ContentReceiveRequest(reqMsgFromPopup) {
        return ContentMessageBroker_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentMessageBroker_awaiter(this, void 0, void 0, function* () {
                this.Logger.Log('');
                this.Logger.Log('');
                this.Logger.Log('');
                this.Logger.FuncStart(this.ContentReceiveRequest.name, StaticHelpers_StaticHelpers.MsgFlagAsString(reqMsgFromPopup.MsgFlag));
                this.Logger.LogVal('ce butt', this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.AutoLogin).ValueAsBool());
                if (reqMsgFromPopup) {
                    reqMsgFromPopup = this.ValidateRequest(reqMsgFromPopup);
                    if (reqMsgFromPopup.IsValid) {
                        this.SettingsAgent.UpdateSettingsFromPopUpMsg(reqMsgFromPopup.CurrentContentPrefs);
                        yield this.ReqMsgRouter(reqMsgFromPopup)
                            .then((contentResponse) => {
                            this.Logger.Log('responding: ' + StaticHelpers_StaticHelpers.MsgFlagAsString(contentResponse.MsgFlag));
                            resolve(contentResponse);
                        })
                            .catch((err) => {
                            this.NotifyFail(err);
                            resolve(new MsgPayloadResponseFromContent_MsgFromContent(MsgFlag.RespTaskFailed));
                        });
                    }
                    else {
                        reject('reqMsgFromPopup is not valid');
                    }
                }
                else {
                    reject('no request');
                }
                this.Logger.FuncEnd(this.ContentReceiveRequest.name, StaticHelpers_StaticHelpers.MsgFlagAsString(reqMsgFromPopup.MsgFlag));
                this.Logger.Log('');
                this.Logger.Log('');
                this.Logger.Log('');
                this.Logger.Log('Resuming Standby');
                this.Logger.Log('');
                this.Logger.Log('');
                this.Logger.Log('');
            }));
        });
    }
    CalculateRecipeToExec(payload) {
        let RecipeToExecute;
        switch (payload.MsgFlag) {
            case MsgFlag.ReqUpdateNickName:
                RecipeToExecute = new RecipeChangeNickName_RecipeChangeNickName(this.Logger, payload.Data.SnapShotSettings.SnapShotNewNickname, payload.Data.IdOfSelect, this.AtticAgent);
                break;
            default:
                break;
        }
        return RecipeToExecute;
    }
    CalculateCommandToExec(payload) {
        let commandToExecute = null;
        switch (payload.MsgFlag) {
            case MsgFlag.ReqAddCETab:
                commandToExecute = this.ApiManager.AddCETab;
                break;
            case MsgFlag.ReqAdminB:
                commandToExecute = this.ApiManager.AdminB;
                break;
            case MsgFlag.Ping:
                commandToExecute = this.ApiManager.Ping;
                break;
            case MsgFlag.ReqOpenCE:
                commandToExecute = this.ApiManager.OpenContentEditor;
                break;
            case MsgFlag.ReqMarkFavorite:
                commandToExecute = this.ApiManager.MarkFavorite;
                break;
            case MsgFlag.ReqQuickPublish:
                commandToExecute = this.ApiManager.PublischActiveCE;
                break;
            case MsgFlag.ReqRestoreClick:
                commandToExecute = this.ApiManager.RestoreSnapshop;
                break;
            case MsgFlag.ReqToggleCompactCss:
                commandToExecute = this.ApiManager.ToggleCompactCss;
                break;
            case MsgFlag.ReqTakeSnapShot:
                commandToExecute = this.ApiManager.SaveWindowState;
                break;
            case MsgFlag.ReqRemoveFromStorage:
                commandToExecute = this.ApiManager.RemoveSnapShot;
                break;
            default:
                this.Logger.Log('Unhandled MsgFlag', StaticHelpers_StaticHelpers.MsgFlagAsString(payload.MsgFlag));
                break;
        }
        return commandToExecute;
    }
    ReqMsgRouter(payload) {
        return ContentMessageBroker_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentMessageBroker_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.ReqMsgRouter.name, StaticHelpers_StaticHelpers.MsgFlagAsString(payload.MsgFlag));
                if (payload.Data.IdOfSelect) {
                    payload.Data.IdOfSelect = new GuidData_GuidData(payload.Data.IdOfSelect.Raw);
                }
                let commandToExecute = this.CalculateCommandToExec(payload);
                if (commandToExecute) {
                    yield this.ExecuteCommand(commandToExecute, payload)
                        .then((response) => resolve(response))
                        .catch((err) => reject(err));
                }
                else {
                    let recipeToExecute = this.CalculateRecipeToExec(payload);
                    if (recipeToExecute) {
                        yield recipeToExecute.Execute()
                            .then(() => this.ConstructResponse(payload.MsgFlag))
                            .then((response) => resolve(response))
                            .catch((err) => reject(err));
                    }
                    else {
                        reject('Unhandled MsgFlag: ' + StaticHelpers_StaticHelpers.MsgFlagAsString(payload.MsgFlag));
                    }
                }
                this.Logger.FuncEnd(this.ReqMsgRouter.name);
            }));
        });
    }
    ConstructResponse(msgFlag) {
        return new Promise((resolve, reject) => ContentMessageBroker_awaiter(this, void 0, void 0, function* () {
            let response = new MsgPayloadResponseFromContent_MsgFromContent(MsgFlag.Unknown);
            yield this.ApiManager.GetContentState()
                .then((result) => {
                response.ScWindowState.LastReq = msgFlag;
                response.MsgFlag = MsgFlag.RespTaskSuccessful;
                response.ScWindowState = result;
            })
                .then(() => resolve(response))
                .catch((err) => reject(err));
        }));
    }
    ExecuteCommand(commandToExecute, payload) {
        return new Promise((resolve, reject) => ContentMessageBroker_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.ExecuteCommand.name);
            if (commandToExecute) {
                let commandData = new CommandHndlrDataForContent_CommandHndlrDataForContent(this.Logger, this.AtticAgent, this.ScWinMan, this.ToastAgent, this.ScUiMan, this.SettingsAgent);
                commandData.TargetSnapShotId = payload.Data.IdOfSelect;
                commandData.ContentMessageBroker = this;
                commandData.TargetSnapShotFlavor = payload.Data.SnapShotSettings.Flavor;
                commandData.TargetCeProxy = null;
                commandData.TargetDoc = null;
                yield commandToExecute(commandData)
                    .then(() => this.ConstructResponse(payload.MsgFlag))
                    .then((response) => resolve(response))
                    .catch((err) => reject(err));
            }
            this.Logger.FuncEnd(this.ExecuteCommand.name);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/ContentEditor/ContentEditorTreeNodeProxy/ContentEditorTreeNodeProxy.js




class ContentEditorTreeNodeProxy_ContentEditorTreeNodeProxy extends LoggableBase {
    constructor(logger, obj) {
        super(logger);
        if (obj) {
            this.Logger.Log('Instantiating from Element');
            this.AssociatedNodeElem = obj;
        }
        else {
            this.Logger.ErrorAndThrow(ContentEditorTreeNodeProxy_ContentEditorTreeNodeProxy.name, 'No passed elem');
        }
    }
    GetStateNode() {
        var newData = {
            IsExpanded: this.IsExpanded(),
            IsActive: this.IsActive(),
            NodeFriendly: this.GetFriendlyNameFromNode(),
            NodeId: null,
            Discriminator: SharedConst.Const.ObjDiscriminator.DataOneTreeNode
        };
        return newData;
    }
    RestoreStateNode(newData, dataOneDocTarget) {
        if (newData.IsExpanded) {
            this.ExpandNode();
        }
        this.Logger.LogVal('IsActive', newData.IsActive.toString());
        if (newData.IsActive) {
            var hotTreeNodeId = ContentConst.Const.Names.SC.TreeNodePrefix + Guid_Guid.WithoutDashes(newData.NodeId);
            var hotTreeNode = dataOneDocTarget.ContentDoc.getElementById(hotTreeNodeId);
            if (hotTreeNode) {
                let hotTreeNodeProxy = new ContentEditorTreeNodeProxy_ContentEditorTreeNodeProxy(this.Logger, hotTreeNode);
                if (hotTreeNodeProxy) {
                    hotTreeNodeProxy.ActivateNode();
                }
                else {
                    this.Logger.ErrorAndContinue(this.RestoreStateNode.name, 'hot tree node not found');
                }
            }
            else {
                this.Logger.WarningAndContinue(this.RestoreStateNode.name, 'No hotTreeNode');
            }
        }
    }
    IsActive() {
        this.Logger.FuncStart(this.IsActive.name);
        var toReturn = false;
        var firstNodeActiveTest = this.AssociatedNodeElem.querySelector(ContentConst.Const.Selector.SC.IdStartsWithTreeNode);
        this.Logger.LogVal('firstNodeActiveTest', firstNodeActiveTest !== null);
        if (firstNodeActiveTest !== null) {
            this.Logger.Log('passes first node test');
            var className = firstNodeActiveTest.className;
            this.Logger.Log(className);
            if (className.indexOf(ContentConst.Const.ClassNames.SC.scContentTreeNodeActive) > -1) {
                toReturn = true;
                this.Logger.Log('** isActive ' + this.AssociatedNodeElem.innerText);
            }
        }
        else {
            this.Logger.Log('does not pass first node test');
        }
        this.Logger.FuncEnd(this.IsActive.name);
        return toReturn;
    }
    ActivateNode() {
        this.Logger.FuncStart(this.ActivateNode.name);
        if (this.AssociatedNodeElem) {
            this.Logger.Log('clicking it');
            this.AssociatedNodeElem.click();
        }
        else {
            this.Logger.ErrorAndContinue(this.ActivateNode.name, 'No associated Elem');
        }
        this.Logger.FuncEnd(this.ActivateNode.name);
    }
    __collapseNode(element) {
        var currentSrc = element.getAttribute('src');
        this.Logger.Log('currentSrc' + currentSrc);
        if (currentSrc.indexOf(ContentConst.Const.Names.TreeMenuExpandedPng) > -1) {
            this.Logger.Log('clicking it');
            element.click();
        }
    }
    ExpandNode() {
        this.Logger.FuncStart(this.ExpandNode.name);
        if (this.AssociatedNodeElem) {
            var currentSrc = this.AssociatedNodeElem.getAttribute('src');
            this.Logger.Log('currentSrc' + currentSrc);
            if (currentSrc.indexOf(ContentConst.Const.Names.TreeMenuExpandedPng) < 0) {
                this.Logger.Log('clicking it');
                this.AssociatedNodeElem.click();
            }
            else {
                this.Logger.Log('Already expanded');
            }
        }
        else {
            this.Logger.ErrorAndContinue(this.ExpandNode.name, 'No associated elem');
        }
        this.Logger.FuncEnd(this.ExpandNode.name);
    }
    GetFriendlyNameFromNode() {
        var toReturn = 'unknown';
        var parentNode = this.AssociatedNodeElem.parentNode;
        var treeNode = parentNode.querySelector(ContentConst.Const.Selector.SC.IdStartsWithTreeNode);
        if (treeNode) {
            toReturn = this.AssociatedNodeElem.innerText;
        }
        else {
            this.Logger.Log('No treeNode');
        }
        return toReturn;
    }
    IsContentTreeNode(targetNode) {
        var toReturn = false;
        var className = targetNode.className;
        if (className === ContentConst.Const.ClassNames.ContentTreeNode) {
            toReturn = true;
        }
        return toReturn;
    }
    IsExpanded() {
        var toReturn = false;
        if (this.AssociatedNodeElem) {
            var srcAttr = this.AssociatedNodeElem.getAttribute('src');
            if (srcAttr.indexOf(ContentConst.Const.Names.SC.TreeExpandedPng.sc920) > -1) {
                toReturn = true;
            }
            return toReturn;
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/Desktop/DesktopProxy/Events/GenericEvent/Subject_GenericEvent.js

class Subject_GenericEvent_Subject_GenericEvent extends LoggableBase {
    constructor() {
        super(...arguments);
        this.ObserverCollection = [];
    }
    RegisterObserver(observer) {
        if (observer && this.ObserverCollection.indexOf(observer) < 0) {
            this.ObserverCollection.push(observer);
        }
    }
    UnregisterObserver(observer) {
        this.Logger.FuncStart(this.UnregisterObserver.name);
        if (observer) {
            let observerIndex = this.ObserverCollection.indexOf(observer);
            if (observerIndex > -1) {
                this.ObserverCollection.splice(observerIndex, 1);
            }
        }
        this.Logger.FuncEnd(this.UnregisterObserver.name);
    }
    NotifyObservers(payload) {
        this.Logger.FuncStart(this.NotifyObservers.name, 'length: ' + this.ObserverCollection.length);
        this.ObserverCollection.forEach((observer) => observer(payload));
        this.Logger.FuncEnd(this.NotifyObservers.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/Desktop/DesktopProxy/Events/ContentEditorTreeMutatedEvent/Subject_ContentEditorTreeMutatedEvent.js


class Subject_ContentEditorTreeMutatedEvent_Subject_ContentEditorTreeMutatedEvent extends Subject_GenericEvent_Subject_GenericEvent {
    constructor(logger, treeElement, hostIframeId) {
        super(logger);
        this.Logger.InstantiateStart(Subject_ContentEditorTreeMutatedEvent_Subject_ContentEditorTreeMutatedEvent.name);
        this.TreeElement = treeElement;
        this.HostIframeId = hostIframeId;
        this.Logger.LogVal('this.HostIframeId', this.HostIframeId);
        this.InitMutationObserver();
        this.Logger.InstantiateEnd(Subject_ContentEditorTreeMutatedEvent_Subject_ContentEditorTreeMutatedEvent.name);
    }
    InitMutationObserver() {
        this.Logger.FuncStart(this.InitMutationObserver.name);
        try {
            if (this.TreeElement) {
                let self = this;
                let observer = new MutationObserver((mutations) => { self.HandleMutationEvent(mutations); });
                observer.observe(this.TreeElement, { attributes: true, subtree: true, childList: true });
            }
        }
        catch (err) {
            throw (err);
        }
        this.Logger.FuncEnd(this.InitMutationObserver.name);
    }
    GetMutatedNode(mutation) {
        let candidateNode = null;
        if (mutation.attributeName === 'class') {
            let mutatedElement = (mutation.target);
            this.Logger.Log(mutatedElement.classList.toString());
            this.Logger.Log(mutatedElement.id);
            this.Logger.Log('mutated');
            let parent = mutatedElement.parentElement;
            if (parent) {
                candidateNode = new ContentEditorTreeNodeProxy_ContentEditorTreeNodeProxy(this.Logger, parent);
                this.Logger.Log(mutation.target.innerText);
            }
            else {
                this.Logger.WarningAndContinue(this.GetMutatedNode.name, 'no parent found for ' + mutatedElement.id);
            }
        }
        return candidateNode;
    }
    HandleMutationEvent(mutations) {
        mutations.forEach((mutation) => {
            let candidateNode = this.GetMutatedNode(mutation);
            if (candidateNode) {
                if (candidateNode.IsActive()) {
                    let payload = {
                        MutatedElement: (mutation.target),
                        ActiveNode: candidateNode,
                        AssociatedIframeElemId: this.HostIframeId
                    };
                    this.NotifyObservers(payload);
                }
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/ContentEditor/ContentEditorTreeProxy/ContentEditorTreeProxy.js
var ContentEditorTreeProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class ContentEditorTreeProxy_ContentEditorTreeProxy extends LoggableBase {
    constructor(logger, associatedDoc, settingsAgent, hostIframeId) {
        super(logger);
        this.MutationCallbacks = [];
        this.Logger.InstantiateStart(ContentEditorTreeProxy_ContentEditorTreeProxy.name);
        this.AssociatedDoc = associatedDoc;
        this.SettingsAgent = settingsAgent;
        this.HostIframeId = hostIframeId;
        this.InitCeTreeProxy();
        this.Logger.InstantiateEnd(ContentEditorTreeProxy_ContentEditorTreeProxy.name);
    }
    GetTreeHolderElem() {
        if (!this.__treeHolderElem) {
            this.__treeHolderElem = this.AssociatedDoc.ContentDoc.querySelector(ContentConst.Const.Selector.SC.Desktop.ContentTreeHolder);
        }
        return this.__treeHolderElem;
    }
    InitCeTreeProxy() {
        this.Logger.FuncStart(this.InitCeTreeProxy.name);
        let setting = this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.AutoRenameCeButton);
        if (setting && setting.ValueAsBool()) {
            this.TreeMutationEvent = new Subject_ContentEditorTreeMutatedEvent_Subject_ContentEditorTreeMutatedEvent(this.Logger, this.GetTreeHolderElem(), this.HostIframeId);
        }
        this.Logger.FuncEnd(this.InitCeTreeProxy.name);
    }
    AddListenerToTreeMutationEvent(callback) {
        this.Logger.FuncStart(this.AddListenerToTreeMutationEvent.name);
        this.TreeMutationEvent.RegisterObserver(callback);
        this.MutationCallbacks.push(callback);
        this.Logger.FuncEnd(this.AddListenerToTreeMutationEvent.name);
    }
    GetTreeNodeByGlyph(targetNode, dataOneDocTarget) {
        this.Logger.FuncStart(this.GetTreeNodeByGlyph.name);
        let toReturn = null;
        if (targetNode && dataOneDocTarget) {
            var treeGlyphTargetId = ContentConst.Const.Names.SC.TreeGlyphPrefix + Guid_Guid.WithoutDashes(targetNode.NodeId);
            this.Logger.Log('looking for: ' + treeGlyphTargetId + ' ' + targetNode.NodeFriendly + ' in ' + Guid_Guid.AsShort(dataOneDocTarget.DocId));
            var foundOnPageTreeGlyph = dataOneDocTarget.ContentDoc.getElementById(treeGlyphTargetId);
            if (foundOnPageTreeGlyph) {
                this.Logger.Log('Found it');
                toReturn = new ContentEditorTreeNodeProxy_ContentEditorTreeNodeProxy(this.Logger, foundOnPageTreeGlyph);
            }
            else {
                this.Logger.Log('Not Found');
            }
        }
        this.Logger.FuncEnd(this.GetTreeNodeByGlyph.name);
        return toReturn;
    }
    WaitForAndRestoreManyAllNodes(storageData, targetDoc) {
        return ContentEditorTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForAndRestoreManyAllNodes.name, Guid_Guid.AsShort(targetDoc.DocId));
            let iterHelper = new IterationDrone_IterationDrone(this.Logger, this.WaitForAndRestoreManyAllNodes.name);
            while (storageData.AllTreeNodeAr.length > 0 && iterHelper.DecrementAndKeepGoing()) {
                var nextNode = storageData.AllTreeNodeAr.shift();
                yield this.WaitForAndRestoreOneNode(targetDoc, nextNode);
            }
            this.Logger.FuncEnd(this.WaitForAndRestoreManyAllNodes.name);
        });
    }
    WaitForAndRestoreOneNode(dataOneDocTarget, newData) {
        return ContentEditorTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForAndRestoreOneNode.name, Guid_Guid.AsShort(dataOneDocTarget.DocId));
            try {
                var iterHelper = new IterationDrone_IterationDrone(this.Logger, this.WaitForAndRestoreOneNode.name);
                let foundOnPageProxy = null;
                while (!foundOnPageProxy && iterHelper.DecrementAndKeepGoing()) {
                    foundOnPageProxy = this.GetTreeNodeByGlyph(newData, dataOneDocTarget);
                    if (foundOnPageProxy) {
                        foundOnPageProxy.RestoreStateNode(newData, dataOneDocTarget);
                    }
                    else {
                        this.Logger.Log('not Found...waiting: ');
                        yield iterHelper.Wait();
                    }
                }
            }
            catch (err) {
                throw (this.WaitForAndRestoreOneNode.name + ' | ' + err);
            }
            this.Logger.FuncEnd(this.WaitForAndRestoreOneNode.name, Guid_Guid.AsShort(dataOneDocTarget.DocId));
        });
    }
    WalkNodeRecursive(targetNode, depth) {
        var toReturn = [];
        depth = depth - 1;
        if (targetNode) {
            var firstImg = targetNode.querySelector(ContentConst.Const.Selector.SC.ContentTreeNodeGlyph);
            if (firstImg) {
                let treeNodeProxy = new ContentEditorTreeNodeProxy_ContentEditorTreeNodeProxy(this.Logger, firstImg);
                if (treeNodeProxy.IsContentTreeNode) {
                    if (treeNodeProxy.IsExpanded || treeNodeProxy.IsActive) {
                        let newData = treeNodeProxy.GetStateNode();
                        var apparentId = firstImg.id.replace(ContentConst.Const.Names.SC.TreeGlyphPrefix, '');
                        newData.NodeId = Guid_Guid.ParseGuid(apparentId, true);
                        toReturn.push(newData);
                    }
                    else {
                        this.Logger.Log('no first img');
                    }
                }
            }
            var childNodes = targetNode.children;
            if (childNodes && childNodes.length > 0 && depth > 0) {
                for (var jdx = 0; jdx < childNodes.length; jdx++) {
                    var oneChild = childNodes[jdx];
                    toReturn = toReturn.concat(this.WalkNodeRecursive(oneChild, depth));
                }
            }
        }
        return toReturn;
    }
    GetRootNode() {
        this.Logger.LogVal('Looking for node ID: ', ContentConst.Const.ElemId.sc.SitecoreRootNodeId);
        let toReturn = this.AssociatedDoc.ContentDoc.getElementById(ContentConst.Const.ElemId.sc.SitecoreRootNodeId);
        return toReturn;
    }
    GetTreeState() {
        return new Promise((resolve, reject) => {
            let toReturnOneTreeState = {
                AllTreeNodeAr: this.GetOneLiveTreeData(),
                ActiveNode: null,
                Id: null
            };
            toReturnOneTreeState.ActiveNode = this.GetActiveNode(toReturnOneTreeState.AllTreeNodeAr);
            if (toReturnOneTreeState) {
                resolve(toReturnOneTreeState);
            }
            else {
                reject('todo why would this fail?');
            }
        });
    }
    GetActiveNode(allTreeNodeAr) {
        let toReturn = null;
        if (allTreeNodeAr) {
            for (var idx = 0; idx < allTreeNodeAr.length; idx++) {
                let candidate = allTreeNodeAr[idx];
                if (candidate.IsActive) {
                    toReturn = candidate;
                    break;
                }
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.GetActiveNode.name, 'No tree data provided');
        }
        return toReturn;
    }
    GetOneLiveTreeData() {
        this.Logger.FuncStart(this.GetOneLiveTreeData.name);
        var toReturn = [];
        if (this.AssociatedDoc) {
            var rootNode = this.GetRootNode();
            if (rootNode) {
                this.Logger.Log('rootNode: ' + rootNode.innerHTML);
                var rootParent = rootNode.parentElement;
                toReturn = this.WalkNodeRecursive(rootParent, ContentConst.Const.MaxIter);
                this.Logger.Log('foundNodes count: ' + toReturn.length);
            }
            else {
                this.Logger.ErrorAndThrow(this.GetOneLiveTreeData.name, 'no root node');
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.GetOneLiveTreeData.name, 'no targetDoc');
        }
        this.Logger.FuncEnd(this.GetOneLiveTreeData.name);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentEditorProxy.js
var ContentEditorProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class ContentEditorProxy_ContentEditorProxy extends LoggableBase {
    constructor(associatedDoc, logger, settingsAgent, parentIframeId) {
        super(logger);
        this.ParentIframeId = '';
        this.Logger.InstantiateStart(ContentEditorProxy_ContentEditorProxy.name);
        this.SettingsAgent = settingsAgent;
        this.AssociatedId = Guid_Guid.NewRandomGuid();
        this.AssociatedDoc = associatedDoc;
        this.ParentIframeId = parentIframeId;
        this.AssociatedTreeProxy = new ContentEditorTreeProxy_ContentEditorTreeProxy(this.Logger, this.AssociatedDoc, this.SettingsAgent, this.ParentIframeId);
        this.ValidateDoc();
        this.Logger.InstantiateEnd(ContentEditorProxy_ContentEditorProxy.name);
    }
    ValidateDoc() {
        this.Logger.FuncStart(this.ValidateDoc.name);
        if (!this.AssociatedDoc) {
            this.Logger.ErrorAndThrow(this.ValidateDoc.name, 'No doc provided');
        }
        else if (!this.AssociatedDoc.ContentDoc) {
            this.Logger.ErrorAndThrow(this.ValidateDoc.name, 'No content doc');
        }
        else if (!this.AssociatedDoc.ContentDoc.URL) {
            this.Logger.ErrorAndThrow(this.ValidateDoc.name, 'No URL');
        }
        else if (this.AssociatedDoc.ContentDoc.URL === SharedConst.Const.UrlSuffix.AboutBlank) {
            this.Logger.ErrorAndThrow(this.ValidateDoc.name, SharedConst.Const.UrlSuffix.AboutBlank + ' not allowed');
        }
        this.Logger.LogVal('URL', this.AssociatedDoc.ContentDoc.URL);
        this.Logger.FuncEnd(this.ValidateDoc.name);
    }
    WaitForReadyAssociatedDocandInit() {
        return ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForReadyAssociatedDocandInit.name);
            try {
                let recipeBasics = new RecipeBasics_RecipeBasics(this.Logger);
                yield recipeBasics.WaitForPageReadyNative(this.AssociatedDoc)
                    .catch((err) => this.Logger.ErrorAndThrow(this.WaitForReadyAssociatedDocandInit.name, err));
            }
            catch (e) {
            }
            this.Logger.FuncEnd(this.WaitForReadyAssociatedDocandInit.name);
        });
    }
    AddListenerToActiveNodeChange(callback) {
        this.Logger.FuncStart(this.AddListenerToActiveNodeChange.name);
        if (this.AssociatedTreeProxy) {
            this.AssociatedTreeProxy.AddListenerToTreeMutationEvent(callback);
        }
        else {
            this.Logger.WarningAndContinue(this.AddListenerToActiveNodeChange.name, 'no associated tree proxy');
        }
        this.Logger.FuncEnd(this.AddListenerToActiveNodeChange.name);
    }
    SetStateTree(oneTreeState) {
        return ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.SetStateTree.name);
                if (oneTreeState) {
                    yield this.SetStateDesktopIframeProxy(oneTreeState)
                        .then(() => resolve())
                        .catch((err) => {
                        this.Logger.LogAsJsonPretty('oneTreeState', oneTreeState);
                        this.Logger.ErrorAndThrow(this.SetStateTree.name, 'bad data');
                        reject((this.SetStateTree.name + " " + err));
                    });
                }
                this.Logger.FuncEnd(this.SetStateTree.name);
            }));
        });
    }
    SetCompactCss() {
        this.Logger.FuncStart(this.SetCompactCss.name, Guid_Guid.AsShort(this.AssociatedDoc.DocId));
        this.Logger.FuncStart(this.SetCompactCss.name, Guid_Guid.AsShort(this.AssociatedDoc.DocId));
    }
    SetStateDesktopIframeProxy(dataToRestore) {
        return ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.SetStateDesktopIframeProxy.name, Guid_Guid.AsShort(this.AssociatedDoc.DocId));
                this.Logger.Log('Node Count in storage data: ' + dataToRestore.AllTreeNodeAr.length);
                yield this.AssociatedTreeProxy.WaitForAndRestoreManyAllNodes(dataToRestore, this.AssociatedDoc)
                    .then(() => resolve(true))
                    .catch((err) => reject(this.SetStateDesktopIframeProxy.name + " " + err));
                this.Logger.FuncEnd(this.SetStateDesktopIframeProxy.name);
            }));
        });
    }
    GetStateTree() {
        return new Promise((resolve, reject) => ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetStateTree.name);
            yield this.AssociatedTreeProxy.GetTreeState()
                .then((result) => {
                result.Id = this.AssociatedId;
                resolve(result);
            })
                .catch((err) => reject(this.GetStateTree.name + ' ' + err));
            this.Logger.FuncEnd(this.GetStateTree.name);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/ContentApi/Recipes/RecipeAddContentEditorToDesktop/RecipeAddContentEditorToDesktop.js





class RecipeAddContentEditorToDesktop_RecipeAddNewContentEditorToDesktop extends LoggableBase {
    constructor(logger, targetDoc, settingsAgent, ceButtonTabAgent) {
        super(logger);
        this.TargetDoc = targetDoc;
        this.SettingsAgent = settingsAgent;
        this.DesktopTabButtonAgent = ceButtonTabAgent;
    }
    Execute() {
        return new Promise((resolve, reject) => {
            let allIframeDataAtBeginning;
            let newIframeProxy;
            let iframeHelper = new IframeHelper_IframeHelper(this.Logger);
            let recipeBasics = new RecipeBasics_RecipeBasics(this.Logger);
            iframeHelper.GetHostedIframes(this.TargetDoc)
                .then((result) => allIframeDataAtBeginning = result)
                .then(() => recipeBasics.RaceWaitAndClick(ContentConst.Const.Selector.SC.scStartButton, this.TargetDoc))
                .then(() => recipeBasics.WaitForThenClick([ContentConst.Const.Selector.SC.StartMenuLeftOption], this.TargetDoc))
                .then(() => recipeBasics.WaitForNewIframe(allIframeDataAtBeginning, this.TargetDoc))
                .then((result) => newIframeProxy = result)
                .then(() => recipeBasics.WaitForReadyIframe(newIframeProxy))
                .then((result) => {
                let toReturn = new ContentEditorProxy_ContentEditorProxy(result.GetContentDoc(), this.Logger, this.SettingsAgent, result.IframeElem.id);
                resolve(toReturn);
            })
                .catch((err) => reject(this.Execute.name + ' ' + err));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/ContentApi/Recipes/RecipePublishActiveCe/RecipePublishActiveCe.js
var RecipePublishActiveCe_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class RecipePublishActiveCe_RecipePublishActiveCe extends _RecipeBase_RecipeBase {
    constructor(commandData, factoryHelp) {
        super(commandData);
        this.FactoryHelp = factoryHelp;
    }
    Execute() {
        return new Promise((resolve, reject) => RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            yield this.PublishActiveCE(this.ScWinMan.GetTopLevelDoc())
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    GetDocToPublish(currentWindowType, targetDoc) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetDocToPublish.name);
                try {
                    if (currentWindowType === ScWindowType.Desktop) {
                        yield this.RecipeBasics.GetTopLevelIframe(targetDoc)
                            .then((topIframe) => resolve(topIframe.GetContentDoc()))
                            .catch((err) => reject(err));
                    }
                    else {
                        resolve(this.ScWinMan.GetTopLevelDoc());
                    }
                }
                catch (err) {
                    reject(this.GetDocToPublish.name + ' ' + err);
                }
                this.Logger.FuncEnd(this.GetDocToPublish.name);
            }));
        });
    }
    PublishActiveCE(targetDoc) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.PublishActiveCE.name);
            try {
                var currentWindowType = this.ScWinMan.GetCurrentPageType();
                yield this.GetDocToPublish(currentWindowType, targetDoc)
                    .then((docToPublish) => this.PublishCE(docToPublish))
                    .catch((err) => { throw (err); });
            }
            catch (err) {
                throw (this.PublishActiveCE.name + ' ' + err);
            }
            this.Logger.FuncEnd(this.PublishActiveCE.name);
        });
    }
    __debugDataPublishChain(dataPublishChain, nickname) {
        this.Logger.FuncStart(this.__debugDataPublishChain.name, nickname);
        this.Logger.LogVal('docToPublish', this.Logger.IsNullOrUndefined(dataPublishChain.docToPublish));
        this.Logger.LogVal('jqIframe', this.Logger.IsNullOrUndefined(dataPublishChain.jqIframe) + ' ' + (dataPublishChain.jqIframe ? dataPublishChain.jqIframe.IframeElem.src : ''));
        this.Logger.LogVal('Iframe0blueIframe', this.Logger.IsNullOrUndefined(dataPublishChain.Iframe0Blue) + ' ' + (dataPublishChain.Iframe0Blue ? dataPublishChain.Iframe0Blue.IframeElem.src : ''));
        this.Logger.LogVal('messageDialogIframeRed', this.Logger.IsNullOrUndefined(dataPublishChain.messageDialogIframeRed) + ' ' + (dataPublishChain.messageDialogIframeRed ? dataPublishChain.messageDialogIframeRed.IframeElem.src : ''));
        this.Logger.FuncEnd(this.__debugDataPublishChain.name);
        return dataPublishChain;
    }
    PublishCE(docToPublish) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.PublishCE.name);
            try {
                var dataPublishChain = {
                    docToPublish: docToPublish,
                    TopLevelDoc: this.ScWinMan.GetTopLevelDoc(),
                    Iframe0Blue: null,
                    jqIframe: null,
                    messageDialogIframeRed: null
                };
                yield this.ClickPublishOnNav(dataPublishChain)
                    .then((dataPublishChain) => this.ClickMenuButtonPublishDropDown(dataPublishChain))
                    .then((dataPublishChain) => this.ClickMenuDropDownPublishItem(dataPublishChain))
                    .then((dataPublishChain) => this.GetThePublishItemDialog(dataPublishChain))
                    .then((dataPublishChain) => this.GetDialogIframe0Blue(dataPublishChain))
                    .then((dataPublishChain) => this.__WaitForAndClickPublishNextButton(dataPublishChain))
                    .then((dataPublishChain) => this.GetMessageDialog(dataPublishChain))
                    .then((dataPublishChain) => this.__waitForAndClickOk(dataPublishChain))
                    .then((dataPublishChain) => this.__waitForAndClickClose(dataPublishChain))
                    .catch(ex => {
                    this.Logger.ErrorAndThrow(this.PublishCE.name, ex);
                });
            }
            catch (err) {
                throw (this.PublishCE.name + ' ' + err);
            }
            this.Logger.FuncEnd(this.PublishCE.name);
        });
    }
    ClickPublishOnNav(payload) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.ClickPublishOnNav.name);
            try {
                yield this.RecipeBasics.WaitForThenClick([ContentConst.Const.Selector.SC.NavPublishStrip], payload.docToPublish);
                yield this.RecipeBasics.WaitForThenClick([ContentConst.Const.Selector.SC.NavPublishStrip], payload.docToPublish);
            }
            catch (err) {
                throw (this.ClickPublishOnNav.name + ' ' + err);
            }
            this.Logger.FuncEnd(this.ClickPublishOnNav.name);
            return payload;
        });
    }
    __waitForAndClickClose(dataPublishChain) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            yield this.RecipeBasics.WaitForAndReturnFoundElem(dataPublishChain.Iframe0Blue.GetContentDoc(), ContentConst.Const.Selector.SC.Publish.SettingsHidden)
                .then(() => RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
                yield this.RecipeBasics.WaitForAndReturnFoundElem(dataPublishChain.Iframe0Blue.GetContentDoc(), ContentConst.Const.Selector.SC.Publish.TheItemHasBeenPublished, SharedConst.Const.IterHelper.MaxCount.OverridePublishing);
            }))
                .then(() => RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
                yield this.RecipeBasics.WaitForThenClick([ContentConst.Const.Selector.SC.Cancel], dataPublishChain.Iframe0Blue.GetContentDoc());
            }));
            return dataPublishChain;
        });
    }
    __waitForAndClickOk(dataPublishChain) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            yield this.RecipeBasics.WaitForThenClick([ContentConst.Const.Selector.SC.Ok], dataPublishChain.messageDialogIframeRed.GetContentDoc());
            return dataPublishChain;
        });
    }
    __WaitForAndClickPublishNextButton(dataPublishChain) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            yield this.RecipeBasics.WaitForThenClick([ContentConst.Const.Selector.SC.NextButton], dataPublishChain.Iframe0Blue.GetContentDoc());
            return dataPublishChain;
        });
    }
    ClickMenuButtonPublishDropDown(payload = null) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            yield this.RecipeBasics.WaitForThenClick([ContentConst.Const.Selector.SC.MenuButtonPublish], payload.docToPublish);
            return payload;
        });
    }
    ClickMenuDropDownPublishItem(payload = null) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            return yield this.RecipeBasics.WaitForAndClickWithPayload(ContentConst.Const.Selector.SC.MenuDropDownPublishItem, payload.docToPublish, payload);
        });
    }
    GetThePublishItemDialog(dataPublishChain = null) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            yield this.RecipeBasics.WaitForAndReturnFoundElem(dataPublishChain.TopLevelDoc, ContentConst.Const.Selector.SC.JqueryModalDialogsFrame)
                .then((found) => {
                dataPublishChain.jqIframe = this.FactoryHelp.DataOneIframeFactory(found, 'jqIframe');
                return dataPublishChain;
            })
                .then((payload) => RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
                yield this.RecipeBasics.WaitForReadyIframe(payload.jqIframe);
                dataPublishChain = payload;
            }));
            return dataPublishChain;
        });
    }
    GetMessageDialog(dataPublishChain) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            let toReturnPublishChain = dataPublishChain;
            yield this.RecipeBasics.WaitForIframeElemAndReturnWhenReady(dataPublishChain.jqIframe.GetContentDoc(), ContentConst.Const.Selector.SC.ContentIFrame1, 'iframeRed')
                .then((result) => toReturnPublishChain.messageDialogIframeRed = result)
                .catch((err) => this.Logger.ErrorAndThrow(this.GetMessageDialog.name, err));
            return toReturnPublishChain;
        });
    }
    GetDialogIframe0Blue(dataPublishChain = null) {
        return RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetDialogIframe0Blue.name);
                let promiseResult = new PromiseResult(this.GetDialogIframe0Blue.name, this.Logger);
                this.Logger.LogAsJsonPretty('dataPublishChain', dataPublishChain);
                yield this.RecipeBasics.WaitForIframeElemAndReturnWhenReady(dataPublishChain.jqIframe.GetContentDoc(), ContentConst.Const.Selector.SC.ContentIframe0, 'Iframe0Blue')
                    .then((result) => {
                    this.Logger.MarkerC();
                    dataPublishChain.Iframe0Blue = result;
                    promiseResult.MarkSuccessful();
                })
                    .catch((err) => promiseResult.MarkFailed(err));
                this.Logger.LogAsJsonPretty('dataPublishChain.Iframe0Blue', dataPublishChain.Iframe0Blue);
                this.Logger.FuncEnd(this.GetDialogIframe0Blue.name);
                if (promiseResult.WasSuccessful()) {
                    resolve(dataPublishChain);
                }
                else {
                    reject(promiseResult.RejectReasons);
                }
            }));
        });
    }
    __waitForThenFunc(selector, targetDoc, dataPublishChain, optionFunc) {
        return new Promise((resolve, reject) => RecipePublishActiveCe_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.__waitForThenFunc.name, selector);
            this.Logger.LogAsJsonPretty(this.__waitForThenFunc.name, targetDoc);
            var found = null;
            yield this.RecipeBasics.WaitForAndReturnFoundElem(targetDoc, selector)
                .then((result) => found = result);
            if (found) {
                this.Logger.Log('found');
                if (optionFunc) {
                    this.Logger.Log('executing func');
                    dataPublishChain = yield optionFunc(found, dataPublishChain);
                }
                this.__debugDataPublishChain(dataPublishChain, this.__waitForThenFunc.name);
                this.Logger.FuncEnd(this.__waitForThenFunc.name, selector);
                resolve(dataPublishChain);
            }
            else {
                reject('not found');
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/ContentApi/Recipes/RecipeRemoveItemFromStorage/RecipeRemoveItemFromStorage.js
var RecipeRemoveItemFromStorage_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class RecipeRemoveItemFromStorage_RecipeRemoveItemFromStorage extends _RecipeBase_RecipeBase {
    constructor(commandData, toastAgent) {
        super(commandData);
        this.ToastAgent = toastAgent;
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeRemoveItemFromStorage_awaiter(this, void 0, void 0, function* () {
            yield this.AtticAgent.RemoveSnapshotFromStorageById(this.TargetSnapShotId)
                .then(() => {
                this.ToastAgent.PopUpToastNotification(this.ScWinMan.GetTopLevelDoc(), "Success");
                resolve();
            })
                .catch((err) => reject(err));
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/ContentApi/Recipes/RecipeRestore/RecipeRestore.js
var RecipeRestore_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class RecipeRestore_RecipeRestoreState extends LoggableBase {
    constructor(logger, scUrlAgent, atticAgent, topLevelDoc, scWinRecipeParts, oneDesktopMan, toastAgent, oneCEAgent, targetSnapShotId) {
        super(logger);
        this.ScUrlAgent = scUrlAgent;
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.Logger);
        this.AtticAgent = atticAgent;
        this.TopLevelDoc = topLevelDoc;
        this.ScWinRecipeParts = scWinRecipeParts;
        this.OneDesktopMan = oneDesktopMan;
        this.OneCeAgent = oneCEAgent;
        this.ToastAgent = toastAgent;
        this.TargetSnapShotId = targetSnapShotId;
    }
    Execute() {
        return RecipeRestore_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeRestore_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.Execute.name);
                try {
                    if (this.TargetSnapShotId) {
                        this.Logger.LogVal("IdOfSelect", this.TargetSnapShotId);
                        var dataOneWindowStorage;
                        yield this.AtticAgent.GetFromStorageById(this.TargetSnapShotId)
                            .then((result) => dataOneWindowStorage = result)
                            .catch((err) => reject(err));
                        if (dataOneWindowStorage) {
                            var self = this;
                            var targetDoc = this.TopLevelDoc;
                            if (targetDoc) {
                                yield this.ScWinRecipeParts.RestoreStateToTargetDoc(targetDoc, dataOneWindowStorage, this.OneDesktopMan, this.OneCeAgent)
                                    .then(() => resolve())
                                    .catch((err) => reject(err));
                            }
                            else {
                                reject(this.Execute.name + ' no target window');
                            }
                        }
                    }
                    else {
                        reject(this.Execute.name + ' No IdOfSelect');
                    }
                }
                catch (err) {
                    reject(err);
                }
                this.Logger.FuncEnd(this.Execute.name);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/ContentApi/Recipes/RecipeToggleFavorite/RecipeToggleFavorite.js
var RecipeToggleFavorite_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class RecipeToggleFavorite_RecipeToggleFavorite extends _RecipeBase_RecipeBase {
    constructor(commandData) {
        super(commandData);
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeToggleFavorite_awaiter(this, void 0, void 0, function* () {
            if (this.TargetSnapShotId) {
                yield this.AtticAgent.GetFromStorageById(this.TargetSnapShotId)
                    .then((result) => {
                    if (result.Flavor === SnapShotFlavor.Favorite) {
                        result.Flavor = SnapShotFlavor.Manual;
                    }
                    else {
                        result.Flavor = SnapShotFlavor.Favorite;
                    }
                    this.AtticAgent.WriteToStorage(result);
                })
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }
            else {
                reject('no targetId');
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/ContentAPIManager/ContentAPIManager.js
var ContentAPIManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};









class ContentAPIManager_ContentAPIManager extends LoggableBase {
    constructor(logger, toastAgent, scUiMan, scWinMan) {
        super(logger);
        this.Logger.FuncStart(ContentAPIManager_ContentAPIManager.name);
        this.ToastAgent = toastAgent;
        this.ScUiMan = scUiMan;
        this.ScWinMan = scWinMan;
        this.FactoryHelp = new FactoryHelper_FactoryHelper(this.Logger);
        this.Logger.FuncEnd(ContentAPIManager_ContentAPIManager.name);
    }
    GetContentState() {
        return new Promise((resolve, reject) => ContentAPIManager_awaiter(this, void 0, void 0, function* () {
            yield this.ScWinMan.GetScWindowStateA()
                .then((result) => resolve(result))
                .catch((err) => reject(err));
        }));
    }
    Notify(payloadData) {
        return new Promise((resolve, reject) => ContentAPIManager_awaiter(this, void 0, void 0, function* () {
            this.ToastAgent.PopUpToastNotification(this.ScWinMan.GetTopLevelDoc(), payloadData.ScreenMessage);
        }));
    }
    AddCETab(commandData) {
        return new Promise((resolve, reject) => ContentAPIManager_awaiter(this, void 0, void 0, function* () {
            yield new RecipeAddContentEditorToDesktop_RecipeAddNewContentEditorToDesktop(commandData.Logger, commandData.TargetDoc, commandData.SettingsAgent, commandData.DesktopProxy.ConEdTabButtonAgent).Execute()
                .then(() => {
                this.ToastAgent.PopUpToastNotification(commandData.ScWinMan.GetTopLevelDoc(), "Success");
                resolve();
            })
                .catch((err) => reject(err));
        }));
    }
    PublischActiveCE(commandData) {
        return new Promise((resolve, reject) => ContentAPIManager_awaiter(this, void 0, void 0, function* () {
            yield new RecipePublishActiveCe_RecipePublishActiveCe(commandData, this.FactoryHelp).Execute()
                .then(() => resolve)
                .catch((err) => reject(err));
        }));
    }
    RemoveSnapShot(commandData) {
        return ContentAPIManager_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentAPIManager_awaiter(this, void 0, void 0, function* () {
                let recipe = new RecipeRemoveItemFromStorage_RecipeRemoveItemFromStorage(commandData, commandData.ToastAgent);
                yield recipe.Execute()
                    .then(resolve)
                    .catch((err) => reject(err));
            }));
        });
    }
    SaveWindowState(commandData) {
        return ContentAPIManager_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentAPIManager_awaiter(this, void 0, void 0, function* () {
                let recipe = new RecipeSaveState_RecipeSaveState(commandData);
                yield recipe.Execute()
                    .then(resolve)
                    .catch((err) => reject(err));
            }));
        });
    }
    ToggleCompactCss(payloadData) {
        return ContentAPIManager_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentAPIManager_awaiter(this, void 0, void 0, function* () {
                yield this.ToggleCompactCss(payloadData)
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }));
        });
    }
    RestoreSnapshop(commandData) {
        return new Promise((resolve, reject) => ContentAPIManager_awaiter(this, void 0, void 0, function* () {
            let recipe = new RecipeRestore_RecipeRestoreState(commandData.Logger, commandData.ScWinMan.GetScUrlAgent(), commandData.AtticAgent, commandData.ScWinMan.GetTopLevelDoc(), commandData.ScWinMan.MakeScWinRecipeParts(), commandData.ScWinMan.DesktopUiProxy, commandData.ToastAgent, commandData.ScWinMan.CeProxy, commandData.TargetSnapShotId);
            yield recipe.Execute()
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    OpenContentEditor() {
        throw new Error("Method not implemented.");
    }
    MarkFavorite(commandData) {
        return new Promise((resolve, reject) => ContentAPIManager_awaiter(this, void 0, void 0, function* () {
            yield new RecipeToggleFavorite_RecipeToggleFavorite(commandData).Execute()
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    Ping(payloadData) {
        return new Promise((resolve, reject) => ContentAPIManager_awaiter(this, void 0, void 0, function* () {
            resolve(MsgFlag.RespListeningAndReady);
        }));
    }
    AdminB() {
        this.ScUiMan.AdminB(this.ScWinMan.GetTopLevelDoc(), null);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/ContentMessageManager/ContentMessageManager.js
var ContentMessageManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class ContentMessageManager_ContentMessageManager extends LoggableBase {
    constructor(logger, scWinMan, contentMessageBroker) {
        super(logger);
        this.Logger.FuncStart(ContentMessageManager_ContentMessageManager.name);
        this.ScWinMan = scWinMan;
        this.ContentMessageBroker = contentMessageBroker;
        this.Logger.FuncEnd(ContentMessageManager_ContentMessageManager.name);
    }
    InitContentMessageManager() {
        this.Logger.FuncStart(this.InitContentMessageManager.name + ' ' + ContentMessageManager_ContentMessageManager.name);
        this.ContentMessageBroker.BeginListening();
        this.Logger.FuncEnd(this.InitContentMessageManager.name);
    }
    ToggleCompactCss(Data) {
        return new Promise((resolve, reject) => ContentMessageManager_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.ToggleCompactCss.name);
            var targetDoc = this.ScWinMan.GetTopLevelDoc();
            if (targetDoc) {
                var self = this;
                yield this.ScWinMan.SetCompactCss(targetDoc)
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }
            this.Logger.FuncEnd(this.ToggleCompactCss.name);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/DefaultScWindowState.js

class DefaultScWindowState_DefaultScWindowState {
    constructor() {
        this.DesktopState = null;
        this.SnapShotsMany = {
            CurrentSnapShots: [],
            FavoriteCount: 0,
            SnapShotsAutoCount: 0,
            PlainCount: 0,
            Birthday: new Date(1970),
        };
        this.LastReq = MsgFlag.Unknown;
        this.ErrorStack = [];
        this.LastReqSuccessful = false;
        this.ActiveCe = null;
    }
}
;

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/ContentApi/Recipes/RecipeInitFromQueryStr/RecipeInitFromQueryStr.js
var RecipeInitFromQueryStr_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class RecipeInitFromQueryStr_RecipeInitFromQueryStr extends LoggableBase {
    constructor(logger, scUrlAgent, atticAgent, topLevelDoc, scWinRecipeParts, oneDesktopMan, toastAgent, oneCEAgent) {
        super(logger);
        this.ScUrlAgent = scUrlAgent;
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.Logger);
        this.AtticAgent = atticAgent;
        this.TopLevelDoc = topLevelDoc;
        this.ScWinRecipeParts = scWinRecipeParts;
        this.OneDesktopMan = oneDesktopMan;
        this.OneCeAgent = oneCEAgent;
        this.ToastAgent = toastAgent;
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeInitFromQueryStr_awaiter(this, void 0, void 0, function* () {
            yield this.InitFromQueryString()
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    InitFromQueryString() {
        return RecipeInitFromQueryStr_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeInitFromQueryStr_awaiter(this, void 0, void 0, function* () {
                if (this.ScUrlAgent.QueryStringHasKey(QueryStrKey.hsTargetSs)) {
                    let qsValue = (this.ScUrlAgent.GetQueryStringValueByKey(QueryStrKey.hsTargetSs));
                    let targetGuid = Guid_Guid.ParseGuid(qsValue, false);
                    if (targetGuid && targetGuid !== GuidData_GuidData.GetEmptyGuid()) {
                        this.Logger.LogVal("targetGuid", targetGuid.Raw);
                        var dataOneWindowStorage;
                        if (this.TopLevelDoc) {
                            yield this.AtticAgent.GetFromStorageById(targetGuid)
                                .then((result) => dataOneWindowStorage = result)
                                .then(() => this.RecipeBasics.WaitForPageReadyNative(this.TopLevelDoc))
                                .then(() => this.ScWinRecipeParts.RestoreStateToTargetDoc(this.TopLevelDoc, dataOneWindowStorage, this.OneDesktopMan, this.OneCeAgent))
                                .then(() => resolve())
                                .catch((err) => reject(this.InitFromQueryString.name + ' ' + err));
                        }
                        else {
                            reject(this.InitFromQueryString.name + ' no targetDoc');
                        }
                    }
                    else {
                        reject('Either no snapshot provided or an illegal one was found');
                    }
                }
                else {
                    this.Logger.Log('Does not have qs target');
                    resolve();
                }
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Agents/DesktopTabButtonAgent/DesktopTabButtonAgent.js
var DesktopTabButtonAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






class DesktopTabButtonAgent_DesktopTabButtonAgent extends LoggableBase {
    constructor(logger, ownerDesktopProxy) {
        super(logger);
        this.CeProxies = [];
        this.Logger.InstantiateStart(DesktopTabButtonAgent_DesktopTabButtonAgent.name);
        this.OwnerDesktopProxy = ownerDesktopProxy;
        this.EnrollListenerForActiveNodeChange();
        this.Logger.InstantiateEnd(DesktopTabButtonAgent_DesktopTabButtonAgent.name);
    }
    GetIframeHelper() {
        if (this.__iframeHelper == null) {
            this.__iframeHelper = new IframeHelper_IframeHelper(this.Logger);
        }
        return this.__iframeHelper;
    }
    GetStartAssociatedStartBarButton(iframeElemId) {
        let startBarButtonElemId = ContentConst.Const.Names.Desktop.StartBarApplicationPrefix + iframeElemId;
        let querySelectBtn = '[id=' + startBarButtonElemId + ']';
        let foundStartBarButton = this.OwnerDesktopProxy.GetAssociatedDoc().ContentDoc.querySelector(querySelectBtn);
        return foundStartBarButton;
    }
    ChangeStartBarButtonText(targetButton, text) {
        this.Logger.FuncStart(this.ChangeStartBarButtonText.name);
        if (targetButton) {
            let currentInnerHtml = targetButton.querySelector('div').querySelector('span').innerHTML;
            let currentInnerText = targetButton.querySelector('div').querySelector('span').innerText;
            let newInnerHtml = currentInnerHtml.replace(currentInnerText, text);
            targetButton.querySelector('div').querySelector('span').innerHTML = newInnerHtml;
        }
        this.Logger.FuncEnd(this.ChangeStartBarButtonText.name);
    }
    EnrollListenerForActiveNodeChange() {
        return DesktopTabButtonAgent_awaiter(this, void 0, void 0, function* () {
            try {
                yield this.GetIframeHelper().GetHostedIframes(this.OwnerDesktopProxy.GetAssociatedDoc())
                    .then((foundIframes) => {
                    for (var idx = 0; idx < foundIframes.length; idx++) {
                        let iframe = foundIframes[idx];
                        let foundStartBarButton = this.GetStartAssociatedStartBarButton(iframe.IframeElem.id);
                        this.ChangeStartBarButtonText(foundStartBarButton, 'dog');
                    }
                });
            }
            catch (err) {
                throw (err);
            }
        });
    }
    CallBackConEdProxyAdded(payload) {
        this.Logger.FuncStart(this.CallBackConEdProxyAdded.name);
        if (payload) {
            if (this.CeProxies.indexOf(payload.NewCeProxy) < 0) {
                this.CeProxies.push(payload.NewCeProxy);
                let self = this;
                payload.NewCeProxy.AddListenerToActiveNodeChange((payload) => { self.CallbackNodeChanged(payload); });
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.CallBackConEdProxyAdded.name, 'Null ceProxy');
        }
        this.Logger.FuncEnd(this.CallBackConEdProxyAdded.name);
    }
    CallbackNodeChanged(payload) {
        this.Logger.FuncStart(this.CallbackNodeChanged.name);
        if (payload) {
            this.Logger.LogAsJsonPretty('data', payload);
            this.Logger.LogVal('target Iframe Id', payload.AssociatedIframeElemId);
            let iframeElement = this.OwnerDesktopProxy.GetAssociatedDoc().ContentDoc.getElementById(payload.AssociatedIframeElemId);
            if (iframeElement) {
                if (payload.ActiveNode) {
                    let foundStartBarButton = this.GetStartAssociatedStartBarButton(payload.AssociatedIframeElemId);
                    let bufferedString = StaticHelpers_StaticHelpers.BufferString(payload.ActiveNode.GetFriendlyNameFromNode(), ContentConst.Const.Numbers.Desktop.MaxToolBarNameChars, BufferChar.space, BufferDirection.right);
                    this.ChangeStartBarButtonText(foundStartBarButton, bufferedString);
                }
            }
            else {
                this.Logger.ErrorAndContinue(this.CallbackNodeChanged.name, 'Did not find iframe');
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.CallbackNodeChanged.name, 'Null payload');
        }
        this.Logger.FuncEnd(this.CallbackNodeChanged.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/ContentApi/Recipes/RecipeRestoreDesktop/RecipeRestoreDesktop.js
var RecipeRestoreDesktop_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class RecipeRestoreDesktop_RecipeRestoreDesktop extends LoggableBase {
    constructor(logger, targetDoc, dataToRestore, settingsAgent, ceButtonTabAgent) {
        super(logger);
        this.Logger.InstantiateStart(RecipeRestoreDesktop_RecipeRestoreDesktop.name);
        this.MiscAgent = new MiscAgent_MiscAgent(this.Logger);
        this.TargetDoc = targetDoc;
        this.DataToRestore = dataToRestore;
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.Logger);
        this.SettingsAgent = settingsAgent;
        this.DesktopTabButtonTabAgent = ceButtonTabAgent;
        this.Logger.InstantiateEnd(RecipeRestoreDesktop_RecipeRestoreDesktop.name);
    }
    Execute() {
        return RecipeRestoreDesktop_awaiter(this, void 0, void 0, function* () {
            yield this.RunOneChain();
        });
    }
    __restoreDataToOneIframe(oneTreeState, targetCeAgent) {
        return new Promise((resolve, reject) => RecipeRestoreDesktop_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.__restoreDataToOneIframe.name);
            yield targetCeAgent.SetStateTree(oneTreeState)
                .then(() => resolve())
                .catch((err) => reject(err));
            this.Logger.FuncEnd(this.__restoreDataToOneIframe.name);
        }));
    }
    RunOneChain() {
        return RecipeRestoreDesktop_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeRestoreDesktop_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.RunOneChain.name);
                if (this.MiscAgent.NotNullOrUndefined([this.TargetDoc, this.DataToRestore], this.RunOneChain.name)) {
                    var conEditProxy;
                    let recipeAddCe = new RecipeAddContentEditorToDesktop_RecipeAddNewContentEditorToDesktop(this.Logger, this.TargetDoc, this.SettingsAgent, this.DesktopTabButtonTabAgent);
                    yield recipeAddCe.Execute()
                        .then((result) => conEditProxy = result)
                        .then(() => conEditProxy.WaitForReadyAssociatedDocandInit())
                        .then(() => this.__restoreDataToOneIframe(this.DataToRestore, conEditProxy))
                        .then(() => resolve())
                        .catch(ex => {
                        reject(this.RunOneChain.name + ' ' + ex);
                    });
                }
                else {
                    reject(this.RunOneChain.name + ' missing data');
                }
                this.Logger.FuncEnd(this.RunOneChain.name);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/Desktop/DesktopStartBarProxy/DesktopStartBarProxy.js


class DesktopStartBarProxy_DesktopStartBarProxy extends LoggableBase {
    constructor(logger, hostDoc) {
        super(logger);
        this.HostDoc = hostDoc;
    }
    GetStartBarButtonById(targetId) {
        return this.HostDoc.ContentDoc.querySelector('[id=' + targetId + ']');
    }
    GetStartBarElement() {
        if (!this.__statBarElem) {
            this.__statBarElem = this.HostDoc.ContentDoc.querySelector(ContentConst.Const.Selector.SC.Desktop.DtStartBar);
        }
        return this.__statBarElem;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/Desktop/DesktopProxy/Events/Subject_DesktopIframeProxyMutatedEvent/Subject_DesktopIframeProxyMutatedEvent.js

class Subject_DesktopIframeProxyMutatedEvent_Subject_DesktopIframeProxyMutatedEvent extends Subject_GenericEvent_Subject_GenericEvent {
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/ContentEditor/ContentEditorProxy/DesktopIframeProxy.js
var DesktopIframeProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class DesktopIframeProxy_DesktopIframeProxy extends LoggableBase {
    constructor(logger, oneIframe, settingsAgent) {
        super(logger);
        this.SettingsAgent = settingsAgent;
        this.NewCeProxy = new ContentEditorProxy_ContentEditorProxy(oneIframe.GetContentDoc(), this.Logger, this.SettingsAgent, oneIframe.IframeElem.id);
    }
    WaitForReadyAssociatedDocandInit() {
        return DesktopIframeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                yield this.NewCeProxy.WaitForReadyAssociatedDocandInit();
            }
            catch (err) {
                throw (this.WaitForReadyAssociatedDocandInit.name + ' ' + err);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/Desktop/DesktopProxy/DesktopIframeProxyBucket.js
var DesktopIframeProxyBucket_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class DesktopIframeProxyBucket_DesktopIframeProxyBucket extends LoggableBase {
    constructor(logger, desktopDocument, settingsAgent) {
        super(logger);
        this.CeProxies = [];
        this.Logger.InstantiateStart(DesktopIframeProxyBucket_DesktopIframeProxyBucket.name);
        this.AssociatedDesktopDoc = desktopDocument;
        this.SettingsAgent = settingsAgent;
        this.DesktopIframeProxyAddedEvent = new Subject_DesktopIframeProxyMutatedEvent_Subject_DesktopIframeProxyMutatedEvent(this.Logger);
        this.Logger.InstantiateEnd(DesktopIframeProxyBucket_DesktopIframeProxyBucket.name);
    }
    GetIframeHelper() {
        if (this.__iframeHelper == null) {
            this.__iframeHelper = new IframeHelper_IframeHelper(this.Logger);
        }
        return this.__iframeHelper;
    }
    AddDesktopIframeProxy(desktopIframeProxy) {
        this.Logger.FuncStart(this.AddDesktopIframeProxy.name);
        let newCeProxy = desktopIframeProxy.NewCeProxy;
        if (this.CeProxies.indexOf(newCeProxy) < 0) {
            this.CeProxies.push(newCeProxy);
            let payload = {
                NewCeProxy: newCeProxy
            };
            this.DesktopIframeProxyAddedEvent.NotifyObservers(payload);
        }
        else {
            this.Logger.WarningAndContinue(this.AddDesktopIframeProxy.name, 'Proxy already exists in bucket');
        }
        this.Logger.FuncEnd(this.AddDesktopIframeProxy.name);
    }
    AddToBucketFromIframeProxy(oneIframe) {
        return DesktopIframeProxyBucket_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DesktopIframeProxyBucket_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.AddToBucketFromIframeProxy.name);
                let desktopIframeProxy = new DesktopIframeProxy_DesktopIframeProxy(this.Logger, oneIframe, this.SettingsAgent);
                yield desktopIframeProxy.WaitForReadyAssociatedDocandInit()
                    .then(() => this.AddDesktopIframeProxy(desktopIframeProxy))
                    .then(() => resolve())
                    .catch((err) => reject(this.AddToBucketFromIframeProxy.name + ' | ' + err));
                this.Logger.FuncEnd(this.AddToBucketFromIframeProxy.name);
            }));
        });
    }
    InitHostedContentEditors() {
        return DesktopIframeProxyBucket_awaiter(this, void 0, void 0, function* () {
            try {
                yield this.GetIframeHelper().GetHostedIframes(this.AssociatedDesktopDoc)
                    .then((foundIframes) => {
                    foundIframes.forEach((oneIframe) => DesktopIframeProxyBucket_awaiter(this, void 0, void 0, function* () {
                        this.AddToBucketFromIframeProxy(oneIframe);
                    }));
                })
                    .catch((err) => { throw (err); });
            }
            catch (err) {
                this.Logger.ErrorAndThrow(this.InitHostedContentEditors.name, err);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/Desktop/DesktopProxy/Events/DesktopDomChangedEvent/Subject_DesktopDomChangedEvent.js

class Subject_DesktopDomChangedEvent_Subject_DesktopDomChangedEvent extends Subject_GenericEvent_Subject_GenericEvent {
    constructor(logger, targetDoc) {
        super(logger);
        this.Logger.InstantiateStart(Subject_DesktopDomChangedEvent_Subject_DesktopDomChangedEvent.name);
        this.AssociatedDoc = targetDoc;
        this.InitMutationObserver();
        this.Logger.InstantiateEnd(Subject_DesktopDomChangedEvent_Subject_DesktopDomChangedEvent.name);
    }
    HandleMutationEvent(mutations) {
        mutations.forEach((mutation) => {
            if (mutation.type === 'childList') {
                this.Logger.LogVal('mutation.type', mutation.type);
                this.Logger.Log('added nodes');
                let mutatedElement = (mutation.target);
                this.Logger.Log('-----> ' + mutatedElement.id);
                let addedIframes = [];
                mutation.addedNodes.forEach((addedNode) => {
                    if (addedNode instanceof HTMLIFrameElement) {
                        addedIframes.push(addedNode);
                    }
                });
                let message = {
                    MutatedElement: mutatedElement,
                    AddedIframes: addedIframes
                };
                this.NotifyObservers(message);
            }
        });
    }
    InitMutationObserver() {
        this.Logger.FuncStart(this.InitMutationObserver.name);
        try {
            if (this.AssociatedDoc) {
                let self = this;
                let observer = new MutationObserver((mutations) => { self.HandleMutationEvent(mutations); });
                let desktop = this.AssociatedDoc.ContentDoc.getElementById('Desktop');
                if (desktop) {
                    observer.observe(desktop, { attributes: false, subtree: false, childList: true });
                }
            }
            else {
                this.Logger.ErrorAndThrow(this.InitMutationObserver.name, 'no TreeHolder Elem');
            }
        }
        catch (err) {
            throw (err);
        }
        this.Logger.FuncEnd(this.InitMutationObserver.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/Desktop/DesktopProxy/DesktopProxy.js
var DesktopProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};









class DesktopProxy_DesktopProxy extends LoggableBase {
    constructor(logger, miscAgent, associatedDoc, settingsAgent) {
        super(logger);
        this.Logger.InstantiateStart(DesktopProxy_DesktopProxy.name);
        this.MiscAgent = miscAgent;
        this.SettingsAgent = settingsAgent;
        this.AssociatedDoc = associatedDoc;
        this.DesktopIframeProxyBucket = new DesktopIframeProxyBucket_DesktopIframeProxyBucket(this.Logger, this.AssociatedDoc, this.SettingsAgent);
        this.ConEdTabButtonAgent = new DesktopTabButtonAgent_DesktopTabButtonAgent(this.Logger, this);
        let self = this;
        this.DesktopIframeProxyBucket.DesktopIframeProxyAddedEvent.RegisterObserver((conEditProxy) => self.ConEdTabButtonAgent.CallBackConEdProxyAdded(conEditProxy));
        this.Subject_DomChangedEvent = new Subject_DesktopDomChangedEvent_Subject_DesktopDomChangedEvent(this.Logger, this.AssociatedDoc);
        this.Subject_DomChangedEvent.RegisterObserver((payload) => { self.Observer_DesktopDomChangedEvent(payload); });
        this.DesktopIframeProxyBucket.InitHostedContentEditors();
        this.Logger.InstantiateEnd(DesktopProxy_DesktopProxy.name);
    }
    Observer_DesktopDomChangedEvent(payload) {
        this.Logger.Log("The desktop DOM changed - probably an iframe has been added");
        if (payload && payload.AddedIframes.length > 0) {
            payload.AddedIframes.forEach((iframeElement) => DesktopProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.LogVal('added iframe id', iframeElement.id);
                let iframeProxy = new IDataOneIframe_IframeProxy(this.Logger, iframeElement, iframeElement.id);
                yield iframeProxy.WaitForReady()
                    .then(() => this.DesktopIframeProxyBucket.AddToBucketFromIframeProxy(iframeProxy));
            }));
        }
        this.Logger.LogAsJsonPretty('payload', payload);
    }
    GetAssociatedDoc() {
        return this.AssociatedDoc;
    }
    GetDtStartBarAgent() {
        if (!this._dtStartBarAgent) {
            this._dtStartBarAgent = new DesktopStartBarProxy_DesktopStartBarProxy(this.Logger, this.AssociatedDoc);
        }
        return this._dtStartBarAgent;
    }
    GetIframeHelper() {
        if (this.__iframeHelper == null) {
            this.__iframeHelper = new IframeHelper_IframeHelper(this.Logger);
        }
        return this.__iframeHelper;
    }
    GetStateDesktop() {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DesktopProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetStateDesktop.name);
                this.Logger.LogAsJsonPretty(this.GetStateDesktop.name, this.AssociatedDoc);
                var toReturnDesktopState = this.CreateNewDtDataShell();
                yield this.GetIframeHelper().GetHostedIframes(this.AssociatedDoc)
                    .then((result) => toReturnDesktopState.HostedIframes = result)
                    .then(() => {
                    if (toReturnDesktopState.HostedIframes && toReturnDesktopState.HostedIframes.length > 0) {
                        for (var iframeIdx = 0; iframeIdx < toReturnDesktopState.HostedIframes.length; iframeIdx++) {
                            this.Logger.LogVal('iframeIdx: ', iframeIdx);
                            var iframeProxy = toReturnDesktopState.HostedIframes[iframeIdx];
                            var ceAgent = new ContentEditorProxy_ContentEditorProxy(iframeProxy.GetContentDoc(), this.Logger, this.SettingsAgent, iframeProxy.IframeElem.id);
                            this.Logger.MarkerA();
                            ceAgent.GetStateTree()
                                .then((oneCeState) => {
                                toReturnDesktopState.HostedContentEditors.push(oneCeState);
                                if (iframeProxy.GetZindex() === 1) {
                                    toReturnDesktopState.ActiveCEAgent = ceAgent;
                                    toReturnDesktopState.ActiveCeState = oneCeState;
                                }
                            })
                                .catch((err) => this.Logger.ErrorAndThrow(this.GetStateDesktop.name, err));
                        }
                    }
                })
                    .then(() => resolve(toReturnDesktopState))
                    .catch((err) => reject(err));
                this.Logger.FuncEnd(this.GetStateDesktop.name);
            }));
        });
    }
    SetStateDesktop(targetDoc, dataToRestore) {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DesktopProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.SetStateDesktop.name);
                ;
                if (this.MiscAgent.NotNullOrUndefined([targetDoc, dataToRestore, dataToRestore.AllCEAr], this.SetStateDesktop.name)) {
                    for (var idx = 0; idx < dataToRestore.AllCEAr.length; idx++) {
                        let targetData = dataToRestore.AllCEAr[idx];
                        this.Logger.Log('Restoring ' + (idx + 1) + ":" + dataToRestore.AllCEAr.length + ' active node: ' + targetData.ActiveNode.NodeFriendly);
                        var recipe = new RecipeRestoreDesktop_RecipeRestoreDesktop(this.Logger, targetDoc, targetData, this.SettingsAgent, this.ConEdTabButtonAgent);
                        yield recipe.Execute()
                            .catch((err) => reject(err));
                    }
                    resolve();
                }
                else {
                    reject(this.SetStateDesktop.name + ' bad data');
                }
                this.Logger.FuncEnd(this.SetStateDesktop.name);
            }));
        });
    }
    CreateNewDtDataShell() {
        var toReturn = {
            HostedContentEditors: [],
            HostedIframes: [],
            ActiveCEAgent: null,
            ActiveCeState: null
        };
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/ScWindowManager/ScWindowRecipePartials.js
var ScWindowRecipePartials_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class ScWindowRecipePartials_ScWindowRecipePartials extends LoggableBase {
    constructor(logger, toastAgent) {
        super(logger);
        this.ToastAgent = toastAgent;
    }
    RestoreStateToTargetDoc(targetDoc, dataToRestore, desktopProxy, OneCEAgent) {
        return ScWindowRecipePartials_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScWindowRecipePartials_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.RestoreStateToTargetDoc.name);
                if (dataToRestore) {
                    if (dataToRestore.WindowType == ScWindowType.Desktop) {
                        yield desktopProxy.SetStateDesktop(targetDoc, dataToRestore)
                            .then(() => this.ToastAgent.PopUpToastNotification(targetDoc, 'Restore Completed'))
                            .then(() => resolve())
                            .catch((err) => reject(err));
                    }
                    else if (dataToRestore.WindowType === ScWindowType.ContentEditor) {
                        yield OneCEAgent.SetStateDesktopIframeProxy(dataToRestore.AllCEAr[0])
                            .then(() => this.ToastAgent.PopUpToastNotification(targetDoc, 'Restore Completed'))
                            .then(() => resolve())
                            .catch((err) => reject(err));
                    }
                    else {
                        reject(this.RestoreStateToTargetDoc.name + 'Data not restored. Not in Desktop or Content Editor');
                    }
                }
                else {
                    reject(this.RestoreStateToTargetDoc.name + " No data found to restore");
                }
                reject(this.RestoreStateToTargetDoc.name + ' : unknown reason');
                this.Logger.FuncEnd(this.RestoreStateToTargetDoc.name);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/ScWindowManager/ScWindowManager.js
var ScWindowManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};









class ScWindowManager_ScWindowManager extends LoggableBase {
    constructor(logger, scUiMan, miscAgent, toastAgent, atticAgent, scUrlAgent, settingsAgent) {
        super(logger);
        this.DesktopUiProxy = null;
        this.CeProxy = null;
        this.Logger.InstantiateStart(ScWindowManager_ScWindowManager.name);
        this.MiscAgent = miscAgent;
        this.ToastAgent = toastAgent;
        this.AtticAgent = atticAgent;
        this.ScUrlAgent = scUrlAgent;
        this.SettingsAgent = settingsAgent;
        this.Logger.InstantiateEnd(ScWindowManager_ScWindowManager.name);
    }
    MakeScWinRecipeParts() {
        return new ScWindowRecipePartials_ScWindowRecipePartials(this.Logger, this.ToastAgent);
    }
    GetCurrentStateByPageType(scWindowType) {
        return new Promise((resolve, reject) => ScWindowManager_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetCurrentStateByPageType.name, StaticHelpers_StaticHelpers.ScWindowTypeFriendly(scWindowType));
            if (scWindowType === ScWindowType.Desktop) {
                this.DesktopUiProxy.GetStateDesktop()
                    .then((result) => resolve(result.ActiveCeState))
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }
            else if (scWindowType === ScWindowType.ContentEditor) {
                yield this.CeProxy.GetStateTree()
                    .then((result) => resolve(result))
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }
            else if (scWindowType === ScWindowType.LoginPage
                || scWindowType === ScWindowType.Launchpad
                || scWindowType === ScWindowType.Edit
                || scWindowType === ScWindowType.Preview
                || scWindowType === ScWindowType.Normal) {
                resolve(null);
            }
            else {
                reject('unknown page type ' + StaticHelpers_StaticHelpers.ScWindowTypeFriendly(scWindowType));
            }
            this.Logger.FuncEnd(this.GetCurrentStateByPageType.name);
        }));
    }
    GetScUrlAgent() {
        return this.ScUrlAgent;
    }
    GetCurrentPageType() {
        return this.ScUrlAgent.GetScWindowType();
    }
    InitScWindowManager() {
        return ScWindowManager_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.InitScWindowManager.name);
            try {
                let currPageType = this.GetCurrentPageType();
                if (currPageType === ScWindowType.Desktop) {
                    this.DesktopUiProxy = new DesktopProxy_DesktopProxy(this.Logger, this.MiscAgent, this.GetTopLevelDoc(), this.SettingsAgent);
                }
                else if (currPageType === ScWindowType.ContentEditor) {
                    this.CeProxy = new ContentEditorProxy_ContentEditorProxy(this.GetTopLevelDoc(), this.Logger, this.SettingsAgent, null);
                    yield this.CeProxy.WaitForReadyAssociatedDocandInit();
                }
                yield this.InitFromQueryStr()
                    .catch((err) => {
                    throw (this.InitScWindowManager.name + ' ' + err);
                });
            }
            catch (err) {
                throw (this.InitScWindowManager.name + ' ' + err);
            }
            this.Logger.FuncEnd(this.InitScWindowManager.name);
        });
    }
    GetTopLevelDoc() {
        if (!this.TopDoc) {
            this.TopDoc = {
                ContentDoc: window.document,
                DocId: Guid_Guid.NewRandomGuid(),
                Nickname: 'top doc'
            };
        }
        return this.TopDoc;
    }
    InitFromQueryStr() {
        return ScWindowManager_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.InitFromQueryStr.name);
            try {
                let recipe = new RecipeInitFromQueryStr_RecipeInitFromQueryStr(this.Logger, this.GetScUrlAgent(), this.AtticAgent, this.GetTopLevelDoc(), this.MakeScWinRecipeParts(), this.DesktopUiProxy, this.ToastAgent, this.CeProxy);
                yield recipe.Execute();
                this.Logger.FuncEnd(this.InitFromQueryStr.name);
            }
            catch (err) {
                throw (err);
            }
        });
    }
    SetCompactCss(targetDoc) {
        return ScWindowManager_awaiter(this, void 0, void 0, function* () {
            yield this.CeProxy.SetCompactCss();
        });
    }
    CreateShellIDataScWindowState(windowType, flavor) {
        this.Logger.FuncStart(this.CreateShellIDataScWindowState.name);
        var dateToUse = new Date();
        var newGuid = Guid_Guid.NewRandomGuid();
        var activeWindowSnapShot = {
            TimeStamp: dateToUse,
            TimeStampFriendly: StaticHelpers_StaticHelpers.MakeFriendlyDate(dateToUse),
            WindowType: windowType,
            WindowFriendly: windowType[windowType],
            AllCEAr: [],
            GuidId: newGuid,
            NickName: '',
            RawData: null,
            Flavor: flavor,
        };
        this.Logger.FuncEnd(this.CreateShellIDataScWindowState.name);
        return activeWindowSnapShot;
    }
    PopulateIfTopIsContentEditor(scWindowState) {
        return ScWindowManager_awaiter(this, void 0, void 0, function* () {
            try {
                if (this.GetCurrentPageType() === ScWindowType.ContentEditor) {
                    let ceAgent = new ContentEditorProxy_ContentEditorProxy(this.GetTopLevelDoc(), this.Logger, this.SettingsAgent, null);
                    yield ceAgent.WaitForReadyAssociatedDocandInit()
                        .then(() => ceAgent.GetStateTree())
                        .then((state) => {
                        scWindowState.AllCEAr.push(state);
                    })
                        .catch((err) => { throw (err); });
                }
            }
            catch (err) {
                this.Logger.ErrorAndThrow(this.PopulateIfTopIsContentEditor.name, err);
            }
        });
    }
    PopulateIfTopIsDeskTop(scWindowState) {
        return ScWindowManager_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.PopulateIfTopIsDeskTop.name);
            try {
                if (this.GetCurrentPageType() === ScWindowType.Desktop) {
                    this.Logger.MarkerB();
                    this.DesktopUiProxy.GetStateDesktop()
                        .then((states) => {
                        scWindowState.AllCEAr = states.HostedContentEditors;
                    })
                        .catch((err) => { throw (err); });
                }
            }
            catch (err) {
                this.Logger.ErrorAndThrow(this.PopulateIfTopIsContentEditor.name, err);
            }
            this.Logger.FuncEnd(this.PopulateIfTopIsDeskTop.name);
        });
    }
    GetScWindowStateA() {
        return new Promise((resolve, reject) => ScWindowManager_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetScWindowStateA.name);
            let toReturnScWindowState = new DefaultScWindowState_DefaultScWindowState();
            yield this.AtticAgent.GetAllSnapShotsMany()
                .then((result) => toReturnScWindowState.SnapShotsMany = result)
                .then(() => toReturnScWindowState.ErrorStack = this.Logger.ErrorStack)
                .then(() => this.GetCurrentStateByPageType(this.GetCurrentPageType()))
                .then((result) => {
                toReturnScWindowState.ActiveCe = result;
                resolve(toReturnScWindowState);
            })
                .catch((err) => reject(err));
            this.Logger.FuncEnd(this.GetScWindowStateA.name);
        }));
    }
    GetScWindowStateB(targetSnapShotFlavor) {
        return new Promise((resolve, reject) => ScWindowManager_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetScWindowStateB.name);
            let currentPageType = this.GetCurrentPageType();
            var scWindowState = this.CreateShellIDataScWindowState(currentPageType, targetSnapShotFlavor);
            yield this.PopulateIfTopIsContentEditor(scWindowState)
                .then(() => this.PopulateIfTopIsDeskTop(scWindowState))
                .then(() => resolve(scWindowState))
                .catch((err) => reject(err));
            this.Logger.FuncEnd(this.GetScWindowStateB.name);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/SitecoreUiManager/SitecoreUiManager.js
var SitecoreUiManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class SitecoreUiManager_ScUiManager extends LoggableBase {
    constructor(logger) {
        super(logger);
    }
    InitSitecoreUiManager() {
        return SitecoreUiManager_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.InitSitecoreUiManager.name);
            try {
                this.InjectCss();
            }
            catch (err) {
                throw (err);
            }
            this.Logger.FuncEnd(this.InitSitecoreUiManager.name);
        });
    }
    InjectCss() {
        const style = document.createElement('link');
        style.type = 'text/css';
        style.href = browser.extension.getURL('AutoBuild/final/content.min.css');
        style.rel = "stylesheet";
        document.getElementsByTagName("head")[0].appendChild(style);
    }
    AdminB(targetDoc, callbackOnComplete) {
        this.Logger.FuncStart(this.AdminB.name, 'targetDoc: ' + Guid_Guid.AsShort(targetDoc.DocId));
        this.Logger.Log('callback passed: ' + (callbackOnComplete !== null));
        var userNameElem = targetDoc.ContentDoc.getElementById(ContentConst.Const.ElemId.sc.scLoginUserName);
        var passwordElem = targetDoc.ContentDoc.getElementById(ContentConst.Const.ElemId.sc.scLoginPassword);
        if (this.Logger.IsNotNullOrUndefinedBool('userNameElem', userNameElem)
            &&
                this.Logger.IsNotNullOrUndefinedBool('passwordElem', passwordElem)) {
            userNameElem.setAttribute('value', ContentConst.Const.Names.scDefaultAdminUserName);
            passwordElem.setAttribute('value', ContentConst.Const.Names.scDefaultAdminPassword);
            var loginButton = this.GetLoginButton(targetDoc);
            if (this.Logger.IsNotNullOrUndefinedBool('loginButton', loginButton)) {
                this.Logger.Log('clicking');
                loginButton.click();
                if (callbackOnComplete) {
                    this.Logger.Log('Triggering callback');
                    setTimeout(callbackOnComplete, ContentConst.Const.Timeouts.PostLoginBtnClick);
                }
                else {
                    this.Logger.Log('no callback passed');
                }
            }
            else {
                this.Logger.ErrorAndThrow(this.AdminB.name, 'No loginButton');
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.AdminB.name, 'No Username or password field');
        }
        this.Logger.FuncEnd(this.AdminB.name);
    }
    GetLoginButton(targetDoc) {
        this.Logger.FuncStart(this.GetLoginButton.name);
        var toReturn = targetDoc.ContentDoc.getElementById(ContentConst.Const.ElemId.sc.scLoginBtn.sc920);
        if (!toReturn) {
            toReturn = targetDoc.ContentDoc.querySelector(ContentConst.Const.Selector.SC.LoginBtn.sc820);
        }
        this.Logger.Log('toReturn: ' + toReturn);
        this.Logger.FuncEnd(this.GetLoginButton.name);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/zContentEntryPoint.js
var zContentEntryPoint_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



















class zContentEntryPoint_ContentEntry {
    Main() {
        return zContentEntryPoint_awaiter(this, void 0, void 0, function* () {
            yield this.InstantiateAndInitLoggerAndSettings()
                .then(() => this.InstantiateAndInitAgents())
                .then(() => this.InstantiateAndInitManagers())
                .catch((err) => this.Logger.ErrorAndThrow(this.Main.name, err));
            this.Logger.SectionMarker('Initialize Managers');
        });
    }
    InstantiateAndInitManagers() {
        return zContentEntryPoint_awaiter(this, void 0, void 0, function* () {
            this.Logger.SectionMarker('Instantiate and Initialize Managers');
            let scUiMan;
            let contentMessageMan;
            let scWinMan;
            scWinMan = new ScWindowManager_ScWindowManager(this.Logger, scUiMan, this.MiscAgent, this.ToastAgent, this.AtticAgent, this.ScUrlAgent, this.SettingsAgent);
            scUiMan = new SitecoreUiManager_ScUiManager(this.Logger);
            this.ContentAPIMan = new ContentAPIManager_ContentAPIManager(this.Logger, this.ToastAgent, scUiMan, scWinMan);
            let contentMessageBroker = new ContentMessageBroker_ContentMessageBroker(this.Logger, this.SettingsAgent, this.ContentAPIMan, this.AtticAgent, this.ToastAgent, scUiMan, scWinMan);
            contentMessageMan = new ContentMessageManager_ContentMessageManager(this.Logger, scWinMan, contentMessageBroker);
            yield scUiMan.InitSitecoreUiManager()
                .then(() => contentMessageMan.InitContentMessageManager())
                .then(() => scWinMan.InitScWindowManager())
                .then(() => {
                let autoSnapShotAgent = new AutoSnapShotAgent_AutoSnapShotAgent(this.Logger, this.SettingsAgent, scWinMan, this.AtticAgent, scUiMan, this.ToastAgent);
                autoSnapShotAgent.ScheduleIntervalTasks();
            })
                .then(() => this.Logger.Log('Init success'))
                .catch((err) => this.Logger.ErrorAndThrow('Content Entry Point', err));
        });
    }
    InstantiateAndInitAgents() {
        return zContentEntryPoint_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.SectionMarker('Instantiate Agents');
                this.AtticAgent = new ContentAtticAgent_ContentAtticAgent(this.RepoAgent, this.Logger);
                this.MiscAgent = new MiscAgent_MiscAgent(this.Logger);
                this.ScUrlAgent = new ScUrlAgent_ScUrlAgent(this.Logger);
                this.ToastAgent = new ToastAgent(this.Logger);
                yield this.ScUrlAgent.InitScUrlAgent()
                    .then(() => this.AtticAgent.InitContentAtticManager(this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.AutoSaveRetainDays).ValueAsInt()))
                    .catch((err) => { throw (err); });
            }
            catch (err) {
                this.Logger.ErrorAndThrow(this.InstantiateAndInitAgents.name, err);
            }
        });
    }
    InitLogging() {
        this.Logger.FuncStart(this.InitLogging.name);
        let enableLogger = this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.EnableLogging);
        if (enableLogger.ValueAsBool() || SharedConst.Const.Debug.ForceLoggingEnabled) {
            let consoleLogWrite = new LoggerConsoleWriter();
            var RollingLogId = new RollingLogIdDrone_RollingLogIdDrone(this.SettingsAgent, this.Logger);
            let storageLogWriter = new LoggerStorageWriter();
            var nextLogId = RollingLogId.GetNextLogId();
            storageLogWriter.SetLogToStorageKey(nextLogId);
            this.Logger.AddWriter(consoleLogWrite);
            this.Logger.AddWriter(storageLogWriter);
        }
        this.Logger.FlushBuffer();
        this.Logger.FuncEnd(this.InitLogging.name);
    }
    InstantiateAndInitLoggerAndSettings() {
        return zContentEntryPoint_awaiter(this, void 0, void 0, function* () {
            this.Logger = new LoggerAgent_LoggerAgent();
            this.RepoAgent = new RepositoryAgent(this.Logger);
            this.SettingsAgent = new SettingsAgent_SettingsAgent(this.Logger, this.RepoAgent);
            var allSettings = new ConstAllSettings_ConstAllSettings().AllSettings;
            this.SettingsAgent.InitSettingsAgent(allSettings);
            this.InitLogging();
        });
    }
}
let contentEntry = new zContentEntryPoint_ContentEntry();
contentEntry.Main();


/***/ })
/******/ ]);