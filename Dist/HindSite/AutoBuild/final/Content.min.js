/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/SharedConst.js
let SharedConst = (() => {
    class SharedConst {
    }
    SharedConst.Const = {
        Colors: {
            colorContent: 'cyan',
            colorLayout: 'lightsteelblue',
            colorMediaLibrary: 'chocolate',
            colorSystem: 'lightgreen',
            colorTemplates: 'white',
        },
        Debug: {
            ForceLoggingEnabled: false,
            SpeedUpAutoSaveIntervalFactor: 3,
        },
        IterHelper: {
            GrowthPerIteration: 0.5,
            MaxCount: {
                Default: 10,
                OverridePublishing: 15,
            },
            Timeouts: {
                Max: 3000,
                Default: 100,
            },
        },
        KeyWords: {
            Html: {
                Tags: {
                    Body: 'body',
                },
                beforeend: 'beforeend',
                optgroup: 'optgroup',
                Checkbox: 'checkbox',
                Checked: 'checked',
                Input: 'input',
                Label: 'label',
                For: 'for',
                Text: 'text',
                Number: 'number',
            },
            Javascript: {
                ReadyStates: {
                    Complete: "complete"
                }
            }
        },
        Logger: {
            MinTimeDiffMs: 100
        },
        ObjDiscriminator: {},
        Settings: {
            Defaults: {
                EnableDebugging: false,
                LogToStorage: false,
                UseCompactCss: false,
                LastUsedLogToStorageKey: 0
            }
        },
        QueryStringHeValues: {
            heTemplateManager: "template%20manager",
        },
        QueryStringKey: {
            XmlControl: 'xmlcontrol',
        },
        Regex: {
            ContentEditor: /Content.*?Editor/ig,
            CleanGuid: /{|-|}/ig,
            NbSp: /&nbsp;/ig,
            QueryStrSeparatorQuest: /\?/gi,
            Path: {
                PackageDesigner: /\/sitecore\/shell/ig,
            },
            PageType: {
                Shell: /\/sitecore\/shell/ig,
                Edit: /sc_itemid=.*sc_mode=edit/ig,
                Normal: /sc_itemid=.*sc_mode=normal/ig,
                Preview: /sc_itemid=.*sc_mode=preview/ig,
                XmlControl: /.*xmlcontrol=Application/ig,
                PackageDesigner: /.*xmlcontrol=Application&.*Package+Designer/ig,
                ContentManager: /\/sitecore\/shell\/Applications\/Content%20Manager/ig,
            },
        },
        UrlSuffix: {
            Desktop: '/sitecore/shell/default.aspx',
            Login: '/sitecore/login',
            LaunchPad: '/client/applications/launchpad',
            CE: '/sitecore/shell/Applications/Content Editor.aspx?sc_bw=1',
            SitecoreShellApplicationsContentEditor: 'sitecore/shell/Applications/Content-Editor',
            None: '/',
            AboutBlank: 'about:blank',
        },
    };
    return SharedConst;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/Agents/Discriminator.js
var Discriminator;
(function (Discriminator) {
    Discriminator[Discriminator["unknown"] = 0] = "unknown";
    Discriminator[Discriminator["ILoggerAgent"] = 1] = "ILoggerAgent";
    Discriminator[Discriminator["IHindeCore"] = 2] = "IHindeCore";
    Discriminator[Discriminator["IErrorHandler"] = 3] = "IErrorHandler";
    Discriminator[Discriminator["TaskMonitor"] = 4] = "TaskMonitor";
})(Discriminator || (Discriminator = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/ErrorHandlerAgent.js
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class ErrorHandlerAgent_ErrorHandlerAgent {
    constructor(taskMonitor) {
        this.Discriminator = Discriminator.IErrorHandler;
        this.ErrorStack = [];
        this.TaskMonitor = taskMonitor;
    }
    Instantiate() {
    }
    ThrowIfNullOrUndefined(title, testSubject) {
        if (testSubject instanceof Array) {
            testSubject.forEach((testSubject) => this.ThrowIfNullOrUndefined(title, testSubject));
        }
        else {
            if (typeof testSubject === 'undefined' || testSubject === null) {
                try {
                    if (this.TaskMonitor) {
                        this.TaskMonitor.RequestCancel();
                    }
                    else {
                        console.log('No Task Monitor found');
                    }
                }
                catch (err) {
                    console.log('Error in: ' + this.ThrowIfNullOrUndefined.name + '  ' + err);
                }
                this.ErrorAndThrow(title, 'Failed Null check A');
            }
            else {
            }
        }
    }
    static ThrowIfNullOrUndefinedStatic(title, testSubject) {
        if (testSubject instanceof Array) {
            testSubject.forEach((testSubject) => ErrorHandlerAgent_ErrorHandlerAgent.ThrowIfNullOrUndefinedStatic(title, testSubject));
        }
        else {
            if (typeof testSubject === 'undefined' || testSubject === null) {
                throw (title + ' Failed Null check B');
            }
        }
    }
    WarningAndContinue(container, text) {
        if (!container) {
            container = 'unknown';
        }
        if (!text) {
            text = 'unknown';
        }
        this.ErrorLogger('');
        this.ErrorLogger('\t\t** WARNING ** ' + container + ' ' + text);
        this.ErrorLogger('');
    }
    DrawErrorMessage(container, text) {
        if (!container) {
            container = 'unknown';
        }
        let textToRender = [];
        if (!text) {
            text = ['unknown'];
        }
        if (!Array.isArray(text)) {
            textToRender = [text];
        }
        else {
            textToRender = text;
        }
        this.ErrorLogger('');
        this.ErrorLogger('\t\ts) ** ERROR ** container: ' + container);
        this.ErrorLogger('');
        textToRender.forEach((message) => {
            this.ErrorStack.push({
                ContainerFunc: container,
                ErrorString: message
            });
            this.ErrorLogger('\t\t' + message);
        });
        this.ErrorLogger('');
        this.ErrorLogger('\t\te)** ERROR container: ** ' + container);
        this.ErrorLogger('');
    }
    ErrorAndContinue(container, text) {
        this.DrawErrorMessage(container, text);
    }
    ErrorLogger(text) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('********** ' + text + ' **********');
        });
    }
    FormatejectMessage(container, err) {
        let toReturn = '';
        let isFirstInArray = true;
        container.forEach((subContainer) => {
            if (!isFirstInArray) {
                toReturn += '.';
            }
            isFirstInArray = false;
            toReturn += subContainer;
        });
        toReturn += ' | ' + err;
        return toReturn;
    }
    ErrorAndThrow(container, text) {
        let stack = new Error().stack;
        let containerTextToRender = '';
        if (Array.isArray(container)) {
            let isFirstInArray = true;
            container.forEach((subContainer) => {
                if (!isFirstInArray) {
                    containerTextToRender += '.';
                }
                isFirstInArray = false;
                containerTextToRender += subContainer;
            });
        }
        else {
            containerTextToRender = container;
        }
        this.DrawErrorMessage(containerTextToRender, [text, stack]);
        try {
            this.TaskMonitor.RequestCancel();
        }
        catch (err) {
            console.log(err);
        }
        throw ('----- sigh...sad face ');
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/_HindeCoreBase.js

class _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore) {
        ErrorHandlerAgent_ErrorHandlerAgent.ThrowIfNullOrUndefinedStatic(_HindeCoreBase_HindeCoreBase.name, [hindeCore]);
        ErrorHandlerAgent_ErrorHandlerAgent.ThrowIfNullOrUndefinedStatic(_HindeCoreBase_HindeCoreBase.name, [hindeCore.Discriminator, hindeCore.ErrorHand, hindeCore.Logger, hindeCore.TaskMonitor]);
        this.Logger = hindeCore.Logger;
        this.HindeCore = hindeCore;
        this.ErrorHand = hindeCore.ErrorHand;
        this.TaskMonitor = hindeCore.TaskMonitor;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Drones/IterationDrone/IterationDrone.js


class IterationDrone_IterationDrone extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, nickname, logThisDroneInstance, maxIterations = null) {
        super(hindeCore);
        this.IsExhaustedMsg = 'Iteration helper exhausted';
        this.LogThisDroneInstance = logThisDroneInstance;
        if (!maxIterations) {
            maxIterations = SharedConst.Const.IterHelper.MaxCount.Default;
        }
        this.MaxIterations = maxIterations;
        this.CurrentIteration = maxIterations;
        this.Timeout = SharedConst.Const.IterHelper.Timeouts.Default;
        this.NickName = nickname;
        this.IsExhausted = false;
    }
    DecrementAndKeepGoing() {
        var toReturn = false;
        if (this.CurrentIteration > 0) {
            this.CurrentIteration -= 1;
            this.Timeout += this.Timeout * SharedConst.Const.IterHelper.GrowthPerIteration;
            if (this.TaskMonitor.IsCancelRequested()) {
                this.ErrorHand.ErrorAndThrow('CANCEL REQUESTED', '-----------------------------------');
            }
            if (this.Timeout > SharedConst.Const.IterHelper.Timeouts.Max) {
                this.Timeout = SharedConst.Const.IterHelper.Timeouts.Max;
            }
            if (this.LogThisDroneInstance) {
                this.Logger.Log(this.DecrementAndKeepGoing.name + ' ' + this.NickName + ' ' + this.CurrentIteration + ':' + this.MaxIterations + ' | cur. timeout: ' + this.Timeout);
            }
            toReturn = true;
        }
        else {
            this.IsExhausted = true;
            this.NotifyExhausted();
            toReturn = false;
        }
        return toReturn;
    }
    CurrentTimeout() {
        return this.Timeout;
    }
    NotifyExhausted() {
        if (this.LogThisDroneInstance) {
            this.Logger.Log('Iteration: ' + this.NickName + ' counter exhausted ' + this.CurrentIteration + ':' + this.MaxIterations);
        }
    }
    WaitAndThen(timeoutFunction) {
        if (this.LogThisDroneInstance) {
            this.Logger.FuncStart(this.WaitAndThen.name, this.NickName + ' ' + timeoutFunction.name);
        }
        var self = this;
        setTimeout(timeoutFunction(), self.Timeout);
        if (this.LogThisDroneInstance) {
            this.Logger.FuncEnd(this.WaitAndThen.name, this.NickName);
        }
    }
    Wait() {
        if (!this.OperationCancelled) {
            return new Promise((resolve) => {
                setTimeout(resolve, this.Timeout);
            });
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/ReadyState.js


class ReadyState_ReadyStateNAB extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, document) {
        super(hindeCore);
        this.IsExausted = '';
        this.ErrorHand.ThrowIfNullOrUndefined(ReadyState_ReadyStateNAB.name, document);
        this.Document = document;
    }
    LogDebugValues() {
        this.Logger.LogVal('IsCompleteNAB', this.IsCompleteNAB());
        this.Logger.LogVal('Ready State', this.DocumentReadtStateFriendly());
        this.Logger.LogVal('document.URL', this.DocUrl());
        this.Logger.LogVal('Is Exhausted', this.IsExausted.toString());
        this.Logger.LogVal('DocIsAboutBlank', this.DocIsAboutBlank().toString());
    }
    DocumentReadtStateFriendly() {
        return 'DocumentReadyState :' + DocReadyState[this.DocumentReadyState()];
    }
    DocIsAboutBlank() {
        return ((this.DocUrl() === SharedConst.Const.UrlSuffix.AboutBlank) || (this.DocUrl() === ''));
    }
    SetDocument(document) {
        this.ErrorHand.ThrowIfNullOrUndefined(this.SetDocument.name, document);
        this.Document = document;
    }
    IsCompleteNAB() {
        return this.DocumentReadyState() === DocReadyState.Complete && !(this.DocIsAboutBlank());
    }
    DocumentReadyState() {
        let toReturn = DocReadyState.ReadyStateUnknown;
        let currentReadyState = document.readyState.toString();
        if (currentReadyState === 'complete') {
            toReturn = DocReadyState.Complete;
        }
        else if (currentReadyState === 'interactive') {
            toReturn = DocReadyState.Interactive;
        }
        else if (currentReadyState === 'loading') {
            toReturn = DocReadyState.Loading;
        }
        return toReturn;
    }
    DocUrl() {
        return this.Document.URL;
    }
}
var DocReadyState;
(function (DocReadyState) {
    DocReadyState[DocReadyState["ReadyStateUnknown"] = 0] = "ReadyStateUnknown";
    DocReadyState[DocReadyState["Complete"] = 1] = "Complete";
    DocReadyState[DocReadyState["Interactive"] = 2] = "Interactive";
    DocReadyState[DocReadyState["Loading"] = 3] = "Loading";
})(DocReadyState || (DocReadyState = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/InjectConst.js
let ContentConst = (() => {
    class ContentConst {
    }
    ContentConst.Const = {
        MaxAutoToSaveCount: 10,
        DefaultMaxAutoSaveAgeDays: 7,
        DefaultAutoRenameCeTabButton: false,
        DefaultShowDebuggingModules: false,
        Iterations: {
            MaxSetHrefEffort: 10,
            MaxIterationSwitchBoard: 20,
        },
        Timeouts: {
            PostLoginBtnClick: 1000,
            SetHrefEffortWait: 1000,
            WaitBeforeRemovingCompleteFlagOnContent: 1500,
            AutoSaveIntervalMin: 1,
        },
        ElemId: {
            SC: {
                PackageDesigner: {
                    StatusText: 'StatusText',
                },
                scLoginPassword: 'Password',
                scLoginUserName: 'UserName',
                SitecoreRootAnchorNodeId: 'Tree_Node_11111111111111111111111111111111',
                SitecoreRootApparentIdRaw: '11111111111111111111111111111111',
                SitecoreRootGlyphId: 'Tree_Glyph_11111111111111111111111111111111',
                scLoginBtn: {
                    sc920: 'LogInBtn',
                    sc820: null
                },
            }
        },
        ClassNames: {
            SC: {
                ContentTreeNode: 'scContentTreeNode',
                scContentTreeNodeActive: 'scContentTreeNodeActive',
                scContentTreeNodeNormal: 'scContentTreeNodeNormal',
            }
        },
        Selector: {
            SC: {
                ContentEditor: {
                    ScContentTreeNodeGlyph: '.scContentTreeNodeGlyph',
                    ScContentTreeNode: '.scContentTreeNode',
                    ScContentTreeContainer: '.scContentTreeContainer',
                    scContentTreeNodeIcon: '.scContentTreeNodeIcon',
                },
                ContentTree: {
                    BuiltIn: {
                        TreeNodeSitecoreRoot: '[id=Tree_Node_11111111111111111111111111111111]',
                        MediaLibraryAnchorRootNode: '[id=Tree_Node_3D6658D8A0BF4E75B3E2D050FABCF4E1]',
                        TemplatesAnchorRootNode: '[id=Tree_Node_3C1715FE6A134FCF845FDE308BA9741D]',
                        LayoutRootAnchorNode: '[id=Tree_Node_EB2E4FFD27614653B05226A64D385227]',
                        SystemRootAnchorNode: '[id=Tree_Node_13D6D6C6C50B4BBDB3312B04F1A58F21]',
                        ContentRootAnchorNode: '[id=Tree_Node_0DE95AE441AB4D019EB067441B7C2450]',
                    }
                },
                PackageDesigner: {
                    Ribbon: {
                        InstallerRibbon_Nav_Package: '[id=InstallerRibbon_Nav_Package]',
                        InstallerRibbon_Toolbar: '[id=InstallerRibbon_Toolbar]',
                        Open: '[title="Open an existing project"]',
                    },
                },
                IdStartsWithTreeNode: '[id^=Tree_Node_]',
                IframeContent: {
                    sc820: null,
                    sc920: 'iframe[src*=Content], iframe[src*=MediaShop]'
                },
                Frames: {
                    ScContentIframeId0: {
                        Cancel: '[id=Cancel]',
                        Filename: '[id=Filename]',
                        Id: '[id=scContentIframeId0]',
                        Ok: '[id=OK]',
                    },
                    AppFrame: {
                        Id: '[id=AppFrame]',
                    },
                    JqueryModalDialogsFrame: {
                        Id: '[id=jqueryModalDialogsFrame]',
                    },
                    scContentIframeId1: {
                        Id: '[id=scContentIframeId1]',
                    }
                },
                NextButton: '[id=NextButton]',
                Ok: '[id=OK]',
                Cancel: '[id=CancelButton]',
                MenuButtonPublish: '[id=B414550BADAF4542C9ADF44BED5FA6CB3E_menu_button]',
                StartMenuLeftOption: 'img[src$="pencil.png"]',
                MediaLibrary: 'img[src$="pictures.png"]',
                TemplateManager: 'img[src$="newspaper.png"]',
                PopUp1: {
                    PackageDesignerButton: 'img[src$="packager.png"]',
                    DevelopmentTools: '[src="/temp/iconcache/apps/24x24/magic-cube.png"]',
                    PackageDesigner: '[id=MenuItem211048689]',
                },
                Publish: {
                    MenuDropDownPublishItem: '[id=B414550BADAF4542C9ADF44BED5FA6CB3E_menu_98719A90225A4802A0625D3967E4DD47]',
                    NavPublishStrip: '[id*=_Nav_PublishStrip]',
                    TheItemHasBeenPublished: '[id=LastPage]:not([style*=\'display:none\'])',
                    SettingsHidden: '[id=Settings][style*=\'display: none\']',
                    PublishingHidden: '[id=Publishing][style*=\'display: none\']',
                },
                LoginBtn: {
                    sc920: null,
                    sc820: 'input.btn',
                },
                scStartButton: {
                    sc920: '[id=StartButton]',
                    sc820: '[id=startButton]'
                },
                Desktop: {
                    DtStartBar: '[id=Startbar]',
                    ContentTreeHolder: '[id=ContentTreeHolder]',
                },
            },
        },
        Storage: {
            SettingsSuffix: '.Settings',
            ShowDebugData: false,
            SnapShotPrefix: 'ScSnapShot.',
            WindowRoot: 'HindSite.',
            SessionKey: 'HindSite.SessionKey',
        },
        Numbers: {
            Desktop: {
                MaxToolBarNameChars: 13,
                TimeNewCEWaitForScOverlayToClearMs: 1500,
            }
        },
        MaxIter: 100,
        MaxNullOrUndefinedIter: 100,
        prop: {
            AllTreeData: 'AllTreeData',
        },
        Names: {
            SC: {
                TreeGlyphPrefix: 'Tree_Glyph_',
                TreeNodePrefix: 'Tree_Node_',
                TreeExpandedPng: {
                    sc920: 'treemenu_expanded.png',
                    sc820: 'todo'
                }
            },
            Desktop: {
                StartBarApplicationPrefix: 'startbar_application_',
            },
            PopUpUi: 'PopUpUi',
            PopUpUiStyles: 'PopUpUiStyles',
            TreeMenuExpandedPng: 'treemenu_expanded.png',
            TreeMenuCollapsedPng: 'treemenu_collapsed.png',
            scDefaultAdminPassword: 'b',
            scDefaultAdminUserName: 'admin',
        }
    };
    return ContentConst;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/FrameJacket.js
var FrameJacket_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class FrameJacket_FrameJacket extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, htmlIframeElement) {
        super(hindeCore);
        this.HtmlIFrameElement = htmlIframeElement;
        this.BuildInstance();
        this.WireInstanceEvents();
    }
    BuildInstance() {
        this.Logger.FuncStart(this.BuildInstance.name, FrameJacket_FrameJacket.name);
        this.DocumentJacket = new DocumentJacket_DocumentJacket(this.HindeCore, this.HtmlIFrameElement.contentDocument);
        this.NativeIframeId = this.HtmlIFrameElement.id;
        this.Logger.FuncEnd(this.BuildInstance.name, FrameJacket_FrameJacket.name);
    }
    WireInstanceEvents() {
    }
    GetUrlJacket() {
        return this.DocumentJacket.UrlJacket;
    }
    SetState(StateOfFrameStyling) {
        return FrameJacket_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.SetState.name, FrameJacket_FrameJacket.name);
            this.HtmlIFrameElement.style.height = StateOfFrameStyling.Height;
            this.HtmlIFrameElement.style.left = StateOfFrameStyling.Left;
            this.HtmlIFrameElement.style.position = StateOfFrameStyling.Position;
            this.HtmlIFrameElement.style.top = StateOfFrameStyling.Top;
            this.HtmlIFrameElement.style.width = StateOfFrameStyling.Width;
            this.HtmlIFrameElement.style.zIndex = StateOfFrameStyling.ZIndex;
            this.Logger.FuncEnd(this.SetState.name, FrameJacket_FrameJacket.name);
        });
    }
    GetState() {
        return FrameJacket_awaiter(this, void 0, void 0, function* () {
            let toReturn = null;
            try {
                let sourceStyle = this.HtmlIFrameElement.style;
                toReturn = {
                    Height: sourceStyle.height,
                    Left: sourceStyle.left,
                    Position: sourceStyle.position,
                    Top: sourceStyle.top,
                    Width: sourceStyle.width,
                    ZIndex: sourceStyle.zIndex
                };
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.GetState.name, err);
            }
            return toReturn;
        });
    }
    TriggerInboundEventsAsync() {
    }
    GetIframeHtmlElem() {
        return this.HtmlIFrameElement;
    }
    GetNativeContentDoc() {
        return this.DocumentJacket;
    }
    src() {
        return this.HtmlIFrameElement.src;
    }
    ZindexAsInt() {
        let toReturn = -99;
        if (this.HtmlIFrameElement.style && this.HtmlIFrameElement.style.zIndex) {
            toReturn = parseInt(this.HtmlIFrameElement.style.zIndex);
        }
        return toReturn;
    }
    GetNativeIframeId() {
        return this.NativeIframeId;
    }
    WaitForNABHostedDoc() {
        return FrameJacket_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForNABHostedDoc.name);
            try {
                var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForNABHostedDoc.name, false);
                let readyStateNAB = new ReadyState_ReadyStateNAB(this.HindeCore, this.HtmlIFrameElement.contentDocument);
                while (iterationJr.DecrementAndKeepGoing() && readyStateNAB.DocIsAboutBlank()) {
                    yield iterationJr.Wait();
                    readyStateNAB.SetDocument(this.HtmlIFrameElement.contentDocument);
                    readyStateNAB.LogDebugValues();
                }
                if (iterationJr.IsExhausted) {
                    this.Logger.Log(iterationJr.IsExhaustedMsg);
                }
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.WaitForNABHostedDoc.name, err);
            }
            this.Logger.FuncEnd(this.WaitForNABHostedDoc.name);
        });
    }
    WaitForCompleteNABHtmlIframeElement(friendly) {
        return FrameJacket_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => FrameJacket_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForCompleteNABHtmlIframeElement.name, friendly);
                this.Logger.Log(this.DocumentJacket.UrlJacket.GetOriginalURL());
                if (this.HtmlIFrameElement) {
                    yield this.WaitForNABHostedDoc()
                        .then(() => this.DocumentJacket = new DocumentJacket_DocumentJacket(this.HindeCore, this.HtmlIFrameElement.contentDocument))
                        .then(() => this.DocumentJacket.WaitForCompleteNAB_DocumentJacket(friendly))
                        .then((result) => {
                        this.Logger.LogVal(this.WaitForCompleteNABHtmlIframeElement.name, result.DocumentReadtStateFriendly());
                        this.Logger.LogVal(this.WaitForCompleteNABHtmlIframeElement.name, this.HtmlIFrameElement.contentDocument.URL);
                        this.Logger.LogVal(this.WaitForCompleteNABHtmlIframeElement.name, this.HtmlIFrameElement.contentDocument.readyState);
                        resolve(result);
                    })
                        .catch((err) => reject(this.ErrorHand.FormatejectMessage([this.WaitForCompleteNABHtmlIframeElement.name], err)));
                }
                else {
                    this.ErrorHand.ErrorAndThrow([FrameJacket_FrameJacket.name, this.WaitForCompleteNABHtmlIframeElement.name], 'No target doc: ' + friendly);
                }
                this.Logger.FuncEnd(this.WaitForCompleteNABHtmlIframeElement.name, friendly);
                ;
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/ElementJacketBase.js
var ElementJacketBase_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class ElementJacketBase_ElementJacketBase extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, htmlElement) {
        super(hindeCore);
        this.NativeElement = htmlElement;
    }
    Click() {
        this.NativeElement.click();
    }
    parentElement() {
        let toReturn;
        let candidate = this.NativeElement.parentElement;
        if (candidate) {
            toReturn = new ElementJacket_ElementJacket(this.HindeCore, candidate);
        }
        return toReturn;
    }
    querySelector(selector) {
        let toReturn = null;
        let candidate = this.NativeElement.querySelector(selector);
        if (candidate) {
            toReturn = new ElementJacket_ElementJacket(this.HindeCore, candidate);
        }
        return toReturn;
    }
    WaitAndReturnFoundElemJacketFromElemJacket(selector, friendly) {
        return ElementJacketBase_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ElementJacketBase_awaiter(this, void 0, void 0, function* () {
                this.ErrorHand.ThrowIfNullOrUndefined(this.WaitAndReturnFoundElemJacketFromElemJacket.name, [selector]);
                var toReturnElemJacket = null;
                var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitAndReturnFoundElemJacketFromElemJacket.name + ' : ' + selector + ' ' + friendly, false);
                while (!toReturnElemJacket && iterationJr.DecrementAndKeepGoing()) {
                    let candidate = this.NativeElement.querySelector(selector);
                    if (candidate) {
                        resolve(new ElementJacket_ElementJacket(this.HindeCore, candidate));
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (iterationJr.IsExhausted) {
                    reject(iterationJr.IsExhaustedMsg);
                }
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/ElementJacket.js

class ElementJacket_ElementJacket extends ElementJacketBase_ElementJacketBase {
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/4000 - StateFullProxyDisciminator.js
var StateFullProxyDisciminator;
(function (StateFullProxyDisciminator) {
    StateFullProxyDisciminator[StateFullProxyDisciminator["Unknown"] = 4000] = "Unknown";
    StateFullProxyDisciminator[StateFullProxyDisciminator["CEFrame"] = 4001] = "CEFrame";
    StateFullProxyDisciminator[StateFullProxyDisciminator["ContentEditor"] = 4002] = "ContentEditor";
    StateFullProxyDisciminator[StateFullProxyDisciminator["Desktop"] = 4003] = "Desktop";
    StateFullProxyDisciminator[StateFullProxyDisciminator["DTArea"] = 4004] = "DTArea";
    StateFullProxyDisciminator[StateFullProxyDisciminator["DTFrameProxy"] = 4005] = "DTFrameProxy";
    StateFullProxyDisciminator[StateFullProxyDisciminator["FallBack"] = 4006] = "FallBack";
    StateFullProxyDisciminator[StateFullProxyDisciminator["LaunchPad"] = 4007] = "LaunchPad";
    StateFullProxyDisciminator[StateFullProxyDisciminator["MediaLibrary"] = 4008] = "MediaLibrary";
    StateFullProxyDisciminator[StateFullProxyDisciminator["PackageDesigner"] = 4009] = "PackageDesigner";
    StateFullProxyDisciminator[StateFullProxyDisciminator["ScDocumentProxy"] = 4010] = "ScDocumentProxy";
    StateFullProxyDisciminator[StateFullProxyDisciminator["TemplateManager"] = 4011] = "TemplateManager";
})(StateFullProxyDisciminator || (StateFullProxyDisciminator = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfDTFrame.js

class DefaultStateOfDTFrame_DefaultStateOfDTFrame {
    constructor() {
        this.StateOfHosted = {
            StatefullDisciminator: StateFullProxyDisciminator.Unknown,
            StatefullDisciminatorFriendly: StateFullProxyDisciminator[StateFullProxyDisciminator.Unknown]
        };
        this.StateOfFrameStyling = null;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Helpers/FrameHelper.js
var FrameHelper_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class FrameHelper_FrameHelper extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
        this.factoryHelper = new FactoryHelper_FactoryHelper(this.HindeCore);
    }
    GetIFrameAsBaseFrameProxy(nativeIframeProxy, ifrIdx) {
        return FrameHelper_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => FrameHelper_awaiter(this, void 0, void 0, function* () {
                let friendly = 'desktop Iframe_' + ifrIdx;
                let dTFrameProxy = new DTFrameProxy_DTFrameProxy(this.HindeCore, nativeIframeProxy);
                dTFrameProxy.InstantiateAsyncMembers();
                dTFrameProxy.WireEvents();
                yield dTFrameProxy.WaitForCompleteNABFrameProxyOrReject()
                    .then(() => resolve(dTFrameProxy))
                    .catch((err) => reject(this.GetIFramesAsBaseFrameProxies.name + ' | ' + err));
            }));
        });
    }
    GetIFrameAsDTFrameProxy(frameJacket) {
        return FrameHelper_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => FrameHelper_awaiter(this, void 0, void 0, function* () {
                let dTFrameProxy = new DTFrameProxy_DTFrameProxy(this.HindeCore, frameJacket);
                yield dTFrameProxy.WaitForCompleteNABFrameProxyOrReject();
                yield dTFrameProxy.WaitForCompleteNABFrameProxyOrReject()
                    .then(() => resolve(dTFrameProxy))
                    .catch((err) => reject(this.GetIFramesAsBaseFrameProxies.name + ' | ' + err));
            }));
        });
    }
    GetIFramesAsDTFrameProxies(documentJacket) {
        return FrameHelper_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.Logger.FuncStart(this.GetIFramesAsBaseFrameProxies.name);
                var toReturn = [];
                let frameJackets = documentJacket.GetHostedFrameJackets();
                let promiseAr = [];
                frameJackets.forEach((iframeElem) => {
                    promiseAr.push(this.GetIFrameAsDTFrameProxy(iframeElem));
                });
                Promise.all(promiseAr)
                    .then((values) => {
                    values.forEach((oneVal) => {
                        toReturn.push(oneVal);
                    });
                    this.Logger.LogVal('count: ', toReturn.length);
                })
                    .then(() => resolve(toReturn))
                    .catch((err) => reject(this.GetIFramesAsBaseFrameProxies.name + ' | ' + err));
                this.Logger.FuncEnd(this.GetIFramesAsBaseFrameProxies.name);
            });
        });
    }
    GetIFramesAsBaseFrameProxies(targetDocumentJacket) {
        return FrameHelper_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.Logger.FuncStart(this.GetIFramesAsBaseFrameProxies.name);
                var toReturn = [];
                let NativeScIframeProxyAr = targetDocumentJacket.GetHostedFrameJackets();
                let promAr = [];
                NativeScIframeProxyAr.forEach((nativeScIframeProxy, index) => {
                    promAr.push(this.GetIFrameAsBaseFrameProxy(nativeScIframeProxy, index));
                });
                Promise.all(promAr)
                    .then((values) => {
                    values.forEach((oneVal) => {
                        toReturn.push(oneVal);
                    });
                    this.Logger.LogVal('count: ', toReturn.length);
                })
                    .then(() => resolve(toReturn))
                    .catch((err) => reject(this.GetIFramesAsBaseFrameProxies.name + ' | ' + err));
                this.Logger.FuncEnd(this.GetIFramesAsBaseFrameProxies.name);
            });
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/PromiseResult.js

class PromiseResult_PromiseResult extends _HindeCoreBase_HindeCoreBase {
    constructor(nickname, hindeCore) {
        super(hindeCore);
        this.prefix = 'Promise Successful? -> ';
        this.NickName = nickname;
    }
    WasSuccessful() {
        return this.Success;
    }
    MarkSuccessful() {
        this.Success = true;
        if (this.Logger) {
            this.Logger.LogVal(this.prefix + this.NickName, this.Success);
        }
        else {
            console.log('no logger success');
        }
    }
    MarkFailed(ex) {
        if (ex) {
            ex = ex.toString();
        }
        else {
            ex = '{no fail message}';
        }
        this.RejectReasons += ', ' + ex;
        this.Success = false;
        if (this.Logger) {
            this.ErrorHand.ErrorAndThrow(this.prefix + this.NickName, this.Success + '  err: ' + ex);
        }
        else {
            console.log('no logger fail ' + ex);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/RecipeBasics.js
var RecipeBasics_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class RecipeBasics_RecipeBasics extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
    }
    WaitForNoUiFrontOverlay(friendly) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForNoUiFrontOverlay.name, friendly);
            var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForNoUiFrontOverlay.name, true);
            let overLayExists = true;
            let iframeElem = document.getElementById('jqueryModalDialogsFrame');
            let iframeContentDoc = iframeElem.contentDocument;
            let iframeContentDocBody = iframeContentDoc.body;
            while (iterationJr.DecrementAndKeepGoing() && overLayExists) {
                yield iterationJr.Wait();
                let foundElem = iframeContentDocBody.querySelector(':scope > .ui-widget-overlay.ui-front');
                overLayExists = foundElem !== null;
            }
            if (iterationJr.IsExhausted) {
                this.Logger.Log(iterationJr.IsExhaustedMsg);
                reject(iterationJr.IsExhaustedMsg);
            }
            else {
                resolve();
            }
            this.Logger.FuncEnd(this.WaitForNoUiFrontOverlay.name, friendly);
        }));
    }
    WaitForTimePeriod(timeToWaitMs, friendly) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForTimePeriod.name, friendly);
            var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForTimePeriod.name, true);
            let startTimeStamp = new Date().getTime();
            let timeElapsed = 0;
            while (iterationJr.DecrementAndKeepGoing() && timeElapsed < timeToWaitMs) {
                timeElapsed = new Date().getTime() - startTimeStamp;
                yield iterationJr.Wait();
            }
            resolve();
            this.Logger.FuncEnd(this.WaitForTimePeriod.name, friendly);
        }));
    }
    WaitForCompleteNAB_DataOneDoc(documentJacket, friendly) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForCompleteNAB_DataOneDoc.name, friendly);
                this.ErrorHand.ThrowIfNullOrUndefined(this.WaitForCompleteNAB_DataOneDoc.name, [documentJacket, friendly]);
                yield documentJacket.WaitForCompleteNAB_DocumentJacket(friendly)
                    .then((result) => {
                    result.LogDebugValues();
                    resolve(result);
                })
                    .catch((err) => reject(this.WaitForCompleteNAB_DataOneDoc.name + ' | ' + err));
                this.Logger.FuncEnd(this.WaitForCompleteNAB_DataOneDoc.name, friendly);
            }));
        });
    }
    GetTopLevelIframe(documentJacket) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            var toReturn = null;
            let frameHelper = new FrameHelper_FrameHelper(this.HindeCore);
            yield frameHelper.GetIFramesAsBaseFrameProxies(documentJacket)
                .then((allIframe) => {
                var maxZVal = -1;
                if (allIframe && allIframe.length > 0) {
                    for (var idx = 0; idx < allIframe.length; idx++) {
                        var candidateIframe = allIframe[idx];
                        if (candidateIframe && candidateIframe.GetZindexAsInt() > maxZVal) {
                            toReturn = candidateIframe;
                            maxZVal = candidateIframe.GetZindexAsInt();
                        }
                    }
                }
            });
            return toReturn;
        });
    }
    WaitForNewIframe(allIframesBefore, documentJacket) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForNewIframe.name);
                this.Logger.LogAsJsonPretty('allIframesBefore', allIframesBefore);
                this.ErrorHand.ThrowIfNullOrUndefined(this.WaitForNewIframe.name, [allIframesBefore, documentJacket]);
                var toReturn = null;
                var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForNewIframe.name, true);
                let beforeCount = allIframesBefore.length;
                while (!toReturn && iterationJr.DecrementAndKeepGoing()) {
                    var allIframesAfter;
                    let frameHelper = new FrameHelper_FrameHelper(this.HindeCore);
                    yield frameHelper.GetIFramesAsBaseFrameProxies(documentJacket)
                        .then((result) => allIframesAfter = result)
                        .catch((err) => reject(this.WaitForNewIframe.name + ' ' + err));
                    var count = allIframesAfter.length;
                    this.Logger.Log('iFrame count before: ' + beforeCount);
                    this.Logger.Log('iFrame count after: ' + allIframesAfter.length);
                    if (count > beforeCount) {
                        var newIframes = allIframesAfter.filter(e => !allIframesBefore.includes(e));
                        toReturn = newIframes[0];
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                this.Logger.FuncEnd(this.WaitForNewIframe.name);
                if (toReturn) {
                    resolve(toReturn);
                }
                else {
                    reject(iterationJr.IsExhaustedMsg);
                }
            }));
        });
    }
    WaitForElemToHaveClassOrReject(htmlElement, classNames, friendly) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForElemToHaveClassOrReject.name, friendly + ' - ' + classNames);
                this.ErrorHand.ThrowIfNullOrUndefined(this.WaitForElemToHaveClassOrReject.name, [htmlElement, classNames]);
                var elemHasClassName = false;
                var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForElemToHaveClassOrReject.name + ' : ' + classNames + ' ' + friendly, true);
                while (!elemHasClassName && iterationJr.DecrementAndKeepGoing()) {
                    let classList = htmlElement.classList;
                    classNames.forEach((className) => {
                        if (classList.contains(className)) {
                            elemHasClassName = true;
                        }
                    });
                    if (elemHasClassName) {
                        resolve();
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (iterationJr.IsExhausted) {
                    reject(iterationJr.IsExhaustedMsg);
                }
                this.Logger.FuncEnd(this.WaitForElemToHaveClassOrReject.name, friendly);
            }));
        });
    }
    WaitAndReturnFoundFromContainer(haystackElem, selector, friendly) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitAndReturnFoundFromContainer.name, selector);
                this.ErrorHand.ThrowIfNullOrUndefined(this.WaitAndReturnFoundFromContainer.name, [haystackElem, selector]);
                var toReturnFoundElem = null;
                var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitAndReturnFoundFromContainer.name + ' : ' + selector + ' ' + friendly, true);
                while (!toReturnFoundElem && iterationJr.DecrementAndKeepGoing()) {
                    toReturnFoundElem = haystackElem.querySelector(selector);
                    if (toReturnFoundElem) {
                        resolve(toReturnFoundElem);
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (iterationJr.IsExhausted) {
                    reject(iterationJr.IsExhaustedMsg);
                }
                this.Logger.FuncEnd(this.WaitAndReturnFoundFromContainer.name, selector);
            }));
        });
    }
    TabWaitForReadyStateCompleteNative(browserTab) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            let iterHelper = new IterationDrone_IterationDrone(this.HindeCore, this.TabWaitForReadyStateCompleteNative.name, true);
            let result = new PromiseResult_PromiseResult(this.TabWaitForReadyStateCompleteNative.name, this.HindeCore);
            while (browserTab.status !== 'complete' && iterHelper.DecrementAndKeepGoing()) {
                this.Logger.LogVal('tab status', browserTab.status);
                yield iterHelper.Wait;
            }
            if (browserTab.status === 'complete') {
                result.MarkSuccessful();
            }
            else {
                result.MarkFailed('browser status: ' + browserTab.status);
                if (iterHelper.IsExhausted) {
                    result.MarkFailed(iterHelper.IsExhaustedMsg);
                }
            }
            if (result.WasSuccessful()) {
                resolve();
            }
            else {
                reject(result.RejectReasons);
            }
        }));
    }
    TabChainSetHrefWaitForComplete(href) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.TabChainSetHrefWaitForComplete.name, href.AbsUrl);
            yield browser.tabs.query({ currentWindow: true, active: true })
                .then((result) => {
                let targetTab = result[0];
                browser.tabs.update(targetTab.id, { url: href.AbsUrl });
                this.TabWaitForReadyStateCompleteNative(targetTab);
            })
                .then(resolve)
                .catch((ex) => reject(ex));
            this.Logger.FuncEnd(this.TabChainSetHrefWaitForComplete.name, href.AbsUrl);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/5000 - scWindowType.js
var ScWindowType;
(function (ScWindowType) {
    ScWindowType[ScWindowType["Unknown"] = 0] = "Unknown";
    ScWindowType[ScWindowType["AccessViewer"] = 5001] = "AccessViewer";
    ScWindowType[ScWindowType["ContentEditor"] = 5002] = "ContentEditor";
    ScWindowType[ScWindowType["Desktop"] = 5003] = "Desktop";
    ScWindowType[ScWindowType["DomainManager"] = 5004] = "DomainManager";
    ScWindowType[ScWindowType["Edit"] = 5005] = "Edit";
    ScWindowType[ScWindowType["FallBack"] = 5006] = "FallBack";
    ScWindowType[ScWindowType["InstallationWizard"] = 5007] = "InstallationWizard";
    ScWindowType[ScWindowType["Launchpad"] = 5008] = "Launchpad";
    ScWindowType[ScWindowType["LoginPage"] = 5009] = "LoginPage";
    ScWindowType[ScWindowType["MarketingControlPanel"] = 5010] = "MarketingControlPanel";
    ScWindowType[ScWindowType["MediaLibrary"] = 5011] = "MediaLibrary";
    ScWindowType[ScWindowType["Normal"] = 5012] = "Normal";
    ScWindowType[ScWindowType["PackageDesigner"] = 5013] = "PackageDesigner";
    ScWindowType[ScWindowType["Preview"] = 5014] = "Preview";
    ScWindowType[ScWindowType["Publish"] = 5015] = "Publish";
    ScWindowType[ScWindowType["SecurityEditor"] = 5016] = "SecurityEditor";
    ScWindowType[ScWindowType["TemplateManager"] = 5017] = "TemplateManager";
    ScWindowType[ScWindowType["UserManager"] = 5018] = "UserManager";
    ScWindowType[ScWindowType["RollManager"] = 5019] = "RollManager";
})(ScWindowType || (ScWindowType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/GuidData.js

let GuidData_GuidData = (() => {
    class GuidData {
        constructor(raw = null) {
            if (!raw) {
                this.Raw = GuidData.ConstEmptyGuid;
            }
            else {
                if (Guid_Guid.IsValidGuidStr(raw)) {
                    this.Raw = Guid_Guid.GuidStrWithDashes(raw);
                }
                else {
                    throw ('Invalid GUID string: ' + raw);
                }
            }
        }
    }
    GuidData.ConstEmptyGuid = '00000000-0000-0000-0000-000000000000';
    return GuidData;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/Guid.js

let Guid_Guid = (() => {
    class Guid {
        static NewRandomGuid() {
            let newGuid = new Guid();
            let randomStr = newGuid.GetRandomGuidString();
            let toReturn = new GuidData_GuidData(randomStr);
            return toReturn;
        }
        static GetEmptyGuid() {
            return new GuidData_GuidData();
        }
        static AsBracedGuid(guidData) {
            return '{' + guidData.Raw + "}";
        }
        static IsValidGuidStr(candidateStr) {
            let toReturn = false;
            let regexGuid = '^[\}]?[0-9a-f]{8}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{12}[\}]?$';
            let pattern = new RegExp(regexGuid, 'i');
            toReturn = pattern.test(candidateStr);
            return toReturn;
        }
        static AsShort(guidData) {
            var toReturn = '{error}';
            if (guidData) {
                if (this.IsValidGuidStr(guidData.Raw)) {
                    toReturn = guidData.Raw.substr(0, Guid.ShortGuidLength);
                }
                else {
                    toReturn = '{error - invalid guid string: ' + guidData.Raw + '}';
                }
            }
            return toReturn;
        }
        static WithoutDashes(guiddata) {
            let withoutDashes = guiddata.Raw.replace(/-/g, '');
            return withoutDashes;
        }
        static ParseGuid(val, throwOnError) {
            return new GuidData_GuidData(val);
        }
        MakeNewRandomGuid() {
            let randomStr = this.GetRandomGuidString();
            return new GuidData_GuidData(randomStr);
        }
        static GuidStrWithDashes(val) {
            let toReturn = '';
            let withoutDashes = val.replace(/-/g, '');
            var parts = [];
            if (withoutDashes.length !== 32) {
                throw (this.GuidStrWithDashes.name + ' - Wrong count wanted: ' + 32 + " got: " + withoutDashes.length + ' (without dashes) ' + withoutDashes);
            }
            parts.push(withoutDashes.slice(0, 8));
            parts.push(withoutDashes.slice(8, 12));
            parts.push(withoutDashes.slice(12, 16));
            parts.push(withoutDashes.slice(16, 20));
            parts.push(withoutDashes.slice(20, 32));
            toReturn = parts.join('-');
            return toReturn;
        }
        GetRandomGuidString() {
            var toReturn;
            var temp = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
            toReturn = temp.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0;
                var v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
            return toReturn;
        }
        MakeGuidFromString(val, throwOnError) {
            let toReturn = new GuidData_GuidData(val);
            return toReturn;
        }
    }
    Guid.ShortGuidLength = 4;
    return Guid;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentEditorPublishProxy.js
var ContentEditorPublishProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class ContentEditorPublishProxy_ContentEditorPublishProxy extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, contentEditorProxy, documentJacket) {
        super(hindeCore);
        this.ContentEditorProxy = contentEditorProxy;
        this.DocumentJacket = documentJacket;
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
        this.FactoryHelp = new FactoryHelper_FactoryHelper(this.HindeCore);
    }
    Execute() {
        return new Promise((resolve, reject) => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            yield this.PublishActiveCE()
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    GetDocToPublish(scWindowType, targetDocJacket) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetDocToPublish.name);
                try {
                    if (scWindowType === ScWindowType.Desktop) {
                        yield this.RecipeBasics.GetTopLevelIframe(targetDocJacket)
                            .then((topIframe) => {
                            resolve(topIframe.GetDocumentJacket());
                        })
                            .catch((err) => reject(this.GetDocToPublish.name + ' ' + err));
                    }
                    else {
                        resolve(this.DocumentJacket);
                    }
                }
                catch (err) {
                    reject(this.GetDocToPublish.name + ' ' + err);
                }
                this.Logger.FuncEnd(this.GetDocToPublish.name);
            }));
        });
    }
    PublishActiveCE() {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.PublishActiveCE.name);
            try {
                yield this.PublishCE(this.DocumentJacket)
                    .catch((err) => { throw (err); });
            }
            catch (err) {
                throw (this.PublishActiveCE.name + ' ' + err);
            }
            this.Logger.FuncEnd(this.PublishActiveCE.name);
        });
    }
    __debugDataPublishChain(dataPublishChain, nickname) {
        this.Logger.FuncStart(this.__debugDataPublishChain.name, nickname);
        this.Logger.LogVal('docToPublish', this.Logger.IsNullOrUndefined(dataPublishChain.ScDocumentProxyToPublish));
        this.Logger.FuncEnd(this.__debugDataPublishChain.name);
        return dataPublishChain;
    }
    PublishCE(docToPublish) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.PublishCE.name);
            try {
                var dataPublishChain = {
                    ScDocumentProxyToPublish: docToPublish,
                    TopScDocumentProxy: this.DocumentJacket,
                    Iframe0BlueScContentIFrameId0: null,
                    JqIframe: null,
                    CEFrameRed: null
                };
                yield this.ClickPublishOnNav(dataPublishChain)
                    .then((dataPublishChain) => this.ClickMenuButtonPublishDropDown(dataPublishChain))
                    .then((dataPublishChain) => this.ClickMenuDropDownPublishItem(dataPublishChain))
                    .then((dataPublishChain) => this.GetThePublishItemDialog(dataPublishChain))
                    .then((dataPublishChain) => this.GetDialogIframe0Blue(dataPublishChain))
                    .then((dataPublishChain) => this.__WaitForAndClickPublishNextButton(dataPublishChain))
                    .then((dataPublishChain) => this.GetMessageDialog(dataPublishChain))
                    .then((dataPublishChain) => this.__waitForAndClickOk(dataPublishChain))
                    .then((dataPublishChain) => this.__waitForAndClickClose(dataPublishChain))
                    .catch(ex => {
                    this.ErrorHand.ErrorAndThrow(this.PublishCE.name, ex);
                });
            }
            catch (err) {
                throw (this.PublishCE.name + ' ' + err);
            }
            this.Logger.FuncEnd(this.PublishCE.name);
        });
    }
    ClickPublishOnNav(payload) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.ClickPublishOnNav.name);
            try {
                yield payload.ScDocumentProxyToPublish.WaitForThenClick([ContentConst.Const.Selector.SC.Publish.NavPublishStrip]);
                yield payload.ScDocumentProxyToPublish.WaitForThenClick([ContentConst.Const.Selector.SC.Publish.NavPublishStrip]);
            }
            catch (err) {
                throw (this.ClickPublishOnNav.name + ' ' + err);
            }
            this.Logger.FuncEnd(this.ClickPublishOnNav.name);
            return payload;
        });
    }
    __waitForAndClickClose(dataPublishChain) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            yield dataPublishChain.Iframe0BlueScContentIFrameId0.GetDocumentJacket().WaitForAndReturnFoundElemJacket(ContentConst.Const.Selector.SC.Publish.SettingsHidden)
                .then(() => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
                yield dataPublishChain.Iframe0BlueScContentIFrameId0.GetDocumentJacket().WaitForAndReturnFoundElemJacket(ContentConst.Const.Selector.SC.Publish.TheItemHasBeenPublished, SharedConst.Const.IterHelper.MaxCount.OverridePublishing);
            }))
                .then(() => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
                yield dataPublishChain.Iframe0BlueScContentIFrameId0.GetDocumentJacket().WaitForThenClick([ContentConst.Const.Selector.SC.Cancel]);
            }));
            return dataPublishChain;
        });
    }
    __waitForAndClickOk(dataPublishChain) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            yield dataPublishChain.CEFrameRed.GetDocumentJacket().WaitForThenClick([ContentConst.Const.Selector.SC.Ok]);
            return dataPublishChain;
        });
    }
    __WaitForAndClickPublishNextButton(dataPublishChain) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            yield dataPublishChain.Iframe0BlueScContentIFrameId0.GetDocumentJacket().WaitForThenClick([ContentConst.Const.Selector.SC.NextButton]);
            return dataPublishChain;
        });
    }
    ClickMenuButtonPublishDropDown(payload = null) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            yield payload.ScDocumentProxyToPublish.WaitForThenClick([ContentConst.Const.Selector.SC.MenuButtonPublish]);
            return payload;
        });
    }
    ClickMenuDropDownPublishItem(payload = null) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            return yield payload.ScDocumentProxyToPublish.WaitForAndClickWithPayload(ContentConst.Const.Selector.SC.Publish.MenuDropDownPublishItem, payload);
        });
    }
    GetThePublishItemDialog(dataPublishChain = null) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            try {
                let iframeProxy = null;
                yield dataPublishChain.TopScDocumentProxy.WaitForAndReturnFoundElemJacket(ContentConst.Const.Selector.SC.Frames.JqueryModalDialogsFrame.Id)
                    .then((elementJacket) => iframeProxy = new FrameJacket_FrameJacket(this.HindeCore, elementJacket.NativeElement))
                    .then(() => this.FactoryHelp.CEFrameFactory(iframeProxy, 'jqIframe'))
                    .then((result) => dataPublishChain.JqIframe = result)
                    .then(() => dataPublishChain.JqIframe.WaitForCompleteNABFrameProxyOrReject())
                    .catch((err) => { throw (this.GetThePublishItemDialog.name + ' ' + err); });
            }
            catch (err) {
                throw (this.GetThePublishItemDialog.name + ' ' + err);
            }
            return dataPublishChain;
        });
    }
    GetMessageDialog(dataPublishChain) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            let toReturnPublishChain = dataPublishChain;
            yield dataPublishChain.JqIframe.GetDocumentJacket().WaitForIframeElemAndReturnCEFrameProxyWhenReady(ContentConst.Const.Selector.SC.Frames.scContentIframeId1.Id, 'iframeRed')
                .then((result) => toReturnPublishChain.CEFrameRed = result)
                .catch((err) => this.ErrorHand.ErrorAndThrow(this.GetMessageDialog.name, err));
            return toReturnPublishChain;
        });
    }
    GetDialogIframe0Blue(dataPublishChain = null) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetDialogIframe0Blue.name);
                let promiseResult = new PromiseResult_PromiseResult(this.GetDialogIframe0Blue.name, this.HindeCore);
                this.Logger.LogAsJsonPretty('dataPublishChain', dataPublishChain);
                yield dataPublishChain.JqIframe.GetDocumentJacket().WaitForIframeElemAndReturnCEFrameProxyWhenReady(ContentConst.Const.Selector.SC.Frames.ScContentIframeId0.Id, 'Iframe0Blue')
                    .then((result) => {
                    this.Logger.MarkerC();
                    dataPublishChain.Iframe0BlueScContentIFrameId0 = result;
                    promiseResult.MarkSuccessful();
                })
                    .catch((err) => promiseResult.MarkFailed(err));
                this.Logger.LogAsJsonPretty('dataPublishChain.Iframe0Blue', dataPublishChain.Iframe0BlueScContentIFrameId0);
                this.Logger.FuncEnd(this.GetDialogIframe0Blue.name);
                if (promiseResult.WasSuccessful()) {
                    resolve(dataPublishChain);
                }
                else {
                    reject(promiseResult.RejectReasons);
                }
            }));
        });
    }
    __waitForThenFunc(selector, targetDoc, dataPublishChain, optionFunc) {
        return new Promise((resolve, reject) => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.__waitForThenFunc.name, selector);
            this.Logger.LogAsJsonPretty(this.__waitForThenFunc.name, targetDoc);
            var found = null;
            yield targetDoc.WaitForAndReturnFoundElemJacket(selector)
                .then((result) => found = result);
            if (found) {
                this.Logger.Log('found');
                if (optionFunc) {
                    this.Logger.Log('executing func');
                    dataPublishChain = yield optionFunc(found, dataPublishChain);
                }
                this.__debugDataPublishChain(dataPublishChain, this.__waitForThenFunc.name);
                this.Logger.FuncEnd(this.__waitForThenFunc.name, selector);
                resolve(dataPublishChain);
            }
            else {
                reject('not found');
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/1xxx-MessageFlag.js
var MsgFlag;
(function (MsgFlag) {
    MsgFlag[MsgFlag["Unknown"] = 0] = "Unknown";
    MsgFlag[MsgFlag["GetAllStorageOneWindow"] = 1001] = "GetAllStorageOneWindow";
    MsgFlag[MsgFlag["NewWindowTest"] = 1002] = "NewWindowTest";
    MsgFlag[MsgFlag["Ping"] = 1003] = "Ping";
    MsgFlag[MsgFlag["ReqRemoveFromStorage"] = 1004] = "ReqRemoveFromStorage";
    MsgFlag[MsgFlag["ReqAddCETab"] = 1100] = "ReqAddCETab";
    MsgFlag[MsgFlag["ReqAdminB"] = 1101] = "ReqAdminB";
    MsgFlag[MsgFlag["ReqGoDesktop"] = 1102] = "ReqGoDesktop";
    MsgFlag[MsgFlag["ReqLoginWithAdminB"] = 1103] = "ReqLoginWithAdminB";
    MsgFlag[MsgFlag["ReqToggleFavorite"] = 1104] = "ReqToggleFavorite";
    MsgFlag[MsgFlag["ReqOpenCE"] = 1105] = "ReqOpenCE";
    MsgFlag[MsgFlag["ReqQuickPublish"] = 1106] = "ReqQuickPublish";
    MsgFlag[MsgFlag["ReqSetStateOfSitecoreSameWindow"] = 1107] = "ReqSetStateOfSitecoreSameWindow";
    MsgFlag[MsgFlag["Unused"] = 1108] = "Unused";
    MsgFlag[MsgFlag["ReqSetScModePreview"] = 1109] = "ReqSetScModePreview";
    MsgFlag[MsgFlag["ReqTakeSnapShot"] = 1110] = "ReqTakeSnapShot";
    MsgFlag[MsgFlag["ReqToggleCompactCss"] = 1111] = "ReqToggleCompactCss";
    MsgFlag[MsgFlag["ReqUpdateNickName"] = 1112] = "ReqUpdateNickName";
    MsgFlag[MsgFlag["RespCurState"] = 1200] = "RespCurState";
    MsgFlag[MsgFlag["RespTaskFailed"] = 1201] = "RespTaskFailed";
    MsgFlag[MsgFlag["RespListeningAndReady"] = 1202] = "RespListeningAndReady";
    MsgFlag[MsgFlag["_unused"] = 1203] = "_unused";
    MsgFlag[MsgFlag["RespTaskSuccessful"] = 1204] = "RespTaskSuccessful";
    MsgFlag[MsgFlag["RespTest"] = 1205] = "RespTest";
    MsgFlag[MsgFlag["RespNotReady"] = 1206] = "RespNotReady";
    MsgFlag[MsgFlag["ReqClosePopUpWindow"] = 1207] = "ReqClosePopUpWindow";
    MsgFlag[MsgFlag["ReqOpenPresentationDetails"] = 1208] = "ReqOpenPresentationDetails";
    MsgFlag[MsgFlag["CancelCommand"] = 1209] = "CancelCommand";
    MsgFlag[MsgFlag["ReqSetScModeNormal"] = 1210] = "ReqSetScModeNormal";
    MsgFlag[MsgFlag["ReqSetScModeEdit"] = 1211] = "ReqSetScModeEdit";
    MsgFlag[MsgFlag["ReqSetStateOfSitecoreNewWindow"] = 1212] = "ReqSetStateOfSitecoreNewWindow";
    MsgFlag[MsgFlag["RespFailedDidNotValidate"] = 1213] = "RespFailedDidNotValidate";
    MsgFlag[MsgFlag["ReqDebugAutoSnapShot"] = 1214] = "ReqDebugAutoSnapShot";
    MsgFlag[MsgFlag["ReqDebugTriggerReload"] = 1215] = "ReqDebugTriggerReload";
    MsgFlag[MsgFlag["ReqDebugClearConsole"] = 1216] = "ReqDebugClearConsole";
    MsgFlag[MsgFlag["SetStateFromQueryString"] = 1217] = "SetStateFromQueryString";
    MsgFlag[MsgFlag["SetStateFromMostRecent"] = 1218] = "SetStateFromMostRecent";
    MsgFlag[MsgFlag["SetStateFromStorage"] = 1219] = "SetStateFromStorage";
})(MsgFlag || (MsgFlag = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/3xxx-SettingKey.js
var _3xxx_SettingKey_SettingKey;
(function (SettingKey) {
    SettingKey[SettingKey["unknown"] = 0] = "unknown";
    SettingKey[SettingKey["AutoLogin"] = 3100] = "AutoLogin";
    SettingKey[SettingKey["__dead"] = 3101] = "__dead";
    SettingKey[SettingKey["DebugKeepDialogOpen"] = 3102] = "DebugKeepDialogOpen";
    SettingKey[SettingKey["AutoSaveIntervalMin"] = 3103] = "AutoSaveIntervalMin";
    SettingKey[SettingKey["UseCompactCss"] = 3104] = "UseCompactCss";
    SettingKey[SettingKey["AutoSaveRetainDays"] = 3105] = "AutoSaveRetainDays";
    SettingKey[SettingKey["AutoRenameCeButton"] = 3106] = "AutoRenameCeButton";
    SettingKey[SettingKey["MaxAutoSaveCount"] = 3200] = "MaxAutoSaveCount";
    SettingKey[SettingKey["EnableDebugging"] = 3201] = "EnableDebugging";
    SettingKey[SettingKey["LgndPopUpLog"] = 3300] = "LgndPopUpLog";
    SettingKey[SettingKey["LgndForeSite"] = 3301] = "LgndForeSite";
    SettingKey[SettingKey["LgndHindSite"] = 3302] = "LgndHindSite";
    SettingKey[SettingKey["LgndSettings"] = 3303] = "LgndSettings";
    SettingKey[SettingKey["LgndContentState"] = 3304] = "LgndContentState";
    SettingKey[SettingKey["_unused_"] = 3305] = "_unused_";
    SettingKey[SettingKey["LgndMessages"] = 3306] = "LgndMessages";
    SettingKey[SettingKey["LgndBrowserState"] = 3307] = "LgndBrowserState";
    SettingKey[SettingKey["LgndPopUpState"] = 3308] = "LgndPopUpState";
    SettingKey[SettingKey["LastUsedLogToStorageKey"] = 3400] = "LastUsedLogToStorageKey";
    SettingKey[SettingKey["AutoSnapshotBeforeWindowChange"] = 3401] = "AutoSnapshotBeforeWindowChange";
    SettingKey[SettingKey["LgndPopUpDebug"] = 3402] = "LgndPopUpDebug";
    SettingKey[SettingKey["AutoRestoreState"] = 3403] = "AutoRestoreState";
    SettingKey[SettingKey["_not_used"] = 3404] = "_not_used";
})(_3xxx_SettingKey_SettingKey || (_3xxx_SettingKey_SettingKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferChar.js
var BufferChar;
(function (BufferChar) {
    BufferChar[BufferChar["space"] = 0] = "space";
    BufferChar[BufferChar["Nbsp"] = 1] = "Nbsp";
    BufferChar[BufferChar["Period"] = 2] = "Period";
    BufferChar[BufferChar["Zero"] = 3] = "Zero";
})(BufferChar || (BufferChar = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferDirection.js
var BufferDirection;
(function (BufferDirection) {
    BufferDirection[BufferDirection["left"] = 0] = "left";
    BufferDirection[BufferDirection["right"] = 1] = "right";
})(BufferDirection || (BufferDirection = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SnapShotFlavor.js
var SnapShotFlavor;
(function (SnapShotFlavor) {
    SnapShotFlavor[SnapShotFlavor["Unknown"] = 0] = "Unknown";
    SnapShotFlavor[SnapShotFlavor["Autosave"] = 1] = "Autosave";
    SnapShotFlavor[SnapShotFlavor["Favorite"] = 2] = "Favorite";
    SnapShotFlavor[SnapShotFlavor["Manual"] = 3] = "Manual";
    SnapShotFlavor[SnapShotFlavor["Live"] = 4] = "Live";
})(SnapShotFlavor || (SnapShotFlavor = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/StaticHelpers.js






class StaticHelpers_StaticHelpers {
    static MinToMs(minutes) {
        return minutes * 60 * 1000;
    }
    static FlavorAsString(flavor) {
        return 'Flavor.' + SnapShotFlavor[flavor] + '(' + flavor + ')';
    }
    static SettingKeyAsString(settingKey) {
        let toReturn = '';
        try {
            toReturn = 'SettingKey.' + _3xxx_SettingKey_SettingKey[settingKey] + '(' + settingKey + ')';
        }
        catch (err) {
            toReturn = err;
        }
        return toReturn;
    }
    static ScWindowTypeFriendly(windowType) {
        return ScWindowType[windowType];
    }
    static MakeFriendlyDate(date) {
        var toReturn = '';
        var workingDate = new Date(date);
        if (workingDate) {
            var month = StaticHelpers_StaticHelpers.BufferString((workingDate.getMonth() + 1).toString(), 2, BufferChar.Zero, BufferDirection.left);
            var day = StaticHelpers_StaticHelpers.BufferString(workingDate.getDate().toString(), 2, BufferChar.Zero, BufferDirection.left);
            var min = StaticHelpers_StaticHelpers.BufferString(workingDate.getMinutes().toString(), 2, BufferChar.Zero, BufferDirection.left);
            var hoursRaw = workingDate.getHours();
            var hourClean = hoursRaw ? hoursRaw : 12;
            var hourCleanStr = StaticHelpers_StaticHelpers.BufferString(hourClean.toString(), 2, BufferChar.Zero, BufferDirection.left);
            toReturn = month + '.' + day + ' ' + hourCleanStr + ':' + min;
        }
        else {
            toReturn = '{error}';
            throw (this.MakeFriendlyDate.name, 'no date provided');
        }
        return toReturn;
    }
    static IsNullOrUndefined(testSubject) {
        let toReturn = false;
        try {
            if (testSubject instanceof Array) {
                testSubject.forEach((testSubject) => toReturn = toReturn || this.IsNullOrUndefined(testSubject));
            }
            else {
                toReturn = (typeof testSubject === 'undefined' || testSubject === null);
            }
        }
        catch (err) {
            console.log(err);
        }
        return toReturn;
    }
    static getBuffChar(buffCharEnum) {
        var buffChar = ' ';
        if (buffCharEnum === BufferChar.space) {
            buffChar = ' ';
        }
        else if (buffCharEnum === BufferChar.Nbsp) {
            buffChar = '&nbsp;';
        }
        else if (buffCharEnum === BufferChar.Period) {
            buffChar = '.';
        }
        else if (buffCharEnum === BufferChar.Zero) {
            buffChar = '0';
        }
        return buffChar;
    }
    static BufferString(str, desiredLength, buffCharEnum, direction) {
        var toReturn = str;
        var buffChar = this.getBuffChar(buffCharEnum);
        if (toReturn.length > desiredLength) {
            if (desiredLength > 6) {
                toReturn = toReturn.substring(0, desiredLength - 3) + '...';
            }
            else {
                toReturn = toReturn.substring(0, desiredLength);
            }
        }
        if (toReturn.length < desiredLength) {
            var bufferCharNeeded = desiredLength - toReturn.length;
            for (var idx = 0; idx < bufferCharNeeded; idx++) {
                if (direction === BufferDirection.left) {
                    toReturn = buffChar + toReturn;
                }
                else {
                    toReturn = toReturn + buffChar;
                }
            }
        }
        return toReturn;
    }
    static MsgFlagAsString(msg) {
        var toReturn = "{error}";
        if (msg) {
            try {
                toReturn = 'MsgFlag.' + MsgFlag[msg] + '(' + msg + ')';
            }
            catch (err) {
                console.log(this.MsgFlagAsString.name + ' ' + err);
            }
        }
        return 'flag: ' + toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/_HindSiteEvent/HindeSiteEvent_Subject.js




class HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(arg1, arg2, arg3 = '') {
        this.ObserverCollection = [];
        let errorHandTest = arg2;
        if (arg1.Discriminator == Discriminator.IHindeCore) {
            let hindeCore = arg1;
            this.Logger = hindeCore.Logger;
            this.ErrorHand = hindeCore.ErrorHand;
            this.Friendly_Subject = arg2;
        }
        else if (arg1.Discriminator === Discriminator.ILoggerAgent && errorHandTest && errorHandTest.Discriminator === Discriminator.IErrorHandler) {
            this.Logger = arg1;
            this.ErrorHand = errorHandTest;
            this.Friendly_Subject = arg3;
        }
        else {
            throw ('unhandled discriminator');
        }
    }
    DisableNotifications() {
        this.IsMuted = true;
    }
    EnableNotifications() {
        this.IsMuted = false;
    }
    HasObservers() {
        return this.ObserverCollection && this.ObserverCollection.length > 0;
    }
    RegisterObserver(observer) {
        if (observer) {
            if (this.ObserverCollection.indexOf(observer) < 0) {
                this.ObserverCollection.push(observer);
                this.Logger.Log(this.RegisterObserver.name + ' ' + observer.Friendly + ' to ' + this.Friendly_Subject + ' - count after: ' + this.ObserverCollection.length.toString());
            }
            else {
                this.ErrorHand.WarningAndContinue(this.RegisterObserver.name, 'Observer already registered');
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.RegisterObserver.name, 'Observer is null');
        }
    }
    UnregisterObserver(observer) {
        this.Logger.FuncStart(this.UnregisterObserver.name);
        if (observer) {
            let observerIndex = this.ObserverCollection.indexOf(observer);
            if (observerIndex > -1) {
                this.ObserverCollection.splice(observerIndex, 1);
            }
        }
        this.Logger.FuncEnd(this.UnregisterObserver.name);
    }
    NotifyObserversAsync(payload) {
        let bufferedFriendly = StaticHelpers_StaticHelpers.BufferString(this.Friendly_Subject, 30, BufferChar.Period, BufferDirection.right);
        if (this.ShowLogActions) {
            this.Logger.FuncStart(this.NotifyObserversAsync.name + ' of: ' + bufferedFriendly, ' obs. count: ' + this.ObserverCollection.length);
        }
        if (!this.IsMuted) {
            this.ObserverCollection.forEach((observer) => {
                observer.UpdateAsync(payload);
            });
        }
        else {
            this.Logger.Log('not Notifying...Subject is muted');
        }
        this.Logger.FuncEnd(this.NotifyObserversAsync.name + ' of: ' + bufferedFriendly, ' obs. count: ' + this.ObserverCollection.length);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/ContentEditorProxyMutationEvent/ContentEditorProxyMutationEvent_Subject.js

class ContentEditorProxyMutationEvent_Subject_ContentTreeBasedProxyMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore) {
        super(hindeCore, ContentEditorProxyMutationEvent_Subject_ContentTreeBasedProxyMutationEvent_Subject.name);
        this.ShowLogActions = true;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/_HindSiteEvent/HindSiteEvent_Observer.js

class HindSiteEvent_Observer_HindSiteEvent_Observer extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, friendly, callbackAsync = null) {
        super(hindeCore);
        this.CallbackAsync = null;
        this.CallbackAsync = callbackAsync;
        this.Friendly = friendly;
    }
    UpdateAsync(payload) {
        try {
            if (this.CallbackAsync) {
                this.CallbackAsync(payload);
            }
        }
        catch (err) {
            this.ErrorHand.ErrorAndContinue(HindSiteEvent_Observer_HindSiteEvent_Observer.name, err);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/ContentTreeProxyMutationEvent/ContentTreeProxyMutationEvent_Observer.js

class ContentTreeProxyMutationEvent_Observer_ContentTreeBasedProxyMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, ContentTreeProxyMutationEvent_Observer_ContentTreeBasedProxyMutationEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/PromiseFailAction.js
var PromiseFailAction;
(function (PromiseFailAction) {
    PromiseFailAction[PromiseFailAction["Default"] = 0] = "Default";
    PromiseFailAction[PromiseFailAction["ResolveNull"] = 1] = "ResolveNull";
    PromiseFailAction[PromiseFailAction["RejectThrow"] = 2] = "RejectThrow";
})(PromiseFailAction || (PromiseFailAction = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/SupportProxies/ScContentIframeId0Proxy.js
var ScContentIframeId0Proxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class ScContentIframeId0Proxy_ScContentIframeId0Proxy extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, frameJacket) {
        super(hindeCore);
        this.ScContentIframeId0FrameJacket = frameJacket;
    }
    OpenFile(fileName) {
        return ScContentIframeId0Proxy_awaiter(this, void 0, void 0, function* () {
            try {
                let FileNameInput = null;
                let OpenOkButton = null;
                let CancelButton = null;
                let trimmedFileName = fileName.trim();
                yield this.ScContentIframeId0FrameJacket.WaitForCompleteNABHtmlIframeElement('scContentIframeId0')
                    .then(() => this.ScContentIframeId0FrameJacket.DocumentJacket.WaitForAndReturnFoundElemJacket(ContentConst.Const.Selector.SC.Frames.ScContentIframeId0.Filename))
                    .then((fileNameElemJacket) => FileNameInput = fileNameElemJacket)
                    .then(() => OpenOkButton = this.ScContentIframeId0FrameJacket.DocumentJacket.QuerySelector(ContentConst.Const.Selector.SC.Frames.ScContentIframeId0.Ok))
                    .then(() => CancelButton = this.ScContentIframeId0FrameJacket.DocumentJacket.QuerySelector(ContentConst.Const.Selector.SC.Frames.ScContentIframeId0.Cancel))
                    .then(() => {
                    this.Logger.LogImportant('filename jacket found');
                    if (!FileNameInput || !OpenOkButton || !CancelButton) {
                        this.ErrorHand.ErrorAndThrow([ScContentIframeId0Proxy_ScContentIframeId0Proxy.name, this.OpenFile.name], 'missing buttons');
                    }
                })
                    .then(() => {
                    if (FileNameInput && OpenOkButton && trimmedFileName.length > 0) {
                        FileNameInput.NativeElement.value = fileName;
                        OpenOkButton.NativeElement.click();
                    }
                    else {
                        CancelButton.NativeElement.click();
                    }
                });
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow([ScContentIframeId0Proxy_ScContentIframeId0Proxy.name, this.OpenFile.name], err);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/SupportProxies/JqueryFrameProxy.js
var JqueryFrameProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class JqueryFrameProxy_JqueryFrameProxy extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, jqueryFrameJacket) {
        super(hindeCore);
        this.jqueryFrameJacket = null;
        this.jqueryFrameJacket = jqueryFrameJacket;
    }
    OpenFile(fileName) {
        return JqueryFrameProxy_awaiter(this, void 0, void 0, function* () {
            try {
                let scContentIframeId0Proxy;
                yield this.jqueryFrameJacket.WaitForCompleteNABHtmlIframeElement('jquery jacket')
                    .then(() => {
                    let matchingJackets = this.jqueryFrameJacket.DocumentJacket.GetHostedFramesFilteredBySelector(ContentConst.Const.Selector.SC.Frames.ScContentIframeId0.Id);
                    if (matchingJackets && matchingJackets.length > 0) {
                        scContentIframeId0Proxy = new ScContentIframeId0Proxy_ScContentIframeId0Proxy(this.HindeCore, matchingJackets[0]);
                        this.Logger.LogImportant('scContentIframeId0FrameJacket frame found');
                    }
                    else {
                        this.ErrorHand.ErrorAndThrow([JqueryFrameProxy_JqueryFrameProxy.name, this.OpenFile.name], 'no matching jackets');
                    }
                })
                    .then(() => scContentIframeId0Proxy.OpenFile(fileName))
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.OpenFile.name, err));
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow([JqueryFrameProxy_JqueryFrameProxy.name, this.OpenFile.name], err);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/PackageDesignerProxy/PackageDesignerInstallerRibbonToolbarProxy.js
var PackageDesignerInstallerRibbonToolbarProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class PackageDesignerInstallerRibbonToolbarProxy_PackageDesignerInstallerRibbonToolbarProxy extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, elementDivJacket, parentDocumentJacket) {
        super(hindeCore);
        this.parentDocumentJacket = parentDocumentJacket;
        this.ElementDivJacket = elementDivJacket;
    }
    OpenFile(fileName) {
        return PackageDesignerInstallerRibbonToolbarProxy_awaiter(this, void 0, void 0, function* () {
            let jqueryFrameProxy = null;
            yield this.ElementDivJacket.WaitAndReturnFoundElemJacketFromElemJacket(ContentConst.Const.Selector.SC.PackageDesigner.Ribbon.Open, this.OpenFile.name)
                .then((elemJacket) => elemJacket.NativeElement.click())
                .then(() => {
                let matchingJackets = this.parentDocumentJacket.GetHostedFramesFilteredBySelector(ContentConst.Const.Selector.SC.Frames.JqueryModalDialogsFrame.Id);
                if (matchingJackets && matchingJackets.length > 0) {
                    jqueryFrameProxy = new JqueryFrameProxy_JqueryFrameProxy(this.HindeCore, matchingJackets[0]);
                    this.Logger.LogImportant('jquery frame found');
                }
                else {
                    this.ErrorHand.ErrorAndThrow([PackageDesignerInstallerRibbonToolbarProxy_PackageDesignerInstallerRibbonToolbarProxy.name, this.OpenFile.name], 'no matching jacket');
                }
            })
                .then(() => jqueryFrameProxy.OpenFile(fileName))
                .catch((err) => this.ErrorHand.ErrorAndThrow([PackageDesignerInstallerRibbonToolbarProxy_PackageDesignerInstallerRibbonToolbarProxy.name, this.OpenFile.name], err));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/SupportProxies/_baseSupportFrameProxy.js


class _baseSupportFrameProxy_baseSupportStatelessFrameProxy extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, appFrameJacket) {
        super(hindeCore);
        this.FrameJacket = null;
        this.FrameJacket = appFrameJacket;
        this.BaseFrameFactory = new BaseFrameFactory_SupportFrameFactory(this.HindeCore);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/SupportProxies/AppFrameProxy.js
var AppFrameProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class AppFrameProxy_AppFrameProxy extends _baseSupportFrameProxy_baseSupportStatelessFrameProxy {
    constructor(hindeCore, frameJacket, parentJacket) {
        super(hindeCore, frameJacket);
        this.ParentJacket = parentJacket;
    }
    OpenFile(fileName) {
        return AppFrameProxy_awaiter(this, void 0, void 0, function* () {
            try {
                let toolbarProxy = null;
                yield this.FrameJacket.DocumentJacket.WaitForAndReturnFoundElemJacket(ContentConst.Const.Selector.SC.PackageDesigner.Ribbon.InstallerRibbon_Toolbar, PromiseFailAction.RejectThrow)
                    .then((elementDivJacket) => toolbarProxy = new PackageDesignerInstallerRibbonToolbarProxy_PackageDesignerInstallerRibbonToolbarProxy(this.HindeCore, elementDivJacket, this.ParentJacket))
                    .then(() => toolbarProxy.OpenFile(fileName));
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow([AppFrameProxy_AppFrameProxy.name, this.OpenFile.name], err);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/SupportProxies/BaseFrameFactory.js
var BaseFrameFactory_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class BaseFrameFactory_SupportFrameFactory extends _HindeCoreBase_HindeCoreBase {
    MakeAppFrameProxy(frameJacket, parentJacket) {
        return new Promise((resolve, reject) => BaseFrameFactory_awaiter(this, void 0, void 0, function* () {
            let appFrameProxy = new AppFrameProxy_AppFrameProxy(this.HindeCore, frameJacket, parentJacket);
            yield appFrameProxy.FrameJacket.WaitForCompleteNABHtmlIframeElement(AppFrameProxy_AppFrameProxy.name)
                .then(() => resolve(appFrameProxy))
                .catch((err) => reject(this.ErrorHand.FormatejectMessage([BaseFrameFactory_SupportFrameFactory.name, this.MakeAppFrameProxy.name], err)));
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/FrameProxies/_StateProxy.js


class _StateProxy_BaseStateFullProxy extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
        this.Friendly = '{unknown friendly}';
        this.SupportFrameFactory = new BaseFrameFactory_SupportFrameFactory(this.HindeCore);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/Events/NativeClassNameChangeEvent/NativeClassNameChangeEvent_Observer.js

class NativeClassNameChangeEvent_Observer_NativeClassNameChangeEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, NativeClassNameChangeEvent_Observer_NativeClassNameChangeEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/Events/NativeClassNameChangeEvent/NativeClassNameChangeEvent_Subject.js
var NativeClassNameChangeEvent_Subject_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class NativeClassNameChangeEvent_Subject_NativeClassNameChangeEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore, treeElementJacket) {
        super(hindeCore, NativeClassNameChangeEvent_Subject_NativeClassNameChangeEvent_Subject.name);
        this.ShowLogActions = true;
        this.TreeElement = treeElementJacket.NativeElement;
        this.InitTreeMutationEvent_Observer();
    }
    InitTreeMutationEvent_Observer() {
        try {
            if (this.TreeElement) {
                let self = this;
                let observer = new MutationObserver((mutations) => self.OnNativeMutationEvent(mutations));
                observer.observe(this.TreeElement, { attributes: true, subtree: true, childList: true });
            }
        }
        catch (err) {
            throw (this.InitTreeMutationEvent_Observer.name + ' | ' + err);
        }
    }
    OnNativeMutationEvent(mutationRecords) {
        mutationRecords.forEach((mutationRecord, index) => NativeClassNameChangeEvent_Subject_awaiter(this, void 0, void 0, function* () {
            if (mutationRecord.attributeName === 'class') {
                let anchorTest = (mutationRecord.target);
                if (anchorTest) {
                    if (anchorTest.classList.contains(ContentConst.Const.ClassNames.SC.scContentTreeNodeActive)) {
                        this.NotifyObserversAsync(null);
                    }
                }
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfContentTree.js
class DefaultStateOfContentTree {
    constructor() {
        this.ActiveNodeShallow = null;
        this.StateOfScContentTreeNodeDeep = null;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/ContentTreeProxyMutationEvent/ContentTreeProxyMutationEvent_Subject.js

class ContentTreeProxyMutationEvent_Subject_ContentTreeMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore) {
        super(hindeCore, ContentTreeProxyMutationEvent_Subject_ContentTreeMutationEvent_Subject.name);
        this.ShowLogActions = true;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/ElementDivJacket.js

class ElementDivJacket_ElementDivJacket extends ElementJacketBase_ElementJacketBase {
    constructor(hindeCore, htmlElement) {
        super(hindeCore, htmlElement);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentTreeProxy/ScContentTreeNodeProxy/ScContentTreeNodeProxy.js
var ScContentTreeNodeProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class ScContentTreeNodeProxy_ScContentTreeNodeProxy extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, sourceElemJacket, level, siblingIndex, totalSiblings, parent) {
        super(hindeCore);
        this.Children = [];
        this.StateOfScContentTreeNode = {
            Friendly: '',
            IsExpanded: false,
            IsActive: false,
            Coord: {
                LevelIndex: -1,
                LevelWidth: -1,
                SiblingIndex: -1
            },
            ItemId: null,
            IconSrc: '',
            NodeChildren: [],
            Lineage: {
                L1MainIconSrc: '',
                L1Text: '',
                L2Icon: '',
                L2Text: ''
            }
        };
        this.HasBeenHarvested = false;
        if (sourceElemJacket) {
            this.StateOfScContentTreeNode.Coord.LevelWidth = totalSiblings;
            this.StateOfScContentTreeNode.Coord.SiblingIndex = siblingIndex;
            this.StateOfScContentTreeNode.Coord.LevelIndex = level;
            if (sourceElemJacket.NativeElement.hasAttribute('src')) {
                this.InferFromImageElement(sourceElemJacket.NativeElement);
            }
            else if (sourceElemJacket.NativeElement.hasAttribute('href')) {
                this.InferFromAnchorElement(sourceElemJacket.NativeElement);
            }
            else if (sourceElemJacket.NativeElement.classList.contains('scContentTreeNode')) {
                this.InferFromDivElement(sourceElemJacket.NativeElement);
            }
            else {
                this.ErrorHand.ErrorAndThrow(ScContentTreeNodeProxy_ScContentTreeNodeProxy.name, 'invalid source element type: ' + (typeof sourceElemJacket));
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(ScContentTreeNodeProxy_ScContentTreeNodeProxy.name, 'null sourceElement or associatedDoc');
        }
        this.ParentTreeNode = parent;
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
    }
    Instantiate() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                yield this.HarvestNodeState();
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.Instantiate.name, err);
            }
        });
    }
    InferFromDivElement(divElement) {
        if (divElement) {
            this.ScContentTreeNodeDivElem = new ElementDivJacket_ElementDivJacket(this.HindeCore, divElement);
        }
    }
    InferFromAnchorElement(anchorElement) {
        if (anchorElement) {
            this.Logger.Log(this.InferFromAnchorElement.name);
            this.ScContentTreeNodeDivElem = new ElementDivJacket_ElementDivJacket(this.HindeCore, anchorElement.parentElement);
        }
    }
    InferFromImageElement(imageElement) {
        if (imageElement) {
            this.ScContentTreeNodeDivElem = new ElementDivJacket_ElementDivJacket(this.HindeCore, imageElement.parentElement);
        }
    }
    PolllinateGlyphNodeElem() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                yield this.ScContentTreeNodeDivElem.WaitAndReturnFoundElemJacketFromElemJacket(":scope > img", this.PolllinateGlyphNodeElem.name)
                    .then((elemImgJacket) => this.glyphElem = elemImgJacket)
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.PolllinateGlyphNodeElem.name, err));
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.PolllinateGlyphNodeElem.name, err);
            }
        });
    }
    Friendly() {
        let toReturn = 'lvl: ' + this.StateOfScContentTreeNode.Coord.LevelIndex + ' Sib idx: ' + this.StateOfScContentTreeNode.Coord.SiblingIndex + ' tot sib: ' + this.StateOfScContentTreeNode.Coord.LevelWidth;
        return toReturn;
    }
    PollinateNodeElem() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                yield this.ScContentTreeNodeDivElem.WaitAndReturnFoundElemJacketFromElemJacket(":scope > a", this.Friendly())
                    .then((htmlAnchorElement) => this.LinkNodeElem = htmlAnchorElement)
                    .catch((err) => {
                });
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.PollinateNodeElem.name, err);
            }
        });
    }
    GetStateOfScContentTreeNodeGeneric(includeChildren) {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                let stateOfChildrenAr = [];
                if (includeChildren) {
                    this.Children.forEach((child) => stateOfChildrenAr.push(child.GetStateOfScContentTreeNodeDeep()));
                }
                yield Promise.all(stateOfChildrenAr)
                    .then((result) => {
                    this.StateOfScContentTreeNode.NodeChildren = [];
                    result.forEach((stateoOfScContentTreeNodeChild) => {
                        if (stateoOfScContentTreeNodeChild.IsActive || stateoOfScContentTreeNodeChild.IsExpanded) {
                            this.StateOfScContentTreeNode.NodeChildren.push(stateoOfScContentTreeNodeChild);
                        }
                    });
                })
                    .then(() => resolve(this.StateOfScContentTreeNode))
                    .catch((err) => reject(this.GetStateOfScContentTreeNodeGeneric.name + ' | ' + err));
            }));
        });
    }
    GetStateOfScContentTreeNodeDeep() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                yield this.GetStateOfScContentTreeNodeGeneric(true)
                    .then((stateOfScContentTreeNodeDeep) => resolve(stateOfScContentTreeNodeDeep))
                    .catch((err) => reject(this.GetStateOfScContentTreeNodeDeep.name + ' | ' + err));
            }));
        });
    }
    GetStateOfScContentTreeNodeFlat() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetStateOfScContentTreeNodeFlat.name);
                yield this.GetStateOfScContentTreeNodeGeneric(false)
                    .then((stateOfContentTreeNodeShallow) => resolve(stateOfContentTreeNodeShallow))
                    .catch((err) => reject(this.GetStateOfScContentTreeNodeDeep.name + ' | ' + err));
                this.Logger.FuncEnd(this.GetStateOfScContentTreeNodeFlat.name);
            }));
        });
    }
    HarvestProperties() {
        this.ErrorHand.ThrowIfNullOrUndefined(this.HarvestNodeState.name, [this.LinkNodeElem, this.glyphElem]);
        this.StateOfScContentTreeNode.IsActive = this.QueryIsActive();
        this.StateOfScContentTreeNode.IsExpanded = this.QueryIsExpanded();
        this.StateOfScContentTreeNode.Friendly = this.LinkNodeElem.NativeElement.innerText;
        this.StateOfScContentTreeNode.ItemId = this.GetApparentItemId(this.glyphElem);
        this.StateOfScContentTreeNode.IconSrc = this.GetIconSrc();
        this.HarvestLineageProperties();
    }
    HarvestLineageProperties() {
        this.StateOfScContentTreeNode.Lineage.L1MainIconSrc = this.GetMainIconSrc();
        if (this.StateOfScContentTreeNode.Coord.LevelIndex === 0) {
            this.StateOfScContentTreeNode.Lineage.L1MainIconSrc = '';
            this.StateOfScContentTreeNode.Lineage.L1Text = '';
            this.StateOfScContentTreeNode.Lineage.L2Icon = '';
            this.StateOfScContentTreeNode.Lineage.L2Text = '';
        }
        else if (this.StateOfScContentTreeNode.Coord.LevelIndex === 1) {
            this.StateOfScContentTreeNode.Lineage.L1MainIconSrc = this.StateOfScContentTreeNode.IconSrc;
            this.StateOfScContentTreeNode.Lineage.L1Text = this.StateOfScContentTreeNode.Friendly;
            this.StateOfScContentTreeNode.Lineage.L2Icon = '';
            this.StateOfScContentTreeNode.Lineage.L2Text = '';
        }
        else if (this.StateOfScContentTreeNode.Coord.LevelIndex === 2) {
            if (this.ParentTreeNode) {
                this.StateOfScContentTreeNode.Lineage.L1MainIconSrc = this.ParentTreeNode.StateOfScContentTreeNode.Lineage.L1MainIconSrc;
                this.StateOfScContentTreeNode.Lineage.L1Text = this.ParentTreeNode.StateOfScContentTreeNode.Lineage.L1Text;
            }
            else {
                this.StateOfScContentTreeNode.Lineage.L1MainIconSrc = '';
                this.StateOfScContentTreeNode.Lineage.L1Text = '';
            }
            this.StateOfScContentTreeNode.Lineage.L2Icon = this.StateOfScContentTreeNode.IconSrc;
            this.StateOfScContentTreeNode.Lineage.L2Text = this.StateOfScContentTreeNode.Friendly;
        }
        else {
            if (this.ParentTreeNode) {
                this.StateOfScContentTreeNode.Lineage.L1MainIconSrc = this.ParentTreeNode.StateOfScContentTreeNode.Lineage.L1MainIconSrc;
                this.StateOfScContentTreeNode.Lineage.L1Text = this.ParentTreeNode.StateOfScContentTreeNode.Lineage.L1Text;
                this.StateOfScContentTreeNode.Lineage.L2Icon = this.ParentTreeNode.StateOfScContentTreeNode.Lineage.L2Icon;
                this.StateOfScContentTreeNode.Lineage.L2Text = this.ParentTreeNode.StateOfScContentTreeNode.Lineage.L2Text;
            }
            else {
                this.StateOfScContentTreeNode.Lineage.L1MainIconSrc = '';
                this.StateOfScContentTreeNode.Lineage.L1Text = '';
                this.StateOfScContentTreeNode.Lineage.L2Icon = '';
                this.StateOfScContentTreeNode.Lineage.L2Text = '';
            }
        }
        if (this.StateOfScContentTreeNode.Coord.LevelIndex == 0) {
            this.StateOfScContentTreeNode.Lineage.L1MainIconSrc = '';
        }
        else if (this.StateOfScContentTreeNode.Coord.LevelIndex == 1) {
            this.StateOfScContentTreeNode.Lineage.L1MainIconSrc = this.StateOfScContentTreeNode.IconSrc;
        }
        else {
            if (this.ParentTreeNode) {
                this.StateOfScContentTreeNode.Lineage.L1MainIconSrc = this.ParentTreeNode.StateOfScContentTreeNode.Lineage.L1MainIconSrc;
            }
            else {
                this.StateOfScContentTreeNode.Lineage.L1MainIconSrc = '';
            }
        }
    }
    HarvestNodeState(forceRefreshData = false) {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                if (!this.HasBeenHarvested || forceRefreshData) {
                    this.glyphElem = null;
                    this.LinkNodeElem = null;
                    this.Children = [],
                        yield this.PollinateNodeElem()
                            .then(() => this.PolllinateGlyphNodeElem())
                            .then(() => this.HarvestProperties())
                            .then(() => this.GetChildren())
                            .then((children) => this.Children = children)
                            .then(() => resolve())
                            .catch((err) => {
                            reject(this.HarvestNodeState.name + ' | ' + err);
                        });
                    this.HasBeenHarvested = true;
                }
                else {
                    resolve();
                }
            }));
        });
    }
    GetApparentItemId(htmlImageElement) {
        let glyphNodeIdSuffix = htmlImageElement.NativeElement.id.replace(ContentConst.Const.Names.SC.TreeGlyphPrefix, '');
        let toReturnGuidData = Guid_Guid.ParseGuid(glyphNodeIdSuffix, true);
        return toReturnGuidData;
    }
    GetIconSrc() {
        let toReturn;
        let foundElement = this.ScContentTreeNodeDivElem.querySelector(ContentConst.Const.Selector.SC.ContentEditor.scContentTreeNodeIcon);
        if (foundElement) {
            toReturn = foundElement.NativeElement.src;
        }
        return toReturn;
    }
    GetChildren() {
        return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                let toReturn = [];
                let childNodes = this.ScContentTreeNodeDivElem.NativeElement.querySelectorAll(':scope > div > ' + ContentConst.Const.Selector.SC.ContentEditor.ScContentTreeNode);
                childNodes.forEach((childNode, index) => {
                    let childJacket = new ElementDivJacket_ElementDivJacket(this.HindeCore, childNode);
                    toReturn.push(new ScContentTreeNodeProxy_ScContentTreeNodeProxy(this.HindeCore, childJacket, this.StateOfScContentTreeNode.Coord.LevelIndex + 1, index, childNodes.length, this));
                });
                let PromiseAr = [];
                toReturn.forEach((newScContentTreeNodeProxy) => PromiseAr.push(newScContentTreeNodeProxy.Instantiate()));
                yield Promise.all(PromiseAr);
                resolve(toReturn);
            }
            catch (err) {
                reject(this.GetChildren.name + ' | ' + err);
            }
        }));
    }
    GetMainIconSrc() {
        let toReturn;
        let penultimateNode = this;
        let penultimateElem = this.ScContentTreeNodeDivElem.NativeElement.closest('[id=ContentTreeActualSize] > .scContentTreeNode >  div > .scContentTreeNode');
        if (penultimateElem) {
            let penElemJacket = new ElementDivJacket_ElementDivJacket(this.HindeCore, penultimateElem);
            penultimateNode = new ScContentTreeNodeProxy_ScContentTreeNodeProxy(this.HindeCore, penElemJacket, 0, 0, 1, this);
        }
        if (penultimateNode !== null) {
            toReturn = penultimateNode.GetIconSrc();
        }
        return toReturn;
    }
    SetStateOfTreeNode(newData, depth) {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                if (newData.IsExpanded) {
                    yield this.ExpandNode();
                }
                if (newData.IsActive) {
                    yield this.ActivateNode();
                }
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.SetStateOfTreeNode.name, err);
            }
        });
    }
    QueryIsActive() {
        let classList = this.LinkNodeElem.NativeElement.classList;
        let toReturn = classList.contains(ContentConst.Const.ClassNames.SC.scContentTreeNodeActive);
        return toReturn;
    }
    ActivateNode() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.ActivateNode.name);
                this.Logger.Log('activating node: ' + this.StateOfScContentTreeNode.Friendly);
                yield this.RecipeBasics.WaitForElemToHaveClassOrReject(this.LinkNodeElem.NativeElement, [ContentConst.Const.ClassNames.SC.scContentTreeNodeActive, ContentConst.Const.ClassNames.SC.scContentTreeNodeNormal], this.StateOfScContentTreeNode.Friendly);
                this.LinkNodeElem.NativeElement.click();
                yield this.RecipeBasics.WaitForElemToHaveClassOrReject(this.LinkNodeElem.NativeElement, [ContentConst.Const.ClassNames.SC.scContentTreeNodeActive], this.StateOfScContentTreeNode.Friendly)
                    .then(() => resolve())
                    .catch((err) => reject(this.ActivateNode.name + ' | ' + err));
                this.Logger.FuncEnd(this.ActivateNode.name);
            }));
        });
    }
    ExpandNode() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.QueryIsExpanded()) {
                    this.glyphElem.NativeElement.click();
                }
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.ExpandNode.name, err);
            }
        });
    }
    IsContentTreeNode() {
        var toReturn = false;
        var className = this.ScContentTreeNodeDivElem.NativeElement.className;
        toReturn = className === ContentConst.Const.ClassNames.SC.ContentTreeNode;
        return toReturn;
    }
    QueryIsExpanded() {
        var toReturn = false;
        var srcAttr = this.glyphElem.NativeElement.getAttribute('src');
        if (srcAttr !== null) {
            if (srcAttr.indexOf(ContentConst.Const.Names.SC.TreeExpandedPng.sc920) > -1) {
                toReturn = true;
            }
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentTreeProxy/ContentTreeProxy.js
var ContentTreeProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class ContentTreeProxy_BuiltInContentTreeNodeResolver extends _HindeCoreBase_HindeCoreBase {
    GetBuiltInNode() {
    }
}
class ContentTreeProxy_ContentTreeProxy extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, documentJacket, treeContainerJacket, TreeRootSelector) {
        super(hindeCore);
        this.ErrorHand.ThrowIfNullOrUndefined(ContentTreeProxy_ContentTreeProxy.name, [documentJacket, treeContainerJacket]);
        this.DocumentJacket = documentJacket;
        this.TreeRootSelector = TreeRootSelector;
        this.TreeContainerJacket = treeContainerJacket;
    }
    Instantiate_TreeProxy() {
        return ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.Instantiate_TreeProxy.name);
            try {
                yield this.SetRootNodeFromSelector()
                    .then(() => {
                    this.ContentTreeMutationEvent_Subject = new ContentTreeProxyMutationEvent_Subject_ContentTreeMutationEvent_Subject(this.HindeCore);
                    this.NativeClassNameChangeEvent_Subject = new NativeClassNameChangeEvent_Subject_NativeClassNameChangeEvent_Subject(this.HindeCore, this.TreeContainerJacket);
                    this.NativeClassNameChangeEvent_Observer = new NativeClassNameChangeEvent_Observer_NativeClassNameChangeEvent_Observer(this.HindeCore, this.CallBackOnNativeClassNameChangeEventAsync.bind(this));
                });
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.Instantiate_TreeProxy.name, err);
            }
            this.Logger.FuncEnd(this.Instantiate_TreeProxy.name);
        });
    }
    WireEvents_TreeProxy() {
        this.Logger.FuncStart(this.WireEvents_TreeProxy.name);
        this.NativeClassNameChangeEvent_Subject.RegisterObserver(this.NativeClassNameChangeEvent_Observer);
        this.Logger.FuncEnd(this.WireEvents_TreeProxy.name);
    }
    CallBackOnNativeClassNameChangeEventAsync(notUsed) {
        this.Logger.FuncStart(this.CallBackOnNativeClassNameChangeEventAsync.name);
        this.TaskMonitor.AsyncTaskStarted(this.CallBackOnNativeClassNameChangeEventAsync.name);
        if (this.ContentTreeMutationEvent_Subject) {
            this.GetStateOfContentTree()
                .then((stateOfContentTree) => {
                let TreeMutationEvent_Payload = {
                    StateOfContentTree: stateOfContentTree
                };
                this.ContentTreeMutationEvent_Subject.NotifyObserversAsync(TreeMutationEvent_Payload);
            })
                .then(() => this.Logger.Log(this.CallBackOnNativeClassNameChangeEventAsync.name + ' completed'))
                .catch((err) => this.ErrorHand.ErrorAndThrow(this.CallBackOnNativeClassNameChangeEventAsync.name, err));
        }
        this.TaskMonitor.AsyncTaskCompleted(this.CallBackOnNativeClassNameChangeEventAsync.name);
        this.Logger.FuncEnd(this.CallBackOnNativeClassNameChangeEventAsync.name);
    }
    TriggerActiveNodeChangeEvent() {
        this.Logger.FuncStart(this.TriggerActiveNodeChangeEvent.name);
        this.CallBackOnNativeClassNameChangeEventAsync(null);
        this.Logger.FuncEnd(this.TriggerActiveNodeChangeEvent.name);
    }
    GetTreeNodeByGlyph(targetNode) {
        return new Promise((resolve, reject) => ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            let scContentTreeNodeProxy = null;
            if (targetNode && this.TreeContainerJacket) {
                var treeGlyphTargetId = ContentConst.Const.Names.SC.TreeGlyphPrefix + Guid_Guid.WithoutDashes(targetNode.ItemId);
                yield this.TreeContainerJacket.WaitAndReturnFoundElemJacketFromElemJacket('[id=' + treeGlyphTargetId + ']', this.GetTreeNodeByGlyph.name + ' ' + treeGlyphTargetId)
                    .then((elemJacket) => scContentTreeNodeProxy = new ScContentTreeNodeProxy_ScContentTreeNodeProxy(this.HindeCore, elemJacket, targetNode.Coord.LevelIndex, targetNode.Coord.SiblingIndex, targetNode.Coord.LevelWidth, null))
                    .then(() => scContentTreeNodeProxy.Instantiate())
                    .then(() => resolve(scContentTreeNodeProxy))
                    .catch((err) => reject(this.GetTreeNodeByGlyph.name + ' | ' + err));
            }
        }));
    }
    SetStateOfNodeRecursive(currentNodeData, depth) {
        return ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.SetStateOfNodeRecursive.name, currentNodeData.Friendly);
            try {
                let maxIterDepth = 200;
                let targetScContentTreeNodeProxy = null;
                let promisesAr = [];
                if (depth > maxIterDepth) {
                    this.ErrorHand.ErrorAndThrow(this.SetStateOfNodeRecursive.name, 'Iteration check - max depth exceed. Something is probably wrong');
                }
                if (depth < maxIterDepth && currentNodeData) {
                    yield this.GetTreeNodeByGlyph(currentNodeData)
                        .then((scContentTreeNodeProxy) => {
                        targetScContentTreeNodeProxy = scContentTreeNodeProxy;
                    })
                        .then(() => targetScContentTreeNodeProxy.SetStateOfTreeNode(currentNodeData, depth))
                        .then(() => {
                        if (currentNodeData.NodeChildren.length > 0) {
                            currentNodeData.NodeChildren.forEach((nodeChild) => promisesAr.push(this.SetStateOfNodeRecursive(nodeChild, depth + 1)));
                        }
                    })
                        .then(() => Promise.all(promisesAr));
                }
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.SetStateOfNodeRecursive.name, err);
            }
            this.Logger.FuncEnd(this.SetStateOfNodeRecursive.name, currentNodeData.Friendly);
        });
    }
    SetStateOfContentTree(currentNodeData) {
        return ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.SetStateOfContentTree.name);
            this.TaskMonitor.AsyncTaskStarted(this.SetStateOfContentTree.name);
            try {
                this.ContentTreeMutationEvent_Subject.DisableNotifications();
                yield this.SetStateOfNodeRecursive(currentNodeData, 0);
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.SetStateOfContentTree.name, err);
            }
            this.ContentTreeMutationEvent_Subject.EnableNotifications();
            this.TaskMonitor.AsyncTaskCompleted(this.SetStateOfContentTree.name);
            this.Logger.FuncEnd(this.SetStateOfContentTree.name);
        });
    }
    SetRootNodeFromSelector() {
        return ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                yield this.DocumentJacket.WaitForAndReturnFoundElemJacket(this.TreeRootSelector)
                    .then((elementJacket) => this.rootTreeNodeJacket = elementJacket);
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.SetRootNodeFromSelector.name, err);
            }
        });
    }
    GetActiveTreeNodeFromAncestorNode(stateOfScContentTreeNodeDeep) {
        let foundNode = null;
        if (stateOfScContentTreeNodeDeep.IsActive) {
            foundNode = stateOfScContentTreeNodeDeep;
        }
        else {
            stateOfScContentTreeNodeDeep.NodeChildren.forEach((child) => {
                let candidate = this.GetActiveTreeNodeFromAncestorNode(child);
                if (candidate !== null) {
                    foundNode = candidate;
                }
            });
        }
        return foundNode;
    }
    GetStateOfContentTree() {
        return new Promise((resolve, reject) => ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetStateOfContentTree.name);
            let stateOfContentTree = new DefaultStateOfContentTree();
            this.ErrorHand.ThrowIfNullOrUndefined(this.GetStateOfContentTree.name, [stateOfContentTree]);
            yield this.GetStateOfContentTreeNodeDeep()
                .then((result) => stateOfContentTree.StateOfScContentTreeNodeDeep = result)
                .then(() => {
                let activeNodeFlat = this.GetActiveTreeNodeFromAncestorNode(stateOfContentTree.StateOfScContentTreeNodeDeep);
                if (activeNodeFlat) {
                    stateOfContentTree.ActiveNodeShallow = activeNodeFlat;
                }
            })
                .then(() => resolve(stateOfContentTree))
                .catch((err) => reject(this.GetStateOfContentTree.name + ' | ' + err));
            this.Logger.FuncEnd(this.GetStateOfContentTree.name);
        }));
    }
    GetTreeNodeProxy() {
        return new Promise((resolve, reject) => ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            if (this.DocumentJacket) {
                if (this.rootTreeNodeJacket) {
                    var rootParent = this.rootTreeNodeJacket.parentElement();
                    yield rootParent.WaitAndReturnFoundElemJacketFromElemJacket(ContentConst.Const.Selector.SC.ContentEditor.ScContentTreeNodeGlyph, this.GetStateOfContentTreeNodeDeep.name)
                        .then((firstChildGlyphNode) => ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
                        this._treeNodeProxy = new ScContentTreeNodeProxy_ScContentTreeNodeProxy(this.HindeCore, firstChildGlyphNode, 0, 0, 1, null);
                        yield this._treeNodeProxy.Instantiate();
                    }))
                        .catch((err) => reject(this.GetTreeNodeProxy.name + ' | ' + err));
                }
                else {
                    this.ErrorHand.ErrorAndThrow(this.GetStateOfContentTreeNodeDeep.name, 'no root node');
                }
            }
            else {
                this.ErrorHand.ErrorAndThrow(this.GetStateOfContentTreeNodeDeep.name, 'no targetDoc');
            }
            resolve(this._treeNodeProxy);
        }));
    }
    GetStateOfContentTreeNodeDeep() {
        return new Promise((resolve, reject) => ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetStateOfContentTreeNodeDeep.name);
            yield this.GetTreeNodeProxy()
                .then((scContentTreeNodeProxy) => scContentTreeNodeProxy.GetStateOfScContentTreeNodeDeep())
                .then((stateOfScContentTreeNodeProxy) => {
                resolve(stateOfScContentTreeNodeProxy);
            })
                .catch((err) => reject(this.GetStateOfContentTreeNodeDeep.name + ' | ' + err));
            this.Logger.FuncEnd(this.GetStateOfContentTreeNodeDeep.name);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/_ContentTreeBasedProxy.js
var _ContentTreeBasedProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class _ContentTreeBasedProxy_ContentTreeBasedProxy extends _StateProxy_BaseStateFullProxy {
    constructor(hindeCore, documentJacket, friendly) {
        super(hindeCore);
        this.Logger.CTORStart(_ContentTreeBasedProxy_ContentTreeBasedProxy.name);
        this.AssociatedHindsiteId = Guid_Guid.NewRandomGuid();
        this.DocumentJacket = documentJacket;
        this.Friendly = friendly;
        this.AssociatedHindsiteId = Guid_Guid.NewRandomGuid();
        this.ValidateAssociatedDocContentEditor();
        this.Friendly = friendly;
        this.Instantiate();
        this.Logger.CTOREnd(_ContentTreeBasedProxy_ContentTreeBasedProxy.name);
    }
    Instantiate() {
        this.RecipeBasic = new RecipeBasics_RecipeBasics(this.HindeCore);
    }
    __baseInstantiateAsyncMembers() {
        return _ContentTreeBasedProxy_awaiter(this, void 0, void 0, function* () {
            yield this.DocumentJacket.WaitForCompleteNAB_DocumentJacket(this.Friendly)
                .then(() => this.DocumentJacket.WaitForAndReturnFoundElemJacket(ContentConst.Const.Selector.SC.ContentEditor.ScContentTreeContainer))
                .then((treeContainer) => this.ContentTreeProxy = new ContentTreeProxy_ContentTreeProxy(this.HindeCore, this.DocumentJacket, treeContainer, this.TreeRootSelector))
                .then(() => this.ContentTreeProxy.Instantiate_TreeProxy())
                .then(() => {
                this.__ContentTreeBasedProxyMutationEvent_Subject = new ContentEditorProxyMutationEvent_Subject_ContentTreeBasedProxyMutationEvent_Subject(this.HindeCore);
                this.TreeMutationEvent_Observer = new ContentTreeProxyMutationEvent_Observer_ContentTreeBasedProxyMutationEvent_Observer(this.HindeCore, this.CallBackOn__ContentTreeBasedProxyTreeMutationEventAsync.bind(this));
            })
                .then(() => { })
                .catch((err) => this.ErrorHand.ErrorAndThrow(this.InstantiateAsyncMembers.name, err));
        });
    }
    __baseWireEvents() {
        this.ContentTreeProxy.WireEvents_TreeProxy();
        this.ContentTreeProxy.ContentTreeMutationEvent_Subject.RegisterObserver(this.TreeMutationEvent_Observer);
    }
    __baseSetState(stateOfContentTreeBasedProxies) {
        return _ContentTreeBasedProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => _ContentTreeBasedProxy_awaiter(this, void 0, void 0, function* () {
                this.ErrorHand.ThrowIfNullOrUndefined(this.SetState.name + ' ' + _ContentTreeBasedProxy_ContentTreeBasedProxy.name, stateOfContentTreeBasedProxies);
                this.ErrorHand.ThrowIfNullOrUndefined(this.SetState.name + ' ' + _ContentTreeBasedProxy_ContentTreeBasedProxy.name, stateOfContentTreeBasedProxies.StateOfContentTree);
                this.__ContentTreeBasedProxyMutationEvent_Subject.DisableNotifications();
                yield this.RecipeBasic.WaitForTimePeriod(1, this.SetState.name)
                    .then(() => this.RecipeBasic.WaitForNoUiFrontOverlay(this.SetState.name))
                    .then(() => this.ContentTreeProxy.SetStateOfContentTree(stateOfContentTreeBasedProxies.StateOfContentTree.StateOfScContentTreeNodeDeep))
                    .then(() => {
                    this.__ContentTreeBasedProxyMutationEvent_Subject.EnableNotifications();
                    resolve(true);
                })
                    .catch((err) => {
                    this.__ContentTreeBasedProxyMutationEvent_Subject.EnableNotifications();
                    reject(this.SetState.name + " " + err);
                });
            }));
        });
    }
    CallBackOn__ContentTreeBasedProxyTreeMutationEventAsync(treeMutationEvent_Payload) {
        this.Logger.FuncStart(this.CallBackOn__ContentTreeBasedProxyTreeMutationEventAsync.name);
        this.TaskMonitor.AsyncTaskStarted(this.CallBackOn__ContentTreeBasedProxyTreeMutationEventAsync.name);
        let _contentEditorProxyMutationEvent_Payload = {
            TreeMutationEvent_Payload: treeMutationEvent_Payload,
        };
        if (this.__ContentTreeBasedProxyMutationEvent_Subject) {
            this.__ContentTreeBasedProxyMutationEvent_Subject.NotifyObserversAsync(_contentEditorProxyMutationEvent_Payload);
        }
        this.TaskMonitor.AsyncTaskCompleted(this.CallBackOn__ContentTreeBasedProxyTreeMutationEventAsync.name);
        this.Logger.FuncEnd(this.CallBackOn__ContentTreeBasedProxyTreeMutationEventAsync.name);
    }
    ValidateAssociatedDocContentEditor() {
        if (!this.DocumentJacket) {
            this.ErrorHand.ErrorAndThrow(this.ValidateAssociatedDocContentEditor.name, 'No doc provided');
        }
        this.DocumentJacket.Validate();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/_baseDefaultStateOfContentTreeBasedProxies.js

class _baseDefaultStateOfContentTreeBasedProxies_baseDefaultStateOfContentTreeBasedProxies {
    constructor() {
        this.StateOfContentTree = new DefaultStateOfContentTree();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfContentEditor.js


class DefaultStateOfContentEditor_DefaultStateOfContentEditor extends _baseDefaultStateOfContentTreeBasedProxies_baseDefaultStateOfContentTreeBasedProxies {
    constructor() {
        super(...arguments);
        this.StatefullDisciminatorFriendly = StateFullProxyDisciminator[StateFullProxyDisciminator.ContentEditor];
        this.StatefullDisciminator = StateFullProxyDisciminator.ContentEditor;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentEditorProxy.js
var ContentEditorProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






class ContentEditorProxy_ContentEditorSFProxy extends _ContentTreeBasedProxy_ContentTreeBasedProxy {
    constructor(hindeCore, documentJacket, friendly) {
        super(hindeCore, documentJacket, friendly);
        this.TreeRootSelector = ContentConst.Const.Selector.SC.ContentTree.BuiltIn.TreeNodeSitecoreRoot;
        this.StateFullProxyDisciminator = StateFullProxyDisciminator.ContentEditor;
        this.Logger.CTORStart(ContentEditorProxy_ContentEditorSFProxy.name);
        this.Logger.CTOREnd(ContentEditorProxy_ContentEditorSFProxy.name);
    }
    PublishItem() {
        return ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            let publishProxy = new ContentEditorPublishProxy_ContentEditorPublishProxy(this.HindeCore, this, this.DocumentJacket);
            yield publishProxy.Execute();
        });
    }
    InstantiateAsyncMembers() {
        return ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.InstantiateAsyncMembers.name, ContentEditorProxy_ContentEditorSFProxy.name);
            try {
                yield this.__baseInstantiateAsyncMembers()
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.InstantiateAsyncMembers.name, err));
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.InstantiateAsyncMembers.name, err);
            }
            this.Logger.FuncEnd(this.InstantiateAsyncMembers.name, ContentEditorProxy_ContentEditorSFProxy.name);
        });
    }
    WireEvents() {
        this.Logger.FuncStart(this.WireEvents.name, ContentEditorProxy_ContentEditorSFProxy.name);
        this.__baseWireEvents();
        this.Logger.FuncEnd(this.WireEvents.name, ContentEditorProxy_ContentEditorSFProxy.name);
    }
    GetState() {
        return new Promise((resolve, reject) => ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetState.name, ContentEditorProxy_ContentEditorSFProxy.name);
            let toReturnStateOfContentEditor = new DefaultStateOfContentEditor_DefaultStateOfContentEditor();
            yield this.ContentTreeProxy.GetStateOfContentTree()
                .then((stateOfContentTree) => toReturnStateOfContentEditor.StateOfContentTree = stateOfContentTree)
                .then(() => resolve(toReturnStateOfContentEditor))
                .catch((err) => reject(this.GetState.name + ' | ' + err));
            this.Logger.FuncEnd(this.GetState.name, ContentEditorProxy_ContentEditorSFProxy.name);
        }));
    }
    SetState(dataToRestore) {
        return ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.SetState.name, ContentEditorProxy_ContentEditorSFProxy.name + ' ' + Guid_Guid.AsShort(this.DocumentJacket.DocId));
                let StateResponse = false;
                yield this.__baseSetState(dataToRestore)
                    .then((response) => StateResponse = response)
                    .then(() => {
                    resolve(StateResponse);
                })
                    .catch((err) => {
                    reject(this.SetState.name + " " + err);
                });
                this.Logger.FuncEnd(this.SetState.name, ContentEditorProxy_ContentEditorSFProxy.name);
            }));
        });
    }
    TriggerInboundEventsAsync() {
        this.ErrorHand.ThrowIfNullOrUndefined(this.TriggerInboundEventsAsync.name + ' ' + ContentEditorProxy_ContentEditorSFProxy.name, this.ContentTreeProxy);
        this.ContentTreeProxy.TriggerActiveNodeChangeEvent();
    }
    WaitForCompleteNABContentEditor() {
        return ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForCompleteNABContentEditor.name);
            try {
                yield this.DocumentJacket.WaitForCompleteNAB_DocumentJacket(this.Friendly)
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.WaitForCompleteNABContentEditor.name, err));
            }
            catch (e) {
            }
            this.Logger.FuncEnd(this.WaitForCompleteNABContentEditor.name);
        });
    }
    SetCompactCss() {
        this.Logger.FuncStart(this.SetCompactCss.name, Guid_Guid.AsShort(this.DocumentJacket.DocId));
        this.Logger.FuncStart(this.SetCompactCss.name, Guid_Guid.AsShort(this.DocumentJacket.DocId));
    }
    GetActiveNode(allTreeNodeAr) {
        this.Logger.FuncStart(this.GetActiveNode.name);
        let toReturn = null;
        if (allTreeNodeAr) {
            for (var idx = 0; idx < allTreeNodeAr.length; idx++) {
                let candidate = allTreeNodeAr[idx];
                if (candidate.IsActive) {
                    toReturn = candidate;
                    break;
                }
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.GetActiveNode.name, 'No tree data provided');
        }
        this.Logger.FuncEnd(this.GetActiveNode.name, toReturn.Friendly);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfPackageDesigner.js

class DefaultStateOfPackageDesigner_DefaultStateOfPackageDesigner {
    constructor() {
        this.StatefullDisciminatorFriendly = StateFullProxyDisciminator[StateFullProxyDisciminator.PackageDesigner];
        this.StatefullDisciminator = StateFullProxyDisciminator.PackageDesigner;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/PackageDesignerProxy/PackageDesignerProxy.js
var PackageDesignerProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






class PackageDesignerProxy_PackageDesignerProxy extends _StateProxy_BaseStateFullProxy {
    constructor(hindeCore, documentJacket, friendly) {
        super(hindeCore);
        this.StateFullProxyDisciminator = StateFullProxyDisciminator.PackageDesigner;
        this.Logger.CTORStart(ContentEditorProxy_ContentEditorSFProxy.name);
        this.DocumentJacket = documentJacket;
        this.Friendly = friendly;
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
        this.Logger.CTOREnd(ContentEditorProxy_ContentEditorSFProxy.name);
    }
    InstantiateAsyncMembers() {
        this.Logger.FuncStart(this.InstantiateAsyncMembers.name, this.Friendly);
        this.Logger.FuncEnd(this.InstantiateAsyncMembers.name, this.Friendly);
    }
    WireEvents() {
        this.Logger.FuncStart(this.WireEvents.name, this.Friendly);
        this.Logger.FuncEnd(this.WireEvents.name, this.Friendly);
    }
    GetState() {
        return PackageDesignerProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.Logger.FuncStart(this.GetState.name, PackageDesignerProxy_PackageDesignerProxy.name);
                let stateOfPackageDesigner = new DefaultStateOfPackageDesigner_DefaultStateOfPackageDesigner();
                stateOfPackageDesigner.StatusText = this.GetLoadedPackageFileName();
                resolve(stateOfPackageDesigner);
                this.Logger.FuncEnd(this.GetState.name, PackageDesignerProxy_PackageDesignerProxy.name);
            });
        });
    }
    SetState(stateOfPackageDesigner) {
        return PackageDesignerProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => PackageDesignerProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.SetState.name, PackageDesignerProxy_PackageDesignerProxy.name);
                if (stateOfPackageDesigner) {
                    if (stateOfPackageDesigner.StatusText.length > 0) {
                        let appFrameProxy = null;
                        let parentJacket = this.DocumentJacket.GetParentJacket();
                        if (!parentJacket) {
                            reject(this.GetState + ' - ' + PackageDesignerProxy_PackageDesignerProxy.name + ' - no parent jacket');
                        }
                        yield this.DocumentJacket.WaitForCompleteNAB_DocumentJacket(this.SetState.name + ' ' + PackageDesignerProxy_PackageDesignerProxy.name)
                            .then(() => this.DocumentJacket.WaitForFirstHostedFrame(ContentConst.Const.Selector.SC.Frames.AppFrame.Id))
                            .then((frameJacket) => this.SupportFrameFactory.MakeAppFrameProxy(frameJacket, parentJacket))
                            .then((returnedAppFrameProxy) => appFrameProxy = returnedAppFrameProxy)
                            .then(() => appFrameProxy.OpenFile(stateOfPackageDesigner.StatusText))
                            .then(() => resolve())
                            .catch((err) => reject(this.ErrorHand.FormatejectMessage([PackageDesignerProxy_PackageDesignerProxy.name, this.SetState.name], err)));
                    }
                }
                this.Logger.FuncEnd(this.SetState.name, PackageDesignerProxy_PackageDesignerProxy.name);
            }));
        });
    }
    TriggerInboundEventsAsync() {
        this.Logger.Log('todo ' + PackageDesignerProxy_PackageDesignerProxy.name);
    }
    GetLoadedPackageFileName() {
        let toReturn = '';
        let appFrame = this.DocumentJacket.GetElementById('AppFrame').NativeElement;
        if (appFrame) {
            let contentDoc = appFrame.contentDocument;
            if (contentDoc) {
                let target = contentDoc.getElementById(ContentConst.Const.ElemId.SC.PackageDesigner.StatusText);
                if (target) {
                    toReturn = target.innerText;
                }
            }
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/ContentEditorProxyMutationEvent/ContentEditorProxyMutationEvent_Observer.js

class ContentEditorProxyMutationEvent_Observer_ContentTreeBasedProxyMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, ownerFrameProxy) {
        super(hindeCore, ContentEditorProxyMutationEvent_Observer_ContentTreeBasedProxyMutationEvent_Observer.name);
        this.ShowLogActions = true;
        this.OwnerDTFrameProxy = ownerFrameProxy;
    }
    UpdateAsync(payload) {
        this.OwnerDTFrameProxy.OnContentEditorProxyMutation(payload);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/DTFrameProxyMutationEvent/DTFrameProxyMutationEvent_Subject.js

class DTFrameProxyMutationEvent_Subject_DTFrameProxyMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore) {
        super(hindeCore, DTFrameProxyMutationEvent_Subject_DTFrameProxyMutationEvent_Subject.name);
        this.ShowLogActions = true;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/FrameProxies/_BaseScFrameProxy.js
var _BaseScFrameProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class _BaseScFrameProxy_BaseScFrameProxy extends _StateProxy_BaseStateFullProxy {
    constructor(hindeCore, frameJacket) {
        super(hindeCore);
        this.FrameJacket = null;
        this.Id = null;
        this.ErrorHand.ThrowIfNullOrUndefined(_BaseScFrameProxy_BaseScFrameProxy.name, [frameJacket]);
        this.FrameJacket = frameJacket;
        this.Id = 'base_' + this.FrameJacket.GetNativeIframeId();
    }
    GetZindexAsInt() {
        return this.FrameJacket.ZindexAsInt();
    }
    GetDocumentJacket() {
        return this.FrameJacket.DocumentJacket;
    }
    WaitForCompleteNABFrameProxyOrReject() {
        return _BaseScFrameProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => _BaseScFrameProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForCompleteNABFrameProxyOrReject.name, this.Friendly);
                yield this.FrameJacket.WaitForCompleteNABHtmlIframeElement(this.Friendly)
                    .then((result) => {
                    if (result.IsCompleteNAB()) {
                        resolve(result.DocumentReadyState());
                    }
                    else {
                        reject(result.DocumentReadtStateFriendly);
                    }
                })
                    .catch((err) => reject(this.WaitForCompleteNABFrameProxyOrReject.name + ' | ' + err));
                this.Logger.FuncEnd(this.WaitForCompleteNABFrameProxyOrReject.name, this.Friendly);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfTemplateManager.js


class DefaultStateOfTemplateManager_DefaultStateOfTemplateManager extends _baseDefaultStateOfContentTreeBasedProxies_baseDefaultStateOfContentTreeBasedProxies {
    constructor() {
        super(...arguments);
        this.StatefullDisciminatorFriendly = StateFullProxyDisciminator[StateFullProxyDisciminator.TemplateManager];
        this.StatefullDisciminator = StateFullProxyDisciminator.TemplateManager;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/TemplateManagerProxy.js
var TemplateManagerProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class TemplateManagerProxy_TemplateManagerProxy extends _ContentTreeBasedProxy_ContentTreeBasedProxy {
    constructor() {
        super(...arguments);
        this.TreeRootSelector = ContentConst.Const.Selector.SC.ContentTree.BuiltIn.TemplatesAnchorRootNode;
        this.StateFullProxyDisciminator = StateFullProxyDisciminator.TemplateManager;
    }
    InstantiateAsyncMembers() {
        return TemplateManagerProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.InstantiateAsyncMembers.name, TemplateManagerProxy_TemplateManagerProxy.name);
            yield this.__baseInstantiateAsyncMembers()
                .then(() => { })
                .catch((err) => this.ErrorHand.ErrorAndThrow(this.InstantiateAsyncMembers.name, err));
            this.Logger.FuncEnd(this.InstantiateAsyncMembers.name, TemplateManagerProxy_TemplateManagerProxy.name);
        });
    }
    WireEvents() {
        this.__baseWireEvents();
    }
    TriggerInboundEventsAsync() {
    }
    GetState() {
        return new Promise((resolve, reject) => TemplateManagerProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetState.name, TemplateManagerProxy_TemplateManagerProxy.name);
            let toreturnStateOfTemplateManager = new DefaultStateOfTemplateManager_DefaultStateOfTemplateManager();
            yield this.ContentTreeProxy.GetStateOfContentTree()
                .then((stateOfContentTree) => toreturnStateOfTemplateManager.StateOfContentTree = stateOfContentTree)
                .then(() => resolve(toreturnStateOfTemplateManager))
                .catch((err) => reject(this.GetState.name + ' | ' + err));
            this.Logger.FuncEnd(this.GetState.name, TemplateManagerProxy_TemplateManagerProxy.name);
        }));
    }
    SetState(dataToRestore) {
        return TemplateManagerProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => TemplateManagerProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.SetState.name, _ContentTreeBasedProxy_ContentTreeBasedProxy.name + ' ' + Guid_Guid.AsShort(this.DocumentJacket.DocId));
                let StateResponse = false;
                yield this.__baseSetState(dataToRestore)
                    .then((response) => StateResponse = response)
                    .then(() => {
                    resolve(StateResponse);
                })
                    .catch((err) => {
                    reject(this.SetState.name + " " + err);
                });
                this.Logger.FuncEnd(this.SetState.name, _ContentTreeBasedProxy_ContentTreeBasedProxy.name);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfMediaLibrary.js


class DefaultStateOfMediaLibrary_DefaultStateOfMediaLibrary extends _baseDefaultStateOfContentTreeBasedProxies_baseDefaultStateOfContentTreeBasedProxies {
    constructor() {
        super(...arguments);
        this.StatefullDisciminatorFriendly = StateFullProxyDisciminator[StateFullProxyDisciminator.MediaLibrary];
        this.StatefullDisciminator = StateFullProxyDisciminator.MediaLibrary;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/MediaLibraryProxy.js
var MediaLibraryProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class MediaLibraryProxy_MediaLibraryProxy extends _ContentTreeBasedProxy_ContentTreeBasedProxy {
    constructor() {
        super(...arguments);
        this.TreeRootSelector = ContentConst.Const.Selector.SC.ContentTree.BuiltIn.MediaLibraryAnchorRootNode;
        this.StateFullProxyDisciminator = StateFullProxyDisciminator.MediaLibrary;
    }
    InstantiateAsyncMembers() {
        return MediaLibraryProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.InstantiateAsyncMembers.name, MediaLibraryProxy_MediaLibraryProxy.name);
            yield this.__baseInstantiateAsyncMembers()
                .then(() => { })
                .catch((err) => this.ErrorHand.ErrorAndThrow(this.InstantiateAsyncMembers.name, err));
            this.Logger.FuncEnd(this.InstantiateAsyncMembers.name, MediaLibraryProxy_MediaLibraryProxy.name);
        });
    }
    WireEvents() {
        this.__baseWireEvents();
    }
    TriggerInboundEventsAsync() {
    }
    GetState() {
        return new Promise((resolve, reject) => MediaLibraryProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetState.name, MediaLibraryProxy_MediaLibraryProxy.name);
            let toreturnStateOfMediaLibrary = new DefaultStateOfMediaLibrary_DefaultStateOfMediaLibrary();
            yield this.ContentTreeProxy.GetStateOfContentTree()
                .then((stateOfContentTree) => toreturnStateOfMediaLibrary.StateOfContentTree = stateOfContentTree)
                .then(() => resolve(toreturnStateOfMediaLibrary))
                .catch((err) => reject(this.GetState.name + ' | ' + err));
            this.Logger.FuncEnd(this.GetState.name, MediaLibraryProxy_MediaLibraryProxy.name);
        }));
    }
    SetState(dataToRestore) {
        return MediaLibraryProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => MediaLibraryProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.SetState.name, _ContentTreeBasedProxy_ContentTreeBasedProxy.name + ' ' + Guid_Guid.AsShort(this.DocumentJacket.DocId));
                let StateResponse = false;
                yield this.__baseSetState(dataToRestore)
                    .then((response) => StateResponse = response)
                    .then(() => {
                    resolve(StateResponse);
                })
                    .catch((err) => {
                    reject(this.SetState.name + " " + err);
                });
                this.Logger.FuncEnd(this.SetState.name, _ContentTreeBasedProxy_ContentTreeBasedProxy.name);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/QueryStrKey.js
var QueryStrKey;
(function (QueryStrKey) {
    QueryStrKey[QueryStrKey["hsTargetSs"] = 0] = "hsTargetSs";
    QueryStrKey[QueryStrKey["sc_mode"] = 1] = "sc_mode";
    QueryStrKey[QueryStrKey["sc_itemid"] = 2] = "sc_itemid";
    QueryStrKey[QueryStrKey["sc_lang"] = 3] = "sc_lang";
    QueryStrKey[QueryStrKey["sc_site"] = 4] = "sc_site";
    QueryStrKey[QueryStrKey["xmlcontrol"] = 5] = "xmlcontrol";
    QueryStrKey[QueryStrKey["he"] = 6] = "he";
    QueryStrKey[QueryStrKey["mo"] = 7] = "mo";
})(QueryStrKey || (QueryStrKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/scMode.js
var scMode;
(function (scMode) {
    scMode[scMode["Unknown"] = 0] = "Unknown";
    scMode[scMode["Edit"] = 1] = "Edit";
    scMode[scMode["Preview"] = 2] = "Preview";
    scMode[scMode["Normal"] = 3] = "Normal";
})(scMode || (scMode = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/UrlAgent/AllPageDeterminators.js


let AllPageDeterminators_AllPageDeterminators = (() => {
    class AllPageDeterminators {
    }
    AllPageDeterminators.regexPathTest_Sitecore_Shell = /sitecore\/shell/ig;
    AllPageDeterminators.regexMatchAll = /.*/ig;
    AllPageDeterminators.regexMatchApplicationsContentManager = /sitecore\/shell\/Applications\/Content.*Manager/ig;
    AllPageDeterminators.ScPages = [
        {
            ConfidenceScore: 0,
            Friendly: "Access View",
            QueryKeyValuePairs: [
                {
                    Key: QueryStrKey.xmlcontrol,
                    ValueMatch: /Application/ig,
                },
                {
                    Key: QueryStrKey.he,
                    ValueMatch: /Access.?Viewer/ig,
                }
            ],
            RegexPathTest: AllPageDeterminators.regexPathTest_Sitecore_Shell,
            ScWindowType: ScWindowType.AccessViewer,
            ScWindowTypeFriendly: ScWindowType[ScWindowType.AccessViewer],
        },
        {
            ConfidenceScore: 0,
            Friendly: "Content Editor",
            QueryKeyValuePairs: [
                {
                    Key: QueryStrKey.he,
                    ValueMatch: /Content.*Editor/ig,
                }
            ],
            RegexPathTest: /sitecore\/shell\/Applications\/Content.*Editor/ig,
            ScWindowType: ScWindowType.ContentEditor,
            ScWindowTypeFriendly: ScWindowType[ScWindowType.ContentEditor],
        },
        {
            ConfidenceScore: 0,
            Friendly: "Desktop",
            QueryKeyValuePairs: [],
            RegexPathTest: AllPageDeterminators.regexPathTest_Sitecore_Shell,
            ScWindowType: ScWindowType.Desktop,
            ScWindowTypeFriendly: ScWindowType[ScWindowType.Desktop],
        },
        {
            ConfidenceScore: 0,
            Friendly: "Domain Manager",
            QueryKeyValuePairs: [
                {
                    Key: QueryStrKey.xmlcontrol,
                    ValueMatch: /Application/ig,
                },
                {
                    Key: QueryStrKey.he,
                    ValueMatch: /Domain.?Manager/ig,
                }
            ],
            RegexPathTest: AllPageDeterminators.regexPathTest_Sitecore_Shell,
            ScWindowType: ScWindowType.DomainManager,
            ScWindowTypeFriendly: ScWindowType[ScWindowType.DomainManager],
        },
        {
            ConfidenceScore: 0,
            Friendly: "FallBack",
            QueryKeyValuePairs: [],
            RegexPathTest: /sitecore\//ig,
            ScWindowType: ScWindowType.FallBack,
            ScWindowTypeFriendly: ScWindowType[ScWindowType.FallBack],
        },
        {
            ConfidenceScore: 0,
            Friendly: "Launchpad",
            QueryKeyValuePairs: [],
            RegexPathTest: /sitecore\/client\/Applications\/Launchpad/ig,
            ScWindowType: ScWindowType.Launchpad,
            ScWindowTypeFriendly: ScWindowType[ScWindowType.Launchpad],
        },
        {
            ConfidenceScore: 0,
            Friendly: "Login",
            QueryKeyValuePairs: [],
            RegexPathTest: /sitecore\/login/ig,
            ScWindowType: ScWindowType.LoginPage,
            ScWindowTypeFriendly: ScWindowType[ScWindowType.LoginPage],
        },
        {
            ConfidenceScore: 0,
            Friendly: "Marketing Control Panel",
            QueryKeyValuePairs: [
                {
                    Key: QueryStrKey.he,
                    ValueMatch: /Marketing.?Control.?Panel/ig,
                }
            ],
            RegexPathTest: AllPageDeterminators.regexMatchApplicationsContentManager,
            ScWindowType: ScWindowType.MarketingControlPanel,
            ScWindowTypeFriendly: ScWindowType[ScWindowType.MarketingControlPanel],
        },
        {
            ConfidenceScore: 0,
            Friendly: "Media Library",
            QueryKeyValuePairs: [
                {
                    Key: QueryStrKey.he,
                    ValueMatch: /Media.?Library/ig,
                }
            ],
            RegexPathTest: AllPageDeterminators.regexMatchApplicationsContentManager,
            ScWindowType: ScWindowType.MediaLibrary,
            ScWindowTypeFriendly: ScWindowType[ScWindowType.MediaLibrary],
        },
        {
            ConfidenceScore: 0,
            Friendly: "Package Designer",
            QueryKeyValuePairs: [
                {
                    Key: QueryStrKey.he,
                    ValueMatch: /Package.?Designer/ig
                },
                {
                    Key: QueryStrKey.xmlcontrol,
                    ValueMatch: /Application/ig
                }
            ],
            RegexPathTest: AllPageDeterminators.regexPathTest_Sitecore_Shell,
            ScWindowType: ScWindowType.PackageDesigner,
            ScWindowTypeFriendly: ScWindowType[ScWindowType.PackageDesigner],
        },
        {
            ConfidenceScore: 0,
            Friendly: "Preview",
            RegexPathTest: AllPageDeterminators.regexMatchAll,
            QueryKeyValuePairs: [
                {
                    Key: QueryStrKey.sc_mode,
                    ValueMatch: /preview/ig
                }
            ],
            ScWindowType: ScWindowType.Preview,
            ScWindowTypeFriendly: ScWindowType[ScWindowType.Preview],
        },
        {
            ConfidenceScore: 0,
            Friendly: "Publish",
            QueryKeyValuePairs: [],
            RegexPathTest: /sitecore\/shell\/Applications\/Publish/ig,
            ScWindowType: ScWindowType.Publish,
            ScWindowTypeFriendly: ScWindowType[ScWindowType.Publish],
        },
        {
            ConfidenceScore: 0,
            Friendly: "Role Manager",
            QueryKeyValuePairs: [
                {
                    Key: QueryStrKey.xmlcontrol,
                    ValueMatch: /Application/ig,
                },
                {
                    Key: QueryStrKey.he,
                    ValueMatch: /Role.?Manager/ig,
                }
            ],
            RegexPathTest: AllPageDeterminators.regexPathTest_Sitecore_Shell,
            ScWindowType: ScWindowType.RollManager,
            ScWindowTypeFriendly: ScWindowType[ScWindowType.RollManager],
        },
        {
            ConfidenceScore: 0,
            Friendly: "Security Editor",
            QueryKeyValuePairs: [
                {
                    Key: QueryStrKey.xmlcontrol,
                    ValueMatch: /Application/ig,
                },
                {
                    Key: QueryStrKey.he,
                    ValueMatch: /Security.?Editor/ig,
                }
            ],
            RegexPathTest: AllPageDeterminators.regexPathTest_Sitecore_Shell,
            ScWindowType: ScWindowType.SecurityEditor,
            ScWindowTypeFriendly: ScWindowType[ScWindowType.SecurityEditor],
        },
        {
            ConfidenceScore: 0,
            Friendly: "Template Manager",
            QueryKeyValuePairs: [
                {
                    Key: QueryStrKey.he,
                    ValueMatch: /Template.*Manager/ig,
                }, {
                    Key: QueryStrKey.mo,
                    ValueMatch: /templateworkspace/ig,
                }
            ],
            RegexPathTest: AllPageDeterminators.regexMatchApplicationsContentManager,
            ScWindowType: ScWindowType.TemplateManager,
            ScWindowTypeFriendly: ScWindowType[ScWindowType.TemplateManager],
        },
        {
            ConfidenceScore: 0,
            Friendly: "Update Center",
            QueryKeyValuePairs: [],
            RegexPathTest: /sitecore\/shell\/client\/applications\/updatecenter\/updates/ig,
            ScWindowType: ScWindowType.FallBack,
            ScWindowTypeFriendly: ScWindowType[ScWindowType.FallBack],
        },
        {
            ConfidenceScore: 0,
            Friendly: "User Manager",
            QueryKeyValuePairs: [
                {
                    Key: QueryStrKey.xmlcontrol,
                    ValueMatch: /Application/ig,
                },
                {
                    Key: QueryStrKey.he,
                    ValueMatch: /User.?Manager/ig,
                }
            ],
            RegexPathTest: AllPageDeterminators.regexPathTest_Sitecore_Shell,
            ScWindowType: ScWindowType.UserManager,
            ScWindowTypeFriendly: ScWindowType[ScWindowType.UserManager],
        },
    ];
    return AllPageDeterminators;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/UrlAgent/ScPageTypeResolver.js






class ScPageTypeResolver_ScPageTypeResolver extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, urlJacket) {
        super(hindeCore);
        this.ErrorHand.ThrowIfNullOrUndefined(ScPageTypeResolver_ScPageTypeResolver.name, [urlJacket]);
        this.UrlJacket = urlJacket;
    }
    RunJacketAgainstAllDeterminators() {
        let determinators = AllPageDeterminators_AllPageDeterminators.ScPages;
        let toReturnPageDeterminator = null;
        determinators.forEach((determinant) => {
            let passed = true;
            determinant.ConfidenceScore = 0;
            passed = this.TestJacketAgainstRegex(determinant.RegexPathTest);
            if (passed) {
                let regExAsStr = determinant.RegexPathTest.toString();
                if (regExAsStr.charAt(0) === "/") {
                    regExAsStr = regExAsStr.substr(1);
                }
                if (regExAsStr.charAt(regExAsStr.length - 1) === "/") {
                    regExAsStr = regExAsStr.substr(0, regExAsStr.length - 1);
                }
                let slashCount = regExAsStr.split('/').length;
                determinant.ConfidenceScore += slashCount;
            }
            determinant.QueryKeyValuePairs.forEach((queryKeyvaluePairs) => {
                let queryTest = this.QueryStringHasKey(queryKeyvaluePairs.Key)
                    &&
                        (this.__urlTestAgainstRegex(queryKeyvaluePairs.ValueMatch, this.GetQueryStringValueByKey(queryKeyvaluePairs.Key)));
                passed = passed && queryTest;
                if (passed) {
                    determinant.ConfidenceScore++;
                }
            });
            if (passed) {
                if (!toReturnPageDeterminator || toReturnPageDeterminator.ConfidenceScore < determinant.ConfidenceScore) {
                    this.Logger.LogAsJsonPretty('current determinant winner', determinant);
                    toReturnPageDeterminator = determinant;
                }
            }
        });
        this.Logger.LogAsJsonPretty('Final winner', toReturnPageDeterminator);
        return toReturnPageDeterminator;
    }
    TestJacketAgainstRegex(regexPattern) {
        return this.__urlTestAgainstRegex(regexPattern, this.UrlJacket.OriginalURL);
    }
    SetParameterValueByKey(qsKey, qsValue) {
        return this.UrlJacket.SetParameterValueByKey(qsKey, qsValue);
    }
    GetUrlParts() {
        return this.UrlJacket.GetUrlParts();
    }
    GetQueryStringValueByKey(hsTargetSs) {
        return this.UrlJacket.GetQueryStringValueByKey(hsTargetSs);
    }
    QueryStringHasKey(hsTargetSs) {
        return this.UrlJacket.QueryStringHasKey(hsTargetSs);
    }
    BuildFullUrlFromParts_ScUrlAgent() {
        this.ErrorHand.ThrowIfNullOrUndefined(this.BuildFullUrlFromParts_ScUrlAgent.name, [this.UrlJacket]);
        return this.UrlJacket.BuildFullUrlFromParts();
    }
    __urlTestAgainstRegex(regexPattern, url) {
        this.Logger.FuncStart(this.__urlTestAgainstRegex.name, regexPattern.toString());
        this.Logger.LogVal('Url', url);
        let testResult = new RegExp(regexPattern).test(url);
        this.Logger.FuncEnd(this.__urlTestAgainstRegex.name, regexPattern.toString() + ' | ' + url + ' | ' + testResult.toString());
        return testResult;
    }
    GetScWindowtypeXmlControl() {
        var toReturn = ScWindowType.Unknown;
        if (this.QueryStringHasKey(QueryStrKey.he)) {
            let heValue = this.GetQueryStringValueByKey(QueryStrKey.he);
            switch (heValue) {
                case ('Package Designer'):
                    toReturn = ScWindowType.PackageDesigner;
                    break;
                default:
            }
        }
        if (toReturn === ScWindowType.Unknown) {
            this.ErrorHand.WarningAndContinue(this.GetScWindowtypeXmlControl.name, 'unhandled XmlControl type');
        }
        return toReturn;
    }
    GetScWindowType() {
        var toReturn = ScWindowType.Unknown;
        let result = this.RunJacketAgainstAllDeterminators();
        if (!result) {
            this.ErrorHand.ErrorAndThrow(this.GetScWindowType.name, 'Undetermined page');
        }
        else {
            toReturn = result.ScWindowType;
        }
        this.Logger.LogImportant(this.GetScWindowType.name + ' ' + ScWindowType[toReturn]);
        return toReturn;
    }
    BuildEditPrevNormUrl(newMode, contState) {
        let urlParts = this.GetUrlParts();
        urlParts.Anchor = '';
        urlParts.FilePath = '';
        this.SetParameterValueByKey(QueryStrKey.sc_mode, scMode[newMode]);
        this.SetParameterValueByKey(QueryStrKey.sc_lang, 'en');
        this.SetParameterValueByKey(QueryStrKey.sc_site, 'website');
    }
    SetScMode(newMode) {
        let urlParts = this.GetUrlParts();
        if (urlParts && newMode) {
            if (urlParts)
                this.SetParameterValueByKey(QueryStrKey.sc_mode, scMode[newMode]);
        }
    }
    SetFilePathFromWindowType(windowType = null) {
        if (!windowType) {
            windowType = ScWindowType.Unknown;
        }
        switch (windowType) {
            case ScWindowType.ContentEditor:
                this.UrlJacket.SetFilePath(SharedConst.Const.UrlSuffix.CE);
                break;
            case ScWindowType.Desktop:
                this.UrlJacket.SetFilePath(SharedConst.Const.UrlSuffix.Desktop);
                break;
            case ScWindowType.Edit:
                this.UrlJacket.SetFilePath(SharedConst.Const.UrlSuffix.None);
                break;
            case ScWindowType.Preview:
                this.UrlJacket.SetFilePath(SharedConst.Const.UrlSuffix.None);
                break;
            case ScWindowType.Normal:
                this.UrlJacket.SetFilePath(SharedConst.Const.UrlSuffix.None);
                break;
            default:
                this.UrlJacket.SetFilePath('');
                this.ErrorHand.ErrorAndThrow(this.SetFilePathFromWindowType.name, 'unaccounted for window type');
                break;
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/FallBackProxy.js
var FallBackProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class FallBackProxy_FallBackProxy extends _StateProxy_BaseStateFullProxy {
    constructor() {
        super(...arguments);
        this.StateFullProxyDisciminator = StateFullProxyDisciminator.FallBack;
    }
    GetState() {
        return FallBackProxy_awaiter(this, void 0, void 0, function* () {
            let toReturn = {
                StatefullDisciminator: this.StateFullProxyDisciminator,
                StatefullDisciminatorFriendly: StateFullProxyDisciminator[this.StateFullProxyDisciminator]
            };
            try {
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.GetState + '.' + FallBackProxy_FallBackProxy.name, err);
            }
            return toReturn;
        });
    }
    SetState(state) {
        return FallBackProxy_awaiter(this, void 0, void 0, function* () {
        });
    }
    WireEvents() {
    }
    InstantiateAsyncMembers() {
    }
    TriggerInboundEventsAsync() {
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/FrameProxies/DTFrameProxy.js
var DTFrameProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};













class DTFrameProxy_DTFrameProxy extends _BaseScFrameProxy_BaseScFrameProxy {
    constructor(hindeCore, frameJacket) {
        super(hindeCore, frameJacket);
        this.Friendly = DTFrameProxy_DTFrameProxy.name;
        this.StateFullProxyDisciminator = StateFullProxyDisciminator.DTFrameProxy;
        this.FrameTypeDiscriminator = DTFrameProxy_DTFrameProxy.name;
        this.Index = -1;
        this.ErrorHand.ThrowIfNullOrUndefined(DTFrameProxy_DTFrameProxy.name, [frameJacket]);
        this.Friendly = 'DTFrameProxy_' + this.FrameJacket.GetNativeIframeId();
        this.InstantiateInstance();
    }
    InstantiateInstance() {
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
    }
    InstantiateAsyncMembers() {
        return DTFrameProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DTFrameProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.InstantiateAsyncMembers.name, DTFrameProxy_DTFrameProxy.name);
                this.ErrorHand.ThrowIfNullOrUndefined(this.InstantiateAsyncMembers.name, [this.FrameJacket]);
                yield this.FrameJacket.WaitForCompleteNABHtmlIframeElement(this.Friendly)
                    .then((result) => {
                    if (!result.IsCompleteNAB()) {
                        reject(result.DocumentReadtStateFriendly());
                    }
                })
                    .then(() => {
                    let pageResolver = new ScPageTypeResolver_ScPageTypeResolver(this.HindeCore, this.FrameJacket.GetUrlJacket());
                    let scWindowType = pageResolver.GetScWindowType();
                    let scPageTypeResolver = new ScPageTypeResolver_ScPageTypeResolver(this.HindeCore, this.FrameJacket.DocumentJacket.UrlJacket);
                    let scWindowtypeB = scPageTypeResolver.GetScWindowType();
                    switch (scWindowtypeB) {
                        case ScWindowType.ContentEditor:
                            this.HostedStateFullProxy = new ContentEditorProxy_ContentEditorSFProxy(this.HindeCore, this.FrameJacket.DocumentJacket, this.Friendly);
                            break;
                        case ScWindowType.MarketingControlPanel:
                            this.HostedStateFullProxy = new FallBackProxy_FallBackProxy(this.HindeCore);
                            break;
                        case ScWindowType.MediaLibrary:
                            this.HostedStateFullProxy = new MediaLibraryProxy_MediaLibraryProxy(this.HindeCore, this.FrameJacket.DocumentJacket, this.Friendly);
                            break;
                        case ScWindowType.PackageDesigner:
                            this.HostedStateFullProxy = new PackageDesignerProxy_PackageDesignerProxy(this.HindeCore, this.FrameJacket.DocumentJacket, this.Friendly);
                            break;
                        case ScWindowType.TemplateManager:
                            this.HostedStateFullProxy = new TemplateManagerProxy_TemplateManagerProxy(this.HindeCore, this.FrameJacket.DocumentJacket, this.Friendly);
                            break;
                        default:
                            this.ErrorHand.WarningAndContinue(this.InstantiateAsyncMembers.name, 'un handled DTFrame type ' + ScWindowType[scWindowType]);
                    }
                })
                    .then(() => this.HostedStateFullProxy.InstantiateAsyncMembers())
                    .then(() => {
                    this.DTFrameProxyMutationEvent_Subject = new DTFrameProxyMutationEvent_Subject_DTFrameProxyMutationEvent_Subject(this.HindeCore);
                    this._ContentTreeBasedProxyMutationEvent_Observer = new ContentEditorProxyMutationEvent_Observer_ContentTreeBasedProxyMutationEvent_Observer(this.HindeCore, this);
                })
                    .then(() => resolve())
                    .catch((err) => reject(this.InstantiateAsyncMembers.name + ' | ' + err));
                this.Logger.FuncEnd(this.InstantiateAsyncMembers.name, DTFrameProxy_DTFrameProxy.name);
            }));
        });
    }
    WireEvents() {
        return DTFrameProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WireEvents.name, DTFrameProxy_DTFrameProxy.name);
            if (this.HostedStateFullProxy.StateFullProxyDisciminator === StateFullProxyDisciminator.ContentEditor) {
                this.HostedStateFullProxy.__ContentTreeBasedProxyMutationEvent_Subject.RegisterObserver(this._ContentTreeBasedProxyMutationEvent_Observer);
            }
            else if (this.HostedStateFullProxy.StateFullProxyDisciminator === StateFullProxyDisciminator.MediaLibrary) {
                this.HostedStateFullProxy.__ContentTreeBasedProxyMutationEvent_Subject.RegisterObserver(this._ContentTreeBasedProxyMutationEvent_Observer);
            }
            else if (this.HostedStateFullProxy.StateFullProxyDisciminator === StateFullProxyDisciminator.TemplateManager) {
                this.HostedStateFullProxy.__ContentTreeBasedProxyMutationEvent_Subject.RegisterObserver(this._ContentTreeBasedProxyMutationEvent_Observer);
            }
            this.HostedStateFullProxy.WireEvents();
            this.Logger.FuncEnd(this.WireEvents.name, DTFrameProxy_DTFrameProxy.name);
        });
    }
    GetState() {
        return DTFrameProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DTFrameProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetState.name, DTFrameProxy_DTFrameProxy.name);
                let stateOfDTFrame = new DefaultStateOfDTFrame_DefaultStateOfDTFrame();
                this.FrameJacket.GetState()
                    .then((stateOfFrameStyling) => stateOfDTFrame.StateOfFrameStyling = stateOfFrameStyling)
                    .catch((err) => reject(this.GetState.name + ' | ' + err));
                stateOfDTFrame.ZIndex = this.GetZindexAsInt();
                if (this.HostedStateFullProxy) {
                    yield this.HostedStateFullProxy.GetState()
                        .then((statefullProxyState) => stateOfDTFrame.StateOfHosted = statefullProxyState)
                        .catch((err) => reject(this.GetState.name + ' | ' + err));
                }
                resolve(stateOfDTFrame);
                this.Logger.FuncEnd(this.GetState.name, DTFrameProxy_DTFrameProxy.name);
            }));
        });
    }
    SetState(stateOfDTFrame) {
        return DTFrameProxy_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart(this.SetState.name, DTFrameProxy_DTFrameProxy.name);
                this.DTFrameProxyMutationEvent_Subject.DisableNotifications();
                yield this.HostedStateFullProxy.SetState(stateOfDTFrame.StateOfHosted)
                    .then(() => {
                    this.SetFrameStyling(stateOfDTFrame);
                    this.DTFrameProxyMutationEvent_Subject.EnableNotifications();
                });
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.SetState.name, err);
            }
            this.Logger.FuncEnd(this.SetState.name, DTFrameProxy_DTFrameProxy.name);
        });
    }
    TriggerEventsForInbound() {
        if (this.HostedStateFullProxy) {
            this.HostedStateFullProxy.TriggerInboundEventsAsync();
        }
    }
    TriggerInboundEventsAsync() {
    }
    GetDocumentJacket() {
        return this.FrameJacket.DocumentJacket;
    }
    GetNativeFrameId() {
        return this.FrameJacket.GetNativeIframeId();
    }
    GetScWindowType() {
        let scPageTypeResolver = new ScPageTypeResolver_ScPageTypeResolver(this.HindeCore, this.FrameJacket.DocumentJacket.UrlJacket);
        return scPageTypeResolver.GetScWindowType();
    }
    SetFrameStyling(stateOfDTFrame) {
        this.Logger.FuncStart(this.SetFrameStyling.name);
        this.FrameJacket.SetState(stateOfDTFrame.StateOfFrameStyling);
        this.Logger.FuncEnd(this.SetFrameStyling.name);
    }
    OnContentEditorProxyMutation(payload) {
        let dtFrameProxyMutationEvent_Payload = {
            ContentEditorProxyMutationPayload: payload,
            FrameId: this.FrameJacket.GetNativeIframeId()
        };
        this.DTFrameProxyMutationEvent_Subject.NotifyObserversAsync(dtFrameProxyMutationEvent_Payload);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/FrameProxies/CEFrameProxy.js


class CEFrameProxy_CEFrameProxy extends _BaseScFrameProxy_BaseScFrameProxy {
    constructor() {
        super(...arguments);
        this.StateFullProxyDisciminator = StateFullProxyDisciminator.CEFrame;
        this.FrameTypeDiscriminator = CEFrameProxy_CEFrameProxy.name;
    }
    SetState(stateOfCEFrameProxy) {
        return null;
    }
    GetState() {
        return null;
    }
    InstantiateAsyncMembers() {
    }
    WireEvents() {
    }
    TriggerInboundEventsAsync() {
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/FactoryHelper.js
var FactoryHelper_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class FactoryHelper_FactoryHelper extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
    }
    CEFrameFactory(frameJacket, nickname) {
        this.Logger.FuncStart(this.BaseFramePromiseFactory.name);
        this.ErrorHand.ThrowIfNullOrUndefined(this.CEFrameFactory.name, [frameJacket]);
        let toReturn = new CEFrameProxy_CEFrameProxy(this.HindeCore, frameJacket);
        toReturn.InstantiateAsyncMembers();
        toReturn.WireEvents();
        this.Logger.FuncEnd(this.BaseFramePromiseFactory.name);
        return toReturn;
    }
    BaseFramePromiseFactory(nativeIframeProxy, nickname) {
        this.Logger.FuncStart(this.BaseFramePromiseFactory.name);
        var toReturn = null;
        if (nativeIframeProxy && nickname) {
            var toReturn = new DTFrameProxy_DTFrameProxy(this.HindeCore, nativeIframeProxy);
            toReturn.InstantiateAsyncMembers();
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.BaseFramePromiseFactory.name, 'one of these is null');
            this.Logger.LogAsJsonPretty('iframeElem', nativeIframeProxy);
            this.Logger.LogAsJsonPretty('nickname', nickname);
        }
        this.Logger.FuncEnd(this.BaseFramePromiseFactory.name);
        return toReturn;
    }
    DTFrameProxyFactory(nativeIframeProxy) {
        return FactoryHelper_awaiter(this, void 0, void 0, function* () {
            var toReturn = null;
            if (nativeIframeProxy) {
                var toReturn = new DTFrameProxy_DTFrameProxy(this.HindeCore, nativeIframeProxy);
                yield toReturn.InstantiateAsyncMembers();
            }
            else {
                this.ErrorHand.ErrorAndThrow(this.DTFrameProxyFactory.name, 'one of these is null');
                this.Logger.LogAsJsonPretty('iframeElem', nativeIframeProxy);
            }
            return toReturn;
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/UrlJacket.js



class UrlJacket_UrlJacket extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, url) {
        super(hindeCore);
        this.OriginalURL = url;
        this.ErrorHand.ThrowIfNullOrUndefined(UrlJacket_UrlJacket.name, url);
        this.Init_GenericUrlAgent();
    }
    Init_GenericUrlAgent() {
        try {
            this.Logger.FuncStart(this.Init_GenericUrlAgent.name, UrlJacket_UrlJacket.name);
            this.SetFromHref(this.OriginalURL);
        }
        catch (err) {
            throw (this.Init_GenericUrlAgent.name + ' | ' + err);
        }
        this.Logger.FuncEnd(this.Init_GenericUrlAgent.name, UrlJacket_UrlJacket.name);
    }
    GetUrlParts() {
        return this.UrlParts;
    }
    GetOriginalURL() {
        return this.OriginalURL;
    }
    QueryStringHasKey(key) {
        this.Logger.FuncStart(this.QueryStringHasKey.name, QueryStrKey[key]);
        let toReturn = false;
        if (key !== null) {
            let keyAsStr = QueryStrKey[key];
            if (keyAsStr) {
                toReturn = this.UrlParts && this.UrlParts.UrlSearchParameters && this.UrlParts.UrlSearchParameters.has(keyAsStr);
            }
        }
        this.Logger.FuncEnd(this.QueryStringHasKey.name, QueryStrKey[key] + ' ' + toReturn.toString());
        return toReturn;
    }
    GetQueryStringValueByKey(key) {
        this.Logger.FuncStart(this.GetQueryStringValueByKey.name, QueryStrKey[key]);
        let toReturn = '';
        if (this.QueryStringHasKey(key)) {
            let keyAsStr = QueryStrKey[key];
            toReturn = this.UrlParts.UrlSearchParameters.get(keyAsStr);
        }
        this.Logger.FuncEnd(this.GetQueryStringValueByKey.name, QueryStrKey[key] + ' ' + toReturn.toString());
        return toReturn;
    }
    SetParameterValueByKey(key, newValue) {
        if (this.UrlParts) {
            this.UrlParts.UrlSearchParameters.set(QueryStrKey[key], newValue);
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.SetParameterValueByKey.name, 'No URLParts ' + QueryStrKey[key] + ' ' + newValue);
        }
    }
    SetFilePath(newFilePath) {
        this.UrlParts.FilePath = newFilePath;
    }
    SetFromHref(href) {
        var parser = document.createElement('a');
        parser.href = href;
        this.UrlParts = {
            OriginalRaw: href,
            Protocol: parser.protocol,
            HostAndPort: parser.host,
            UrlSearchParameters: new URLSearchParams(parser.search),
            FilePath: parser.pathname,
            Anchor: parser.hash,
            HasError: false,
        };
        this.Logger.LogAsJsonPretty('params', this.UrlParts.UrlSearchParameters.toString());
    }
    BuildFullUrlFromParts() {
        let toReturn = {
            AbsUrl: '',
        };
        if (this.UrlParts) {
            if (this.UrlParts && !this.UrlParts.HasError) {
                toReturn.AbsUrl = this.UrlParts.Protocol + '//' + this.UrlParts.HostAndPort;
                if (this.UrlParts.FilePath.length > 0) {
                    toReturn.AbsUrl += this.UrlParts.FilePath;
                }
                if (this.UrlParts.UrlSearchParameters) {
                    toReturn.AbsUrl += '?' + this.UrlParts.UrlSearchParameters.toString();
                }
                if (this.UrlParts.Anchor.length > 0) {
                    toReturn.AbsUrl += '#' + this.UrlParts.Anchor;
                }
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.BuildFullUrlFromParts.name, 'Null UrlParts');
        }
        return toReturn;
    }
    ExtractParameters(url) {
        let toReturn = [];
        if (url) {
            let splitStr = url.split('?');
            if (splitStr.length > 1) {
                let paramString = splitStr[1].replace(SharedConst.Const.Regex.QueryStrSeparatorQuest, '');
                let pairStr = paramString.split('&');
                if (pairStr && pairStr.length > 0) {
                    for (var idx = 0; idx < pairStr.length; idx++) {
                        let oneParamAr = pairStr[idx].split('=');
                        let paramPair = {
                            Key: '',
                            value: ''
                        };
                        if (oneParamAr) {
                            paramPair.Key = oneParamAr[0];
                            if (oneParamAr.length > 1) {
                                paramPair.value = oneParamAr[1];
                            }
                            toReturn.push(paramPair);
                        }
                    }
                }
            }
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/DocumentJacket.js
var DocumentJacket_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};











class DocumentJacket_DocumentJacket extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, nativeDocument) {
        super(hindeCore);
        this.DocId = Guid_Guid.NewRandomGuid();
        this.NativeDocument = nativeDocument;
        this.UrlJacket = new UrlJacket_UrlJacket(this.HindeCore, nativeDocument.URL);
    }
    GetElementById(idStr) {
        let elementJacket = null;
        let htmlElement = this.NativeDocument.getElementById(idStr);
        if (htmlElement) {
            elementJacket = new ElementJacket_ElementJacket(this.HindeCore, htmlElement);
        }
        return elementJacket;
    }
    QuerySelector(selector) {
        let elementJacket = null;
        let htmlElement = this.NativeDocument.querySelector(selector);
        if (htmlElement) {
            elementJacket = new ElementJacket_ElementJacket(this.HindeCore, htmlElement);
        }
        return elementJacket;
    }
    GetContentDoc() {
        return this.NativeDocument;
    }
    GetParentJacket() {
        this.Logger.FuncStart(this.GetParentJacket.name);
        let toReturn = null;
        let thisParent = parent.document;
        if (thisParent) {
            toReturn = new DocumentJacket_DocumentJacket(this.HindeCore, thisParent);
        }
        this.Logger.FuncEnd(this.GetParentJacket.name);
        return toReturn;
    }
    WaitForFirstHostedFrame(querySelector) {
        return DocumentJacket_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DocumentJacket_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForFirstHostedFrame.name, querySelector);
                let firstFrameJacket = null;
                yield this.WaitForAndReturnFoundElemJacket(querySelector)
                    .then((elemJacket) => resolve(new FrameJacket_FrameJacket(this.HindeCore, elemJacket.NativeElement)))
                    .catch((err) => reject(this.ErrorHand.FormatejectMessage([this.WaitForFirstHostedFrame.name], err)));
                this.Logger.FuncEnd(this.WaitForFirstHostedFrame.name, querySelector);
            }));
        });
    }
    GetHostedFramesFilteredBySelector(querySelector) {
        this.Logger.FuncStart(this.GetHostedFramesFilteredBySelector.name, querySelector);
        let frameJackets = [];
        this.ErrorHand.ThrowIfNullOrUndefined(this.GetHostedFramesFilteredBySelector.name, [this.NativeDocument]);
        var queryResultIframes = this.NativeDocument.querySelectorAll('iframe');
        this.Logger.LogVal('found iframes', queryResultIframes.length);
        let filteredList = this.NativeDocument.querySelectorAll('iframe' + querySelector);
        this.Logger.LogVal('found filtered iframes', filteredList.length);
        if (filteredList && filteredList.length > 0) {
            filteredList.forEach((iframeNode) => {
                let candidate = new FrameJacket_FrameJacket(this.HindeCore, iframeNode);
                if (candidate) {
                    frameJackets.push(candidate);
                }
                else {
                    this.Logger.Log('one of the iframes did not work');
                }
            });
        }
        this.Logger.FuncEnd(this.GetHostedFramesFilteredBySelector.name, querySelector);
        return frameJackets;
    }
    GetHostedFrameJackets() {
        let frameJackets = [];
        this.ErrorHand.ThrowIfNullOrUndefined(this.GetHostedFrameJackets.name, [this.NativeDocument]);
        var queryResults = this.NativeDocument.querySelectorAll(ContentConst.Const.Selector.SC.IframeContent.sc920);
        if (!queryResults) {
            queryResults = this.NativeDocument.querySelectorAll(ContentConst.Const.Selector.SC.IframeContent.sc820);
        }
        if (queryResults) {
            for (var ifrIdx = 0; ifrIdx < queryResults.length; ifrIdx++) {
                var frameJacket = new FrameJacket_FrameJacket(this.HindeCore, queryResults[ifrIdx]);
                if (frameJacket) {
                    frameJackets.push(frameJacket);
                }
            }
        }
        this.Logger.LogVal('found iframes count', frameJackets.length);
        return frameJackets;
    }
    Validate() {
        let url = this.UrlJacket.BuildFullUrlFromParts();
        if (!url) {
            this.ErrorHand.ErrorAndThrow(this.Validate.name, 'No URL');
        }
        else if (url.AbsUrl === SharedConst.Const.UrlSuffix.AboutBlank) {
            this.ErrorHand.ErrorAndThrow(this.Validate.name, SharedConst.Const.UrlSuffix.AboutBlank + ' not allowed');
        }
    }
    WaitForIframeElemAndReturnCEFrameProxyWhenReady(selector, iframeNickName) {
        return DocumentJacket_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DocumentJacket_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForIframeElemAndReturnCEFrameProxyWhenReady.name);
                let factoryHelp = new FactoryHelper_FactoryHelper(this.HindeCore);
                let frameJacket = null;
                yield this.WaitForAndReturnFoundElemJacket(selector)
                    .then((foundElem) => DocumentJacket_awaiter(this, void 0, void 0, function* () { return frameJacket = new FrameJacket_FrameJacket(this.HindeCore, foundElem.NativeElement); }))
                    .then(() => factoryHelp.CEFrameFactory(frameJacket, iframeNickName))
                    .then((result) => resolve(result))
                    .catch((err) => reject(err));
                this.Logger.FuncEnd(this.WaitForIframeElemAndReturnCEFrameProxyWhenReady.name);
            }));
        });
    }
    WaitForAndReturnFoundElemJacket(selector, promiseFailAction = PromiseFailAction.Default) {
        return DocumentJacket_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DocumentJacket_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForAndReturnFoundElemJacket.name, selector);
                var toReturnFoundElem = null;
                var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForAndReturnFoundElemJacket.name + ' - selector: "' + selector + '"', true);
                while (!toReturnFoundElem && iterationJr.DecrementAndKeepGoing()) {
                    toReturnFoundElem = this.NativeDocument.querySelector(selector);
                    if (toReturnFoundElem) {
                        this.Logger.Log('found it');
                        resolve(new ElementJacket_ElementJacket(this.HindeCore, toReturnFoundElem));
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (promiseFailAction === PromiseFailAction.Default || promiseFailAction == PromiseFailAction.RejectThrow) {
                    reject(iterationJr.IsExhaustedMsg);
                }
                else if (promiseFailAction === PromiseFailAction.ResolveNull) {
                    resolve(null);
                }
                this.Logger.FuncEnd(this.WaitForAndReturnFoundElemJacket.name, selector);
            }));
        });
    }
    WaitForThenClick(selectorAr) {
        return new Promise((resolve, reject) => DocumentJacket_awaiter(this, void 0, void 0, function* () {
            this.ErrorHand.ThrowIfNullOrUndefined(this.WaitForThenClick.name, [selectorAr, this.NativeDocument]);
            var foundHtmlElement = null;
            var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForThenClick.name + ' | ' + JSON.stringify(selectorAr), true);
            let foundSelector = '';
            while (!foundHtmlElement && iterationJr.DecrementAndKeepGoing()) {
                for (var idx = 0; idx < selectorAr.length; idx++) {
                    foundSelector = selectorAr[idx];
                    foundHtmlElement = this.NativeDocument.querySelector(foundSelector);
                    if (foundHtmlElement) {
                        break;
                    }
                }
                yield iterationJr.Wait();
            }
            if (foundHtmlElement) {
                try {
                    this.Logger.LogAsJsonPretty(this.WaitForThenClick.name + ' clicking', foundSelector);
                    foundHtmlElement.click();
                    resolve();
                }
                catch (err) {
                    reject(this.WaitForThenClick.name + ' | ' + err);
                }
            }
            else {
                if (!foundHtmlElement && iterationJr.IsExhausted) {
                    reject(iterationJr.IsExhaustedMsg);
                }
                else {
                    reject('unknown reason');
                }
            }
        }));
    }
    RaceWaitAndClick(selector) {
        return DocumentJacket_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DocumentJacket_awaiter(this, void 0, void 0, function* () {
                yield this.WaitForThenClick([selector.sc920, selector.sc820])
                    .then(() => resolve())
                    .catch((err) => reject(this.RaceWaitAndClick.name + ' | ' + err));
            }));
        });
    }
    WaitForAndClickWithPayload(selector, payload) {
        return new Promise((resolve, reject) => DocumentJacket_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForAndClickWithPayload.name, selector);
            yield this.WaitForThenClick([selector])
                .then(() => resolve(payload))
                .catch(ex => {
                this.ErrorHand.ErrorAndThrow(this.WaitForAndClickWithPayload.name, ex);
                reject(ex);
            });
        }));
    }
    WaitForCompleteNAB_DocumentJacket(friendly) {
        return DocumentJacket_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DocumentJacket_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForCompleteNAB_DocumentJacket.name, friendly);
                this.Logger.LogVal('url', this.NativeDocument.URL);
                this.Logger.LogVal('readyState', this.NativeDocument.readyState);
                this.ErrorHand.ThrowIfNullOrUndefined(this.WaitForCompleteNAB_DocumentJacket.name, this.NativeDocument);
                var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForCompleteNAB_DocumentJacket.name, false);
                let readyStateNAB = new ReadyState_ReadyStateNAB(this.HindeCore, this.NativeDocument);
                while (iterationJr.DecrementAndKeepGoing() && !readyStateNAB.IsCompleteNAB()) {
                    readyStateNAB.LogDebugValues();
                    yield iterationJr.Wait();
                }
                if (iterationJr.IsExhausted) {
                    this.Logger.Log(iterationJr.IsExhaustedMsg);
                    reject(iterationJr.IsExhaustedMsg);
                }
                else {
                    resolve(readyStateNAB);
                }
                this.Logger.FuncEnd(this.WaitForCompleteNAB_DocumentJacket.name, friendly);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultFriendly.js


class DefaultFriendly_DefaultFriendly {
    constructor() {
        this.Flavor = SnapShotFlavor[SnapShotFlavor.Live];
        this.NickName = '';
        this.TimeStamp = '';
        this.WindowType = ScWindowType[ScWindowType.Unknown];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultMetaData.js



class DefaultMetaData_DefaultMetaData {
    constructor() {
        this.Flavor = SnapShotFlavor.Live;
        this.SessionId = '';
        this.SnapshotId = Guid_Guid.NewRandomGuid();
        this.StorageKey = '';
        this.TimeStamp = null;
        this.WindowType = ScWindowType.Unknown;
        this.Hash = -1;
        this.StorageId = Guid_Guid.NewRandomGuid();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfStateFullProxy.js

class DefaultStateOfStateFullProxy_DefaultStateOfStateFullProxy {
    constructor() {
        this.StatefullDisciminatorFriendly = StateFullProxyDisciminator[StateFullProxyDisciminator.Unknown];
        this.StatefullDisciminator = StateFullProxyDisciminator.Unknown;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfScWindowProxy.js

class DefaultStateOfScWindowProxy_DefaultStateOfScWindow {
    constructor() {
        this.StateOf_ = new DefaultStateOfStateFullProxy_DefaultStateOfStateFullProxy();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfScUiProxy.js




class DefaultStateOfScUiProxy_DefaultStateOfScUiProxy {
    constructor() {
        this.Friendly = new DefaultFriendly_DefaultFriendly();
        this.Meta = new DefaultMetaData_DefaultMetaData();
        this.ErrorStackScUiProxy = [];
        this.StateOfScWindow = new DefaultStateOfScWindowProxy_DefaultStateOfScWindow();
        this.StorageSchema = '2020.10.04.21:05';
        this.Meta.TimeStamp = new Date();
        this.Friendly.TimeStamp = StaticHelpers_StaticHelpers.MakeFriendlyDate(this.Meta.TimeStamp);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfDTArea.js
class DefaultStateOfDTArea {
    constructor() {
        this.StateOfDTFrames = [];
        this.ActiveDTFrameIndex = -1;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfDesktop.js


class DefaultStateOfDesktop_DefaultStateOfDesktop {
    constructor() {
        this.StatefullDisciminatorFriendly = StateFullProxyDisciminator[StateFullProxyDisciminator.Desktop];
        this.StatefullDisciminator = StateFullProxyDisciminator.Desktop;
        this.StateOfDTArea = new DefaultStateOfDTArea();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DTPopUp1Proxy.js
var DTPopUp1Proxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class DTPopUp1Proxy_DTPopUp1Proxy extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
    }
    RecipeAddNewPackageDesignerToDesktop(documentJacket) {
        return new Promise((resolve, reject) => DTPopUp1Proxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.RecipeAddNewPackageDesignerToDesktop.name);
            this.ErrorHand.ThrowIfNullOrUndefined(this.RecipeAddNewPackageDesignerToDesktop.name, documentJacket);
            let popUpElementJacket;
            yield this.RecipeBasics.WaitForTimePeriod(1, this.RecipeAddNewPackageDesignerToDesktop.name)
                .then(() => documentJacket.WaitForThenClick([ContentConst.Const.Selector.SC.PopUp1.DevelopmentTools]))
                .then(() => this.RecipeBasics.WaitForTimePeriod(1, 'waiting for sitecore to catch up'))
                .then(() => documentJacket.WaitForAndReturnFoundElemJacket('.scPopup'))
                .then((elementJacket) => popUpElementJacket = elementJacket)
                .then(() => this.RecipeBasics.WaitForTimePeriod(1, this.RecipeAddNewPackageDesignerToDesktop.name))
                .then(() => popUpElementJacket.WaitAndReturnFoundElemJacketFromElemJacket(ContentConst.Const.Selector.SC.PopUp1.PackageDesignerButton, DTPopUp1Proxy_DTPopUp1Proxy.name))
                .then((elementJacket) => elementJacket.Click())
                .then(() => resolve())
                .catch((err) => reject(this.RecipeAddNewPackageDesignerToDesktop.name + ' ' + err));
            this.Logger.FuncEnd(this.RecipeAddNewPackageDesignerToDesktop.name);
        }));
    }
    RecipeAddNewMediaLibraryToDesktop(documentJacket) {
        return new Promise((resolve, reject) => DTPopUp1Proxy_awaiter(this, void 0, void 0, function* () {
            this.ErrorHand.ThrowIfNullOrUndefined(this.RecipeAddNewMediaLibraryToDesktop.name, documentJacket);
            yield documentJacket.WaitForThenClick([ContentConst.Const.Selector.SC.MediaLibrary])
                .then(() => resolve())
                .catch((err) => reject(this.RecipeAddNewMediaLibraryToDesktop.name + ' ' + err));
        }));
    }
    RecipeAddNewTemplateManagerToDesktop(documentJacket) {
        return new Promise((resolve, reject) => DTPopUp1Proxy_awaiter(this, void 0, void 0, function* () {
            this.ErrorHand.ThrowIfNullOrUndefined(this.RecipeAddNewTemplateManagerToDesktop.name, documentJacket);
            yield documentJacket.WaitForThenClick([ContentConst.Const.Selector.SC.TemplateManager])
                .then(() => resolve())
                .catch((err) => reject(this.RecipeAddNewTemplateManagerToDesktop.name + ' ' + err));
        }));
    }
    RecipeAddNewContentEditorToDesktop(documentJacket) {
        return new Promise((resolve, reject) => DTPopUp1Proxy_awaiter(this, void 0, void 0, function* () {
            this.ErrorHand.ThrowIfNullOrUndefined(this.RecipeAddNewContentEditorToDesktop.name, documentJacket);
            yield documentJacket.WaitForThenClick([ContentConst.Const.Selector.SC.StartMenuLeftOption])
                .then(() => resolve())
                .catch((err) => reject(this.RecipeAddNewContentEditorToDesktop.name + ' ' + err));
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DesktopStartBarProxy/DesktopStartBarButtonProxy.js
var DesktopStartBarButtonProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






class DesktopStartBarButtonProxy_DesktopStartBarButtonProxy extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, iframeElemId, documentJacket) {
        super(hindeCore);
        this.DocumentJacket = documentJacket;
        this.FrameId = iframeElemId;
    }
    Instantiate_DestopStartBarButtonProxy() {
        return DesktopStartBarButtonProxy_awaiter(this, void 0, void 0, function* () {
            try {
                this.StartBarButtonElemId = ContentConst.Const.Names.Desktop.StartBarApplicationPrefix + this.FrameId;
                let querySelectBtn = '[id=' + this.StartBarButtonElemId + ']';
                this.FoundStartBarButton = this.DocumentJacket.QuerySelector(querySelectBtn);
                yield this.FoundStartBarButton.WaitAndReturnFoundElemJacketFromElemJacket(':scope > div > span', this.Instantiate_DestopStartBarButtonProxy.name)
                    .then((containerSpanElement) => this.ContainerSpanElement = containerSpanElement);
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.Instantiate_DestopStartBarButtonProxy.name, err);
            }
        });
    }
    AncestorNodeSpan(lineage) {
        let htmlSpanElement = document.createElement('span');
        let l1text = StaticHelpers_StaticHelpers.BufferString(lineage.L1Text, 5, BufferChar.space, BufferDirection.right);
        let l2text = StaticHelpers_StaticHelpers.BufferString(lineage.L2Text, 5, BufferChar.space, BufferDirection.right);
        htmlSpanElement.innerText = l1text + '_/' + l2text + '_';
        htmlSpanElement.style.left = '19px';
        htmlSpanElement.style.position = 'absolute';
        htmlSpanElement.style.top = '0px';
        htmlSpanElement.style.opacity = '0.3';
        htmlSpanElement.style.fontSize = '11px';
        return htmlSpanElement;
    }
    LxNodeSpan(nodeText) {
        let htmlSpanElement = document.createElement('span');
        htmlSpanElement.innerText = StaticHelpers_StaticHelpers.BufferString(nodeText, ContentConst.Const.Numbers.Desktop.MaxToolBarNameChars, BufferChar.space, BufferDirection.right);
        htmlSpanElement.style.left = '15px';
        htmlSpanElement.style.position = 'absolute';
        htmlSpanElement.style.top = '0px';
        return htmlSpanElement;
    }
    LxNodeImg(iconSource) {
        let newMainIconNode = document.createElement('img');
        newMainIconNode.border = '0';
        newMainIconNode.classList.add("scContentTreeNodeIcon");
        newMainIconNode.height = 16;
        newMainIconNode.src = iconSource;
        newMainIconNode.style.left = '0px';
        newMainIconNode.style.position = 'absolute';
        newMainIconNode.style.top = '-8px';
        newMainIconNode.width = 16;
        return newMainIconNode;
    }
    AncestorNodeIcon(itemIconSource) {
        let newItemIconNode = document.createElement('img');
        newItemIconNode.border = '0px';
        newItemIconNode.classList.add("scContentTreeNodeIcon");
        newItemIconNode.height = 16;
        newItemIconNode.src = itemIconSource;
        newItemIconNode.style.position = "absolute";
        newItemIconNode.style.opacity = "0.9";
        newItemIconNode.width = 16;
        return newItemIconNode;
    }
    ProcessColor(icon) {
        let borderColor = '';
        if (icon.indexOf('photo_scenery.png') > 0) {
            borderColor = SharedConst.Const.Colors.colorMediaLibrary;
        }
        else if (icon.indexOf('cubes_blue.png') > 0) {
            borderColor = SharedConst.Const.Colors.colorContent;
        }
        else if (icon.indexOf('windows.png') > 0) {
            borderColor = SharedConst.Const.Colors.colorLayout;
        }
        else if (icon.indexOf('workstation1.png') > 0) {
            borderColor = SharedConst.Const.Colors.colorSystem;
        }
        else if (icon.indexOf('form_blue.png') > 0) {
            borderColor = SharedConst.Const.Colors.colorTemplates;
        }
        return borderColor;
    }
    DrawBorderColor(stateOfContentTree) {
        let borderColor = '';
        borderColor = this.ProcessColor(stateOfContentTree.ActiveNodeShallow.Lineage.L1MainIconSrc);
        if (borderColor.length > 0) {
            this.FoundStartBarButton.NativeElement.style.borderBottomColor = borderColor;
        }
    }
    BuildLxSpan(stateOfContentTree) {
        let nodeImage = this.LxNodeImg(stateOfContentTree.ActiveNodeShallow.IconSrc);
        let nodeSpan = this.LxNodeSpan(stateOfContentTree.ActiveNodeShallow.Friendly);
        let toReturn = document.createElement('span');
        toReturn.style.position = 'relative';
        toReturn.style.left = '-8px';
        toReturn.style.top = '8px';
        toReturn.style.marginRight = '-4px';
        toReturn.classList.add("scContentTreeNodeIcon");
        toReturn.appendChild(nodeImage);
        toReturn.appendChild(nodeSpan);
        return toReturn;
    }
    BuildAncestorSpan(stateOfContentTree) {
        let nodeImage = this.AncestorNodeIcon(stateOfContentTree.ActiveNodeShallow.Lineage.L1MainIconSrc);
        let nodeSpan = this.AncestorNodeSpan(stateOfContentTree.ActiveNodeShallow.Lineage);
        let toReturn = document.createElement('span');
        toReturn.style.position = 'absolute';
        toReturn.style.top = '-17px';
        toReturn.style.left = '-17px';
        toReturn.appendChild(nodeImage);
        toReturn.appendChild(nodeSpan);
        return toReturn;
    }
    DrawTextAndIcons(stateOfContentTree) {
        let ancestorSpan = this.BuildAncestorSpan(stateOfContentTree);
        let lxSpan = this.BuildLxSpan(stateOfContentTree);
        let bothWrapper = document.createElement('span');
        bothWrapper.style.position = "relative";
        bothWrapper.appendChild(ancestorSpan);
        bothWrapper.appendChild(lxSpan);
        if (this.ContainerSpanElement) {
            this.ContainerSpanElement.NativeElement.innerHTML = bothWrapper.outerHTML;
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.SetStateOfDesktopStartBarButtonAsync.name, 'no container span element');
        }
    }
    SetStateOfDesktopStartBarButtonAsync(stateOfContentTree) {
        this.Logger.FuncStart(this.SetStateOfDesktopStartBarButtonAsync.name);
        this.TaskMonitor.AsyncTaskStarted(this.SetStateOfDesktopStartBarButtonAsync.name);
        this.ErrorHand.ThrowIfNullOrUndefined(this.SetStateOfDesktopStartBarButtonAsync.name, [stateOfContentTree]);
        this.Logger.LogAsJsonPretty('stateOfContentTree.ActiveNodeFlat', stateOfContentTree.ActiveNodeShallow);
        if (stateOfContentTree) {
            this.DrawTextAndIcons(stateOfContentTree);
            this.DrawBorderColor(stateOfContentTree);
        }
        else {
            this.ErrorHand.WarningAndContinue(this.SetStateOfDesktopStartBarButtonAsync.name, 'no tree data');
        }
        this.TaskMonitor.AsyncTaskCompleted(this.SetStateOfDesktopStartBarButtonAsync.name);
        this.Logger.FuncEnd(this.SetStateOfDesktopStartBarButtonAsync.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DesktopStartBarProxy/DesktopStartBarProxy.js
var DesktopStartBarProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class DesktopStartBarProxy_DTStartBarProxy extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, documentJacket) {
        super(hindeCore);
        this.StartBarButtonProxyBucket = [];
        this.Logger.CTORStart(DesktopStartBarProxy_DTStartBarProxy.name);
        this.DocumentJacket = documentJacket;
        this.Logger.CTOREnd(DesktopStartBarProxy_DTStartBarProxy.name);
    }
    Instantiate_DTStartBarProxy() {
        this.Logger.FuncStart(this.Instantiate_DTStartBarProxy.name, DesktopStartBarProxy_DTStartBarProxy.name);
        this.Logger.FuncEnd(this.Instantiate_DTStartBarProxy.name, DesktopStartBarProxy_DTStartBarProxy.name);
    }
    WireEvent() {
        this.Logger.FuncStart(this.WireEvent.name, DesktopStartBarProxy_DTStartBarProxy.name);
        this.Logger.FuncEnd(this.WireEvent.name, DesktopStartBarProxy_DTStartBarProxy.name);
    }
    GetStartBarButtonById(targetId) {
        return this.DocumentJacket.QuerySelector('[id=' + targetId + ']');
    }
    GetStartBarElement() {
        if (!this.__startBarElem) {
            this.__startBarElem = this.DocumentJacket.QuerySelector(ContentConst.Const.Selector.SC.Desktop.DtStartBar);
        }
        return this.__startBarElem;
    }
    TriggerRedButton() {
        return DesktopStartBarProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.TriggerRedButton.name);
            try {
                yield this.DocumentJacket.RaceWaitAndClick(ContentConst.Const.Selector.SC.scStartButton)
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.TriggerRedButton.name, err));
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.TriggerRedButton.name, err);
            }
            this.Logger.FuncEnd(this.TriggerRedButton.name);
        });
    }
    GetAssociatedStartBarButton(dTFrameProxyMutationEventPayload) {
        return DesktopStartBarProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DesktopStartBarProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetAssociatedStartBarButton.name);
                this.ErrorHand.ThrowIfNullOrUndefined(this.GetAssociatedStartBarButton.name, [dTFrameProxyMutationEventPayload]);
                let foundStartBarButtonProxy = null;
                this.StartBarButtonProxyBucket.forEach((startBarButtonProxy) => {
                    if (startBarButtonProxy.FrameId === dTFrameProxyMutationEventPayload.FrameId) {
                        foundStartBarButtonProxy = startBarButtonProxy;
                    }
                });
                if (!foundStartBarButtonProxy) {
                    foundStartBarButtonProxy = new DesktopStartBarButtonProxy_DesktopStartBarButtonProxy(this.HindeCore, dTFrameProxyMutationEventPayload.FrameId, this.DocumentJacket);
                    yield foundStartBarButtonProxy.Instantiate_DestopStartBarButtonProxy()
                        .catch((err) => reject(this.GetAssociatedStartBarButton.name + ' | ' + err));
                    this.StartBarButtonProxyBucket.push(foundStartBarButtonProxy);
                }
                resolve(foundStartBarButtonProxy);
                this.Logger.FuncEnd(this.GetAssociatedStartBarButton.name);
            }));
        });
    }
    OnTreeMutationEvent_DesktopStartBarProxy(dTAreaProxyMutationEvent_Payload) {
        this.Logger.FuncStart(this.OnTreeMutationEvent_DesktopStartBarProxy.name);
        this.TaskMonitor.AsyncTaskStarted(this.OnTreeMutationEvent_DesktopStartBarProxy.name);
        if (dTAreaProxyMutationEvent_Payload) {
            if (dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload
                &&
                    dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload.ContentEditorProxyMutationPayload
                &&
                    dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload.ContentEditorProxyMutationPayload.TreeMutationEvent_Payload
                &&
                    dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload.ContentEditorProxyMutationPayload.TreeMutationEvent_Payload.StateOfContentTree
                &&
                    dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload.ContentEditorProxyMutationPayload.TreeMutationEvent_Payload.StateOfContentTree.ActiveNodeShallow) {
                let contentTreeProxyMutationEvent_Payload = dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload.ContentEditorProxyMutationPayload.TreeMutationEvent_Payload;
                if (contentTreeProxyMutationEvent_Payload.StateOfContentTree.ActiveNodeShallow) {
                    this.GetAssociatedStartBarButton(dTAreaProxyMutationEvent_Payload.DTFrameProxyMutationEvent_Payload)
                        .then((startBarButtonProxy) => startBarButtonProxy.SetStateOfDesktopStartBarButtonAsync(contentTreeProxyMutationEvent_Payload.StateOfContentTree))
                        .catch((err) => this.ErrorHand.ErrorAndThrow(this.OnTreeMutationEvent_DesktopStartBarProxy.name, err));
                }
                else {
                    this.Logger.Log('null activeNodeFlat provided');
                }
            }
            else {
                this.Logger.LogAsJsonPretty('dTAreaProxyMutationEvent_Payload', dTAreaProxyMutationEvent_Payload);
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.OnTreeMutationEvent_DesktopStartBarProxy.name, 'Null payload');
        }
        this.TaskMonitor.AsyncTaskCompleted(this.OnTreeMutationEvent_DesktopStartBarProxy.name);
        this.Logger.FuncEnd(this.OnTreeMutationEvent_DesktopStartBarProxy.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/Events/NativeIFrameAddedEvent/FrameJacketAddRemoveEvent_Observer.js

class FrameJacketAddRemoveEvent_Observer_FrameJacketAddRemoveEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, FrameJacketAddRemoveEvent_Observer_FrameJacketAddRemoveEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/DOMJacket/Events/NativeIFrameAddedEvent/FrameJacketAddRemoveEvent_Subject.js


class FrameJacketAddRemoveEvent_Subject_FrameJacketAddRemoveEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore, documentJacket) {
        super(hindeCore, FrameJacketAddRemoveEvent_Subject_FrameJacketAddRemoveEvent_Subject.name);
        this.ShowLogActions = true;
        this.HindeCore = hindeCore;
        this.Logger.CTORStart(FrameJacketAddRemoveEvent_Subject_FrameJacketAddRemoveEvent_Subject.name);
        if (!documentJacket) {
            this.ErrorHand.ErrorAndThrow(FrameJacketAddRemoveEvent_Subject_FrameJacketAddRemoveEvent_Subject.name, 'No target doc');
        }
        this.DocumentJacket = documentJacket;
        this.InitMutationObserver();
        this.Logger.CTOREnd(FrameJacketAddRemoveEvent_Subject_FrameJacketAddRemoveEvent_Subject.name);
    }
    HandleRemovedNodes(removedNodes) {
        let removedIframeIds = [];
        removedNodes.forEach((removedNode) => {
            removedIframeIds.push(removedNode.id);
        });
        return removedIframeIds;
    }
    HandleAddedNodes(addedNodes) {
        this.Logger.FuncStart(this.HandleAddedNodes.name);
        let addedNativeFrameProxies = [];
        addedNodes.forEach((addedNode) => {
            if (addedNode instanceof HTMLIFrameElement) {
                let nativeIframeProxy = new FrameJacket_FrameJacket(this.HindeCore, addedNode);
                addedNativeFrameProxies.push(nativeIframeProxy);
            }
        });
        this.Logger.FuncEnd(this.HandleAddedNodes.name, addedNativeFrameProxies.length);
        return addedNativeFrameProxies;
    }
    CallBackOnNativeMutation(mutations) {
        this.Logger.FuncStart(this.CallBackOnNativeMutation.name);
        if (this.HasObservers()) {
            mutations.forEach((mutation, index) => {
                this.Logger.Log('processing mutation ' + (index + 1) + ':' + mutations.length);
                this.Logger.LogVal('mutation.addedNodes.length ', mutation.addedNodes.length);
                if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                    let mutatedElement = (mutation.target);
                    let desktopMutatedEvent_Payload = {
                        AddedFrameJacket: null,
                        RemovedIFrameId: null,
                    };
                    let addedNodes = this.HandleAddedNodes(mutation.addedNodes);
                    let removedNodeIds = this.HandleRemovedNodes(mutation.removedNodes);
                    addedNodes.forEach((addedNode) => {
                        desktopMutatedEvent_Payload.AddedFrameJacket = addedNode;
                        desktopMutatedEvent_Payload.RemovedIFrameId = null;
                        this.NotifyObserversAsync(desktopMutatedEvent_Payload);
                    });
                    removedNodeIds.forEach((removedNodeId) => {
                        desktopMutatedEvent_Payload.AddedFrameJacket = null;
                        desktopMutatedEvent_Payload.RemovedIFrameId = removedNodeId;
                        this.NotifyObserversAsync(desktopMutatedEvent_Payload);
                    });
                }
            });
        }
        else {
            this.Logger.Log('No observers');
        }
        this.Logger.FuncEnd(this.CallBackOnNativeMutation.name);
    }
    InitMutationObserver() {
        this.Logger.FuncStart(this.InitMutationObserver.name);
        try {
            if (this.DocumentJacket) {
                let self = this;
                let mutationObserver = new MutationObserver((mutations) => { self.CallBackOnNativeMutation(mutations); });
                let desktopElemJacket = this.DocumentJacket.GetElementById('Desktop');
                if (desktopElemJacket) {
                    mutationObserver.observe(desktopElemJacket.NativeElement, { attributes: false, subtree: false, childList: true });
                }
            }
            else {
                this.ErrorHand.ErrorAndThrow(this.InitMutationObserver.name, 'no AssociatedDoc');
            }
        }
        catch (err) {
            throw (err);
        }
        this.Logger.FuncEnd(this.InitMutationObserver.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/DocumentProxyMutationEvent/DocumentProxyMutationEvent_Subject.js

class DocumentProxyMutationEvent_Subject_DocumentProxyMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor() {
        super(...arguments);
        this.ShowLogActions = true;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/Facades/DocumentWatcher.js
var DocumentWatcher_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






class DocumentWatcher_DocumentWatcher extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, documentJacket) {
        super(hindeCore);
        this.DocId = Guid_Guid.NewRandomGuid();
        this.ErrorHand.ThrowIfNullOrUndefined(DocumentWatcher_DocumentWatcher.name, [documentJacket]);
        this.DocumentJacket = documentJacket;
        this.ScPageTypeResolver = new ScPageTypeResolver_ScPageTypeResolver(this.HindeCore, this.DocumentJacket.UrlJacket);
        this.InstantiateInstance();
    }
    InstantiateInstance() {
        this.Logger.FuncStart(this.InstantiateInstance.name, DocumentWatcher_DocumentWatcher.name);
        this.FrameJacketAddRemoveEvent_Subject = new FrameJacketAddRemoveEvent_Subject_FrameJacketAddRemoveEvent_Subject(this.HindeCore, this.DocumentJacket);
        this.NativeIframeAddRemoveEvent_Observer = new FrameJacketAddRemoveEvent_Observer_FrameJacketAddRemoveEvent_Observer(this.HindeCore, this.CallBackOnNativeIFrameAddRemoveEventAsync.bind(this));
        this.DocumentProxyMutationEvent_Subject = new DocumentProxyMutationEvent_Subject_DocumentProxyMutationEvent_Subject(this.Logger, this.ErrorHand, DocumentWatcher_DocumentWatcher.name);
        this.WireInstanceEvents();
        this.Logger.FuncEnd(this.InstantiateInstance.name, DocumentWatcher_DocumentWatcher.name);
    }
    WireInstanceEvents() {
        this.Logger.FuncStart(this.WireInstanceEvents.name, DocumentWatcher_DocumentWatcher.name);
        this.FrameJacketAddRemoveEvent_Subject.RegisterObserver(this.NativeIframeAddRemoveEvent_Observer);
        this.Logger.FuncEnd(this.WireInstanceEvents.name, DocumentWatcher_DocumentWatcher.name);
    }
    SetState() {
        return DocumentWatcher_awaiter(this, void 0, void 0, function* () {
        });
    }
    GetState() {
        throw new Error("Method not implemented.");
    }
    TriggerInboundEventsAsync() {
    }
    CallBackOnNativeIFrameAddRemoveEventAsync(nativeIFrameAddRemoveEvent_Payload) {
        return DocumentWatcher_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.CallBackOnNativeIFrameAddRemoveEventAsync.name);
            try {
                let payload = {
                    AddedFrameJacket: nativeIFrameAddRemoveEvent_Payload.AddedFrameJacket,
                    RemovedIFrameId: nativeIFrameAddRemoveEvent_Payload.RemovedIFrameId
                };
                this.DocumentProxyMutationEvent_Subject.NotifyObserversAsync(payload);
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.CallBackOnNativeIFrameAddRemoveEventAsync.name, err);
            }
            this.Logger.FuncEnd(this.CallBackOnNativeIFrameAddRemoveEventAsync.name);
        });
    }
    GetElementById(elementId) {
        return this.DocumentJacket.GetElementById(elementId);
    }
    querySelector(selector) {
        return this.DocumentJacket.QuerySelector(selector);
    }
    RaceWaitAndClick(scVerSpec) {
        return DocumentWatcher_awaiter(this, void 0, void 0, function* () {
            return this.DocumentJacket.RaceWaitAndClick(scVerSpec);
        });
    }
    Validate() {
        if (!this.DocumentJacket) {
            this.ErrorHand.ErrorAndThrow(this.Validate.name, 'No content doc');
        }
        this.DocumentJacket.Validate();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/DocumentProxyMutationEvent/DocumentProxyMutationEvent_Observer.js

class DocumentProxyMutationEvent_Observer_DocumentProxyMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, DocumentProxyMutationEvent_Observer_DocumentProxyMutationEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/DTAreaProxyMutationEvent/DTAreaProxyMutationEvent_Subject.js

class DTAreaProxyMutationEvent_Subject_DTAreaProxyMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore) {
        super(hindeCore, DTAreaProxyMutationEvent_Subject_DTAreaProxyMutationEvent_Subject.name);
        this.ShowLogActions = true;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/DTFrameProxyMutationEvent/DTFrameProxyMutationEvent_Observer.js

class DTFrameProxyMutationEvent_Observer_DTFrameProxyMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, DTFrameProxyMutationEvent_Observer_DTFrameProxyMutationEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DTAreaProxy.js
var DTAreaProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};










class DTAreaProxy_DTAreaProxy extends _StateProxy_BaseStateFullProxy {
    constructor(hindeCore, documentJacket) {
        super(hindeCore);
        this.StateFullProxyDisciminator = StateFullProxyDisciminator.DTArea;
        this.FramesBucket = [];
        this.IncomingSetStateList = [];
        this.AssociatedScDocumentJacket = documentJacket;
        this.ErrorHand.ThrowIfNullOrUndefined(DTAreaProxy_DTAreaProxy.name, documentJacket);
    }
    InstantiateAsyncMembers() {
        this.Logger.FuncStart(this.InstantiateAsyncMembers.name, DTAreaProxy_DTAreaProxy.name);
        try {
            this.DTAreaProxyMutationEvent_Subject = new DTAreaProxyMutationEvent_Subject_DTAreaProxyMutationEvent_Subject(this.HindeCore);
            this.DTFrameProxyManyMutationEvent_Observer = new DTFrameProxyMutationEvent_Observer_DTFrameProxyMutationEvent_Observer(this.HindeCore, this.OnDTFProxyMutationEvent.bind(this));
            this.DocumentProxyMutationEvent_Observer = new DocumentProxyMutationEvent_Observer_DocumentProxyMutationEvent_Observer(this.HindeCore, this.CallBackOnDocumentProxyMutationEvent.bind(this));
            this.PageWatcher = new DocumentWatcher_DocumentWatcher(this.HindeCore, this.AssociatedScDocumentJacket);
        }
        catch (err) {
            this.ErrorHand.ErrorAndThrow(this.InstantiateAsyncMembers.name, err);
        }
        this.Logger.FuncEnd(this.InstantiateAsyncMembers.name, DTAreaProxy_DTAreaProxy.name);
    }
    WireEvents() {
        this.Logger.FuncStart(this.WireEvents.name, DTAreaProxy_DTAreaProxy.name);
        this.PageWatcher.DocumentProxyMutationEvent_Subject.RegisterObserver(this.DocumentProxyMutationEvent_Observer);
        this.Logger.FuncEnd(this.WireEvents.name, DTAreaProxy_DTAreaProxy.name);
    }
    GetState() {
        return new Promise((resolve, reject) => DTAreaProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetState.name, DTAreaProxy_DTAreaProxy.name + ' ' + this.FramesBucket.length.toString());
            let stateOfDTArea = new DefaultStateOfDTArea();
            let promiseAr = [];
            for (let idx = 0; idx < this.FramesBucket.length; idx++) {
                let dtframeProxy = this.FramesBucket[idx];
                promiseAr.push(dtframeProxy.GetState());
            }
            this.Logger.LogImportant('Count ' + promiseAr.length);
            yield Promise.all(promiseAr)
                .then((stateOfDTFrames) => {
                stateOfDTFrames.forEach((stateOfDTFrame, index) => {
                    stateOfDTArea.StateOfDTFrames.push(stateOfDTFrame);
                    if (stateOfDTFrame.ZIndex === 1) {
                        stateOfDTArea.ActiveDTFrameIndex = index;
                    }
                });
            })
                .then(() => this.Logger.LogAsJsonPretty('DTAreaState', stateOfDTArea))
                .then(() => resolve(stateOfDTArea))
                .catch((err) => reject(this.GetState.name + ' | ' + err));
            this.Logger.FuncEnd(this.GetState.name, DTAreaProxy_DTAreaProxy.name);
        }));
    }
    SetState(StateOfDTArea) {
        return DTAreaProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.Logger.FuncStart(this.SetState.name, DTAreaProxy_DTAreaProxy.name);
                let dtFramesNeeded = {
                    DiscriminatorAr: []
                };
                if (StateOfDTArea) {
                    if (!StaticHelpers_StaticHelpers.IsNullOrUndefined([this.AssociatedScDocumentJacket])) {
                        this.AddToIncomingSetStateList(StateOfDTArea);
                        StateOfDTArea.StateOfDTFrames.forEach((dtFrame) => dtFramesNeeded.DiscriminatorAr.push(dtFrame.StateOfHosted.StatefullDisciminator));
                    }
                    else {
                        reject(this.SetState.name + ' bad data');
                    }
                }
                else {
                    reject(this.SetState.name + '  No state provided');
                }
                resolve(dtFramesNeeded);
                this.Logger.FuncEnd(this.SetState.name, DTAreaProxy_DTAreaProxy.name);
            });
        });
    }
    TriggerInboundEventsAsync() {
    }
    CallBackOnDocumentProxyMutationEvent(payload) {
        return DTAreaProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.CallBackOnDocumentProxyMutationEvent.name);
            try {
                yield this.HandleAddedFrameJacket(payload.AddedFrameJacket)
                    .then(() => this.HandleRemovedIframe(payload.RemovedIFrameId))
                    .then(() => {
                });
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.CallBackOnDocumentProxyMutationEvent.name, err);
            }
            this.Logger.FuncEnd(this.CallBackOnDocumentProxyMutationEvent.name);
        });
    }
    HandleAddedFrameJacket(frameJacket) {
        return DTAreaProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.HandleAddedFrameJacket.name);
            if (frameJacket) {
                let dtFrameProxy = null;
                yield frameJacket.WaitForCompleteNABHtmlIframeElement(this.HandleAddedFrameJacket.name)
                    .then(() => this.Logger.LogVal('URL', frameJacket.DocumentJacket.UrlJacket.GetOriginalURL()))
                    .then(() => dtFrameProxy = new DTFrameProxy_DTFrameProxy(this.HindeCore, frameJacket))
                    .then(() => dtFrameProxy.InstantiateAsyncMembers())
                    .then(() => dtFrameProxy.WireEvents())
                    .then(() => {
                    let currentWindowType = dtFrameProxy.GetScWindowType();
                    if (currentWindowType !== ScWindowType.ContentEditor
                        && currentWindowType !== ScWindowType.MediaLibrary
                        && currentWindowType !== ScWindowType.PackageDesigner
                        && currentWindowType !== ScWindowType.TemplateManager) {
                        this.Logger.LogVal('scWindowType', ScWindowType[currentWindowType]);
                        this.ErrorHand.ErrorAndThrow(this.HandleAddedFrameJacket.name, 'unrecognized window type');
                    }
                })
                    .then(() => this.ProcessInboundNativeIFrameProxy(frameJacket))
                    .then(() => this.Logger.Log(this.HandleAddedFrameJacket.name + ' Complete'))
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.HandleAddedFrameJacket.name, err));
            }
            else {
                this.Logger.Log('No FrameJacket - no action');
            }
            this.Logger.FuncEnd(this.HandleAddedFrameJacket.name);
        });
    }
    HandleRemovedIframe(needleIframeId) {
        return DTAreaProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.HandleRemovedIframe.name);
            try {
                if (needleIframeId && needleIframeId.length > 0) {
                    let foundMatch = -1;
                    this.FramesBucket.forEach((dtFrameProxy, index) => {
                        if (dtFrameProxy.GetNativeFrameId() === needleIframeId) {
                            foundMatch = index;
                        }
                    });
                    if (foundMatch > -1) {
                        this.FramesBucket.splice(foundMatch, 1);
                    }
                }
                else {
                    this.Logger.Log("No needle id, no action");
                }
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.HandleRemovedIframe.name, err);
            }
            this.Logger.FuncEnd(this.HandleRemovedIframe.name);
        });
    }
    ProcessInboundNativeIFrameProxy(nativeIframeProxy) {
        return DTAreaProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.ProcessInboundNativeIFrameProxy.name, nativeIframeProxy.GetNativeIframeId());
            try {
                let dtFrameProxy = null;
                yield nativeIframeProxy.WaitForCompleteNABHtmlIframeElement(this.ProcessInboundNativeIFrameProxy.name)
                    .then(() => this.Logger.LogVal('url', nativeIframeProxy.GetUrlJacket().GetOriginalURL()))
                    .then(() => dtFrameProxy = new DTFrameProxy_DTFrameProxy(this.HindeCore, nativeIframeProxy))
                    .then(() => this.newFrameStep1_Instantiate(dtFrameProxy))
                    .then(() => this.NewFrameStep2_SetStateOfDTFrameIfQueued(dtFrameProxy))
                    .then(() => this.NewFrameStep3_WireEvents(dtFrameProxy))
                    .then(() => this.NewFrameStep4_NotifyObserversOfAreaProxyMutation(dtFrameProxy))
                    .then(() => this.NewFrameStep5_AddToDTFrameProxyBucket(dtFrameProxy))
                    .then(() => this.NewFrameStep6_TriggerEvents(dtFrameProxy))
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.ProcessInboundNativeIFrameProxy.name, err));
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.ProcessInboundNativeIFrameProxy.name, err);
            }
            this.Logger.FuncEnd(this.ProcessInboundNativeIFrameProxy.name, nativeIframeProxy.GetNativeIframeId());
        });
    }
    newFrameStep1_Instantiate(dtFrameProxy) {
        return DTAreaProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.newFrameStep1_Instantiate.name);
            try {
                yield dtFrameProxy.InstantiateAsyncMembers()
                    .then(() => { })
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.newFrameStep1_Instantiate.name, err));
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.newFrameStep1_Instantiate.name, err);
            }
            this.Logger.FuncEnd(this.newFrameStep1_Instantiate.name);
        });
    }
    NewFrameStep2_SetStateOfDTFrameIfQueued(dtFrameProxy) {
        return DTAreaProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.NewFrameStep2_SetStateOfDTFrameIfQueued.name);
            this.Logger.LogVal('looking for discriminator: ', StateFullProxyDisciminator[dtFrameProxy.HostedStateFullProxy.StateFullProxyDisciminator]);
            let foundMatchingState = null;
            let foundMatchingIndex = -1;
            this.IncomingSetStateList.forEach((stateOfDtFrame, index) => {
                if (stateOfDtFrame.StateOfHosted.StatefullDisciminator === dtFrameProxy.HostedStateFullProxy.StateFullProxyDisciminator) {
                    foundMatchingState = stateOfDtFrame;
                    foundMatchingIndex = index;
                }
            });
            if (foundMatchingIndex > -1) {
                this.IncomingSetStateList.splice(foundMatchingIndex, 1);
                if (foundMatchingState) {
                    yield dtFrameProxy.SetState(foundMatchingState);
                }
                else {
                    this.Logger.Log('no queued states');
                }
            }
            else {
            }
            this.Logger.FuncEnd(this.NewFrameStep2_SetStateOfDTFrameIfQueued.name);
        });
    }
    NewFrameStep3_WireEvents(dtFrameProxy) {
        this.Logger.FuncStart(this.NewFrameStep3_WireEvents.name);
        dtFrameProxy.DTFrameProxyMutationEvent_Subject.RegisterObserver(this.DTFrameProxyManyMutationEvent_Observer);
        dtFrameProxy.WireEvents();
        this.Logger.FuncEnd(this.NewFrameStep3_WireEvents.name);
    }
    NewFrameStep4_NotifyObserversOfAreaProxyMutation(AddedDTFrameProxy) {
        this.Logger.FuncStart(this.NewFrameStep4_NotifyObserversOfAreaProxyMutation.name);
        let payload = {
            AddedDTFrameProxies: [AddedDTFrameProxy],
            RemovedDTFrameProxies: [],
            DTFrameProxyMutationEvent_Payload: null,
        };
        this.DTAreaProxyMutationEvent_Subject.NotifyObserversAsync(payload);
        this.Logger.FuncEnd(this.NewFrameStep4_NotifyObserversOfAreaProxyMutation.name);
    }
    NewFrameStep5_AddToDTFrameProxyBucket(dtframeProxy) {
        this.Logger.FuncStart(this.NewFrameStep5_AddToDTFrameProxyBucket.name);
        let toReturn = false;
        if (!this.BucketHasSameItem(dtframeProxy)) {
            this.FramesBucket.push(dtframeProxy);
            toReturn = true;
        }
        this.Logger.FuncEnd(this.NewFrameStep5_AddToDTFrameProxyBucket.name);
        return (toReturn);
    }
    NewFrameStep6_TriggerEvents(dtframeProxy) {
        this.Logger.FuncStart(this.NewFrameStep6_TriggerEvents.name);
        dtframeProxy.TriggerEventsForInbound();
        this.Logger.FuncEnd(this.NewFrameStep6_TriggerEvents.name);
    }
    OnDTFProxyMutationEvent(dTFrameProxyMutationEvent_Payload) {
        this.Logger.FuncStart(this.OnDTFProxyMutationEvent.name);
        let dTAreaProxyMutationEvent = {
            DTFrameProxyMutationEvent_Payload: dTFrameProxyMutationEvent_Payload,
            AddedDTFrameProxies: [],
            RemovedDTFrameProxies: []
        };
        this.DTAreaProxyMutationEvent_Subject.NotifyObserversAsync(dTAreaProxyMutationEvent);
        this.Logger.FuncEnd(this.OnDTFProxyMutationEvent.name);
    }
    AddToIncomingSetStateList(stateOfFrame) {
        this.Logger.FuncStart(this.AddToIncomingSetStateList.name, stateOfFrame.StateOfDTFrames.length);
        stateOfFrame.StateOfDTFrames.forEach((stateOfDTFrame) => this.IncomingSetStateList.push(stateOfDTFrame));
        this.Logger.FuncEnd(this.AddToIncomingSetStateList.name);
    }
    PublishTopFrame() {
        return DTAreaProxy_awaiter(this, void 0, void 0, function* () {
            let dtFrameProxy = this.GetTopFrame();
            if (dtFrameProxy) {
                if (dtFrameProxy.StateFullProxyDisciminator === StateFullProxyDisciminator.ContentEditor) {
                    yield dtFrameProxy.HostedStateFullProxy.PublishItem();
                }
            }
        });
    }
    GetTopFrame() {
        let toReturn = null;
        this.FramesBucket.forEach((dtframeProxy) => {
            if (dtframeProxy.GetZindexAsInt() == 1) {
                toReturn = dtframeProxy;
            }
        });
        return toReturn;
    }
    BucketHasSameItem(dtFrameBucketItem) {
        let toReturn = true;
        if (this.FramesBucket.indexOf(dtFrameBucketItem) < 0) {
            toReturn = false;
        }
        else {
            toReturn = true;
            this.ErrorHand.WarningAndContinue(this.BucketHasSameItem.name, 'Proxy already exists in bucket');
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/DTAreaProxyMutationEvent/DTAreaProxyMutationEvent_Observer.js

class DTAreaProxyMutationEvent_Observer_DTAreaProxyMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, DTAreaProxyMutationEvent_Observer_DTAreaProxyMutationEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/DesktopProxy.js
var DesktopProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};









class DesktopProxy_DesktopSFProxy extends _StateProxy_BaseStateFullProxy {
    constructor(hindeCore, documentJacket) {
        super(hindeCore);
        this.StateFullProxyDisciminator = StateFullProxyDisciminator.Desktop;
        this.Logger.CTORStart(DesktopProxy_DesktopSFProxy.name);
        if (documentJacket) {
            this.DocumentJacket = documentJacket;
        }
        else {
            this.ErrorHand.ErrorAndThrow(DesktopProxy_DesktopSFProxy.name, 'No associated doc');
        }
        this.Instantiate();
        this.Logger.CTOREnd(DesktopProxy_DesktopSFProxy.name);
    }
    Instantiate() {
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
        this.DTAreaProxy = new DTAreaProxy_DTAreaProxy(this.HindeCore, this.DocumentJacket);
        this.DTStartBarProxy = new DesktopStartBarProxy_DTStartBarProxy(this.HindeCore, this.DocumentJacket);
        this.DTAreaProxyMutationEvent_Observer = new DTAreaProxyMutationEvent_Observer_DTAreaProxyMutationEvent_Observer(this.HindeCore, this.OnAreaProxyMutationEvent.bind(this));
    }
    InstantiateAsyncMembers() {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart(this.InstantiateAsyncMembers.name, DesktopProxy_DesktopSFProxy.name);
                this.DTAreaProxy.InstantiateAsyncMembers();
                this.DTStartBarProxy.Instantiate_DTStartBarProxy();
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.InstantiateAsyncMembers.name, err);
            }
            this.Logger.FuncEnd(this.InstantiateAsyncMembers.name, DesktopProxy_DesktopSFProxy.name);
        });
    }
    WireEvents() {
        this.Logger.FuncStart(this.WireEvents.name, DesktopProxy_DesktopSFProxy.name);
        this.DTAreaProxy.WireEvents();
        this.DTStartBarProxy.WireEvent();
        this.DTAreaProxy.DTAreaProxyMutationEvent_Subject.RegisterObserver(this.DTAreaProxyMutationEvent_Observer);
        this.Logger.FuncEnd(this.WireEvents.name, DesktopProxy_DesktopSFProxy.name);
    }
    GetState() {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DesktopProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetState.name, DesktopProxy_DesktopSFProxy.name);
                let toReturnDesktopState = new DefaultStateOfDesktop_DefaultStateOfDesktop();
                yield this.DTAreaProxy.GetState()
                    .then((stateOfDTAreaProxy) => toReturnDesktopState.StateOfDTArea = stateOfDTAreaProxy)
                    .then(() => resolve(toReturnDesktopState))
                    .catch((err) => reject(this.GetState.name + ' | ' + err));
                this.Logger.FuncEnd(this.GetState.name, DesktopProxy_DesktopSFProxy.name);
            }));
        });
    }
    SetState(stateOfDesktop) {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.SetState.name, DesktopProxy_DesktopSFProxy.name);
            this.TaskMonitor.AsyncTaskStarted(this.SetState.name);
            try {
                let promAr = [];
                yield this.DTAreaProxy.SetState(stateOfDesktop.StateOfDTArea)
                    .then((dtFramesNeeded) => {
                    dtFramesNeeded.DiscriminatorAr.forEach((disciminator) => {
                        if (disciminator === StateFullProxyDisciminator.ContentEditor) {
                            promAr.push(this.AddContentEditorFrameAsync());
                        }
                        else if (disciminator === StateFullProxyDisciminator.MediaLibrary) {
                            promAr.push(this.AddMediaLibraryFrame());
                        }
                        else if (disciminator === StateFullProxyDisciminator.PackageDesigner) {
                            promAr.push(this.AddPackageDesignerFrame());
                        }
                        else if (disciminator === StateFullProxyDisciminator.TemplateManager) {
                            promAr.push(this.AddTemplateManagerFrame());
                        }
                        else if (disciminator === StateFullProxyDisciminator.DTFrameProxy) {
                        }
                        else if (disciminator === StateFullProxyDisciminator.FallBack) {
                        }
                        else {
                            this.ErrorHand.ErrorAndThrow(this.SetState.name, 'unhandled discriminator ->  ' + StateFullProxyDisciminator[disciminator]);
                        }
                    });
                })
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.SetState.name, err));
                yield Promise.all(promAr)
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.SetState.name, err));
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.SetState.name + ' ' + DesktopProxy_DesktopSFProxy.name, err);
            }
            this.TaskMonitor.AsyncTaskCompleted(this.SetState.name);
            this.Logger.FuncEnd(this.SetState.name, DesktopProxy_DesktopSFProxy.name);
        });
    }
    TriggerInboundEventsAsync() {
    }
    PublishItem() {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            yield this.DTAreaProxy.PublishTopFrame();
        });
    }
    AddMediaLibraryFrame() {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.AddMediaLibraryFrame.name);
            try {
                this.DTPopUpMenuProxy = new DTPopUp1Proxy_DTPopUp1Proxy(this.HindeCore);
                yield this.DTStartBarProxy.TriggerRedButton()
                    .then(() => this.TaskMonitor.AsyncTaskStarted(this.AddMediaLibraryFrame.name))
                    .then(() => this.DTPopUpMenuProxy.RecipeAddNewMediaLibraryToDesktop(this.DocumentJacket))
                    .then(() => this.RecipeBasics.WaitForTimePeriod(ContentConst.Const.Numbers.Desktop.TimeNewCEWaitForScOverlayToClearMs, this.AddMediaLibraryFrame.name))
                    .then(() => this.TaskMonitor.AsyncTaskCompleted(this.AddMediaLibraryFrame.name))
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.AddMediaLibraryFrame.name, err));
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.AddMediaLibraryFrame.name, err);
            }
            this.Logger.FuncEnd(this.AddMediaLibraryFrame.name);
        });
    }
    AddTemplateManagerFrame() {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.AddTemplateManagerFrame.name);
            try {
                this.DTPopUpMenuProxy = new DTPopUp1Proxy_DTPopUp1Proxy(this.HindeCore);
                yield this.DTStartBarProxy.TriggerRedButton()
                    .then(() => this.TaskMonitor.AsyncTaskStarted(this.AddTemplateManagerFrame.name))
                    .then(() => this.DTPopUpMenuProxy.RecipeAddNewTemplateManagerToDesktop(this.DocumentJacket))
                    .then(() => this.RecipeBasics.WaitForTimePeriod(ContentConst.Const.Numbers.Desktop.TimeNewCEWaitForScOverlayToClearMs, this.AddTemplateManagerFrame.name))
                    .then(() => this.TaskMonitor.AsyncTaskCompleted(this.AddTemplateManagerFrame.name))
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.AddTemplateManagerFrame.name, err));
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.AddTemplateManagerFrame.name, err);
            }
            this.Logger.FuncEnd(this.AddTemplateManagerFrame.name);
        });
    }
    AddPackageDesignerFrame() {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.AddPackageDesignerFrame.name);
            try {
                this.DTPopUpMenuProxy = new DTPopUp1Proxy_DTPopUp1Proxy(this.HindeCore);
                yield this.DTStartBarProxy.TriggerRedButton()
                    .then(() => this.TaskMonitor.AsyncTaskStarted(this.AddPackageDesignerFrame.name))
                    .then(() => this.DTPopUpMenuProxy.RecipeAddNewPackageDesignerToDesktop(this.DocumentJacket))
                    .then(() => this.RecipeBasics.WaitForTimePeriod(ContentConst.Const.Numbers.Desktop.TimeNewCEWaitForScOverlayToClearMs, this.AddPackageDesignerFrame.name))
                    .then(() => this.TaskMonitor.AsyncTaskCompleted(this.AddPackageDesignerFrame.name))
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.AddPackageDesignerFrame.name, err));
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.AddPackageDesignerFrame.name, err);
            }
            this.Logger.FuncEnd(this.AddPackageDesignerFrame.name);
        });
    }
    AddContentEditorFrameAsync() {
        return DesktopProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.AddContentEditorFrameAsync.name);
            try {
                this.DTPopUpMenuProxy = new DTPopUp1Proxy_DTPopUp1Proxy(this.HindeCore);
                yield this.DTStartBarProxy.TriggerRedButton()
                    .then(() => this.TaskMonitor.AsyncTaskStarted(this.AddContentEditorFrameAsync.name))
                    .then(() => this.DTPopUpMenuProxy.RecipeAddNewContentEditorToDesktop(this.DocumentJacket))
                    .then(() => this.RecipeBasics.WaitForTimePeriod(ContentConst.Const.Numbers.Desktop.TimeNewCEWaitForScOverlayToClearMs, this.AddContentEditorFrameAsync.name))
                    .then(() => this.TaskMonitor.AsyncTaskCompleted(this.AddContentEditorFrameAsync.name))
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.AddContentEditorFrameAsync.name, err));
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.AddContentEditorFrameAsync.name, err);
            }
            this.Logger.FuncEnd(this.AddContentEditorFrameAsync.name);
        });
    }
    OnAreaProxyMutationEvent(dTAreaProxyMutationEvent_Payload) {
        this.Logger.FuncStart(this.OnAreaProxyMutationEvent.name);
        this.DTStartBarProxy.OnTreeMutationEvent_DesktopStartBarProxy(dTAreaProxyMutationEvent_Payload);
        this.Logger.FuncEnd(this.OnAreaProxyMutationEvent.name);
    }
    GetAssociatedDoc() {
        return this.DocumentJacket;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/LaunchPadProxy.js
var LaunchPadProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class LaunchPadProxy_LaunchPadProxy extends _StateProxy_BaseStateFullProxy {
    constructor() {
        super(...arguments);
        this.StateFullProxyDisciminator = StateFullProxyDisciminator.LaunchPad;
    }
    GetState() {
        return LaunchPadProxy_awaiter(this, void 0, void 0, function* () {
        });
    }
    SetState(state) {
        return LaunchPadProxy_awaiter(this, void 0, void 0, function* () {
        });
    }
    WireEvents() {
    }
    InstantiateAsyncMembers() {
    }
    TriggerInboundEventsAsync() {
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ScWindowFacade.js
var ScWindowFacade_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



















class ScWindowFacade_ScWindowFacade extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, documentJacket) {
        super(hindeCore);
        this.Logger.CTORStart(ScWindowFacade_ScWindowFacade.name);
        this.DocumentJacket = documentJacket;
        this.Instantiate();
        this.Logger.CTOREnd(ScWindowFacade_ScWindowFacade.name);
    }
    Instantiate() {
        this.ScPageTypeResolver = new ScPageTypeResolver_ScPageTypeResolver(this.HindeCore, this.DocumentJacket.UrlJacket);
    }
    InstantiateAsyncMembers_ScWindowFacade() {
        return ScWindowFacade_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart(this.InstantiateAsyncMembers_ScWindowFacade.name);
                this.TabSessionId = sessionStorage.getItem(ContentConst.Const.Storage.SessionKey);
                if (!this.TabSessionId) {
                    this.TabSessionId = Guid_Guid.WithoutDashes(Guid_Guid.NewRandomGuid());
                    sessionStorage.setItem(ContentConst.Const.Storage.SessionKey, this.TabSessionId);
                }
                yield this.DocumentJacket.WaitForCompleteNAB_DocumentJacket('Window.Document')
                    .then((result) => {
                    let windowType = this.ScPageTypeResolver.GetScWindowType();
                    if (false) {}
                    else if (windowType === ScWindowType.AccessViewer) {
                        this.StateFullProxy = new FallBackProxy_FallBackProxy(this.HindeCore);
                    }
                    else if (windowType === ScWindowType.ContentEditor) {
                        this.StateFullProxy = new ContentEditorProxy_ContentEditorSFProxy(this.HindeCore, this.DocumentJacket, 'Solo Content Editor doc');
                    }
                    else if (windowType === ScWindowType.Desktop) {
                        this.StateFullProxy = new DesktopProxy_DesktopSFProxy(this.HindeCore, this.DocumentJacket);
                    }
                    else if (windowType === ScWindowType.DomainManager) {
                        this.StateFullProxy = new FallBackProxy_FallBackProxy(this.HindeCore);
                    }
                    else if (windowType === ScWindowType.FallBack) {
                        this.StateFullProxy = new FallBackProxy_FallBackProxy(this.HindeCore);
                    }
                    else if (windowType === ScWindowType.Launchpad) {
                        this.StateFullProxy = new LaunchPadProxy_LaunchPadProxy(this.HindeCore);
                    }
                    else if (windowType === ScWindowType.MediaLibrary) {
                        this.StateFullProxy = new MediaLibraryProxy_MediaLibraryProxy(this.HindeCore, this.DocumentJacket, 'media library');
                    }
                    else if (windowType === ScWindowType.PackageDesigner) {
                        this.StateFullProxy = new PackageDesignerProxy_PackageDesignerProxy(this.HindeCore, this.DocumentJacket, 'PackageDesigner');
                    }
                    else if (windowType === ScWindowType.RollManager) {
                        this.StateFullProxy = new FallBackProxy_FallBackProxy(this.HindeCore);
                    }
                    else if (windowType === ScWindowType.SecurityEditor) {
                        this.StateFullProxy = new FallBackProxy_FallBackProxy(this.HindeCore);
                    }
                    else if (windowType === ScWindowType.TemplateManager) {
                        this.StateFullProxy = new TemplateManagerProxy_TemplateManagerProxy(this.HindeCore, this.DocumentJacket, 'templateManager');
                    }
                    else if (windowType === ScWindowType.UserManager) {
                        this.StateFullProxy = new FallBackProxy_FallBackProxy(this.HindeCore);
                    }
                    else {
                        this.ErrorHand.ErrorAndThrow(this.InstantiateAsyncMembers_ScWindowFacade.name, 'unhandled windowType ' + ScWindowType[windowType]);
                    }
                    ;
                })
                    .then(() => this.StateFullProxy.InstantiateAsyncMembers())
                    .then(() => this.StateFullProxy.WireEvents())
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.InstantiateAsyncMembers_ScWindowFacade.name, err));
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.InstantiateAsyncMembers_ScWindowFacade.name, err);
            }
            this.Logger.FuncEnd(this.InstantiateAsyncMembers_ScWindowFacade.name);
        });
    }
    GetCurrentPageType() {
        return this.ScPageTypeResolver.GetScWindowType();
    }
    SetCompactCss(documentJacket) {
        return ScWindowFacade_awaiter(this, void 0, void 0, function* () {
        });
    }
    GetState() {
        return new Promise((resolve, reject) => ScWindowFacade_awaiter(this, void 0, void 0, function* () {
            let toReturn = new DefaultStateOfScWindowProxy_DefaultStateOfScWindow();
            if (this.StateFullProxy) {
                yield this.StateFullProxy.GetState()
                    .then((stateOf_) => toReturn.StateOf_ = stateOf_)
                    .then(() => toReturn.StateOf_.StatefullDisciminatorFriendly = StateFullProxyDisciminator[toReturn.StateOf_.StatefullDisciminator])
                    .then(() => resolve(toReturn))
                    .catch((err) => reject(this.GetState.name + ' | ' + err));
            }
            else {
                resolve(toReturn);
            }
        }));
    }
    GetStateOfScUiProxy(snapshotFlavor) {
        return new Promise((resolve, reject) => ScWindowFacade_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetStateOfScUiProxy.name);
            let toReturnStateOfSitecoreWindow = new DefaultStateOfScUiProxy_DefaultStateOfScUiProxy();
            yield this.GetState()
                .then((dataSitecoreWindowStates) => toReturnStateOfSitecoreWindow.StateOfScWindow = dataSitecoreWindowStates)
                .then(() => {
                toReturnStateOfSitecoreWindow.Meta = this.PopulateMetaData(snapshotFlavor, toReturnStateOfSitecoreWindow.StateOfScWindow);
                toReturnStateOfSitecoreWindow.Friendly = this.PopulateFriendly(toReturnStateOfSitecoreWindow.Meta);
            })
                .then(() => resolve(toReturnStateOfSitecoreWindow))
                .catch((err) => reject(this.GetStateOfScUiProxy.name + ' | ' + err));
            this.Logger.FuncEnd(this.GetStateOfScUiProxy.name);
        }));
    }
    PublishActiveCE() {
        return new Promise((resolve, reject) => ScWindowFacade_awaiter(this, void 0, void 0, function* () {
            if (this.GetCurrentPageType() == ScWindowType.ContentEditor) {
                yield this.StateFullProxy.PublishItem()
                    .then(() => resolve());
            }
            else if (this.GetCurrentPageType() == ScWindowType.Desktop) {
                this.StateFullProxy.PublishItem()
                    .then(() => resolve())
                    .catch((err) => reject(this.PublishActiveCE.name + ' | ' + err));
            }
            else {
                reject(this.PublishActiveCE.name + ' Unhandled page type');
            }
        }));
    }
    SetStateOfScWin(dataToRestore) {
        return ScWindowFacade_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScWindowFacade_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.SetStateOfScWin.name);
                if (dataToRestore) {
                    if (dataToRestore.Meta.WindowType == ScWindowType.Desktop) {
                        if (dataToRestore.StateOfScWindow.StateOf_) {
                            yield this.StateFullProxy.SetState(dataToRestore.StateOfScWindow.StateOf_)
                                .then(() => resolve())
                                .catch((err) => reject(this.SetStateOfScWin.name + ' | ' + err));
                        }
                        else {
                            this.ErrorHand.ErrorAndThrow(this.SetStateOfScWin.name, 'no states in dataToRestore');
                        }
                    }
                    else {
                        reject(this.SetStateOfScWin.name + 'Data not restored. Not in Desktop or Content Editor');
                    }
                }
                else {
                    this.ErrorHand.WarningAndContinue(this.SetStateOfScWin.name, " No data found to restore");
                    resolve();
                }
                reject(this.SetStateOfScWin.name + ' : unknown reason');
                this.Logger.FuncEnd(this.SetStateOfScWin.name);
            }));
        });
    }
    PopulateFriendly(metadata) {
        let toReturn = new DefaultFriendly_DefaultFriendly();
        toReturn.WindowType = ScWindowType[metadata.WindowType];
        toReturn.TimeStamp = StaticHelpers_StaticHelpers.MakeFriendlyDate(metadata.TimeStamp);
        toReturn.Flavor = SnapShotFlavor[metadata.Flavor];
        return toReturn;
    }
    Hash(input) {
        let hash = 0;
        let strLen = input.length;
        let charCode;
        if (strLen !== 0) {
            for (var idx = 0; idx < strLen; idx++) {
                charCode = input.charCodeAt(idx);
                hash = ((hash << 5) - hash) + charCode;
                hash = hash & hash;
            }
        }
        return hash;
    }
    PopulateMetaData(snapshotFlavor, stateOfScWindow) {
        let toReturn = new DefaultMetaData_DefaultMetaData();
        toReturn.WindowType = this.ScPageTypeResolver.GetScWindowType();
        toReturn.TimeStamp = new Date();
        toReturn.SessionId = this.TabSessionId;
        toReturn.Flavor = snapshotFlavor;
        toReturn.Hash = this.Hash(JSON.stringify(stateOfScWindow));
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/HindSiteScUiAPI.js
var HindSiteScUiAPI_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class HindSiteScUiAPI_HindSiteScUiAPI extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, scUiMan, documentJacket) {
        super(hindeCore);
        this.Logger.CTORStart(HindSiteScUiAPI_HindSiteScUiAPI.name);
        this.ScUiMan = scUiMan;
        this.DocumentJacket = documentJacket;
        this.Logger.CTOREnd(HindSiteScUiAPI_HindSiteScUiAPI.name);
    }
    InstantiateHindSiteScUiProxy() {
        return HindSiteScUiAPI_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.InstantiateHindSiteScUiProxy.name);
            try {
                this.ScWindowFacade = new ScWindowFacade_ScWindowFacade(this.HindeCore, this.DocumentJacket);
                yield this.ScWindowFacade.InstantiateAsyncMembers_ScWindowFacade();
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.InstantiateHindSiteScUiProxy.name, err);
            }
            this.Logger.FuncEnd(this.InstantiateHindSiteScUiProxy.name);
        });
    }
    GetStateOfScUiProxyWindow(snapshotFlavor) {
        return this.ScWindowFacade.GetStateOfScUiProxy(snapshotFlavor);
    }
    GetStateOfScUiProxy() {
        return new Promise((resolve, reject) => HindSiteScUiAPI_awaiter(this, void 0, void 0, function* () {
            let reply = null;
            if (this.ScWindowFacade) {
                yield this.ScWindowFacade.GetStateOfScUiProxy(SnapShotFlavor.Live)
                    .then((result) => reply = result)
                    .then(() => reply.ErrorStackScUiProxy = this.ErrorHand.ErrorStack)
                    .then(() => resolve(reply))
                    .catch((err) => reject(err));
            }
            else {
                resolve(reply);
            }
        }));
    }
    AddContentEditorToDesktopAsync(apiCallPayload) {
        return new Promise((resolve, reject) => HindSiteScUiAPI_awaiter(this, void 0, void 0, function* () {
            this.ScWindowFacade.StateFullProxy.AddContentEditorFrameAsync()
                .then(() => resolve())
                .catch((err) => reject());
        }));
    }
    PublischActiveCE(commandData) {
        return new Promise((resolve, reject) => HindSiteScUiAPI_awaiter(this, void 0, void 0, function* () {
            this.ScWindowFacade.PublishActiveCE()
                .then(() => resolve())
                .ca;
        }));
    }
    ToggleCompactCss(commandData) {
        return HindSiteScUiAPI_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HindSiteScUiAPI_awaiter(this, void 0, void 0, function* () {
            }));
        });
    }
    SetStateOfSitecoreWindowAsync(commandData, dataOneWindowStorage) {
        return new Promise((resolve, reject) => HindSiteScUiAPI_awaiter(this, void 0, void 0, function* () {
            this.ScWindowFacade.SetStateOfScWin(dataOneWindowStorage)
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    OpenContentEditor() {
        throw new Error("Method not implemented.");
    }
    AdminB(commandData) {
        this.ScUiMan.AdminB(this.DocumentJacket, null);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Managers/SitecoreUiManager/SitecoreUiManager.js
var SitecoreUiManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class SitecoreUiManager_ScUiManager extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
    }
    InitSitecoreUiManager() {
        return SitecoreUiManager_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.InitSitecoreUiManager.name);
            try {
                this.InjectCss();
            }
            catch (err) {
                throw (err);
            }
            this.Logger.FuncEnd(this.InitSitecoreUiManager.name);
        });
    }
    InjectCss() {
        const style = document.createElement('link');
        style.type = 'text/css';
        style.href = browser.extension.getURL('AutoBuild/final/content.min.css');
        style.rel = "stylesheet";
        document.getElementsByTagName("head")[0].appendChild(style);
    }
    AdminB(documentJacket, callbackOnComplete) {
        this.Logger.FuncStart(this.AdminB.name, 'targetDoc: ' + Guid_Guid.AsShort(documentJacket.DocId));
        this.Logger.Log('callback passed: ' + (callbackOnComplete !== null));
        let userNameElem = documentJacket.GetElementById(ContentConst.Const.ElemId.SC.scLoginUserName);
        let passwordElem = documentJacket.GetElementById(ContentConst.Const.ElemId.SC.scLoginPassword);
        if (this.Logger.IsNotNullOrUndefinedBool('userNameElem', userNameElem)
            &&
                this.Logger.IsNotNullOrUndefinedBool('passwordElem', passwordElem)) {
            userNameElem.NativeElement.setAttribute('value', ContentConst.Const.Names.scDefaultAdminUserName);
            passwordElem.NativeElement.setAttribute('value', ContentConst.Const.Names.scDefaultAdminPassword);
            var loginButton = this.GetLoginButton(documentJacket);
            if (this.Logger.IsNotNullOrUndefinedBool('loginButton', loginButton)) {
                this.Logger.Log('clicking loginbutton');
                loginButton.NativeElement.click();
                if (callbackOnComplete) {
                    this.Logger.Log('Triggering callback');
                    setTimeout(callbackOnComplete, ContentConst.Const.Timeouts.PostLoginBtnClick);
                }
                else {
                    this.Logger.Log('no callback passed');
                }
            }
            else {
                this.ErrorHand.ErrorAndThrow(this.AdminB.name, 'No loginButton');
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.AdminB.name, 'No Username or password field');
        }
        this.Logger.FuncEnd(this.AdminB.name);
    }
    GetLoginButton(documentJacket) {
        this.Logger.FuncStart(this.GetLoginButton.name);
        var toReturn = documentJacket.GetElementById(ContentConst.Const.ElemId.SC.scLoginBtn.sc920);
        if (!toReturn) {
            toReturn = documentJacket.QuerySelector(ContentConst.Const.Selector.SC.LoginBtn.sc820);
        }
        this.Logger.Log('toReturn: ' + toReturn);
        this.Logger.FuncEnd(this.GetLoginButton.name);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LogWriterBuffer.js
class LogWriterBuffer {
    constructor() {
        this.FriendlyName = LogWriterBuffer.name;
        this.LogPreInitBuffer = [];
        this.bufferPrefix = '* ';
    }
    WriteText(text) {
        this.LogPreInitBuffer.push(this.bufferPrefix + text);
    }
    GetBuffer() {
        let iterCheckMax = 1000;
        let toReturn = [];
        while (this.LogPreInitBuffer.length > 0 && iterCheckMax > 0) {
            iterCheckMax--;
            toReturn.push(this.LogPreInitBuffer.shift());
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LoggerTimer.js

class LoggerTimer_LoggerTimer {
    constructor() {
        this.TimeStart = new Date();
        this.TimeLast = this.TimeStart.getTime();
        this.TimeMarkStart = this.TimeLast;
    }
    GetTimeDiff() {
        let toReturn = '';
        let timeNow = new Date().getTime();
        let timeDiffSinceLastMs = timeNow - this.TimeLast;
        let timeDiffOVerAll = timeNow - this.TimeMarkStart;
        let toReturnSinceLast;
        let toReturnSinceStart;
        let padLength = 5;
        if (timeDiffSinceLastMs >= SharedConst.Const.Logger.MinTimeDiffMs) {
            toReturnSinceLast = this.padFront(timeDiffSinceLastMs, padLength);
        }
        else {
            toReturnSinceLast = this.padFront(' ', padLength, ' ');
        }
        ;
        toReturnSinceStart = this.padFront(timeDiffOVerAll, padLength, '0');
        toReturn = toReturnSinceStart + ' ' + toReturnSinceLast;
        this.TimeLast = timeNow;
        return toReturn;
    }
    padFront(input, desiredLength = 2, padChar = '0') {
        let toReturn = input.toString();
        let maxIter = 10;
        while ((toReturn.length < desiredLength) && maxIter > 0) {
            maxIter--;
            toReturn = padChar + toReturn;
        }
        return toReturn;
    }
    LogTimeStamp() {
        var result = this.padFront(this.TimeStart.getDate()) + "/" + this.padFront(this.TimeStart.getMonth() + 1) + "/" + this.TimeStart.getFullYear() + " " + this.padFront(this.TimeStart.getHours()) + ":" + this.padFront(this.TimeStart.getMinutes());
        return result;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LoggerAgent.js
var LoggerAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







var StyleMode;
(function (StyleMode) {
    StyleMode[StyleMode["Default"] = 0] = "Default";
    StyleMode[StyleMode["Highlight"] = 1] = "Highlight";
})(StyleMode || (StyleMode = {}));
class LoggerAgent_LoggerAgent {
    constructor() {
        this.MaxIndent = 20;
        this.AllLogWriters = [];
        this.__debugTextChangedCallbacks = [];
        this.UseTimeStamp = true;
        this.styleBgYellow = "[43m";
        this.styleEsc = "\x1b";
        this.styleFgBlue = "[34m";
        this.styleFgGreen = "[32m";
        this.styleFgMagenta = "[35m";
        this.styleFgRed = "[31m";
        this.styleReset = "[0m";
        this.Discriminator = Discriminator.ILoggerAgent;
        this.MaxDepthBeforeThrow = 2000;
        this.Timer = new LoggerTimer_LoggerTimer;
        this.BufferWriter = new LogWriterBuffer();
        this.AddWriter(this.BufferWriter);
        this.__callDepth = -1;
        this.LogVal('TimeStamp', this.Timer.LogTimeStamp());
    }
    Instantiate() {
    }
    FlushBuffer() {
        this.RemoveWriter(this.BufferWriter);
        this.LogVal('TimeStamp B', Date.now());
        let bufferAr = this.BufferWriter.GetBuffer();
        for (var idx = 0; idx < bufferAr.length; idx++) {
            this.Log(bufferAr[idx]);
        }
    }
    RemoveWriter(BufferWriter) {
        for (var idx = 0; idx < this.AllLogWriters.length; idx++) {
            let candidate = this.AllLogWriters[idx];
            if (candidate == BufferWriter) {
                this.AllLogWriters.splice(idx, 1);
                break;
            }
        }
    }
    AddWriter(writter) {
        this.HasWriters = true;
        this.AllLogWriters.push(writter);
    }
    SectionMarker(sectionTag) {
        this.Log("");
        this.Log("======================= " + sectionTag + " =======================");
        this.Log("");
    }
    IsNotNullOrUndefinedBool(title, subject) {
        var toReturn = false;
        if (subject) {
            if ((typeof subject) === 'undefined') {
                this.LogVal(title + ' Is Not Undefined', '!!! false !!!');
            }
            else {
                toReturn = true;
            }
        }
        else {
            this.LogVal(title + ' Is Not Null', '!!! false !!!');
        }
        return toReturn;
    }
    HandlerClearDebugText(self, verify = false) {
        this.FuncStart(this.HandlerClearDebugText.name);
        var proceed = true;
        if (verify) {
            proceed = confirm('Clear Debug TextArea ?');
        }
        if (proceed) {
            var newText = '--- Debug Text Reset ---';
        }
        this.FuncEnd(this.HandlerClearDebugText.name);
    }
    MarkerA() {
        this.__markerRaw('A');
    }
    MarkerB() {
        this.__markerRaw('B');
    }
    MarkerC() {
        this.__markerRaw('C');
    }
    MarkerD() {
        this.__markerRaw('D');
    }
    MarkerE() { this.__markerRaw('E'); }
    MarkerF() { this.__markerRaw('F'); }
    __markerRaw(marker) {
        this.Log('Marker ' + marker);
    }
    LogAsJsonPretty(texValName, jsonObj) {
        try {
            this.LogVal(texValName, JSON.stringify(jsonObj, null, 2));
        }
        catch (err) {
            this.Log('Unable to stringify obj');
        }
    }
    LogVal(textValName, textVal) {
        if (typeof textVal === 'undefined') {
            textVal = '{undefined}';
        }
        else if (textVal === null) {
            textVal = '{null}';
        }
        else {
            var asGuid = textVal;
            if (typeof asGuid === typeof GuidData_GuidData) {
                textVal = asGuid.Raw;
            }
        }
        textVal = textVal.toString();
        textValName = StaticHelpers_StaticHelpers.BufferString(textValName.toString(), 26, BufferChar.space, BufferDirection.right);
        const debugPrefix = '~~ ';
        let rawText = debugPrefix + textValName + ' : ' + textVal;
        if (this.AltColor === this.styleFgBlue) {
            this.AltColor = this.styleFgMagenta;
        }
        else {
            this.AltColor = this.styleFgBlue;
        }
        let formattedText = this.StyleFormat(this.AltColor, rawText);
        this.Log(formattedText);
    }
    LogImportant(text) {
        text = this.StyleFormat(this.styleBgYellow, text);
        this.Log(text);
    }
    Log(text, optionalValue = '', hasPrefix = false) {
        return LoggerAgent_awaiter(this, void 0, void 0, function* () {
            if (this.HasWriters) {
                var indent = '  ';
                let indentDepth = this.__callDepth % this.MaxIndent;
                for (var idx = 0; idx < indentDepth; idx++) {
                    text = indent + text;
                }
                var prefixLength = 3;
                if (!hasPrefix) {
                    for (var idx = 0; idx < prefixLength; idx++) {
                        text = ' ' + text;
                    }
                }
                this.__triggerAllDebugTextChangedCallbacks({
                    NewText: text,
                    Append: true
                });
                if (this.UseTimeStamp) {
                    let timeDiff = this.Timer.GetTimeDiff() + '  ';
                    text = timeDiff + text;
                }
                this.WriteToAllWriters(text);
            }
        });
    }
    WriteToAllWriters(text) {
        if (this.AllLogWriters) {
            this.AllLogWriters.forEach((oneWriter) => {
                if (oneWriter) {
                    try {
                        oneWriter.WriteText(text);
                    }
                    catch (err) {
                        console.log(this.WriteToAllWriters.name + ' ' + oneWriter.FriendlyName + ' | ' + err);
                    }
                }
                else {
                    console.log('Null writer');
                }
            });
        }
    }
    __triggerAllDebugTextChangedCallbacks(data) {
        for (var idx = 0; idx < this.__debugTextChangedCallbacks.length; idx++) {
            var oneCallback = this.__debugTextChangedCallbacks[idx];
            oneCallback.Func(oneCallback.Caller, data);
        }
    }
    StyleFormat(color, text) {
        return this.styleEsc + color + text + this.styleEsc + this.styleReset;
    }
    CtorName(ctorName) {
        this.Log('Constructor: ' + ctorName);
    }
    FuncStart(textOrFunc, optionalValue) {
        textOrFunc = 's' + ' ' + this.__callDepth + ') ' + textOrFunc;
        if (!optionalValue) {
            optionalValue = '';
        }
        else {
            optionalValue = optionalValue.toString();
        }
        if (optionalValue.length > 0) {
            textOrFunc = textOrFunc + ' : ' + optionalValue;
        }
        let formatted = this.StyleFormat(this.styleFgGreen, textOrFunc);
        this.Log(formatted, '', true);
        this.__callDepth++;
        if (this.__callDepth > this.MaxDepthBeforeThrow) {
            throw ('Logger - Max Depth Exceeded: ' + this.__callDepth);
        }
    }
    CTORStart(text) {
        this.FuncStart("[CTOR] " + text);
    }
    CTOREnd(text) {
        this.FuncEnd("[CTOR] " + text);
    }
    FuncEnd(text, optionalValueInput) {
        this.__callDepth--;
        if (this.__callDepth < 0) {
            this.__callDepth = 0;
        }
        text = 'e' + ' ' + this.__callDepth + ') ' + text;
        if (optionalValue !== null && (typeof optionalValue === typeof Boolean)) {
            optionalValue = optionalValue.toString();
        }
        if (!optionalValueInput) {
            optionalValueInput = '';
        }
        var optionalValue = optionalValueInput.toString();
        if (optionalValue.length > 0) {
            text = text + ' : ' + optionalValue;
        }
        let formatted = this.StyleFormat(this.styleFgRed, text);
        this.Log(formatted, optionalValue, true);
    }
    NotNullCheck(title, value) {
        if (typeof value === 'undefined') {
            this.LogVal(title, 'Is Undefined');
        }
        else if (!value) {
            this.LogVal(title, 'Is Null');
        }
        else {
            this.LogVal(title, 'Is Not Null');
        }
    }
    IsNullOrUndefined(subject) {
        var toReturn = '{unknown}';
        if (subject) {
            if ((typeof subject) === 'undefined') {
                toReturn = 'Is Undefined';
            }
            else {
                toReturn = 'Not Null';
            }
        }
        else {
            toReturn = 'Is Null';
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LoggerConsoleWriter.js
class LoggerConsoleWriter {
    constructor() {
        this.FriendlyName = LoggerConsoleWriter.name;
    }
    WriteText(text) {
        console.log(text);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LoggerStorageWriter.js
var LoggerStorageWriter_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class LoggerStorageWriter {
    constructor() {
        this.FriendlyName = LoggerStorageWriter.name;
        this.CurrentStorageLogKey = '0';
        this.LogToStoragePrefix = 'Hindsite.Log.';
        this.StorageLogCombined = "";
    }
    WriteText(text) {
    }
    SetLogToStorageKey(logToStorageIndex) {
        this.CurrentStorageLogKey = this.LogToStoragePrefix + logToStorageIndex;
    }
    WriteLogToStorage(logMessage) {
        return LoggerStorageWriter_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => LoggerStorageWriter_awaiter(this, void 0, void 0, function* () {
                this.StorageLogCombined += "|||" + JSON.stringify(logMessage);
                if (this.CurrentStorageLogKey) {
                    window.localStorage.setItem(this.CurrentStorageLogKey, this.StorageLogCombined);
                }
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/TaskListMutationEvent/TaskListMutationEvent_Subject.js

class TaskListMutationEvent_Subject_TaskListMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor() {
        super(...arguments);
        this.ShowLogActions = false;
        this.Friendly_Subject = TaskListMutationEvent_Subject_TaskListMutationEvent_Subject.name;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/TaskMutationType.js
var TaskMutationType;
(function (TaskMutationType) {
    TaskMutationType[TaskMutationType["TaskAdded"] = 0] = "TaskAdded";
    TaskMutationType[TaskMutationType["TaskCompleted"] = 1] = "TaskCompleted";
    TaskMutationType[TaskMutationType["TasksHaveGoneIdle"] = 2] = "TasksHaveGoneIdle";
})(TaskMutationType || (TaskMutationType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/TaskMonitor.js



class TaskMonitor_TaskMonitor {
    constructor(logger) {
        this.TaskBucketStarted = [];
        this.TaskBucketCompleted = [];
        this.DelaySendMs = 3000;
        this.CancelRequestedFlag = false;
        this.IdleNotificationSent = false;
        this.MinElapsedBeforeIsIdleMs = 3000;
        this.Discriminator = Discriminator.TaskMonitor;
        this.Logger = logger;
    }
    IntroduceErrorHand(errorHand) {
        this.ErrorHand = errorHand;
    }
    Instantiate() {
        if (this.ErrorHand) {
            this.TaskMutationEvent_Subject = new TaskListMutationEvent_Subject_TaskListMutationEvent_Subject(this.Logger, this.ErrorHand, TaskMonitor_TaskMonitor.name);
        }
        else {
            throw ('no error handler attached');
        }
    }
    AsyncTaskStarted(name) {
        this.MarkActivity();
        this.TaskBucketStarted.push(name);
        this.BuildAndSendPayload(TaskMutationType.TaskAdded);
    }
    MarkActivity() {
        this.LastActivityTime = new Date().getTime();
        this.IdleNotificationSent = false;
    }
    IsTaskListEmpty() {
        return this.TaskBucketStarted.length === 0;
    }
    totalTaskCount() {
        return this.TaskBucketCompleted.length + this.TaskBucketStarted.length;
    }
    AsyncTaskCompleted(name) {
        this.MarkActivity();
        let foundIndex = this.TaskBucketStarted.indexOf(name);
        if (foundIndex > -1) {
            let toRemove = this.TaskBucketStarted.splice(foundIndex, 1);
            this.TaskBucketCompleted.push(toRemove[0]);
            this.SendIfEmpty();
        }
        else {
            console.log('Error - mismatch on tasks ' + name);
            console.log(JSON.stringify(this.TaskBucketStarted, null, 2));
        }
        this.BuildAndSendPayload(TaskMutationType.TaskCompleted);
    }
    LogValues() {
        this.Logger.LogImportant(this.LogValues.name + ' Task remaining : total - ' + this.TaskBucketStarted.length + ' : ' + this.totalTaskCount());
        if (this.AsyncTaskStarted.length < 20) {
            this.Logger.LogAsJsonPretty('TaskBucketStarted', this.TaskBucketStarted);
        }
    }
    SendIfEmpty() {
        if (this.IsTaskListEmpty()) {
            this.DelaySend();
        }
    }
    BuildAndSendPayload(mutationType) {
        let payload = {
            MutationType: mutationType,
            IsTaskEmpty: this.IsTaskListEmpty(),
            RemainingTaskCount: this.TaskBucketStarted.length,
            TotalTaskCount: this.totalTaskCount(),
            CompletedCount: this.TaskBucketCompleted.length,
        };
        this.TaskMutationEvent_Subject.NotifyObserversAsync(payload);
    }
    TimeRemainingBeforeIdle() {
        let timeElapsedSinceLastActivity = new Date().getTime() - this.LastActivityTime;
        let timeRemainingBeforeIdle = this.MinElapsedBeforeIsIdleMs - timeElapsedSinceLastActivity;
        if (timeRemainingBeforeIdle < 0) {
            timeRemainingBeforeIdle = 0;
        }
        return timeRemainingBeforeIdle;
    }
    TasksHaveGoneIdle() {
        let timeRemaining = this.TimeRemainingBeforeIdle();
        let toReturn = timeRemaining < 1;
        return toReturn;
    }
    SendTaskHaveGoneIdle() {
        this.IdleNotificationSent = true;
        this.BuildAndSendPayload(TaskMutationType.TasksHaveGoneIdle);
    }
    IsEmptyAndIdle() {
        let toReturn = this.IsTaskListEmpty() && this.TasksHaveGoneIdle();
        return toReturn;
    }
    DelaySend() {
        if (!this.IdleNotificationSent) {
            if (this.IsEmptyAndIdle()) {
                this.SendTaskHaveGoneIdle();
            }
            else {
                setTimeout(() => {
                    this.DelaySend();
                }, this.DelaySendMs);
            }
        }
    }
    RequestCancel() {
        console.log("Cancel Requested");
        this.CancelRequestedFlag = true;
    }
    IsCancelRequested() {
        return this.CancelRequestedFlag;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/RepositoryAgent/RepositoryAgent.js

class RepositoryAgent_RepositoryAgent extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
    }
    RemoveByKey(key) {
        try {
            window.localStorage.removeItem(key);
        }
        catch (err) {
            this.ErrorHand.ErrorAndThrow(this.RemoveByKey.name, err);
        }
    }
    InitRepositoryAgent() {
        this.Logger.FuncStart(RepositoryAgent_RepositoryAgent.name, this.InitRepositoryAgent.name);
        this.Logger.FuncEnd(RepositoryAgent_RepositoryAgent.name, this.InitRepositoryAgent.name);
    }
    GetBulkLocalStorageByKeyPrefix(targetPrefix) {
        var toReturn = [];
        try {
            var storageLength = window.localStorage.length;
            for (var idx = 0; idx < storageLength; idx++) {
                var candidate = {
                    data: '',
                    key: '',
                };
                candidate.key = window.localStorage.key(idx);
                if (candidate.key.startsWith(targetPrefix)) {
                    candidate.data = window.localStorage.getItem(candidate.key);
                    if (typeof candidate != 'undefined' && typeof candidate.data != 'undefined' && candidate != null && candidate.data != null) {
                        toReturn.push(candidate);
                    }
                }
            }
        }
        catch (err) {
            this.ErrorHand.ErrorAndThrow(this.GetBulkLocalStorageByKeyPrefix.name, err);
        }
        return toReturn;
    }
    ReadDataOfKey(targetKey) {
        this.Logger.FuncStart(this.ReadDataOfKey.name);
        let storageValue = null;
        let toReturn = '';
        storageValue = window.localStorage.getItem(targetKey);
        if (storageValue != null) {
            toReturn = storageValue.toString();
        }
        else {
            this.Logger.Log(this.ReadDataOfKey.name, "No value returned from storage");
        }
        this.Logger.FuncEnd(this.ReadDataOfKey.name);
        return toReturn;
    }
    WriteByKey(storageKey, jsonString) {
        window.localStorage.setItem(storageKey, jsonString);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Const/PopConst.js
let PopConst = (() => {
    class PopConst {
    }
    PopConst.Const = {
        ClassNames: {
            HS: {
                Collapsed: 'in',
                Down: 'down',
                Buttons: {
                    AdminB: 'admin-b',
                    Cancel: 'cancel',
                    CompactCe: 'details',
                    Edit: 'edit',
                    GoContentEditor: 'ce',
                    GoDesktop: 'desktop-icon',
                    Ping: 'edit',
                    PresentationDetails: 'details',
                    QuickPublish: 'publish',
                    RemoveFromStorage: 'delete-snapshot',
                    RestoreNewTab: 'restore-snapshot',
                    RestoreSameTab: 'restore-snapshot',
                    RestoreStateTBD: 'restore-snapshot',
                    ScModeEdit: 'edit',
                    ScModeNormal: 'normal',
                    ScModePrev: 'preview-icon',
                    TakeSnapShot: 'take-snapshot',
                    ToggleFavorite: 'btn-favorite',
                    UpdateNickname: 'set-nickname',
                    Icons: {
                        CloseWindow: 'icon-close-window',
                        AddContentEditorTab: 'icon-add-ce-tab',
                    }
                },
            },
        },
        ElemId: {
            InputNickname: 'id-input-nickname',
            HindSiteParentInfo: 'spanParentInfo',
            HS: {
                SelectHeaderAuto: 'sel-header-auto',
                SelectHeaderAutoTitle: 'sel-header-auto-title',
                SelectHeaderFavorite: 'sel-header-favorite',
                SelectHeaderFavoriteTitle: 'sel-header-favorite-title',
                SelectHeaderManual: 'sel-header-manual',
                SelectHeaderManualTitle: 'sel-header-manual-title',
                TabId: 'orig-win-id',
            }
        },
        Numbers: {
            MinMenuHeight: 600,
            MinMenuWidth: 600,
            MaxAutoSaveCount: 10,
            AutoSaveIntervalMin: 5,
        },
        Notify: {
            Default: 'Complete',
            PublishComplete: 'Publishing Complete',
        },
        Selector: {
            HS: {
                AutoSnapshotBeforeWindowChange: '[id=id-settings-auto-snapshot-on-window-change]',
                BuildStamp: '[id=build-stamp]',
                DivOverlayModule: '[id=menu-overlay]',
                DivStateContent: '[id=feedback-div-state-content]',
                FeedbackBrowserState: '[id=feedback-div-browser-state]',
                FeedbackPopUpState: '[id=feedback-div-pop-up-state]',
                FeedbackContentState: '[id=feedback-div-state-content]',
                FeedbackLogElement: '[id=feedback-pop-up-log]',
                FeedbackMessages: '[id=feedback-messages]',
                FeedbackStorage: '[id=feedback-storage]',
                HsCancel: '[id=Cancel]',
                HsRemoveFromStorage: '[id=id-ph-remove-one-from-local-storage]',
                HsRestoreWindowStateSameTab: '[id=id-ph-btn-restore-state-same-tab]',
                HsRestoreWindowStateNewTab: '[id=id-ph-btn-restore-state-new-tab]',
                iCBoxdSettingsAutoLogin: '[id=id-ph-settings-auto-login]',
                IdFieldSetDebug: '[id=id-fieldset-debug]',
                ToggleFavorite: '[id=id-ph-btn-toggle-favorite]',
                SettingAutoSaveInterval: '[id=id-settings-auto-save-interval]',
                SettingAutoSaveMaxCount: '[id=id-settings-auto-save-max-count]',
                SettingAutoSaveSnapshotRetainDays: '[id=id-settings-auto-save-snap-shot-retain-days]',
                SettingAutoRenameCeTabButton: '[id=id-settings-auto-rename-ce-tab-button]',
                SettingNotUsed: '[id=id-settings-not-used]',
                TakeSnapshot: '[id=id-ph-btn-take-snapshot]',
                UpdateNicknameB: '[id=id-ph-btn-update-nickname]',
                ModuleContainers: {
                    SettingShowDebuggingModules: '[id=id-setting-show-debugging-modules]',
                    BtnAddContentEditor: '[id=id-ph-btn-add-drframe-content-editor]',
                    BtnAdminB: '[id=id-ph-btn-adminb]',
                    BtnCompactScUi: '[id=id-ph-btn-compact-sc-ui]',
                    BtnDebugClearPopUpConsole: '[id=id-container-btn-debug-clear-console]',
                    BtnDebugForceAutoSnapShot: '[id=id-container-btn-debug-force-auto-snapshot]',
                    BtnDebugTriggerPopUpReload: '[id=id-container-btn-debug-trigger-pop-up-reload]',
                    BtnGoContentEditor: '[id=id-ph-btn-go-content-editor]',
                    BtnModeEdit: '[id=id-ph-btn-sc-mode-edit]',
                    BtnModeNorm: '[id=id-ph-btn-norm]',
                    BtnModePrev: '[id=id-ph-btn-prev]',
                    BtnPresentationDetails: '[id=id-ph-btn-presentation-details]',
                    BtnQuickPublish: '[id=id-ph-btn-quick-publish]',
                    BtnWindowClose: '[id=id-ph-close-window]',
                    SettingEnableDebugging: '[id=id-ph-settings-enable-debugging]',
                    Desktop: '[id=id-ph-btn-desktop]',
                    LgndBrowserState: '[id=lgnd-browser-state]',
                    LgndContentState: '[id=lgnd-content-state]',
                    LgndForeSite: '[id=lgnd-fore-site]',
                    LgndHindSite: '[id=lgnd-hind-site]',
                    LgndMessages: '[id=lgnd-messages]',
                    LgndPopUpDebug: '[id=lgnd-pop-up-debug]',
                    LgndPopUpLog: '[id=lgnd-pop-up-log]',
                    LgndPopUpState: '[id=lgnd-pop-up-state]',
                    LgndSettings: '[id=lgnd-settings]',
                    PrefAutoLogin: '[id=id-ph-settings-auto-login]',
                    SelStateSnapShot: '[id=id-container-select-state]',
                    SettingAutoRestoreState: '[id=id-settings-auto-restore-state]',
                    SettingDebugKeepDialogOpen: '[id=id-ph-settings-debug-keep-dialog-open]',
                    SettingUseCompactCss: '[id=id-ph-settings-use-compact]',
                }
            },
        },
        Settings: {
            Defaults: {
                AutoSaveEnabled: false,
                AutoRestoreState: false,
                DebugKeepDialogOpen: false,
                LgndBrowserState: false,
                LgndContentState: false,
                LgndForeSite: true,
                LgndHindSite: true,
                LgndMessages: false,
                LgndPopUpLog: false,
                LgndPopUpState: false,
                LgndPopUpDebug: false,
                LgndSettings: false,
            }
        },
        Storage: {
            SettingsSuffix: 'todo',
            KeyGenericSettings: 'HindSite.' + 'GenericSettings',
            StorageLogKeyPrefix: 'HindSite.' + 'Log.',
            Defaults: {
                bool: {
                    AutoSaveEnabled: false,
                    AutoLogin: false,
                    DefaultDebugKeepDialogOpen: false,
                    AutoSnapshotBeforeWindowChange: false,
                }
            }
        },
        SnapShotFormat: {
            lenTimestamp: 13,
            lenNickname: 16,
            lenPageType: 7,
            lenPrefix: 6,
            lenShortId: 4,
            colSep: ' - ',
            lenCeCount: 3,
            MainSectionNode: 9,
            lenActiveNode: 9,
            lenFavorite: 3,
        },
        Timeouts: {
            WaitBeforeRemovingCompleteFlag: 1500,
            AutoLoginCheckInterval: 3000,
        },
    };
    return PopConst;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/UiModuleManagerPassThroughEvent/UiModuleManagerPassThroughEvent_Observer.js

class UiModuleManagerPassThroughEvent_Observer_UiModuleManagerPassThroughEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, UiModuleManagerPassThroughEvent_Observer_UiModuleManagerPassThroughEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/Enabled.js
var UiEnableState;
(function (UiEnableState) {
    UiEnableState[UiEnableState["Unknown"] = 0] = "Unknown";
    UiEnableState[UiEnableState["Enabled"] = 1] = "Enabled";
    UiEnableState[UiEnableState["Disabled"] = 2] = "Disabled";
})(UiEnableState || (UiEnableState = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/ModuleKey.js
var ModuleKey;
(function (ModuleKey) {
    ModuleKey[ModuleKey["Unknown"] = 0] = "Unknown";
    ModuleKey[ModuleKey["BroswerState"] = 1] = "BroswerState";
    ModuleKey[ModuleKey["ButtonCancel"] = 2] = "ButtonCancel";
    ModuleKey[ModuleKey["ButtonClose"] = 3] = "ButtonClose";
    ModuleKey[ModuleKey["ButtonTypical"] = 4] = "ButtonTypical";
    ModuleKey[ModuleKey["ButtonWithInput"] = 5] = "ButtonWithInput";
    ModuleKey[ModuleKey["ContentState"] = 6] = "ContentState";
    ModuleKey[ModuleKey["FeedbackModule"] = 7] = "FeedbackModule";
    ModuleKey[ModuleKey["PopUpState"] = 8] = "PopUpState";
    ModuleKey[ModuleKey["SelectSnapShot"] = 9] = "SelectSnapShot";
    ModuleKey[ModuleKey["CheckBox"] = 10] = "CheckBox";
    ModuleKey[ModuleKey["AccordionTypical"] = 11] = "AccordionTypical";
    ModuleKey[ModuleKey["Number"] = 12] = "Number";
    ModuleKey[ModuleKey["AccordionDebugging"] = 13] = "AccordionDebugging";
})(ModuleKey || (ModuleKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SettingFlavor.js
var SettingFlavor;
(function (SettingFlavor) {
    SettingFlavor[SettingFlavor["unknown"] = 0] = "unknown";
    SettingFlavor[SettingFlavor["PopUp"] = 1] = "PopUp";
    SettingFlavor[SettingFlavor["ContentAndPopUpStoredInPopUp"] = 2] = "ContentAndPopUpStoredInPopUp";
    SettingFlavor[SettingFlavor["ContentAndPopUpStoredInEach"] = 3] = "ContentAndPopUpStoredInEach";
    SettingFlavor[SettingFlavor["ContentOnly"] = 4] = "ContentOnly";
})(SettingFlavor || (SettingFlavor = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SettingType.js
var SettingType;
(function (SettingType) {
    SettingType[SettingType["Unknown"] = 0] = "Unknown";
    SettingType[SettingType["BoolCheckBox"] = 1] = "BoolCheckBox";
    SettingType[SettingType["AccordionTypical"] = 2] = "AccordionTypical";
    SettingType[SettingType["AccordionDebugging"] = 3] = "AccordionDebugging";
    SettingType[SettingType["Number"] = 4] = "Number";
})(SettingType || (SettingType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/UiPresence.js
var UiPresence;
(function (UiPresence) {
    UiPresence[UiPresence["Unknown"] = 0] = "Unknown";
    UiPresence[UiPresence["HasUi"] = 1] = "HasUi";
    UiPresence[UiPresence["HasNoUi"] = 2] = "HasNoUi";
})(UiPresence || (UiPresence = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/HindSiteSetting.js
class HindSiteSetting {
    constructor(settingKey, dataType, uiContainerSelector, defaultValue, settingFlavor, friendly, enableState, hasUi, moduleType) {
        this.SettingKey = settingKey;
        this.DataType = dataType;
        this.ValueAsObj = defaultValue;
        this.UiContainerSelector = uiContainerSelector;
        this.DefaultValue = defaultValue;
        this.SettingFlavor = settingFlavor;
        this.FriendlySetting = friendly;
        this.HasUi = hasUi;
        this.EnabledState = enableState;
        this.ModuleType = moduleType;
    }
    ValueAsInt() {
        var toReturn = Number.MIN_SAFE_INTEGER;
        if (this.ValueAsObj !== undefined && this.ValueAsObj !== null) {
            toReturn = parseInt(this.ValueAsObj.toString());
        }
        return toReturn;
    }
    ValueAsBool() {
        let toReturn = this.DefaultValue;
        if (this.ValueAsObj !== undefined && this.ValueAsObj !== null) {
            toReturn = this.ValueAsObj;
        }
        else {
            toReturn = this.DefaultValue;
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/HindSiteSettingForNumbers.js

class HindSiteSettingForNumbers_HindSiteSettingForNumbers extends HindSiteSetting {
    constructor(settingKey, dataType, uiContainerSelector, defaultValue, settingFlavor, friendly, enableState, hasUi, moduleType, min, max) {
        super(settingKey, dataType, uiContainerSelector, defaultValue, settingFlavor, friendly, enableState, hasUi, moduleType);
        this.Min = min;
        this.Max = max;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/HindSiteSettingWrapper.js

class HindSiteSettingWrapper_HindSiteSettingWrapper extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, hindSiteSetting) {
        super(hindeCore);
        this.HindSiteSetting = hindSiteSetting;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/DefaultSettings.js













class DefaultSettings_DefaultSettings extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
    }
    GetDefaultSettingsWrapper() {
        let rawData = [
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LastUsedLogToStorageKey, SettingType.Number, null, SharedConst.Const.Settings.Defaults.EnableDebugging, SettingFlavor.ContentAndPopUpStoredInEach, 'Rolling Prefix key for log to storage', UiEnableState.Enabled, UiPresence.HasNoUi, ModuleKey.Unknown),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.EnableDebugging, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.ModuleContainers.SettingEnableDebugging, SharedConst.Const.Settings.Defaults.EnableDebugging, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Enable Debugging', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.UseCompactCss, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.ModuleContainers.SettingUseCompactCss, SharedConst.Const.Settings.Defaults.UseCompactCss, SettingFlavor.ContentOnly, 'Use Compact CSS', UiEnableState.Disabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.AutoSnapshotBeforeWindowChange, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.AutoSnapshotBeforeWindowChange, PopConst.Const.Storage.Defaults.bool.AutoSnapshotBeforeWindowChange, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Save Snapshot on HindSite Window Change', UiEnableState.Disabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.AutoLogin, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.iCBoxdSettingsAutoLogin, PopConst.Const.Storage.Defaults.bool.AutoLogin, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Login', UiEnableState.Disabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndPopUpLog, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndPopUpLog, PopConst.Const.Settings.Defaults.LgndPopUpLog, SettingFlavor.PopUp, 'Debugging - Pop Up Log', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndForeSite, SettingType.AccordionTypical, PopConst.Const.Selector.HS.ModuleContainers.LgndForeSite, PopConst.Const.Settings.Defaults.LgndForeSite, SettingFlavor.PopUp, 'Fore&bull;Site', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionTypical),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndHindSite, SettingType.AccordionTypical, PopConst.Const.Selector.HS.ModuleContainers.LgndHindSite, PopConst.Const.Settings.Defaults.LgndHindSite, SettingFlavor.PopUp, 'Hind&bull;Site', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionTypical),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndSettings, SettingType.AccordionTypical, PopConst.Const.Selector.HS.ModuleContainers.LgndSettings, PopConst.Const.Settings.Defaults.LgndSettings, SettingFlavor.PopUp, 'Settings', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionTypical),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndMessages, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndMessages, PopConst.Const.Settings.Defaults.LgndMessages, SettingFlavor.PopUp, 'Debugging - Messages', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndPopUpState, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndPopUpState, PopConst.Const.Settings.Defaults.LgndPopUpState, SettingFlavor.PopUp, 'Debugging - State of Pop-Up', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndPopUpDebug, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndPopUpDebug, PopConst.Const.Settings.Defaults.LgndPopUpState, SettingFlavor.PopUp, 'Debugging', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndContentState, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndContentState, PopConst.Const.Settings.Defaults.LgndContentState, SettingFlavor.PopUp, 'Debugging - Content State', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndBrowserState, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndBrowserState, PopConst.Const.Settings.Defaults.LgndBrowserState, SettingFlavor.PopUp, 'Debugging - Browser State', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSettingForNumbers_HindSiteSettingForNumbers(_3xxx_SettingKey_SettingKey.MaxAutoSaveCount, SettingType.Number, PopConst.Const.Selector.HS.SettingAutoSaveMaxCount, PopConst.Const.Numbers.MaxAutoSaveCount, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Save Max Count', UiEnableState.Disabled, UiPresence.HasUi, ModuleKey.Number, 1, 100),
            new HindSiteSettingForNumbers_HindSiteSettingForNumbers(_3xxx_SettingKey_SettingKey.AutoSaveIntervalMin, SettingType.Number, PopConst.Const.Selector.HS.SettingAutoSaveInterval, PopConst.Const.Numbers.AutoSaveIntervalMin, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Save Interval (Min) - 0 to disable', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.Number, 0, 100),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.DebugKeepDialogOpen, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.ModuleContainers.SettingDebugKeepDialogOpen, PopConst.Const.Settings.Defaults.DebugKeepDialogOpen, SettingFlavor.PopUp, 'Keep Dialog Open', UiEnableState.Disabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.AutoRestoreState, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.ModuleContainers.SettingAutoRestoreState, PopConst.Const.Settings.Defaults.AutoRestoreState, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto-Restore State', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSettingForNumbers_HindSiteSettingForNumbers(_3xxx_SettingKey_SettingKey.AutoSaveRetainDays, SettingType.Number, PopConst.Const.Selector.HS.SettingAutoSaveSnapshotRetainDays, ContentConst.Const.DefaultMaxAutoSaveAgeDays, SettingFlavor.ContentOnly, 'Days to Retain Auto Snap Shots', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.Number, 0, 100),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.AutoRenameCeButton, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.SettingAutoRenameCeTabButton, ContentConst.Const.DefaultAutoRenameCeTabButton, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto rename Content Editor tab button to match active node', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.CheckBox),
        ];
        let toReturn = [];
        rawData.forEach((settingValue) => {
            toReturn.push(new HindSiteSettingWrapper_HindSiteSettingWrapper(this.HindeCore, settingValue));
        });
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/HindSiteSettingsBucket.js



class HindSiteSettingsBucket_HindSiteSettingsBucket extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
        this.SettingWrappers = [];
        this.SettingWrappers = (new DefaultSettings_DefaultSettings(this.HindeCore)).GetDefaultSettingsWrapper();
    }
    GetByKey(needleSettingKey) {
        var toReturn = null;
        for (var idx = 0; idx < this.SettingWrappers.length; idx++) {
            let candidate = this.SettingWrappers[idx];
            if (candidate.HindSiteSetting.SettingKey === needleSettingKey) {
                toReturn = candidate;
                break;
            }
        }
        if (!toReturn) {
            this.ErrorHand.ErrorAndContinue(this.GetByKey.name, 'Setting not found ' + StaticHelpers_StaticHelpers.SettingKeyAsString(needleSettingKey));
        }
        return toReturn;
    }
    GetSettingsByFlavor(targetFlavors) {
        let toReturn = [];
        for (var idx = 0; idx < this.SettingWrappers.length; idx++) {
            let candidate = this.SettingWrappers[idx];
            if (targetFlavors.indexOf(candidate.HindSiteSetting.SettingFlavor) > -1) {
                toReturn.push(candidate);
            }
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/SettingsAgent.js






class SettingsAgent_SettingsAgent extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, repoAgent) {
        super(hindeCore);
        this.RepoAgent = repoAgent;
        this.HindSiteSettingsBucket = new HindSiteSettingsBucket_HindSiteSettingsBucket(this.HindeCore);
    }
    GetSettingsByFlavor(arg0) {
        return this.HindSiteSettingsBucket.GetSettingsByFlavor(arg0);
    }
    GetByKey(settingKey) {
        let toReturn = null;
        let settingsWrapper = this.HindSiteSettingsBucket.GetByKey(settingKey);
        if (settingsWrapper) {
            toReturn = settingsWrapper.HindSiteSetting;
        }
        return toReturn;
    }
    Init_SettingsAgent() {
        this.Logger.FuncStart(this.Init_SettingsAgent.name);
        let settingsFromStorage = this.ReadGenericSettingsFromStorage();
        this.UpdateSettingValuesFromStorage(settingsFromStorage);
        this.Logger.FuncEnd(this.Init_SettingsAgent.name);
    }
    WireEvents() {
        this.UiElementChangeEvent_Observer = new UiModuleManagerPassThroughEvent_Observer_UiModuleManagerPassThroughEvent_Observer(this.HindeCore, this.OnUiModuleManagerPassThroughEvent);
    }
    OnUiModuleManagerPassThroughEvent(payload) {
        alert('pass through');
    }
    UpdateSettingsFromPopUpMsg(newSettings) {
        this.Logger.FuncStart(this.UpdateSettingsFromPopUpMsg.name);
        if (newSettings) {
            for (var idx = 0; idx < newSettings.length; idx++) {
                let oneSetting = newSettings[idx];
                this.SetByKey(oneSetting.SettingKey, oneSetting.ValueAsObj);
            }
        }
        this.Logger.FuncEnd(this.UpdateSettingsFromPopUpMsg.name);
    }
    ReadGenericSettingsFromStorage() {
        this.Logger.FuncStart(this.ReadGenericSettingsFromStorage.name);
        let toReturn = [];
        let storedValue = this.RepoAgent.ReadDataOfKey(PopConst.Const.Storage.KeyGenericSettings);
        if (storedValue) {
            toReturn = JSON.parse(storedValue.toString());
        }
        else {
            toReturn = [];
        }
        this.Logger.FuncEnd(this.ReadGenericSettingsFromStorage.name);
        return toReturn;
    }
    UpdateSettingValuesFromStorage(settingsFromStorage) {
        this.Logger.FuncStart(this.UpdateSettingValuesFromStorage.name);
        try {
            for (var idx = 0; idx < settingsFromStorage.length; idx++) {
                let storageSetting = settingsFromStorage[idx];
                let settingWrapper = this.HindSiteSettingsBucket.GetByKey(storageSetting.SettingKey);
                if (settingWrapper) {
                    let matchingSetting = settingWrapper.HindSiteSetting;
                    if (matchingSetting) {
                        matchingSetting.ValueAsObj = storageSetting.ValueAsObj;
                    }
                    else {
                        this.ErrorHand.ErrorAndContinue(this.UpdateSettingValuesFromStorage.name, 'matching setting not found ' + StaticHelpers_StaticHelpers.SettingKeyAsString(storageSetting.SettingKey));
                    }
                }
                else {
                    this.ErrorHand.ErrorAndThrow(this.UpdateSettingValuesFromStorage.name, 'null matching setting');
                }
            }
        }
        catch (err) {
            this.ErrorHand.ErrorAndContinue(this.UpdateSettingValuesFromStorage.name, err);
        }
        this.Logger.FuncEnd(this.UpdateSettingValuesFromStorage.name);
    }
    BooleanSettingChanged(settingKey, valueAsBool) {
        this.Logger.LogVal(this.BooleanSettingChanged.name, _3xxx_SettingKey_SettingKey[settingKey]);
        this.SetByKey(settingKey, valueAsBool);
    }
    NumberSettingChanged(SettingKey, valueAsNumber) {
        this.Logger.Log(StaticHelpers_StaticHelpers.SettingKeyAsString(SettingKey));
        this.Logger.LogVal('valueAsNumber', valueAsNumber.toString());
        this.SetByKey(SettingKey, valueAsNumber);
    }
    SetByKey(settingKey, value) {
        let foundSetting = this.HindSiteSettingsBucket.GetByKey(settingKey);
        if (foundSetting) {
            foundSetting.HindSiteSetting.ValueAsObj = value;
            this.WriteAllSettingValuesToStorage();
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.SetByKey.name, 'setting match not found');
        }
    }
    WriteAllSettingValuesToStorage() {
        let settingValues = [];
        for (var udx = 0; udx < this.HindSiteSettingsBucket.SettingWrappers.length; udx++) {
            let hindSiteWrapper = this.HindSiteSettingsBucket.SettingWrappers[udx];
            if (hindSiteWrapper.HindSiteSetting.ValueAsObj !== null) {
                settingValues.push({
                    SettingKey: hindSiteWrapper.HindSiteSetting.SettingKey,
                    ValueAsObj: hindSiteWrapper.HindSiteSetting.ValueAsObj,
                    SettingKeyFriendly: StaticHelpers_StaticHelpers.SettingKeyAsString(hindSiteWrapper.HindSiteSetting.SettingKey)
                });
            }
        }
        this.RepoAgent.WriteByKey(PopConst.Const.Storage.KeyGenericSettings, JSON.stringify(settingValues));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/SingleClickEvent/SingleClickEvent_Observer.js

class SingleClickEvent_Observer_SingleClickEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, SingleClickEvent_Observer_SingleClickEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/SingleClickEvent/SingleClickEvent_Subject.js

class SingleClickEvent_Subject_SingleClickEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore, friendly) {
        super(hindeCore, friendly + ' ' + SingleClickEvent_Subject_SingleClickEvent_Subject.name);
        this.ShowLogActions = true;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/TaskListMutationEvent/TaskListMutationEvent_Observer.js

class TaskListMutationEvent_Observer_TaskListMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, TaskListMutationEvent_Observer_TaskListMutationEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/ToastAgent/ToastAgent.js
var ToastAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class ToastAgent_ToastAgent extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, targetDoc) {
        super(hindeCore);
        this.classSlideUp = 'slide-up';
        this.classSlideDown = 'slide-down';
        this.HasBeenInit = false;
        this.TargetDoc = targetDoc;
        this.DivineElements();
    }
    Instantiate() {
        this.TaskMutationEvent_Observer = new TaskListMutationEvent_Observer_TaskListMutationEvent_Observer(this.HindeCore, this.CallBackOnTaskListMutationEvent.bind(this));
        this.TaskMonitor.TaskMutationEvent_Subject.RegisterObserver(this.TaskMutationEvent_Observer);
    }
    CallBackOnTaskListMutationEvent(payload) {
        if (payload.MutationType === TaskMutationType.TasksHaveGoneIdle) {
            this.LiftToast('');
        }
        else {
            this.SetSliderDivText(payload.CompletedCount + ':' + payload.TotalTaskCount);
        }
    }
    LiftToast(message) {
        return ToastAgent_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.DropToast.name);
            this.SetSliderDivText(message);
            yield this.LowerToastA();
            this.Logger.FuncEnd(this.DropToast.name);
        });
    }
    DropToast(message) {
        return ToastAgent_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart(this.DropToast.name);
                this.SetSliderDivText(message);
                yield this.RaiseToastA();
                this.Logger.FuncEnd(this.DropToast.name);
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.DropToast.name, err);
            }
        });
    }
    DivineElements() {
        if (!this.HasBeenInit) {
            this.BodyTag = this.TargetDoc.getElementsByTagName('body')[0];
            this.ToastContainer = this.CreateToastContainer(this.TargetDoc);
            this.CreateSliderDiv();
            this.CreateCancelButton();
            this.FlagSlider.appendChild(this.ButtonElem);
            this.BodyTag.appendChild(this.ToastContainer);
        }
        this.HasBeenInit = true;
    }
    RaiseToastA() {
        return ToastAgent_awaiter(this, void 0, void 0, function* () {
            try {
                var self = this;
                yield setTimeout(function () {
                    return ToastAgent_awaiter(this, void 0, void 0, function* () {
                        self.ToastContainer.appendChild(self.FlagSlider);
                        self.FlagSlider.classList.remove(self.classSlideDown);
                        self.FlagSlider.classList.add(self.classSlideUp);
                    });
                }, 1000);
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.RaiseToastA.name, err);
            }
        });
    }
    LowerToastA() {
        return ToastAgent_awaiter(this, void 0, void 0, function* () {
            try {
                var self = this;
                yield setTimeout(function () {
                    return ToastAgent_awaiter(this, void 0, void 0, function* () {
                        self.FlagSlider.classList.remove(self.classSlideUp);
                        self.FlagSlider.classList.add(self.classSlideDown);
                    });
                }, 1000);
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.LowerToastA.name, err);
            }
        });
    }
    SetSliderDivText(sliderDivText) {
        if (this.FlagSlider) {
            this.FlagTextDiv.innerHTML = '<div class="header">HindSite</div><div class="message">' + sliderDivText + '</div>';
        }
    }
    TestCancelCallback() {
        this.TaskMonitor.RequestCancel();
    }
    CreateCancelButton() {
        this.ButtonElem = this.TargetDoc.createElement('input');
        this.ButtonElem.type = "button";
        this.ButtonElem.value = "Cancel";
        this.OnButtonClick_Subject = new SingleClickEvent_Subject_SingleClickEvent_Subject(this.HindeCore, this.CreateCancelButton.name);
        this.OnButtonClick_ObserverTest = new SingleClickEvent_Observer_SingleClickEvent_Observer(this.HindeCore, this.TestCancelCallback.bind(this));
        this.OnButtonClick_Subject.RegisterObserver(this.OnButtonClick_ObserverTest);
        this.ButtonElem.addEventListener('click', (() => {
            let payload = {
                HandlerData: null
            };
            this.OnButtonClick_Subject.NotifyObserversAsync(payload);
        }));
    }
    CreateSliderDiv() {
        this.FlagSlider = this.TargetDoc.createElement('div');
        this.FlagSlider.classList.add('slider');
        this.FlagSlider.classList.add(this.classSlideDown);
        this.FlagTextDiv = this.TargetDoc.createElement('div');
        this.FlagSlider.appendChild(this.FlagTextDiv);
    }
    CreateToastContainer(targetDoc) {
        let flagContainer = targetDoc.createElement('div');
        flagContainer.classList.add('toast');
        return flagContainer;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Drones/RollingLogIdDrone/RollingLogIdDrone.js


class RollingLogIdDrone_RollingLogIdDrone extends _HindeCoreBase_HindeCoreBase {
    constructor(settingsAgent, hindeCore) {
        super(hindeCore);
        this.maxKey = 5;
        this.minKey = 1;
        this.Logger.CTORStart(RollingLogIdDrone_RollingLogIdDrone.name);
        this.SettingsAgent = settingsAgent;
    }
    GetNextLogId() {
        let nextKeyInt = this.minKey;
        let nextKeyToReturn;
        var result = this.GetLastUsedLogId().ValueAsInt();
        nextKeyInt = result + 1;
        if (nextKeyInt > this.maxKey) {
            nextKeyInt = this.minKey;
        }
        this.SettingsAgent.SetByKey(_3xxx_SettingKey_SettingKey.LastUsedLogToStorageKey, nextKeyInt.toString());
        nextKeyToReturn = nextKeyInt.toString();
        return nextKeyToReturn;
    }
    GetLastUsedLogId() {
        var lastUsedLogIdSetting = this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.LastUsedLogToStorageKey);
        return lastUsedLogIdSetting;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/ContentApi/Recipes/RecipeAutoSaveState.js
var RecipeAutoSaveState_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class RecipeAutoSaveState_RecipeAutoSaveState extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, scUiProxy, atticAgent) {
        super(hindeCore);
        this.ScUiProxy = scUiProxy;
        this.AtticAgent = atticAgent;
    }
    ExecuteAsync(windowStatePrior) {
        return RecipeAutoSaveState_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeAutoSaveState_awaiter(this, void 0, void 0, function* () {
                this.ScUiProxy.GetStateOfScUiProxyWindow(SnapShotFlavor.Autosave)
                    .then((windowStateNew) => {
                    let hasCorrectData = windowStateNew && windowStateNew.Meta && windowStateNew.Meta.Hash
                        && windowStatePrior && windowStatePrior.Meta && windowStatePrior.Meta.Hash;
                    if (!hasCorrectData || (windowStateNew.Meta.Hash !== windowStatePrior.Meta.Hash)) {
                        this.Logger.Log('states are different, save snap shot');
                        this.AtticAgent.WriteStateOfSitecoreToStorage(windowStateNew);
                    }
                    else {
                        this.Logger.Log('states are same, no save');
                    }
                    resolve(windowStateNew);
                })
                    .catch((err) => reject(err));
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Agents/AutoSnapShotAgent.js
var AutoSnapShotAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class AutoSnapShotAgent_AutoSnapShotAgent extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, settingsAgent, atticAgent, scUiProxy) {
        super(hindeCore);
        this.AutoSaveHasBeenScheduled = false;
        this.LastKnownSavedState = null;
        this.SettingsAgent = settingsAgent;
        this.AtticAgent = atticAgent;
        this.ScUiProxy = scUiProxy;
    }
    AutoSaveSnapShot() {
        return AutoSnapShotAgent_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.AutoSaveSnapShot.name);
            if (!this.RecipeAutoSaveState) {
                this.RecipeAutoSaveState = new RecipeAutoSaveState_RecipeAutoSaveState(this.HindeCore, this.ScUiProxy, this.AtticAgent);
            }
            this.RecipeAutoSaveState.ExecuteAsync(this.LastKnownSavedState)
                .then((result) => this.LastKnownSavedState = result);
            this.Logger.FuncEnd(this.AutoSaveSnapShot.name);
        });
    }
    ScheduleIntervalTasks() {
        this.Logger.FuncStart(this.ScheduleIntervalTasks.name);
        this.Logger.LogVal('Has been scheduled: ', this.AutoSaveHasBeenScheduled);
        let autoSaveSetting = this.SettingsAgent.HindSiteSettingsBucket.GetByKey(_3xxx_SettingKey_SettingKey.AutoSaveIntervalMin);
        this.Logger.LogVal('autoSaveSetting: ', autoSaveSetting.HindSiteSetting.ValueAsInt());
        if (autoSaveSetting.HindSiteSetting.ValueAsInt() > 0) {
            if (!this.AutoSaveHasBeenScheduled) {
                var self = this;
                var intervalMs = StaticHelpers_StaticHelpers.MinToMs(autoSaveSetting.HindSiteSetting.ValueAsInt());
                window.setInterval(() => {
                    self.AutoSaveSnapShot();
                }, intervalMs / SharedConst.Const.Debug.SpeedUpAutoSaveIntervalFactor);
                this.AutoSaveHasBeenScheduled = true;
            }
        }
        this.Logger.FuncEnd(this.ScheduleIntervalTasks.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfSnapshots.js
class DefaultStateOfStorageSnapshots {
    constructor() {
        this.CreationDate = new Date(1970);
        this.SnapShots = [];
        this.FavoriteCount = 0;
        this.PlainCount = 0;
        this.SnapShotsAutoCount = 0;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Agents/ContentAtticAgent.js
var ContentAtticAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class ContentAtticAgent_ContentAtticAgent extends _HindeCoreBase_HindeCoreBase {
    constructor(repoAgent, hindeCore) {
        super(hindeCore);
        this.Logger.FuncStart(ContentAtticAgent_ContentAtticAgent.name);
        this.RepoAgent = repoAgent;
        this.Logger.FuncEnd(ContentAtticAgent_ContentAtticAgent.name);
    }
    InitContentAtticManager(settingAutoSnapshotRetainDays) {
        this.SettingAutoSnapshotRetainDays = settingAutoSnapshotRetainDays;
    }
    WriteStateOfSitecoreToStorage(stateOfSitecoreWindow) {
        return ContentAtticAgent_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentAtticAgent_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WriteStateOfSitecoreToStorage.name);
                let storageKey = ContentConst.Const.Storage.WindowRoot + ContentConst.Const.Storage.SnapShotPrefix + stateOfSitecoreWindow.Meta.SessionId + '.' + stateOfSitecoreWindow.Meta.TimeStamp.valueOf();
                stateOfSitecoreWindow.Meta.StorageKey = storageKey;
                var snapShotAsString = JSON.stringify(stateOfSitecoreWindow);
                this.RepoAgent.WriteByKey(stateOfSitecoreWindow.Meta.StorageKey, snapShotAsString);
                this.CleanOutOldAutoSavedData();
                resolve();
                this.Logger.FuncEnd(this.WriteStateOfSitecoreToStorage.name);
            }));
        });
    }
    GetFromStorageBySnapShotId(needleId) {
        this.Logger.FuncStart(this.GetFromStorageBySnapShotId.name, needleId.Raw);
        var DateOneWinStoreMatch = null;
        let foundStorage = this.GetStateOfStorageSnapShots();
        for (var idx = 0; idx < foundStorage.SnapShots.length; idx++) {
            var candidate = foundStorage.SnapShots[idx];
            if (candidate.Meta.SnapshotId.Raw === needleId.Raw) {
                DateOneWinStoreMatch = candidate;
                break;
            }
        }
        if (!DateOneWinStoreMatch) {
            this.ErrorHand.WarningAndContinue(this.GetFromStorageBySnapShotId.name, 'No match found for: ' + needleId.Raw);
        }
        this.Logger.FuncEnd(this.GetFromStorageBySnapShotId.name);
        return DateOneWinStoreMatch;
    }
    ValidateStorageData(oneRaw) {
        var candidate = JSON.parse(oneRaw.data);
        if (candidate) {
            if (!candidate.Meta) {
                candidate.Meta = new DefaultMetaData_DefaultMetaData();
            }
            candidate.Meta.TimeStamp = new Date(candidate.Meta.TimeStamp);
            if (!candidate.Meta.WindowType) {
                candidate.Meta.WindowType = ScWindowType.Unknown;
                candidate.Friendly.WindowType = ScWindowType[candidate.Meta.WindowType];
            }
            if (!candidate.Friendly) {
                candidate.Friendly = new DefaultFriendly_DefaultFriendly();
            }
            if (!candidate.Friendly.NickName) {
                candidate.Friendly.NickName = '';
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.ValidateStorageData.name, 'Saved data did not import correctly');
        }
        return candidate;
    }
    GetAllLocalStorageAsIOneStorageData() {
        let prefix = ContentConst.Const.Storage.WindowRoot + ContentConst.Const.Storage.SnapShotPrefix;
        let result = this.RepoAgent.GetBulkLocalStorageByKeyPrefix(prefix);
        return result;
    }
    GetAllStorage() {
        var toReturn = [];
        let rawStorageData = this.GetAllLocalStorageAsIOneStorageData();
        if (rawStorageData) {
            for (var idx = 0; idx < rawStorageData.length; idx++) {
                toReturn.push(this.ValidateStorageData(rawStorageData[idx]));
            }
        }
        toReturn.sort((a, b) => +b.Meta.TimeStamp - +a.Meta.TimeStamp);
        toReturn = this.FilterOutOldData(toReturn);
        return toReturn;
    }
    CleanOneStorageItem(candidate, autoCount) {
        var maxAutoSaveDiff = this.SettingAutoSnapshotRetainDays * 24 * 60 * 60 * 1000;
        var deleteFlag = false;
        var now = new Date();
        if (candidate.Meta.Flavor == SnapShotFlavor.Autosave) {
            if (autoCount > ContentConst.Const.MaxAutoToSaveCount) {
                this.Logger.LogVal('Delete (max count :' + ContentConst.Const.MaxAutoToSaveCount + ')', candidate.Meta.TimeStamp.toString());
                deleteFlag = true;
            }
            autoCount++;
        }
        if (now.getTime() - candidate.Meta.TimeStamp.getTime() > maxAutoSaveDiff) {
            this.Logger.LogVal('Delete (Old : max' + ContentConst.Const.DefaultMaxAutoSaveAgeDays + ' days)', candidate.Meta.TimeStamp.toString());
            deleteFlag = true;
        }
        if (deleteFlag) {
            try {
                this.Logger.LogVal('Cleaning old autosave', candidate.Meta.SnapshotId);
                window.localStorage.removeItem(candidate.Meta.StorageKey);
            }
            catch (e) {
                this.ErrorHand.ErrorAndThrow(this.CleanOutOldAutoSavedData.name, 'unable to delete key: ' + candidate.Meta.SnapshotId);
            }
        }
        return autoCount;
    }
    CleanFoundStorage(currentWindowStorage) {
        try {
            if (currentWindowStorage) {
                var cacheLength = currentWindowStorage.SnapShots.length;
                var autoCount = 0;
                for (var idx = 0; idx < cacheLength; idx++) {
                    var candidate = currentWindowStorage.SnapShots[idx];
                    autoCount = this.CleanOneStorageItem(candidate, autoCount);
                }
            }
        }
        catch (err) {
            throw (this.CleanFoundStorage.name, err);
        }
    }
    CleanOutOldAutoSavedData() {
        this.Logger.FuncStart(this.CleanOutOldAutoSavedData.name);
        try {
            if (!this.SettingAutoSnapshotRetainDays || this.SettingAutoSnapshotRetainDays < 1) {
                this.SettingAutoSnapshotRetainDays = ContentConst.Const.DefaultMaxAutoSaveAgeDays;
            }
            let currentWindowStorage = this.GetStateOfStorageSnapShots();
            this.CleanFoundStorage(currentWindowStorage);
        }
        catch (err) {
            throw (this.CleanOutOldAutoSavedData.name, err);
        }
        this.Logger.FuncEnd(this.CleanOutOldAutoSavedData.name);
    }
    GetStateOfStorageSnapShots() {
        this.Logger.FuncStart(this.GetStateOfStorageSnapShots.name);
        let stateOfSnapshotStorage = new DefaultStateOfStorageSnapshots();
        let result = this.GetAllStorage();
        stateOfSnapshotStorage.SnapShots = result;
        stateOfSnapshotStorage.CreationDate = new Date();
        this.UpdateCounts(stateOfSnapshotStorage);
        this.Logger.FuncEnd(this.GetStateOfStorageSnapShots.name);
        return stateOfSnapshotStorage;
    }
    UpdateCounts(storageAllSnapshots) {
        storageAllSnapshots.FavoriteCount = 0;
        storageAllSnapshots.SnapShotsAutoCount = 0;
        storageAllSnapshots.PlainCount = 0;
        for (var idx = 0; idx < storageAllSnapshots.SnapShots.length; idx++) {
            var candidate = storageAllSnapshots.SnapShots[idx];
            if (candidate.Meta.Flavor === SnapShotFlavor.Autosave) {
                storageAllSnapshots.SnapShotsAutoCount++;
            }
            else if (candidate.Meta.Flavor === SnapShotFlavor.Favorite) {
                storageAllSnapshots.FavoriteCount++;
            }
            else {
                storageAllSnapshots.PlainCount++;
            }
        }
    }
    FilterOutOldData(data) {
        var toReturn = data;
        return toReturn;
    }
    RemoveAndConfirmRemoval(storageMatch) {
        this.Logger.LogVal('Key to Delete', storageMatch.Meta.SnapshotId);
        let storageKey = storageMatch.Meta.StorageKey;
        this.RepoAgent.RemoveByKey(storageKey);
        let result = this.RepoAgent.ReadDataOfKey(storageKey);
        if (result) {
            this.ErrorHand.ErrorAndThrow(this.RemoveAndConfirmRemoval.name, 'Snapshot still exists after deleting');
        }
    }
    RemoveSnapshotFromStorageById(targetId) {
        this.Logger.FuncStart(this.RemoveSnapshotFromStorageById.name);
        try {
            if (targetId) {
                var storageMatch = this.GetFromStorageBySnapShotId(targetId);
                if (storageMatch) {
                    this.RemoveAndConfirmRemoval(storageMatch);
                }
                else {
                    this.ErrorHand.WarningAndContinue(this.RemoveSnapshotFromStorageById.name, 'no storage match');
                }
            }
            else {
                this.ErrorHand.WarningAndContinue(this.RemoveSnapshotFromStorageById.name, 'no target id');
            }
        }
        catch (err) {
            this.ErrorHand.ErrorAndThrow(this.RemoveSnapshotFromStorageById.name, err);
        }
        this.Logger.FuncEnd(this.RemoveSnapshotFromStorageById.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/ContentMessageManager.js

class ContentMessageManager_ContentMessageManager extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, contentMessageBroker) {
        super(hindeCore);
        this.Logger.FuncStart(ContentMessageManager_ContentMessageManager.name);
        this.ContentMessageBroker = contentMessageBroker;
        this.Logger.FuncEnd(ContentMessageManager_ContentMessageManager.name);
    }
    InitContentMessageManager() {
        this.Logger.FuncStart(this.InitContentMessageManager.name + ' ' + ContentMessageManager_ContentMessageManager.name);
        this.ContentMessageBroker.BeginListening();
        this.Logger.FuncEnd(this.InitContentMessageManager.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/CommandHandlerDataForContent/ApiCommandPayload.js
class ApiCommandPayload {
    constructor() {
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/CommandHandlerDataForContent/CommandPayloadForInternal.js

class CommandPayloadForInternal_CommandPayloadForInternal extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, atticAgent, toastAgent, scUiMan, settingsAgent, autoSnapShotAgent, apiPayload) {
        super(hindeCore);
        this.ContentMessageBroker = null;
        this.DesktopProxy = null;
        this.hindeCore = null;
        this.ScUiMan = null;
        this.TargetDoc = null;
        this.TargetNickName = '';
        this.ToastAgent = null;
        this.TopLevelDoc = null;
        this.AtticAgent = atticAgent;
        this.ToastAgent = toastAgent;
        this.ScUiMan = scUiMan;
        this.SettingsAgent = settingsAgent;
        this.AutoSnapShotAgent = autoSnapShotAgent;
        this.ApiPayload = apiPayload;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/CommandType.js
var CommandType;
(function (CommandType) {
    CommandType[CommandType["Unknown"] = 0] = "Unknown";
    CommandType[CommandType["PopUp"] = 1] = "PopUp";
    CommandType[CommandType["Content"] = 2] = "Content";
    CommandType[CommandType["Api"] = 3] = "Api";
    CommandType[CommandType["ContentInternal"] = 4] = "ContentInternal";
})(CommandType || (CommandType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Events/CommandStartEndCancelEvent/CommandStartEndCancelEvent_Observer.js

class CommandStartEndCancelEvent_Observer_CommandStartEndCancelEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, CommandStartEndCancelEvent_Observer_CommandStartEndCancelEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Events/CommandStartEndCancelEvent/CommandStartEndCancelEvent_Subject.js

class CommandStartEndCancelEvent_Subject_CommandStartEndCancelEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore, friendly) {
        super(hindeCore, friendly + ' ' + CommandStartEndCancelEvent_Subject_CommandStartEndCancelEvent_Subject.name);
        this.ShowLogActions = true;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Events/CommandStartEndCancelEvent/ICommandStartEndCancelEvent_Payload.js
var CommandState_State;
(function (CommandState_State) {
    CommandState_State[CommandState_State["Unknwon"] = 0] = "Unknwon";
    CommandState_State[CommandState_State["CommandStarted"] = 1] = "CommandStarted";
    CommandState_State[CommandState_State["CommandCompletedSuccessfully"] = 2] = "CommandCompletedSuccessfully";
    CommandState_State[CommandState_State["CommandCompletedWithError"] = 3] = "CommandCompletedWithError";
    CommandState_State[CommandState_State["CommandCanceled"] = 4] = "CommandCanceled";
})(CommandState_State || (CommandState_State = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/CommandToExecuteData.js

class CommandToExecuteData_CommandToExecuteData extends _HindeCoreBase_HindeCoreBase {
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Recipes/_ContentRecipeBase.js


class _ContentRecipeBase_ContentRecipeBase extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, commandParams, dependancies, friendly) {
        super(hindeCore);
        if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(commandParams)) {
            this.Friendly = friendly;
            this.CommandParams = commandParams;
            this.Dependancies = dependancies;
        }
        else {
            this.ErrorHand.ErrorAndThrow(_ContentRecipeBase_ContentRecipeBase.name, 'null check: ' + this.Friendly);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Recipes/RecipeChangeNickName.js
var RecipeChangeNickName_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class RecipeChangeNickName_RecipeChangeNickName extends _ContentRecipeBase_ContentRecipeBase {
    constructor(hindeCore, commandParams, dependancies) {
        super(hindeCore, commandParams, dependancies, RecipeChangeNickName_RecipeChangeNickName.name);
        if (StaticHelpers_StaticHelpers.IsNullOrUndefined([this.CommandParams.NewNickname, this.CommandParams.TargetSnapShotId, this.Dependancies.AtticAgent])) {
            this.ErrorHand.ErrorAndThrow(RecipeChangeNickName_RecipeChangeNickName.name, 'Null check');
        }
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeChangeNickName_awaiter(this, void 0, void 0, function* () {
            this.UpdateNickname()
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    UpdateNickname() {
        return new Promise((resolve, reject) => RecipeChangeNickName_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.UpdateNickname.name);
            if (this.CommandParams.TargetSnapShotId) {
                if (this.CommandParams.NewNickname) {
                    var storageMatch;
                    storageMatch = this.Dependancies.AtticAgent.GetFromStorageBySnapShotId(this.CommandParams.TargetSnapShotId);
                    if (storageMatch) {
                        if ((storageMatch.Meta.Flavor === SnapShotFlavor.Autosave
                            ||
                                (storageMatch.Meta.Flavor === SnapShotFlavor.Unknown))) {
                            storageMatch.Meta.Flavor = SnapShotFlavor.Manual;
                        }
                        storageMatch.Friendly.NickName = this.CommandParams.NewNickname;
                    }
                    else {
                        reject(this.UpdateNickname.name + ' - No storage match');
                    }
                    this.Dependancies.AtticAgent.WriteStateOfSitecoreToStorage(storageMatch);
                    resolve();
                }
                else {
                    reject(this.UpdateNickname.name + ' - something was missing');
                }
            }
            else {
                reject(this.UpdateNickname.name + ' no payload or id');
            }
            this.Logger.FuncEnd(this.UpdateNickname.name);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Recipes/RecipeForceAutoSnapShot.js
var RecipeForceAutoSnapShot_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class RecipeForceAutoSnapShot_RecipeForceAutoSnapShot extends _ContentRecipeBase_ContentRecipeBase {
    constructor(hindeCore, commandParams, dependancies) {
        super(hindeCore, commandParams, dependancies, RecipeForceAutoSnapShot_RecipeForceAutoSnapShot.name);
    }
    Execute() {
        return RecipeForceAutoSnapShot_awaiter(this, void 0, void 0, function* () {
            try {
                this.Dependancies.AutoSnapShotAgent.AutoSaveSnapShot();
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.Execute.name, err);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Recipes/RecipeInitFromQueryStr.js
var RecipeInitFromQueryStr_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class RecipeInitFromQueryStr_RecipeSetStateFromMostRecent extends _ContentRecipeBase_ContentRecipeBase {
    constructor(hindeCore, commandData, dependancies) {
        super(hindeCore, commandData, dependancies, RecipeInitFromQueryStr_RecipeInitFromQueryStr.name);
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeInitFromQueryStr_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(RecipeInitFromQueryStr_RecipeSetStateFromMostRecent.name);
            let dataStorage = this.Dependancies.AtticAgent.GetStateOfStorageSnapShots();
            if (dataStorage) {
                let mostRecentDate = new Date(1970, 1, 1);
                let mostRecent = null;
                dataStorage.SnapShots.forEach((snapShot) => {
                    if (snapShot.Meta.TimeStamp > mostRecentDate) {
                        mostRecentDate = snapShot.Meta.TimeStamp;
                        mostRecent = snapShot;
                    }
                });
                yield this.Dependancies.ScUiProxy.SetStateOfSitecoreWindowAsync(this.CommandParams.ApiPayload, mostRecent)
                    .then(() => resolve())
                    .catch((err) => reject(RecipeInitFromQueryStr_RecipeSetStateFromMostRecent.name + ' | ' + err));
            }
            this.Logger.FuncEnd(RecipeInitFromQueryStr_RecipeSetStateFromMostRecent.name);
        }));
    }
}
class RecipeInitFromQueryStr_RecipeInitFromQueryStr extends _ContentRecipeBase_ContentRecipeBase {
    constructor(hindeCore, commandData, dependancies) {
        super(hindeCore, commandData, dependancies, RecipeInitFromQueryStr_RecipeInitFromQueryStr.name);
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeInitFromQueryStr_awaiter(this, void 0, void 0, function* () {
            yield this.PvtInitFromQueryString()
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    PvtInitFromQueryString() {
        return RecipeInitFromQueryStr_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeInitFromQueryStr_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.PvtInitFromQueryString.name);
                if (this.Dependancies.DocumentJacket.UrlJacket.QueryStringHasKey(QueryStrKey.hsTargetSs)) {
                    let qsValue = (this.Dependancies.DocumentJacket.UrlJacket.GetQueryStringValueByKey(QueryStrKey.hsTargetSs));
                    if (Guid_Guid.IsValidGuidStr(qsValue)) {
                        let targetGuid = Guid_Guid.ParseGuid(qsValue, false);
                        if (targetGuid && targetGuid !== Guid_Guid.GetEmptyGuid()) {
                            this.Logger.LogVal("targetGuid", targetGuid.Raw);
                            var dataOneWindowStorage;
                            dataOneWindowStorage = this.Dependancies.AtticAgent.GetFromStorageBySnapShotId(targetGuid);
                            this.Dependancies.ScUiProxy.SetStateOfSitecoreWindowAsync(this.CommandParams.ApiPayload, dataOneWindowStorage);
                        }
                        else {
                            reject('Either no snapshot provided or an illegal one was found');
                        }
                    }
                    else {
                        this.Logger.Log('guid is not a valid guid');
                    }
                }
                else {
                    this.Logger.Log('Does not have qs target');
                    resolve();
                }
                this.Logger.FuncEnd(this.PvtInitFromQueryString.name);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Recipes/RecipeRemoveItemFromStorage.js
var RecipeRemoveItemFromStorage_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class RecipeRemoveItemFromStorage_RecipeRemoveItemFromStorage extends _ContentRecipeBase_ContentRecipeBase {
    constructor(hindeCore, commandData, dependancies) {
        super(hindeCore, commandData, dependancies, RecipeRemoveItemFromStorage_RecipeRemoveItemFromStorage.name);
    }
    Execute() {
        return RecipeRemoveItemFromStorage_awaiter(this, void 0, void 0, function* () {
            try {
                this.Dependancies.AtticAgent.RemoveSnapshotFromStorageById(this.CommandParams.TargetSnapShotId);
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.Execute.name, err);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Recipes/RecipeSaveState.js
var RecipeSaveState_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class RecipeSaveState_RecipeSaveStateManual extends _ContentRecipeBase_ContentRecipeBase {
    constructor(hindeCore, commandData, dependancies) {
        super(hindeCore, commandData, dependancies, RecipeSaveState_RecipeSaveStateManual.name);
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeSaveState_awaiter(this, void 0, void 0, function* () {
            yield this.Dependancies.ScUiProxy.GetStateOfScUiProxyWindow(SnapShotFlavor.Manual)
                .then((windowState) => {
                this.Dependancies.AtticAgent.WriteStateOfSitecoreToStorage(windowState);
            })
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Recipes/RecipeToggleFavorite.js
var RecipeToggleFavorite_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class RecipeToggleFavorite_RecipeToggleFavorite extends _ContentRecipeBase_ContentRecipeBase {
    constructor(hindeCore, commandData, dependancies) {
        super(hindeCore, commandData, dependancies, RecipeToggleFavorite_RecipeToggleFavorite.name);
    }
    Execute() {
        return new Promise((resolve, reject) => RecipeToggleFavorite_awaiter(this, void 0, void 0, function* () {
            if (this.CommandParams.TargetSnapShotId) {
                let result = this.Dependancies.AtticAgent.GetFromStorageBySnapShotId(this.CommandParams.TargetSnapShotId);
                if (result.Meta.Flavor === SnapShotFlavor.Favorite) {
                    result.Meta.Flavor = SnapShotFlavor.Manual;
                }
                else {
                    result.Meta.Flavor = SnapShotFlavor.Favorite;
                }
                this.Dependancies.AtticAgent.WriteStateOfSitecoreToStorage(result);
                resolve();
            }
            else {
                reject('no targetId');
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/InternalCommandRunner.js
var InternalCommandRunner_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class InternalCommandRunner_InternalCommandRunner extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, atticAgent, autoSnapShotAgent, scUiProxy, documentJacket) {
        super(hindeCore);
        this.Dependancies = {
            AtticAgent: atticAgent,
            AutoSnapShotAgent: autoSnapShotAgent,
            ScUiProxy: scUiProxy,
            HindeCore: this.HindeCore,
            DocumentJacket: documentJacket
        };
    }
    SetNickName(commandParams) {
        return InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
                let recipe = new RecipeChangeNickName_RecipeChangeNickName(this.HindeCore, commandParams, this.Dependancies);
                recipe.Execute()
                    .then(() => resolve())
                    .catch((err) => reject(this.DebugForceAutoSnapShot.name + ' | ' + err));
            }));
        });
    }
    Ping() {
        return new Promise((resolve, reject) => InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
            resolve(MsgFlag.RespListeningAndReady);
        }));
    }
    DebugForceAutoSnapShot(commandParams) {
        return InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
                let recipe = new RecipeForceAutoSnapShot_RecipeForceAutoSnapShot(this.HindeCore, commandParams, this.Dependancies);
                recipe.Execute()
                    .then(() => resolve())
                    .catch((err) => reject(this.DebugForceAutoSnapShot.name + ' | ' + err));
            }));
        });
    }
    SaveWindowState(commandParams) {
        return InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
                let recipe = new RecipeSaveState_RecipeSaveStateManual(this.HindeCore, commandParams, this.Dependancies);
                yield recipe.Execute()
                    .then(resolve)
                    .catch((err) => reject(err));
            }));
        });
    }
    ToggleFavorite(commandParams) {
        return new Promise((resolve, reject) => InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
            yield new RecipeToggleFavorite_RecipeToggleFavorite(this.HindeCore, commandParams, this.Dependancies).Execute()
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    SetStateFromMostRecent(commandParams) {
        return InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart(this.SetStateFromMostRecent.name);
                let recipe = new RecipeInitFromQueryStr_RecipeSetStateFromMostRecent(this.HindeCore, commandParams, this.Dependancies);
                yield recipe.Execute();
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.SetStateFromQueryString.name, err);
            }
            this.Logger.FuncEnd(this.SetStateFromMostRecent.name);
        });
    }
    SetStateFromQueryString(commandParams) {
        return InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
            try {
                let recipe = new RecipeInitFromQueryStr_RecipeInitFromQueryStr(this.HindeCore, commandParams, this.Dependancies);
                recipe.Execute();
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.SetStateFromQueryString.name, err);
            }
        });
    }
    RemoveSnapShot(commandParams) {
        return InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
                let recipe = new RecipeRemoveItemFromStorage_RecipeRemoveItemFromStorage(this.HindeCore, commandParams, this.Dependancies);
                yield recipe.Execute()
                    .then(resolve)
                    .catch((err) => reject(err));
            }));
        });
    }
    SetStateOfSitecoreWindow(commandParams, dependancies) {
        return new Promise((resolve, reject) => InternalCommandRunner_awaiter(this, void 0, void 0, function* () {
            dependancies.HindeCore.Logger.LogAsJsonPretty("IdOfSelect", commandParams.TargetSnapShotId);
            let dataOneWindowStorage = dependancies.AtticAgent.GetFromStorageBySnapShotId(commandParams.TargetSnapShotId);
            if (dataOneWindowStorage) {
                dependancies.ScUiProxy.SetStateOfSitecoreWindowAsync(commandParams.ApiPayload, dataOneWindowStorage)
                    .then(() => resolve())
                    .catch((err) => reject(this.SetStateOfSitecoreWindow.name + ' | ' + err));
            }
            ;
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/CommandRouter.js
var CommandRouter_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};











class CommandRouter_CommandRouter extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, scUiProxy, toastAgent, scUiMan, atticAgent, settingsAgent, autoSnapShotAgent, documentJacket) {
        super(hindeCore);
        this.ToastAgent = toastAgent;
        this.ScUiMan = scUiMan;
        this.ScUiProxy = scUiProxy;
        this.AtticAgent = atticAgent;
        this.SettingsAgent = settingsAgent;
        this.AutoSnapShotAgent = autoSnapShotAgent;
        this.DocumentJacket = documentJacket;
        this.InternalCommandRunner = new InternalCommandRunner_InternalCommandRunner(this.HindeCore, this.AtticAgent, this.AutoSnapShotAgent, this.ScUiProxy, this.DocumentJacket);
        this.CommandTriggeredEvent_Subject = new CommandStartEndCancelEvent_Subject_CommandStartEndCancelEvent_Subject(this.HindeCore, CommandRouter_CommandRouter.name);
        this.CommandTriggeredEvent_Observer = new CommandStartEndCancelEvent_Observer_CommandStartEndCancelEvent_Observer(this.HindeCore, this.OnCommandStartEndCancelEvent.bind(this));
        this.CommandTriggeredEvent_Subject.RegisterObserver(this.CommandTriggeredEvent_Observer);
        this.Dependancies = {
            AtticAgent: this.AtticAgent,
            AutoSnapShotAgent: this.AutoSnapShotAgent,
            ScUiProxy: this.ScUiProxy,
            DocumentJacket: this.DocumentJacket,
            HindeCore: this.HindeCore
        };
    }
    OnCommandStartEndCancelEvent(payload) {
        return CommandRouter_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.OnCommandStartEndCancelEvent.name);
            if (payload.CommandState == CommandState_State.CommandStarted) {
                yield this.ToastAgent.DropToast('Starting to do something');
            }
            else if (payload.CommandState == CommandState_State.CommandCompletedSuccessfully) {
            }
            this.Logger.FuncEnd(this.OnCommandStartEndCancelEvent.name);
        });
    }
    ExecuteInternalCommand(commandToExecute, routingParams) {
        return new Promise((resolve, reject) => CommandRouter_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.ExecuteInternalCommand.name);
            if (commandToExecute) {
                this.Logger.LogVal('msgFlag', MsgFlag[routingParams.MsgFlag]);
                let commandParams = this.BuildCommandPayloadForInternal();
                if (routingParams) {
                    commandParams.TargetSnapShotId = routingParams.SelectSnapShotId;
                    commandParams.NewNickname = routingParams.NewNickName;
                }
                let payload = {
                    CommandState: CommandState_State.CommandStarted
                };
                let self = this;
                this.CommandTriggeredEvent_Subject.NotifyObserversAsync(payload);
                yield commandToExecute.bind(self.InternalCommandRunner)(commandParams, this.Dependancies)
                    .then(() => this.Logger.MarkerC())
                    .then(() => {
                    let payloadComplete = {
                        CommandState: CommandState_State.CommandCompletedSuccessfully
                    };
                })
                    .then(() => this.Logger.MarkerD())
                    .then(() => resolve())
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.ExecuteInternalCommand.name, err));
            }
            this.Logger.FuncEnd(this.ExecuteInternalCommand.name);
        }));
    }
    BuildCommandPayloadForInternal() {
        let scProxyPayload = this.BuildScProxyPayload();
        let commandParams = new CommandPayloadForInternal_CommandPayloadForInternal(this.HindeCore, this.AtticAgent, this.ToastAgent, this.ScUiMan, this.SettingsAgent, this.AutoSnapShotAgent, scProxyPayload);
        return commandParams;
    }
    BuildScProxyPayload() {
        let commandData = new ApiCommandPayload();
        return commandData;
    }
    RouteCommand(routingParams) {
        return CommandRouter_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => CommandRouter_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.RouteCommand.name, MsgFlag[routingParams.MsgFlag]);
                let commandData = this.CalculateCommandToExec(routingParams.MsgFlag);
                if (commandData.CommandType == CommandType.Api) {
                    yield this.ExecuteApiCommand(commandData.commandToExecute, routingParams.MsgFlag)
                        .then(() => resolve())
                        .catch((err) => reject(err));
                }
                else if (commandData.CommandType = CommandType.ContentInternal) {
                    yield this.ExecuteInternalCommand(commandData.commandToExecute, routingParams)
                        .then(() => {
                        this.Logger.Log('Completed the internal command');
                        resolve();
                    })
                        .catch((err) => reject(err));
                }
                if (commandData) {
                }
                else {
                    this.ErrorHand.ErrorAndThrow(this.RouteCommand.name, 'did not find command');
                }
                this.Logger.FuncEnd(this.RouteCommand.name);
            }));
        });
    }
    ExecuteApiCommand(functionToExecute, msgFlag) {
        return new Promise((resolve, reject) => CommandRouter_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.ExecuteApiCommand.name);
            if (functionToExecute) {
                let commandData = this.BuildScProxyPayload();
                yield functionToExecute.bind(this)(commandData)
                    .then((response) => {
                    this.Logger.Log('Completed the API command');
                    resolve(response);
                })
                    .catch((err) => reject(err));
            }
            else {
                reject(this.ExecuteApiCommand.name + ' | no functionToExecute');
            }
            this.Logger.FuncEnd(this.ExecuteApiCommand.name);
        }));
    }
    CalculateCommandToExec(msgFlag) {
        let commandData = new CommandToExecuteData_CommandToExecuteData(this.HindeCore);
        commandData.commandToExecute = null;
        commandData.CommandType = CommandType.Unknown;
        switch (msgFlag) {
            case MsgFlag.ReqAddCETab:
                commandData.CommandType = CommandType.Api;
                commandData.commandToExecute = this.ScUiProxy.AddContentEditorToDesktopAsync;
                break;
            case MsgFlag.ReqUpdateNickName:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.SetNickName;
                break;
            case MsgFlag.ReqAdminB:
                commandData.CommandType = CommandType.Api;
                commandData.commandToExecute = this.ScUiProxy.AdminB;
                break;
            case MsgFlag.Ping:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.Ping;
                break;
            case MsgFlag.ReqOpenCE:
                commandData.CommandType = CommandType.Api;
                commandData.commandToExecute = this.ScUiProxy.OpenContentEditor;
                break;
            case MsgFlag.ReqToggleFavorite:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.ToggleFavorite;
                break;
            case MsgFlag.ReqQuickPublish:
                commandData.CommandType = CommandType.Api;
                commandData.commandToExecute = this.ScUiProxy.PublischActiveCE;
                break;
            case MsgFlag.ReqSetStateOfSitecoreSameWindow:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.SetStateOfSitecoreWindow;
                break;
            case MsgFlag.ReqToggleCompactCss:
                commandData.CommandType = CommandType.Api;
                commandData.commandToExecute = this.ScUiProxy.ToggleCompactCss;
                break;
            case MsgFlag.ReqTakeSnapShot:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.SaveWindowState;
                break;
            case MsgFlag.ReqRemoveFromStorage:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.RemoveSnapShot;
                break;
            case MsgFlag.ReqDebugAutoSnapShot:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.DebugForceAutoSnapShot;
                break;
            case MsgFlag.SetStateFromQueryString:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.SetStateFromQueryString;
                break;
            case MsgFlag.SetStateFromMostRecent:
                commandData.CommandType = CommandType.ContentInternal;
                commandData.commandToExecute = this.InternalCommandRunner.SetStateFromMostRecent;
                break;
            default:
                this.Logger.Log('Unhandled MsgFlag', StaticHelpers_StaticHelpers.MsgFlagAsString(msgFlag));
                break;
        }
        return commandData;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/ContentBrowserProxy.js

class ContentBrowserProxy_ContentBrowserFacade extends _HindeCoreBase_HindeCoreBase {
    AddListener(callback) {
        browser.runtime.onMessage.addListener((request) => callback(request));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultMessageContentToController_Payload.js

class DefaultMessageContentToController_Payload_DefaultMessageContentToController_Payload {
    constructor() {
        this.StateOfStorageSnapShots = new DefaultStateOfStorageSnapshots();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/MsgPayloadResponseFromContent.js


class MsgPayloadResponseFromContent_DefaultMsgContentToController {
    constructor(msgFlag) {
        this.Payload = new DefaultMessageContentToController_Payload_DefaultMessageContentToController_Payload();
        this.MsgFlag = MsgFlag.Unknown;
        this.MsgFlag = msgFlag;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/ContentMessageBroker.js
var ContentMessageBroker_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class ContentMessageBroker_MessageBroker_Content extends _HindeCoreBase_HindeCoreBase {
    constructor(hindeCore, settingsAgent, apiManager, atticMan, contentBrowserProxy, autoSnapShotAgent, commandRouter) {
        super(hindeCore);
        this.Logger.CTORStart(ContentMessageBroker_MessageBroker_Content.name);
        this.SettingsAgent = settingsAgent;
        this.HindSiteScUiProxy = apiManager;
        this.AtticAgent = atticMan;
        this.ContentBrowserProxy = contentBrowserProxy;
        this.AutoSnapShotAgent = autoSnapShotAgent;
        this.CommandRouter = commandRouter;
        this.Logger.CTOREnd(ContentMessageBroker_MessageBroker_Content.name);
    }
    BeginListening() {
        this.Logger.FuncStart(this.BeginListening.name);
        var self = this;
        if (this.ContentBrowserProxy) {
            this.ContentBrowserProxy.AddListener((request) => this.ContentReceiveRequest(request));
        }
        this.Logger.Log('Listening for messages');
        this.Logger.FuncEnd(this.BeginListening.name);
    }
    ValidateRequest(messageFromController) {
        this.Logger.FuncStart(this.ValidateRequest.name);
        var isValid = true;
        if (messageFromController) {
            if (messageFromController.CurrentContentPrefs) {
            }
            else {
                this.ErrorHand.WarningAndContinue(this.ValidateRequest.name, 'No CurrentContentPrefs');
                messageFromController.IsValid = false;
                isValid = false;
            }
        }
        else {
            this.ErrorHand.WarningAndContinue(this.ValidateRequest.name, 'messageFromController is null');
            isValid = false;
        }
        messageFromController.IsValid = isValid;
        this.Logger.FuncEnd(this.ValidateRequest.name, isValid.toString());
        return messageFromController;
    }
    NotifyFail(failrReason) {
        this.ErrorHand.ErrorAndContinue(this.NotifyFail.name, 'Fail ' + failrReason);
    }
    ContentReceiveRequest(messageFromController) {
        return ContentMessageBroker_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentMessageBroker_awaiter(this, void 0, void 0, function* () {
                this.Logger.Log('');
                this.Logger.Log('');
                this.Logger.Log('');
                this.Logger.FuncStart(this.ContentReceiveRequest.name, StaticHelpers_StaticHelpers.MsgFlagAsString(messageFromController.MsgFlag));
                this.Logger.LogVal('ce butt', this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.AutoLogin).ValueAsBool());
                if (messageFromController) {
                    messageFromController = this.ValidateRequest(messageFromController);
                    if (messageFromController.IsValid) {
                        this.SettingsAgent.UpdateSettingsFromPopUpMsg(messageFromController.CurrentContentPrefs);
                        yield this.ReqMsgRouter(messageFromController)
                            .then((msgContentToController) => {
                            this.Logger.Log('responding: ' + StaticHelpers_StaticHelpers.MsgFlagAsString(msgContentToController.MsgFlag));
                            resolve(msgContentToController);
                        })
                            .catch((err) => {
                            this.NotifyFail(err);
                            resolve(new MsgPayloadResponseFromContent_DefaultMsgContentToController(MsgFlag.RespTaskFailed));
                        });
                    }
                    else {
                        resolve(new MsgPayloadResponseFromContent_DefaultMsgContentToController(MsgFlag.RespFailedDidNotValidate));
                    }
                }
                else {
                    reject('no request');
                }
                this.Logger.FuncEnd(this.ContentReceiveRequest.name, StaticHelpers_StaticHelpers.MsgFlagAsString(messageFromController.MsgFlag));
                this.Logger.Log('');
                this.Logger.Log('');
                this.Logger.Log('');
                this.Logger.Log('Resuming Standby');
                this.Logger.Log('');
                this.Logger.Log('');
                this.Logger.Log('');
            }));
        });
    }
    ReqMsgRouter(messageFromController) {
        return ContentMessageBroker_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentMessageBroker_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.ReqMsgRouter.name, StaticHelpers_StaticHelpers.MsgFlagAsString(messageFromController.MsgFlag));
                let commandRouterParams = {
                    MsgFlag: messageFromController.MsgFlag,
                    NewNickName: messageFromController.StateOfPopUI.NewNickName,
                    SelectSnapShotId: messageFromController.StateOfPopUI.SelectSnapShotId
                };
                yield this.CommandRouter.RouteCommand(commandRouterParams)
                    .then(() => this.ConstructResponse(messageFromController.MsgFlag))
                    .then((response) => {
                    resolve(response);
                })
                    .catch((err) => reject(this.ReqMsgRouter.name + ' | ' + err));
                this.Logger.FuncEnd(this.ReqMsgRouter.name);
            }));
        });
    }
    ConstructResponse(msgFlag) {
        return ContentMessageBroker_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentMessageBroker_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.ConstructResponse.name);
                let responseContentToController = new MsgPayloadResponseFromContent_DefaultMsgContentToController(MsgFlag.Unknown);
                yield this.HindSiteScUiProxy.GetStateOfScUiProxy()
                    .then((stateOfScUiProxy) => {
                    responseContentToController.Payload.StateOfScUiProxy_Live = stateOfScUiProxy;
                    responseContentToController.Payload.LastReq = msgFlag;
                    responseContentToController.MsgFlag = MsgFlag.RespTaskSuccessful;
                    responseContentToController.Payload.LastReqFriendly = MsgFlag[msgFlag];
                    responseContentToController.Payload.ErrorStack = ['todo'];
                })
                    .then(() => this.AtticAgent.GetStateOfStorageSnapShots())
                    .then((stateOfStorageSnapShots) => responseContentToController.Payload.StateOfStorageSnapShots = stateOfStorageSnapShots)
                    .then(() => resolve(responseContentToController))
                    .catch((err) => reject(err));
                this.Logger.FuncEnd(this.ConstructResponse.name);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/zContentEntryPoint.js
var zContentEntryPoint_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};























class zContentEntryPoint_ContentEntry {
    StartUpContent() {
        return zContentEntryPoint_awaiter(this, void 0, void 0, function* () {
            this.Instantiate_HindeCore();
            this.InstantiateAgents_Content();
            yield this.InstantiateDocumentJacket();
            yield this.InstantiateAndInit_Managers()
                .then(() => {
                this.AtticAgent.CleanOutOldAutoSavedData();
            });
            this.HindeCore.Logger.SectionMarker('e) ' + this.StartUpContent.name);
            this.HindeCore.Logger.Log('standing by');
        });
    }
    InstantiateAgents_Content() {
        try {
            this.HindeCore.Logger.SectionMarker('Instantiate Agents');
            this.RepoAgent = new RepositoryAgent_RepositoryAgent(this.HindeCore);
            this.SettingsAgent = new SettingsAgent_SettingsAgent(this.HindeCore, this.RepoAgent);
            this.SettingsAgent.Init_SettingsAgent();
            this.InitLogger();
            this.AtticAgent = new ContentAtticAgent_ContentAtticAgent(this.RepoAgent, this.HindeCore);
            this.ToastAgent = new ToastAgent_ToastAgent(this.HindeCore, document);
            this.ToastAgent.Instantiate();
            this.AtticAgent.InitContentAtticManager(this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.AutoSaveRetainDays).ValueAsInt());
        }
        catch (err) {
            this.ErrorHand.ErrorAndThrow(this.InstantiateAgents_Content.name, err);
        }
    }
    InstantiateDocumentJacket() {
        return zContentEntryPoint_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => zContentEntryPoint_awaiter(this, void 0, void 0, function* () {
                this.TopDocumentJacket = new DocumentJacket_DocumentJacket(this.HindeCore, document);
                yield this.TopDocumentJacket.WaitForCompleteNAB_DocumentJacket(this.InstantiateDocumentJacket.name)
                    .then(() => resolve())
                    .catch((err) => reject(this.InstantiateDocumentJacket.name + ' | ' + err));
            }));
        });
    }
    InstantiateAndInit_Managers() {
        return zContentEntryPoint_awaiter(this, void 0, void 0, function* () {
            try {
                this.HindeCore.Logger.SectionMarker('Instantiate and Initialize Managers');
                let scUiMan;
                let contentMessageMan;
                scUiMan = new SitecoreUiManager_ScUiManager(this.HindeCore);
                this.ScUiAPI = new HindSiteScUiAPI_HindSiteScUiAPI(this.HindeCore, scUiMan, this.TopDocumentJacket);
                this.AutoSnapShotAgent = new AutoSnapShotAgent_AutoSnapShotAgent(this.HindeCore, this.SettingsAgent, this.AtticAgent, this.ScUiAPI);
                this.ContentBrowserProxy = new ContentBrowserProxy_ContentBrowserFacade(this.HindeCore);
                this.CommandRouter = new CommandRouter_CommandRouter(this.HindeCore, this.ScUiAPI, this.ToastAgent, scUiMan, this.AtticAgent, this.SettingsAgent, this.AutoSnapShotAgent, this.TopDocumentJacket);
                let contentMessageBroker = new ContentMessageBroker_MessageBroker_Content(this.HindeCore, this.SettingsAgent, this.ScUiAPI, this.AtticAgent, this.ContentBrowserProxy, this.AutoSnapShotAgent, this.CommandRouter);
                contentMessageMan = new ContentMessageManager_ContentMessageManager(this.HindeCore, contentMessageBroker);
                yield scUiMan.InitSitecoreUiManager()
                    .then(() => contentMessageMan.InitContentMessageManager())
                    .then(() => this.ScUiAPI.InstantiateHindSiteScUiProxy())
                    .then(() => {
                    this.AutoSnapShotAgent.ScheduleIntervalTasks();
                })
                    .then(() => this.StartUp())
                    .then(() => this.HindeCore.Logger.Log('Init success'))
                    .catch((err) => this.ErrorHand.ErrorAndThrow('Content Entry Point', err));
                this.HindeCore.Logger.SectionMarker('e) Instantiate and Initialize Managers');
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.InstantiateAndInit_Managers.name, err);
            }
        });
    }
    TriggerStartupCommands() {
        let setStateFromX = {
            MsgFlag: MsgFlag.SetStateFromQueryString,
            NewNickName: null,
            SelectSnapShotId: null,
        };
        if (this.TopDocumentJacket.UrlJacket.QueryStringHasKey(QueryStrKey.hsTargetSs)) {
            setStateFromX.MsgFlag = MsgFlag.SetStateFromQueryString,
                this.CommandRouter.RouteCommand(setStateFromX);
        }
        else if ((this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.AutoRestoreState)).ValueAsBool()) {
            this.HindeCore.Logger.Log('yup...has the setting');
            setStateFromX.MsgFlag = MsgFlag.SetStateFromMostRecent;
            this.CommandRouter.RouteCommand(setStateFromX);
        }
    }
    StartUp() {
        this.HindeCore.Logger.FuncStart(this.StartUp.name);
        this.TriggerStartupCommands();
        this.HindeCore.Logger.FuncEnd(this.StartUp.name);
    }
    InitLogger() {
        this.HindeCore.Logger.FuncStart(this.InitLogger.name);
        let enableLogger = this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.EnableDebugging);
        if (enableLogger.ValueAsBool() || SharedConst.Const.Debug.ForceLoggingEnabled) {
            let consoleLogWrite = new LoggerConsoleWriter();
            var RollingLogId = new RollingLogIdDrone_RollingLogIdDrone(this.SettingsAgent, this.HindeCore);
            let storageLogWriter = new LoggerStorageWriter();
            var nextLogId = RollingLogId.GetNextLogId();
            storageLogWriter.SetLogToStorageKey(nextLogId);
            this.HindeCore.Logger.AddWriter(consoleLogWrite);
            this.HindeCore.Logger.AddWriter(storageLogWriter);
        }
        this.HindeCore.Logger.FlushBuffer();
        this.HindeCore.Logger.FuncEnd(this.InitLogger.name);
    }
    Instantiate_HindeCore() {
        let logger = new LoggerAgent_LoggerAgent();
        logger.Instantiate();
        this.TaskMonitor = new TaskMonitor_TaskMonitor(logger);
        this.ErrorHand = new ErrorHandlerAgent_ErrorHandlerAgent(this.TaskMonitor);
        this.ErrorHand.Instantiate();
        this.TaskMonitor.IntroduceErrorHand(this.ErrorHand);
        this.TaskMonitor.Instantiate();
        this.HindeCore = {
            Logger: logger,
            ErrorHand: this.ErrorHand,
            TaskMonitor: this.TaskMonitor,
            Discriminator: Discriminator.IHindeCore,
        };
    }
}
let contentEntry = new zContentEntryPoint_ContentEntry();
contentEntry.StartUpContent();


/***/ })
/******/ ]);