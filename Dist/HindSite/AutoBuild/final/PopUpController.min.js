/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/1xxx-MessageFlag.js
var MsgFlag;
(function (MsgFlag) {
    MsgFlag[MsgFlag["Unknown"] = 0] = "Unknown";
    MsgFlag[MsgFlag["GetAllStorageOneWindow"] = 1001] = "GetAllStorageOneWindow";
    MsgFlag[MsgFlag["NewWindowTest"] = 1002] = "NewWindowTest";
    MsgFlag[MsgFlag["Ping"] = 1003] = "Ping";
    MsgFlag[MsgFlag["ReqRemoveFromStorage"] = 1004] = "ReqRemoveFromStorage";
    MsgFlag[MsgFlag["ReqAddCETab"] = 1100] = "ReqAddCETab";
    MsgFlag[MsgFlag["ReqAdminB"] = 1101] = "ReqAdminB";
    MsgFlag[MsgFlag["ReqGoDesktop"] = 1102] = "ReqGoDesktop";
    MsgFlag[MsgFlag["ReqLoginWithAdminB"] = 1103] = "ReqLoginWithAdminB";
    MsgFlag[MsgFlag["ReqToggleFavorite"] = 1104] = "ReqToggleFavorite";
    MsgFlag[MsgFlag["ReqOpenCE"] = 1105] = "ReqOpenCE";
    MsgFlag[MsgFlag["ReqQuickPublish"] = 1106] = "ReqQuickPublish";
    MsgFlag[MsgFlag["ReqSetStateOfSitecoreSameWindow"] = 1107] = "ReqSetStateOfSitecoreSameWindow";
    MsgFlag[MsgFlag["Unused"] = 1108] = "Unused";
    MsgFlag[MsgFlag["ReqSetScModePreview"] = 1109] = "ReqSetScModePreview";
    MsgFlag[MsgFlag["ReqTakeSnapShot"] = 1110] = "ReqTakeSnapShot";
    MsgFlag[MsgFlag["ReqToggleCompactCss"] = 1111] = "ReqToggleCompactCss";
    MsgFlag[MsgFlag["ReqUpdateNickName"] = 1112] = "ReqUpdateNickName";
    MsgFlag[MsgFlag["RespCurState"] = 1200] = "RespCurState";
    MsgFlag[MsgFlag["RespTaskFailed"] = 1201] = "RespTaskFailed";
    MsgFlag[MsgFlag["RespListeningAndReady"] = 1202] = "RespListeningAndReady";
    MsgFlag[MsgFlag["_unused"] = 1203] = "_unused";
    MsgFlag[MsgFlag["RespTaskSuccessful"] = 1204] = "RespTaskSuccessful";
    MsgFlag[MsgFlag["RespTest"] = 1205] = "RespTest";
    MsgFlag[MsgFlag["RespNotReady"] = 1206] = "RespNotReady";
    MsgFlag[MsgFlag["ReqClosePopUpWindow"] = 1207] = "ReqClosePopUpWindow";
    MsgFlag[MsgFlag["ReqOpenPresentationDetails"] = 1208] = "ReqOpenPresentationDetails";
    MsgFlag[MsgFlag["CancelCommand"] = 1209] = "CancelCommand";
    MsgFlag[MsgFlag["ReqSetScModeNormal"] = 1210] = "ReqSetScModeNormal";
    MsgFlag[MsgFlag["ReqSetScModeEdit"] = 1211] = "ReqSetScModeEdit";
    MsgFlag[MsgFlag["ReqSetStateOfSitecoreNewWindow"] = 1212] = "ReqSetStateOfSitecoreNewWindow";
    MsgFlag[MsgFlag["RespFailedDidNotValidate"] = 1213] = "RespFailedDidNotValidate";
    MsgFlag[MsgFlag["ReqDebugAutoSnapShot"] = 1214] = "ReqDebugAutoSnapShot";
    MsgFlag[MsgFlag["ReqDebugTriggerReload"] = 1215] = "ReqDebugTriggerReload";
    MsgFlag[MsgFlag["ReqDebugClearConsole"] = 1216] = "ReqDebugClearConsole";
    MsgFlag[MsgFlag["SetStateFromQueryString"] = 1217] = "SetStateFromQueryString";
    MsgFlag[MsgFlag["SetStateFromMostRecent"] = 1218] = "SetStateFromMostRecent";
    MsgFlag[MsgFlag["SetStateFromStorage"] = 1219] = "SetStateFromStorage";
})(MsgFlag || (MsgFlag = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/3xxx-SettingKey.js
var _3xxx_SettingKey_SettingKey;
(function (SettingKey) {
    SettingKey[SettingKey["unknown"] = 0] = "unknown";
    SettingKey[SettingKey["AutoLogin"] = 3100] = "AutoLogin";
    SettingKey[SettingKey["__dead"] = 3101] = "__dead";
    SettingKey[SettingKey["DebugKeepDialogOpen"] = 3102] = "DebugKeepDialogOpen";
    SettingKey[SettingKey["AutoSaveIntervalMin"] = 3103] = "AutoSaveIntervalMin";
    SettingKey[SettingKey["UseCompactCss"] = 3104] = "UseCompactCss";
    SettingKey[SettingKey["AutoSaveRetainDays"] = 3105] = "AutoSaveRetainDays";
    SettingKey[SettingKey["AutoRenameCeButton"] = 3106] = "AutoRenameCeButton";
    SettingKey[SettingKey["MaxAutoSaveCount"] = 3200] = "MaxAutoSaveCount";
    SettingKey[SettingKey["EnableDebugging"] = 3201] = "EnableDebugging";
    SettingKey[SettingKey["LgndPopUpLog"] = 3300] = "LgndPopUpLog";
    SettingKey[SettingKey["LgndForeSite"] = 3301] = "LgndForeSite";
    SettingKey[SettingKey["LgndHindSite"] = 3302] = "LgndHindSite";
    SettingKey[SettingKey["LgndSettings"] = 3303] = "LgndSettings";
    SettingKey[SettingKey["LgndContentState"] = 3304] = "LgndContentState";
    SettingKey[SettingKey["_unused_"] = 3305] = "_unused_";
    SettingKey[SettingKey["LgndMessages"] = 3306] = "LgndMessages";
    SettingKey[SettingKey["LgndBrowserState"] = 3307] = "LgndBrowserState";
    SettingKey[SettingKey["LgndPopUpState"] = 3308] = "LgndPopUpState";
    SettingKey[SettingKey["LastUsedLogToStorageKey"] = 3400] = "LastUsedLogToStorageKey";
    SettingKey[SettingKey["AutoSnapshotBeforeWindowChange"] = 3401] = "AutoSnapshotBeforeWindowChange";
    SettingKey[SettingKey["LgndPopUpDebug"] = 3402] = "LgndPopUpDebug";
    SettingKey[SettingKey["AutoRestoreState"] = 3403] = "AutoRestoreState";
    SettingKey[SettingKey["_not_used"] = 3404] = "_not_used";
})(_3xxx_SettingKey_SettingKey || (_3xxx_SettingKey_SettingKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferChar.js
var BufferChar;
(function (BufferChar) {
    BufferChar[BufferChar["space"] = 0] = "space";
    BufferChar[BufferChar["Nbsp"] = 1] = "Nbsp";
    BufferChar[BufferChar["Period"] = 2] = "Period";
    BufferChar[BufferChar["Zero"] = 3] = "Zero";
})(BufferChar || (BufferChar = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferDirection.js
var BufferDirection;
(function (BufferDirection) {
    BufferDirection[BufferDirection["left"] = 0] = "left";
    BufferDirection[BufferDirection["right"] = 1] = "right";
})(BufferDirection || (BufferDirection = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/scWindowType.js
var ScWindowType;
(function (ScWindowType) {
    ScWindowType[ScWindowType["Unknown"] = 0] = "Unknown";
    ScWindowType[ScWindowType["LoginPage"] = 1] = "LoginPage";
    ScWindowType[ScWindowType["Desktop"] = 2] = "Desktop";
    ScWindowType[ScWindowType["ContentEditor"] = 3] = "ContentEditor";
    ScWindowType[ScWindowType["Launchpad"] = 4] = "Launchpad";
    ScWindowType[ScWindowType["Edit"] = 5] = "Edit";
    ScWindowType[ScWindowType["Normal"] = 6] = "Normal";
    ScWindowType[ScWindowType["Preview"] = 7] = "Preview";
    ScWindowType[ScWindowType["MediaLibrary"] = 8] = "MediaLibrary";
    ScWindowType[ScWindowType["PackageDesigner"] = 9] = "PackageDesigner";
    ScWindowType[ScWindowType["InstallationWizard"] = 10] = "InstallationWizard";
    ScWindowType[ScWindowType["XmlControlPackageDesigner"] = 11] = "XmlControlPackageDesigner";
})(ScWindowType || (ScWindowType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SnapShotFlavor.js
var SnapShotFlavor;
(function (SnapShotFlavor) {
    SnapShotFlavor[SnapShotFlavor["Unknown"] = 0] = "Unknown";
    SnapShotFlavor[SnapShotFlavor["Autosave"] = 1] = "Autosave";
    SnapShotFlavor[SnapShotFlavor["Favorite"] = 2] = "Favorite";
    SnapShotFlavor[SnapShotFlavor["Manual"] = 3] = "Manual";
    SnapShotFlavor[SnapShotFlavor["Live"] = 4] = "Live";
})(SnapShotFlavor || (SnapShotFlavor = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/StaticHelpers.js






class StaticHelpers_StaticHelpers {
    static MinToMs(minutes) {
        return minutes * 60 * 1000;
    }
    static FlavorAsString(flavor) {
        return 'Flavor.' + SnapShotFlavor[flavor] + '(' + flavor + ')';
    }
    static SettingKeyAsString(settingKey) {
        let toReturn = '';
        try {
            toReturn = 'SettingKey.' + _3xxx_SettingKey_SettingKey[settingKey] + '(' + settingKey + ')';
        }
        catch (err) {
            toReturn = err;
        }
        return toReturn;
    }
    static ScWindowTypeFriendly(windowType) {
        return ScWindowType[windowType];
    }
    static MakeFriendlyDate(date) {
        var toReturn = '';
        var workingDate = new Date(date);
        if (workingDate) {
            var month = StaticHelpers_StaticHelpers.BufferString((workingDate.getMonth() + 1).toString(), 2, BufferChar.Zero, BufferDirection.left);
            var day = StaticHelpers_StaticHelpers.BufferString(workingDate.getDate().toString(), 2, BufferChar.Zero, BufferDirection.left);
            var min = StaticHelpers_StaticHelpers.BufferString(workingDate.getMinutes().toString(), 2, BufferChar.Zero, BufferDirection.left);
            var hoursRaw = workingDate.getHours();
            var hourClean = hoursRaw ? hoursRaw : 12;
            var hourCleanStr = StaticHelpers_StaticHelpers.BufferString(hourClean.toString(), 2, BufferChar.Zero, BufferDirection.left);
            toReturn = month + '.' + day + ' ' + hourCleanStr + ':' + min;
        }
        else {
            toReturn = '{error}';
            throw (this.MakeFriendlyDate.name, 'no date provided');
        }
        return toReturn;
    }
    static IsNullOrUndefined(testSubject) {
        let toReturn = false;
        try {
            if (testSubject instanceof Array) {
                testSubject.forEach((testSubject) => toReturn = toReturn || this.IsNullOrUndefined(testSubject));
            }
            else {
                toReturn = (typeof testSubject === 'undefined' || testSubject === null);
            }
        }
        catch (err) {
            console.log(err);
        }
        return toReturn;
    }
    static getBuffChar(buffCharEnum) {
        var buffChar = ' ';
        if (buffCharEnum === BufferChar.space) {
            buffChar = ' ';
        }
        else if (buffCharEnum === BufferChar.Nbsp) {
            buffChar = '&nbsp;';
        }
        else if (buffCharEnum === BufferChar.Period) {
            buffChar = '.';
        }
        else if (buffCharEnum === BufferChar.Zero) {
            buffChar = '0';
        }
        return buffChar;
    }
    static BufferString(str, desiredLength, buffCharEnum, direction) {
        var toReturn = str;
        var buffChar = this.getBuffChar(buffCharEnum);
        if (toReturn.length > desiredLength) {
            if (desiredLength > 6) {
                toReturn = toReturn.substring(0, desiredLength - 3) + '...';
            }
            else {
                toReturn = toReturn.substring(0, desiredLength);
            }
        }
        if (toReturn.length < desiredLength) {
            var bufferCharNeeded = desiredLength - toReturn.length;
            for (var idx = 0; idx < bufferCharNeeded; idx++) {
                if (direction === BufferDirection.left) {
                    toReturn = buffChar + toReturn;
                }
                else {
                    toReturn = toReturn + buffChar;
                }
            }
        }
        return toReturn;
    }
    static MsgFlagAsString(msg) {
        var toReturn = "{error}";
        if (msg) {
            try {
                toReturn = 'MsgFlag.' + MsgFlag[msg] + '(' + msg + ')';
            }
            catch (err) {
                console.log(this.MsgFlagAsString.name + ' ' + err);
            }
        }
        return 'flag: ' + toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Const/PopConst.js
let PopConst = (() => {
    class PopConst {
    }
    PopConst.Const = {
        ClassNames: {
            HS: {
                Collapsed: 'in',
                Down: 'down',
                Buttons: {
                    AdminB: 'admin-b',
                    Cancel: 'cancel',
                    CompactCe: 'details',
                    Edit: 'edit',
                    GoContentEditor: 'ce',
                    GoDesktop: 'desktop-icon',
                    Ping: 'edit',
                    PresentationDetails: 'details',
                    QuickPublish: 'publish',
                    RemoveFromStorage: 'delete-snapshot',
                    RestoreNewTab: 'restore-snapshot',
                    RestoreSameTab: 'restore-snapshot',
                    RestoreStateTBD: 'restore-snapshot',
                    ScModeEdit: 'edit',
                    ScModeNormal: 'normal',
                    ScModePrev: 'preview-icon',
                    TakeSnapShot: 'take-snapshot',
                    ToggleFavorite: 'btn-favorite',
                    UpdateNickname: 'set-nickname',
                    Icons: {
                        CloseWindow: 'icon-close-window',
                        AddContentEditorTab: 'icon-add-ce-tab',
                    }
                },
            },
        },
        ElemId: {
            InputNickname: 'id-input-nickname',
            HindSiteParentInfo: 'spanParentInfo',
            HS: {
                SelectHeaderAuto: 'sel-header-auto',
                SelectHeaderAutoTitle: 'sel-header-auto-title',
                SelectHeaderFavorite: 'sel-header-favorite',
                SelectHeaderFavoriteTitle: 'sel-header-favorite-title',
                SelectHeaderManual: 'sel-header-manual',
                SelectHeaderManualTitle: 'sel-header-manual-title',
                TabId: 'orig-win-id',
            }
        },
        Numbers: {
            MinMenuHeight: 600,
            MinMenuWidth: 600,
            MaxAutoSaveCount: 10,
            AutoSaveIntervalMin: 5,
        },
        Notify: {
            Default: 'Complete',
            PublishComplete: 'Publishing Complete',
        },
        Selector: {
            HS: {
                AutoSnapshotBeforeWindowChange: '[id=id-settings-auto-snapshot-on-window-change]',
                BuildStamp: '[id=build-stamp]',
                DivOverlayModule: '[id=menu-overlay]',
                DivStateContent: '[id=feedback-div-state-content]',
                FeedbackBrowserState: '[id=feedback-div-browser-state]',
                FeedbackPopUpState: '[id=feedback-div-pop-up-state]',
                FeedbackContentState: '[id=feedback-div-state-content]',
                FeedbackLogElement: '[id=feedback-pop-up-log]',
                FeedbackMessages: '[id=feedback-messages]',
                FeedbackStorage: '[id=feedback-storage]',
                HsCancel: '[id=Cancel]',
                HsRemoveFromStorage: '[id=id-ph-remove-one-from-local-storage]',
                HsRestoreWindowStateSameTab: '[id=id-ph-btn-restore-state-same-tab]',
                HsRestoreWindowStateNewTab: '[id=id-ph-btn-restore-state-new-tab]',
                iCBoxdSettingsAutoLogin: '[id=id-ph-settings-auto-login]',
                IdFieldSetDebug: '[id=id-fieldset-debug]',
                ToggleFavorite: '[id=id-ph-btn-toggle-favorite]',
                SettingAutoSaveInterval: '[id=id-settings-auto-save-interval]',
                SettingAutoSaveMaxCount: '[id=id-settings-auto-save-max-count]',
                SettingAutoSaveSnapshotRetainDays: '[id=id-settings-auto-save-snap-shot-retain-days]',
                SettingAutoRenameCeTabButton: '[id=id-settings-auto-rename-ce-tab-button]',
                SettingNotUsed: '[id=id-settings-not-used]',
                TakeSnapshot: '[id=id-ph-btn-take-snapshot]',
                UpdateNicknameB: '[id=id-ph-btn-update-nickname]',
                ModuleContainers: {
                    SettingShowDebuggingModules: '[id=id-setting-show-debugging-modules]',
                    BtnAddContentEditor: '[id=id-ph-btn-add-drframe-content-editor]',
                    BtnAdminB: '[id=id-ph-btn-adminb]',
                    BtnCompactScUi: '[id=id-ph-btn-compact-sc-ui]',
                    BtnDebugClearPopUpConsole: '[id=id-container-btn-debug-clear-console]',
                    BtnDebugForceAutoSnapShot: '[id=id-container-btn-debug-force-auto-snapshot]',
                    BtnDebugTriggerPopUpReload: '[id=id-container-btn-debug-trigger-pop-up-reload]',
                    BtnGoContentEditor: '[id=id-ph-btn-go-content-editor]',
                    BtnModeEdit: '[id=id-ph-btn-sc-mode-edit]',
                    BtnModeNorm: '[id=id-ph-btn-norm]',
                    BtnModePrev: '[id=id-ph-btn-prev]',
                    BtnPresentationDetails: '[id=id-ph-btn-presentation-details]',
                    BtnQuickPublish: '[id=id-ph-btn-quick-publish]',
                    BtnWindowClose: '[id=id-ph-close-window]',
                    SettingEnableDebugging: '[id=id-ph-settings-enable-debugging]',
                    Desktop: '[id=id-ph-btn-desktop]',
                    LgndBrowserState: '[id=lgnd-browser-state]',
                    LgndContentState: '[id=lgnd-content-state]',
                    LgndForeSite: '[id=lgnd-fore-site]',
                    LgndHindSite: '[id=lgnd-hind-site]',
                    LgndMessages: '[id=lgnd-messages]',
                    LgndPopUpDebug: '[id=lgnd-pop-up-debug]',
                    LgndPopUpLog: '[id=lgnd-pop-up-log]',
                    LgndPopUpState: '[id=lgnd-pop-up-state]',
                    LgndSettings: '[id=lgnd-settings]',
                    PrefAutoLogin: '[id=id-ph-settings-auto-login]',
                    SelStateSnapShot: '[id=id-container-select-state]',
                    SettingAutoRestoreState: '[id=id-settings-auto-restore-state]',
                    SettingDebugKeepDialogOpen: '[id=id-ph-settings-debug-keep-dialog-open]',
                    SettingUseCompactCss: '[id=id-ph-settings-use-compact]',
                }
            },
        },
        Settings: {
            Defaults: {
                AutoSaveEnabled: false,
                AutoRestoreState: false,
                DebugKeepDialogOpen: false,
                LgndBrowserState: false,
                LgndContentState: false,
                LgndForeSite: true,
                LgndHindSite: true,
                LgndMessages: false,
                LgndPopUpLog: false,
                LgndPopUpState: false,
                LgndPopUpDebug: false,
                LgndSettings: false,
            }
        },
        Storage: {
            SettingsSuffix: 'todo',
            KeyGenericSettings: 'HindSite.' + 'GenericSettings',
            StorageLogKeyPrefix: 'HindSite.' + 'Log.',
            Defaults: {
                bool: {
                    AutoSaveEnabled: false,
                    AutoLogin: false,
                    DefaultDebugKeepDialogOpen: false,
                    AutoSnapshotBeforeWindowChange: false,
                }
            }
        },
        SnapShotFormat: {
            lenTimestamp: 13,
            lenNickname: 16,
            lenPageType: 7,
            lenPrefix: 6,
            lenShortId: 4,
            colSep: ' - ',
            lenCeCount: 3,
            MainSectionNode: 9,
            lenActiveNode: 9,
            lenFavorite: 3,
        },
        Timeouts: {
            WaitBeforeRemovingCompleteFlag: 1500,
            AutoLoginCheckInterval: 3000,
        },
    };
    return PopConst;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/Agents/Discriminator.js
var Discriminator;
(function (Discriminator) {
    Discriminator[Discriminator["unknown"] = 0] = "unknown";
    Discriminator[Discriminator["ILoggerAgent"] = 1] = "ILoggerAgent";
    Discriminator[Discriminator["IHindeCore"] = 2] = "IHindeCore";
    Discriminator[Discriminator["IErrorHandler"] = 3] = "IErrorHandler";
    Discriminator[Discriminator["TaskMonitor"] = 4] = "TaskMonitor";
})(Discriminator || (Discriminator = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/ErrorHandlerAgent.js
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class ErrorHandlerAgent_ErrorHandlerAgent {
    constructor(taskMonitor) {
        this.Discriminator = Discriminator.IErrorHandler;
        this.ErrorStack = [];
        this.TaskMonitor = taskMonitor;
    }
    Instantiate() {
    }
    ThrowIfNullOrUndefined(title, testSubject) {
        if (testSubject instanceof Array) {
            testSubject.forEach((testSubject) => this.ThrowIfNullOrUndefined(title, testSubject));
        }
        else {
            if (typeof testSubject === 'undefined' || testSubject === null) {
                try {
                    if (this.TaskMonitor) {
                        this.TaskMonitor.RequestCancel();
                    }
                }
                catch (err) {
                    console.log(err);
                }
                this.ErrorAndThrow(title, 'Failed Null check');
            }
        }
    }
    static ThrowIfNullOrUndefinedStatic(title, testSubject) {
        if (testSubject instanceof Array) {
            testSubject.forEach((testSubject) => ErrorHandlerAgent_ErrorHandlerAgent.ThrowIfNullOrUndefinedStatic(title, testSubject));
        }
        else {
            if (typeof testSubject === 'undefined' || testSubject === null) {
                throw (title + ' Failed Null check');
            }
        }
    }
    WarningAndContinue(container, text) {
        if (!container) {
            container = 'unknown';
        }
        if (!text) {
            text = 'unknown';
        }
        this.ErrorLogger('');
        this.ErrorLogger('\t\t** WARNING ** ' + container + ' ' + text);
        this.ErrorLogger('');
    }
    ErrorAndContinue(container, text) {
        if (!container) {
            container = 'unknown';
        }
        if (!text) {
            text = 'unknown';
        }
        this.ErrorStack.push({
            ContainerFunc: container,
            ErrorString: text
        });
        this.ErrorLogger('');
        this.ErrorLogger('\t\ts) ** ERROR ** container: ' + container);
        this.ErrorLogger('');
        this.ErrorLogger('\t\t error message: ' + text);
        this.ErrorLogger('');
        this.ErrorLogger('\t\te)** ERROR container: ** ' + container);
        this.ErrorLogger('');
    }
    ErrorLogger(text) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('**********' + text + '**********');
        });
    }
    ErrorAndThrow(container, text) {
        let stack = new Error().stack;
        this.ErrorAndContinue(container, text + '   ' + stack);
        throw container + " " + text;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/LoggableBase.js

class LoggableBase_HindeCoreBase {
    constructor(hindeCore) {
        ErrorHandlerAgent_ErrorHandlerAgent.ThrowIfNullOrUndefinedStatic(LoggableBase_HindeCoreBase.name, [hindeCore]);
        ErrorHandlerAgent_ErrorHandlerAgent.ThrowIfNullOrUndefinedStatic(LoggableBase_HindeCoreBase.name, [hindeCore.Discriminator, hindeCore.ErrorHand, hindeCore.Logger, hindeCore.TaskMonitor]);
        this.Logger = hindeCore.Logger;
        this.HindeCore = hindeCore;
        this.ErrorHand = hindeCore.ErrorHand;
        this.TaskMonitor = hindeCore.TaskMonitor;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Managers/UiCommandsManager.js

class UiCommandsManager_UiCommandsManager extends LoggableBase_HindeCoreBase {
    constructor(hindeCore, menuCommandParamsBucket, uiVisibilityTestAgent) {
        super(hindeCore);
        this.UiModules = [];
        this.Logger.CTOREnd(UiCommandsManager_UiCommandsManager.name);
    }
    Init_ButtonStateManager() {
    }
    BuildCommandButtons() {
    }
    HydrateUi_UICommandManager(refreshData) {
    }
    RefreshUiModuleVisibilityStatus() {
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/ModuleKey.js
var ModuleKey;
(function (ModuleKey) {
    ModuleKey[ModuleKey["Unknown"] = 0] = "Unknown";
    ModuleKey[ModuleKey["BroswerState"] = 1] = "BroswerState";
    ModuleKey[ModuleKey["ButtonCancel"] = 2] = "ButtonCancel";
    ModuleKey[ModuleKey["ButtonClose"] = 3] = "ButtonClose";
    ModuleKey[ModuleKey["ButtonTypical"] = 4] = "ButtonTypical";
    ModuleKey[ModuleKey["ButtonWithInput"] = 5] = "ButtonWithInput";
    ModuleKey[ModuleKey["ContentState"] = 6] = "ContentState";
    ModuleKey[ModuleKey["FeedbackModule"] = 7] = "FeedbackModule";
    ModuleKey[ModuleKey["PopUpState"] = 8] = "PopUpState";
    ModuleKey[ModuleKey["SelectSnapShot"] = 9] = "SelectSnapShot";
    ModuleKey[ModuleKey["CheckBox"] = 10] = "CheckBox";
    ModuleKey[ModuleKey["AccordionTypical"] = 11] = "AccordionTypical";
    ModuleKey[ModuleKey["Number"] = 12] = "Number";
    ModuleKey[ModuleKey["AccordionDebugging"] = 13] = "AccordionDebugging";
})(ModuleKey || (ModuleKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/_HindSiteEvent/HindeSiteEvent_Subject.js




class HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(arg1, arg2, arg3 = '') {
        this.ObserverCollection = [];
        let errorHandTest = arg2;
        if (arg1.Discriminator == Discriminator.IHindeCore) {
            let hindeCore = arg1;
            this.Logger = hindeCore.Logger;
            this.ErrorHand = hindeCore.ErrorHand;
            this.Friendly_Subject = arg2;
        }
        else if (arg1.Discriminator === Discriminator.ILoggerAgent && errorHandTest && errorHandTest.Discriminator === Discriminator.IErrorHandler) {
            this.Logger = arg1;
            this.ErrorHand = errorHandTest;
            this.Friendly_Subject = arg3;
        }
        else {
            throw ('unhandled discriminator');
        }
    }
    DisableNotifications() {
        this.IsMuted = true;
    }
    EnableNotifications() {
        this.IsMuted = false;
    }
    HasObservers() {
        return this.ObserverCollection && this.ObserverCollection.length > 0;
    }
    RegisterObserver(observer) {
        if (observer) {
            if (this.ObserverCollection.indexOf(observer) < 0) {
                this.ObserverCollection.push(observer);
                this.Logger.Log(this.RegisterObserver.name + ' ' + observer.Friendly + ' to ' + this.Friendly_Subject + ' - count after: ' + this.ObserverCollection.length.toString());
            }
            else {
                this.ErrorHand.WarningAndContinue(this.RegisterObserver.name, 'Observer already registered');
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.RegisterObserver.name, 'Observer is null');
        }
    }
    UnregisterObserver(observer) {
        this.Logger.FuncStart(this.UnregisterObserver.name);
        if (observer) {
            let observerIndex = this.ObserverCollection.indexOf(observer);
            if (observerIndex > -1) {
                this.ObserverCollection.splice(observerIndex, 1);
            }
        }
        this.Logger.FuncEnd(this.UnregisterObserver.name);
    }
    NotifyObserversAsync(payload) {
        let bufferedFriendly = StaticHelpers_StaticHelpers.BufferString(this.Friendly_Subject, 20, BufferChar.Period, BufferDirection.right);
        this.Logger.FuncStart(this.NotifyObserversAsync.name + ' of: ' + bufferedFriendly, ' obs. count: ' + this.ObserverCollection.length);
        if (!this.IsMuted) {
            this.ObserverCollection.forEach((observer) => {
                observer.UpdateAsync(payload);
            });
        }
        else {
            this.Logger.Log('not Notifying...Subject is muted');
        }
        this.Logger.FuncEnd(this.NotifyObserversAsync.name + ' of: ' + bufferedFriendly, ' obs. count: ' + this.ObserverCollection.length);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/UiCommandFlagRaisedEvent/UiCommandFlagRaisedEvent_Subject.js

class UiCommandFlagRaisedEvent_Subject_UiCommandFlagRaisedEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore) {
        super(hindeCore, UiCommandFlagRaisedEvent_Subject_UiCommandFlagRaisedEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/_HindSiteEvent/HindSiteEvent_Observer.js

class HindSiteEvent_Observer_HindSiteEvent_Observer extends LoggableBase_HindeCoreBase {
    constructor(hindeCore, friendly, callbackAsync = null) {
        super(hindeCore);
        this.CallbackAsync = null;
        this.CallbackAsync = callbackAsync;
        this.Friendly = friendly;
    }
    UpdateAsync(payload) {
        try {
            if (this.CallbackAsync) {
                this.CallbackAsync(payload);
            }
        }
        catch (err) {
            this.ErrorHand.ErrorAndContinue(HindSiteEvent_Observer_HindSiteEvent_Observer.name, err);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/SingleClickEvent/SingleClickEvent_Observer.js

class SingleClickEvent_Observer_SingleClickEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, SingleClickEvent_Observer_SingleClickEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/AutoBuild/BuildNum.js
const BuiltDateStamp = 1601759222408;


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/2xxx-MenuCommand.js
var MenuCommandKey;
(function (MenuCommandKey) {
    MenuCommandKey[MenuCommandKey["Unknown"] = 0] = "Unknown";
    MenuCommandKey[MenuCommandKey["GoScModeEdit"] = 2001] = "GoScModeEdit";
    MenuCommandKey[MenuCommandKey["ToggleFavorite"] = 2002] = "ToggleFavorite";
    MenuCommandKey[MenuCommandKey["CloseWindow"] = 2003] = "CloseWindow";
    MenuCommandKey[MenuCommandKey["TakeSnapShot"] = 2004] = "TakeSnapShot";
    MenuCommandKey[MenuCommandKey["AddCeTab"] = 2005] = "AddCeTab";
    MenuCommandKey[MenuCommandKey["ScModeNormal"] = 2006] = "ScModeNormal";
    MenuCommandKey[MenuCommandKey["ScModePrev"] = 2007] = "ScModePrev";
    MenuCommandKey[MenuCommandKey["Cancel"] = 2008] = "Cancel";
    MenuCommandKey[MenuCommandKey["DrawStorage"] = 2009] = "DrawStorage";
    MenuCommandKey[MenuCommandKey["DrawStoragePopUpLogStorage"] = 2010] = "DrawStoragePopUpLogStorage";
    MenuCommandKey[MenuCommandKey["Remove"] = 2011] = "Remove";
    MenuCommandKey[MenuCommandKey["RestoreStateSameTab"] = 2012] = "RestoreStateSameTab";
    MenuCommandKey[MenuCommandKey["RestoreStateNewTab"] = 2013] = "RestoreStateNewTab";
    MenuCommandKey[MenuCommandKey["RestoreStateTBDTab"] = 2014] = "RestoreStateTBDTab";
    MenuCommandKey[MenuCommandKey["GoDesktop"] = 2015] = "GoDesktop";
    MenuCommandKey[MenuCommandKey["GoContentEditor"] = 2016] = "GoContentEditor";
    MenuCommandKey[MenuCommandKey["PutAdminB"] = 2017] = "PutAdminB";
    MenuCommandKey[MenuCommandKey["PresentationDetails"] = 2017] = "PresentationDetails";
    MenuCommandKey[MenuCommandKey["CompactScUi"] = 2019] = "CompactScUi";
    MenuCommandKey[MenuCommandKey["Ping"] = 2020] = "Ping";
    MenuCommandKey[MenuCommandKey["UpdateNickname"] = 2021] = "UpdateNickname";
    MenuCommandKey[MenuCommandKey["QuickPublish"] = 2022] = "QuickPublish";
    MenuCommandKey[MenuCommandKey["DebugForceAutoSnapShot"] = 2023] = "DebugForceAutoSnapShot";
    MenuCommandKey[MenuCommandKey["DebugClearPopUpConsole"] = 2024] = "DebugClearPopUpConsole";
    MenuCommandKey[MenuCommandKey["DebugTriggerPopUpReload"] = 2025] = "DebugTriggerPopUpReload";
})(MenuCommandKey || (MenuCommandKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SettingFlavor.js
var SettingFlavor;
(function (SettingFlavor) {
    SettingFlavor[SettingFlavor["unknown"] = 0] = "unknown";
    SettingFlavor[SettingFlavor["PopUp"] = 1] = "PopUp";
    SettingFlavor[SettingFlavor["ContentAndPopUpStoredInPopUp"] = 2] = "ContentAndPopUpStoredInPopUp";
    SettingFlavor[SettingFlavor["ContentAndPopUpStoredInEach"] = 3] = "ContentAndPopUpStoredInEach";
    SettingFlavor[SettingFlavor["ContentOnly"] = 4] = "ContentOnly";
})(SettingFlavor || (SettingFlavor = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/UiHydrationData.js
class UiHydrationData {
    constructor(stateOfSitecoreWindow, scUrlAgent, stateOfStorageSnapShots, selectSnapShotId, uiVisiblityTestAgent, selectSnapShotName) {
        this.StateOfLiveHindSite = stateOfSitecoreWindow;
        this.SelectSnapShot = selectSnapShotId;
        this.ScUrlAgent = scUrlAgent;
        this.StateOfStorageSnapShots = stateOfStorageSnapShots;
        this.SelectSnapShotId = selectSnapShotId;
        this.SelectSnapShotNickname = selectSnapShotName;
        this.UiVisibilityTestAgent = uiVisiblityTestAgent;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/SelectSnapUiMutationEvent/SelectSnapUiMutationEvent_ObserverWithCallback.js

class SelectSnapUiMutationEvent_ObserverWithCallback_SelectSnapUiMutationEvent_ObserverWithCallback extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback = null) {
        super(hindeCore, SelectSnapUiMutationEvent_ObserverWithCallback_SelectSnapUiMutationEvent_ObserverWithCallback.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/UiModuleManagerPassThroughEvent/UiModuleManagerPassThroughEvent_Subject.js

class UiModuleManagerPassThroughEvent_Subject_UiModuleManagerPassThroughEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore) {
        super(hindeCore, UiModuleManagerPassThroughEvent_Subject_UiModuleManagerPassThroughEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/UiSettingBasedModuleMutationEvent/UiSettingBasedModuleMutationEvent_Observer.js

class UiSettingBasedModuleMutationEvent_Observer_UiSettingBasedModuleMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, UiSettingBasedModuleMutationEvent_Observer_UiSettingBasedModuleMutationEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/CommandButtonEvents.js
var CommandButtonEvents;
(function (CommandButtonEvents) {
    CommandButtonEvents[CommandButtonEvents["OnSingleClick"] = 0] = "OnSingleClick";
    CommandButtonEvents[CommandButtonEvents["OnDoubleClick"] = 1] = "OnDoubleClick";
})(CommandButtonEvents || (CommandButtonEvents = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/_UiModuleBase.js



class _UiModuleBase_UiModuleBase extends LoggableBase_HindeCoreBase {
    constructor(hindeCore, containerSelector) {
        super(hindeCore);
        this.Friendly = 'Not Set';
        this.ModuleKey = ModuleKey.Unknown;
        this.ContainerSelector = containerSelector;
    }
    Init_UiModuleBase() {
        this.Logger.FuncStart(this.Init_UiModuleBase.name, this.Friendly);
        this.ContainerUiDivElem = this.GetUiElement(this.ContainerSelector);
        if (StaticHelpers_StaticHelpers.IsNullOrUndefined(this.ContainerUiDivElem)) {
            this.ErrorHand.ErrorAndThrow(this.Init_UiModuleBase.name, 'Null: ' + this.ContainerSelector);
        }
        this.Logger.FuncEnd(this.Init_UiModuleBase.name, this.Friendly);
    }
    GetUiElement(uiSelector) {
        let toReturn = null;
        if (this.ContainerSelector) {
            toReturn = document.querySelector(uiSelector);
        }
        return toReturn;
    }
    Hydrate(refreshData) {
        this.Logger.FuncStart(this.Hydrate.name, this.Friendly);
        this.Logger.LogVal("container exists: ", this.DoesContainerExist().toString());
        this.RefreshData = refreshData;
        this.Logger.FuncEnd(this.Hydrate.name, this.Friendly);
    }
    DoesContainerExist() {
        let result = this.ContainerUiDivElem !== null;
        this.Logger.LogVal('does it exist ', result.toString());
        return result;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/SingleClickEvent/SingleClickEvent_Subject.js

class SingleClickEvent_Subject_SingleClickEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore, friendly) {
        super(hindeCore, friendly + ' ' + SingleClickEvent_Subject_SingleClickEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/ButtonModules/_baseButtonModule.js





class _baseButtonModule_base_ButtonModule extends _UiModuleBase_UiModuleBase {
    constructor(hindeCore, menuCommandDefinition) {
        super(hindeCore, menuCommandDefinition ? menuCommandDefinition.PlaceHolderSelector : null);
        this.ModuleKey = ModuleKey.Unknown;
        this.HTMLButtonElement = null;
        this.Friendly = this.MenuCommandDefinition ? MenuCommandKey[this.MenuCommandDefinition.MenuCommandKey] : this.ContainerSelector;
        this.MenuCommandDefinition = menuCommandDefinition;
    }
    Init_BaseButtonModule() {
        this.Init_UiModuleBase();
    }
    WireEvents_Base() {
        this.WireClickEvents();
    }
    BuildHtmlForModule_base_ButtonModule() {
        this.Logger.FuncStart(this.BuildHtmlForModule_base_ButtonModule.name, this.MenuCommandDefinition.InnerText + ' ' + MenuCommandKey[this.MenuCommandDefinition.MenuCommandKey]);
        if (this.ContainerUiDivElem) {
            this.BuildButtonElem();
            this.ContainerUiDivElem.classList.add('btn-container');
            this.ContainerUiDivElem.appendChild(this.HTMLButtonElement);
        }
        else {
            this.ErrorHand.ErrorAndContinue(this.BuildHtmlForModule_base_ButtonModule.name, 'Could not find ' + this.MenuCommandDefinition.PlaceHolderSelector);
        }
        this.Logger.FuncEnd(this.BuildHtmlForModule_base_ButtonModule.name);
    }
    WireClickEvents() {
        this.SingleButtonClickEvent_Subject = new SingleClickEvent_Subject_SingleClickEvent_Subject(this.HindeCore, MenuCommandKey[this.MenuCommandDefinition.MenuCommandKey]);
        if (this.MenuCommandDefinition && this.MenuCommandDefinition.PlaceHolderSelector) {
            var targetElem = document.querySelector(this.MenuCommandDefinition.PlaceHolderSelector);
            if (targetElem) {
                if (this.MenuCommandDefinition.EventHandlerData.Event === CommandButtonEvents.OnSingleClick) {
                    this.WireSingleClickEvent();
                }
                else if (this.MenuCommandDefinition.EventHandlerData.Event === CommandButtonEvents.OnDoubleClick) {
                    this.WireDoubleClickEvent();
                }
            }
            else {
                this.ErrorHand.ErrorAndThrow(this.WireClickEvents.name, 'did not find placeholder: ' + this.MenuCommandDefinition.PlaceHolderSelector);
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.WireClickEvents.name, 'no command or no command placeholder');
        }
    }
    BuildButtonElem() {
        this.HTMLButtonElement = document.createElement("button");
        this.HTMLButtonElement.classList.add("icon");
        this.HTMLButtonElement.classList.add(this.MenuCommandDefinition.IconClassName);
        this.HTMLButtonElement.innerText = this.MenuCommandDefinition.InnerText;
        this.HTMLButtonElement.type = "button";
    }
    WireSingleClickEvent() {
        if (this.HTMLButtonElement) {
            this.HTMLButtonElement.addEventListener('click', (evt) => {
                let singleClickEvent_payload = {
                    HandlerData: this.MenuCommandDefinition.EventHandlerData
                };
                this.SingleButtonClickEvent_Subject.NotifyObserversAsync(singleClickEvent_payload);
            });
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.WireSingleClickEvent.name, 'No button element: ' + this.MenuCommandDefinition.PlaceHolderSelector);
        }
    }
    WireDoubleClickEvent() {
        if (this.HTMLButtonElement) {
            this.HTMLButtonElement.ondblclick = (evt) => {
                let data = this.BuildCommandDataForPopUp();
                data.Evt = evt;
            };
        }
    }
    BuildCommandDataForPopUp() {
        let data = {
            EventMan: null,
            MenuCommandDefinition: this.MenuCommandDefinition,
            EventHandlerData: this.MenuCommandDefinition.EventHandlerData,
            Evt: null,
        };
        return data;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/ButtonModules/CancelButtonModule.js


class CancelButtonModule_CancelButtonModule extends _baseButtonModule_base_ButtonModule {
    constructor(hindeCore, menuCommandParameters) {
        super(hindeCore, menuCommandParameters);
        this.ModuleKey = ModuleKey.ButtonCancel;
    }
    WireEvents_Module() {
        this.WireEvents_Base();
    }
    Init_Module() {
        this.Init_BaseButtonModule();
    }
    BuildHtmlForModule() {
        this.BuildHtmlForModule_base_ButtonModule();
    }
    RefreshUi_Module() {
    }
    __GetCancelButton() {
        return this.ContainerUiDivElem;
    }
    SetCancelFlag() {
        var btn = this.__GetCancelButton();
        if (btn) {
            btn.classList.add('red');
        }
    }
    ClearCancelFlag() {
        var btn = this.__GetCancelButton();
        if (btn) {
            btn.classList.remove('red');
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/ButtonModules/CloseButtonModule.js




class CloseButtonModule_CloseButtonModule extends _baseButtonModule_base_ButtonModule {
    constructor() {
        super(...arguments);
        this.ModuleKey = ModuleKey.ButtonClose;
    }
    RefreshUi_Module() {
    }
    Init_Module() {
        this.Init_BaseButtonModule();
    }
    BuildHtmlForModule() {
        this.BuildHtmlForModule_base_ButtonModule();
        this.BuildElements();
    }
    WireEvents_Module() {
        this.WireEvents_Base();
    }
    GetCommandKey() {
        return this.MenuCommandDefinition.MenuCommandKey;
    }
    BuildElements() {
        this.Logger.FuncStart(this.BuildElements.name, this.MenuCommandDefinition.InnerText + ' ' + MenuCommandKey[this.MenuCommandDefinition.MenuCommandKey]);
        if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(this.ContainerUiDivElem)) {
            this.ContainerUiDivElem.appendChild(this.HTMLButtonElement);
        }
        else {
            this.ErrorHand.ErrorAndContinue(CloseButtonModule_CloseButtonModule.name, 'Could not find ' + this.MenuCommandDefinition.PlaceHolderSelector);
        }
        this.Logger.FuncEnd(this.BuildElements.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/SharedConst.js
let SharedConst = (() => {
    class SharedConst {
    }
    SharedConst.Const = {
        Debug: {
            ForceLoggingEnabled: false,
            SpeedUpAutoSaveIntervalFactor: 3,
        },
        IterHelper: {
            GrowthPerIteration: 0.5,
            MaxCount: {
                Default: 10,
                OverridePublishing: 15,
            },
            Timeouts: {
                Max: 3000,
                Default: 100,
            },
        },
        KeyWords: {
            Html: {
                Tags: {
                    Body: 'body',
                },
                beforeend: 'beforeend',
                optgroup: 'optgroup',
                Checkbox: 'checkbox',
                Checked: 'checked',
                Input: 'input',
                Label: 'label',
                For: 'for',
                Text: 'text',
                Number: 'number',
            },
            Javascript: {
                ReadyStates: {
                    Complete: "complete"
                }
            }
        },
        Logger: {
            MinTimeDiffMs: 100
        },
        ObjDiscriminator: {},
        Settings: {
            Defaults: {
                EnableDebugging: false,
                LogToStorage: false,
                UseCompactCss: false,
                LastUsedLogToStorageKey: 0
            }
        },
        Regex: {
            ContentEditor: /Content.*?Editor/ig,
            CleanGuid: /{|-|}/ig,
            NbSp: /&nbsp;/ig,
            QueryStrSeparatorQuest: /\?/gi,
            PageType: {
                Default: /.*default.aspx/ig,
                Edit: /sc_itemid=.*sc_mode=edit/ig,
                Normal: /sc_itemid=.*sc_mode=normal/ig,
                Preview: /sc_itemid=.*sc_mode=preview/ig,
                XmlControl: /.*xmlcontrol=Application/ig,
                PackageDesigner: /.*xmlcontrol=Application&.*Package+Designer/ig,
            },
        },
        UrlSuffix: {
            Desktop: '/sitecore/shell/default.aspx',
            Login: '/sitecore/login',
            LaunchPad: '/client/applications/launchpad',
            CE: '/sitecore/shell/Applications/Content Editor.aspx?sc_bw=1',
            SitecoreShellApplicationsContentEditor: 'sitecore/shell/Applications/Content-Editor',
            None: '/',
            AboutBlank: 'about:blank',
        },
    };
    return SharedConst;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/ButtonModules/InputWithButtonModule.js



class InputWithButtonModule_InputWithButtonModule extends _baseButtonModule_base_ButtonModule {
    constructor() {
        super(...arguments);
        this.ModuleKey = ModuleKey.ButtonWithInput;
    }
    WireEvents_Module() {
        this.WireEvents_Base();
    }
    Init_Module() {
        this.Init_BaseButtonModule();
    }
    BuildHtmlForModule() {
        this.BuildHtmlForModule_base_ButtonModule();
        this.InputElement = document.createElement(SharedConst.Const.KeyWords.Html.Input);
        this.InputElement.type = SharedConst.Const.KeyWords.Html.Text;
        this.InputElement.placeholder = "Set Nick Name";
        this.InputElement.value = '';
        if (this.ContainerUiDivElem) {
            this.ContainerUiDivElem.insertBefore(this.InputElement, this.HTMLButtonElement);
        }
    }
    GetInputValue() {
        let toReturn = "";
        if (this.InputElement) {
            toReturn = this.InputElement.value;
        }
        return toReturn;
    }
    RefreshUi_Module() {
        this.DrawCorrectNicknameInUI();
    }
    DrawCorrectNicknameInUI() {
        this.Logger.FuncStart(this.DrawCorrectNicknameInUI.name);
        let snapShots = this.RefreshData.StateOfStorageSnapShots.SnapShots;
        var targetId = this.RefreshData.SelectSnapShotId;
        if (targetId) {
            this.Logger.Log('targetId : ' + targetId.Raw);
            var storageValues = snapShots;
            if (storageValues) {
                for (var idx = 0; idx < storageValues.length; idx++) {
                    var candidate = storageValues[idx];
                    if (candidate.Meta.SnapshotId.Raw === this.RefreshData.SelectSnapShotId.Raw) {
                        this.Logger.Log('found one');
                        if (this.InputElement) {
                            this.InputElement.value = candidate.Friendly.NickName;
                            break;
                        }
                    }
                }
            }
            else {
                this.ErrorHand.WarningAndContinue(this.DrawCorrectNicknameInUI.name, 'null storage values');
            }
        }
        else {
            this.Logger.Log('No targetId');
        }
        this.Logger.FuncEnd(this.DrawCorrectNicknameInUI.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/ButtonModules/TypCommandButtonModule.js




class TypCommandButtonModule_TypCommandButtonModule extends _baseButtonModule_base_ButtonModule {
    constructor(hindeCore, menuCommandParameters) {
        super(hindeCore, menuCommandParameters);
        this.ModuleKey = ModuleKey.ButtonTypical;
    }
    Init_Module() {
        this.Logger.FuncStart(this.Init_Module.name, TypCommandButtonModule_TypCommandButtonModule.name);
        this.Init_BaseButtonModule();
        this.Logger.FuncEnd(this.Init_Module.name, TypCommandButtonModule_TypCommandButtonModule.name);
    }
    WireEvents_Module() {
        this.WireEvents_Base();
    }
    GetCommandKey() {
        return this.MenuCommandDefinition.MenuCommandKey;
    }
    BuildHtmlForModule() {
        this.BuildHtmlForModule_base_ButtonModule();
        this.BuildElements();
    }
    BuildButtonOverlay() {
        this.ElemDivBtnOverlay = document.createElement("div");
        this.ElemDivBtnOverlay.classList.add("btn-overlay");
        let backFill = this.BuildButtonOverlayBackFill();
        this.BuildButtonTextContainer();
        this.ElemDivBtnOverlay.appendChild(backFill);
        this.ElemDivBtnOverlay.appendChild(this.ElemButtonBackText);
    }
    BuildButtonOverlayBackFill() {
        let divElem = document.createElement("div");
        divElem.classList.add("back-fill");
        return divElem;
    }
    BuildButtonTextContainer() {
        this.ElemButtonBackText = document.createElement("div");
        this.ElemButtonBackText.classList.add("back-text");
        this.ElemButtonBackText.innerText = 'here is why it is disabled';
        return this.ElemButtonBackText;
    }
    BuildElements() {
        this.Logger.FuncStart(this.BuildElements.name, this.MenuCommandDefinition.InnerText + ' ' + MenuCommandKey[this.MenuCommandDefinition.MenuCommandKey]);
        if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(this.ContainerUiDivElem)) {
            this.BuildButtonOverlay();
            this.ContainerUiDivElem.classList.add('btn-container');
            this.ContainerUiDivElem.appendChild(this.ElemDivBtnOverlay);
            this.ContainerUiDivElem.appendChild(this.HTMLButtonElement);
        }
        else {
            this.ErrorHand.ErrorAndContinue(TypCommandButtonModule_TypCommandButtonModule.name, 'Could not find ' + this.MenuCommandDefinition.PlaceHolderSelector);
        }
        this.Logger.FuncEnd(this.BuildElements.name);
    }
    RefreshUi_Module() {
        this.Logger.FuncStart(this.RefreshUi_Module.name, this.Friendly);
        if (this.DoesContainerExist()) {
            let allresults = this.RefreshData.UiVisibilityTestAgent.TestAgainstAllSetControllers(this.MenuCommandDefinition);
            this.Logger.LogVal('test count', allresults.TestResults.length);
            this.SetCommandButtonVisibilityBasedOnResults(allresults);
        }
        else {
            this.Logger.Log('no placeholder ' + this.Friendly);
        }
        this.Logger.FuncEnd(this.RefreshUi_Module.name, this.Friendly);
    }
    SetCommandButtonVisibilityBasedOnResults(allresults) {
        this.Logger.FuncStart(this.SetCommandButtonVisibilityBasedOnResults.name, this.Friendly);
        this.Logger.LogAsJsonPretty(this.Friendly, allresults.TestResults);
        this.ErrorHand.ThrowIfNullOrUndefined(this.SetCommandButtonVisibilityBasedOnResults.name, [allresults, this.HTMLButtonElement]);
        if (!allresults.HasFailures()) {
            this.HTMLButtonElement.classList.remove('disabled');
            this.HTMLButtonElement.removeAttribute('disabled');
            if (this.ElemDivBtnOverlay) {
                this.ElemDivBtnOverlay.style.display = 'none';
            }
        }
        else {
            this.HTMLButtonElement.classList.add('disabled');
            this.HTMLButtonElement.setAttribute('disabled', 'disabled');
            if (this.ElemDivBtnOverlay) {
                this.ElemDivBtnOverlay.style.display = 'block';
            }
            if (this.ElemButtonBackText) {
                this.ElemButtonBackText.innerText = allresults.GetFriendlyFails();
            }
        }
        this.Logger.FuncEnd(this.SetCommandButtonVisibilityBasedOnResults.name, this.Friendly);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/ButtonModules/ButtonBasedModules.js







class ButtonBasedModules_ButtonBasedModulesBucket extends LoggableBase_HindeCoreBase {
    constructor(hindeCore, commandMan) {
        super(hindeCore);
        this.AllButtonBasedModules = [];
        this.Logger.CTORStart(ButtonBasedModules_ButtonBasedModulesBucket.name);
        this.CommandDefinitionBucket = commandMan;
        this.InstantiateButtonBasedModules();
        this.Logger.CTOREnd(ButtonBasedModules_ButtonBasedModulesBucket.name);
    }
    InstantiateButtonBasedModules() {
        this.Logger.FuncStart(this.InstantiateButtonBasedModules.name);
        this.PopulateMenuButtons();
        try {
        }
        catch (err) {
            this.ErrorHand.ErrorAndThrow(this.InstantiateButtonBasedModules.name, err);
        }
        this.Logger.FuncEnd(this.InstantiateButtonBasedModules.name);
    }
    PopulateMenuButtons() {
        this.Logger.FuncStart(this.PopulateMenuButtons.name);
        this.ErrorHand.ThrowIfNullOrUndefined(this.PopulateMenuButtons.name, [this.CommandDefinitionBucket]);
        if (this.CommandDefinitionBucket && this.CommandDefinitionBucket.MenuCommandParamsAr) {
            this.CommandDefinitionBucket.MenuCommandParamsAr.forEach((menuCommandParams) => {
                if (menuCommandParams.PlaceHolderSelector && menuCommandParams.PlaceHolderSelector.length > 0) {
                    if (menuCommandParams.ModuleKey == ModuleKey.ButtonTypical) {
                        this.AllButtonBasedModules.push(new TypCommandButtonModule_TypCommandButtonModule(this.HindeCore, menuCommandParams));
                    }
                    else if (menuCommandParams.ModuleKey == ModuleKey.ButtonWithInput) {
                        this.AllButtonBasedModules.push(new InputWithButtonModule_InputWithButtonModule(this.HindeCore, menuCommandParams));
                    }
                    else if (menuCommandParams.ModuleKey == ModuleKey.ButtonClose) {
                        this.AllButtonBasedModules.push(new CloseButtonModule_CloseButtonModule(this.HindeCore, menuCommandParams));
                    }
                    else if (menuCommandParams.ModuleKey == ModuleKey.ButtonCancel) {
                        this.AllButtonBasedModules.push(new CancelButtonModule_CancelButtonModule(this.HindeCore, menuCommandParams));
                    }
                }
                else {
                    this.Logger.Log('No ui for this command: ' + MenuCommandKey[menuCommandParams.MenuCommandKey]);
                }
            });
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.PopulateMenuButtons.name, 'no bucket or no array inside');
        }
        this.Logger.FuncEnd(this.PopulateMenuButtons.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/GuidData.js

let GuidData_GuidData = (() => {
    class GuidData {
        constructor(raw = null) {
            if (!raw) {
                this.Raw = GuidData.ConstEmptyGuid;
            }
            else {
                if (Guid_Guid.IsValidGuidStr(raw)) {
                    this.Raw = Guid_Guid.GuidStrWithDashes(raw);
                }
                else {
                    throw ('Invalid GUID string: ' + raw);
                }
            }
        }
    }
    GuidData.ConstEmptyGuid = '00000000-0000-0000-0000-000000000000';
    return GuidData;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/Guid.js

let Guid_Guid = (() => {
    class Guid {
        static NewRandomGuid() {
            let newGuid = new Guid();
            let randomStr = newGuid.GetRandomGuidString();
            let toReturn = new GuidData_GuidData(randomStr);
            return toReturn;
        }
        static GetEmptyGuid() {
            return new GuidData_GuidData();
        }
        static AsBracedGuid(guidData) {
            return '{' + guidData.Raw + "}";
        }
        static IsValidGuidStr(candidateStr) {
            let toReturn = false;
            let regexGuid = '^[\}]?[0-9a-f]{8}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{12}[\}]?$';
            let pattern = new RegExp(regexGuid, 'i');
            toReturn = pattern.test(candidateStr);
            return toReturn;
        }
        static AsShort(guidData) {
            var toReturn = '{error}';
            if (guidData) {
                if (this.IsValidGuidStr(guidData.Raw)) {
                    toReturn = guidData.Raw.substr(0, Guid.ShortGuidLength);
                }
                else {
                    toReturn = '{error - invalid guid string: ' + guidData.Raw + '}';
                }
            }
            return toReturn;
        }
        static WithoutDashes(guiddata) {
            let withoutDashes = guiddata.Raw.replace(/-/g, '');
            return withoutDashes;
        }
        static ParseGuid(val, throwOnError) {
            return new GuidData_GuidData(val);
        }
        MakeNewRandomGuid() {
            let randomStr = this.GetRandomGuidString();
            return new GuidData_GuidData(randomStr);
        }
        static GuidStrWithDashes(val) {
            let toReturn = '';
            let withoutDashes = val.replace(/-/g, '');
            var parts = [];
            if (withoutDashes.length !== 32) {
                throw (this.GuidStrWithDashes.name + ' - Wrong count wanted: ' + 32 + " got: " + withoutDashes.length + ' (without dashes) ' + withoutDashes);
            }
            parts.push(withoutDashes.slice(0, 8));
            parts.push(withoutDashes.slice(8, 12));
            parts.push(withoutDashes.slice(12, 16));
            parts.push(withoutDashes.slice(16, 20));
            parts.push(withoutDashes.slice(20, 32));
            toReturn = parts.join('-');
            return toReturn;
        }
        GetRandomGuidString() {
            var toReturn;
            var temp = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
            toReturn = temp.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0;
                var v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
            return toReturn;
        }
        MakeGuidFromString(val, throwOnError) {
            let toReturn = new GuidData_GuidData(val);
            return toReturn;
        }
    }
    Guid.ShortGuidLength = 4;
    return Guid;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Classes/StateHelpers.js

class StateHelpers_StateHelpers extends LoggableBase_HindeCoreBase {
    GetActiveTreeNodeFromStateOfTreeFlat(stateOfTree) {
        let toReturn = null;
        return stateOfTree.ActiveNodeFlat;
    }
    GetActiveTreeNodeFromStateOfContentEditor(stateOfContentEditor) {
        return this.GetActiveTreeNodeFromStateOfTreeFlat(stateOfContentEditor.StateOfContentTree);
    }
    GetActiveFrameFromStateOfDesktop(stateOfDesktop) {
        return stateOfDesktop.StateOfDTArea.StateOfDTFrames[stateOfDesktop.StateOfDTArea.ActiveDTFrameIndex];
    }
    GetActiveContentEditFromStateOfDesktop(stateOfDesktop) {
        let toReturn = null;
        if (stateOfDesktop && stateOfDesktop.StateOfDTArea.ActiveDTFrameIndex > -1) {
            return stateOfDesktop.StateOfDTArea.StateOfDTFrames[stateOfDesktop.StateOfDTArea.ActiveDTFrameIndex].StateOfContentEditor;
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/SelectSnapUiMutationEvent/SelectSnapUiMutationEvent_Subject.js

class SelectSnapUiMutationEvent_Subject_SelectSnapUiMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore) {
        super(hindeCore, SelectSnapUiMutationEvent_Subject_SelectSnapUiMutationEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/SelectSnapshotModule/SelectSnapshotModule.js












class SelectSnapshotModule_SelectSnapshotModule extends _UiModuleBase_UiModuleBase {
    constructor(hindeCore, containerSelector) {
        super(hindeCore, containerSelector);
        this.ModuleKey = ModuleKey.SelectSnapShot;
        this.Friendly = SelectSnapshotModule_SelectSnapshotModule.name;
        this.SelectSnapshotModule_Subject = new SelectSnapUiMutationEvent_Subject_SelectSnapUiMutationEvent_Subject(this.HindeCore);
        this.StateHelpers = new StateHelpers_StateHelpers(this.HindeCore);
    }
    Init_Module() {
        this.Init_UiModuleBase();
        this.SelectElement = this.ContainerUiDivElem.querySelector('select');
    }
    BuildHtmlForModule() {
    }
    WireEvents_Module() {
        this.Logger.FuncStart(this.WireEvents_Module.name, this.ContainerSelector);
        if (!this.SelectElement) {
            this.ErrorHand.ErrorAndThrow(this.WireEvents_Module.name, 'No Id: ' + this.ContainerSelector);
        }
        else {
            this.SelectElement.onchange = (() => {
                let self = this;
                let payload = {
                    SelectSnapshotId: this.GetSelectSnapshotId()
                };
                this.SelectSnapshotModule_Subject.NotifyObserversAsync(payload);
            });
        }
        this.Logger.FuncEnd(this.WireEvents_Module.name, this.ContainerSelector);
    }
    RefreshUi_Module() {
        this.PopulateStateOfSnapShotSelectElement();
    }
    SelectHeaderStr(prefix) {
        let toReturn = StaticHelpers_StaticHelpers.BufferString('', 4, BufferChar.Period, BufferDirection.right)
            + StaticHelpers_StaticHelpers.BufferString('Time Stamp', PopConst.Const.SnapShotFormat.lenTimestamp, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('Type', PopConst.Const.SnapShotFormat.lenPageType, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('Nickname', PopConst.Const.SnapShotFormat.lenNickname, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('Main Sec', PopConst.Const.SnapShotFormat.MainSectionNode, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('Active', PopConst.Const.SnapShotFormat.lenActiveNode, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('Fav.', PopConst.Const.SnapShotFormat.lenFavorite, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('Id', PopConst.Const.SnapShotFormat.lenShortId, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('#CE', PopConst.Const.SnapShotFormat.lenCeCount, BufferChar.Period, BufferDirection.right);
        return toReturn;
    }
    GetSelectSnapshotId() {
        this.Logger.FuncStart(this.GetSelectSnapshotId.name);
        let currentVal = this.SelectElement.value;
        this.Logger.LogVal('currentVal', currentVal);
        let toReturn;
        if (currentVal) {
            toReturn = Guid_Guid.ParseGuid(currentVal, true);
        }
        else {
            toReturn = Guid_Guid.GetEmptyGuid();
        }
        this.Logger.FuncEnd(this.GetSelectSnapshotId.name);
        return toReturn;
    }
    GetSelectSnapshotNickname() {
        this.Logger.FuncStart(this.GetSelectSnapshotId.name);
        let selectedIndex = this.SelectElement.selectedIndex;
        this.Logger.LogVal('selectedIndex', selectedIndex);
        let toReturn;
        if (selectedIndex && this.RefreshData && this.RefreshData.StateOfStorageSnapShots) {
            let snapShots = this.RefreshData.StateOfStorageSnapShots.SnapShots;
            if (snapShots) {
                let selected = snapShots[selectedIndex];
                if (selected) {
                    toReturn = selected.Friendly.NickName;
                }
            }
        }
        else {
            this.ErrorHand.WarningAndContinue(this.GetSelectSnapshotNickname.name, 'no match');
        }
        this.Logger.FuncEnd(this.GetSelectSnapshotId.name);
        return toReturn;
    }
    WriteHeaders() {
        var toReturn = {
            Auto: null,
            Favorite: null,
            AutoTitle: null,
            FavoriteTitle: null,
            Manual: null,
            ManualTitle: null
        };
        toReturn.Auto = window.document.createElement(SharedConst.Const.KeyWords.Html.optgroup);
        toReturn.Auto.label = this.SelectHeaderStr('');
        toReturn.Auto.id = PopConst.Const.ElemId.HS.SelectHeaderAuto;
        toReturn.AutoTitle = window.document.createElement(SharedConst.Const.KeyWords.Html.optgroup);
        toReturn.AutoTitle.label = 'Auto Snap Shots';
        toReturn.AutoTitle.id = PopConst.Const.ElemId.HS.SelectHeaderAutoTitle;
        toReturn.AutoTitle.classList.add('title');
        toReturn.Manual = window.document.createElement(SharedConst.Const.KeyWords.Html.optgroup);
        toReturn.Manual.label = this.SelectHeaderStr('');
        toReturn.Manual.id = PopConst.Const.ElemId.HS.SelectHeaderManual;
        toReturn.ManualTitle = window.document.createElement(SharedConst.Const.KeyWords.Html.optgroup);
        toReturn.ManualTitle.label = 'Manual Snap Shots';
        toReturn.ManualTitle.id = PopConst.Const.ElemId.HS.SelectHeaderManualTitle;
        toReturn.ManualTitle.classList.add('title');
        toReturn.Favorite = window.document.createElement(SharedConst.Const.KeyWords.Html.optgroup);
        toReturn.Favorite.label = this.SelectHeaderStr('');
        toReturn.Favorite.id = PopConst.Const.ElemId.HS.SelectHeaderFavorite;
        toReturn.FavoriteTitle = window.document.createElement(SharedConst.Const.KeyWords.Html.optgroup);
        toReturn.FavoriteTitle.label = 'Favorite Snap Shots';
        toReturn.FavoriteTitle.id = PopConst.Const.ElemId.HS.SelectHeaderFavoriteTitle;
        toReturn.FavoriteTitle.classList.add('title');
        return toReturn;
    }
    SelectChanged() {
        this.Logger.FuncStart(this.SelectChanged.name);
        this.Logger.FuncEnd(this.SelectChanged.name);
    }
    PopulateStateOfSnapShotSelectElement() {
        this.Logger.FuncStart(this.PopulateStateOfSnapShotSelectElement.name);
        let priorValue = this.GetSelectSnapshotId();
        if (this.RefreshData.StateOfStorageSnapShots && this.RefreshData.StateOfStorageSnapShots.SnapShots) {
            let stateOfScUiProxies = this.RefreshData.StateOfStorageSnapShots.SnapShots;
            if (this.SelectElement) {
                this.CleanExistingSelection(this.SelectElement);
                var headers = this.WriteHeaders();
                if (stateOfScUiProxies && stateOfScUiProxies.length > 0) {
                    for (var idx = 0; idx < stateOfScUiProxies.length; idx++) {
                        var stateOfScUiProxy = stateOfScUiProxies[idx];
                        this.ErrorHand.ThrowIfNullOrUndefined(this.PopulateStateOfSnapShotSelectElement.name, stateOfScUiProxy);
                        let el = this.BuildOneSnapshot(stateOfScUiProxy, priorValue, idx);
                        this.AppendSnapShotToCorrectGroup(stateOfScUiProxy, el, headers);
                    }
                }
                this.SelectElement.appendChild(headers.FavoriteTitle);
                this.SelectElement.appendChild(headers.Favorite);
                this.SelectElement.appendChild(headers.ManualTitle);
                this.SelectElement.appendChild(headers.Manual);
                this.SelectElement.appendChild(headers.AutoTitle);
                this.SelectElement.appendChild(headers.Auto);
            }
        }
        else {
            this.Logger.Log('no snap shots');
        }
        this.Logger.FuncEnd(this.PopulateStateOfSnapShotSelectElement.name);
    }
    GetFirstDataWithActiveNode(stateOfScUiProxy) {
        let toReturn = {
            StateOfContentEditorProxy: null,
            activeTreeNodeFlat: null
        };
        if (stateOfScUiProxy.Meta.WindowType === ScWindowType.Desktop) {
            if (stateOfScUiProxy.StateOfScWindow && stateOfScUiProxy.StateOfScWindow.StateOfDesktop && (stateOfScUiProxy.StateOfScWindow.StateOfDesktop.StateOfDTArea.ActiveDTFrameIndex > -1) && stateOfScUiProxy.StateOfScWindow.StateOfDesktop.StateOfDTArea.StateOfDTFrames) {
                let activeFrame = this.StateHelpers.GetActiveFrameFromStateOfDesktop(stateOfScUiProxy.StateOfScWindow.StateOfDesktop);
                toReturn.StateOfContentEditorProxy = activeFrame.StateOfContentEditor;
                toReturn.activeTreeNodeFlat = this.StateHelpers.GetActiveTreeNodeFromStateOfContentEditor(activeFrame.StateOfContentEditor);
            }
            else {
            }
        }
        else if ((stateOfScUiProxy.Meta.WindowType === ScWindowType.ContentEditor) && stateOfScUiProxy.StateOfScWindow.StateOfContentEditor && stateOfScUiProxy.StateOfScWindow.StateOfContentEditor.StateOfContentTree) {
            toReturn.activeTreeNodeFlat = this.StateHelpers.GetActiveTreeNodeFromStateOfContentEditor(toReturn.StateOfContentEditorProxy);
        }
        else {
            this.ErrorHand.WarningAndContinue(this.GetFirstDataWithActiveNode.name, 'Not implemented ' + StaticHelpers_StaticHelpers.ScWindowTypeFriendly(stateOfScUiProxy.Meta.WindowType));
        }
        return toReturn;
    }
    TimeNicknameFavStr(stateOfScUiProxy) {
        var typeStr = '';
        if (stateOfScUiProxy.Meta.WindowType === ScWindowType.ContentEditor) {
            typeStr = 'Cont Ed';
        }
        else if (stateOfScUiProxy.Meta.WindowType === ScWindowType.Desktop) {
            typeStr = 'Desktop';
        }
        var activeCeNode = '';
        let MainSectionNode = '';
        let candidateCe = this.GetFirstDataWithActiveNode(stateOfScUiProxy);
        if (candidateCe && candidateCe.activeTreeNodeFlat && candidateCe.activeTreeNodeFlat.Friendly) {
            activeCeNode = candidateCe.activeTreeNodeFlat.Friendly.trim();
        }
        else {
            MainSectionNode = 'todo ' + this.TimeNicknameFavStr.name;
        }
        let toReturn = StaticHelpers_StaticHelpers.BufferString(stateOfScUiProxy.Friendly.TimeStamp, PopConst.Const.SnapShotFormat.lenTimestamp, BufferChar.space, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString(typeStr, PopConst.Const.SnapShotFormat.lenPageType, BufferChar.Nbsp, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString(stateOfScUiProxy.Friendly.NickName, PopConst.Const.SnapShotFormat.lenNickname, BufferChar.Nbsp, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString(MainSectionNode, PopConst.Const.SnapShotFormat.MainSectionNode, BufferChar.Nbsp, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString(activeCeNode, PopConst.Const.SnapShotFormat.lenActiveNode, BufferChar.Nbsp, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString((stateOfScUiProxy.Meta.Flavor === SnapShotFlavor.Favorite ? '*' : ''), PopConst.Const.SnapShotFormat.lenFavorite, BufferChar.Nbsp, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString(Guid_Guid.AsShort(stateOfScUiProxy.Meta.SnapshotId), PopConst.Const.SnapShotFormat.lenShortId, BufferChar.Nbsp, BufferDirection.right);
        let count = "";
        if (stateOfScUiProxy
            &&
                stateOfScUiProxy.StateOfScWindow
            &&
                stateOfScUiProxy.StateOfScWindow.StateOfDesktop
            &&
                stateOfScUiProxy.StateOfScWindow.StateOfDesktop.StateOfDTArea
            &&
                stateOfScUiProxy.StateOfScWindow.StateOfDesktop.StateOfDTArea.StateOfDTFrames) {
            count = PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString(stateOfScUiProxy.StateOfScWindow.StateOfDesktop.StateOfDTArea.StateOfDTFrames.length.toString(), PopConst.Const.SnapShotFormat.lenCeCount, BufferChar.Nbsp, BufferDirection.right);
        }
        toReturn = toReturn + count;
        return toReturn;
    }
    BuildOneSnapshot(stateOfScUiProxy, prior, idx) {
        let el = window.document.createElement('option');
        let timeNicknameFavStr = this.TimeNicknameFavStr(stateOfScUiProxy);
        el.innerHTML = timeNicknameFavStr;
        if (stateOfScUiProxy.Meta.Flavor === SnapShotFlavor.Favorite) {
            el.classList.add('favorite');
        }
        el.value = stateOfScUiProxy.Meta.SnapshotId.Raw;
        if ((prior && stateOfScUiProxy.Meta.SnapshotId.Raw === prior.Raw) ||
            (idx === 0 && !prior)
            ||
                (idx === 0 && prior.Raw === Guid_Guid.GetEmptyGuid().Raw)) {
            el.selected = true;
        }
        return el;
    }
    AppendSnapShotToCorrectGroup(data, el, headers) {
        if (!StaticHelpers_StaticHelpers.IsNullOrUndefined([data, el, headers])) {
            if (data.Meta.Flavor === SnapShotFlavor.Autosave) {
                headers.Auto.appendChild(el);
            }
            else if (data.Meta.Flavor === SnapShotFlavor.Favorite) {
                headers.Favorite.appendChild(el);
            }
            else {
                headers.Manual.appendChild(el);
            }
        }
        else {
            this.ErrorHand.WarningAndContinue(this.AppendSnapShotToCorrectGroup.name, 'null in parameters');
        }
    }
    cleanOneGroup(targetSel, targetId) {
        var optGroup = targetSel.querySelector('[id=' + targetId + ']');
        if (optGroup) {
            optGroup.remove();
        }
    }
    CleanExistingSelection(targetSel) {
        this.Logger.FuncStart(this.CleanExistingSelection.name);
        this.cleanOneGroup(targetSel, PopConst.Const.ElemId.HS.SelectHeaderAuto);
        this.cleanOneGroup(targetSel, PopConst.Const.ElemId.HS.SelectHeaderAutoTitle);
        this.cleanOneGroup(targetSel, PopConst.Const.ElemId.HS.SelectHeaderFavorite);
        this.cleanOneGroup(targetSel, PopConst.Const.ElemId.HS.SelectHeaderFavoriteTitle);
        this.cleanOneGroup(targetSel, PopConst.Const.ElemId.HS.SelectHeaderManual);
        this.cleanOneGroup(targetSel, PopConst.Const.ElemId.HS.SelectHeaderManualTitle);
        targetSel.options.length = 0;
        this.Logger.FuncEnd(this.CleanExistingSelection.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SettingType.js
var SettingType;
(function (SettingType) {
    SettingType[SettingType["Unknown"] = 0] = "Unknown";
    SettingType[SettingType["BoolCheckBox"] = 1] = "BoolCheckBox";
    SettingType[SettingType["AccordionTypical"] = 2] = "AccordionTypical";
    SettingType[SettingType["AccordionDebugging"] = 3] = "AccordionDebugging";
    SettingType[SettingType["Number"] = 4] = "Number";
})(SettingType || (SettingType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/UiPresence.js
var UiPresence;
(function (UiPresence) {
    UiPresence[UiPresence["Unknown"] = 0] = "Unknown";
    UiPresence[UiPresence["HasUi"] = 1] = "HasUi";
    UiPresence[UiPresence["HasNoUi"] = 2] = "HasNoUi";
})(UiPresence || (UiPresence = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/UiSettingBasedModuleMutationEvent/UiSettingBasedModuleMutationEvent_Subject.js

class UiSettingBasedModuleMutationEvent_Subject_UiSettingBasedModuleMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore) {
        super(hindeCore, UiSettingBasedModuleMutationEvent_Subject_UiSettingBasedModuleMutationEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/SettingBasedModules/_SettingsBasedModulesBase.js




class _SettingsBasedModulesBase_SettingsBasedModulesBase extends _UiModuleBase_UiModuleBase {
    constructor(hindeCore, hindSiteSetting) {
        super(hindeCore, hindSiteSetting.HindSiteSetting.UiContainerSelector);
        this.Logger.CTORStart(_SettingsBasedModulesBase_SettingsBasedModulesBase.name);
        if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(hindSiteSetting)) {
            this.SettingJacket = hindSiteSetting;
            this.Friendly = _SettingsBasedModulesBase_SettingsBasedModulesBase.name + '-' + _3xxx_SettingKey_SettingKey[hindSiteSetting.HindSiteSetting.SettingKey];
        }
        else {
            this.ErrorHand.ErrorAndThrow(_SettingsBasedModulesBase_SettingsBasedModulesBase.name, 'Null settingsAgent or null hindSiteSetting');
        }
        this.Logger.CTOREnd(_SettingsBasedModulesBase_SettingsBasedModulesBase.name);
    }
    Init_BaseSettingsBasedModule() {
        this.Init_UiModuleBase();
        this.UiSettingBasedModuleMutationEvent_Subject = new UiSettingBasedModuleMutationEvent_Subject_UiSettingBasedModuleMutationEvent_Subject(this.HindeCore);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/SettingBasedModules/AccordianModule.js




class AccordianModule_AccordianModule extends _SettingsBasedModulesBase_SettingsBasedModulesBase {
    constructor() {
        super(...arguments);
        this.ModuleKey = ModuleKey.AccordionTypical;
        this.Friendly = AccordianModule_AccordianModule.name;
        this.IsEnabled = true;
    }
    Init_Module() {
        this.Logger.FuncStart(this.Init_Module.name, AccordianModule_AccordianModule.name);
        this.Init_BaseSettingsBasedModule();
        this.Logger.FuncEnd(this.Init_Module.name, AccordianModule_AccordianModule.name);
    }
    WireEvents_Module() {
        if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(this.AccordionTriggerElem)) {
            this.AccordionTriggerElem.addEventListener('click', (evt) => this.OnToggleAccordion(evt));
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.DroneRestoreAccordionState.name, 'trigger not found ' + this.SettingJacket.HindSiteSetting.FriendlySetting);
        }
    }
    DisableSelf() {
        console.log(this.ContainerSelector);
        this.IsEnabled = false;
    }
    BuildHtmlForModule() {
        this.Logger.FuncStart(this.BuildHtmlForModule.name);
        if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(this.ContainerUiDivElem)) {
            this.ContainerUiDivElem.style.display = 'block';
            this.AccordionTriggerElem = this.ContainerUiDivElem.querySelector('.accordion-trigger');
            this.AccordionContentElem = this.ContainerUiDivElem.querySelector('.accordion-content');
            if (!StaticHelpers_StaticHelpers.IsNullOrUndefined([this.AccordionTriggerElem, this.AccordionContentElem])) {
                this.AccordionTriggerElem.innerHTML = this.SettingJacket.HindSiteSetting.FriendlySetting;
            }
            else {
                this.ErrorHand.ErrorAndThrow(this.BuildHtmlForModule.name, 'null trigger: ' + this.ContainerSelector);
            }
        }
        if (StaticHelpers_StaticHelpers.IsNullOrUndefined([this.AccordionTriggerElem, this.AccordionContentElem])) {
            this.ErrorHand.ErrorAndThrow(this.BuildHtmlForModule.name, AccordianModule_AccordianModule.name + '  missing elem');
        }
        this.SetAccordionClass();
        if (!this.IsEnabled) {
            console.log(this.ContainerSelector);
            this.ContainerUiDivElem.style.display = 'none';
        }
        this.Logger.FuncEnd(this.BuildHtmlForModule.name);
    }
    RefreshUi_Module() {
        this.DroneRestoreAccordionState();
    }
    DroneRestoreAccordionState() {
        if (this.AccordionContentElem) {
            this.SetAccordionClass();
        }
    }
    OnToggleAccordion(evt) {
        this.Logger.FuncStart(this.OnToggleAccordion.name);
        if (this.AccordionContentElem && this.SettingJacket) {
            var newVal = !(this.SettingJacket.HindSiteSetting.ValueAsBool());
            if (this.SettingJacket) {
                let iUiElementChangeEvent_Payload = {
                    ModuleKey: this.ModuleKey,
                    HindSiteSetting: this.SettingJacket.HindSiteSetting,
                    CheckBoxModule: null,
                    NumberModule: null,
                    AccordianModule: {
                        NewVal: newVal
                    }
                };
                this.SettingJacket.HindSiteSetting.ValueAsObj = newVal;
                this.SetAccordionClass();
                this.UiSettingBasedModuleMutationEvent_Subject.NotifyObserversAsync(iUiElementChangeEvent_Payload);
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.OnToggleAccordion.name, 'did not find sib');
        }
        this.Logger.FuncEnd(this.OnToggleAccordion.name);
    }
    SetAccordionClass() {
        if (this.AccordionContentElem && this.AccordionTriggerElem) {
            if (this.SettingJacket.HindSiteSetting.ValueAsBool() !== true) {
                this.AccordionContentElem.classList.remove(PopConst.Const.ClassNames.HS.Collapsed);
                this.AccordionTriggerElem.classList.remove(PopConst.Const.ClassNames.HS.Down);
            }
            else {
                this.AccordionContentElem.classList.add(PopConst.Const.ClassNames.HS.Collapsed);
                this.AccordionTriggerElem.classList.add(PopConst.Const.ClassNames.HS.Down);
            }
        }
        else {
            this.ErrorHand.ErrorAndContinue(this.SetAccordionClass.name, 'null elems');
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/Enabled.js
var UiEnableState;
(function (UiEnableState) {
    UiEnableState[UiEnableState["Unknown"] = 0] = "Unknown";
    UiEnableState[UiEnableState["Enabled"] = 1] = "Enabled";
    UiEnableState[UiEnableState["Disabled"] = 2] = "Disabled";
})(UiEnableState || (UiEnableState = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/SettingBasedModules/HindSiteSettingCheckBoxModule.js





class HindSiteSettingCheckBoxModule_HindSiteSettingCheckBoxModule extends _SettingsBasedModulesBase_SettingsBasedModulesBase {
    constructor(hindeCore, hindSiteSetting) {
        super(hindeCore, hindSiteSetting);
        this.Friendly = HindSiteSettingCheckBoxModule_HindSiteSettingCheckBoxModule.name;
    }
    Init_Module() {
        this.Logger.FuncStart(this.Init_Module.name, this.Friendly);
        this.Init_BaseSettingsBasedModule();
        this.Logger.FuncEnd(this.Init_Module.name, this.Friendly);
    }
    WireEvents_Module() {
        this.Logger.FuncStart(this.WireEvents_Module.name, this.Friendly);
        if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(this.UiInputElement)) {
            this.UiInputElement.addEventListener('change', (evt) => this.OnCheckboxChanged(evt));
        }
        else {
            this.ErrorHand.WarningAndContinue(this.WireEvents_Module.name, 'null input element');
        }
        this.Logger.FuncEnd(this.WireEvents_Module.name, this.Friendly);
    }
    OnCheckboxChanged(evt) {
        let newValue = evt.target.checked;
        let iUiElementChangeEvent_Payload = {
            ModuleKey: this.ModuleKey,
            HindSiteSetting: this.SettingJacket.HindSiteSetting,
            CheckBoxModule: {
                Checked: newValue,
                SettingKey: this.SettingJacket.HindSiteSetting.SettingKey
            },
            NumberModule: null,
            AccordianModule: null,
        };
        this.SettingJacket.HindSiteSetting.ValueAsObj = newValue;
        this.UiSettingBasedModuleMutationEvent_Subject.NotifyObserversAsync(iUiElementChangeEvent_Payload);
    }
    BuildHtmlForModule() {
        this.UiInputElement = document.createElement(SharedConst.Const.KeyWords.Html.Input);
        this.UiInputElement.type = SharedConst.Const.KeyWords.Html.Checkbox;
        this.UiInputElement.checked = this.SettingJacket.HindSiteSetting.ValueAsBool();
        this.UiInputElement.id = "id-" + Guid_Guid.WithoutDashes(Guid_Guid.NewRandomGuid());
        this.LabelElement = document.createElement(SharedConst.Const.KeyWords.Html.Label);
        this.LabelElement.innerHTML = this.SettingJacket.HindSiteSetting.FriendlySetting;
        this.LabelElement.setAttribute(SharedConst.Const.KeyWords.Html.For, this.UiInputElement.id);
        if (this.SettingJacket.HindSiteSetting.EnabledState !== UiEnableState.Enabled) {
            this.UiInputElement.setAttribute('disabled', 'disabled');
            this.LabelElement.innerHTML = this.LabelElement.innerHTML + ' {disabled}';
        }
        if (this.ContainerUiDivElem) {
            this.ContainerUiDivElem.appendChild(this.UiInputElement);
            this.ContainerUiDivElem.appendChild(this.LabelElement);
        }
    }
    RefreshUi_Module() {
        if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(this.UiInputElement)) {
            let valueToDisplay = this.SettingJacket.HindSiteSetting.ValueAsBool();
            this.UiInputElement.checked = valueToDisplay;
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/SettingBasedModules/HindSiteSettingNumberModule.js




class HindSiteSettingNumberModule_HindSiteSettingNumberModule extends _SettingsBasedModulesBase_SettingsBasedModulesBase {
    constructor() {
        super(...arguments);
        this.Friendly = HindSiteSettingNumberModule_HindSiteSettingNumberModule.name;
    }
    Init_Module() {
        this.Init_BaseSettingsBasedModule();
    }
    BuildHtmlForModule() {
        this.UiInputElement = document.createElement(SharedConst.Const.KeyWords.Html.Input);
        this.UiInputElement.id = 'nm-' + Guid_Guid.WithoutDashes(Guid_Guid.NewRandomGuid());
        this.UiInputElement.type = SharedConst.Const.KeyWords.Html.Number;
        let hindsiteSettingForNumbers = this.SettingJacket.HindSiteSetting;
        if (hindsiteSettingForNumbers) {
            this.UiInputElement.min = hindsiteSettingForNumbers.Min.toString();
            this.UiInputElement.max = hindsiteSettingForNumbers.Max.toString();
        }
        this.UiInputElement.value = this.SettingJacket.HindSiteSetting.ValueAsInt().toString();
        this.LabelElement = document.createElement(SharedConst.Const.KeyWords.Html.Label);
        this.LabelElement.setAttribute(SharedConst.Const.KeyWords.Html.For, this.UiInputElement.id);
        this.LabelElement.innerHTML = this.SettingJacket.HindSiteSetting.FriendlySetting;
        if (this.ContainerUiDivElem) {
            this.ContainerUiDivElem.appendChild(this.UiInputElement);
            this.ContainerUiDivElem.appendChild(this.LabelElement);
        }
    }
    WireEvents_Module() {
        if (this.UiInputElement) {
            this.UiInputElement.addEventListener('change', (evt) => this.OnSettingChanged(evt));
        }
    }
    OnSettingChanged(evt) {
        let numberValue = parseInt(evt.target.value);
        let iUiElementChangeEvent_Payload = {
            ModuleKey: this.ModuleKey,
            CheckBoxModule: null,
            HindSiteSetting: this.SettingJacket.HindSiteSetting,
            NumberModule: {
                NumberValue: numberValue
            },
            AccordianModule: null,
        };
        this.SettingJacket.HindSiteSetting.ValueAsObj = numberValue;
        this.UiSettingBasedModuleMutationEvent_Subject.NotifyObserversAsync(iUiElementChangeEvent_Payload);
    }
    RefreshUi_Module() {
        if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(this.UiInputElement)) {
            let valueToDisplay = this.SettingJacket.HindSiteSetting.ValueAsInt();
            this.UiInputElement.value = valueToDisplay.toString();
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/SettingBasedModules/SettingsBasedModules.js








class SettingsBasedModules_SettingsBasedModules extends LoggableBase_HindeCoreBase {
    constructor(hindeCore, settingsAgent) {
        super(hindeCore);
        this.Logger.CTORStart(SettingsBasedModules_SettingsBasedModules.name);
        this.SettingsAgent = settingsAgent;
        this.DebuggingEnabled = this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.EnableDebugging).ValueAsBool();
        this.Instantiate_SettingsBasedModules();
        this.Logger.CTOREnd(SettingsBasedModules_SettingsBasedModules.name);
    }
    Instantiate_SettingsBasedModules() {
        this.Logger.FuncStart(this.Instantiate_SettingsBasedModules.name);
        this.CheckBoxModules = this.BuildCheckBoxSettingModules();
        this.NumberModules = this.BuildNumberSettingModules();
        this.AccordianModules = this.BuildAccordianModules();
        this.Logger.FuncEnd(this.Instantiate_SettingsBasedModules.name);
    }
    BuildAccordianModules() {
        let toReturn = [];
        this.SettingsAgent.HindSiteSettingsBucket.SettingWrappers.forEach((settingWrapper) => {
            let isNormalAccordian = settingWrapper.HindSiteSetting.ModuleType === ModuleKey.AccordionTypical;
            let isDebuggingAccordian = settingWrapper.HindSiteSetting.ModuleType === ModuleKey.AccordionDebugging;
            if (isNormalAccordian || isDebuggingAccordian) {
                let accordianModule = new AccordianModule_AccordianModule(this.HindeCore, settingWrapper);
                toReturn.push(accordianModule);
                if (isNormalAccordian || (isDebuggingAccordian && this.DebuggingEnabled)) {
                }
                else {
                    accordianModule.DisableSelf();
                }
            }
        });
        return toReturn;
    }
    BuildCheckBoxSettingModules() {
        let toReturn = [];
        this.SettingsAgent.HindSiteSettingsBucket.SettingWrappers.forEach((settingWrapper) => {
            if (settingWrapper.HindSiteSetting.DataType === SettingType.BoolCheckBox && settingWrapper.HindSiteSetting.HasUi === UiPresence.HasUi) {
                let hindSiteCheckboxSetting = new HindSiteSettingCheckBoxModule_HindSiteSettingCheckBoxModule(this.HindeCore, settingWrapper);
                toReturn.push(hindSiteCheckboxSetting);
            }
        });
        return toReturn;
    }
    BuildNumberSettingModules() {
        let toReturn = [];
        this.SettingsAgent.HindSiteSettingsBucket.SettingWrappers.forEach((settingWrapper) => {
            if (settingWrapper.HindSiteSetting.DataType === SettingType.Number && settingWrapper.HindSiteSetting.HasUi === UiPresence.HasUi) {
                let hindSiteCheckboxSetting = new HindSiteSettingNumberModule_HindSiteSettingNumberModule(this.HindeCore, settingWrapper);
                toReturn.push(hindSiteCheckboxSetting);
            }
        });
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/UiFeedbackModules/_UiFeedbackModuleBase.js



class _UiFeedbackModuleBase_UiFeedbackModuleBase extends _UiModuleBase_UiModuleBase {
    constructor(hindeCore, selector) {
        super(hindeCore, selector);
        this.indentedLineBreak = '<br/>&nbsp;&nbsp;&nbsp;';
        this.lineBreak = '<br/>';
        this.ModuleKey = ModuleKey.Unknown;
        this.ContainerSelector = selector;
    }
    Init_Module() {
        this.Init_UiModuleBase();
    }
    BuildHtmlForModule() {
        this.FeedbackTextContainer = document.createElement('div');
        let scroller = document.createElement('div');
        scroller.classList.add('scroller');
        let fullCol = document.createElement('div');
        fullCol.classList.add('col-full');
        let flexContainer = document.createElement('div');
        flexContainer.classList.add('flex-container');
        scroller.appendChild(this.FeedbackTextContainer);
        fullCol.appendChild(scroller);
        flexContainer.appendChild(fullCol);
        if (this.ContainerUiDivElem) {
            this.ContainerUiDivElem.appendChild(flexContainer);
        }
        else {
            this.ErrorHand.ErrorAndContinue(this.BuildHtmlForModule.name, this.Friendly);
        }
    }
    AddHtmlString(htmlText) {
        if (htmlText) {
            this.FeedbackTextContainer.insertAdjacentHTML(SharedConst.Const.KeyWords.Html.beforeend, htmlText);
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.AddHtmlString.name, 'htmlText');
        }
    }
    WriteManyLines(strAr) {
        if (strAr) {
            for (var ldx = 0; ldx < strAr.length; ldx++) {
                this.WriteSingleLine(strAr[ldx]);
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.WriteManyLines.name, 'No strAr');
        }
    }
    ClearFeedbackElem() {
        if (this.FeedbackTextContainer) {
            this.FeedbackTextContainer.innerHTML = '';
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.ClearFeedbackElem.name, 'No feedback elem found');
        }
    }
    ConvertIndents(input) {
        let toReturn = '';
        for (var idx = 0; idx < input.length; idx++) {
            let oneChar = input[idx];
            if (oneChar === ' ') {
                toReturn += '&nbsp;';
            }
            else {
                toReturn += input.substring(idx);
                break;
            }
        }
        return toReturn;
    }
    ConvertLineBreaks(input) {
        return input.replace(/\r?\n/g, "<br/>");
    }
    ConvertTabs(input) {
        return input.replace(/\t/g, "&nbsp;&nbsp;xxxxxx");
    }
    ConvertNBSP(input) {
        return input.replace(/&nbsp;/g, "&nbsp;&nbsp;");
    }
    WriteSingleLine(text) {
        this.FeedbackTextContainer.innerHTML += this.ConvertNBSP(this.ConvertIndents(this.ConvertTabs(this.ConvertLineBreaks(text)) + '<br/>'));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/UiFeedbackModules/FeedbackModuleBrowserState.js




class FeedbackModuleBrowserState_FeedbackModuleBrowserState extends _UiFeedbackModuleBase_UiFeedbackModuleBase {
    constructor() {
        super(...arguments);
        this.Friendly = FeedbackModuleBrowserState_FeedbackModuleBrowserState.name;
        this.ModuleKey = ModuleKey.BroswerState;
    }
    WireEvents_Module() {
    }
    RefreshUi_Module() {
        var targetCurrStateDiv = window.document.querySelector(PopConst.Const.Selector.HS.FeedbackBrowserState);
        var allStateText = 'Browser State' + this.lineBreak;
        allStateText += this.lineBreak + 'URL Parts';
        allStateText += this.indentedLineBreak + '<strong>Page Type:</strong> ' + StaticHelpers_StaticHelpers.ScWindowTypeFriendly(this.RefreshData.ScUrlAgent.GetScWindowType());
        let UrlParts = this.RefreshData.ScUrlAgent.GetUrlParts();
        allStateText += this.indentedLineBreak + 'Url Full (raw  ): ' + UrlParts.OriginalRaw;
        allStateText += this.indentedLineBreak + 'Protocol: ' + UrlParts.Protocol;
        allStateText += this.indentedLineBreak + 'Host & Port: ' + UrlParts.HostAndPort;
        allStateText += this.indentedLineBreak + 'File Path: ' + UrlParts.FilePath;
        targetCurrStateDiv.innerHTML = allStateText;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/UiFeedbackModules/FeedbackModuleContentState.js


class FeedbackModuleContentState_FeedbackModuleContentState extends _UiFeedbackModuleBase_UiFeedbackModuleBase {
    constructor() {
        super(...arguments);
        this.Friendly = FeedbackModuleContentState_FeedbackModuleContentState.name;
        this.ModuleKey = ModuleKey.ContentState;
    }
    WireEvents_Module() {
    }
    RefreshUi_Module() {
        this.ClearFeedbackElem();
        var allStateText = '';
        allStateText += JSON.stringify(this.RefreshData.StateOfLiveHindSite, null, '&nbsp;');
        this.WriteSingleLine(allStateText);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/UiFeedbackModules/FeedbackModuleMessages.js

class FeedbackModuleMessages_DebuggingFeedbackModuleMessages_Observer extends _UiFeedbackModuleBase_UiFeedbackModuleBase {
    UpdateAsync(payload) {
        this.ErrorHand.WarningAndContinue(this.UpdateAsync + ' ' + FeedbackModuleMessages_DebuggingFeedbackModuleMessages_Observer.name, 'not implemented yet');
    }
    RefreshUi_Module() {
    }
    WireEvents_Module() {
    }
    UpdateMsgStatusStack(textToShow) {
        this.AddHtmlString(textToShow + '</br>');
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/UiFeedbackModules/FeedbackModuleStateOfPopUp.js


class FeedbackModuleStateOfPopUp_FeedbackModuleStateOfPopUp extends _UiFeedbackModuleBase_UiFeedbackModuleBase {
    constructor() {
        super(...arguments);
        this.Friendly = FeedbackModuleStateOfPopUp_FeedbackModuleStateOfPopUp.name;
        this.ModuleKey = ModuleKey.PopUpState;
    }
    WireEvents_Module() {
    }
    RefreshUi_Module() {
        this.ClearFeedbackElem();
        this.AddHtmlString('not implemented');
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/UiFeedbackModules/UiFeedbackModuleLog.js


class UiFeedbackModuleLog_UiFeedbackModuleLog extends _UiFeedbackModuleBase_UiFeedbackModuleBase {
    constructor() {
        super(...arguments);
        this.Friendly = UiFeedbackModuleLog_UiFeedbackModuleLog.name;
        this.ModuleKey = ModuleKey.FeedbackModule;
        this.FriendlyName = UiFeedbackModuleLog_UiFeedbackModuleLog.name;
    }
    WireEvents_Module() {
    }
    RefreshUi_Module() {
    }
    WriteText(text) {
        this.WriteSingleLine(text);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Managers/UiManager/UiModulesManager.js
var UiModulesManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




















class UiModulesManager_UiModulesManager extends LoggableBase_HindeCoreBase {
    constructor(hindeCore, settingsAgent, commandDefinitionBucket, uiCommandsManager, uiVisibilityTestAgent, scUrlagent) {
        super(hindeCore);
        this.UiModules = [];
        this.FacetSettingsBasedModules = [];
        this.Logger.CTORStart(UiModulesManager_UiModulesManager.name);
        this.SettingsAgent = settingsAgent;
        this.CommandDefinitionBucket = commandDefinitionBucket;
        this.UiVisibilityTestAgent = uiVisibilityTestAgent;
        this.UiCommandsMan = uiCommandsManager;
        this.ScUrlAgent = scUrlagent;
        this.DebuggingEnabled = this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.EnableDebugging).ValueAsBool();
        if (StaticHelpers_StaticHelpers.IsNullOrUndefined([this.SettingsAgent, this.CommandDefinitionBucket, this.UiCommandsMan, this.UiVisibilityTestAgent, this.ScUrlAgent])) {
            throw (UiModulesManager_UiModulesManager.name + ' null at constructor');
        }
        this.InstantiateModules();
        this.Logger.CTOREnd(UiModulesManager_UiModulesManager.name);
    }
    InstantiateModules() {
        this.Logger.FuncStart(this.InstantiateModules.name);
        this.FacetModuleSelectSnapShots = new SelectSnapshotModule_SelectSnapshotModule(this.HindeCore, PopConst.Const.Selector.HS.ModuleContainers.SelStateSnapShot);
        this.UiModules.push(this.FacetModuleSelectSnapShots);
        if (this.DebuggingEnabled) {
            this.UiModules.push(new UiFeedbackModuleLog_UiFeedbackModuleLog(this.HindeCore, PopConst.Const.Selector.HS.FeedbackLogElement));
            this.UiModules.push(new FeedbackModuleBrowserState_FeedbackModuleBrowserState(this.HindeCore, PopConst.Const.Selector.HS.FeedbackBrowserState));
            this.UiModules.push(new FeedbackModuleStateOfPopUp_FeedbackModuleStateOfPopUp(this.HindeCore, PopConst.Const.Selector.HS.FeedbackPopUpState));
            this.UiModules.push(new FeedbackModuleContentState_FeedbackModuleContentState(this.HindeCore, PopConst.Const.Selector.HS.FeedbackContentState));
            this.UiModules.push(new FeedbackModuleContentState_FeedbackModuleContentState(this.HindeCore, PopConst.Const.Selector.HS.FeedbackMessages));
        }
        let settingsBaseModules = new SettingsBasedModules_SettingsBasedModules(this.HindeCore, this.SettingsAgent);
        this.FacetSettingsBasedModules = this.FacetSettingsBasedModules.concat(settingsBaseModules.AccordianModules);
        this.FacetSettingsBasedModules = this.FacetSettingsBasedModules.concat(settingsBaseModules.NumberModules);
        this.FacetSettingsBasedModules = this.FacetSettingsBasedModules.concat(settingsBaseModules.CheckBoxModules);
        this.UiModules = this.UiModules.concat(this.FacetSettingsBasedModules);
        let buttonBasedModules = new ButtonBasedModules_ButtonBasedModulesBucket(this.HindeCore, this.CommandDefinitionBucket);
        this.Logger.LogVal('buttonBaseModules ', buttonBasedModules.AllButtonBasedModules.length);
        this.UiModules = this.UiModules.concat(buttonBasedModules.AllButtonBasedModules);
        this.Logger.FuncEnd(this.InstantiateModules.name);
    }
    Init_UiMan() {
        this.Logger.FuncStart(this.Init_UiMan.name, UiModulesManager_UiModulesManager.name);
        this.WriteBuildNumToUi();
        if (this.UiModules) {
            this.UiModules.forEach((uiModule) => {
                if (uiModule) {
                    uiModule.Init_Module();
                    uiModule.BuildHtmlForModule();
                }
                else {
                    this.ErrorHand.ErrorAndThrow(this.Init_UiMan.name, 'null module');
                }
            });
        }
        this.UiCommandsMan.Init_ButtonStateManager();
        this.Logger.FuncEnd(this.Init_UiMan.name, UiModulesManager_UiModulesManager.name);
    }
    GetStateOfModules() {
        this.Logger.FuncStart(this.GetStateOfModules.name);
        let wrappedSettings = this.SettingsAgent.GetSettingsByFlavor([SettingFlavor.ContentAndPopUpStoredInPopUp, SettingFlavor.ContentOnly]);
        let settingsToSend = [];
        wrappedSettings.forEach((wrappedSetting) => settingsToSend.push(wrappedSetting.HindSiteSetting));
        let newNickname = "";
        if (this.FacetRenameButton) {
            newNickname = this.FacetRenameButton.GetInputValue();
        }
        var stateOfUiModules = {
            SelectSnapshotId: this.FacetModuleSelectSnapShots.GetSelectSnapshotId(),
            CurrentNicknameValue: '',
            SnapShotNewNickname: newNickname,
        };
        return stateOfUiModules;
    }
    WireEvents_ModulesManager() {
        this.Logger.FuncStart(this.WireEvents_ModulesManager.name);
        try {
            this.UiModuleManagerMutationEvent_Subject = new UiModuleManagerPassThroughEvent_Subject_UiModuleManagerPassThroughEvent_Subject(this.HindeCore);
            if (this.UiModules) {
                this.UiModules.forEach((uiModule) => uiModule.WireEvents_Module());
            }
            if (this.DebuggingEnabled) {
                this.DebuggingFeedbackModuleMessages = new FeedbackModuleMessages_DebuggingFeedbackModuleMessages_Observer(this.HindeCore, PopConst.Const.Selector.HS.DivOverlayModule);
            }
            this.SelectSnapshotModule_Observer = new SelectSnapUiMutationEvent_ObserverWithCallback_SelectSnapUiMutationEvent_ObserverWithCallback(this.HindeCore, this.OnRefreshUiUIManagerFromSnapShotSelect.bind(this));
            this.UiSettingBasedModuleMutationEvent_Observer = new UiSettingBasedModuleMutationEvent_Observer_UiSettingBasedModuleMutationEvent_Observer(this.HindeCore, this.OnUiSettingBasedModuleMutationEvent.bind(this));
            let moduleSelectSnapShots = this.GetModulesByModuleKey(ModuleKey.SelectSnapShot);
            if (moduleSelectSnapShots && moduleSelectSnapShots.length > 0) {
                let moduleSelectSnapShot = moduleSelectSnapShots[0];
                if (moduleSelectSnapShot) {
                    moduleSelectSnapShot.SelectSnapshotModule_Subject.RegisterObserver(this.SelectSnapshotModule_Observer);
                }
            }
            if (this.FacetSettingsBasedModules) {
                this.FacetSettingsBasedModules.forEach((settingBased) => {
                    settingBased.UiSettingBasedModuleMutationEvent_Subject.RegisterObserver(this.UiSettingBasedModuleMutationEvent_Observer);
                });
            }
            this.WireEventsOnCheckBoxes();
        }
        catch (err) {
            this.ErrorHand.ErrorAndThrow(this.WireEvents_ModulesManager.name, err);
        }
        this.Logger.FuncEnd(this.WireEvents_ModulesManager.name);
    }
    OnUiSettingBasedModuleMutationEvent(uiModuleMutationEvent_Payload) {
        this.Logger.FuncStart(this.OnUiSettingBasedModuleMutationEvent.name);
        if (this.SettingsAgent) {
            this.SettingsAgent.SetByKey(uiModuleMutationEvent_Payload.HindSiteSetting.SettingKey, uiModuleMutationEvent_Payload.HindSiteSetting.ValueAsObj);
        }
        this.Logger.FuncEnd(this.OnUiSettingBasedModuleMutationEvent.name);
    }
    WireEventsOnCheckBoxes() {
    }
    FilterUiModulesByMenuCommandKey(uiModules, menuCommandKey) {
        let toReturn = null;
        if (uiModules && uiModules.length > 0) {
            for (let uiModule of uiModules) {
                if (uiModule.GetCommandKey() === menuCommandKey) {
                    toReturn = uiModule;
                    break;
                }
            }
        }
        return toReturn;
    }
    GetFirstModuleByKey(moduleKey) {
        let toReturn = null;
        let uiModules = this.GetModulesByModuleKey(moduleKey);
        if (uiModules && uiModules.length > 0) {
            toReturn = uiModules[0];
        }
        return toReturn;
    }
    GetCommandButtonByKey(Ping) {
        let uiModules = this.GetModulesByModuleKey(ModuleKey.ButtonTypical);
        let toReturn = null;
        if (uiModules) {
            let typButton = this.FilterUiModulesByMenuCommandKey(uiModules, MenuCommandKey.Ping);
            if (typButton) {
                toReturn = typButton;
            }
        }
        return toReturn;
    }
    GetBaseButtonModules() {
        let toReturn = [];
        toReturn = toReturn.concat(this.GetModulesByModuleKey(ModuleKey.ButtonTypical));
        this.FacetRenameButton = this.GetFirstModuleByKey(ModuleKey.ButtonWithInput);
        toReturn = toReturn.concat(this.FacetRenameButton);
        toReturn = toReturn.concat(this.GetModulesByModuleKey(ModuleKey.ButtonCancel));
        toReturn = toReturn.concat(this.GetModulesByModuleKey(ModuleKey.ButtonClose));
        return toReturn;
    }
    GetModulesByModuleKey(moduleKey) {
        let toReturn = [];
        if (this.UiModules) {
            for (var idx = 0; idx < this.UiModules.length; idx++) {
                if (this.UiModules[idx].ModuleKey === moduleKey) {
                    toReturn.push(this.UiModules[idx]);
                }
            }
        }
        return toReturn;
    }
    ClosePopUp() {
        return new Promise((resolve, reject) => {
            this.Logger.FuncStart(this.ClosePopUp.name);
            try {
                if (this.DebuggingEnabled) {
                    this.DebuggingFeedbackModuleMessages.UpdateMsgStatusStack('Command Completed Successfully');
                }
                let setting = this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.DebugKeepDialogOpen);
                if (!setting.ValueAsBool()) {
                    window.close();
                }
                else {
                    this.Logger.Log('Window not closed because of setting: ' + setting.FriendlySetting);
                }
                resolve();
            }
            catch (err) {
                reject(this.ClosePopUp.name + ' ' + err);
            }
            this.Logger.FuncEnd(this.ClosePopUp.name);
        });
    }
    WriteBuildNumToUi() {
        this.Logger.LogVal('BuiltDateStamp', BuiltDateStamp);
        var targetTag = document.querySelector(PopConst.Const.Selector.HS.BuildStamp);
        if (targetTag) {
            targetTag.innerText = 'build stamp: ' + StaticHelpers_StaticHelpers.MakeFriendlyDate(new Date(BuiltDateStamp));
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.WriteBuildNumToUi.name, 'No Build Stamp Element Found');
        }
    }
    HydrateUi_UiModulesManager(uiHydrationData) {
        this.Logger.FuncStart(this.HydrateUi_UiModulesManager.name);
        this.Logger.LogAsJsonPretty('uiHydrationData.SelectSnapShot', uiHydrationData.SelectSnapShot);
        if (uiHydrationData) {
            if (uiHydrationData.StateOfLiveHindSite) {
                if (this.UiModules) {
                    this.UiModules.forEach((uiModule) => {
                        uiModule.DoesContainerExist();
                        uiModule.Hydrate(uiHydrationData);
                    });
                }
                this.UiCommandsMan.HydrateUi_UICommandManager(uiHydrationData);
            }
            else {
                this.ErrorHand.ErrorAndThrow(this.HydrateUi_UiModulesManager.name, 'null state');
            }
        }
        this.Logger.FuncEnd(this.HydrateUi_UiModulesManager.name);
    }
    RefreshModuleUis() {
        this.UiCommandsMan.RefreshUiModuleVisibilityStatus();
        if (this.UiModules) {
            this.UiModules.forEach((uiModule) => {
                this.Logger.LogVal('', (uiModule.ContainerUiDivElem !== null).toString());
                uiModule.RefreshUi_Module();
            });
        }
    }
    OnRefreshUiUIManagerFromSnapShotSelect(uiData) {
        return UiModulesManager_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.OnRefreshUiUIManagerFromSnapShotSelect.name);
            if (this.LastKnownSelectSnapshotId !== uiData.SelectSnapshotId) {
                this.LastKnownSelectSnapshotId = uiData.SelectSnapshotId;
                this.UpdateUiCommon();
            }
            this.Logger.FuncEnd(this.OnRefreshUiUIManagerFromSnapShotSelect.name);
        });
    }
    UpdateUiFromContentReply(stateOfScUiProxy, stateOfStorageSnapShots) {
        return UiModulesManager_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.UpdateUiFromContentReply.name);
            this.LastKnownSelectSnapshotId = this.FacetModuleSelectSnapShots.GetSelectSnapshotId();
            this.LastKnownSelectSnapshotNickname = this.FacetModuleSelectSnapShots.GetSelectSnapshotNickname();
            this.LastKnownStateOfLiveHindSite = stateOfScUiProxy;
            this.LastKnownStateOfStorageSnapShots = stateOfStorageSnapShots;
            this.UpdateUiCommon();
            this.Logger.FuncEnd(this.UpdateUiFromContentReply.name);
        });
    }
    UpdateUiCommon() {
        if (this.LastKnownStateOfLiveHindSite && this.LastKnownStateOfLiveHindSite.Meta) {
            this.UiVisibilityTestAgent.Hydrate(this.LastKnownStateOfLiveHindSite, this.LastKnownStateOfStorageSnapShots, this.LastKnownStateOfLiveHindSite.Meta.WindowType, this.LastKnownSelectSnapshotId);
            let refreshData = new UiHydrationData(this.LastKnownStateOfLiveHindSite, this.ScUrlAgent, this.LastKnownStateOfStorageSnapShots, this.LastKnownSelectSnapshotId, this.UiVisibilityTestAgent, this.LastKnownSelectSnapshotNickname);
            this.HydrateUi_UiModulesManager(refreshData);
            this.RefreshModuleUis();
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.UpdateUiFromContentReply.name, 'null state or meta');
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Managers/UiEventManager.js






class UiEventManager_UiEventManager extends LoggableBase_HindeCoreBase {
    constructor(hindeCore, uimodulesMan) {
        super(hindeCore);
        this.UiModulesMan = uimodulesMan;
        if (StaticHelpers_StaticHelpers.IsNullOrUndefined([uimodulesMan])) {
            throw (UiModulesManager_UiModulesManager.name + ' null at constructor');
        }
    }
    Init_UiEventManager() {
        this.Logger.FuncStart(this.Init_UiEventManager.name);
        this.UiCommandRaisedFlag_UiEventManagerRelay_Subject = new UiCommandFlagRaisedEvent_Subject_UiCommandFlagRaisedEvent_Subject(this.HindeCore);
        this.CommandButtonSingleClickEvent_Observer = new SingleClickEvent_Observer_SingleClickEvent_Observer(this.HindeCore, this.OnSingleClickEvent.bind(this));
        this.Logger.FuncEnd(this.Init_UiEventManager.name);
    }
    GetStateOfPopUp() {
        let stateOfUiModules = this.UiModulesMan.GetStateOfModules();
        let StateOfPopup = {
            NewNickName: stateOfUiModules.SnapShotNewNickname,
            SelectSnapShotId: stateOfUiModules.SelectSnapshotId,
        };
        return StateOfPopup;
    }
    OnSingleClickEvent(singleClickEventPayload) {
        this.Logger.Log('single click');
        let payload = {
            MsgFlag: singleClickEventPayload.HandlerData.MsgFlag,
            CommandType: singleClickEventPayload.HandlerData.CommandType,
            StateOfPopUp: this.GetStateOfPopUp()
        };
        this.UiCommandRaisedFlag_UiEventManagerRelay_Subject.NotifyObserversAsync(payload);
    }
    ;
    WireEvents_UiEventMan() {
        this.Logger.FuncStart(this.WireEvents_UiEventMan.name);
        this.ListenForCommandEvents();
        this.Logger.FuncEnd(this.WireEvents_UiEventMan.name);
    }
    ListenForSettingsEvents() {
    }
    ListenForCommandEvents() {
        this.Logger.FuncStart(this.ListenForCommandEvents.name);
        let baseButtonModules = this.UiModulesMan.GetBaseButtonModules();
        if (baseButtonModules) {
            baseButtonModules.forEach((baseButtonModule) => {
                if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(baseButtonModule.SingleButtonClickEvent_Subject)) {
                    baseButtonModule.SingleButtonClickEvent_Subject.RegisterObserver(this.CommandButtonSingleClickEvent_Observer);
                }
                else {
                    this.ErrorHand.WarningAndContinue(this.ListenForCommandEvents.name, 'null SingleButtonClickEvent_Subject ' + ModuleKey[baseButtonModule.ModuleKey]);
                }
            });
        }
        this.Logger.FuncEnd(this.ListenForCommandEvents.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/VisibilityType.js
var VisibilityType;
(function (VisibilityType) {
    VisibilityType[VisibilityType["Unknown"] = 0] = "Unknown";
    VisibilityType[VisibilityType["LoginPage"] = 1] = "LoginPage";
    VisibilityType[VisibilityType["Desktop"] = 2] = "Desktop";
    VisibilityType[VisibilityType["ContentEditor"] = 3] = "ContentEditor";
    VisibilityType[VisibilityType["Launchpad"] = 4] = "Launchpad";
    VisibilityType[VisibilityType["Edit"] = 5] = "Edit";
    VisibilityType[VisibilityType["Normal"] = 6] = "Normal";
    VisibilityType[VisibilityType["Preview"] = 7] = "Preview";
    VisibilityType[VisibilityType["SnapShotSelected"] = 8] = "SnapShotSelected";
    VisibilityType[VisibilityType["NotLogin"] = 9] = "NotLogin";
    VisibilityType[VisibilityType["CommandIsRunning"] = 10] = "CommandIsRunning";
    VisibilityType[VisibilityType["DesktopOrContentEditor"] = 11] = "DesktopOrContentEditor";
    VisibilityType[VisibilityType["SnapShotable"] = 12] = "SnapShotable";
    VisibilityType[VisibilityType["IfDesktopMin1ContentEditor"] = 13] = "IfDesktopMin1ContentEditor";
    VisibilityType[VisibilityType["DISABLED"] = 14] = "DISABLED";
})(VisibilityType || (VisibilityType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/Agents/IUiVisiblityTestResult.js

class IUiVisiblityTestResult_VisiblityTestResultsBucket extends LoggableBase_HindeCoreBase {
    constructor() {
        super(...arguments);
        this.TestResults = [];
    }
    HasFailures() {
        let oneFailed = false;
        if (this.TestResults) {
            this.TestResults.forEach((oneTest) => oneFailed = oneFailed || !oneTest || !oneTest.DidItPass);
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.HasFailures.name, 'null test results');
        }
        return oneFailed;
    }
    GetFriendlyFails() {
        let toReturn = '';
        if (this.TestResults) {
            this.TestResults.forEach((oneTest) => {
                if (oneTest) {
                    if (!oneTest.DidItPass) {
                        toReturn = ' ' + oneTest.FriendlyFailReason;
                    }
                }
                else {
                    this.Logger.LogAsJsonPretty('this.TestResults', this.TestResults);
                    this.ErrorHand.ErrorAndThrow(this.GetFriendlyFails.name, 'null single test result');
                }
            });
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.GetFriendlyFails.name, 'null testResults');
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/Agents/VisiblityTestResult.js
class VisiblityTestResult {
    constructor(testNameFriendly) {
        this.DidItPass = true;
        this.FriendlyFailReason = '';
        this.TestNameFriendly = testNameFriendly;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Managers/UiManager/UiVisibilityTestAgent.js







class UiVisibilityTestAgent_UiVisibilityTestAgent extends LoggableBase_HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
        this.SelectedSnapshot = null;
    }
    Hydrate(stateOfSitecoreWindow, stateOfStorageSnapShots, windowType, selectSnapShotId) {
        this.Logger.FuncStart(this.Hydrate.name);
        this.StateOfSitecoreWindow = stateOfSitecoreWindow;
        this.SelectedSnapshot = selectSnapShotId;
        this.WindowType = windowType;
        this.Logger.FuncEnd(this.Hydrate.name);
    }
    VisibilityTestWindowType(windowType, currentWindowType) {
        let OneResult = new VisiblityTestResult(this.VisibilityTestWindowType.name);
        OneResult.DidItPass = windowType === currentWindowType;
        if (!OneResult.DidItPass) {
            OneResult.FriendlyFailReason = 'Window types did not match: ' + StaticHelpers_StaticHelpers.ScWindowTypeFriendly(windowType) + ' vs ' + StaticHelpers_StaticHelpers.ScWindowTypeFriendly(currentWindowType);
        }
        return OneResult;
    }
    VisibilityTestSnapShotSelected(currSelSnapshot) {
        let OneResult = new VisiblityTestResult(this.VisibilityTestSnapShotSelected.name);
        OneResult.DidItPass = !StaticHelpers_StaticHelpers.IsNullOrUndefined(currSelSnapshot) && (Guid_Guid.AsBracedGuid(currSelSnapshot) !== Guid_Guid.AsBracedGuid(Guid_Guid.GetEmptyGuid()));
        if (!OneResult.DidItPass) {
            OneResult.FriendlyFailReason = "No snapshot selected";
        }
        return OneResult;
    }
    VisibilityTestSnapShotable(stateOfSitecoreWindow) {
        return this.VisibilityTestDesktopOrContentEditor(stateOfSitecoreWindow) && this.VisibilityTestIfDesktopMinOneConentEditorOpen(stateOfSitecoreWindow);
    }
    VisibilityTestIfDesktopMinOneConentEditorOpen(stateOfLiveHindSite) {
        this.Logger.FuncStart(this.VisibilityTestIfDesktopMinOneConentEditorOpen.name);
        let visiblityTestResult = new VisiblityTestResult(this.VisibilityTestIfDesktopMinOneConentEditorOpen.name);
        visiblityTestResult.DidItPass = ((stateOfLiveHindSite.Meta.WindowType === ScWindowType.Desktop && stateOfLiveHindSite.StateOfScWindow.StateOfDesktop.StateOfDTArea.ActiveDTFrameIndex > -1)
            ||
                (stateOfLiveHindSite.Meta.WindowType === ScWindowType.ContentEditor));
        if (!visiblityTestResult.DidItPass) {
            visiblityTestResult.FriendlyFailReason = 'Requires an open Content Editor';
        }
        this.Logger.FuncEnd(this.VisibilityTestIfDesktopMinOneConentEditorOpen.name, visiblityTestResult.DidItPass.toString());
        return visiblityTestResult;
    }
    VisibilityTestDesktopOrContentEditor(stateOfSitecoreWindow) {
        this.Logger.FuncStart(this.VisibilityTestDesktopOrContentEditor.name);
        let visiblityTestResult = new VisiblityTestResult(this.VisibilityTestDesktopOrContentEditor.name);
        if (this.StateOfSitecoreWindow) {
            visiblityTestResult.DidItPass = (stateOfSitecoreWindow.Meta.WindowType === ScWindowType.ContentEditor
                ||
                    stateOfSitecoreWindow.Meta.WindowType === ScWindowType.Desktop);
            if (!visiblityTestResult.DidItPass) {
                visiblityTestResult.FriendlyFailReason = 'Requires Content Editor or Desktop';
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.VisibilityTestDesktopOrContentEditor.name, 'null state');
        }
        this.Logger.FuncEnd(this.VisibilityTestDesktopOrContentEditor.name);
        return visiblityTestResult;
    }
    TestAgainstOneControl(oneControl) {
        this.Logger.FuncStart(this.TestAgainstOneControl.name, VisibilityType[oneControl]);
        let toReturn = null;
        switch (oneControl) {
            case VisibilityType.Desktop:
                toReturn = this.VisibilityTestWindowType(ScWindowType.Desktop, this.WindowType);
                break;
            case VisibilityType.DesktopOrContentEditor:
                toReturn = this.VisibilityTestDesktopOrContentEditor(this.StateOfSitecoreWindow);
                break;
            case VisibilityType.IfDesktopMin1ContentEditor:
                toReturn = this.VisibilityTestIfDesktopMinOneConentEditorOpen(this.StateOfSitecoreWindow);
                break;
            case VisibilityType.ContentEditor:
                toReturn = this.VisibilityTestWindowType(ScWindowType.ContentEditor, this.WindowType);
                break;
            case VisibilityType.Edit:
                toReturn = this.VisibilityTestWindowType(ScWindowType.Edit, this.WindowType);
                break;
            case VisibilityType.Launchpad:
                toReturn = this.VisibilityTestWindowType(ScWindowType.Launchpad, this.WindowType);
                break;
            case VisibilityType.LoginPage:
                toReturn = this.VisibilityTestWindowType(ScWindowType.LoginPage, this.WindowType);
                break;
            case VisibilityType.Normal:
                toReturn = this.VisibilityTestWindowType(ScWindowType.Normal, this.WindowType);
                break;
            case VisibilityType.Preview:
                toReturn = this.VisibilityTestWindowType(ScWindowType.Preview, this.WindowType);
                break;
            case VisibilityType.SnapShotable:
                toReturn = this.VisibilityTestSnapShotable(this.StateOfSitecoreWindow);
                break;
            case VisibilityType.SnapShotSelected:
                toReturn = this.VisibilityTestSnapShotSelected(this.SelectedSnapshot);
                break;
            case VisibilityType.NotLogin:
                toReturn = this.VisibilityTestWindowType(ScWindowType.LoginPage, this.WindowType);
                break;
            case VisibilityType.CommandIsRunning:
                break;
            case VisibilityType.DISABLED:
                toReturn = {
                    DidItPass: false,
                    FriendlyFailReason: 'Disabled/ Not working yet',
                    TestNameFriendly: 'Disabler',
                };
                break;
            case VisibilityType.Unknown:
                this.ErrorHand.ErrorAndThrow(this.TestAgainstAllSetControllers.name, 'unknown visibility type');
                break;
            default:
                this.ErrorHand.ErrorAndThrow(this.TestAgainstAllSetControllers.name, 'unknown visibility type');
                break;
        }
        if (!toReturn) {
            this.ErrorHand.ErrorAndThrow(this.TestAgainstOneControl.name, 'null test result');
        }
        this.Logger.FuncEnd(this.TestAgainstOneControl.name, toReturn.DidItPass.toString());
        return toReturn;
    }
    TestAgainstAllSetControllers(Command) {
        this.Logger.FuncStart(this.TestAgainstAllSetControllers.name, Command.VisibilityControllers.length);
        let allResults = new IUiVisiblityTestResult_VisiblityTestResultsBucket(this.HindeCore);
        if (this.StateOfSitecoreWindow) {
            if (Command.VisibilityControllers.length > 0) {
                for (var jdx = 0; jdx < Command.VisibilityControllers.length; jdx++) {
                    let oneControl = Command.VisibilityControllers[jdx];
                    let thisresult = this.TestAgainstOneControl(oneControl);
                    allResults.TestResults.push(thisresult);
                    if (!thisresult || allResults.HasFailures()) {
                        break;
                    }
                }
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.TestAgainstAllSetControllers.name, 'null stateOfSitecoreWindow');
        }
        this.Logger.FuncEnd(this.TestAgainstAllSetControllers.name, allResults.HasFailures().toString());
        return allResults;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/HindSiteUiLayer.js
var HindSiteUiLayer_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








var HindSiteUiLayer_HindSiteUiLayer;
(function (HindSiteUiLayer_1) {
    class HindSiteUiLayer extends LoggableBase_HindeCoreBase {
        constructor(hindeCore, settingsAgent, commandDefinitionBucket, scUrlAgent) {
            super(hindeCore);
            this.Logger.CTORStart(HindSiteUiLayer.name);
            try {
                this.SettingsAgent = settingsAgent;
                this.CommandDefinitionBucket = commandDefinitionBucket;
                this.ScUrlAgent = scUrlAgent;
                if (StaticHelpers_StaticHelpers.IsNullOrUndefined([this.SettingsAgent, this.ScUrlAgent, this.CommandDefinitionBucket])) {
                    this.ErrorHand.ErrorAndThrow(HindSiteUiLayer.name, 'null at constructor');
                }
                this.Instantiate_Ui();
                this.Init_Ui();
                this.WireEvents_Ui();
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(HindSiteUiLayer.name, err);
            }
            this.Logger.CTOREnd(HindSiteUiLayer.name);
        }
        GetStateOfPopUp() {
            return this.UiEventMan.GetStateOfPopUp();
        }
        OnContentReplyReceived(controllerMsgReceivedEvent_Payload) {
            this.Logger.FuncStart(this.OnContentReplyReceived.name);
            this.UiModulesMan.UpdateUiFromContentReply(controllerMsgReceivedEvent_Payload.StateOfScUiProxy_Live, controllerMsgReceivedEvent_Payload.StateOfStorageSnapShots);
            this.UiModulesMan.UpdateUiFromContentReply(controllerMsgReceivedEvent_Payload.StateOfScUiProxy_Live, controllerMsgReceivedEvent_Payload.StateOfStorageSnapShots);
            this.Logger.FuncEnd(this.OnContentReplyReceived.name);
        }
        Instantiate_Ui() {
            return HindSiteUiLayer_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.Instantiate_Ui.name);
                try {
                    this.UiVisibilityTestAgent = new UiVisibilityTestAgent_UiVisibilityTestAgent(this.HindeCore);
                    this.UiCommandsMan = new UiCommandsManager_UiCommandsManager(this.HindeCore, this.CommandDefinitionBucket, this.UiVisibilityTestAgent);
                    this.UiModulesMan = new UiModulesManager_UiModulesManager(this.HindeCore, this.SettingsAgent, this.CommandDefinitionBucket, this.UiCommandsMan, this.UiVisibilityTestAgent, this.ScUrlAgent);
                    this.UiEventMan = new UiEventManager_UiEventManager(this.HindeCore, this.UiModulesMan);
                }
                catch (err) {
                    console.log(err);
                }
                this.Logger.FuncEnd(this.Instantiate_Ui.name);
            });
        }
        Init_Ui() {
            return HindSiteUiLayer_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncEnd(this.Init_Ui.name);
                this.UiModulesMan.Init_UiMan();
                this.UiEventMan.Init_UiEventManager();
                this.Logger.FuncEnd(this.Init_Ui.name);
            });
        }
        WireEvents_Ui() {
            this.Logger.FuncStart(this.WireEvents_Ui.name);
            this.UiModulesMan.WireEvents_ModulesManager();
            this.UiEventMan.WireEvents_UiEventMan();
            this.FeedbackModuleMsg_Observer = new FeedbackModuleMessages_DebuggingFeedbackModuleMessages_Observer(this.HindeCore, PopConst.Const.Selector.HS.FeedbackMessages);
            this.UiCommandRaisedFlag_Subject = this.UiEventMan.UiCommandRaisedFlag_UiEventManagerRelay_Subject;
            this.Logger.FuncEnd(this.WireEvents_Ui.name);
        }
    }
    HindSiteUiLayer_1.HindSiteUiLayer = HindSiteUiLayer;
})(HindSiteUiLayer_HindSiteUiLayer || (HindSiteUiLayer_HindSiteUiLayer = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LogWriterBuffer.js
class LogWriterBuffer {
    constructor() {
        this.FriendlyName = LogWriterBuffer.name;
        this.LogPreInitBuffer = [];
        this.bufferPrefix = '* ';
    }
    WriteText(text) {
        this.LogPreInitBuffer.push(this.bufferPrefix + text);
    }
    GetBuffer() {
        let iterCheckMax = 1000;
        let toReturn = [];
        while (this.LogPreInitBuffer.length > 0 && iterCheckMax > 0) {
            iterCheckMax--;
            toReturn.push(this.LogPreInitBuffer.shift());
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LoggerTimer.js

class LoggerTimer_LoggerTimer {
    constructor() {
        this.TimeStart = new Date();
        this.TimeLast = this.TimeStart.getTime();
        this.TimeMarkStart = this.TimeLast;
    }
    GetTimeDiff() {
        let toReturn = '';
        let timeNow = new Date().getTime();
        let timeDiffSinceLastMs = timeNow - this.TimeLast;
        let timeDiffOVerAll = timeNow - this.TimeMarkStart;
        let toReturnSinceLast;
        let toReturnSinceStart;
        let padLength = 5;
        if (timeDiffSinceLastMs >= SharedConst.Const.Logger.MinTimeDiffMs) {
            toReturnSinceLast = this.padFront(timeDiffSinceLastMs, padLength);
        }
        else {
            toReturnSinceLast = this.padFront(' ', padLength, ' ');
        }
        ;
        toReturnSinceStart = this.padFront(timeDiffOVerAll, padLength, '0');
        toReturn = toReturnSinceStart + ' ' + toReturnSinceLast;
        this.TimeLast = timeNow;
        return toReturn;
    }
    padFront(input, desiredLength = 2, padChar = '0') {
        let toReturn = input.toString();
        let maxIter = 10;
        while ((toReturn.length < desiredLength) && maxIter > 0) {
            maxIter--;
            toReturn = padChar + toReturn;
        }
        return toReturn;
    }
    LogTimeStamp() {
        var result = this.padFront(this.TimeStart.getDate()) + "/" + this.padFront(this.TimeStart.getMonth() + 1) + "/" + this.TimeStart.getFullYear() + " " + this.padFront(this.TimeStart.getHours()) + ":" + this.padFront(this.TimeStart.getMinutes());
        return result;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LoggerAgent.js
var LoggerAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







var StyleMode;
(function (StyleMode) {
    StyleMode[StyleMode["Default"] = 0] = "Default";
    StyleMode[StyleMode["Highlight"] = 1] = "Highlight";
})(StyleMode || (StyleMode = {}));
class LoggerAgent_LoggerAgent {
    constructor() {
        this.MaxIndent = 20;
        this.AllLogWriters = [];
        this.__debugTextChangedCallbacks = [];
        this.UseTimeStamp = true;
        this.styleBgYellow = "[43m";
        this.styleEsc = "\x1b";
        this.styleFgBlue = "[34m";
        this.styleFgGreen = "[32m";
        this.styleFgMagenta = "[35m";
        this.styleFgRed = "[31m";
        this.styleReset = "[0m";
        this.Discriminator = Discriminator.ILoggerAgent;
        this.MaxDepthBeforeThrow = 2000;
        this.Timer = new LoggerTimer_LoggerTimer;
        this.BufferWriter = new LogWriterBuffer();
        this.AddWriter(this.BufferWriter);
        this.__callDepth = -1;
        this.LogVal('TimeStamp', this.Timer.LogTimeStamp());
    }
    Instantiate() {
    }
    FlushBuffer() {
        this.RemoveWriter(this.BufferWriter);
        this.LogVal('TimeStamp B', Date.now());
        let bufferAr = this.BufferWriter.GetBuffer();
        for (var idx = 0; idx < bufferAr.length; idx++) {
            this.Log(bufferAr[idx]);
        }
    }
    RemoveWriter(BufferWriter) {
        for (var idx = 0; idx < this.AllLogWriters.length; idx++) {
            let candidate = this.AllLogWriters[idx];
            if (candidate == BufferWriter) {
                this.AllLogWriters.splice(idx, 1);
                break;
            }
        }
    }
    AddWriter(writter) {
        this.HasWriters = true;
        this.AllLogWriters.push(writter);
    }
    SectionMarker(sectionTag) {
        this.Log("");
        this.Log("======================= " + sectionTag + " =======================");
        this.Log("");
    }
    IsNotNullOrUndefinedBool(title, subject) {
        var toReturn = false;
        if (subject) {
            if ((typeof subject) === 'undefined') {
                this.LogVal(title + ' Is Not Undefined', '!!! false !!!');
            }
            else {
                toReturn = true;
            }
        }
        else {
            this.LogVal(title + ' Is Not Null', '!!! false !!!');
        }
        return toReturn;
    }
    HandlerClearDebugText(self, verify = false) {
        this.FuncStart(this.HandlerClearDebugText.name);
        var proceed = true;
        if (verify) {
            proceed = confirm('Clear Debug TextArea ?');
        }
        if (proceed) {
            var newText = '--- Debug Text Reset ---';
        }
        this.FuncEnd(this.HandlerClearDebugText.name);
    }
    MarkerA() {
        this.__markerRaw('A');
    }
    MarkerB() {
        this.__markerRaw('B');
    }
    MarkerC() {
        this.__markerRaw('C');
    }
    MarkerD() {
        this.__markerRaw('D');
    }
    MarkerE() { this.__markerRaw('E'); }
    MarkerF() { this.__markerRaw('F'); }
    __markerRaw(marker) {
        this.Log('Marker ' + marker);
    }
    LogAsJsonPretty(texValName, jsonObj) {
        try {
            this.LogVal(texValName, JSON.stringify(jsonObj, null, 2));
        }
        catch (err) {
            this.Log('Unable to stringify obj');
        }
    }
    LogVal(textValName, textVal) {
        if (typeof textVal === 'undefined') {
            textVal = '{undefined}';
        }
        else if (textVal === null) {
            textVal = '{null}';
        }
        else {
            var asGuid = textVal;
            if (typeof asGuid === typeof GuidData_GuidData) {
                textVal = asGuid.Raw;
            }
        }
        textVal = textVal.toString();
        textValName = StaticHelpers_StaticHelpers.BufferString(textValName.toString(), 26, BufferChar.space, BufferDirection.right);
        const debugPrefix = '~~ ';
        let rawText = debugPrefix + textValName + ' : ' + textVal;
        if (this.AltColor === this.styleFgBlue) {
            this.AltColor = this.styleFgMagenta;
        }
        else {
            this.AltColor = this.styleFgBlue;
        }
        let formattedText = this.StyleFormat(this.AltColor, rawText);
        this.Log(formattedText);
    }
    LogImportant(text) {
        text = this.StyleFormat(this.styleBgYellow, text);
        this.Log(text);
    }
    Log(text, optionalValue = '', hasPrefix = false) {
        return LoggerAgent_awaiter(this, void 0, void 0, function* () {
            if (this.HasWriters) {
                var indent = '  ';
                let indentDepth = this.__callDepth % this.MaxIndent;
                for (var idx = 0; idx < indentDepth; idx++) {
                    text = indent + text;
                }
                var prefixLength = 3;
                if (!hasPrefix) {
                    for (var idx = 0; idx < prefixLength; idx++) {
                        text = ' ' + text;
                    }
                }
                this.__triggerAllDebugTextChangedCallbacks({
                    NewText: text,
                    Append: true
                });
                if (this.UseTimeStamp) {
                    let timeDiff = this.Timer.GetTimeDiff() + '  ';
                    text = timeDiff + text;
                }
                this.WriteToAllWriters(text);
            }
        });
    }
    WriteToAllWriters(text) {
        if (this.AllLogWriters) {
            this.AllLogWriters.forEach((oneWriter) => {
                if (oneWriter) {
                    try {
                        oneWriter.WriteText(text);
                    }
                    catch (err) {
                        console.log(this.WriteToAllWriters.name + ' ' + oneWriter.FriendlyName + ' | ' + err);
                    }
                }
                else {
                    console.log('Null writer');
                }
            });
        }
    }
    __triggerAllDebugTextChangedCallbacks(data) {
        for (var idx = 0; idx < this.__debugTextChangedCallbacks.length; idx++) {
            var oneCallback = this.__debugTextChangedCallbacks[idx];
            oneCallback.Func(oneCallback.Caller, data);
        }
    }
    StyleFormat(color, text) {
        return this.styleEsc + color + text + this.styleEsc + this.styleReset;
    }
    CtorName(ctorName) {
        this.Log('Constructor: ' + ctorName);
    }
    FuncStart(textOrFunc, optionalValue) {
        textOrFunc = 's' + ' ' + this.__callDepth + ') ' + textOrFunc;
        if (!optionalValue) {
            optionalValue = '';
        }
        else {
            optionalValue = optionalValue.toString();
        }
        if (optionalValue.length > 0) {
            textOrFunc = textOrFunc + ' : ' + optionalValue;
        }
        let formatted = this.StyleFormat(this.styleFgGreen, textOrFunc);
        this.Log(formatted, '', true);
        this.__callDepth++;
        if (this.__callDepth > this.MaxDepthBeforeThrow) {
            throw ('Logger - Max Depth Exceeded: ' + this.__callDepth);
        }
    }
    CTORStart(text) {
        this.FuncStart("[CTOR] " + text);
    }
    CTOREnd(text) {
        this.FuncEnd("[CTOR] " + text);
    }
    FuncEnd(text, optionalValueInput) {
        this.__callDepth--;
        if (this.__callDepth < 0) {
            this.__callDepth = 0;
        }
        text = 'e' + ' ' + this.__callDepth + ') ' + text;
        if (optionalValue !== null && (typeof optionalValue === typeof Boolean)) {
            optionalValue = optionalValue.toString();
        }
        if (!optionalValueInput) {
            optionalValueInput = '';
        }
        var optionalValue = optionalValueInput.toString();
        if (optionalValue.length > 0) {
            text = text + ' : ' + optionalValue;
        }
        let formatted = this.StyleFormat(this.styleFgRed, text);
        this.Log(formatted, '', true);
        this.Log(formatted, optionalValue, true);
    }
    NotNullCheck(title, value) {
        if (typeof value === 'undefined') {
            this.LogVal(title, 'Is Undefined');
        }
        else if (!value) {
            this.LogVal(title, 'Is Null');
        }
        else {
            this.LogVal(title, 'Is Not Null');
        }
    }
    IsNullOrUndefined(subject) {
        var toReturn = '{unknown}';
        if (subject) {
            if ((typeof subject) === 'undefined') {
                toReturn = 'Is Undefined';
            }
            else {
                toReturn = 'Not Null';
            }
        }
        else {
            toReturn = 'Is Null';
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/DesktopProxyMutationEvent/TaskListMutationEvent_Subject.js

class TaskListMutationEvent_Subject_TaskListMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor() {
        super(...arguments);
        this.Friendly_Subject = TaskListMutationEvent_Subject_TaskListMutationEvent_Subject.name;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/TaskMutationType.js
var TaskMutationType;
(function (TaskMutationType) {
    TaskMutationType[TaskMutationType["TaskAdded"] = 0] = "TaskAdded";
    TaskMutationType[TaskMutationType["TaskCompleted"] = 1] = "TaskCompleted";
    TaskMutationType[TaskMutationType["TasksHaveGoneIdle"] = 2] = "TasksHaveGoneIdle";
})(TaskMutationType || (TaskMutationType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/TaskMonitor.js



class TaskMonitor_TaskMonitor {
    constructor(logger) {
        this.TaskBucketStarted = [];
        this.TaskBucketCompleted = [];
        this.DelaySendMs = 3000;
        this.CancelRequestedFlag = false;
        this.IdleNotificationSent = false;
        this.MinElapsedBeforeIsIdleMs = 3000;
        this.Discriminator = Discriminator.TaskMonitor;
        this.Logger = logger;
    }
    IntroduceErrorHand(errorHand) {
        this.ErrorHand = errorHand;
    }
    Instantiate() {
        if (this.ErrorHand) {
            this.TaskMutationEvent_Subject = new TaskListMutationEvent_Subject_TaskListMutationEvent_Subject(this.Logger, this.ErrorHand, TaskMonitor_TaskMonitor.name);
        }
        else {
            throw ('no error handler attached');
        }
    }
    AsyncTaskStarted(name) {
        this.MarkActivity();
        this.TaskBucketStarted.push(name);
        this.Logger.LogImportant('Task remaining : total - ' + this.TaskBucketStarted.length + ' : ' + this.totalTaskCount());
        this.BuildAndSendPayload(TaskMutationType.TaskAdded);
        this.LogValues();
    }
    MarkActivity() {
        this.LastActivityTime = new Date().getTime();
        this.IdleNotificationSent = false;
    }
    IsTaskListEmpty() {
        return this.TaskBucketStarted.length === 0;
    }
    totalTaskCount() {
        return this.TaskBucketCompleted.length + this.TaskBucketStarted.length;
    }
    AsyncTaskCompleted(name) {
        this.Logger.FuncStart(this.AsyncTaskCompleted.name, name);
        this.MarkActivity();
        let foundIndex = this.TaskBucketStarted.indexOf(name);
        if (foundIndex > -1) {
            let toRemove = this.TaskBucketStarted.splice(foundIndex, 1);
            this.TaskBucketCompleted.push(toRemove[0]);
            this.SendIfEmpty();
        }
        else {
            console.log('Error - mismatch on tasks ' + name);
            console.log(JSON.stringify(this.TaskBucketStarted, null, 2));
        }
        this.BuildAndSendPayload(TaskMutationType.TaskCompleted);
        this.LogValues();
        this.Logger.FuncEnd(this.AsyncTaskCompleted.name, name);
    }
    LogValues() {
        this.Logger.LogImportant(this.LogValues.name + ' Task remaining : total - ' + this.TaskBucketStarted.length + ' : ' + this.totalTaskCount());
        if (this.AsyncTaskStarted.length < 20) {
            this.Logger.LogAsJsonPretty('TaskBucketStarted', this.TaskBucketStarted);
        }
    }
    SendIfEmpty() {
        if (this.IsTaskListEmpty()) {
            this.DelaySend();
        }
    }
    BuildAndSendPayload(mutationType) {
        console.log('Sending payload');
        let payload = {
            MutationType: mutationType,
            IsTaskEmpty: this.IsTaskListEmpty(),
            RemainingTaskCount: this.TaskBucketStarted.length,
            TotalTaskCount: this.totalTaskCount(),
            CompletedCount: this.TaskBucketCompleted.length,
        };
        this.TaskMutationEvent_Subject.NotifyObserversAsync(payload);
    }
    TimeRemainingBeforeIdle() {
        let timeElapsedSinceLastActivity = new Date().getTime() - this.LastActivityTime;
        let timeRemainingBeforeIdle = this.MinElapsedBeforeIsIdleMs - timeElapsedSinceLastActivity;
        if (timeRemainingBeforeIdle < 0) {
            timeRemainingBeforeIdle = 0;
        }
        return timeRemainingBeforeIdle;
    }
    TasksHaveGoneIdle() {
        let timeRemaining = this.TimeRemainingBeforeIdle();
        let toReturn = timeRemaining < 1;
        return toReturn;
    }
    SendTaskHaveGoneIdle() {
        this.IdleNotificationSent = true;
        this.BuildAndSendPayload(TaskMutationType.TasksHaveGoneIdle);
    }
    IsEmptyAndIdle() {
        let toReturn = this.IsTaskListEmpty() && this.TasksHaveGoneIdle();
        return toReturn;
    }
    DelaySend() {
        if (!this.IdleNotificationSent) {
            if (this.IsEmptyAndIdle()) {
                this.SendTaskHaveGoneIdle();
            }
            else {
                setTimeout(() => {
                    this.DelaySend();
                }, this.DelaySendMs);
            }
        }
    }
    RequestCancel() {
        this.CancelRequestedFlag = true;
    }
    IsCancelRequested() {
        return this.CancelRequestedFlag;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LoggerConsoleWriter.js
class LoggerConsoleWriter {
    constructor() {
        this.FriendlyName = LoggerConsoleWriter.name;
    }
    WriteText(text) {
        console.log(text);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LoggerStorageWriter.js
var LoggerStorageWriter_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class LoggerStorageWriter {
    constructor() {
        this.FriendlyName = LoggerStorageWriter.name;
        this.CurrentStorageLogKey = '0';
        this.LogToStoragePrefix = 'Hindsite.Log.';
        this.StorageLogCombined = "";
    }
    WriteText(text) {
    }
    SetLogToStorageKey(logToStorageIndex) {
        this.CurrentStorageLogKey = this.LogToStoragePrefix + logToStorageIndex;
    }
    WriteLogToStorage(logMessage) {
        return LoggerStorageWriter_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => LoggerStorageWriter_awaiter(this, void 0, void 0, function* () {
                this.StorageLogCombined += "|||" + JSON.stringify(logMessage);
                if (this.CurrentStorageLogKey) {
                    window.localStorage.setItem(this.CurrentStorageLogKey, this.StorageLogCombined);
                }
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/RepositoryAgent/RepositoryAgent.js

class RepositoryAgent_RepositoryAgent extends LoggableBase_HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
    }
    RemoveByKey(key) {
        try {
            window.localStorage.removeItem(key);
        }
        catch (err) {
            this.ErrorHand.ErrorAndThrow(this.RemoveByKey.name, err);
        }
    }
    InitRepositoryAgent() {
        this.Logger.FuncStart(RepositoryAgent_RepositoryAgent.name, this.InitRepositoryAgent.name);
        this.Logger.FuncEnd(RepositoryAgent_RepositoryAgent.name, this.InitRepositoryAgent.name);
    }
    GetBulkLocalStorageByKeyPrefix(targetPrefix) {
        var toReturn = [];
        try {
            var storageLength = window.localStorage.length;
            for (var idx = 0; idx < storageLength; idx++) {
                var candidate = {
                    data: '',
                    key: '',
                };
                candidate.key = window.localStorage.key(idx);
                if (candidate.key.startsWith(targetPrefix)) {
                    candidate.data = window.localStorage.getItem(candidate.key);
                    if (typeof candidate != 'undefined' && typeof candidate.data != 'undefined' && candidate != null && candidate.data != null) {
                        toReturn.push(candidate);
                    }
                }
            }
        }
        catch (err) {
            this.ErrorHand.ErrorAndThrow(this.GetBulkLocalStorageByKeyPrefix.name, err);
        }
        return toReturn;
    }
    ReadDataOfKey(targetKey) {
        this.Logger.FuncStart(this.ReadDataOfKey.name);
        let storageValue = null;
        let toReturn = '';
        storageValue = window.localStorage.getItem(targetKey);
        if (storageValue != null) {
            toReturn = storageValue.toString();
        }
        else {
            this.Logger.Log(this.ReadDataOfKey.name, "No value returned from storage");
        }
        this.Logger.FuncEnd(this.ReadDataOfKey.name);
        return toReturn;
    }
    WriteByKey(storageKey, jsonString) {
        window.localStorage.setItem(storageKey, jsonString);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/UiModuleManagerPassThroughEvent/UiModuleManagerPassThroughEvent_Observer.js

class UiModuleManagerPassThroughEvent_Observer_UiModuleManagerPassThroughEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, UiModuleManagerPassThroughEvent_Observer_UiModuleManagerPassThroughEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/InjectConst.js
let ContentConst = (() => {
    class ContentConst {
    }
    ContentConst.Const = {
        MaxAutoToSaveCount: 10,
        DefaultMaxAutoSaveAgeDays: 7,
        DefaultAutoRenameCeTabButton: false,
        DefaultShowDebuggingModules: false,
        Iterations: {
            MaxSetHrefEffort: 10,
            MaxIterationSwitchBoard: 20,
        },
        Timeouts: {
            PostLoginBtnClick: 1000,
            SetHrefEffortWait: 1000,
            WaitBeforeRemovingCompleteFlagOnContent: 1500,
            AutoSaveIntervalMin: 1,
        },
        ElemId: {
            sc: {
                scLoginPassword: 'Password',
                scLoginUserName: 'UserName',
                SitecoreRootAnchorNodeId: 'Tree_Node_11111111111111111111111111111111',
                SitecoreRootApparentIdRaw: '11111111111111111111111111111111',
                SitecoreRootGlyphId: 'Tree_Glyph_11111111111111111111111111111111',
                scLoginBtn: {
                    sc920: 'LogInBtn',
                    sc820: null
                },
            }
        },
        ClassNames: {
            SC: {
                ContentTreeNode: 'scContentTreeNode',
                scContentTreeNodeActive: 'scContentTreeNodeActive',
                scContentTreeNodeNormal: 'scContentTreeNodeNormal',
            }
        },
        Selector: {
            SC: {
                ContentEditor: {
                    ScContentTreeNodeGlyph: '.scContentTreeNodeGlyph',
                    ScContentTreeNode: '.scContentTreeNode',
                    RootAnchorNode: '[id=Tree_Node_11111111111111111111111111111111]',
                    ScContentTreeContainer: '.scContentTreeContainer',
                    scContentTreeNodeIcon: '.scContentTreeNodeIcon',
                },
                Level2Nodes: {
                    MediaLibraryAnchorRootNode: '[id=Tree_Node_3D6658D8A0BF4E75B3E2D050FABCF4E1]',
                    TemplatesAnchorRootNode: '[id=Tree_Node_3C1715FE6A134FCF845FDE308BA9741D]',
                    LayoutRootAnchorNode: '[id=Tree_Node_EB2E4FFD27614653B05226A64D385227]',
                    SystemRootAnchorNode: '[id=Tree_Node_13D6D6C6C50B4BBDB3312B04F1A58F21]',
                    ContentRootAnchorNode: '[id=Tree_Node_0DE95AE441AB4D019EB067441B7C2450]',
                },
                IdStartsWithTreeNode: '[id^=Tree_Node_]',
                IframeContent: {
                    sc820: null,
                    sc920: 'iframe[src*=Content], iframe[src*=MediaShop]'
                },
                JqueryModalDialogsFrame: '[id=jqueryModalDialogsFrame]',
                ContentIframe0: '[id=scContentIframeId0]',
                NextButton: '[id=NextButton]',
                ContentIFrame1: '[id=scContentIframeId1]',
                Ok: '[id=OK]',
                Cancel: '[id=CancelButton]',
                MenuButtonPublish: '[id=B414550BADAF4542C9ADF44BED5FA6CB3E_menu_button]',
                MenuDropDownPublishItem: '[id=B414550BADAF4542C9ADF44BED5FA6CB3E_menu_98719A90225A4802A0625D3967E4DD47]',
                NavPublishStrip: '[id*=_Nav_PublishStrip]',
                StartMenuLeftOption: '.scStartMenuLeftOption',
                Publish: {
                    TheItemHasBeenPublished: '[id=LastPage]:not([style*=\'display:none\'])',
                    SettingsHidden: '[id=Settings][style*=\'display: none\']',
                    PublishingHidden: '[id=Publishing][style*=\'display: none\']',
                },
                LoginBtn: {
                    sc920: null,
                    sc820: 'input.btn',
                },
                scStartButton: {
                    sc920: '[id=StartButton]',
                    sc820: '[id=startButton]'
                },
                Desktop: {
                    DtStartBar: '[id=Startbar]',
                    ContentTreeHolder: '[id=ContentTreeHolder]',
                },
            },
        },
        Storage: {
            SettingsSuffix: '.Settings',
            ShowDebugData: false,
            SnapShotPrefix: 'ScSnapShot.',
            WindowRoot: 'HindSite.',
            SessionKey: 'HindSite.SessionKey',
        },
        Numbers: {
            Desktop: {
                MaxToolBarNameChars: 13,
                TimeNewCEWaitForScOverlayToClearMs: 1500,
            }
        },
        MaxIter: 100,
        MaxNullOrUndefinedIter: 100,
        prop: {
            AllTreeData: 'AllTreeData',
        },
        Names: {
            SC: {
                TreeGlyphPrefix: 'Tree_Glyph_',
                TreeNodePrefix: 'Tree_Node_',
                TreeExpandedPng: {
                    sc920: 'treemenu_expanded.png',
                    sc820: 'todo'
                }
            },
            Desktop: {
                StartBarApplicationPrefix: 'startbar_application_',
            },
            PopUpUi: 'PopUpUi',
            PopUpUiStyles: 'PopUpUiStyles',
            TreeMenuExpandedPng: 'treemenu_expanded.png',
            TreeMenuCollapsedPng: 'treemenu_collapsed.png',
            scDefaultAdminPassword: 'b',
            scDefaultAdminUserName: 'admin',
        }
    };
    return ContentConst;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/HindSiteSetting.js
class HindSiteSetting {
    constructor(settingKey, dataType, uiContainerSelector, defaultValue, settingFlavor, friendly, enableState, hasUi, moduleType) {
        this.SettingKey = settingKey;
        this.DataType = dataType;
        this.ValueAsObj = defaultValue;
        this.UiContainerSelector = uiContainerSelector;
        this.DefaultValue = defaultValue;
        this.SettingFlavor = settingFlavor;
        this.FriendlySetting = friendly;
        this.HasUi = hasUi;
        this.EnabledState = enableState;
        this.ModuleType = moduleType;
    }
    ValueAsInt() {
        var toReturn = Number.MIN_SAFE_INTEGER;
        if (this.ValueAsObj !== undefined && this.ValueAsObj !== null) {
            toReturn = parseInt(this.ValueAsObj.toString());
        }
        return toReturn;
    }
    ValueAsBool() {
        let toReturn = this.DefaultValue;
        if (this.ValueAsObj !== undefined && this.ValueAsObj !== null) {
            toReturn = this.ValueAsObj;
        }
        else {
            toReturn = this.DefaultValue;
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/HindSiteSettingForNumbers.js

class HindSiteSettingForNumbers_HindSiteSettingForNumbers extends HindSiteSetting {
    constructor(settingKey, dataType, uiContainerSelector, defaultValue, settingFlavor, friendly, enableState, hasUi, moduleType, min, max) {
        super(settingKey, dataType, uiContainerSelector, defaultValue, settingFlavor, friendly, enableState, hasUi, moduleType);
        this.Min = min;
        this.Max = max;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/HindSiteSettingWrapper.js

class HindSiteSettingWrapper_HindSiteSettingWrapper extends LoggableBase_HindeCoreBase {
    constructor(hindeCore, hindSiteSetting) {
        super(hindeCore);
        this.HindSiteSetting = hindSiteSetting;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/DefaultSettings.js













class DefaultSettings_DefaultSettings extends LoggableBase_HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
    }
    GetDefaultSettingsWrapper() {
        let rawData = [
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LastUsedLogToStorageKey, SettingType.Number, null, SharedConst.Const.Settings.Defaults.EnableDebugging, SettingFlavor.ContentAndPopUpStoredInEach, 'Rolling Prefix key for log to storage', UiEnableState.Enabled, UiPresence.HasNoUi, ModuleKey.Unknown),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.EnableDebugging, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.ModuleContainers.SettingEnableDebugging, SharedConst.Const.Settings.Defaults.EnableDebugging, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Enable Debugging', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.UseCompactCss, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.ModuleContainers.SettingUseCompactCss, SharedConst.Const.Settings.Defaults.UseCompactCss, SettingFlavor.ContentOnly, 'Use Compact CSS', UiEnableState.Disabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.AutoSnapshotBeforeWindowChange, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.AutoSnapshotBeforeWindowChange, PopConst.Const.Storage.Defaults.bool.AutoSnapshotBeforeWindowChange, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Save Snapshot on HindSite Window Change', UiEnableState.Disabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.AutoLogin, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.iCBoxdSettingsAutoLogin, PopConst.Const.Storage.Defaults.bool.AutoLogin, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Login', UiEnableState.Disabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndPopUpLog, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndPopUpLog, PopConst.Const.Settings.Defaults.LgndPopUpLog, SettingFlavor.PopUp, 'Debugging - Pop Up Log', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndForeSite, SettingType.AccordionTypical, PopConst.Const.Selector.HS.ModuleContainers.LgndForeSite, PopConst.Const.Settings.Defaults.LgndForeSite, SettingFlavor.PopUp, 'Fore&bull;Site', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionTypical),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndHindSite, SettingType.AccordionTypical, PopConst.Const.Selector.HS.ModuleContainers.LgndHindSite, PopConst.Const.Settings.Defaults.LgndHindSite, SettingFlavor.PopUp, 'Hind&bull;Site', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionTypical),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndSettings, SettingType.AccordionTypical, PopConst.Const.Selector.HS.ModuleContainers.LgndSettings, PopConst.Const.Settings.Defaults.LgndSettings, SettingFlavor.PopUp, 'Settings', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionTypical),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndMessages, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndMessages, PopConst.Const.Settings.Defaults.LgndMessages, SettingFlavor.PopUp, 'Debugging - Messages', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndPopUpState, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndPopUpState, PopConst.Const.Settings.Defaults.LgndPopUpState, SettingFlavor.PopUp, 'Debugging - State of Pop-Up', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndPopUpDebug, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndPopUpDebug, PopConst.Const.Settings.Defaults.LgndPopUpState, SettingFlavor.PopUp, 'Debugging', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndContentState, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndContentState, PopConst.Const.Settings.Defaults.LgndContentState, SettingFlavor.PopUp, 'Debugging - Content State', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndBrowserState, SettingType.AccordionDebugging, PopConst.Const.Selector.HS.ModuleContainers.LgndBrowserState, PopConst.Const.Settings.Defaults.LgndBrowserState, SettingFlavor.PopUp, 'Debugging - Browser State', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.AccordionDebugging),
            new HindSiteSettingForNumbers_HindSiteSettingForNumbers(_3xxx_SettingKey_SettingKey.MaxAutoSaveCount, SettingType.Number, PopConst.Const.Selector.HS.SettingAutoSaveMaxCount, PopConst.Const.Numbers.MaxAutoSaveCount, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Save Max Count', UiEnableState.Disabled, UiPresence.HasUi, ModuleKey.Number, 1, 100),
            new HindSiteSettingForNumbers_HindSiteSettingForNumbers(_3xxx_SettingKey_SettingKey.AutoSaveIntervalMin, SettingType.Number, PopConst.Const.Selector.HS.SettingAutoSaveInterval, PopConst.Const.Numbers.AutoSaveIntervalMin, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Save Interval (Min) - 0 to disable', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.Number, 0, 100),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.DebugKeepDialogOpen, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.ModuleContainers.SettingDebugKeepDialogOpen, PopConst.Const.Settings.Defaults.DebugKeepDialogOpen, SettingFlavor.PopUp, 'Keep Dialog Open', UiEnableState.Disabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.AutoRestoreState, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.ModuleContainers.SettingAutoRestoreState, PopConst.Const.Settings.Defaults.AutoRestoreState, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto-Restore State', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.CheckBox),
            new HindSiteSettingForNumbers_HindSiteSettingForNumbers(_3xxx_SettingKey_SettingKey.AutoSaveRetainDays, SettingType.Number, PopConst.Const.Selector.HS.SettingAutoSaveSnapshotRetainDays, ContentConst.Const.DefaultMaxAutoSaveAgeDays, SettingFlavor.ContentOnly, 'Days to Retain Auto Snap Shots', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.Number, 0, 100),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.AutoRenameCeButton, SettingType.BoolCheckBox, PopConst.Const.Selector.HS.SettingAutoRenameCeTabButton, ContentConst.Const.DefaultAutoRenameCeTabButton, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto rename Content Editor tab button to match active node', UiEnableState.Enabled, UiPresence.HasUi, ModuleKey.CheckBox),
        ];
        let toReturn = [];
        rawData.forEach((settingValue) => {
            toReturn.push(new HindSiteSettingWrapper_HindSiteSettingWrapper(this.HindeCore, settingValue));
        });
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/HindSiteSettingsBucket.js



class HindSiteSettingsBucket_HindSiteSettingsBucket extends LoggableBase_HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
        this.SettingWrappers = [];
        this.SettingWrappers = (new DefaultSettings_DefaultSettings(this.HindeCore)).GetDefaultSettingsWrapper();
    }
    GetByKey(needleSettingKey) {
        var toReturn = null;
        for (var idx = 0; idx < this.SettingWrappers.length; idx++) {
            let candidate = this.SettingWrappers[idx];
            if (candidate.HindSiteSetting.SettingKey === needleSettingKey) {
                toReturn = candidate;
                break;
            }
        }
        if (!toReturn) {
            this.ErrorHand.ErrorAndContinue(this.GetByKey.name, 'Setting not found ' + StaticHelpers_StaticHelpers.SettingKeyAsString(needleSettingKey));
        }
        return toReturn;
    }
    GetSettingsByFlavor(targetFlavors) {
        let toReturn = [];
        for (var idx = 0; idx < this.SettingWrappers.length; idx++) {
            let candidate = this.SettingWrappers[idx];
            if (targetFlavors.indexOf(candidate.HindSiteSetting.SettingFlavor) > -1) {
                toReturn.push(candidate);
            }
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/SettingsAgent.js






class SettingsAgent_SettingsAgent extends LoggableBase_HindeCoreBase {
    constructor(hindeCore, repoAgent) {
        super(hindeCore);
        this.RepoAgent = repoAgent;
        this.HindSiteSettingsBucket = new HindSiteSettingsBucket_HindSiteSettingsBucket(this.HindeCore);
    }
    GetSettingsByFlavor(arg0) {
        return this.HindSiteSettingsBucket.GetSettingsByFlavor(arg0);
    }
    GetByKey(settingKey) {
        let toReturn = null;
        let settingsWrapper = this.HindSiteSettingsBucket.GetByKey(settingKey);
        if (settingsWrapper) {
            toReturn = settingsWrapper.HindSiteSetting;
        }
        return toReturn;
    }
    Init_SettingsAgent() {
        this.Logger.FuncStart(this.Init_SettingsAgent.name);
        let settingsFromStorage = this.ReadGenericSettingsFromStorage();
        this.UpdateSettingValuesFromStorage(settingsFromStorage);
        this.Logger.FuncEnd(this.Init_SettingsAgent.name);
    }
    WireEvents() {
        this.UiElementChangeEvent_Observer = new UiModuleManagerPassThroughEvent_Observer_UiModuleManagerPassThroughEvent_Observer(this.HindeCore, this.OnUiModuleManagerPassThroughEvent);
    }
    OnUiModuleManagerPassThroughEvent(payload) {
        alert('pass through');
    }
    UpdateSettingsFromPopUpMsg(newSettings) {
        this.Logger.FuncStart(this.UpdateSettingsFromPopUpMsg.name);
        if (newSettings) {
            for (var idx = 0; idx < newSettings.length; idx++) {
                let oneSetting = newSettings[idx];
                this.SetByKey(oneSetting.SettingKey, oneSetting.ValueAsObj);
            }
        }
        this.Logger.FuncEnd(this.UpdateSettingsFromPopUpMsg.name);
    }
    ReadGenericSettingsFromStorage() {
        this.Logger.FuncStart(this.ReadGenericSettingsFromStorage.name);
        let toReturn = [];
        let storedValue = this.RepoAgent.ReadDataOfKey(PopConst.Const.Storage.KeyGenericSettings);
        if (storedValue) {
            toReturn = JSON.parse(storedValue.toString());
        }
        else {
            toReturn = [];
        }
        this.Logger.FuncEnd(this.ReadGenericSettingsFromStorage.name);
        return toReturn;
    }
    UpdateSettingValuesFromStorage(settingsFromStorage) {
        this.Logger.FuncStart(this.UpdateSettingValuesFromStorage.name);
        try {
            for (var idx = 0; idx < settingsFromStorage.length; idx++) {
                let storageSetting = settingsFromStorage[idx];
                let settingWrapper = this.HindSiteSettingsBucket.GetByKey(storageSetting.SettingKey);
                if (settingWrapper) {
                    let matchingSetting = settingWrapper.HindSiteSetting;
                    if (matchingSetting) {
                        matchingSetting.ValueAsObj = storageSetting.ValueAsObj;
                    }
                    else {
                        this.ErrorHand.ErrorAndContinue(this.UpdateSettingValuesFromStorage.name, 'matching setting not found ' + StaticHelpers_StaticHelpers.SettingKeyAsString(storageSetting.SettingKey));
                    }
                }
                else {
                    this.ErrorHand.ErrorAndThrow(this.UpdateSettingValuesFromStorage.name, 'null matching setting');
                }
            }
        }
        catch (err) {
            this.ErrorHand.ErrorAndContinue(this.UpdateSettingValuesFromStorage.name, err);
        }
        this.Logger.FuncEnd(this.UpdateSettingValuesFromStorage.name);
    }
    BooleanSettingChanged(settingKey, valueAsBool) {
        this.Logger.LogVal(this.BooleanSettingChanged.name, _3xxx_SettingKey_SettingKey[settingKey]);
        this.SetByKey(settingKey, valueAsBool);
    }
    NumberSettingChanged(SettingKey, valueAsNumber) {
        this.Logger.Log(StaticHelpers_StaticHelpers.SettingKeyAsString(SettingKey));
        this.Logger.LogVal('valueAsNumber', valueAsNumber.toString());
        this.SetByKey(SettingKey, valueAsNumber);
    }
    SetByKey(settingKey, value) {
        let foundSetting = this.HindSiteSettingsBucket.GetByKey(settingKey);
        if (foundSetting) {
            foundSetting.HindSiteSetting.ValueAsObj = value;
            this.WriteAllSettingValuesToStorage();
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.SetByKey.name, 'setting match not found');
        }
    }
    WriteAllSettingValuesToStorage() {
        let settingValues = [];
        for (var udx = 0; udx < this.HindSiteSettingsBucket.SettingWrappers.length; udx++) {
            let hindSiteWrapper = this.HindSiteSettingsBucket.SettingWrappers[udx];
            if (hindSiteWrapper.HindSiteSetting.ValueAsObj !== null) {
                settingValues.push({
                    SettingKey: hindSiteWrapper.HindSiteSetting.SettingKey,
                    ValueAsObj: hindSiteWrapper.HindSiteSetting.ValueAsObj,
                    SettingKeyFriendly: StaticHelpers_StaticHelpers.SettingKeyAsString(hindSiteWrapper.HindSiteSetting.SettingKey)
                });
            }
        }
        this.RepoAgent.WriteByKey(PopConst.Const.Storage.KeyGenericSettings, JSON.stringify(settingValues));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/QueryStrKey.js
var QueryStrKey;
(function (QueryStrKey) {
    QueryStrKey[QueryStrKey["hsTargetSs"] = 0] = "hsTargetSs";
    QueryStrKey[QueryStrKey["sc_mode"] = 1] = "sc_mode";
    QueryStrKey[QueryStrKey["sc_itemid"] = 2] = "sc_itemid";
    QueryStrKey[QueryStrKey["sc_lang"] = 3] = "sc_lang";
    QueryStrKey[QueryStrKey["sc_site"] = 4] = "sc_site";
})(QueryStrKey || (QueryStrKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/scMode.js
var scMode;
(function (scMode) {
    scMode[scMode["Unknown"] = 0] = "Unknown";
    scMode[scMode["Edit"] = 1] = "Edit";
    scMode[scMode["Preview"] = 2] = "Preview";
    scMode[scMode["Normal"] = 3] = "Normal";
})(scMode || (scMode = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/UrlAgent/GenericUrlAgent.js


class GenericUrlAgent_GenericUrlAgent extends LoggableBase_HindeCoreBase {
    constructor(hindeCore, url) {
        super(hindeCore);
        this.Url = url;
        this.ErrorHand.ThrowIfNullOrUndefined(GenericUrlAgent_GenericUrlAgent.name, url);
    }
    GetUrlParts() {
        return this.UrlParts;
    }
    QueryStringHasKey(key) {
        let toReturn = false;
        if (key !== null) {
            let keyAsStr = QueryStrKey[key];
            if (keyAsStr) {
                toReturn = this.UrlParts && this.UrlParts.Parameters && this.UrlParts.Parameters.has(keyAsStr);
            }
        }
        return toReturn;
    }
    GetQueryStringValueByKey(key) {
        let toReturn = '';
        if (this.QueryStringHasKey(key)) {
            let keyAsStr = QueryStrKey[key];
            toReturn = this.UrlParts.Parameters.get(keyAsStr);
        }
        return toReturn;
    }
    SetParameterValueByKey(key, newValue) {
        if (this.UrlParts) {
            this.UrlParts.Parameters.set(QueryStrKey[key], newValue);
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.SetParameterValueByKey.name, 'No URLParts ' + QueryStrKey[key] + ' ' + newValue);
        }
    }
    SetFilePath(newFilePath) {
        this.UrlParts.FilePath = newFilePath;
    }
    Init_GenericUrlAgent() {
        try {
            this.Logger.FuncStart(this.Init_GenericUrlAgent.name, GenericUrlAgent_GenericUrlAgent.name);
            this.SetFromHref(this.Url);
        }
        catch (err) {
            throw (this.Init_GenericUrlAgent.name + ' | ' + err);
        }
        this.Logger.FuncEnd(this.Init_GenericUrlAgent.name, GenericUrlAgent_GenericUrlAgent.name);
    }
    SetFromHref(href) {
        var parser = document.createElement('a');
        parser.href = href;
        this.UrlParts = {
            OriginalRaw: href,
            Protocol: parser.protocol,
            HostAndPort: parser.host,
            Parameters: new URLSearchParams(window.location.search),
            FilePath: parser.pathname,
            Anchor: parser.hash,
            HasError: false,
        };
    }
    BuildFullUrlFromParts() {
        let toReturn = {
            AbsUrl: '',
        };
        if (this.UrlParts) {
            if (this.UrlParts && !this.UrlParts.HasError) {
                toReturn.AbsUrl = this.UrlParts.Protocol + '//' + this.UrlParts.HostAndPort;
                if (this.UrlParts.FilePath.length > 0) {
                    toReturn.AbsUrl += this.UrlParts.FilePath;
                }
                if (this.UrlParts.Parameters) {
                    toReturn.AbsUrl += '?' + this.UrlParts.Parameters.toString();
                }
                if (this.UrlParts.Anchor.length > 0) {
                    toReturn.AbsUrl += '#' + this.UrlParts.Anchor;
                }
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.BuildFullUrlFromParts.name, 'Null UrlParts');
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/UrlAgent/ScUrlAgent.js





class ScUrlAgent_ScUrlAgent extends GenericUrlAgent_GenericUrlAgent {
    constructor(hindeCore, url) {
        super(hindeCore, url);
    }
    __urlTestAgainstRegex(regexPattern, url) {
        return new RegExp(regexPattern).test(url);
    }
    Init_ScUrlAgent() {
        this.Logger.FuncStart(this.Init_ScUrlAgent.name);
        this.Init_GenericUrlAgent();
        this.Logger.FuncEnd(this.Init_ScUrlAgent.name);
    }
    GetFullUrl() {
        return this.BuildFullUrlFromParts();
    }
    GetScWindowtypeXmlControl(testPath) {
        var toReturn = ScWindowType.Unknown;
        if (this.__urlTestAgainstRegex(SharedConst.Const.Regex.PageType.PackageDesigner, testPath.AbsUrl)) {
            toReturn = ScWindowType.PackageDesigner;
        }
        else {
            this.ErrorHand.WarningAndContinue(this.GetScWindowtypeXmlControl.name, 'unhandled XmlControl type');
        }
        return toReturn;
    }
    GetScWindowType() {
        var toReturn = ScWindowType.Unknown;
        let testPath = this.BuildFullUrlFromParts();
        if (testPath) {
            if (testPath.AbsUrl.indexOf(SharedConst.Const.UrlSuffix.Login) > -1) {
                toReturn = ScWindowType.LoginPage;
            }
            else if (new RegExp(SharedConst.Const.Regex.ContentEditor).test(testPath.AbsUrl)) {
                toReturn = ScWindowType.ContentEditor;
            }
            else if (testPath.AbsUrl.toLowerCase().indexOf(SharedConst.Const.UrlSuffix.LaunchPad.toLowerCase()) > -1) {
                toReturn = ScWindowType.Launchpad;
            }
            else if (this.__urlTestAgainstRegex(SharedConst.Const.Regex.PageType.Default, testPath.AbsUrl)) {
                if (this.__urlTestAgainstRegex(SharedConst.Const.Regex.PageType.XmlControl, testPath.AbsUrl)) {
                    toReturn = this.GetScWindowtypeXmlControl(testPath);
                }
                else {
                    toReturn = ScWindowType.Desktop;
                }
            }
            else if (this.__urlTestAgainstRegex(SharedConst.Const.Regex.PageType.Preview, testPath.AbsUrl)) {
                toReturn = ScWindowType.Preview;
            }
            else if (this.__urlTestAgainstRegex(SharedConst.Const.Regex.PageType.Edit, testPath.AbsUrl)) {
                toReturn = ScWindowType.Edit;
            }
            else if (this.__urlTestAgainstRegex(SharedConst.Const.Regex.PageType.Normal, testPath.AbsUrl)) {
                toReturn = ScWindowType.Normal;
            }
            else {
                toReturn = ScWindowType.Unknown;
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.GetScWindowType.name, 'null url');
        }
        return toReturn;
    }
    BuildEditPrevNormUrl(newMode, contState) {
        this.UrlParts.Anchor = '';
        this.UrlParts.FilePath = '';
        this.SetParameterValueByKey(QueryStrKey.sc_mode, scMode[newMode]);
        this.SetParameterValueByKey(QueryStrKey.sc_lang, 'en');
        this.SetParameterValueByKey(QueryStrKey.sc_site, 'website');
    }
    SetScMode(newMode) {
        if (this.UrlParts && newMode) {
            if (this.UrlParts && this.UrlParts)
                this.SetParameterValueByKey(QueryStrKey.sc_mode, scMode[newMode]);
        }
    }
    SetFilePathFromWindowType(windowType = null) {
        if (!windowType) {
            windowType = ScWindowType.Unknown;
        }
        switch (windowType) {
            case ScWindowType.ContentEditor:
                this.SetFilePath(SharedConst.Const.UrlSuffix.CE);
                break;
            case ScWindowType.Desktop:
                this.SetFilePath(SharedConst.Const.UrlSuffix.Desktop);
                break;
            case ScWindowType.Edit:
                this.SetFilePath(SharedConst.Const.UrlSuffix.None);
                break;
            case ScWindowType.Preview:
                this.SetFilePath(SharedConst.Const.UrlSuffix.None);
                break;
            case ScWindowType.Normal:
                this.SetFilePath(SharedConst.Const.UrlSuffix.None);
                break;
            default:
                this.SetFilePath('');
                this.ErrorHand.ErrorAndThrow(this.SetFilePathFromWindowType.name, 'unaccounted for window type');
                break;
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Drones/RollingLogIdDrone/RollingLogIdDrone.js


class RollingLogIdDrone_RollingLogIdDrone extends LoggableBase_HindeCoreBase {
    constructor(settingsAgent, hindeCore) {
        super(hindeCore);
        this.maxKey = 5;
        this.minKey = 1;
        this.Logger.CTORStart(RollingLogIdDrone_RollingLogIdDrone.name);
        this.SettingsAgent = settingsAgent;
    }
    GetNextLogId() {
        let nextKeyInt = this.minKey;
        let nextKeyToReturn;
        var result = this.GetLastUsedLogId().ValueAsInt();
        nextKeyInt = result + 1;
        if (nextKeyInt > this.maxKey) {
            nextKeyInt = this.minKey;
        }
        this.SettingsAgent.SetByKey(_3xxx_SettingKey_SettingKey.LastUsedLogToStorageKey, nextKeyInt.toString());
        nextKeyToReturn = nextKeyInt.toString();
        return nextKeyToReturn;
    }
    GetLastUsedLogId() {
        var lastUsedLogIdSetting = this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.LastUsedLogToStorageKey);
        return lastUsedLogIdSetting;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpController/scripts/Managers/CommandManager.js
var CommandManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class CommandManager_CommandManager extends LoggableBase_HindeCoreBase {
    constructor(hindeCore, popUpMessageBroker, commandDefinitionBucket, uiLayer, handlerInternal) {
        super(hindeCore);
        this.CommandDefinitionBucket = commandDefinitionBucket;
        this.PopUpMsgBroker = popUpMessageBroker;
        this.HandlersForInternal = handlerInternal;
        this.UiLayer = uiLayer;
        if (StaticHelpers_StaticHelpers.IsNullOrUndefined([this.CommandDefinitionBucket, this.PopUpMsgBroker, this.UiLayer, this.HandlersForInternal])) {
            throw (CommandManager_CommandManager.name + ' | null at constructor');
        }
    }
    Init_CommandManager() {
    }
    GetMenuCommandParamsByKey(needleCommand) {
        this.ErrorHand.ThrowIfNullOrUndefined(this.GetMenuCommandParamsByKey.name, needleCommand);
        let toReturn = null;
        for (var idx = 0; idx < this.CommandDefinitionBucket.MenuCommandParamsAr.length; idx++) {
            let candidate = this.CommandDefinitionBucket.MenuCommandParamsAr[idx];
            if (candidate.MenuCommandKey === needleCommand) {
                toReturn = candidate;
                break;
            }
        }
        return toReturn;
    }
    HandleCommandTypePopUp(uiCommandFlagRaisedEvent_Payload) {
        this.Logger.Log(this.HandleCommandTypePopUp.name + ' should be handling ' + MsgFlag[uiCommandFlagRaisedEvent_Payload.MsgFlag]);
        switch (uiCommandFlagRaisedEvent_Payload.MsgFlag) {
            case MsgFlag.ReqSetStateOfSitecoreNewWindow:
                this.HandlersForInternal.HandlerForSnapShotRestoreNewTab(uiCommandFlagRaisedEvent_Payload);
                break;
            case MsgFlag.ReqDebugClearConsole:
                console.clear();
                break;
            case MsgFlag.ReqDebugTriggerReload:
                location.reload(true);
                break;
            case MsgFlag.ReqClosePopUpWindow:
                window.close();
                break;
            default:
                this.ErrorHand.WarningAndContinue(this.HandleCommandTypePopUp.name, 'Unhandled command');
                break;
        }
    }
    TriggerPingEventAsync() {
        return CommandManager_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.TriggerPingEventAsync.name);
            try {
                let stateOfPopUp = this.UiLayer.GetStateOfPopUp();
                this.PopUpMsgBroker.SendCommandToContentAsync(MsgFlag.Ping, stateOfPopUp);
            }
            catch (err) {
                throw (this.TriggerPingEventAsync.name + ' | ' + err);
            }
            this.Logger.FuncEnd(this.TriggerPingEventAsync.name);
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfSnapshots.js
class DefaultStateOfStorageSnapshots {
    constructor() {
        this.CreationDate = new Date(1970);
        this.SnapShots = [];
        this.FavoriteCount = 0;
        this.PlainCount = 0;
        this.SnapShotsAutoCount = 0;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultMessageContentToController_Payload.js

class DefaultMessageContentToController_Payload_DefaultMessageContentToController_Payload {
    constructor() {
        this.StateOfStorageSnapShots = new DefaultStateOfStorageSnapshots();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/MsgPayloadResponseFromContent.js


class MsgPayloadResponseFromContent_DefaultMsgContentToController {
    constructor(msgFlag) {
        this.Payload = new DefaultMessageContentToController_Payload_DefaultMessageContentToController_Payload();
        this.MsgFlag = MsgFlag.Unknown;
        this.MsgFlag = msgFlag;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/ContentReplyReceivedEvent/ContentReplyReceivedEvent_Subject.js

class ContentReplyReceivedEvent_Subject_ContentReplyReceivedEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore) {
        super(hindeCore, ContentReplyReceivedEvent_Subject_ContentReplyReceivedEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultFriendly.js


class DefaultFriendly_DefaultFriendly {
    constructor() {
        this.Flavor = SnapShotFlavor[SnapShotFlavor.Live];
        this.NickName = '';
        this.TimeStamp = '';
        this.WindowType = ScWindowType[ScWindowType.Unknown];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultMetaData.js



class DefaultMetaData_DefaultMetaData {
    constructor() {
        this.Flavor = SnapShotFlavor.Live;
        this.SessionId = '';
        this.SnapshotId = Guid_Guid.NewRandomGuid();
        this.StorageKey = '';
        this.TimeStamp = null;
        this.WindowType = ScWindowType.Unknown;
        this.Hash = -1;
        this.StorageId = Guid_Guid.NewRandomGuid();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfDTArea.js
class DefaultStateOfDTArea {
    constructor() {
        this.StateOfDTFrames = [];
        this.ActiveDTFrameIndex = -1;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfDesktop.js

class DefaultStateOfDesktop_DefaultStateOfDesktop {
    constructor() {
        this.StateOfDTArea = new DefaultStateOfDTArea();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfContentTree.js
class DefaultStateOfContentTree {
    constructor() {
        this.ActiveNodeFlat = null;
        this.StateOfScContentTreeNodeDeep = null;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfContentEditor.js

class DefaultStateOfContentEditor_DefaultStateOfContentEditor {
    constructor() {
        this.StateOfContentTree = new DefaultStateOfContentTree();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfScWindowProxy.js


class DefaultStateOfScWindowProxy_DefaultStateOfScWindowProxy {
    constructor() {
        this.StateOfContentEditor = new DefaultStateOfContentEditor_DefaultStateOfContentEditor;
        this.StateOfDesktop = new DefaultStateOfDesktop_DefaultStateOfDesktop();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfScUiProxy.js




class DefaultStateOfScUiProxy_DefaultStateOfScUiProxy {
    constructor() {
        this.Friendly = new DefaultFriendly_DefaultFriendly();
        this.Meta = new DefaultMetaData_DefaultMetaData();
        this.ErrorStackScUiProxy = [];
        this.StateOfScWindow = new DefaultStateOfScWindowProxy_DefaultStateOfScWindowProxy();
        this.Meta.TimeStamp = new Date();
        this.Friendly.TimeStamp = StaticHelpers_StaticHelpers.MakeFriendlyDate(this.Meta.TimeStamp);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultControllerMessageReceivedEvent_Payload.js



class DefaultControllerMessageReceivedEvent_Payload_DefaultControllerMessageReceivedEvent_Payload {
    constructor() {
        this.ErrorStack = [];
        this.LastReq = MsgFlag.Unknown;
        this.LastReqFriendly = MsgFlag[MsgFlag.Unknown];
        this.LastReqSuccessful = false;
        this.StateOfScUiProxy_Live = new DefaultStateOfScUiProxy_DefaultStateOfScUiProxy();
        this.StateOfStorageSnapShots = new DefaultStateOfStorageSnapshots();
    }
}
;

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/ControllerMessageReceivedEventValidator.js









class ControllerMessageReceivedEventValidator_ControllerMessageReceivedEventValidator extends LoggableBase_HindeCoreBase {
    TranslateAndValidatePayload(messageContentToController_Payload) {
        this.Logger.FuncStart(this.TranslateAndValidatePayload.name);
        this.ErrorHand.ThrowIfNullOrUndefined(this.TranslateAndValidatePayload.name, [messageContentToController_Payload]);
        var controllerMessageReceivedEvent_Payload = new DefaultControllerMessageReceivedEvent_Payload_DefaultControllerMessageReceivedEvent_Payload();
        controllerMessageReceivedEvent_Payload.StateOfScUiProxy_Live = this.ValidateStateOfScUiProxy(messageContentToController_Payload.StateOfScUiProxy_Live);
        controllerMessageReceivedEvent_Payload.StateOfStorageSnapShots = this.ValidateStateOfStorageSnapShots(messageContentToController_Payload.StateOfStorageSnapShots);
        if (!messageContentToController_Payload.ErrorStack) {
            controllerMessageReceivedEvent_Payload.ErrorStack = controllerMessageReceivedEvent_Payload.ErrorStack;
        }
        this.Logger.FuncEnd(this.TranslateAndValidatePayload.name);
        return controllerMessageReceivedEvent_Payload;
    }
    ValidateStateOfStorageSnapShots(stateOfStorageSnapShots) {
        if (!stateOfStorageSnapShots) {
            stateOfStorageSnapShots = new DefaultStateOfStorageSnapshots();
        }
        let validatedSnapShots = [];
        stateOfStorageSnapShots.SnapShots.forEach((snapShot) => {
            if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(snapShot)) {
                validatedSnapShots.push(this.ValidateStateOfScUiProxy(snapShot));
            }
            else {
                this.ErrorHand.WarningAndContinue(this.ValidateStateOfStorageSnapShots.name, 'null snapshot passed in');
            }
        });
        stateOfStorageSnapShots.SnapShots = validatedSnapShots;
        return stateOfStorageSnapShots;
    }
    ValidateStateOfScUiProxy(stateOfScUiProxy) {
        if (!stateOfScUiProxy) {
            stateOfScUiProxy = new DefaultStateOfScUiProxy_DefaultStateOfScUiProxy();
        }
        stateOfScUiProxy.StateOfScWindow = this.ValidateStateOfScWindowProxy(stateOfScUiProxy.StateOfScWindow);
        return stateOfScUiProxy;
    }
    ValidateStateOfScWindowProxy(stateOfScWindowProxy) {
        if (!stateOfScWindowProxy) {
            stateOfScWindowProxy = new DefaultStateOfScWindowProxy_DefaultStateOfScWindowProxy();
        }
        stateOfScWindowProxy.StateOfDesktop = this.ValidateStateOfDesktopProxy(stateOfScWindowProxy.StateOfDesktop);
        stateOfScWindowProxy.StateOfContentEditor = this.ValidateStateOfContentEditorProxy(stateOfScWindowProxy.StateOfContentEditor);
        return stateOfScWindowProxy;
    }
    ValidateStateOfContentEditorProxy(StateOfContentEditor) {
        if (!StateOfContentEditor) {
            StateOfContentEditor = new DefaultStateOfContentEditor_DefaultStateOfContentEditor();
        }
        if (!StateOfContentEditor.StateOfContentTree) {
            StateOfContentEditor.StateOfContentTree = new DefaultStateOfContentTree();
        }
        return StateOfContentEditor;
    }
    ValidateStateOfDTAreaProxy(stateOfDTAreaProxy) {
        if (stateOfDTAreaProxy.ActiveDTFrameIndex === null) {
            stateOfDTAreaProxy.ActiveDTFrameIndex = -1;
        }
        if (!stateOfDTAreaProxy.StateOfDTFrames) {
            stateOfDTAreaProxy.StateOfDTFrames = [];
        }
        return stateOfDTAreaProxy;
    }
    ValidateStateOfDesktopProxy(StateOfDesktop) {
        if (!StateOfDesktop) {
            StateOfDesktop = new DefaultStateOfDesktop_DefaultStateOfDesktop();
        }
        StateOfDesktop.StateOfDTArea = this.ValidateStateOfDTAreaProxy(StateOfDesktop.StateOfDTArea);
        return StateOfDesktop;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpController/scripts/Agents/PopUpMessagesBrokerAgent.js
var PopUpMessagesBrokerAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class PopUpMessagesBrokerAgent_MessageBroker_PopUp extends LoggableBase_HindeCoreBase {
    constructor(hindeCore, browserProxy, settingsAgent) {
        super(hindeCore);
        this.BrowserProxy = browserProxy;
        this.SettingsAgent = settingsAgent;
        this.ContentReplyReceivedEvent_Subject = new ContentReplyReceivedEvent_Subject_ContentReplyReceivedEvent_Subject(this.HindeCore);
    }
    __cleardebugText() {
        this.Logger.HandlerClearDebugText(this.HindeCore);
    }
    BuildMessageToContent(msgFlag, stateOfPopUp) {
        let wrappedSettings = this.SettingsAgent.GetSettingsByFlavor([SettingFlavor.ContentAndPopUpStoredInPopUp, SettingFlavor.ContentOnly]);
        let settingsToSend = [];
        wrappedSettings.forEach((wrappedSetting) => settingsToSend.push(wrappedSetting.HindSiteSetting));
        let messageControllerToContent = {
            CurrentContentPrefs: settingsToSend,
            IsValid: false,
            MsgFlag: msgFlag,
            StateOfPopUI: stateOfPopUp,
        };
        return messageControllerToContent;
    }
    SendCommandToContentAsync(msgFlag, stateOfPopUp) {
        return PopUpMessagesBrokerAgent_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.SendCommandToContentAsync.name);
            try {
                if (!StaticHelpers_StaticHelpers.IsNullOrUndefined([stateOfPopUp])) {
                    this.__cleardebugText();
                    let messageControllerToContent = this.BuildMessageToContent(msgFlag, stateOfPopUp);
                    this.SendMessageToContentAsync(messageControllerToContent)
                        .then((controllerMessageReceivedEvent_Payload) => this.HandleReply(controllerMessageReceivedEvent_Payload))
                        .catch((err) => this.ErrorHand.ErrorAndThrow(this.SendCommandToContentAsync.name, err));
                }
                else {
                    this.ErrorHand.ErrorAndThrow(this.SendCommandToContentAsync.name, 'null check');
                }
            }
            catch (err) {
                throw (this.SendCommandToContentAsync.name + ' | ' + err);
            }
            this.Logger.FuncEnd(this.SendCommandToContentAsync.name);
        });
    }
    HandleReply(controllerMessageReceivedEvent_Payload) {
        if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(controllerMessageReceivedEvent_Payload)) {
            this.ContentReplyReceivedEvent_Subject.NotifyObserversAsync(controllerMessageReceivedEvent_Payload);
        }
        else {
            this.ErrorHand.WarningAndContinue(this.HandleReply.name, 'null payload. Not notifying ');
        }
    }
    SendMessageToContentAsync(messageFromController) {
        return PopUpMessagesBrokerAgent_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => PopUpMessagesBrokerAgent_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.SendMessageToContentAsync.name);
                if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(messageFromController)) {
                    this.SendMessageToSingleTabAsync(messageFromController)
                        .then((result) => resolve(result))
                        .catch((err) => reject(err));
                }
                else {
                    this.ErrorHand.ErrorAndThrow(this.SendMessageToContentAsync.name, 'null stateOfPopUp');
                }
                this.Logger.FuncEnd(this.SendMessageToContentAsync.name, StaticHelpers_StaticHelpers.MsgFlagAsString(messageFromController.MsgFlag));
            }));
        });
    }
    SendMessageToSingleTabAsync(messageControllerToContent) {
        return new Promise((resolve, reject) => PopUpMessagesBrokerAgent_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.SendMessageToSingleTabAsync.name, StaticHelpers_StaticHelpers.MsgFlagAsString(messageControllerToContent.MsgFlag));
            this.BrowserProxy.SendMessageAsync_BrowserProxy(messageControllerToContent)
                .then((response) => this.ReceiveResponseHandler(response))
                .then((messageContentToController_Payload) => {
                let ContollerMessageReceivedEventValidator = new ControllerMessageReceivedEventValidator_ControllerMessageReceivedEventValidator(this.HindeCore);
                let validatedPayload = ContollerMessageReceivedEventValidator.TranslateAndValidatePayload(messageContentToController_Payload);
                resolve(validatedPayload);
            })
                .catch((ex) => {
                this.ErrorHand.WarningAndContinue(this.SendMessageToSingleTabAsync.name, ex);
                resolve(null);
            });
            this.Logger.FuncEnd(this.SendMessageToSingleTabAsync.name, StaticHelpers_StaticHelpers.MsgFlagAsString(messageControllerToContent.MsgFlag));
        }));
    }
    ReceiveResponseHandler(response) {
        return new Promise((resolve, reject) => {
            this.Logger.FuncStart(this.ReceiveResponseHandler.name);
            if (response) {
                StaticHelpers_StaticHelpers.MsgFlagAsString(response.MsgFlag);
                if (response) {
                    var asMsgFromContent = response;
                    if (asMsgFromContent) {
                        switch (response.MsgFlag) {
                            case MsgFlag.RespCurState:
                                break;
                            case MsgFlag.RespTaskSuccessful:
                                resolve(asMsgFromContent.Payload);
                                break;
                            case MsgFlag.RespTaskFailed:
                                reject(StaticHelpers_StaticHelpers.MsgFlagAsString(asMsgFromContent.MsgFlag));
                                break;
                            case MsgFlag.RespFailedDidNotValidate:
                                reject(StaticHelpers_StaticHelpers.MsgFlagAsString(asMsgFromContent.MsgFlag));
                                break;
                            default:
                                reject('Unrecognized MsgFlag' + StaticHelpers_StaticHelpers.MsgFlagAsString(response.MsgFlag));
                                break;
                        }
                    }
                    else {
                        reject(this.ReceiveResponseHandler.name + ' response is not class: ' + MsgPayloadResponseFromContent_DefaultMsgContentToController.name);
                    }
                }
            }
            else {
                reject(this.ReceiveResponseHandler.name + ' null or undefined response');
            }
            this.Logger.FuncEnd(this.ReceiveResponseHandler.name);
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpController/scripts/Proxies/BrowserProxy.js
var BrowserProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class BrowserProxy_PopUpBrowserProxy extends LoggableBase_HindeCoreBase {
    Init_BrowserProxy() {
        return BrowserProxy_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart(this.Init_BrowserProxy.name);
                yield browser.tabs.query({ currentWindow: true, active: true })
                    .then((result) => {
                    this.Logger.Log('Tab result received');
                    this.resultTab = result[0];
                    this.Url = this.resultTab.url;
                    this.BrowserTabId = this.resultTab.id;
                });
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.Init_BrowserProxy.name, err);
            }
            this.Logger.FuncEnd(this.Init_BrowserProxy.name);
        });
    }
    SendMessageAsync_BrowserProxy(message) {
        return new Promise((resolve, reject) => BrowserProxy_awaiter(this, void 0, void 0, function* () {
            browser.tabs.sendMessage(this.BrowserTabId, message)
                .then((response) => resolve(response))
                .catch((err) => reject(this.SendMessageAsync_BrowserProxy.name + ' | ' + JSON.stringify(err)));
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/CommandType.js
var CommandType;
(function (CommandType) {
    CommandType[CommandType["Unknown"] = 0] = "Unknown";
    CommandType[CommandType["PopUp"] = 1] = "PopUp";
    CommandType[CommandType["Content"] = 2] = "Content";
    CommandType[CommandType["Api"] = 3] = "Api";
    CommandType[CommandType["ContentInternal"] = 4] = "ContentInternal";
})(CommandType || (CommandType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpController/scripts/Classes/HandlersForInternal.js
var HandlersForInternal_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class HandlersForInternal_HandlersForInternal extends LoggableBase_HindeCoreBase {
    constructor(hindeCore, browserTabAgent) {
        super(hindeCore);
        this.BrowserTabAgent = browserTabAgent;
    }
    CloseWindow(evt) {
        window.close();
    }
    HandlerForSnapShotRestoreTBDTab(data) {
        return HandlersForInternal_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.HandlerForSnapShotRestoreTBDTab.name);
            try {
                if (!data.Evt.ctrlKey) {
                }
                else {
                }
            }
            catch (err) {
                throw (err);
            }
            this.Logger.FuncEnd(this.HandlerForSnapShotRestoreTBDTab.name);
        });
    }
    HandlerForSnapShotRestoreNewTab(uiCommandFlagRaisedEvent_Payload) {
        return HandlersForInternal_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.HandlerForSnapShotRestoreNewTab.name);
            this.BrowserTabAgent.SetQueryStringKeyValue(QueryStrKey.hsTargetSs, uiCommandFlagRaisedEvent_Payload.StateOfPopUp.SelectSnapShotId.Raw);
            let newUrl = this.BrowserTabAgent.GetFullUrl();
            yield this.CreateNewWindow(newUrl)
                .catch((ex) => {
                this.ErrorHand.ErrorAndThrow(this.HandlerForSnapShotRestoreNewTab.name, ex.toString());
            });
            this.Logger.FuncEnd(this.HandlerForSnapShotRestoreNewTab.name);
        });
    }
    CreateNewWindow(tabUrl) {
        return new Promise((resolve, reject) => HandlersForInternal_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.CreateNewWindow.name);
            yield this.BrowserTabAgent.CreateNewTab(tabUrl)
                .then(() => resolve())
                .catch((err) => reject(err));
            this.Logger.FuncEnd(this.CreateNewWindow.name);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Drones/IterationDrone/IterationDrone.js


class IterationDrone_IterationDrone extends LoggableBase_HindeCoreBase {
    constructor(hindeCore, nickname, logThisDroneInstance, maxIterations = null) {
        super(hindeCore);
        this.IsExhaustedMsg = 'Iteration helper exhausted';
        this.LogThisDroneInstance = logThisDroneInstance;
        if (!maxIterations) {
            maxIterations = SharedConst.Const.IterHelper.MaxCount.Default;
        }
        this.MaxIterations = maxIterations;
        this.CurrentIteration = maxIterations;
        this.Timeout = SharedConst.Const.IterHelper.Timeouts.Default;
        this.NickName = nickname;
        this.IsExhausted = false;
    }
    DecrementAndKeepGoing() {
        var toReturn = false;
        if (this.CurrentIteration > 0) {
            this.CurrentIteration -= 1;
            this.Timeout += this.Timeout * SharedConst.Const.IterHelper.GrowthPerIteration;
            if (this.TaskMonitor.IsCancelRequested()) {
                this.ErrorHand.ErrorAndThrow('CANCEL REQUESTED', '-----------------------------------');
            }
            if (this.Timeout > SharedConst.Const.IterHelper.Timeouts.Max) {
                this.Timeout = SharedConst.Const.IterHelper.Timeouts.Max;
            }
            if (this.LogThisDroneInstance) {
                this.Logger.Log(this.DecrementAndKeepGoing.name + ' ' + this.NickName + ' ' + this.CurrentIteration + ':' + this.MaxIterations + ' | cur. timeout: ' + this.Timeout);
            }
            toReturn = true;
        }
        else {
            this.IsExhausted = true;
            this.NotifyExhausted();
            toReturn = false;
        }
        return toReturn;
    }
    CurrentTimeout() {
        return this.Timeout;
    }
    NotifyExhausted() {
        if (this.LogThisDroneInstance) {
            this.Logger.Log('Iteration: ' + this.NickName + ' counter exhausted ' + this.CurrentIteration + ':' + this.MaxIterations);
        }
    }
    WaitAndThen(timeoutFunction) {
        if (this.LogThisDroneInstance) {
            this.Logger.FuncStart(this.WaitAndThen.name, this.NickName + ' ' + timeoutFunction.name);
        }
        var self = this;
        setTimeout(timeoutFunction(), self.Timeout);
        if (this.LogThisDroneInstance) {
            this.Logger.FuncEnd(this.WaitAndThen.name, this.NickName);
        }
    }
    Wait() {
        if (!this.OperationCancelled) {
            return new Promise((resolve) => {
                setTimeout(resolve, this.Timeout);
            });
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfDTFrame.js

class DefaultStateOfDTFrame_DefaultStateOfDTFrame {
    constructor() {
        this.StateOfContentEditor = new DefaultStateOfContentEditor_DefaultStateOfContentEditor();
        this.StateOfFrameStyling = null;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/Agents/InitResultsDTFrameProxy.js
class ReportResultsInitDTFrameProxy {
    constructor() {
        this.DTFrameProxyInitialized = false;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/Agents/InitResultContentEditorProxy.js
class InitReportContentEditorProxy {
    constructor() {
        this.ContentEditorProxyInitialized = false;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/ContentEditorProxyMutationEvent/ContentEditorProxyMutationEvent_Subject.js

class ContentEditorProxyMutationEvent_Subject_ContentEditorProxyMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore) {
        super(hindeCore, ContentEditorProxyMutationEvent_Subject_ContentEditorProxyMutationEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/TreeMutationEvent/ContentTreeProxyMutationEvent_Observer.js

class ContentTreeProxyMutationEvent_Observer_ContentTreeProxyMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, ContentTreeProxyMutationEvent_Observer_ContentTreeProxyMutationEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/FrameProxies/_StateProxy.js

class _StateProxy_BaseScStateFullProxy extends LoggableBase_HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
        this.Friendly = '{unknown friendly}';
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/PromiseResult.js

class PromiseResult_PromiseResult extends LoggableBase_HindeCoreBase {
    constructor(nickname, hindeCore) {
        super(hindeCore);
        this.prefix = 'Promise Successful? -> ';
        this.NickName = nickname;
    }
    WasSuccessful() {
        return this.Success;
    }
    MarkSuccessful() {
        this.Success = true;
        if (this.Logger) {
            this.Logger.LogVal(this.prefix + this.NickName, this.Success);
        }
        else {
            console.log('no logger success');
        }
    }
    MarkFailed(ex) {
        if (ex) {
            ex = ex.toString();
        }
        else {
            ex = '{no fail message}';
        }
        this.RejectReasons += ', ' + ex;
        this.Success = false;
        if (this.Logger) {
            this.ErrorHand.ErrorAndThrow(this.prefix + this.NickName, this.Success + '  err: ' + ex);
        }
        else {
            console.log('no logger fail ' + ex);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentEditorPublishProxy.js
var ContentEditorPublishProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class ContentEditorPublishProxy_ContentEditorPublishProxy extends LoggableBase_HindeCoreBase {
    constructor(hindeCore, contentEditorProxy, associatedDoc) {
        super(hindeCore);
        this.ContentEditorProxy = contentEditorProxy;
        this.AssociatedDoc = associatedDoc;
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
        this.FactoryHelp = new FactoryHelper_FactoryHelper(this.HindeCore);
    }
    Execute() {
        return new Promise((resolve, reject) => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            yield this.PublishActiveCE()
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    GetDocToPublish(scWindowType, targetDoc) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetDocToPublish.name);
                try {
                    if (scWindowType === ScWindowType.Desktop) {
                        yield this.RecipeBasics.GetTopLevelIframe(targetDoc)
                            .then((topIframe) => {
                            resolve(topIframe.GetContentDoc());
                        })
                            .catch((err) => reject(this.GetDocToPublish.name + ' ' + err));
                    }
                    else {
                        resolve(this.AssociatedDoc);
                    }
                }
                catch (err) {
                    reject(this.GetDocToPublish.name + ' ' + err);
                }
                this.Logger.FuncEnd(this.GetDocToPublish.name);
            }));
        });
    }
    PublishActiveCE() {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.PublishActiveCE.name);
            try {
                yield this.PublishCE(this.AssociatedDoc)
                    .catch((err) => { throw (err); });
            }
            catch (err) {
                throw (this.PublishActiveCE.name + ' ' + err);
            }
            this.Logger.FuncEnd(this.PublishActiveCE.name);
        });
    }
    __debugDataPublishChain(dataPublishChain, nickname) {
        this.Logger.FuncStart(this.__debugDataPublishChain.name, nickname);
        this.Logger.LogVal('docToPublish', this.Logger.IsNullOrUndefined(dataPublishChain.DocToPublish));
        this.Logger.LogVal('jqIframe', this.Logger.IsNullOrUndefined(dataPublishChain.JqIframe) + ' ' + (dataPublishChain.JqIframe ? dataPublishChain.JqIframe.NativeIFrameProxy.src() : ''));
        this.Logger.LogVal('Iframe0blueIframe', this.Logger.IsNullOrUndefined(dataPublishChain.Iframe0Blue) + ' ' + (dataPublishChain.Iframe0Blue ? dataPublishChain.Iframe0Blue.NativeIFrameProxy.src() : ''));
        this.Logger.LogVal('messageDialogIframeRed', this.Logger.IsNullOrUndefined(dataPublishChain.MessageDialogIframeRed) + ' ' + (dataPublishChain.MessageDialogIframeRed ? dataPublishChain.MessageDialogIframeRed.NativeIFrameProxy.src() : ''));
        this.Logger.FuncEnd(this.__debugDataPublishChain.name);
        return dataPublishChain;
    }
    PublishCE(docToPublish) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.PublishCE.name);
            try {
                var dataPublishChain = {
                    DocToPublish: docToPublish,
                    TopLevelDoc: this.AssociatedDoc,
                    Iframe0Blue: null,
                    JqIframe: null,
                    MessageDialogIframeRed: null
                };
                yield this.ClickPublishOnNav(dataPublishChain)
                    .then((dataPublishChain) => this.ClickMenuButtonPublishDropDown(dataPublishChain))
                    .then((dataPublishChain) => this.ClickMenuDropDownPublishItem(dataPublishChain))
                    .then((dataPublishChain) => this.GetThePublishItemDialog(dataPublishChain))
                    .then((dataPublishChain) => this.GetDialogIframe0Blue(dataPublishChain))
                    .then((dataPublishChain) => this.__WaitForAndClickPublishNextButton(dataPublishChain))
                    .then((dataPublishChain) => this.GetMessageDialog(dataPublishChain))
                    .then((dataPublishChain) => this.__waitForAndClickOk(dataPublishChain))
                    .then((dataPublishChain) => this.__waitForAndClickClose(dataPublishChain))
                    .catch(ex => {
                    this.ErrorHand.ErrorAndThrow(this.PublishCE.name, ex);
                });
            }
            catch (err) {
                throw (this.PublishCE.name + ' ' + err);
            }
            this.Logger.FuncEnd(this.PublishCE.name);
        });
    }
    ClickPublishOnNav(payload) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.ClickPublishOnNav.name);
            try {
                yield payload.DocToPublish.WaitForThenClick([ContentConst.Const.Selector.SC.NavPublishStrip]);
                yield payload.DocToPublish.WaitForThenClick([ContentConst.Const.Selector.SC.NavPublishStrip]);
            }
            catch (err) {
                throw (this.ClickPublishOnNav.name + ' ' + err);
            }
            this.Logger.FuncEnd(this.ClickPublishOnNav.name);
            return payload;
        });
    }
    __waitForAndClickClose(dataPublishChain) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            yield this.RecipeBasics.WaitForAndReturnFoundElem(dataPublishChain.Iframe0Blue.GetContentDoc(), ContentConst.Const.Selector.SC.Publish.SettingsHidden)
                .then(() => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
                yield this.RecipeBasics.WaitForAndReturnFoundElem(dataPublishChain.Iframe0Blue.GetContentDoc(), ContentConst.Const.Selector.SC.Publish.TheItemHasBeenPublished, SharedConst.Const.IterHelper.MaxCount.OverridePublishing);
            }))
                .then(() => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
                yield dataPublishChain.Iframe0Blue.GetContentDoc().WaitForThenClick([ContentConst.Const.Selector.SC.Cancel]);
            }));
            return dataPublishChain;
        });
    }
    __waitForAndClickOk(dataPublishChain) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            yield dataPublishChain.MessageDialogIframeRed.GetContentDoc().WaitForThenClick([ContentConst.Const.Selector.SC.Ok]);
            return dataPublishChain;
        });
    }
    __WaitForAndClickPublishNextButton(dataPublishChain) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            yield dataPublishChain.Iframe0Blue.GetContentDoc().WaitForThenClick([ContentConst.Const.Selector.SC.NextButton]);
            return dataPublishChain;
        });
    }
    ClickMenuButtonPublishDropDown(payload = null) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            yield payload.DocToPublish.WaitForThenClick([ContentConst.Const.Selector.SC.MenuButtonPublish]);
            return payload;
        });
    }
    ClickMenuDropDownPublishItem(payload = null) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            return yield payload.DocToPublish.WaitForAndClickWithPayload(ContentConst.Const.Selector.SC.MenuDropDownPublishItem, payload);
        });
    }
    GetThePublishItemDialog(dataPublishChain = null) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            try {
                yield this.RecipeBasics.WaitForAndReturnFoundElem(dataPublishChain.TopLevelDoc, ContentConst.Const.Selector.SC.JqueryModalDialogsFrame)
                    .then((found) => this.FactoryHelp.BaseFramePromiseFactory(found, 'jqIframe'))
                    .then((result) => dataPublishChain.JqIframe = result)
                    .then(() => dataPublishChain.JqIframe.WaitForCompleteNABFrameProxyOrReject())
                    .catch((err) => { throw (this.GetThePublishItemDialog.name + ' ' + err); });
            }
            catch (err) {
                throw (this.GetThePublishItemDialog.name + ' ' + err);
            }
            return dataPublishChain;
        });
    }
    GetMessageDialog(dataPublishChain) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            let toReturnPublishChain = dataPublishChain;
            yield this.RecipeBasics.WaitForIframeElemAndReturnWhenReady(dataPublishChain.JqIframe.GetContentDoc(), ContentConst.Const.Selector.SC.ContentIFrame1, 'iframeRed')
                .then((result) => toReturnPublishChain.MessageDialogIframeRed = result)
                .catch((err) => this.ErrorHand.ErrorAndThrow(this.GetMessageDialog.name, err));
            return toReturnPublishChain;
        });
    }
    GetDialogIframe0Blue(dataPublishChain = null) {
        return ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetDialogIframe0Blue.name);
                let promiseResult = new PromiseResult_PromiseResult(this.GetDialogIframe0Blue.name, this.HindeCore);
                this.Logger.LogAsJsonPretty('dataPublishChain', dataPublishChain);
                yield this.RecipeBasics.WaitForIframeElemAndReturnWhenReady(dataPublishChain.JqIframe.GetContentDoc(), ContentConst.Const.Selector.SC.ContentIframe0, 'Iframe0Blue')
                    .then((result) => {
                    this.Logger.MarkerC();
                    dataPublishChain.Iframe0Blue = result;
                    promiseResult.MarkSuccessful();
                })
                    .catch((err) => promiseResult.MarkFailed(err));
                this.Logger.LogAsJsonPretty('dataPublishChain.Iframe0Blue', dataPublishChain.Iframe0Blue);
                this.Logger.FuncEnd(this.GetDialogIframe0Blue.name);
                if (promiseResult.WasSuccessful()) {
                    resolve(dataPublishChain);
                }
                else {
                    reject(promiseResult.RejectReasons);
                }
            }));
        });
    }
    __waitForThenFunc(selector, targetDoc, dataPublishChain, optionFunc) {
        return new Promise((resolve, reject) => ContentEditorPublishProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.__waitForThenFunc.name, selector);
            this.Logger.LogAsJsonPretty(this.__waitForThenFunc.name, targetDoc);
            var found = null;
            yield this.RecipeBasics.WaitForAndReturnFoundElem(targetDoc, selector)
                .then((result) => found = result);
            if (found) {
                this.Logger.Log('found');
                if (optionFunc) {
                    this.Logger.Log('executing func');
                    dataPublishChain = yield optionFunc(found, dataPublishChain);
                }
                this.__debugDataPublishChain(dataPublishChain, this.__waitForThenFunc.name);
                this.Logger.FuncEnd(this.__waitForThenFunc.name, selector);
                resolve(dataPublishChain);
            }
            else {
                reject('not found');
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/Agents/InitResultTreeProxy.js
class InitReportTreeProxy {
    constructor() {
        this.TreeInstantiated = false;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/NativeClassNameChangeEvent/NativeClassNameChangeEvent_Subject.js
var NativeClassNameChangeEvent_Subject_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class NativeClassNameChangeEvent_Subject_NativeClassNameChangeEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore, treeElement) {
        super(hindeCore, NativeClassNameChangeEvent_Subject_NativeClassNameChangeEvent_Subject.name);
        this.TreeElement = treeElement;
        this.InitTreeMutationEvent_Observer();
    }
    InitTreeMutationEvent_Observer() {
        try {
            if (this.TreeElement) {
                let self = this;
                let observer = new MutationObserver((mutations) => self.OnNativeMutationEvent(mutations));
                observer.observe(this.TreeElement, { attributes: true, subtree: true, childList: true });
            }
        }
        catch (err) {
            throw (this.InitTreeMutationEvent_Observer.name + ' | ' + err);
        }
    }
    OnNativeMutationEvent(mutationRecords) {
        mutationRecords.forEach((mutationRecord, index) => NativeClassNameChangeEvent_Subject_awaiter(this, void 0, void 0, function* () {
            if (mutationRecord.attributeName === 'class') {
                let anchorTest = (mutationRecord.target);
                if (anchorTest) {
                    if (anchorTest.classList.contains(ContentConst.Const.ClassNames.SC.scContentTreeNodeActive)) {
                        this.NotifyObserversAsync(null);
                    }
                }
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/TreeMutationEvent/NativeClassNameChangeEvent_Observer.js

class NativeClassNameChangeEvent_Observer_NativeClassNameChangeEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, NativeClassNameChangeEvent_Observer_NativeClassNameChangeEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/TreeMutationEvent/TreeMutationEvent_Subject.js

class TreeMutationEvent_Subject_TreeMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore, treeElement) {
        super(hindeCore, TreeMutationEvent_Subject_TreeMutationEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentTreeProxy/ScContentTreeNodeProxy/ScContentTreeNodeProxy.js
var ScContentTreeNodeProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class ScContentTreeNodeProxy_ScContentTreeNodeProxy extends LoggableBase_HindeCoreBase {
    constructor(hindeCore, sourceElement, level, siblingIndex, totalSiblings) {
        super(hindeCore);
        this.Children = [];
        this.StateOfScContentTreeNode = {
            Friendly: '',
            IsExpanded: false,
            IsActive: false,
            Coord: {
                LevelIndex: -1,
                LevelWidth: -1,
                SiblingIndex: -1
            },
            ItemId: null,
            IconSrc: '',
            MainIconSrc: '',
            NodeChildren: [],
        };
        this.HasBeenHarvested = false;
        if (sourceElement) {
            this.StateOfScContentTreeNode.Coord.LevelWidth = totalSiblings;
            this.StateOfScContentTreeNode.Coord.SiblingIndex = siblingIndex;
            this.StateOfScContentTreeNode.Coord.LevelIndex = level;
            if (sourceElement.hasAttribute('src')) {
                this.InferFromImageElement(sourceElement);
            }
            else if (sourceElement.hasAttribute('href')) {
                this.InferFromAnchorElement(sourceElement);
            }
            else if (sourceElement.classList.contains('scContentTreeNode')) {
                this.InferFromDivElement(sourceElement);
            }
            else {
                this.ErrorHand.ErrorAndThrow(ScContentTreeNodeProxy_ScContentTreeNodeProxy.name, 'invalid source element type: ' + (typeof sourceElement));
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(ScContentTreeNodeProxy_ScContentTreeNodeProxy.name, 'null sourceElement or associatedDoc');
        }
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
    }
    Instantiate() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                yield this.HarvestNodeState();
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.Instantiate.name, err);
            }
        });
    }
    InferFromDivElement(divElement) {
        if (divElement) {
            this.ScContentTreeNodeDivElem = divElement;
        }
    }
    InferFromAnchorElement(anchorElement) {
        if (anchorElement) {
            this.Logger.Log(this.InferFromAnchorElement.name);
            this.ScContentTreeNodeDivElem = anchorElement.parentElement;
        }
    }
    InferFromImageElement(imageElement) {
        if (imageElement) {
            this.ScContentTreeNodeDivElem = imageElement.parentElement;
        }
    }
    GetGlyphNodeElem() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                yield this.RecipeBasics.WaitAndReturnFoundFromContainer(this.ScContentTreeNodeDivElem, ":scope > img", this.GetGlyphNodeElem.name)
                    .then((htmlElement) => {
                    resolve(htmlElement);
                })
                    .catch((err) => {
                    reject(this.GetGlyphNodeElem.name + ' | ' + err);
                });
            }));
        });
    }
    Friendly() {
        let toReturn = 'lvl: ' + this.StateOfScContentTreeNode.Coord.LevelIndex + ' Sib idx: ' + this.StateOfScContentTreeNode.Coord.SiblingIndex + ' tot sib: ' + this.StateOfScContentTreeNode.Coord.LevelWidth;
        return toReturn;
    }
    GetLinkNodeElem() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                yield this.RecipeBasics.WaitAndReturnFoundFromContainer(this.ScContentTreeNodeDivElem, ":scope > a", this.Friendly())
                    .then((htmlAnchorElement) => {
                    resolve(htmlAnchorElement);
                })
                    .catch((err) => {
                    reject(this.GetGlyphNodeElem.name + ' | ' + err);
                });
            }));
        });
    }
    GetStateOfScContentTreeNodeGeneric(includeChildren) {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                let stateOfChildrenAr = [];
                if (includeChildren) {
                    this.Children.forEach((child) => stateOfChildrenAr.push(child.GetStateOfScContentTreeNodeDeep()));
                }
                yield Promise.all(stateOfChildrenAr)
                    .then((result) => {
                    this.StateOfScContentTreeNode.NodeChildren = [];
                    result.forEach((stateoOfScContentTreeNodeChild) => {
                        if (stateoOfScContentTreeNodeChild.IsActive || stateoOfScContentTreeNodeChild.IsExpanded) {
                            this.StateOfScContentTreeNode.NodeChildren.push(stateoOfScContentTreeNodeChild);
                        }
                    });
                })
                    .then(() => resolve(this.StateOfScContentTreeNode))
                    .catch((err) => reject(this.GetStateOfScContentTreeNodeGeneric.name + ' | ' + err));
            }));
        });
    }
    GetStateOfScContentTreeNodeDeep() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                yield this.GetStateOfScContentTreeNodeGeneric(true)
                    .then((stateOfScContentTreeNodeDeep) => resolve(stateOfScContentTreeNodeDeep))
                    .catch((err) => reject(this.GetStateOfScContentTreeNodeDeep.name + ' | ' + err));
            }));
        });
    }
    GetStateOfScContentTreeNodeFlat() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetStateOfScContentTreeNodeFlat.name);
                yield this.GetStateOfScContentTreeNodeGeneric(false)
                    .then((stateOfContentTreeNodeFlat) => resolve(stateOfContentTreeNodeFlat))
                    .catch((err) => reject(this.GetStateOfScContentTreeNodeDeep.name + ' | ' + err));
                this.Logger.FuncEnd(this.GetStateOfScContentTreeNodeFlat.name);
            }));
        });
    }
    HarvestNodeState(forceRefreshData = false) {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                if (!this.HasBeenHarvested || forceRefreshData) {
                    this.glyphElem = null;
                    this.LinkNodeElem = null;
                    this.Children = [],
                        yield this.GetLinkNodeElem()
                            .then((htmlAnchorElement) => {
                            this.LinkNodeElem = htmlAnchorElement;
                        })
                            .then(() => this.GetGlyphNodeElem())
                            .then((htmlImageElement) => {
                            this.glyphElem = htmlImageElement;
                        })
                            .then(() => {
                            this.ErrorHand.ThrowIfNullOrUndefined(this.HarvestNodeState.name, [this.LinkNodeElem, this.glyphElem]);
                            this.StateOfScContentTreeNode.IsActive = this.QueryIsActive();
                            this.StateOfScContentTreeNode.IsExpanded = this.QueryIsExpanded();
                            this.StateOfScContentTreeNode.Friendly = this.GetNodeLinkText(this.LinkNodeElem);
                            this.StateOfScContentTreeNode.ItemId = this.GetApparentItemId(this.glyphElem);
                            this.StateOfScContentTreeNode.IconSrc = this.GetIconSrc();
                            this.StateOfScContentTreeNode.MainIconSrc = this.GetMainIconSrc();
                        })
                            .then(() => this.GetChildren())
                            .then((children) => {
                            this.Children = children;
                        })
                            .then(() => resolve())
                            .catch((err) => {
                            reject(this.HarvestNodeState.name + ' | ' + err);
                        });
                    this.HasBeenHarvested = true;
                }
                else {
                    resolve();
                }
            }));
        });
    }
    GetApparentItemId(htmlImageElement) {
        let glyphNodeIdSuffix = htmlImageElement.id.replace(ContentConst.Const.Names.SC.TreeGlyphPrefix, '');
        let toReturnGuidData = Guid_Guid.ParseGuid(glyphNodeIdSuffix, true);
        return toReturnGuidData;
    }
    GetIconSrc() {
        let toReturn;
        let foundElement = this.ScContentTreeNodeDivElem.querySelector(ContentConst.Const.Selector.SC.ContentEditor.scContentTreeNodeIcon);
        if (foundElement) {
            toReturn = foundElement.src;
        }
        return toReturn;
    }
    GetChildren() {
        return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                let toReturn = [];
                let childNodes = this.ScContentTreeNodeDivElem.querySelectorAll(':scope > div > ' + ContentConst.Const.Selector.SC.ContentEditor.ScContentTreeNode);
                childNodes.forEach((childNode, index) => {
                    toReturn.push(new ScContentTreeNodeProxy_ScContentTreeNodeProxy(this.HindeCore, childNode, this.StateOfScContentTreeNode.Coord.LevelIndex + 1, index, childNodes.length));
                });
                let PromiseAr = [];
                toReturn.forEach((newScContentTreeNodeProxy) => PromiseAr.push(newScContentTreeNodeProxy.Instantiate()));
                yield Promise.all(PromiseAr);
                resolve(toReturn);
            }
            catch (err) {
                reject(this.GetChildren.name + ' | ' + err);
            }
        }));
    }
    GetMainIconSrc() {
        let toReturn;
        let penultimateNode = this;
        let penultimateElem = this.ScContentTreeNodeDivElem.closest('[id=ContentTreeActualSize] > .scContentTreeNode >  div > .scContentTreeNode');
        if (penultimateElem) {
            penultimateNode = new ScContentTreeNodeProxy_ScContentTreeNodeProxy(this.HindeCore, penultimateElem, 0, 0, 1);
        }
        if (penultimateNode !== null) {
            toReturn = penultimateNode.GetIconSrc();
        }
        return toReturn;
    }
    SetStateOfTreeNode(newData, depth) {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                if (newData.IsExpanded) {
                    yield this.ExpandNode();
                }
                if (newData.IsActive) {
                    yield this.ActivateNode();
                }
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.SetStateOfTreeNode.name, err);
            }
        });
    }
    QueryIsActive() {
        let classList = this.LinkNodeElem.classList;
        let toReturn = classList.contains(ContentConst.Const.ClassNames.SC.scContentTreeNodeActive);
        return toReturn;
    }
    ActivateNode() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.ActivateNode.name);
                this.Logger.Log('activating node: ' + this.StateOfScContentTreeNode.Friendly);
                yield this.RecipeBasics.WaitForElemToHaveClassOrReject(this.LinkNodeElem, [ContentConst.Const.ClassNames.SC.scContentTreeNodeActive, ContentConst.Const.ClassNames.SC.scContentTreeNodeNormal], this.StateOfScContentTreeNode.Friendly);
                this.LinkNodeElem.click();
                yield this.RecipeBasics.WaitForElemToHaveClassOrReject(this.LinkNodeElem, [ContentConst.Const.ClassNames.SC.scContentTreeNodeActive], this.StateOfScContentTreeNode.Friendly)
                    .then(() => resolve())
                    .catch((err) => reject(this.ActivateNode.name + ' | ' + err));
                this.Logger.FuncEnd(this.ActivateNode.name);
            }));
        });
    }
    __collapseNode(element) {
        var currentSrc = element.getAttribute('src');
        this.Logger.Log('currentSrc' + currentSrc);
        if (currentSrc.indexOf(ContentConst.Const.Names.TreeMenuExpandedPng) > -1) {
            this.Logger.Log('clicking it to collapse');
            element.click();
        }
    }
    ExpandNode() {
        return ScContentTreeNodeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.QueryIsExpanded()) {
                    this.glyphElem.click();
                }
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.ExpandNode.name, err);
            }
        });
    }
    GetNodeLinkText(htmlElement) {
        return htmlElement.innerText;
    }
    IsContentTreeNode() {
        var toReturn = false;
        var className = this.ScContentTreeNodeDivElem.className;
        toReturn = className === ContentConst.Const.ClassNames.SC.ContentTreeNode;
        return toReturn;
    }
    QueryIsExpanded() {
        var toReturn = false;
        var srcAttr = this.glyphElem.getAttribute('src');
        if (srcAttr !== null) {
            if (srcAttr.indexOf(ContentConst.Const.Names.SC.TreeExpandedPng.sc920) > -1) {
                toReturn = true;
            }
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentTreeProxy/ContentTreeProxy.js
var ContentTreeProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};











class ContentTreeProxy_ContentTreeProxy extends LoggableBase_HindeCoreBase {
    constructor(hindeCore, associatedDoc, treeContainerElement) {
        super(hindeCore);
        this.ErrorHand.ThrowIfNullOrUndefined(ContentTreeProxy_ContentTreeProxy.name, [associatedDoc, treeContainerElement]);
        this.AssociatedDoc = associatedDoc;
        this.TreeContainerElement = treeContainerElement;
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
    }
    Instantiate_TreeProxy() {
        return ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.Instantiate_TreeProxy.name);
            try {
                yield this.GetRootNodeForFrameType()
                    .then((htmlElement) => {
                    this.rootTreeNodeHtmlElement = htmlElement;
                    this.initReportTreeProxy = new InitReportTreeProxy();
                    this.initReportTreeProxy.TreeInstantiated = true;
                    this.TreeMutationEvent_Subject = new TreeMutationEvent_Subject_TreeMutationEvent_Subject(this.HindeCore, this.TreeContainerElement);
                    this.NativeClassNameChangeEvent_Subject = new NativeClassNameChangeEvent_Subject_NativeClassNameChangeEvent_Subject(this.HindeCore, this.TreeContainerElement);
                    this.NativeClassNameChangeEvent_Observer = new NativeClassNameChangeEvent_Observer_NativeClassNameChangeEvent_Observer(this.HindeCore, this.CallBackOnNativeClassNameChangeEventAsync.bind(this));
                });
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.Instantiate_TreeProxy.name, err);
            }
            this.Logger.FuncEnd(this.Instantiate_TreeProxy.name);
        });
    }
    WireEvents_TreeProxy() {
        this.Logger.FuncStart(this.WireEvents_TreeProxy.name);
        this.NativeClassNameChangeEvent_Subject.RegisterObserver(this.NativeClassNameChangeEvent_Observer);
        this.initReportTreeProxy.EventsWired = true;
        this.Logger.FuncEnd(this.WireEvents_TreeProxy.name);
    }
    CallBackOnNativeClassNameChangeEventAsync(notUsed) {
        this.Logger.FuncStart(this.CallBackOnNativeClassNameChangeEventAsync.name);
        this.TaskMonitor.AsyncTaskStarted(this.CallBackOnNativeClassNameChangeEventAsync.name);
        if (this.TreeMutationEvent_Subject) {
            this.GetStateOfContentTree()
                .then((stateOfContentTree) => {
                let TreeMutationEvent_Payload = {
                    StateOfContentTree: stateOfContentTree
                };
                this.TreeMutationEvent_Subject.NotifyObserversAsync(TreeMutationEvent_Payload);
            })
                .then(() => this.Logger.Log(this.CallBackOnNativeClassNameChangeEventAsync.name + ' completed'))
                .catch((err) => this.ErrorHand.ErrorAndThrow(this.CallBackOnNativeClassNameChangeEventAsync.name, err));
        }
        this.TaskMonitor.AsyncTaskCompleted(this.CallBackOnNativeClassNameChangeEventAsync.name);
        this.Logger.FuncEnd(this.CallBackOnNativeClassNameChangeEventAsync.name);
    }
    TriggerActiveNodeChangeEvent() {
        this.Logger.FuncStart(this.TriggerActiveNodeChangeEvent.name);
        this.CallBackOnNativeClassNameChangeEventAsync(null);
        this.Logger.FuncEnd(this.TriggerActiveNodeChangeEvent.name);
    }
    GetTreeNodeByGlyph(targetNode) {
        return new Promise((resolve, reject) => ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            let scContentTreeNodeProxy = null;
            if (targetNode && this.TreeContainerElement) {
                var treeGlyphTargetId = ContentConst.Const.Names.SC.TreeGlyphPrefix + Guid_Guid.WithoutDashes(targetNode.ItemId);
                yield this.RecipeBasics.WaitAndReturnFoundFromContainer(this.TreeContainerElement, '[id=' + treeGlyphTargetId + ']', this.GetTreeNodeByGlyph.name + ' ' + treeGlyphTargetId)
                    .then((htmlElement) => scContentTreeNodeProxy = new ScContentTreeNodeProxy_ScContentTreeNodeProxy(this.HindeCore, htmlElement, targetNode.Coord.LevelIndex, targetNode.Coord.SiblingIndex, targetNode.Coord.LevelWidth))
                    .then(() => scContentTreeNodeProxy.Instantiate())
                    .then(() => resolve(scContentTreeNodeProxy))
                    .catch((err) => reject(this.GetTreeNodeByGlyph.name + ' | ' + err));
            }
        }));
    }
    SetStateOfNodeRecursive(currentNodeData, depth) {
        return ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.SetStateOfNodeRecursive.name, currentNodeData.Friendly);
            try {
                let maxIterDepth = 200;
                let targetScContentTreeNodeProxy = null;
                let promisesAr = [];
                if (depth > maxIterDepth) {
                    this.ErrorHand.ErrorAndThrow(this.SetStateOfNodeRecursive.name, 'Iteration check - max depth exceed. Something is probably wrong');
                }
                if (depth < maxIterDepth && currentNodeData) {
                    yield this.GetTreeNodeByGlyph(currentNodeData)
                        .then((scContentTreeNodeProxy) => {
                        targetScContentTreeNodeProxy = scContentTreeNodeProxy;
                    })
                        .then(() => targetScContentTreeNodeProxy.SetStateOfTreeNode(currentNodeData, depth))
                        .then(() => {
                        if (currentNodeData.NodeChildren.length > 0) {
                            currentNodeData.NodeChildren.forEach((nodeChild) => promisesAr.push(this.SetStateOfNodeRecursive(nodeChild, depth + 1)));
                        }
                    })
                        .then(() => Promise.all(promisesAr));
                }
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.SetStateOfNodeRecursive.name, err);
            }
            this.Logger.FuncEnd(this.SetStateOfNodeRecursive.name, currentNodeData.Friendly);
        });
    }
    SetStateOfContentTree(currentNodeData) {
        return ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.SetStateOfContentTree.name);
            this.TaskMonitor.AsyncTaskStarted(this.SetStateOfContentTree.name);
            try {
                this.TreeMutationEvent_Subject.DisableNotifications();
                let iterHelper = new IterationDrone_IterationDrone(this.HindeCore, this.SetStateOfContentTree.name, true);
                yield this.SetStateOfNodeRecursive(currentNodeData, 0);
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.SetStateOfContentTree.name, err);
            }
            this.TreeMutationEvent_Subject.EnableNotifications();
            this.TaskMonitor.AsyncTaskCompleted(this.SetStateOfContentTree.name);
            this.Logger.FuncEnd(this.SetStateOfContentTree.name);
        });
    }
    GetRootNodeForFrameType() {
        return ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            try {
                yield this.RecipeBasics.WaitForAndReturnFoundElem(this.AssociatedDoc, ContentConst.Const.Selector.SC.ContentEditor.RootAnchorNode)
                    .then((htmlElement) => this.rootTreeNodeHtmlElement = htmlElement);
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.GetRootNodeForFrameType.name, err);
            }
            let toReturn = this.TreeContainerElement.querySelector(ContentConst.Const.Selector.SC.ContentEditor.RootAnchorNode);
            return toReturn;
        });
    }
    GetActiveTreeNodeFromAncestorNode(stateOfScContentTreeNodeDeep) {
        let foundNode = null;
        if (stateOfScContentTreeNodeDeep.IsActive) {
            foundNode = stateOfScContentTreeNodeDeep;
        }
        else {
            stateOfScContentTreeNodeDeep.NodeChildren.forEach((child) => {
                let candidate = this.GetActiveTreeNodeFromAncestorNode(child);
                if (candidate !== null) {
                    foundNode = candidate;
                }
            });
        }
        return foundNode;
    }
    GetStateOfContentTree() {
        return new Promise((resolve, reject) => ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetStateOfContentTree.name);
            let stateOfContentTree = new DefaultStateOfContentTree();
            yield this.GetStateOfContentTreeNodeDeep()
                .then((result) => stateOfContentTree.StateOfScContentTreeNodeDeep = result)
                .then(() => {
                let activeNodeFlat = this.GetActiveTreeNodeFromAncestorNode(stateOfContentTree.StateOfScContentTreeNodeDeep);
                if (activeNodeFlat) {
                    stateOfContentTree.ActiveNodeFlat = activeNodeFlat;
                }
            })
                .then(() => resolve(stateOfContentTree))
                .catch((err) => reject(this.GetStateOfContentTree.name + ' | ' + err));
            this.Logger.FuncEnd(this.GetStateOfContentTree.name);
        }));
    }
    GetTreeNodeProxy() {
        return new Promise((resolve, reject) => ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            if (this.AssociatedDoc) {
                if (this.rootTreeNodeHtmlElement) {
                    var rootParent = this.rootTreeNodeHtmlElement.parentElement;
                    yield this.RecipeBasics.WaitAndReturnFoundFromContainer(rootParent, ContentConst.Const.Selector.SC.ContentEditor.ScContentTreeNodeGlyph, this.GetStateOfContentTreeNodeDeep.name)
                        .then((firstChildGlyphNode) => ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
                        this._treeNodeProxy = new ScContentTreeNodeProxy_ScContentTreeNodeProxy(this.HindeCore, firstChildGlyphNode, 0, 0, 1);
                        yield this._treeNodeProxy.Instantiate();
                    }))
                        .catch((err) => reject(this.GetTreeNodeProxy.name + ' | ' + err));
                }
                else {
                    this.ErrorHand.ErrorAndThrow(this.GetStateOfContentTreeNodeDeep.name, 'no root node');
                }
            }
            else {
                this.ErrorHand.ErrorAndThrow(this.GetStateOfContentTreeNodeDeep.name, 'no targetDoc');
            }
            resolve(this._treeNodeProxy);
        }));
    }
    GetStateOfContentTreeNodeDeep() {
        return new Promise((resolve, reject) => ContentTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetStateOfContentTreeNodeDeep.name);
            yield this.GetTreeNodeProxy()
                .then((scContentTreeNodeProxy) => scContentTreeNodeProxy.GetStateOfScContentTreeNodeDeep())
                .then((stateOfScContentTreeNodeProxy) => {
                resolve(stateOfScContentTreeNodeProxy);
            })
                .catch((err) => reject(this.GetStateOfContentTreeNodeDeep.name + ' | ' + err));
            this.Logger.FuncEnd(this.GetStateOfContentTreeNodeDeep.name);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentEditorProxy.js
var ContentEditorProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};










class ContentEditorProxy_ContentEditorProxy extends _StateProxy_BaseScStateFullProxy {
    constructor(hindeCore, associatedDoc, friendly) {
        super(hindeCore);
        this.Logger.CTORStart(ContentEditorProxy_ContentEditorProxy.name);
        this.AssociatedHindsiteId = Guid_Guid.NewRandomGuid();
        this.AssociatedScDocumentProxy = associatedDoc;
        this.ValidateAssociatedDocContentEditor();
        this.Friendly = friendly;
        this.Logger.CTOREnd(ContentEditorProxy_ContentEditorProxy.name);
    }
    PublishItem() {
        return ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            let publishProxy = new ContentEditorPublishProxy_ContentEditorPublishProxy(this.HindeCore, this, this.AssociatedScDocumentProxy);
            yield publishProxy.Execute();
        });
    }
    Instantiate() {
        return ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.Instantiate.name, ContentEditorProxy_ContentEditorProxy.name);
            try {
                this.initResultContentEditorProxy = new InitReportContentEditorProxy();
                this.RecipeBasic = new RecipeBasics_RecipeBasics(this.HindeCore);
                yield this.AssociatedScDocumentProxy.WaitForCompleteNAB_ScDocumentProxy(this.Friendly)
                    .then(() => {
                    this.ContentEditorProxyMutationEvent_Subject = new ContentEditorProxyMutationEvent_Subject_ContentEditorProxyMutationEvent_Subject(this.HindeCore);
                    this.TreeMutationEvent_Observer = new ContentTreeProxyMutationEvent_Observer_ContentTreeProxyMutationEvent_Observer(this.HindeCore, this.CallBackOnContentEditorProxyTreeMutationEventAsync.bind(this));
                })
                    .then(() => this.RecipeBasic.WaitForAndReturnFoundElem(this.AssociatedScDocumentProxy, ContentConst.Const.Selector.SC.ContentEditor.ScContentTreeContainer))
                    .then((treeContainer) => this.ContentTreeProxy = new ContentTreeProxy_ContentTreeProxy(this.HindeCore, this.AssociatedScDocumentProxy, treeContainer))
                    .then(() => this.ContentTreeProxy.Instantiate_TreeProxy())
                    .then(() => this.initResultContentEditorProxy.ContentEditorProxyInitialized = true)
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.Instantiate.name, err));
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.Instantiate.name, err);
            }
            this.Logger.FuncEnd(this.Instantiate.name, ContentEditorProxy_ContentEditorProxy.name);
        });
    }
    WireEvents() {
        this.Logger.FuncStart(this.WireEvents.name, ContentEditorProxy_ContentEditorProxy.name);
        this.ContentTreeProxy.WireEvents_TreeProxy();
        this.ContentTreeProxy.TreeMutationEvent_Subject.RegisterObserver(this.TreeMutationEvent_Observer);
        this.Logger.FuncEnd(this.WireEvents.name, ContentEditorProxy_ContentEditorProxy.name);
    }
    GetState() {
        return new Promise((resolve, reject) => ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetState.name, ContentEditorProxy_ContentEditorProxy.name);
            let toReturnStateOfContentEditor = new DefaultStateOfContentEditor_DefaultStateOfContentEditor();
            yield this.ContentTreeProxy.GetStateOfContentTree()
                .then((stateOfContentTree) => toReturnStateOfContentEditor.StateOfContentTree = stateOfContentTree)
                .then(() => resolve(toReturnStateOfContentEditor))
                .catch((err) => reject(this.GetState.name + ' | ' + err));
            this.Logger.FuncEnd(this.GetState.name, ContentEditorProxy_ContentEditorProxy.name);
        }));
    }
    SetState(dataToRestore) {
        return ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.SetState.name, ContentEditorProxy_ContentEditorProxy.name + ' ' + Guid_Guid.AsShort(this.AssociatedScDocumentProxy.DocId));
                this.ContentEditorProxyMutationEvent_Subject.DisableNotifications();
                yield this.RecipeBasic.WaitForTimePeriod(1000, this.SetState.name)
                    .then(() => this.RecipeBasic.WaitForNoUiFrontOverlay(this.SetState.name))
                    .then(() => this.ContentTreeProxy.SetStateOfContentTree(dataToRestore.StateOfContentTree.StateOfScContentTreeNodeDeep))
                    .then(() => {
                    this.ContentEditorProxyMutationEvent_Subject.EnableNotifications();
                    resolve(true);
                })
                    .catch((err) => {
                    this.ContentEditorProxyMutationEvent_Subject.EnableNotifications();
                    reject(this.SetState.name + " " + err);
                });
                this.Logger.FuncEnd(this.SetState.name, ContentEditorProxy_ContentEditorProxy.name);
            }));
        });
    }
    CallBackOnContentEditorProxyTreeMutationEventAsync(treeMutationEvent_Payload) {
        this.Logger.FuncStart(this.CallBackOnContentEditorProxyTreeMutationEventAsync.name);
        this.TaskMonitor.AsyncTaskStarted(this.CallBackOnContentEditorProxyTreeMutationEventAsync.name);
        let contentEditorProxyMutationEvent_Payload = {
            TreeMutationEvent_Payload: treeMutationEvent_Payload,
        };
        if (this.ContentEditorProxyMutationEvent_Subject) {
            this.ContentEditorProxyMutationEvent_Subject.NotifyObserversAsync(contentEditorProxyMutationEvent_Payload);
        }
        this.TaskMonitor.AsyncTaskCompleted(this.CallBackOnContentEditorProxyTreeMutationEventAsync.name);
        this.Logger.FuncEnd(this.CallBackOnContentEditorProxyTreeMutationEventAsync.name);
    }
    TriggerActiveNodeChangeEvent() {
        this.ErrorHand.ThrowIfNullOrUndefined(this.TriggerActiveNodeChangeEvent.name, this.ContentTreeProxy);
        this.ContentTreeProxy.TriggerActiveNodeChangeEvent();
    }
    ValidateAssociatedDocContentEditor() {
        if (!this.AssociatedScDocumentProxy) {
            this.ErrorHand.ErrorAndThrow(this.ValidateAssociatedDocContentEditor.name, 'No doc provided');
        }
        this.AssociatedScDocumentProxy.Validate();
    }
    WaitForCompleteNABContentEditor() {
        return ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForCompleteNABContentEditor.name);
            try {
                let recipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
                yield this.AssociatedScDocumentProxy.WaitForCompleteNAB_ScDocumentProxy(this.Friendly)
                    .catch((err) => this.ErrorHand.ErrorAndThrow(this.WaitForCompleteNABContentEditor.name, err));
            }
            catch (e) {
            }
            this.Logger.FuncEnd(this.WaitForCompleteNABContentEditor.name);
        });
    }
    SetCompactCss() {
        this.Logger.FuncStart(this.SetCompactCss.name, Guid_Guid.AsShort(this.AssociatedScDocumentProxy.DocId));
        this.Logger.FuncStart(this.SetCompactCss.name, Guid_Guid.AsShort(this.AssociatedScDocumentProxy.DocId));
    }
    GetActiveNode(allTreeNodeAr) {
        this.Logger.FuncStart(this.GetActiveNode.name);
        let toReturn = null;
        if (allTreeNodeAr) {
            for (var idx = 0; idx < allTreeNodeAr.length; idx++) {
                let candidate = allTreeNodeAr[idx];
                if (candidate.IsActive) {
                    toReturn = candidate;
                    break;
                }
            }
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.GetActiveNode.name, 'No tree data provided');
        }
        this.Logger.FuncEnd(this.GetActiveNode.name, toReturn.Friendly);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ContentEditor/ContentEditorProxy/PackageDesignerProxy.js


class PackageDesignerProxy_PackageDesignerProxy extends LoggableBase_HindeCoreBase {
    constructor(hindeCore, documentProxy, friendly) {
        super(hindeCore);
        this.Logger.CTORStart(ContentEditorProxy_ContentEditorProxy.name);
        this.DocumentProxy = documentProxy;
        this.Friendly = friendly;
        this.Logger.CTOREnd(ContentEditorProxy_ContentEditorProxy.name);
    }
    Instantiate() {
        this.Logger.FuncStart(this.Instantiate.name, this.Friendly);
        this.Logger.FuncEnd(this.Instantiate.name, this.Friendly);
    }
    WireEvents() {
        this.Logger.FuncStart(this.WireEvents.name, this.Friendly);
        this.Logger.FuncEnd(this.WireEvents.name, this.Friendly);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/ContentEditorProxyMutationEvent/ContentEditorProxyMutationEvent_Observer.js

class ContentEditorProxyMutationEvent_Observer_ContentEditorProxyMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, ownerFrameProxy) {
        super(hindeCore, ContentEditorProxyMutationEvent_Observer_ContentEditorProxyMutationEvent_Observer.name);
        this.OwnerDTFrameProxy = ownerFrameProxy;
    }
    UpdateAsync(payload) {
        this.OwnerDTFrameProxy.OnContentEditorProxyMutation(payload);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/DTFrameProxyMutationEvent/DTFrameProxyMutationEvent_Subject.js

class DTFrameProxyMutationEvent_Subject_DTFrameProxyMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore) {
        super(hindeCore, DTFrameProxyMutationEvent_Subject_DTFrameProxyMutationEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/ReadyState.js


class ReadyState_ReadyStateNAB extends LoggableBase_HindeCoreBase {
    constructor(hindeCore, document) {
        super(hindeCore);
        this.IsExausted = '';
        this.ErrorHand.ThrowIfNullOrUndefined(ReadyState_ReadyStateNAB.name, document);
        this.Document = document;
    }
    LogDebugValues() {
        this.Logger.LogVal('IsCompleteNAB', this.IsCompleteNAB());
        this.Logger.LogVal('Ready State', this.DocumentReadtStateFriendly());
        this.Logger.LogVal('document.URL', this.DocUrl());
        this.Logger.LogVal('Is Exhausted', this.IsExausted.toString());
        this.Logger.LogVal('DocIsAboutBlank', this.DocIsAboutBlank().toString());
    }
    DocumentReadtStateFriendly() {
        return 'DocumentReadyState :' + DocReadyState[this.DocumentReadyState()];
    }
    DocIsAboutBlank() {
        return ((this.DocUrl() === SharedConst.Const.UrlSuffix.AboutBlank) || (this.DocUrl() === ''));
    }
    SetDocument(document) {
        this.ErrorHand.ThrowIfNullOrUndefined(this.SetDocument.name, document);
        this.Document = document;
    }
    IsCompleteNAB() {
        return this.DocumentReadyState() === DocReadyState.Complete && !(this.DocIsAboutBlank());
    }
    DocumentReadyState() {
        let toReturn = DocReadyState.ReadyStateUnknown;
        let currentReadyState = document.readyState.toString();
        if (currentReadyState === 'complete') {
            toReturn = DocReadyState.Complete;
        }
        else if (currentReadyState === 'interactive') {
            toReturn = DocReadyState.Interactive;
        }
        else if (currentReadyState === 'loading') {
            toReturn = DocReadyState.Loading;
        }
        return toReturn;
    }
    DocUrl() {
        return this.Document.URL;
    }
}
var DocReadyState;
(function (DocReadyState) {
    DocReadyState[DocReadyState["ReadyStateUnknown"] = 0] = "ReadyStateUnknown";
    DocReadyState[DocReadyState["Complete"] = 1] = "Complete";
    DocReadyState[DocReadyState["Interactive"] = 2] = "Interactive";
    DocReadyState[DocReadyState["Loading"] = 3] = "Loading";
})(DocReadyState || (DocReadyState = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/NativeIFrameAddedEvent/NativeIFrameAddedEvent_Subject.js



class NativeIFrameAddedEvent_Subject_NativeIFrameAddRemoveEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(hindeCore, document) {
        super(hindeCore, NativeIFrameAddedEvent_Subject_NativeIFrameAddRemoveEvent_Subject.name);
        this.HindeCore = hindeCore;
        this.Logger.CTORStart(NativeIFrameAddedEvent_Subject_NativeIFrameAddRemoveEvent_Subject.name);
        if (!document) {
            this.ErrorHand.ErrorAndThrow(NativeIFrameAddedEvent_Subject_NativeIFrameAddRemoveEvent_Subject.name, 'No target doc');
        }
        this.NativeDocument = document;
        this.InitMutationObserver();
        this.Logger.CTOREnd(NativeIFrameAddedEvent_Subject_NativeIFrameAddRemoveEvent_Subject.name);
    }
    HandleRemovedNodes(removedNodes) {
        let removedIframeIds = [];
        removedNodes.forEach((removedNode) => {
            removedIframeIds.push(removedNode.id);
        });
        return removedIframeIds;
    }
    HandleAddedNodes(addedNodes) {
        let addedNativeFrameProxies = [];
        addedNodes.forEach((addedNode) => {
            if (addedNode instanceof HTMLIFrameElement) {
                let nativeIframeProxy = new NativeScIframeProxy_NativeIframeProxy(this.HindeCore, addedNode);
                addedNativeFrameProxies.push(nativeIframeProxy);
            }
        });
        return addedNativeFrameProxies;
    }
    CallBackOnNativeMutation(mutations) {
        this.Logger.FuncStart(this.CallBackOnNativeMutation.name);
        if (this.HasObservers()) {
            mutations.forEach((mutation, index) => {
                this.Logger.Log('processing mutation ' + (index + 1) + ':' + mutations.length);
                this.Logger.LogVal('mutation.addedNodes.length ', mutation.addedNodes.length);
                if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                    let mutatedElement = (mutation.target);
                    let desktopMutatedEvent_Payload = {
                        AddedNativeIFrameProxies: [],
                        RemovedIFrameIds: [],
                    };
                    desktopMutatedEvent_Payload.AddedNativeIFrameProxies = this.HandleAddedNodes(mutation.addedNodes);
                    desktopMutatedEvent_Payload.RemovedIFrameIds = this.HandleRemovedNodes(mutation.removedNodes);
                    if (desktopMutatedEvent_Payload.AddedNativeIFrameProxies.length > 0) {
                        this.Logger.LogVal('addedDTFrameProxies.length', desktopMutatedEvent_Payload.AddedNativeIFrameProxies.length);
                        this.NotifyObserversAsync(desktopMutatedEvent_Payload);
                    }
                    else {
                        this.Logger.Log('no notification, no DTFrameProxy added');
                    }
                }
            });
        }
        else {
            this.Logger.Log('No observers');
        }
        this.Logger.FuncEnd(this.CallBackOnNativeMutation.name);
    }
    InitMutationObserver() {
        this.Logger.FuncStart(this.InitMutationObserver.name);
        try {
            if (this.NativeDocument) {
                let self = this;
                let mutationObserver = new MutationObserver((mutations) => { self.CallBackOnNativeMutation(mutations); });
                let desktop = this.NativeDocument.getElementsByTagName(SharedConst.Const.KeyWords.Html.Tags.Body)[0];
                if (desktop) {
                    mutationObserver.observe(desktop, { attributes: false, subtree: false, childList: true });
                }
            }
            else {
                this.ErrorHand.ErrorAndThrow(this.InitMutationObserver.name, 'no AssociatedDoc');
            }
        }
        catch (err) {
            throw (err);
        }
        this.Logger.FuncEnd(this.InitMutationObserver.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/NativeDocumentProxy.js
var NativeDocumentProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class NativeDocumentProxy_NativeDocumentProxy extends LoggableBase_HindeCoreBase {
    constructor(hindeCore, document) {
        super(hindeCore);
        this.NativeDocument = document;
        this.NativeDoc = document;
        this.DocId = Guid_Guid.NewRandomGuid();
    }
    Instantiate_BaseNativeDocumentProxy() {
        this.Logger.FuncStart(this.Instantiate_BaseNativeDocumentProxy.name, NativeDocumentProxy_NativeDocumentProxy.name);
        this.NativeIFrameAddedEvent_Subject = new NativeIFrameAddedEvent_Subject_NativeIFrameAddRemoveEvent_Subject(this.HindeCore, this.NativeDocument);
        this.Logger.FuncEnd(this.Instantiate_BaseNativeDocumentProxy.name, NativeDocumentProxy_NativeDocumentProxy.name);
    }
    getElementById(idStr) {
        return this.NativeDocument.getElementById(idStr);
    }
    querySelector(selector) {
        return this.NativeDocument.querySelector(selector);
    }
    GetContentDoc() {
        return this.NativeDocument;
    }
    GetIFramesFromDataOneDoc() {
        let toReturnIframeAr = [];
        this.ErrorHand.ThrowIfNullOrUndefined(this.GetIFramesFromDataOneDoc.name, [this.NativeDocument]);
        var queryResults = this.NativeDocument.querySelectorAll(ContentConst.Const.Selector.SC.IframeContent.sc920);
        if (!queryResults) {
            queryResults = this.NativeDocument.querySelectorAll(ContentConst.Const.Selector.SC.IframeContent.sc820);
        }
        if (queryResults) {
            for (var ifrIdx = 0; ifrIdx < queryResults.length; ifrIdx++) {
                var iframeElem = new NativeScIframeProxy_NativeIframeProxy(this.HindeCore, queryResults[ifrIdx]);
                if (iframeElem) {
                    toReturnIframeAr.push(iframeElem);
                }
            }
        }
        this.Logger.LogVal('found iframes count', toReturnIframeAr.length);
        return toReturnIframeAr;
    }
    WaitForThenClick(selectorAr) {
        return new Promise((resolve, reject) => NativeDocumentProxy_awaiter(this, void 0, void 0, function* () {
            this.ErrorHand.ThrowIfNullOrUndefined(this.WaitForThenClick.name, [selectorAr, this.NativeDoc]);
            var found = null;
            var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForThenClick.name, true);
            while (!found && iterationJr.DecrementAndKeepGoing()) {
                for (var idx = 0; idx < selectorAr.length; idx++) {
                    found = this.NativeDoc.querySelector(selectorAr[idx]);
                    if (found) {
                        break;
                    }
                }
            }
            if (found) {
                try {
                    this.Logger.LogAsJsonPretty(this.WaitForThenClick.name + ' clicking', selectorAr);
                    found.click();
                    resolve();
                }
                catch (err) {
                    reject(this.WaitForThenClick.name + ' | ' + err);
                }
            }
            else {
                yield iterationJr.Wait()
                    .catch((err) => reject(this.WaitForThenClick.name + ' | ' + err));
            }
            if (!found && iterationJr.IsExhausted) {
                reject(iterationJr.IsExhaustedMsg);
            }
        }));
    }
    RaceWaitAndClick(selector) {
        return NativeDocumentProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => NativeDocumentProxy_awaiter(this, void 0, void 0, function* () {
                yield this.WaitForThenClick([selector.sc920, selector.sc820])
                    .then(() => resolve())
                    .catch((err) => reject(this.RaceWaitAndClick.name + ' | ' + err));
            }));
        });
    }
    WaitForAndClickWithPayload(selector, payload) {
        return new Promise((resolve, reject) => NativeDocumentProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForAndClickWithPayload.name, selector);
            yield this.WaitForThenClick([selector])
                .then(() => resolve(payload))
                .catch(ex => {
                this.ErrorHand.ErrorAndThrow(this.WaitForAndClickWithPayload.name, ex);
                reject(ex);
            });
        }));
    }
    WaitForCompleteNAB_NativeDocument(friendly) {
        return NativeDocumentProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => NativeDocumentProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForCompleteNAB_NativeDocument.name, friendly);
                this.ErrorHand.ThrowIfNullOrUndefined(this.WaitForCompleteNAB_NativeDocument.name, this.NativeDocument);
                var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForCompleteNAB_NativeDocument.name, false);
                let readyStateNAB = new ReadyState_ReadyStateNAB(this.HindeCore, this.NativeDocument);
                while (iterationJr.DecrementAndKeepGoing() && !readyStateNAB.IsCompleteNAB()) {
                    readyStateNAB.LogDebugValues();
                    yield iterationJr.Wait();
                }
                if (iterationJr.IsExhausted) {
                    this.Logger.Log(iterationJr.IsExhaustedMsg);
                    reject(iterationJr.IsExhaustedMsg);
                }
                else {
                    resolve(readyStateNAB);
                }
                this.Logger.FuncEnd(this.WaitForCompleteNAB_NativeDocument.name, friendly);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/DocumentProxyMutationEvent/DocumentProxyMutationEvent_Subject.js

class DocumentProxyMutationEvent_Subject_DocumentProxyMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/Events/NativeIFrameAddedEvent/NativeIFrameAddedEvent_Observer.js

class NativeIFrameAddedEvent_Observer_NativeIFrameAddRemoveEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, NativeIFrameAddedEvent_Observer_NativeIFrameAddRemoveEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/ScDocumentProxy.js
var ScDocumentProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class ScDocumentProxy_ScDocumentProxy extends NativeDocumentProxy_NativeDocumentProxy {
    constructor(hindeCore, nativeDocument) {
        super(hindeCore, nativeDocument);
    }
    Instantiate() {
        this.Logger.FuncStart(this.Instantiate.name, ScDocumentProxy_ScDocumentProxy.name);
        this.Instantiate_BaseNativeDocumentProxy();
        this.ScUrlAgent = new ScUrlAgent_ScUrlAgent(this.HindeCore, this.NativeDocument.URL);
        this.ScUrlAgent.Init_ScUrlAgent();
        this.NativeIframeAddRemoveEvent_Observer = new NativeIFrameAddedEvent_Observer_NativeIFrameAddRemoveEvent_Observer(this.HindeCore, this.CallBackOnNativeIFrameAddRemoveEventAsync.bind(this));
        this.DocumentProxyMutationEvent_Subject = new DocumentProxyMutationEvent_Subject_DocumentProxyMutationEvent_Subject(this.Logger, this.ErrorHand, ScDocumentProxy_ScDocumentProxy.name);
        this.Logger.FuncEnd(this.Instantiate.name, ScDocumentProxy_ScDocumentProxy.name);
    }
    CallBackOnNativeIFrameAddRemoveEventAsync(nativeIFrameAddRemoveEvent_Payload) {
        return ScDocumentProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.CallBackOnNativeIFrameAddRemoveEventAsync.name);
            try {
                let payload = {
                    AddedNativeIFrameProxies: nativeIFrameAddRemoveEvent_Payload.AddedNativeIFrameProxies,
                    RemovedIFrameIds: nativeIFrameAddRemoveEvent_Payload.RemovedIFrameIds
                };
                this.DocumentProxyMutationEvent_Subject.NotifyObserversAsync(payload);
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.CallBackOnNativeIFrameAddRemoveEventAsync.name, err);
            }
            this.Logger.FuncEnd(this.CallBackOnNativeIFrameAddRemoveEventAsync.name);
        });
    }
    GetScWindowType() {
        this.ErrorHand.ThrowIfNullOrUndefined(this.GetScWindowType.name + ' ' + ScDocumentProxy_ScDocumentProxy.name, this.ScUrlAgent);
        return this.ScUrlAgent.GetScWindowType();
    }
    WaitForCompleteNAB_ScDocumentProxy(friendly) {
        return ScDocumentProxy_awaiter(this, void 0, void 0, function* () {
            return this.WaitForCompleteNAB_NativeDocument(friendly);
        });
    }
    Validate() {
        if (!this.NativeDocument) {
            this.ErrorHand.ErrorAndThrow(this.Validate.name, 'No content doc');
        }
        else if (!this.NativeDocument.URL) {
            this.ErrorHand.ErrorAndThrow(this.Validate.name, 'No URL');
        }
        else if (this.NativeDocument.URL === SharedConst.Const.UrlSuffix.AboutBlank) {
            this.ErrorHand.ErrorAndThrow(this.Validate.name, SharedConst.Const.UrlSuffix.AboutBlank + ' not allowed');
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/NativeScIframeProxy.js
var NativeScIframeProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class NativeScIframeProxy_NativeIframeProxy extends LoggableBase_HindeCoreBase {
    constructor(hindeCore, htmlIframeElement) {
        super(hindeCore);
        this.HtmlIFrameElement = htmlIframeElement;
    }
    GetIframeHtmlElem() {
        return this.HtmlIFrameElement;
    }
    GetNativeContentDoc() {
        return this.ScDocumentProxy;
    }
    Instantiate() {
        this.Logger.FuncStart(this.Instantiate.name, NativeScIframeProxy_NativeIframeProxy.name);
        this.ScDocumentProxy = new ScDocumentProxy_ScDocumentProxy(this.HindeCore, this.HtmlIFrameElement.contentDocument);
        this.ScDocumentProxy.Instantiate();
        this.NativeIframeId = this.HtmlIFrameElement.id;
        this.Logger.FuncEnd(this.Instantiate.name, NativeScIframeProxy_NativeIframeProxy.name);
    }
    GetScWindowType() {
        return this.ScDocumentProxy.GetScWindowType();
    }
    src() {
        return this.HtmlIFrameElement.src;
    }
    ZindexAsInt() {
        let toReturn = -99;
        if (this.HtmlIFrameElement.style && this.HtmlIFrameElement.style.zIndex) {
            toReturn = parseInt(this.HtmlIFrameElement.style.zIndex);
        }
        return toReturn;
    }
    GetNativeIframeId() {
        return this.NativeIframeId;
    }
    SetState(StateOfFrameStyling) {
        this.HtmlIFrameElement.style.height = StateOfFrameStyling.Height;
        this.HtmlIFrameElement.style.left = StateOfFrameStyling.Left;
        this.HtmlIFrameElement.style.position = StateOfFrameStyling.Position;
        this.HtmlIFrameElement.style.top = StateOfFrameStyling.Top;
        this.HtmlIFrameElement.style.width = StateOfFrameStyling.Width;
        this.HtmlIFrameElement.style.zIndex = StateOfFrameStyling.ZIndex;
    }
    GetStateOfStyling() {
        let sourceStyle = this.HtmlIFrameElement.style;
        let toReturn = {
            Height: sourceStyle.height,
            Left: sourceStyle.left,
            Position: sourceStyle.position,
            Top: sourceStyle.top,
            Width: sourceStyle.width,
            ZIndex: sourceStyle.zIndex
        };
        return toReturn;
    }
    WaitForCompleteNABHtmlIframeElement(friendly) {
        return NativeScIframeProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => NativeScIframeProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForCompleteNABHtmlIframeElement.name, friendly);
                if (this.HtmlIFrameElement) {
                    var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForCompleteNABHtmlIframeElement.name, false);
                    let readyStateNAB = new ReadyState_ReadyStateNAB(this.HindeCore, this.HtmlIFrameElement.contentDocument);
                    while (iterationJr.DecrementAndKeepGoing() && readyStateNAB.DocIsAboutBlank()) {
                        yield iterationJr.Wait();
                        readyStateNAB.SetDocument(this.HtmlIFrameElement.contentDocument);
                        readyStateNAB.LogDebugValues();
                    }
                    if (iterationJr.IsExhausted) {
                        this.Logger.Log(iterationJr.IsExhaustedMsg);
                        resolve(readyStateNAB);
                    }
                    else {
                        this.ScDocumentProxy = new ScDocumentProxy_ScDocumentProxy(this.HindeCore, this.HtmlIFrameElement.contentDocument);
                        this.ScDocumentProxy.Instantiate();
                        yield this.ScDocumentProxy.WaitForCompleteNAB_ScDocumentProxy(friendly)
                            .then((result) => {
                            this.Logger.LogVal(this.WaitForCompleteNABHtmlIframeElement.name, result.DocumentReadtStateFriendly());
                            resolve(result);
                        })
                            .catch((err) => reject(this.WaitForCompleteNABHtmlIframeElement + ' | ' + err));
                    }
                }
                else {
                    this.ErrorHand.ErrorAndThrow(this.WaitForCompleteNABHtmlIframeElement.name, 'No target doc: ' + friendly);
                }
                this.Logger.FuncEnd(this.WaitForCompleteNABHtmlIframeElement.name, friendly);
                ;
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/FrameProxies/_BaseScFrameProxy.js
var _BaseScFrameProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class _BaseScFrameProxy_BaseScFrameProxy extends _StateProxy_BaseScStateFullProxy {
    constructor(hindeCore, argIframe) {
        super(hindeCore);
        this.NativeIFrameProxy = null;
        this.Id = null;
        if (typeof argIframe === typeof NativeScIframeProxy_NativeIframeProxy) {
            this.NativeIFrameProxy = argIframe;
        }
        else {
            this.NativeIFrameProxy = new NativeScIframeProxy_NativeIframeProxy(this.HindeCore, argIframe);
        }
        this.ErrorHand.ThrowIfNullOrUndefined(_BaseScFrameProxy_BaseScFrameProxy.name, this.NativeIFrameProxy);
        this.Id = 'base_' + this.NativeIFrameProxy.GetNativeIframeId();
    }
    Instantiate_BaseScFrameProxy() {
        this.NativeIFrameProxy.Instantiate();
    }
    GetZindexAsInt() {
        return this.NativeIFrameProxy.ZindexAsInt();
    }
    GetContentDoc() {
        return this.NativeIFrameProxy.GetNativeContentDoc();
    }
    WaitForCompleteNABFrameProxyOrReject() {
        return _BaseScFrameProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => _BaseScFrameProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForCompleteNABFrameProxyOrReject.name, this.Friendly);
                yield this.NativeIFrameProxy.WaitForCompleteNABHtmlIframeElement(this.Friendly)
                    .then((result) => {
                    if (result.IsCompleteNAB()) {
                        resolve(result.DocumentReadyState());
                    }
                    else {
                        reject(result.DocumentReadtStateFriendly);
                    }
                })
                    .catch((err) => reject(this.WaitForCompleteNABFrameProxyOrReject.name + ' | ' + err));
                this.Logger.FuncEnd(this.WaitForCompleteNABFrameProxyOrReject.name, this.Friendly);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Proxies/Desktop/DesktopProxy/FrameProxies/DTFrameProxy.js
var DTFrameProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};









class DTFrameProxy_DTFrameProxy extends _BaseScFrameProxy_BaseScFrameProxy {
    constructor(hindeCore, argIframe) {
        super(hindeCore, argIframe);
        this.FrameTypeDiscriminator = DTFrameProxy_DTFrameProxy.name;
        this.Index = -1;
        this.ErrorHand.ThrowIfNullOrUndefined(DTFrameProxy_DTFrameProxy.name, [argIframe]);
        if (argIframe) {
            this.Friendly = 'DTFrameProxy_' + this.NativeIFrameProxy.GetNativeIframeId();
        }
        else {
            this.ErrorHand.ErrorAndThrow(DTFrameProxy_DTFrameProxy.name, ' null check');
        }
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
    }
    Instantiate() {
        return DTFrameProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => DTFrameProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.Instantiate.name, DTFrameProxy_DTFrameProxy.name);
                this.Instantiate_BaseScFrameProxy();
                this.initReportFrameProxy = new ReportResultsInitDTFrameProxy();
                yield this.NativeIFrameProxy.WaitForCompleteNABHtmlIframeElement(this.Friendly)
                    .then((result) => {
                    if (!result.IsCompleteNAB()) {
                        reject(result.DocumentReadtStateFriendly());
                    }
                })
                    .then(() => {
                    let scWindowType = this.NativeIFrameProxy.GetScWindowType();
                    switch (scWindowType) {
                        case ScWindowType.ContentEditor:
                            this.ContentEditorProxy = new ContentEditorProxy_ContentEditorProxy(this.HindeCore, this.NativeIFrameProxy.ScDocumentProxy, this.Friendly);
                            break;
                        case ScWindowType.XmlControlPackageDesigner:
                            this.PackageDesignerProxy = new PackageDesignerProxy_PackageDesignerProxy(this.HindeCore, this.NativeIFrameProxy.ScDocumentProxy, this.Friendly);
                        default:
                            this.ErrorHand.WarningAndContinue(this.Instantiate.name, 'un handled DTFrame type ' + ScWindowType[scWindowType]);
                    }
                })
                    .then(() => this.ContentEditorProxy.Instantiate())
                    .then(() => {
                    this.DTFrameProxyMutationEvent_Subject = new DTFrameProxyMutationEvent_Subject_DTFrameProxyMutationEvent_Subject(this.HindeCore);
                    this.ContentEditorProxyMutationEvent_Observer = new ContentEditorProxyMutationEvent_Observer_ContentEditorProxyMutationEvent_Observer(this.HindeCore, this);
                    this.initReportFrameProxy.DTFrameProxyInitialized = true;
                })
                    .then(() => resolve())
                    .catch((err) => reject(this.Instantiate.name + ' | ' + err));
                this.Logger.FuncEnd(this.Instantiate.name, DTFrameProxy_DTFrameProxy.name);
            }));
        });
    }
    WireEvents() {
        return DTFrameProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WireEvents.name);
            this.ContentEditorProxy.ContentEditorProxyMutationEvent_Subject.RegisterObserver(this.ContentEditorProxyMutationEvent_Observer);
            this.ContentEditorProxy.WireEvents();
            this.Logger.FuncEnd(this.WireEvents.name);
        });
    }
    GetState() {
        return new Promise((resolve, reject) => DTFrameProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetState.name, DTFrameProxy_DTFrameProxy.name);
            let stateOfDTFrame = new DefaultStateOfDTFrame_DefaultStateOfDTFrame();
            stateOfDTFrame.StateOfFrameStyling = this.NativeIFrameProxy.GetStateOfStyling();
            stateOfDTFrame.ZIndex = this.GetZindexAsInt();
            if (this.ContentEditorProxy) {
                yield this.ContentEditorProxy.GetState()
                    .then((stateOfContentEditorProxy) => stateOfDTFrame.StateOfContentEditor = stateOfContentEditorProxy)
                    .catch((err) => this.GetState.name + ' | ' + err);
            }
            resolve(stateOfDTFrame);
            this.Logger.FuncEnd(this.GetState.name, DTFrameProxy_DTFrameProxy.name);
        }));
    }
    SetState(stateOfDTFrame) {
        return DTFrameProxy_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart(this.SetState.name, DTFrameProxy_DTFrameProxy.name);
                this.DTFrameProxyMutationEvent_Subject.DisableNotifications();
                yield this.ContentEditorProxy.SetState(stateOfDTFrame.StateOfContentEditor)
                    .then(() => {
                    this.SetFrameStyling(stateOfDTFrame);
                    this.DTFrameProxyMutationEvent_Subject.EnableNotifications();
                });
            }
            catch (err) {
                this.ErrorHand.ErrorAndThrow(this.SetState.name, err);
            }
            this.Logger.FuncEnd(this.SetState.name, DTFrameProxy_DTFrameProxy.name);
        });
    }
    GetScWindowType() {
        return (this.NativeIFrameProxy.GetScWindowType());
    }
    GetContentDoc() {
        return this.NativeIFrameProxy.ScDocumentProxy;
    }
    SetFrameStyling(stateOfDTFrame) {
        this.Logger.FuncStart(this.SetFrameStyling.name);
        this.NativeIFrameProxy.SetState(stateOfDTFrame.StateOfFrameStyling);
        this.Logger.FuncEnd(this.SetFrameStyling.name);
    }
    OnContentEditorProxyMutation(payload) {
        let dtFrameProxyMutationEvent_Payload = {
            ContentEditorProxyMutationPayload: payload,
            FrameId: this.NativeIFrameProxy.GetNativeIframeId()
        };
        this.DTFrameProxyMutationEvent_Subject.NotifyObserversAsync(dtFrameProxyMutationEvent_Payload);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/FactoryHelper.js
var FactoryHelper_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class FactoryHelper_FactoryHelper extends LoggableBase_HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
    }
    BaseFramePromiseFactory(iframeElem, nickname) {
        this.Logger.FuncStart(this.BaseFramePromiseFactory.name);
        var toReturn = null;
        if (iframeElem && nickname) {
            var toReturn = new DTFrameProxy_DTFrameProxy(this.HindeCore, iframeElem);
        }
        else {
            this.ErrorHand.ErrorAndThrow(this.BaseFramePromiseFactory.name, 'one of these is null');
            this.Logger.LogAsJsonPretty('iframeElem', iframeElem);
            this.Logger.LogAsJsonPretty('nickname', nickname);
        }
        this.Logger.FuncEnd(this.BaseFramePromiseFactory.name);
        return toReturn;
    }
    DTFrameProxyFactory(iframeElem) {
        return FactoryHelper_awaiter(this, void 0, void 0, function* () {
            var toReturn = null;
            if (iframeElem) {
                var toReturn = new DTFrameProxy_DTFrameProxy(this.HindeCore, iframeElem);
                yield toReturn.Instantiate();
            }
            else {
                this.ErrorHand.ErrorAndThrow(this.DTFrameProxyFactory.name, 'one of these is null');
                this.Logger.LogAsJsonPretty('iframeElem', iframeElem);
            }
            return toReturn;
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/HindSiteScUiProxy/scripts/Helpers/FrameHelper.js
var FrameHelper_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class FrameHelper_FrameHelper extends LoggableBase_HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
        this.factoryHelper = new FactoryHelper_FactoryHelper(this.HindeCore);
    }
    GetIFrameAsBaseFrameProxy(iframeElem, ifrIdx) {
        return FrameHelper_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => FrameHelper_awaiter(this, void 0, void 0, function* () {
                let friendly = 'desktop Iframe_' + ifrIdx;
                let dTFrameProxy = new NativeScIframeProxy_NativeIframeProxy(this.HindeCore, iframeElem);
                dTFrameProxy.Instantiate();
                yield dTFrameProxy.WaitForCompleteNABHtmlIframeElement(friendly)
                    .then((result) => {
                    if (!result.IsCompleteNAB()) {
                        reject(result.DocumentReadtStateFriendly());
                    }
                })
                    .then(() => this.factoryHelper.BaseFramePromiseFactory(iframeElem, friendly))
                    .then((result) => resolve(result))
                    .catch((err) => reject(this.GetIFramesAsBaseFrameProxies.name + ' | ' + err));
            }));
        });
    }
    GetIFrameAsDTFrameProxy(nativeIframeProxy) {
        return FrameHelper_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => FrameHelper_awaiter(this, void 0, void 0, function* () {
                let dTFrameProxy = new DTFrameProxy_DTFrameProxy(this.HindeCore, nativeIframeProxy);
                yield dTFrameProxy.WaitForCompleteNABFrameProxyOrReject();
                yield dTFrameProxy.WaitForCompleteNABFrameProxyOrReject()
                    .then(() => resolve(dTFrameProxy))
                    .catch((err) => reject(this.GetIFramesAsBaseFrameProxies.name + ' | ' + err));
            }));
        });
    }
    GetIFramesAsDTFrameProxies(dataOneDoc) {
        return FrameHelper_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.Logger.FuncStart(this.GetIFramesAsBaseFrameProxies.name);
                var toReturn = [];
                let nativeIframeProxies = dataOneDoc.GetIFramesFromDataOneDoc();
                let promiseAr = [];
                nativeIframeProxies.forEach((iframeElem) => {
                    promiseAr.push(this.GetIFrameAsDTFrameProxy(iframeElem));
                });
                Promise.all(promiseAr)
                    .then((values) => {
                    values.forEach((oneVal) => {
                        toReturn.push(oneVal);
                    });
                    this.Logger.LogVal('count: ', toReturn.length);
                })
                    .then(() => resolve(toReturn))
                    .catch((err) => reject(this.GetIFramesAsBaseFrameProxies.name + ' | ' + err));
                this.Logger.FuncEnd(this.GetIFramesAsBaseFrameProxies.name);
            });
        });
    }
    GetIFramesAsBaseFrameProxies(targetDoc) {
        return FrameHelper_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.Logger.FuncStart(this.GetIFramesAsBaseFrameProxies.name);
                var toReturn = [];
                let NativeScIframeProxyAr = targetDoc.GetIFramesFromDataOneDoc();
                let promAr = [];
                NativeScIframeProxyAr.forEach((nativeScIframeProxy, index) => {
                    promAr.push(this.GetIFrameAsBaseFrameProxy(nativeScIframeProxy.GetIframeHtmlElem(), index));
                });
                Promise.all(promAr)
                    .then((values) => {
                    values.forEach((oneVal) => {
                        toReturn.push(oneVal);
                    });
                    this.Logger.LogVal('count: ', toReturn.length);
                })
                    .then(() => resolve(toReturn))
                    .catch((err) => reject(this.GetIFramesAsBaseFrameProxies.name + ' | ' + err));
                this.Logger.FuncEnd(this.GetIFramesAsBaseFrameProxies.name);
            });
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/RecipeBasics.js
var RecipeBasics_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class RecipeBasics_RecipeBasics extends LoggableBase_HindeCoreBase {
    constructor(hindeCore) {
        super(hindeCore);
    }
    WaitForNoUiFrontOverlay(friendly) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForNoUiFrontOverlay.name, friendly);
            var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForNoUiFrontOverlay.name, true);
            let overLayExists = true;
            let iframeElem = document.getElementById('jqueryModalDialogsFrame');
            let iframeContentDoc = iframeElem.contentDocument;
            let iframeContentDocBody = iframeContentDoc.body;
            while (iterationJr.DecrementAndKeepGoing() && overLayExists) {
                yield iterationJr.Wait();
                let foundElem = iframeContentDocBody.querySelector(':scope > .ui-widget-overlay.ui-front');
                overLayExists = foundElem !== null;
            }
            if (iterationJr.IsExhausted) {
                this.Logger.Log(iterationJr.IsExhaustedMsg);
                reject(iterationJr.IsExhaustedMsg);
            }
            else {
                resolve();
            }
            this.Logger.FuncEnd(this.WaitForNoUiFrontOverlay.name, friendly);
        }));
    }
    WaitForTimePeriod(timeToWaitMs, friendly) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForTimePeriod.name, friendly);
            var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForTimePeriod.name, true);
            let startTimeStamp = new Date().getTime();
            let timeElapsed = 0;
            while (iterationJr.DecrementAndKeepGoing() && timeElapsed < timeToWaitMs) {
                timeElapsed = new Date().getTime() - startTimeStamp;
                yield iterationJr.Wait();
            }
            if (iterationJr.IsExhausted) {
                this.Logger.Log(iterationJr.IsExhaustedMsg);
                reject(iterationJr.IsExhaustedMsg);
            }
            else {
                resolve();
            }
            this.Logger.FuncEnd(this.WaitForTimePeriod.name, friendly);
        }));
    }
    WaitForCompleteNAB_DataOneDoc(scDocumentProxy, friendly) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForCompleteNAB_DataOneDoc.name, friendly);
                this.ErrorHand.ThrowIfNullOrUndefined(this.WaitForCompleteNAB_DataOneDoc.name, [scDocumentProxy, friendly]);
                yield scDocumentProxy.WaitForCompleteNAB_ScDocumentProxy(friendly)
                    .then((result) => {
                    result.LogDebugValues();
                    resolve(result);
                })
                    .catch((err) => reject(this.WaitForCompleteNAB_DataOneDoc.name + ' | ' + err));
                this.Logger.FuncEnd(this.WaitForCompleteNAB_DataOneDoc.name, friendly);
            }));
        });
    }
    GetTopLevelIframe(targetDoc) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            var toReturn = null;
            let frameHelper = new FrameHelper_FrameHelper(this.HindeCore);
            yield frameHelper.GetIFramesAsBaseFrameProxies(targetDoc)
                .then((allIframe) => {
                var maxZVal = -1;
                if (allIframe && allIframe.length > 0) {
                    for (var idx = 0; idx < allIframe.length; idx++) {
                        var candidateIframe = allIframe[idx];
                        if (candidateIframe && candidateIframe.GetZindexAsInt() > maxZVal) {
                            toReturn = candidateIframe;
                            maxZVal = candidateIframe.GetZindexAsInt();
                        }
                    }
                }
            });
            return toReturn;
        });
    }
    WaitForIframeElemAndReturnWhenReady(haystackDoc, selector, iframeNickName) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForIframeElemAndReturnWhenReady.name);
                let factoryHelp = new FactoryHelper_FactoryHelper(this.HindeCore);
                yield this.WaitForAndReturnFoundElem(haystackDoc, selector)
                    .then((foundElem) => RecipeBasics_awaiter(this, void 0, void 0, function* () { return yield factoryHelp.BaseFramePromiseFactory(foundElem, iframeNickName); }))
                    .then((result) => resolve(result))
                    .catch((err) => reject(err));
                this.Logger.FuncEnd(this.WaitForIframeElemAndReturnWhenReady.name);
            }));
        });
    }
    WaitForNewIframe(allIframesBefore, targetDoc) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForNewIframe.name);
                this.Logger.LogAsJsonPretty('allIframesBefore', allIframesBefore);
                this.ErrorHand.ThrowIfNullOrUndefined(this.WaitForNewIframe.name, [allIframesBefore, targetDoc]);
                var toReturn = null;
                var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForNewIframe.name, true);
                let beforeCount = allIframesBefore.length;
                while (!toReturn && iterationJr.DecrementAndKeepGoing()) {
                    var allIframesAfter;
                    let frameHelper = new FrameHelper_FrameHelper(this.HindeCore);
                    yield frameHelper.GetIFramesAsBaseFrameProxies(targetDoc)
                        .then((result) => allIframesAfter = result)
                        .catch((err) => reject(this.WaitForNewIframe.name + ' ' + err));
                    var count = allIframesAfter.length;
                    this.Logger.Log('iFrame count before: ' + beforeCount);
                    this.Logger.Log('iFrame count after: ' + allIframesAfter.length);
                    if (count > beforeCount) {
                        var newIframes = allIframesAfter.filter(e => !allIframesBefore.includes(e));
                        toReturn = newIframes[0];
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                this.Logger.FuncEnd(this.WaitForNewIframe.name);
                if (toReturn) {
                    resolve(toReturn);
                }
                else {
                    reject(iterationJr.IsExhaustedMsg);
                }
            }));
        });
    }
    WaitForElemToHaveClassOrReject(htmlElement, classNames, friendly) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForElemToHaveClassOrReject.name, friendly + ' - ' + classNames);
                this.ErrorHand.ThrowIfNullOrUndefined(this.WaitForElemToHaveClassOrReject.name, [htmlElement, classNames]);
                var elemHasClassName = false;
                var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForElemToHaveClassOrReject.name + ' : ' + classNames + ' ' + friendly, true);
                while (!elemHasClassName && iterationJr.DecrementAndKeepGoing()) {
                    let classList = htmlElement.classList;
                    classNames.forEach((className) => {
                        if (classList.contains(className)) {
                            elemHasClassName = true;
                        }
                    });
                    if (elemHasClassName) {
                        resolve();
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (iterationJr.IsExhausted) {
                    reject(iterationJr.IsExhaustedMsg);
                }
                this.Logger.FuncEnd(this.WaitForElemToHaveClassOrReject.name, friendly);
            }));
        });
    }
    WaitAndReturnFoundFromContainer(haystackElem, selector, friendly) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.ErrorHand.ThrowIfNullOrUndefined(this.WaitAndReturnFoundFromContainer.name, [haystackElem, selector]);
                var toReturnFoundElem = null;
                var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitAndReturnFoundFromContainer.name + ' : ' + selector + ' ' + friendly, false);
                while (!toReturnFoundElem && iterationJr.DecrementAndKeepGoing()) {
                    toReturnFoundElem = haystackElem.querySelector(selector);
                    if (toReturnFoundElem) {
                        resolve(toReturnFoundElem);
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (iterationJr.IsExhausted) {
                    reject(iterationJr.IsExhaustedMsg);
                }
            }));
        });
    }
    WaitForAndReturnFoundElem(haystackDoc, selector, overrideIterCount = 8) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForAndReturnFoundElem.name);
                var toReturnFoundElem = null;
                var iterationJr = new IterationDrone_IterationDrone(this.HindeCore, this.WaitForAndReturnFoundElem.name + ' - ' + selector + ' - ' + haystackDoc.Nickname, true, overrideIterCount);
                while (!toReturnFoundElem && iterationJr.DecrementAndKeepGoing()) {
                    toReturnFoundElem = haystackDoc.GetContentDoc().querySelector(selector);
                    if (toReturnFoundElem) {
                        resolve(toReturnFoundElem);
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                reject(iterationJr.IsExhaustedMsg);
                this.Logger.FuncEnd(this.WaitForAndReturnFoundElem.name);
            }));
        });
    }
    TabWaitForReadyStateCompleteNative(browserTab) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            let iterHelper = new IterationDrone_IterationDrone(this.HindeCore, this.TabWaitForReadyStateCompleteNative.name, true);
            let result = new PromiseResult_PromiseResult(this.TabWaitForReadyStateCompleteNative.name, this.HindeCore);
            while (browserTab.status !== 'complete' && iterHelper.DecrementAndKeepGoing()) {
                this.Logger.LogVal('tab status', browserTab.status);
                yield iterHelper.Wait;
            }
            if (browserTab.status === 'complete') {
                result.MarkSuccessful();
            }
            else {
                result.MarkFailed('browser status: ' + browserTab.status);
                if (iterHelper.IsExhausted) {
                    result.MarkFailed(iterHelper.IsExhaustedMsg);
                }
            }
            if (result.WasSuccessful()) {
                resolve();
            }
            else {
                reject(result.RejectReasons);
            }
        }));
    }
    TabChainSetHrefWaitForComplete(href) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.TabChainSetHrefWaitForComplete.name, href.AbsUrl);
            yield browser.tabs.query({ currentWindow: true, active: true })
                .then((result) => {
                let targetTab = result[0];
                browser.tabs.update(targetTab.id, { url: href.AbsUrl });
                this.TabWaitForReadyStateCompleteNative(targetTab);
            })
                .then(resolve)
                .catch((ex) => reject(ex));
            this.Logger.FuncEnd(this.TabChainSetHrefWaitForComplete.name, href.AbsUrl);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpController/scripts/Agents/BrowserTabAgent.js
var BrowserTabAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class BrowserTabAgent_BrowserTabAgent extends LoggableBase_HindeCoreBase {
    constructor(hindeCore, scUrlAgent, settingsAgent) {
        super(hindeCore);
        this.Logger.CTORStart(BrowserTabAgent_BrowserTabAgent.name);
        this.ScUrlAgent = scUrlAgent;
        this.SettingsAgent = settingsAgent;
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.HindeCore);
        this.Logger.CTOREnd(BrowserTabAgent_BrowserTabAgent.name);
    }
    GetFullUrl() {
        return this.ScUrlAgent.BuildFullUrlFromParts();
    }
    SetQueryStringKeyValue(qsKey, qsValue) {
        this.ScUrlAgent.SetParameterValueByKey(qsKey, qsValue);
    }
    GetWindowType() {
        return this.ScUrlAgent.GetScWindowType();
    }
    CreateNewTab(tabUrl) {
        return BrowserTabAgent_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => BrowserTabAgent_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.CreateNewTab.name, tabUrl.AbsUrl);
                yield browser.tabs.create({ url: tabUrl.AbsUrl })
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }));
        });
    }
    ChangeLocationSwitchBoard(desiredPageType) {
        this.Logger.FuncStart(this.ChangeLocationSwitchBoard.name, 'desired = ' + ScWindowType[desiredPageType]);
        var iteration = new IterationDrone_IterationDrone(this.HindeCore, this.ChangeLocationSwitchBoard.name, true);
        if (iteration.DecrementAndKeepGoing()) {
            var currentScWindowType = this.ScUrlAgent.GetScWindowType();
            if (currentScWindowType === ScWindowType.LoginPage) {
                var self = this;
            }
            else if (currentScWindowType === ScWindowType.Launchpad || currentScWindowType === ScWindowType.ContentEditor || currentScWindowType === ScWindowType.Desktop) {
                var self = this;
                this.ScUrlAgent.SetFilePathFromWindowType(desiredPageType);
                var absUrl = this.ScUrlAgent.BuildFullUrlFromParts();
                var callBackOnSuccessfulHrefChange = function () {
                    self.Logger.Log('Callback triggered');
                    self.ChangeLocationSwitchBoard(desiredPageType);
                };
                this.RecipeBasics.TabChainSetHrefWaitForComplete(absUrl)
                    .then(() => {
                })
                    .then(() => callBackOnSuccessfulHrefChange);
            }
        }
        this.Logger.FuncEnd(this.ChangeLocationSwitchBoard.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpController/scripts/Classes/PopUpCommands.js








class PopUpCommands_CommandDefintionFactory extends LoggableBase_HindeCoreBase {
    BuildMenuCommandParamsBucket() {
        let toReturn = {
            MenuCommandParamsAr: [
                {
                    MenuCommandKey: MenuCommandKey.CloseWindow,
                    PlaceHolderSelector: PopConst.Const.Selector.HS.ModuleContainers.BtnWindowClose,
                    IconClassName: PopConst.Const.ClassNames.HS.Buttons.Icons.CloseWindow,
                    InnerText: "",
                    VisibilityControllers: [],
                    ModuleKey: ModuleKey.ButtonClose,
                    EventHandlerData: {
                        Event: CommandButtonEvents.OnSingleClick,
                        MsgFlag: MsgFlag.ReqClosePopUpWindow,
                        CommandType: CommandType.PopUp,
                    }
                },
                {
                    MenuCommandKey: MenuCommandKey.AddCeTab,
                    PlaceHolderSelector: PopConst.Const.Selector.HS.ModuleContainers.BtnAddContentEditor,
                    IconClassName: PopConst.Const.ClassNames.HS.Buttons.Icons.AddContentEditorTab,
                    InnerText: "Add CE Tab to DT",
                    VisibilityControllers: [VisibilityType.Desktop, VisibilityType.DISABLED],
                    ModuleKey: ModuleKey.ButtonTypical,
                    EventHandlerData: {
                        Event: CommandButtonEvents.OnSingleClick,
                        MsgFlag: MsgFlag.ReqAddCETab,
                        CommandType: CommandType.Content,
                    }
                },
                {
                    MenuCommandKey: MenuCommandKey.GoScModeEdit,
                    PlaceHolderSelector: PopConst.Const.Selector.HS.ModuleContainers.BtnModeEdit,
                    IconClassName: PopConst.Const.ClassNames.HS.Buttons.ScModeEdit,
                    InnerText: "Edit",
                    VisibilityControllers: [VisibilityType.DISABLED, VisibilityType.DesktopOrContentEditor],
                    ModuleKey: ModuleKey.ButtonTypical,
                    EventHandlerData: {
                        Event: CommandButtonEvents.OnSingleClick,
                        MsgFlag: MsgFlag.ReqSetScModeEdit,
                        CommandType: CommandType.Content,
                    }
                },
                {
                    MenuCommandKey: MenuCommandKey.ScModeNormal,
                    PlaceHolderSelector: PopConst.Const.Selector.HS.ModuleContainers.BtnModeNorm,
                    IconClassName: PopConst.Const.ClassNames.HS.Buttons.ScModeNormal,
                    InnerText: "Normal",
                    VisibilityControllers: [VisibilityType.DISABLED, VisibilityType.DesktopOrContentEditor],
                    ModuleKey: ModuleKey.ButtonTypical,
                    EventHandlerData: {
                        Event: CommandButtonEvents.OnSingleClick,
                        MsgFlag: MsgFlag.ReqSetScModeNormal,
                        CommandType: CommandType.Content,
                    }
                },
                {
                    MenuCommandKey: MenuCommandKey.ScModePrev,
                    PlaceHolderSelector: PopConst.Const.Selector.HS.ModuleContainers.BtnModePrev,
                    IconClassName: PopConst.Const.ClassNames.HS.Buttons.ScModePrev,
                    InnerText: "Preview",
                    VisibilityControllers: [VisibilityType.DISABLED, VisibilityType.DesktopOrContentEditor, VisibilityType.Edit],
                    ModuleKey: ModuleKey.ButtonTypical,
                    EventHandlerData: {
                        Event: CommandButtonEvents.OnSingleClick,
                        MsgFlag: MsgFlag.ReqSetScModePreview,
                        CommandType: CommandType.Content,
                    }
                },
                {
                    MenuCommandKey: MenuCommandKey.UpdateNickname,
                    PlaceHolderSelector: PopConst.Const.Selector.HS.UpdateNicknameB,
                    IconClassName: PopConst.Const.ClassNames.HS.Buttons.UpdateNickname,
                    InnerText: "",
                    VisibilityControllers: [VisibilityType.SnapShotSelected],
                    ModuleKey: ModuleKey.ButtonWithInput,
                    EventHandlerData: {
                        Event: CommandButtonEvents.OnSingleClick,
                        MsgFlag: MsgFlag.ReqUpdateNickName,
                        CommandType: CommandType.Content,
                    }
                },
                {
                    MenuCommandKey: MenuCommandKey.PresentationDetails,
                    PlaceHolderSelector: PopConst.Const.Selector.HS.ModuleContainers.BtnPresentationDetails,
                    IconClassName: PopConst.Const.ClassNames.HS.Buttons.PresentationDetails,
                    InnerText: "Presentation Details",
                    VisibilityControllers: [VisibilityType.DesktopOrContentEditor, VisibilityType.DISABLED],
                    ModuleKey: ModuleKey.ButtonTypical,
                    EventHandlerData: {
                        Event: CommandButtonEvents.OnSingleClick,
                        MsgFlag: MsgFlag.ReqOpenPresentationDetails,
                        CommandType: CommandType.Content,
                    }
                },
                {
                    MenuCommandKey: MenuCommandKey.CompactScUi,
                    PlaceHolderSelector: PopConst.Const.Selector.HS.ModuleContainers.BtnCompactScUi,
                    IconClassName: PopConst.Const.ClassNames.HS.Buttons.CompactCe,
                    InnerText: "Toggle Compact Css",
                    VisibilityControllers: [VisibilityType.DesktopOrContentEditor, VisibilityType.DISABLED],
                    ModuleKey: ModuleKey.ButtonTypical,
                    EventHandlerData: {
                        Event: CommandButtonEvents.OnSingleClick,
                        MsgFlag: MsgFlag.ReqToggleCompactCss,
                        CommandType: CommandType.Content,
                    }
                },
                {
                    MenuCommandKey: MenuCommandKey.PutAdminB,
                    PlaceHolderSelector: PopConst.Const.Selector.HS.ModuleContainers.BtnAdminB,
                    IconClassName: PopConst.Const.ClassNames.HS.Buttons.AdminB,
                    InnerText: "Admin B",
                    VisibilityControllers: [VisibilityType.DISABLED, VisibilityType.LoginPage,],
                    ModuleKey: ModuleKey.ButtonTypical,
                    EventHandlerData: {
                        Event: CommandButtonEvents.OnSingleClick,
                        MsgFlag: MsgFlag.ReqAdminB,
                        CommandType: CommandType.Content,
                    }
                },
                {
                    MenuCommandKey: MenuCommandKey.GoContentEditor,
                    PlaceHolderSelector: PopConst.Const.Selector.HS.ModuleContainers.BtnGoContentEditor,
                    IconClassName: PopConst.Const.ClassNames.HS.Buttons.GoContentEditor,
                    InnerText: "Content Editor",
                    VisibilityControllers: [VisibilityType.DISABLED, VisibilityType.NotLogin,],
                    ModuleKey: ModuleKey.ButtonTypical,
                    EventHandlerData: {
                        Event: CommandButtonEvents.OnSingleClick,
                        MsgFlag: MsgFlag.ReqOpenCE,
                        CommandType: CommandType.Content,
                    }
                },
                {
                    MenuCommandKey: MenuCommandKey.QuickPublish,
                    PlaceHolderSelector: PopConst.Const.Selector.HS.ModuleContainers.BtnQuickPublish,
                    IconClassName: PopConst.Const.ClassNames.HS.Buttons.QuickPublish,
                    InnerText: "Quick Publish",
                    VisibilityControllers: [VisibilityType.DISABLED, VisibilityType.DesktopOrContentEditor,],
                    ModuleKey: ModuleKey.ButtonTypical,
                    EventHandlerData: {
                        Event: CommandButtonEvents.OnSingleClick,
                        MsgFlag: MsgFlag.ReqQuickPublish,
                        CommandType: CommandType.Content,
                    }
                },
                {
                    MenuCommandKey: MenuCommandKey.GoDesktop,
                    PlaceHolderSelector: PopConst.Const.Selector.HS.ModuleContainers.Desktop,
                    IconClassName: PopConst.Const.ClassNames.HS.Buttons.GoDesktop,
                    InnerText: "Desktop",
                    VisibilityControllers: [VisibilityType.DISABLED, VisibilityType.NotLogin,],
                    ModuleKey: ModuleKey.ButtonTypical,
                    EventHandlerData: {
                        Event: CommandButtonEvents.OnSingleClick,
                        MsgFlag: MsgFlag.ReqGoDesktop,
                        CommandType: CommandType.Content,
                    }
                },
                {
                    MenuCommandKey: MenuCommandKey.Ping,
                    PlaceHolderSelector: null,
                    IconClassName: PopConst.Const.ClassNames.HS.Buttons.Ping,
                    InnerText: "",
                    VisibilityControllers: [],
                    ModuleKey: ModuleKey.ButtonTypical,
                    EventHandlerData: {
                        Event: null,
                        MsgFlag: MsgFlag.Ping,
                        CommandType: CommandType.Content,
                    }
                },
                {
                    MenuCommandKey: MenuCommandKey.TakeSnapShot,
                    PlaceHolderSelector: PopConst.Const.Selector.HS.TakeSnapshot,
                    IconClassName: PopConst.Const.ClassNames.HS.Buttons.TakeSnapShot,
                    InnerText: "Take Snapshot",
                    VisibilityControllers: [VisibilityType.SnapShotable],
                    ModuleKey: ModuleKey.ButtonTypical,
                    EventHandlerData: {
                        Event: CommandButtonEvents.OnSingleClick,
                        MsgFlag: MsgFlag.ReqTakeSnapShot,
                        CommandType: CommandType.Content,
                    }
                },
                {
                    MenuCommandKey: MenuCommandKey.ToggleFavorite,
                    PlaceHolderSelector: PopConst.Const.Selector.HS.ToggleFavorite,
                    IconClassName: PopConst.Const.ClassNames.HS.Buttons.ToggleFavorite,
                    InnerText: "Toggle as Favorite",
                    VisibilityControllers: [VisibilityType.SnapShotSelected],
                    ModuleKey: ModuleKey.ButtonTypical,
                    EventHandlerData: {
                        Event: CommandButtonEvents.OnSingleClick,
                        MsgFlag: MsgFlag.ReqToggleFavorite,
                        CommandType: CommandType.Content,
                    }
                },
                {
                    MenuCommandKey: MenuCommandKey.Remove,
                    PlaceHolderSelector: PopConst.Const.Selector.HS.HsRemoveFromStorage,
                    IconClassName: PopConst.Const.ClassNames.HS.Buttons.RemoveFromStorage,
                    InnerText: "Delete Snapshot",
                    VisibilityControllers: [VisibilityType.SnapShotSelected],
                    ModuleKey: ModuleKey.ButtonTypical,
                    EventHandlerData: {
                        Event: CommandButtonEvents.OnSingleClick,
                        MsgFlag: MsgFlag.ReqRemoveFromStorage,
                        CommandType: CommandType.Content,
                    }
                },
                {
                    MenuCommandKey: MenuCommandKey.RestoreStateTBDTab,
                    PlaceHolderSelector: PopConst.Const.Selector.HS.ModuleContainers.SelStateSnapShot,
                    IconClassName: PopConst.Const.ClassNames.HS.Buttons.RestoreStateTBD,
                    VisibilityControllers: [],
                    InnerText: "Restore to TBD",
                    ModuleKey: ModuleKey.SelectSnapShot,
                    EventHandlerData: {
                        Event: CommandButtonEvents.OnDoubleClick,
                        MsgFlag: MsgFlag.ReqSetStateOfSitecoreNewWindow,
                        CommandType: CommandType.Content,
                    }
                },
                {
                    MenuCommandKey: MenuCommandKey.RestoreStateSameTab,
                    PlaceHolderSelector: PopConst.Const.Selector.HS.HsRestoreWindowStateSameTab,
                    VisibilityControllers: [VisibilityType.SnapShotSelected],
                    IconClassName: PopConst.Const.ClassNames.HS.Buttons.RestoreSameTab,
                    InnerText: "Restore to this tab",
                    ModuleKey: ModuleKey.ButtonTypical,
                    EventHandlerData: {
                        Event: CommandButtonEvents.OnSingleClick,
                        MsgFlag: MsgFlag.ReqSetStateOfSitecoreSameWindow,
                        CommandType: CommandType.Content,
                    }
                },
                {
                    MenuCommandKey: MenuCommandKey.RestoreStateNewTab,
                    PlaceHolderSelector: PopConst.Const.Selector.HS.HsRestoreWindowStateNewTab,
                    VisibilityControllers: [VisibilityType.SnapShotSelected],
                    IconClassName: PopConst.Const.ClassNames.HS.Buttons.RestoreNewTab,
                    InnerText: "Restore to new tab",
                    ModuleKey: ModuleKey.ButtonTypical,
                    EventHandlerData: {
                        Event: CommandButtonEvents.OnSingleClick,
                        MsgFlag: MsgFlag.ReqSetStateOfSitecoreNewWindow,
                        CommandType: CommandType.PopUp,
                    }
                },
                {
                    MenuCommandKey: MenuCommandKey.DebugForceAutoSnapShot,
                    PlaceHolderSelector: PopConst.Const.Selector.HS.ModuleContainers.BtnDebugForceAutoSnapShot,
                    VisibilityControllers: [VisibilityType.SnapShotable],
                    IconClassName: PopConst.Const.ClassNames.HS.Buttons.TakeSnapShot,
                    InnerText: "Force Auto Snapshot",
                    ModuleKey: ModuleKey.ButtonTypical,
                    EventHandlerData: {
                        Event: CommandButtonEvents.OnSingleClick,
                        MsgFlag: MsgFlag.ReqDebugAutoSnapShot,
                        CommandType: CommandType.Content,
                    }
                },
                {
                    MenuCommandKey: MenuCommandKey.DebugClearPopUpConsole,
                    PlaceHolderSelector: PopConst.Const.Selector.HS.ModuleContainers.BtnDebugClearPopUpConsole,
                    VisibilityControllers: [],
                    IconClassName: PopConst.Const.ClassNames.HS.Buttons.RemoveFromStorage,
                    InnerText: "Clear PopUp Console",
                    ModuleKey: ModuleKey.ButtonTypical,
                    EventHandlerData: {
                        Event: CommandButtonEvents.OnSingleClick,
                        MsgFlag: MsgFlag.ReqDebugClearConsole,
                        CommandType: CommandType.PopUp,
                    }
                },
                {
                    MenuCommandKey: MenuCommandKey.DebugTriggerPopUpReload,
                    PlaceHolderSelector: PopConst.Const.Selector.HS.ModuleContainers.BtnDebugTriggerPopUpReload,
                    VisibilityControllers: [],
                    IconClassName: PopConst.Const.ClassNames.HS.Buttons.RemoveFromStorage,
                    InnerText: "location .reload(true)",
                    ModuleKey: ModuleKey.ButtonTypical,
                    EventHandlerData: {
                        Event: CommandButtonEvents.OnSingleClick,
                        MsgFlag: MsgFlag.ReqDebugTriggerReload,
                        CommandType: CommandType.PopUp,
                    }
                },
            ]
        };
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/UiCommandFlagRaisedEvent/UiCommandFlagRaisedEvent_Observer.js

class UiCommandFlagRaisedEvent_Observer_UiCommandFlagRaisedEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, UiCommandFlagRaisedEvent_Observer_UiCommandFlagRaisedEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Events/ContentReplyReceivedEvent/ContentReplyReceivedEvent_Observer.js

class ContentReplyReceivedEvent_Observer_ContentReplyReceivedEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(hindeCore, callback) {
        super(hindeCore, ContentReplyReceivedEvent_Observer_ContentReplyReceivedEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpController/scripts/PopUpControllerLayer.js
var PopUpControllerLayer_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};























class PopUpControllerLayer_PopUpControllerLayer {
    Startup() {
        return PopUpControllerLayer_awaiter(this, void 0, void 0, function* () {
            try {
                this.Preamble_SettingsAndLogger();
                this.BrowserProxy = new BrowserProxy_PopUpBrowserProxy(this.HindeCore);
                yield this.BrowserProxy.Init_BrowserProxy()
                    .then(() => {
                    this.InstantiateAgents_Controller();
                    this.InstantiateManagers_Controller();
                    this.Init_Controller();
                });
            }
            catch (err) {
                console.log(err);
            }
        });
    }
    Preamble_SettingsAndLogger() {
        this.Logger = new LoggerAgent_LoggerAgent();
        this.TaskMonitor = new TaskMonitor_TaskMonitor(this.Logger);
        this.ErrorHand = new ErrorHandlerAgent_ErrorHandlerAgent(this.TaskMonitor);
        this.TaskMonitor.IntroduceErrorHand(this.ErrorHand);
        this.HindeCore = {
            Logger: this.Logger,
            ErrorHand: this.ErrorHand,
            TaskMonitor: this.TaskMonitor,
            Discriminator: Discriminator.IHindeCore
        };
        this.RepoAgent = new RepositoryAgent_RepositoryAgent(this.HindeCore);
        this.SettingsAgent = new SettingsAgent_SettingsAgent(this.HindeCore, this.RepoAgent);
        this.SettingsAgent.Init_SettingsAgent();
        this.Init_Logger();
    }
    InstantiateAgents_Controller() {
        this.ScUrlAgent = new ScUrlAgent_ScUrlAgent(this.HindeCore, this.BrowserProxy.Url);
        this.ScUrlAgent.Init_ScUrlAgent();
        this.PopUpMessageBrokerAgent = new PopUpMessagesBrokerAgent_MessageBroker_PopUp(this.HindeCore, this.BrowserProxy, this.SettingsAgent);
    }
    InstantiateManagers_Controller() {
        return PopUpControllerLayer_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.InstantiateManagers_Controller.name);
            this.CommandDefintionBucket = new PopUpCommands_CommandDefintionFactory(this.HindeCore).BuildMenuCommandParamsBucket();
            this.UiLayer = new HindSiteUiLayer_HindSiteUiLayer.HindSiteUiLayer(this.HindeCore, this.SettingsAgent, this.CommandDefintionBucket, this.ScUrlAgent);
            this.BrowserTabAgent = new BrowserTabAgent_BrowserTabAgent(this.HindeCore, this.ScUrlAgent, this.SettingsAgent);
            this.HandlersForInternal = new HandlersForInternal_HandlersForInternal(this.HindeCore, this.BrowserTabAgent);
            this.commandMan = new CommandManager_CommandManager(this.HindeCore, this.PopUpMessageBrokerAgent, this.CommandDefintionBucket, this.UiLayer, this.HandlersForInternal);
            this.Logger.FuncEnd(this.InstantiateManagers_Controller.name);
        });
    }
    Init_Controller() {
        return PopUpControllerLayer_awaiter(this, void 0, void 0, function* () {
            this.Logger.SectionMarker(this.Init_Controller.name);
            this.Logger.FuncStart(this.Init_Controller.name);
            this.commandMan.Init_CommandManager();
            this.WireEvents_Controller();
            this.Start();
            this.Logger.FuncEnd(this.Init_Controller.name);
        });
    }
    WireEvents_Controller() {
        this.Logger.FuncStart(this.WireEvents_Controller.name);
        this.UiCommandRaisedFlag_Observer = new UiCommandFlagRaisedEvent_Observer_UiCommandFlagRaisedEvent_Observer(this.HindeCore, this.OnUiCommandRaisedEvent.bind(this));
        if (StaticHelpers_StaticHelpers.IsNullOrUndefined([this.UiLayer.UiCommandRaisedFlag_Subject, this.PopUpMessageBrokerAgent.ContentReplyReceivedEvent_Subject])) {
            this.ErrorHand.ErrorAndThrow(this.WireEvents_Controller.name, 'Null check');
        }
        else {
            this.UiLayer.UiCommandRaisedFlag_Subject.RegisterObserver(this.UiCommandRaisedFlag_Observer);
            let contentReplyReceivedEvent_Observer = new ContentReplyReceivedEvent_Observer_ContentReplyReceivedEvent_Observer(this.HindeCore, this.OnContentReplyReceivedEventCallBack.bind(this));
            this.PopUpMessageBrokerAgent.ContentReplyReceivedEvent_Subject.RegisterObserver(contentReplyReceivedEvent_Observer);
        }
        this.Logger.FuncEnd(this.WireEvents_Controller.name);
    }
    OnContentReplyReceivedEventCallBack(dataContentReplyReceivedEvent_Payload) {
        this.Logger.FuncStart(this.OnContentReplyReceivedEventCallBack.name);
        if (this.UiLayer) {
            this.UiLayer.OnContentReplyReceived(dataContentReplyReceivedEvent_Payload);
        }
        this.Logger.Log('Return to standby');
        this.Logger.FuncEnd(this.OnContentReplyReceivedEventCallBack.name);
    }
    OnUiCommandRaisedEvent(uiCommandFlagRaisedEvent_Payload) {
        this.Logger.Log('Controller got command message');
        if (uiCommandFlagRaisedEvent_Payload.CommandType === CommandType.Content) {
            this.PopUpMessageBrokerAgent.SendCommandToContentAsync(uiCommandFlagRaisedEvent_Payload.MsgFlag, uiCommandFlagRaisedEvent_Payload.StateOfPopUp);
        }
        else {
            this.commandMan.HandleCommandTypePopUp(uiCommandFlagRaisedEvent_Payload);
        }
    }
    Start() {
        this.commandMan.TriggerPingEventAsync();
    }
    Init_Logger() {
        this.Logger.FuncStart(this.Init_Logger.name);
        let enableLoggingSetting = this.SettingsAgent.HindSiteSettingsBucket.GetByKey(_3xxx_SettingKey_SettingKey.EnableDebugging);
        if (SharedConst.Const.Debug.ForceLoggingEnabled || enableLoggingSetting.HindSiteSetting.ValueAsBool()) {
            var RollingLogId = new RollingLogIdDrone_RollingLogIdDrone(this.SettingsAgent, this.HindeCore);
            var nextLogId = RollingLogId.GetNextLogId();
            let storageLogWriter = new LoggerStorageWriter();
            storageLogWriter.SetLogToStorageKey(nextLogId);
            let consoleLogger = new LoggerConsoleWriter();
            this.Logger.AddWriter(consoleLogger);
        }
        this.Logger.FlushBuffer();
        this.Logger.FuncEnd(this.Init_Logger.name);
    }
}
let popUpControllerLayer = new PopUpControllerLayer_PopUpControllerLayer();
popUpControllerLayer.Startup();


/***/ })
/******/ ]);