/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "HindSiteUiLayer", function() { return /* binding */ HindSiteUiLayer_HindSiteUiLayer; });

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/LoggableBase.js
class LoggableBase {
    constructor(logger) {
        this.Logger = logger;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/1xxx-MessageFlag.js
var MsgFlag;
(function (MsgFlag) {
    MsgFlag[MsgFlag["Unknown"] = 0] = "Unknown";
    MsgFlag[MsgFlag["GetAllStorageOneWindow"] = 1001] = "GetAllStorageOneWindow";
    MsgFlag[MsgFlag["NewWindowTest"] = 1002] = "NewWindowTest";
    MsgFlag[MsgFlag["Ping"] = 1003] = "Ping";
    MsgFlag[MsgFlag["ReqRemoveFromStorage"] = 1004] = "ReqRemoveFromStorage";
    MsgFlag[MsgFlag["ReqAddCETab"] = 1100] = "ReqAddCETab";
    MsgFlag[MsgFlag["ReqAdminB"] = 1101] = "ReqAdminB";
    MsgFlag[MsgFlag["ReqGoDesktop"] = 1102] = "ReqGoDesktop";
    MsgFlag[MsgFlag["ReqLoginWithAdminB"] = 1103] = "ReqLoginWithAdminB";
    MsgFlag[MsgFlag["ReqToggleFavorite"] = 1104] = "ReqToggleFavorite";
    MsgFlag[MsgFlag["ReqOpenCE"] = 1105] = "ReqOpenCE";
    MsgFlag[MsgFlag["ReqQuickPublish"] = 1106] = "ReqQuickPublish";
    MsgFlag[MsgFlag["ReqSetStateOfSitecoreSameWindow"] = 1107] = "ReqSetStateOfSitecoreSameWindow";
    MsgFlag[MsgFlag["Unused"] = 1108] = "Unused";
    MsgFlag[MsgFlag["ReqSetScModePreview"] = 1109] = "ReqSetScModePreview";
    MsgFlag[MsgFlag["ReqTakeSnapShot"] = 1110] = "ReqTakeSnapShot";
    MsgFlag[MsgFlag["ReqToggleCompactCss"] = 1111] = "ReqToggleCompactCss";
    MsgFlag[MsgFlag["ReqUpdateNickName"] = 1112] = "ReqUpdateNickName";
    MsgFlag[MsgFlag["RespCurState"] = 1200] = "RespCurState";
    MsgFlag[MsgFlag["RespTaskFailed"] = 1201] = "RespTaskFailed";
    MsgFlag[MsgFlag["RespListeningAndReady"] = 1202] = "RespListeningAndReady";
    MsgFlag[MsgFlag["_unused"] = 1203] = "_unused";
    MsgFlag[MsgFlag["RespTaskSuccessful"] = 1204] = "RespTaskSuccessful";
    MsgFlag[MsgFlag["RespTest"] = 1205] = "RespTest";
    MsgFlag[MsgFlag["RespNotReady"] = 1206] = "RespNotReady";
    MsgFlag[MsgFlag["ReqClosePopUpWindow"] = 1207] = "ReqClosePopUpWindow";
    MsgFlag[MsgFlag["ReqOpenPresentationDetails"] = 1208] = "ReqOpenPresentationDetails";
    MsgFlag[MsgFlag["CancelCommand"] = 1209] = "CancelCommand";
    MsgFlag[MsgFlag["ReqSetScModeNormal"] = 1210] = "ReqSetScModeNormal";
    MsgFlag[MsgFlag["ReqSetScModeEdit"] = 1211] = "ReqSetScModeEdit";
    MsgFlag[MsgFlag["ReqSetStateOfSitecoreNewWindow"] = 1212] = "ReqSetStateOfSitecoreNewWindow";
    MsgFlag[MsgFlag["RespFailedDidNotValidate"] = 1213] = "RespFailedDidNotValidate";
    MsgFlag[MsgFlag["ReqDebugAutoSnapShot"] = 1214] = "ReqDebugAutoSnapShot";
    MsgFlag[MsgFlag["ReqDebugTriggerReload"] = 1215] = "ReqDebugTriggerReload";
    MsgFlag[MsgFlag["ReqDebugClearConsole"] = 1216] = "ReqDebugClearConsole";
})(MsgFlag || (MsgFlag = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/3xxx-SettingKey.js
var SettingKey;
(function (SettingKey) {
    SettingKey[SettingKey["unknown"] = 0] = "unknown";
    SettingKey[SettingKey["AutoLogin"] = 3100] = "AutoLogin";
    SettingKey[SettingKey["__dead"] = 3101] = "__dead";
    SettingKey[SettingKey["DebugKeepDialogOpen"] = 3102] = "DebugKeepDialogOpen";
    SettingKey[SettingKey["AutoSaveIntervalMin"] = 3103] = "AutoSaveIntervalMin";
    SettingKey[SettingKey["UseCompactCss"] = 3104] = "UseCompactCss";
    SettingKey[SettingKey["AutoSaveRetainDays"] = 3105] = "AutoSaveRetainDays";
    SettingKey[SettingKey["AutoRenameCeButton"] = 3106] = "AutoRenameCeButton";
    SettingKey[SettingKey["MaxAutoSaveCount"] = 3200] = "MaxAutoSaveCount";
    SettingKey[SettingKey["EnableLogging"] = 3201] = "EnableLogging";
    SettingKey[SettingKey["LgndPopUpLog"] = 3300] = "LgndPopUpLog";
    SettingKey[SettingKey["LgndForeSite"] = 3301] = "LgndForeSite";
    SettingKey[SettingKey["LgndHindSite"] = 3302] = "LgndHindSite";
    SettingKey[SettingKey["LgndSettings"] = 3303] = "LgndSettings";
    SettingKey[SettingKey["LgndContentState"] = 3304] = "LgndContentState";
    SettingKey[SettingKey["_unused_"] = 3305] = "_unused_";
    SettingKey[SettingKey["LgndMessages"] = 3306] = "LgndMessages";
    SettingKey[SettingKey["LgndBrowserState"] = 3307] = "LgndBrowserState";
    SettingKey[SettingKey["LgndPopUpState"] = 3308] = "LgndPopUpState";
    SettingKey[SettingKey["LastUsedLogToStorageKey"] = 3400] = "LastUsedLogToStorageKey";
    SettingKey[SettingKey["AutoSnapshotBeforeWindowChange"] = 3401] = "AutoSnapshotBeforeWindowChange";
    SettingKey[SettingKey["LgndPopUpDebug"] = 3402] = "LgndPopUpDebug";
})(SettingKey || (SettingKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferChar.js
var BufferChar;
(function (BufferChar) {
    BufferChar[BufferChar["space"] = 0] = "space";
    BufferChar[BufferChar["Nbsp"] = 1] = "Nbsp";
    BufferChar[BufferChar["Period"] = 2] = "Period";
    BufferChar[BufferChar["Zero"] = 3] = "Zero";
})(BufferChar || (BufferChar = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferDirection.js
var BufferDirection;
(function (BufferDirection) {
    BufferDirection[BufferDirection["left"] = 0] = "left";
    BufferDirection[BufferDirection["right"] = 1] = "right";
})(BufferDirection || (BufferDirection = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/scWindowType.js
var ScWindowType;
(function (ScWindowType) {
    ScWindowType[ScWindowType["Unknown"] = 0] = "Unknown";
    ScWindowType[ScWindowType["LoginPage"] = 1] = "LoginPage";
    ScWindowType[ScWindowType["Desktop"] = 2] = "Desktop";
    ScWindowType[ScWindowType["ContentEditor"] = 3] = "ContentEditor";
    ScWindowType[ScWindowType["Launchpad"] = 4] = "Launchpad";
    ScWindowType[ScWindowType["Edit"] = 5] = "Edit";
    ScWindowType[ScWindowType["Normal"] = 6] = "Normal";
    ScWindowType[ScWindowType["Preview"] = 7] = "Preview";
    ScWindowType[ScWindowType["MediaLibrary"] = 8] = "MediaLibrary";
    ScWindowType[ScWindowType["PackageDesigner"] = 9] = "PackageDesigner";
    ScWindowType[ScWindowType["InstallationWizard"] = 10] = "InstallationWizard";
})(ScWindowType || (ScWindowType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SnapShotFlavor.js
var SnapShotFlavor;
(function (SnapShotFlavor) {
    SnapShotFlavor[SnapShotFlavor["Unknown"] = 0] = "Unknown";
    SnapShotFlavor[SnapShotFlavor["Autosave"] = 1] = "Autosave";
    SnapShotFlavor[SnapShotFlavor["Favorite"] = 2] = "Favorite";
    SnapShotFlavor[SnapShotFlavor["Manual"] = 3] = "Manual";
    SnapShotFlavor[SnapShotFlavor["Live"] = 4] = "Live";
})(SnapShotFlavor || (SnapShotFlavor = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/StaticHelpers.js






class StaticHelpers_StaticHelpers {
    static MinToMs(minutes) {
        return minutes * 60 * 1000;
    }
    static FlavorAsString(flavor) {
        return 'Flavor.' + SnapShotFlavor[flavor] + '(' + flavor + ')';
    }
    static SettingKeyAsString(settingKey) {
        let toReturn = '';
        try {
            toReturn = 'SettingKey.' + SettingKey[settingKey] + '(' + settingKey + ')';
        }
        catch (err) {
            toReturn = err;
        }
        return toReturn;
    }
    static ScWindowTypeFriendly(windowType) {
        return ScWindowType[windowType];
    }
    static MakeFriendlyDate(date) {
        var toReturn = '';
        var workingDate = new Date(date);
        if (workingDate) {
            var month = StaticHelpers_StaticHelpers.BufferString((workingDate.getMonth() + 1).toString(), 2, BufferChar.Zero, BufferDirection.left);
            var day = StaticHelpers_StaticHelpers.BufferString(workingDate.getDate().toString(), 2, BufferChar.Zero, BufferDirection.left);
            var min = StaticHelpers_StaticHelpers.BufferString(workingDate.getMinutes().toString(), 2, BufferChar.Zero, BufferDirection.left);
            var hoursRaw = workingDate.getHours();
            var hourClean = hoursRaw ? hoursRaw : 12;
            var hourCleanStr = StaticHelpers_StaticHelpers.BufferString(hourClean.toString(), 2, BufferChar.Zero, BufferDirection.left);
            toReturn = month + '.' + day + ' ' + hourCleanStr + ':' + min;
        }
        else {
            toReturn = '{error}';
            throw (this.MakeFriendlyDate.name, 'no date provided');
        }
        return toReturn;
    }
    static IsNullOrUndefined(testSubject) {
        let toReturn = false;
        try {
            if (testSubject instanceof Array) {
                testSubject.forEach((testSubject) => toReturn = toReturn || this.IsNullOrUndefined(testSubject));
            }
            else {
                toReturn = (typeof testSubject === 'undefined' || testSubject === null);
            }
        }
        catch (err) {
            console.log(err);
        }
        return toReturn;
    }
    static getBuffChar(buffCharEnum) {
        var buffChar = ' ';
        if (buffCharEnum === BufferChar.space) {
            buffChar = ' ';
        }
        else if (buffCharEnum === BufferChar.Nbsp) {
            buffChar = '&nbsp;';
        }
        else if (buffCharEnum === BufferChar.Period) {
            buffChar = '.';
        }
        else if (buffCharEnum === BufferChar.Zero) {
            buffChar = '0';
        }
        return buffChar;
    }
    static BufferString(str, desiredLength, buffCharEnum, direction) {
        var toReturn = str;
        var buffChar = this.getBuffChar(buffCharEnum);
        if (toReturn.length > desiredLength) {
            if (desiredLength > 6) {
                toReturn = toReturn.substring(0, desiredLength - 3) + '...';
            }
            else {
                toReturn = toReturn.substring(0, desiredLength);
            }
        }
        if (toReturn.length < desiredLength) {
            var bufferCharNeeded = desiredLength - toReturn.length;
            for (var idx = 0; idx < bufferCharNeeded; idx++) {
                if (direction === BufferDirection.left) {
                    toReturn = buffChar + toReturn;
                }
                else {
                    toReturn = toReturn + buffChar;
                }
            }
        }
        return toReturn;
    }
    static MsgFlagAsString(msg) {
        var toReturn = "{error}";
        if (msg) {
            try {
                toReturn = 'MsgFlag.' + MsgFlag[msg] + '(' + msg + ')';
            }
            catch (err) {
                console.log(this.MsgFlagAsString.name + ' ' + err);
            }
        }
        return 'flag: ' + toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Classes/PopConst.js
let PopConst = (() => {
    class PopConst {
    }
    PopConst.Const = {
        ClassNames: {
            HS: {
                Collapsed: 'in',
                Down: 'down',
                Buttons: {
                    AdminB: 'admin-b',
                    Cancel: 'cancel',
                    CompactCe: 'details',
                    Edit: 'edit',
                    GoContentEditor: 'ce',
                    GoDesktop: 'desktop-icon',
                    Ping: 'edit',
                    PresentationDetails: 'details',
                    QuickPublish: 'publish',
                    RemoveFromStorage: 'delete-snapshot',
                    RestoreNewTab: 'restore-snapshot',
                    RestoreSameTab: 'restore-snapshot',
                    RestoreStateTBD: 'restore-snapshot',
                    ScModeEdit: 'edit',
                    ScModeNormal: 'normal',
                    ScModePrev: 'preview-icon',
                    TakeSnapShot: 'take-snapshot',
                    ToggleFavorite: 'btn-favorite',
                    UpdateNickname: 'set-nickname',
                    Icons: {
                        CloseWindow: 'icon-close-window',
                        AddContentEditorTab: 'icon-add-ce-tab',
                    }
                },
            },
        },
        ElemId: {
            InputNickname: 'id-input-nickname',
            HindSiteParentInfo: 'spanParentInfo',
            HS: {
                SelectHeaderAuto: 'sel-header-auto',
                SelectHeaderAutoTitle: 'sel-header-auto-title',
                SelectHeaderFavorite: 'sel-header-favorite',
                SelectHeaderFavoriteTitle: 'sel-header-favorite-title',
                SelectHeaderManual: 'sel-header-manual',
                SelectHeaderManualTitle: 'sel-header-manual-title',
                TabId: 'orig-win-id',
            }
        },
        Numbers: {
            MinMenuHeight: 600,
            MinMenuWidth: 600,
            MaxAutoSaveCount: 10,
            AutoSaveIntervalMin: 5,
        },
        Notify: {
            Default: 'Complete',
            PublishComplete: 'Publishing Complete',
        },
        Selector: {
            HS: {
                AutoSnapshotBeforeWindowChange: '[id=id-settings-auto-snapshot-on-window-change]',
                BuildStamp: '[id=build-stamp]',
                DivOverlayModule: '[id=menu-overlay]',
                DivStateContent: '[id=feedback-div-state-content]',
                FeedbackBrowserState: '[id=feedback-div-browser-state]',
                FeedbackPopUpState: '[id=feedback-div-pop-up-state]',
                FeedbackContentState: '[id=feedback-div-state-content]',
                FeedbackLogElement: '[id=feedback-pop-up-log]',
                FeedbackMessages: '[id=feedback-messages]',
                FeedbackStorage: '[id=feedback-storage]',
                HsCancel: '[id=Cancel]',
                HsRemoveFromStorage: '[id=id-ph-remove-one-from-local-storage]',
                HsRestoreWindowStateSameTab: '[id=id-ph-btn-restore-state-same-tab]',
                HsRestoreWindowStateNewTab: '[id=id-ph-btn-restore-state-new-tab]',
                iCBoxdSettingsAutoLogin: '[id=id-ph-settings-auto-login]',
                IdFieldSetDebug: '[id=id-fieldset-debug]',
                ToggleFavorite: '[id=id-ph-btn-toggle-favorite]',
                SettingAutoSaveInterval: '[id=id-settings-auto-save-interval]',
                SettingAutoSaveMaxCount: '[id=id-settings-auto-save-max-count]',
                SettingAutoSaveSnapshotRetainDays: '[id=id-settings-auto-save-snap-shot-retain-days]',
                SettingAutoRenameCeTabButton: '[id=id-settings-auto-rename-ce-tab-button]',
                SettingNotUsed: '[id=id-settings-not-used]',
                TakeSnapshot: '[id=id-ph-btn-take-snapshot]',
                UpdateNicknameB: '[id=id-ph-btn-update-nickname]',
                ModuleContainers: {
                    BtnAddContentEditor: '[id=id-ph-btn-add-drframe-content-editor]',
                    BtnAdminB: '[id=id-ph-btn-adminb]',
                    BtnCompactScUi: '[id=id-ph-btn-compact-sc-ui]',
                    BtnDebugClearPopUpConsole: '[id=id-container-btn-debug-clear-console]',
                    BtnDebugTriggerPopUpReload: '[id=id-container-btn-debug-trigger-pop-up-reload]',
                    BtnDebugForceAutoSnapShot: '[id=id-container-btn-debug-force-auto-snapshot]',
                    BtnGoContentEditor: '[id=id-ph-btn-go-content-editor]',
                    BtnModeEdit: '[id=id-ph-btn-sc-mode-edit]',
                    BtnModeNorm: '[id=id-ph-btn-norm]',
                    BtnModePrev: '[id=id-ph-btn-prev]',
                    BtnPresentationDetails: '[id=id-ph-btn-presentation-details]',
                    BtnQuickPublish: '[id=id-ph-btn-quick-publish]',
                    BtnWindowClose: '[id=id-ph-close-window]',
                    CbEnableLogging: '[id=id-ph-settings-show-log-data]',
                    Desktop: '[id=id-ph-btn-desktop]',
                    LgndBrowserState: '[id=lgnd-browser-state]',
                    LgndContentState: '[id=lgnd-content-state]',
                    LgndForeSite: '[id=lgnd-fore-site]',
                    LgndHindSite: '[id=lgnd-hind-site]',
                    LgndMessages: '[id=lgnd-messages]',
                    LgndPopUpLog: '[id=lgnd-pop-up-log]',
                    LgndPopUpState: '[id=lgnd-pop-up-state]',
                    LgndPopUpDebug: '[id=lgnd-pop-up-debug]',
                    LgndSettings: '[id=lgnd-settings]',
                    PrefAutoLogin: '[id=id-ph-settings-auto-login]',
                    SelStateSnapShot: '[id=id-container-select-state]',
                    SettingDebugKeepDialogOpen: '[id=id-ph-settings-debug-keep-dialog-open]',
                    SettingUseCompactCss: '[id=id-ph-settings-use-compact]',
                }
            },
        },
        Settings: {
            Defaults: {
                AutoSaveEnabled: false,
                DebugKeepDialogOpen: false,
                LgndBrowserState: false,
                LgndContentState: false,
                LgndForeSite: true,
                LgndHindSite: true,
                LgndMessages: false,
                LgndPopUpLog: false,
                LgndPopUpState: false,
                LgndPopUpDebug: false,
                LgndSettings: false,
            }
        },
        Storage: {
            SettingsSuffix: 'todo',
            KeyGenericSettings: 'HindSite.' + 'GenericSettings',
            StorageLogKeyPrefix: 'HindSite.' + 'Log.',
            Defaults: {
                bool: {
                    AutoSaveEnabled: false,
                    AutoLogin: false,
                    DefaultDebugKeepDialogOpen: false,
                    AutoSnapshotBeforeWindowChange: false,
                }
            }
        },
        SnapShotFormat: {
            lenTimestamp: 13,
            lenNickname: 16,
            lenPageType: 7,
            lenPrefix: 6,
            lenShortId: 4,
            colSep: ' - ',
            lenCeCount: 3,
            MainSectionNode: 9,
            lenActiveNode: 9,
            lenFavorite: 3,
        },
        Timeouts: {
            WaitBeforeRemovingCompleteFlag: 1500,
            AutoLoginCheckInterval: 3000,
        },
    };
    return PopConst;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/2xxx-MenuCommand.js
var MenuCommandKey;
(function (MenuCommandKey) {
    MenuCommandKey[MenuCommandKey["Unknown"] = 0] = "Unknown";
    MenuCommandKey[MenuCommandKey["GoScModeEdit"] = 2001] = "GoScModeEdit";
    MenuCommandKey[MenuCommandKey["ToggleFavorite"] = 2002] = "ToggleFavorite";
    MenuCommandKey[MenuCommandKey["CloseWindow"] = 2003] = "CloseWindow";
    MenuCommandKey[MenuCommandKey["TakeSnapShot"] = 2004] = "TakeSnapShot";
    MenuCommandKey[MenuCommandKey["AddCeTab"] = 2005] = "AddCeTab";
    MenuCommandKey[MenuCommandKey["ScModeNormal"] = 2006] = "ScModeNormal";
    MenuCommandKey[MenuCommandKey["ScModePrev"] = 2007] = "ScModePrev";
    MenuCommandKey[MenuCommandKey["Cancel"] = 2008] = "Cancel";
    MenuCommandKey[MenuCommandKey["DrawStorage"] = 2009] = "DrawStorage";
    MenuCommandKey[MenuCommandKey["DrawStoragePopUpLogStorage"] = 2010] = "DrawStoragePopUpLogStorage";
    MenuCommandKey[MenuCommandKey["Remove"] = 2011] = "Remove";
    MenuCommandKey[MenuCommandKey["RestoreStateSameTab"] = 2012] = "RestoreStateSameTab";
    MenuCommandKey[MenuCommandKey["RestoreStateNewTab"] = 2013] = "RestoreStateNewTab";
    MenuCommandKey[MenuCommandKey["RestoreStateTBDTab"] = 2014] = "RestoreStateTBDTab";
    MenuCommandKey[MenuCommandKey["GoDesktop"] = 2015] = "GoDesktop";
    MenuCommandKey[MenuCommandKey["GoContentEditor"] = 2016] = "GoContentEditor";
    MenuCommandKey[MenuCommandKey["PutAdminB"] = 2017] = "PutAdminB";
    MenuCommandKey[MenuCommandKey["PresentationDetails"] = 2017] = "PresentationDetails";
    MenuCommandKey[MenuCommandKey["CompactScUi"] = 2019] = "CompactScUi";
    MenuCommandKey[MenuCommandKey["Ping"] = 2020] = "Ping";
    MenuCommandKey[MenuCommandKey["UpdateNickname"] = 2021] = "UpdateNickname";
    MenuCommandKey[MenuCommandKey["QuickPublish"] = 2022] = "QuickPublish";
    MenuCommandKey[MenuCommandKey["DebugForceAutoSnapShot"] = 2023] = "DebugForceAutoSnapShot";
    MenuCommandKey[MenuCommandKey["DebugClearPopUpConsole"] = 2024] = "DebugClearPopUpConsole";
    MenuCommandKey[MenuCommandKey["DebugTriggerPopUpReload"] = 2025] = "DebugTriggerPopUpReload";
})(MenuCommandKey || (MenuCommandKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/ModuleKey.js
var ModuleKey;
(function (ModuleKey) {
    ModuleKey[ModuleKey["Unknown"] = 0] = "Unknown";
    ModuleKey[ModuleKey["BroswerState"] = 1] = "BroswerState";
    ModuleKey[ModuleKey["ButtonCancel"] = 2] = "ButtonCancel";
    ModuleKey[ModuleKey["ButtonClose"] = 3] = "ButtonClose";
    ModuleKey[ModuleKey["ButtonTypical"] = 4] = "ButtonTypical";
    ModuleKey[ModuleKey["ButtonWithInput"] = 5] = "ButtonWithInput";
    ModuleKey[ModuleKey["ContentState"] = 6] = "ContentState";
    ModuleKey[ModuleKey["FeedbackModuleLog"] = 7] = "FeedbackModuleLog";
    ModuleKey[ModuleKey["PopUpState"] = 8] = "PopUpState";
    ModuleKey[ModuleKey["SelectSnapShot"] = 9] = "SelectSnapShot";
    ModuleKey[ModuleKey["CheckBox"] = 10] = "CheckBox";
    ModuleKey[ModuleKey["Accordion"] = 11] = "Accordion";
    ModuleKey[ModuleKey["Number"] = 12] = "Number";
})(ModuleKey || (ModuleKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/CommandButtonEvents.js
var CommandButtonEvents;
(function (CommandButtonEvents) {
    CommandButtonEvents[CommandButtonEvents["OnSingleClick"] = 0] = "OnSingleClick";
    CommandButtonEvents[CommandButtonEvents["OnDoubleClick"] = 1] = "OnDoubleClick";
})(CommandButtonEvents || (CommandButtonEvents = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/_UiModuleBase.js



class _UiModuleBase_UiModuleBase extends LoggableBase {
    constructor(logger, containerSelector) {
        super(logger);
        this.Friendly = 'Not Set';
        this.ModuleKey = ModuleKey.Unknown;
        this.ContainerSelector = containerSelector;
    }
    Init_UiModuleBase() {
        this.Logger.FuncStart(this.Init_UiModuleBase.name, this.Friendly);
        this.ContainerUiDivElem = this.GetUiElement(this.ContainerSelector);
        if (StaticHelpers_StaticHelpers.IsNullOrUndefined(this.ContainerUiDivElem)) {
            this.Logger.ErrorAndThrow(this.Init_UiModuleBase.name, 'Null: ' + this.ContainerSelector);
        }
        this.Logger.FuncEnd(this.Init_UiModuleBase.name, this.Friendly);
    }
    GetUiElement(uiSelector) {
        let toReturn = null;
        if (this.ContainerSelector) {
            toReturn = document.querySelector(uiSelector);
        }
        return toReturn;
    }
    Hydrate(refreshdata) {
        this.RefreshData = refreshdata;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/Desktop/DesktopProxy/Events/_HindSiteEvent/HindeSiteEvent_Subject.js

class HindeSiteEvent_Subject_HindeSiteEvent_Subject extends LoggableBase {
    constructor(logger, friendly) {
        super(logger);
        this.ObserverCollection = [];
        this.Friendly_Subject = friendly;
    }
    HasObservers() {
        return this.ObserverCollection && this.ObserverCollection.length > 0;
    }
    RegisterObserver(observer) {
        if (observer) {
            this.Logger.Log(this.RegisterObserver.name + ' ' + observer.Friendly + ' to ' + this.Friendly_Subject);
            if (this.ObserverCollection.indexOf(observer) < 0) {
                this.ObserverCollection.push(observer);
            }
            else {
                this.Logger.WarningAndContinue(this.RegisterObserver.name, 'Observer already registered');
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.RegisterObserver.name, 'Observer is null');
        }
    }
    UnregisterObserver(observer) {
        this.Logger.FuncStart(this.UnregisterObserver.name);
        if (observer) {
            let observerIndex = this.ObserverCollection.indexOf(observer);
            if (observerIndex > -1) {
                this.ObserverCollection.splice(observerIndex, 1);
            }
        }
        this.Logger.FuncEnd(this.UnregisterObserver.name);
    }
    NotifyObservers(payload) {
        this.Logger.FuncStart(this.NotifyObservers.name + ' of: ' + this.Friendly_Subject, ' observer count: ' + this.ObserverCollection.length);
        this.ObserverCollection.forEach((observer) => {
            observer.UpdateAsync(payload);
        });
        this.Logger.FuncEnd(this.NotifyObservers.name + ' of: ' + this.Friendly_Subject, ' observer count: ' + this.ObserverCollection.length);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/SingleClickEvent/SingleClickEvent_Subject.js

class SingleClickEvent_Subject_SingleClickEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(logger, friendly) {
        super(logger, friendly + ' ' + SingleClickEvent_Subject_SingleClickEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/ButtonModules/_baseButtonModule.js





class _baseButtonModule_base_ButtonModule extends _UiModuleBase_UiModuleBase {
    constructor(loggerAgent, menuCommandDefinition) {
        super(loggerAgent, menuCommandDefinition ? menuCommandDefinition.PlaceHolderSelector : null);
        this.ModuleKey = ModuleKey.Unknown;
        this.Friendly = this.MenuCommandDefinition ? MenuCommandKey[this.MenuCommandDefinition.MenuCommandKey] : this.ContainerSelector;
        this.MenuCommandDefinition = menuCommandDefinition;
    }
    Init_BaseButtonModule() {
        this.Init_UiModuleBase();
        this.BuildElements_Base();
    }
    WireEvents_Base() {
        this.WireClickEvents();
    }
    BuildElements_Base() {
        this.Logger.FuncStart(this.BuildElements_Base.name, this.MenuCommandDefinition.InnerText + ' ' + MenuCommandKey[this.MenuCommandDefinition.MenuCommandKey]);
        if (this.ContainerUiDivElem) {
            this.BuildButtonElem();
            this.ContainerUiDivElem.classList.add('btn-container');
            this.ContainerUiDivElem.appendChild(this.HTMLButtonElement);
        }
        else {
            this.Logger.ErrorAndContinue(this.BuildElements_Base.name, 'Could not find ' + this.MenuCommandDefinition.PlaceHolderSelector);
        }
        this.Logger.FuncEnd(this.BuildElements_Base.name);
    }
    WireClickEvents() {
        this.SingleButtonClickEvent_Subject = new SingleClickEvent_Subject_SingleClickEvent_Subject(this.Logger, MenuCommandKey[this.MenuCommandDefinition.MenuCommandKey]);
        if (this.MenuCommandDefinition && this.MenuCommandDefinition.PlaceHolderSelector) {
            var targetElem = document.querySelector(this.MenuCommandDefinition.PlaceHolderSelector);
            if (targetElem) {
                if (this.MenuCommandDefinition.EventHandlerData.Event === CommandButtonEvents.OnSingleClick) {
                    this.WireSingleClickEvent();
                }
                else if (this.MenuCommandDefinition.EventHandlerData.Event === CommandButtonEvents.OnDoubleClick) {
                    this.WireDoubleClickEvent();
                }
            }
            else {
                this.Logger.ErrorAndThrow(this.WireClickEvents.name, 'did not find placeholder: ' + this.MenuCommandDefinition.PlaceHolderSelector);
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.WireClickEvents.name, 'no command or no command placeholder');
        }
    }
    BuildButtonElem() {
        this.HTMLButtonElement = document.createElement("button");
        this.HTMLButtonElement.classList.add("icon");
        this.HTMLButtonElement.classList.add(this.MenuCommandDefinition.IconClassName);
        this.HTMLButtonElement.innerText = this.MenuCommandDefinition.InnerText;
        this.HTMLButtonElement.type = "button";
    }
    WireSingleClickEvent() {
        if (this.HTMLButtonElement) {
            this.HTMLButtonElement.addEventListener('click', (evt) => {
                let singleClickEvent_payload = {
                    HandlerData: this.MenuCommandDefinition.EventHandlerData
                };
                this.SingleButtonClickEvent_Subject.NotifyObservers(singleClickEvent_payload);
            });
        }
        else {
            this.Logger.ErrorAndThrow(this.WireSingleClickEvent.name, 'No button element: ' + this.MenuCommandDefinition.PlaceHolderSelector);
        }
    }
    WireDoubleClickEvent() {
        if (this.HTMLButtonElement) {
            this.HTMLButtonElement.ondblclick = (evt) => {
                let data = this.BuildCommandData();
                data.Evt = evt;
            };
        }
    }
    BuildCommandData() {
        let data = {
            EventMan: null,
            MenuCommandDefinition: this.MenuCommandDefinition,
            EventHandlerData: this.MenuCommandDefinition.EventHandlerData,
            Evt: null,
        };
        return data;
    }
    Hydrate(refreshData) {
        this.Logger.FuncStart(this.Hydrate.name, this.Friendly);
        this.RefreshData = refreshData;
        this.Logger.FuncEnd(this.Hydrate.name, this.Friendly);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/ButtonModules/TypCommandButtonModule.js




class TypCommandButtonModule_TypCommandButtonModule extends _baseButtonModule_base_ButtonModule {
    constructor(loggerAgent, menuCommandParameters) {
        super(loggerAgent, menuCommandParameters);
        this.ModuleKey = ModuleKey.ButtonTypical;
    }
    Init() {
        this.Logger.FuncStart(this.Init.name, TypCommandButtonModule_TypCommandButtonModule.name);
        this.Init_BaseButtonModule();
        this.BuildElements();
        this.Logger.FuncEnd(this.Init.name, TypCommandButtonModule_TypCommandButtonModule.name);
    }
    WireEvents_Module() {
        this.WireEvents_Base();
    }
    GetCommandKey() {
        return this.MenuCommandDefinition.MenuCommandKey;
    }
    BuildButtonOverlay() {
        this.ElemDivBtnOverlay = document.createElement("div");
        this.ElemDivBtnOverlay.classList.add("btn-overlay");
        let backFill = this.BuildButtonOverlayBackFill();
        this.BuildButtonTextContainer();
        this.ElemDivBtnOverlay.appendChild(backFill);
        this.ElemDivBtnOverlay.appendChild(this.ElemButtonBackText);
    }
    BuildButtonOverlayBackFill() {
        let divElem = document.createElement("div");
        divElem.classList.add("back-fill");
        return divElem;
    }
    BuildButtonTextContainer() {
        this.ElemButtonBackText = document.createElement("div");
        this.ElemButtonBackText.classList.add("back-text");
        this.ElemButtonBackText.innerText = 'here is why it is disabled';
        return this.ElemButtonBackText;
    }
    BuildElements() {
        this.Logger.FuncStart(this.BuildElements.name, this.MenuCommandDefinition.InnerText + ' ' + MenuCommandKey[this.MenuCommandDefinition.MenuCommandKey]);
        if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(this.ContainerUiDivElem)) {
            this.BuildButtonOverlay();
            this.ContainerUiDivElem.classList.add('btn-container');
            this.ContainerUiDivElem.appendChild(this.ElemDivBtnOverlay);
            this.ContainerUiDivElem.appendChild(this.HTMLButtonElement);
        }
        else {
            this.Logger.ErrorAndContinue(TypCommandButtonModule_TypCommandButtonModule.name, 'Could not find ' + this.MenuCommandDefinition.PlaceHolderSelector);
        }
        this.Logger.FuncEnd(this.BuildElements.name);
    }
    RefreshUi() {
        this.Logger.FuncStart(this.RefreshUi.name, this.Friendly);
        if (this.ContainerUiDivElem) {
            let allresults = this.RefreshData.UiVisibilityTestAgent.TestAgainstAllSetControllers(this.MenuCommandDefinition);
            this.Logger.LogVal('test count', allresults.TestResults.length);
            this.SetCommandButtonVisibilityBaseOnResults(allresults);
        }
        else {
            this.Logger.Log('no placeholder ' + this.Friendly);
        }
        this.Logger.FuncEnd(this.RefreshUi.name, this.Friendly);
    }
    SetCommandButtonVisibilityBaseOnResults(allresults) {
        this.Logger.FuncStart(this.SetCommandButtonVisibilityBaseOnResults.name, this.Friendly);
        this.Logger.LogAsJsonPretty(this.Friendly, allresults.TestResults);
        if (allresults && this.HTMLButtonElement) {
            if (!allresults.HasFailures()) {
                this.HTMLButtonElement.classList.remove('disabled');
                this.HTMLButtonElement.removeAttribute('disabled');
                if (this.ElemDivBtnOverlay) {
                    this.ElemDivBtnOverlay.style.display = 'none';
                }
            }
            else {
                this.HTMLButtonElement.classList.add('disabled');
                this.HTMLButtonElement.setAttribute('disabled', 'disabled');
                if (this.ElemDivBtnOverlay) {
                    this.ElemDivBtnOverlay.style.display = 'block';
                }
                if (this.ElemButtonBackText) {
                    this.ElemButtonBackText.innerText = allresults.GetFriendlyFails();
                }
            }
        }
        else {
            this.Logger.ErrorAndContinue(this.SetCommandButtonVisibilityBaseOnResults.name, 'targetButton is NULL: ' + MenuCommandKey[this.MenuCommandDefinition.MenuCommandKey]);
        }
        this.Logger.FuncEnd(this.SetCommandButtonVisibilityBaseOnResults.name, this.Friendly);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/VisibilityType.js
var VisibilityType;
(function (VisibilityType) {
    VisibilityType[VisibilityType["Unknown"] = 0] = "Unknown";
    VisibilityType[VisibilityType["LoginPage"] = 1] = "LoginPage";
    VisibilityType[VisibilityType["Desktop"] = 2] = "Desktop";
    VisibilityType[VisibilityType["ContentEditor"] = 3] = "ContentEditor";
    VisibilityType[VisibilityType["Launchpad"] = 4] = "Launchpad";
    VisibilityType[VisibilityType["Edit"] = 5] = "Edit";
    VisibilityType[VisibilityType["Normal"] = 6] = "Normal";
    VisibilityType[VisibilityType["Preview"] = 7] = "Preview";
    VisibilityType[VisibilityType["SnapShotSelected"] = 8] = "SnapShotSelected";
    VisibilityType[VisibilityType["NotLogin"] = 9] = "NotLogin";
    VisibilityType[VisibilityType["CommandIsRunning"] = 10] = "CommandIsRunning";
    VisibilityType[VisibilityType["DesktopOrContentEditor"] = 11] = "DesktopOrContentEditor";
    VisibilityType[VisibilityType["SnapShotable"] = 12] = "SnapShotable";
    VisibilityType[VisibilityType["IfDesktopMin1ContentEditor"] = 13] = "IfDesktopMin1ContentEditor";
})(VisibilityType || (VisibilityType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/SharedConst.js
let SharedConst = (() => {
    class SharedConst {
    }
    SharedConst.Const = {
        Debug: {
            ForceLoggingEnabled: false,
            SpeedUpAutoSaveIntervalFactor: 3,
        },
        IterHelper: {
            GrowthPerIteration: 0.5,
            MaxCount: {
                Default: 10,
                OverridePublishing: 15,
            },
            Timeouts: {
                Max: 10000,
                Default: 100,
            },
        },
        KeyWords: {
            Html: {
                beforeend: 'beforeend',
                optgroup: 'optgroup',
                Checkbox: 'checkbox',
                Checked: 'checked',
                Input: 'input',
                Label: 'label',
                For: 'for',
                Text: 'text',
                Number: 'number',
            },
            Javascript: {
                ReadyStates: {
                    Complete: "complete"
                }
            }
        },
        Logger: {
            MinTimeDiffMs: 100
        },
        ObjDiscriminator: {},
        Settings: {
            Defaults: {
                EnableLogging: false,
                LogToStorage: false,
                UseCompactCss: false,
                LastUsedLogToStorageKey: 0
            }
        },
        Regex: {
            ContentEditor: /Content.*?Editor/ig,
            CleanGuid: /{|-|}/ig,
            NbSp: /&nbsp;/ig,
            QueryStrSeparatorQuest: /\?/gi,
            PageType: {
                Desktop: /.*default.aspx/ig,
                Edit: /sc_itemid=.*sc_mode=edit/ig,
                Normal: /sc_itemid=.*sc_mode=normal/ig,
                Preview: /sc_itemid=.*sc_mode=preview/ig,
            },
        },
        UrlSuffix: {
            Desktop: '/sitecore/shell/default.aspx',
            Login: '/sitecore/login',
            LaunchPad: '/client/applications/launchpad',
            CE: '/sitecore/shell/Applications/Content Editor.aspx?sc_bw=1',
            None: '/',
            AboutBlank: 'about:blank',
        },
    };
    return SharedConst;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/Guid.js

let Guid_Guid = (() => {
    class Guid {
        static NewRandomGuid() {
            let guidData = new GuidData_GuidData();
            let newGuid = new Guid();
            let randomStr = newGuid.GetRandomGuidString();
            let toReturn = new GuidData_GuidData(randomStr);
            return toReturn;
        }
        static IsValidGuidStr(candidateStr) {
            let toReturn = false;
            let regexGuid = '^[\}]?[0-9a-f]{8}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{12}[\}]?$';
            let pattern = new RegExp(regexGuid, 'i');
            toReturn = pattern.test(candidateStr);
            return toReturn;
        }
        static AsShort(guidData) {
            var toReturn = '{error}';
            if (guidData) {
                toReturn = guidData.Raw.substr(0, Guid.ShortGuidLength);
            }
            return toReturn;
        }
        static WithoutDashes(guiddata) {
            let withoutDashes = guiddata.Raw.replace(/-/g, '');
            return withoutDashes;
        }
        static ParseGuid(val, throwOnError) {
            return new GuidData_GuidData(val);
        }
        MakeNewRandomGuid() {
            let randomStr = this.GetRandomGuidString();
            return new GuidData_GuidData(randomStr);
        }
        static GuidStrWithDashes(val) {
            let toReturn = '';
            let withoutDashes = val.replace(/-/g, '');
            var parts = [];
            if (withoutDashes.length !== 32) {
                throw (this.GuidStrWithDashes.name + ' - Wrong count wanted: ' + 32 + " got: " + withoutDashes.length + ' (without dashes) ' + withoutDashes);
            }
            parts.push(withoutDashes.slice(0, 8));
            parts.push(withoutDashes.slice(8, 12));
            parts.push(withoutDashes.slice(12, 16));
            parts.push(withoutDashes.slice(16, 20));
            parts.push(withoutDashes.slice(20, 32));
            toReturn = parts.join('-');
            return toReturn;
        }
        GetRandomGuidString() {
            var toReturn;
            var temp = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
            toReturn = temp.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0;
                var v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
            return toReturn;
        }
        MakeGuidFromString(val, throwOnError) {
            let toReturn = new GuidData_GuidData(val);
            return toReturn;
        }
    }
    Guid.ShortGuidLength = 4;
    return Guid;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/GuidData.js


let GuidData_GuidData = (() => {
    class GuidData {
        constructor(raw = null) {
            if (!raw) {
                this.Raw = GuidData.ConstEmptyGuid;
            }
            else {
                if (Guid_Guid.IsValidGuidStr(raw)) {
                    this.Raw = Guid_Guid.GuidStrWithDashes(raw);
                }
                else {
                    throw ('Invalid GUID string: ' + raw);
                }
            }
        }
        AsBracedGuid() {
            return '{' + this.Raw + "}";
        }
        static GetEmptyGuid() {
            return new GuidData();
        }
        FormatJustNumbers(str) {
            return str.replace(SharedConst.Const.Regex.CleanGuid, '');
        }
    }
    GuidData.ConstEmptyGuid = '00000000-0000-0000-0000-000000000000';
    return GuidData;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/Agents/IUiVisiblityTestResult.js

class IUiVisiblityTestResult_VisiblityTestResultsBucket extends LoggableBase {
    constructor() {
        super(...arguments);
        this.TestResults = [];
    }
    HasFailures() {
        let oneFailed = false;
        if (this.TestResults) {
            this.TestResults.forEach((oneTest) => oneFailed = oneFailed || !oneTest || !oneTest.DidItPass);
        }
        else {
            this.Logger.ErrorAndThrow(this.HasFailures.name, 'null test results');
        }
        return oneFailed;
    }
    GetFriendlyFails() {
        let toReturn = '';
        if (this.TestResults) {
            this.TestResults.forEach((oneTest) => {
                if (oneTest) {
                    if (!oneTest.DidItPass) {
                        toReturn = ' ' + oneTest.FriendlyFailReason;
                    }
                }
                else {
                    this.Logger.LogAsJsonPretty('this.TestResults', this.TestResults);
                    this.Logger.ErrorAndThrow(this.GetFriendlyFails.name, 'null single test result');
                }
            });
        }
        else {
            this.Logger.ErrorAndThrow(this.GetFriendlyFails.name, 'null testResults');
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/Agents/VisiblityTestResult.js
class VisiblityTestResult {
    constructor(testNameFriendly) {
        this.DidItPass = true;
        this.FriendlyFailReason = '';
        this.TestNameFriendly = testNameFriendly;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Managers/UiManager/UiVisibilityTestAgent.js







class UiVisibilityTestAgent_UiVisibilityTestAgent extends LoggableBase {
    constructor(logger) {
        super(logger);
        this.SelectedSnapshot = null;
    }
    Hydrate(stateOfSitecoreWindow, stateOfStorageSnapShots, windowType, selectSnapShotId) {
        this.Logger.FuncStart(this.Hydrate.name);
        this.StateOfSitecoreWindow = stateOfSitecoreWindow;
        this.SelectedSnapshot = selectSnapShotId;
        this.WindowType = windowType;
        this.Logger.FuncEnd(this.Hydrate.name);
    }
    VisibilityTestWindowType(windowType, currentWindowType) {
        let OneResult = new VisiblityTestResult(this.VisibilityTestWindowType.name);
        OneResult.DidItPass = windowType === currentWindowType;
        if (!OneResult.DidItPass) {
            OneResult.FriendlyFailReason = 'Window types did not match: ' + StaticHelpers_StaticHelpers.ScWindowTypeFriendly(windowType) + ' vs ' + StaticHelpers_StaticHelpers.ScWindowTypeFriendly(currentWindowType);
        }
        return OneResult;
    }
    VisibilityTestSnapShotSelected(currSelSnapshot) {
        let OneResult = new VisiblityTestResult(this.VisibilityTestSnapShotSelected.name);
        OneResult.DidItPass = !StaticHelpers_StaticHelpers.IsNullOrUndefined(currSelSnapshot) && (currSelSnapshot.AsBracedGuid() !== GuidData_GuidData.GetEmptyGuid().AsBracedGuid());
        if (!OneResult.DidItPass) {
            OneResult.FriendlyFailReason = "No snapshot selected";
        }
        return OneResult;
    }
    VisibilityTestSnapShotable(stateOfSitecoreWindow) {
        return this.VisibilityTestDesktopOrContentEditor(stateOfSitecoreWindow) && this.VisibilityTestIfDesktopMinOneConentEditorOpen(stateOfSitecoreWindow);
    }
    VisibilityTestIfDesktopMinOneConentEditorOpen(stateOfSitecoreWindow) {
        let visiblityTestResult = new VisiblityTestResult(this.VisibilityTestIfDesktopMinOneConentEditorOpen.name);
        visiblityTestResult.DidItPass = ((stateOfSitecoreWindow.Meta.WindowType === ScWindowType.Desktop && stateOfSitecoreWindow.ScWindowStates.StateOfDesktop.IndexOfActiveFrame > -1)
            ||
                (stateOfSitecoreWindow.Meta.WindowType !== ScWindowType.Desktop));
        if (!visiblityTestResult.DidItPass) {
            visiblityTestResult.FriendlyFailReason = 'Requires an open Content Editor';
        }
        return visiblityTestResult;
    }
    VisibilityTestDesktopOrContentEditor(stateOfSitecoreWindow) {
        this.Logger.FuncStart(this.VisibilityTestDesktopOrContentEditor.name);
        let visiblityTestResult = new VisiblityTestResult(this.VisibilityTestDesktopOrContentEditor.name);
        if (this.StateOfSitecoreWindow) {
            visiblityTestResult.DidItPass = (stateOfSitecoreWindow.Meta.WindowType === ScWindowType.ContentEditor
                ||
                    stateOfSitecoreWindow.Meta.WindowType === ScWindowType.Desktop);
            if (!visiblityTestResult.DidItPass) {
                visiblityTestResult.FriendlyFailReason = 'Requires Content Editor or Desktop';
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.VisibilityTestDesktopOrContentEditor.name, 'null state');
        }
        this.Logger.FuncEnd(this.VisibilityTestDesktopOrContentEditor.name);
        return visiblityTestResult;
    }
    TestAgainstOneControl(oneControl) {
        this.Logger.FuncStart(this.TestAgainstOneControl.name, VisibilityType[oneControl]);
        let toReturn = null;
        switch (oneControl) {
            case VisibilityType.Desktop:
                toReturn = this.VisibilityTestWindowType(ScWindowType.Desktop, this.WindowType);
                break;
            case VisibilityType.DesktopOrContentEditor:
                toReturn = this.VisibilityTestDesktopOrContentEditor(this.StateOfSitecoreWindow);
                break;
            case VisibilityType.IfDesktopMin1ContentEditor:
                toReturn = this.VisibilityTestIfDesktopMinOneConentEditorOpen(this.StateOfSitecoreWindow);
                break;
            case VisibilityType.ContentEditor:
                toReturn = this.VisibilityTestWindowType(ScWindowType.ContentEditor, this.WindowType);
                break;
            case VisibilityType.Edit:
                toReturn = this.VisibilityTestWindowType(ScWindowType.Edit, this.WindowType);
                break;
            case VisibilityType.Launchpad:
                toReturn = this.VisibilityTestWindowType(ScWindowType.Launchpad, this.WindowType);
                break;
            case VisibilityType.LoginPage:
                toReturn = this.VisibilityTestWindowType(ScWindowType.LoginPage, this.WindowType);
                break;
            case VisibilityType.Normal:
                toReturn = this.VisibilityTestWindowType(ScWindowType.Normal, this.WindowType);
                break;
            case VisibilityType.Preview:
                toReturn = this.VisibilityTestWindowType(ScWindowType.Preview, this.WindowType);
                break;
            case VisibilityType.SnapShotable:
                toReturn = this.VisibilityTestSnapShotable(this.StateOfSitecoreWindow);
                break;
            case VisibilityType.SnapShotSelected:
                toReturn = this.VisibilityTestSnapShotSelected(this.SelectedSnapshot);
                break;
            case VisibilityType.NotLogin:
                toReturn = this.VisibilityTestWindowType(ScWindowType.LoginPage, this.WindowType);
                break;
            case VisibilityType.CommandIsRunning:
                break;
            case VisibilityType.Unknown:
                this.Logger.ErrorAndThrow(this.TestAgainstAllSetControllers.name, 'unknown visibility type');
                break;
            default:
                this.Logger.ErrorAndThrow(this.TestAgainstAllSetControllers.name, 'unknown visibility type');
                break;
        }
        if (!toReturn) {
            this.Logger.ErrorAndThrow(this.TestAgainstOneControl.name, 'null test result');
        }
        this.Logger.FuncEnd(this.TestAgainstOneControl.name, toReturn.DidItPass.toString());
        return toReturn;
    }
    TestAgainstAllSetControllers(Command) {
        this.Logger.FuncStart(this.TestAgainstAllSetControllers.name, Command.VisibilityControllers.length);
        let allResults = new IUiVisiblityTestResult_VisiblityTestResultsBucket(this.Logger);
        if (this.StateOfSitecoreWindow) {
            if (Command.VisibilityControllers.length > 0) {
                for (var jdx = 0; jdx < Command.VisibilityControllers.length; jdx++) {
                    let oneControl = Command.VisibilityControllers[jdx];
                    let thisresult = this.TestAgainstOneControl(oneControl);
                    allResults.TestResults.push(thisresult);
                    if (!thisresult || allResults.HasFailures()) {
                        break;
                    }
                }
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.TestAgainstAllSetControllers.name, 'null stateOfSitecoreWindow');
        }
        this.Logger.FuncEnd(this.TestAgainstAllSetControllers.name, allResults.HasFailures().toString());
        return allResults;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Managers/UiCommandsManager.js




class UiCommandsManager_UiCommandsManager extends LoggableBase {
    constructor(logger, menuCommandParamsBucket, uiVisibilityTestAgent) {
        super(logger);
        this.UiModules = [];
        this.Logger.InstantiateStart(UiCommandsManager_UiCommandsManager.name);
        this.UiVisibilityTestAgent = uiVisibilityTestAgent;
        this.MenuCommandParamsBucket = menuCommandParamsBucket;
        this.Logger.InstantiateEnd(UiCommandsManager_UiCommandsManager.name);
    }
    Init_ButtonStateManager() {
        this.UiVisibilityTestAgent = new UiVisibilityTestAgent_UiVisibilityTestAgent(this.Logger);
        this.BuildCommandButtons();
    }
    BuildCommandButtons() {
        if (this.MenuCommandParamsBucket) {
            this.MenuCommandParamsBucket.MenuCommandParamsAr.forEach((menuCommandParams) => {
                if (menuCommandParams.ModuleKey === ModuleKey.ButtonTypical) {
                    let typeButtonModule = new TypCommandButtonModule_TypCommandButtonModule(this.Logger, menuCommandParams);
                    this.UiModules.push(typeButtonModule);
                }
                else if (menuCommandParams.ModuleKey === ModuleKey.ButtonClose) {
                }
            });
        }
        else {
            this.Logger.ErrorAndThrow(this.BuildCommandButtons.name, 'no bucket');
        }
    }
    HydrateUiModules(refreshData) {
        let currentWindowType = refreshData.StateOfSitecoreWindow.Meta.WindowType;
        this.UiModules.forEach((uiModule) => uiModule.Hydrate(refreshData));
    }
    RefreshUiModuleVisibilityStatus() {
        this.Logger.FuncStart(this.RefreshUiModuleVisibilityStatus.name, this.MenuCommandParamsBucket.MenuCommandParamsAr.length);
        this.UiModules.forEach((oneButtonModule) => oneButtonModule.RefreshUi());
        this.Logger.FuncEnd(this.RefreshUiModuleVisibilityStatus.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/Desktop/DesktopProxy/Events/_HindSiteEvent/HindSiteEvent_Observer.js

class HindSiteEvent_Observer_HindSiteEvent_Observer extends LoggableBase {
    constructor(logger, friendly, callback = null) {
        super(logger);
        this.Callback = null;
        this.Callback = callback;
        this.Friendly = friendly;
    }
    UpdateAsync(payload) {
        try {
            if (this.Callback) {
                this.Callback(payload);
            }
        }
        catch (err) {
            this.Logger.ErrorAndContinue(HindSiteEvent_Observer_HindSiteEvent_Observer.name, err);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/SingleClickEvent/SingleClickEvent_Observer.js

class SingleClickEvent_Observer_SingleClickEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(logger, callback) {
        super(logger, SingleClickEvent_Observer_SingleClickEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/UiCommandFlagRaisedEvent/UiCommandFlagRaisedEvent_Subject.js

class UiCommandFlagRaisedEvent_Subject_UiCommandFlagRaisedEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(logger) {
        super(logger, UiCommandFlagRaisedEvent_Subject_UiCommandFlagRaisedEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/AutoBuild/BuildNum.js
const BuiltDateStamp = 1600914606577;


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SettingFlavor.js
var SettingFlavor;
(function (SettingFlavor) {
    SettingFlavor[SettingFlavor["unknown"] = 0] = "unknown";
    SettingFlavor[SettingFlavor["PopUp"] = 1] = "PopUp";
    SettingFlavor[SettingFlavor["ContentAndPopUpStoredInPopUp"] = 2] = "ContentAndPopUpStoredInPopUp";
    SettingFlavor[SettingFlavor["ContentAndPopUpStoredInEach"] = 3] = "ContentAndPopUpStoredInEach";
    SettingFlavor[SettingFlavor["ContentOnly"] = 4] = "ContentOnly";
})(SettingFlavor || (SettingFlavor = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/UiHydrationData.js
class UiHydrationData {
    constructor(stateOfSitecoreWindow, scUrlAgent, stateOfStorageSnapShots, selectSnapShotId, uiVisiblityTestAgent) {
        this.StateOfSitecoreWindow = stateOfSitecoreWindow;
        this.SelectSnapShot = selectSnapShotId;
        this.ScUrlAgent = scUrlAgent;
        this.StateOfStorageSnapShots = stateOfStorageSnapShots;
        this.SelectSnapShotId = selectSnapShotId;
        this.UiVisibilityTestAgent = uiVisiblityTestAgent;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/SelectSnapUiMutationEvent/SelectSnapUiMutationEvent_ObserverWithCallback.js

class SelectSnapUiMutationEvent_ObserverWithCallback_SelectSnapUiMutationEvent_ObserverWithCallback extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(logger, callback = null) {
        super(logger, SelectSnapUiMutationEvent_ObserverWithCallback_SelectSnapUiMutationEvent_ObserverWithCallback.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/UiModuleManagerPassThroughEvent/UiModuleManagerPassThroughEvent_Subject.js

class UiModuleManagerPassThroughEvent_Subject_UiModuleManagerPassThroughEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(logger) {
        super(logger, UiModuleManagerPassThroughEvent_Subject_UiModuleManagerPassThroughEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/UiSettingBasedModuleMutationEvent/UiSettingBasedModuleMutationEvent_Observer.js

class UiSettingBasedModuleMutationEvent_Observer_UiSettingBasedModuleMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(logger, callback) {
        super(logger, UiSettingBasedModuleMutationEvent_Observer_UiSettingBasedModuleMutationEvent_Observer.name, callback);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/ButtonModules/CancelButtonModule.js


class CancelButtonModule_CancelButtonModule extends _baseButtonModule_base_ButtonModule {
    constructor(loggerAgent, menuCommandParameters) {
        super(loggerAgent, menuCommandParameters);
        this.ModuleKey = ModuleKey.ButtonCancel;
        this.Logger = loggerAgent;
    }
    WireEvents_Module() {
        this.WireEvents_Base();
    }
    Init() {
        this.Init_BaseButtonModule();
    }
    RefreshUi() {
    }
    __GetCancelButton() {
        return this.ContainerUiDivElem;
    }
    SetCancelFlag() {
        var btn = this.__GetCancelButton();
        if (btn) {
            btn.classList.add('red');
        }
    }
    ClearCancelFlag() {
        var btn = this.__GetCancelButton();
        if (btn) {
            btn.classList.remove('red');
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/ButtonModules/CloseButtonModule.js




class CloseButtonModule_CloseButtonModule extends _baseButtonModule_base_ButtonModule {
    constructor() {
        super(...arguments);
        this.ModuleKey = ModuleKey.ButtonClose;
    }
    RefreshUi() {
    }
    Init() {
        this.Init_BaseButtonModule();
        this.BuildElements();
    }
    WireEvents_Module() {
        this.WireEvents_Base();
    }
    GetCommandKey() {
        return this.MenuCommandDefinition.MenuCommandKey;
    }
    BuildElements() {
        this.Logger.FuncStart(this.BuildElements.name, this.MenuCommandDefinition.InnerText + ' ' + MenuCommandKey[this.MenuCommandDefinition.MenuCommandKey]);
        if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(this.ContainerUiDivElem)) {
            this.ContainerUiDivElem.appendChild(this.HTMLButtonElement);
        }
        else {
            this.Logger.ErrorAndContinue(CloseButtonModule_CloseButtonModule.name, 'Could not find ' + this.MenuCommandDefinition.PlaceHolderSelector);
        }
        this.Logger.FuncEnd(this.BuildElements.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/ButtonModules/InputWithButtonModule.js




class InputWithButtonModule_InputWithButtonModule extends _baseButtonModule_base_ButtonModule {
    constructor() {
        super(...arguments);
        this.ModuleKey = ModuleKey.ButtonWithInput;
    }
    WireEvents_Module() {
        this.WireEvents_Base();
    }
    Init() {
        this.Init_BaseButtonModule();
        this.BuildElements();
    }
    RefreshUi() {
    }
    BuildElements() {
        this.InputElement = document.createElement(SharedConst.Const.KeyWords.Html.Input);
        this.InputElement.type = SharedConst.Const.KeyWords.Html.Text;
        this.InputElement.placeholder = "Nick Name";
        this.InputElement.value = '';
        if (this.ContainerUiDivElem) {
            this.ContainerUiDivElem.insertBefore(this.InputElement, this.HTMLButtonElement);
        }
    }
    DrawCorrectNicknameInUI() {
        this.Logger.FuncStart(this.DrawCorrectNicknameInUI.name);
        let snapShots = this.RefreshData.StateOfStorageSnapShots.SnapShots;
        var targetId = this.RefreshData.SelectSnapShotId;
        if (targetId) {
            this.Logger.Log('targetId : ' + targetId.Raw);
            var storageValues = snapShots;
            if (storageValues) {
                var storageMatch;
                for (var idx = 0; idx < storageValues.length; idx++) {
                    var candidate = storageValues[idx];
                    if (candidate.Meta.SnapshotId.Raw === this.RefreshData.SelectSnapShotId.Raw) {
                        storageMatch = candidate;
                        break;
                    }
                }
                if (storageMatch) {
                    var inputElem = window.document.getElementById(PopConst.Const.ElemId.InputNickname);
                    if (inputElem) {
                        inputElem.value = storageMatch.NickName;
                    }
                }
            }
            else {
                this.Logger.WarningAndContinue(this.DrawCorrectNicknameInUI.name, 'null storage values');
            }
        }
        this.Logger.FuncEnd(this.DrawCorrectNicknameInUI.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/ButtonModules/ButtonBasedModules.js







class ButtonBasedModules_ButtonBasedModules extends LoggableBase {
    constructor(logger, commandMan) {
        super(logger);
        this.AllButtonBasedModules = [];
        this.Logger.InstantiateStart(ButtonBasedModules_ButtonBasedModules.name);
        this.CommandDefinitionBucket = commandMan;
        this.InstantiateButtonBasedModules();
        this.Logger.InstantiateEnd(ButtonBasedModules_ButtonBasedModules.name);
    }
    InstantiateButtonBasedModules() {
        this.Logger.FuncStart(this.InstantiateButtonBasedModules.name);
        this.PopulateMenuButtons();
        try {
        }
        catch (err) {
            this.Logger.ErrorAndThrow(this.InstantiateButtonBasedModules.name, err);
        }
        this.Logger.FuncEnd(this.InstantiateButtonBasedModules.name);
    }
    PopulateMenuButtons() {
        this.Logger.FuncStart(this.PopulateMenuButtons.name);
        if (this.CommandDefinitionBucket && this.CommandDefinitionBucket.MenuCommandParamsAr) {
            this.CommandDefinitionBucket.MenuCommandParamsAr.forEach((menuCommandParams) => {
                if (menuCommandParams.PlaceHolderSelector && menuCommandParams.PlaceHolderSelector.length > 0) {
                    if (menuCommandParams.ModuleKey == ModuleKey.ButtonTypical) {
                        this.AllButtonBasedModules.push(new TypCommandButtonModule_TypCommandButtonModule(this.Logger, menuCommandParams));
                    }
                    else if (menuCommandParams.ModuleKey == ModuleKey.ButtonWithInput) {
                        this.AllButtonBasedModules.push(new InputWithButtonModule_InputWithButtonModule(this.Logger, menuCommandParams));
                    }
                    else if (menuCommandParams.ModuleKey == ModuleKey.ButtonClose) {
                        this.AllButtonBasedModules.push(new CloseButtonModule_CloseButtonModule(this.Logger, menuCommandParams));
                    }
                    else if (menuCommandParams.ModuleKey == ModuleKey.ButtonCancel) {
                        this.AllButtonBasedModules.push(new CancelButtonModule_CancelButtonModule(this.Logger, menuCommandParams));
                    }
                }
                else {
                    this.Logger.Log('No ui for this command: ' + MenuCommandKey[menuCommandParams.MenuCommandKey]);
                }
            });
        }
        else {
            this.Logger.ErrorAndThrow(this.PopulateMenuButtons.name, 'no bucket or no array inside');
        }
        this.Logger.FuncEnd(this.PopulateMenuButtons.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Classes/StateHelpers.js

class StateHelpers_StateHelpers extends LoggableBase {
    GetActiveTreeNodeFromStateOfTree(stateOfTree) {
        return stateOfTree.StateOfTreeNodes[stateOfTree.ActiveTreeNodeIndex];
    }
    GetActiveTreeNodeFromStateOfContentEditor(stateOfContentEditor) {
        return this.GetActiveTreeNodeFromStateOfTree(stateOfContentEditor.StateOfTree);
    }
    GetActiveFrameFromStateOfDesktop(stateOfDesktop) {
        return stateOfDesktop.StateOfDTFrames[stateOfDesktop.IndexOfActiveFrame];
    }
    GetActiveContentEditFromStateOfDesktop(stateOfDesktop) {
        let toReturn = null;
        if (stateOfDesktop && stateOfDesktop.IndexOfActiveFrame > -1) {
            return stateOfDesktop.StateOfDTFrames[stateOfDesktop.IndexOfActiveFrame].StateOfContentEditor;
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/SelectSnapUiMutationEvent/SelectSnapUiMutationEvent_Subject.js

class SelectSnapUiMutationEvent_Subject_SelectSnapUiMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(logger) {
        super(logger, SelectSnapUiMutationEvent_Subject_SelectSnapUiMutationEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/SelectSnapshotModule/SelectSnapshotModule.js













class SelectSnapshotModule_SelectSnapshotModule extends _UiModuleBase_UiModuleBase {
    constructor(logger, containerSelector) {
        super(logger, containerSelector);
        this.ModuleKey = ModuleKey.SelectSnapShot;
        this.Friendly = SelectSnapshotModule_SelectSnapshotModule.name;
        this.SelectSnapshotModule_Subject = new SelectSnapUiMutationEvent_Subject_SelectSnapUiMutationEvent_Subject(this.Logger);
        this.StateHelpers = new StateHelpers_StateHelpers(this.Logger);
    }
    Init() {
        this.Init_UiModuleBase();
        this.SelectElement = this.ContainerUiDivElem.querySelector('select');
    }
    WireEvents_Module() {
        this.Logger.FuncStart(this.WireEvents_Module.name, this.ContainerSelector);
        if (!this.SelectElement) {
            this.Logger.ErrorAndThrow(this.WireEvents_Module.name, 'No Id: ' + this.ContainerSelector);
        }
        else {
            this.SelectElement.onchange = (() => {
                let self = this;
                let payload = {
                    SelectSnapshotId: this.GetSelectSnapshotId()
                };
                this.SelectSnapshotModule_Subject.NotifyObservers(payload);
            });
        }
        this.Logger.FuncEnd(this.WireEvents_Module.name, this.ContainerSelector);
    }
    RefreshUi() {
        this.PopulateStateOfSnapShotSelectElement();
    }
    SelectHeaderStr(prefix) {
        let toReturn = StaticHelpers_StaticHelpers.BufferString('', 4, BufferChar.Period, BufferDirection.right)
            + StaticHelpers_StaticHelpers.BufferString('Time Stamp', PopConst.Const.SnapShotFormat.lenTimestamp, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('Type', PopConst.Const.SnapShotFormat.lenPageType, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('Nickname', PopConst.Const.SnapShotFormat.lenNickname, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('Main Sec', PopConst.Const.SnapShotFormat.MainSectionNode, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('Active', PopConst.Const.SnapShotFormat.lenActiveNode, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('Fav.', PopConst.Const.SnapShotFormat.lenFavorite, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('Id', PopConst.Const.SnapShotFormat.lenShortId, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('#CE', PopConst.Const.SnapShotFormat.lenCeCount, BufferChar.Period, BufferDirection.right);
        return toReturn;
    }
    GetSelectSnapshotId() {
        this.Logger.FuncStart(this.GetSelectSnapshotId.name);
        let currentVal = this.SelectElement.value;
        this.Logger.LogVal('currentVal', currentVal);
        let toReturn;
        if (currentVal) {
            toReturn = Guid_Guid.ParseGuid(currentVal, true);
        }
        else {
            toReturn = GuidData_GuidData.GetEmptyGuid();
        }
        this.Logger.FuncEnd(this.GetSelectSnapshotId.name);
        return toReturn;
    }
    WriteHeaders() {
        var toReturn = {
            Auto: null,
            Favorite: null,
            AutoTitle: null,
            FavoriteTitle: null,
            Manual: null,
            ManualTitle: null
        };
        toReturn.Auto = window.document.createElement(SharedConst.Const.KeyWords.Html.optgroup);
        toReturn.Auto.label = this.SelectHeaderStr('');
        toReturn.Auto.id = PopConst.Const.ElemId.HS.SelectHeaderAuto;
        toReturn.AutoTitle = window.document.createElement(SharedConst.Const.KeyWords.Html.optgroup);
        toReturn.AutoTitle.label = 'Auto Snap Shots';
        toReturn.AutoTitle.id = PopConst.Const.ElemId.HS.SelectHeaderAutoTitle;
        toReturn.AutoTitle.classList.add('title');
        toReturn.Manual = window.document.createElement(SharedConst.Const.KeyWords.Html.optgroup);
        toReturn.Manual.label = this.SelectHeaderStr('');
        toReturn.Manual.id = PopConst.Const.ElemId.HS.SelectHeaderManual;
        toReturn.ManualTitle = window.document.createElement(SharedConst.Const.KeyWords.Html.optgroup);
        toReturn.ManualTitle.label = 'Manual Snap Shots';
        toReturn.ManualTitle.id = PopConst.Const.ElemId.HS.SelectHeaderManualTitle;
        toReturn.ManualTitle.classList.add('title');
        toReturn.Favorite = window.document.createElement(SharedConst.Const.KeyWords.Html.optgroup);
        toReturn.Favorite.label = this.SelectHeaderStr('');
        toReturn.Favorite.id = PopConst.Const.ElemId.HS.SelectHeaderFavorite;
        toReturn.FavoriteTitle = window.document.createElement(SharedConst.Const.KeyWords.Html.optgroup);
        toReturn.FavoriteTitle.label = 'Favorite Snap Shots';
        toReturn.FavoriteTitle.id = PopConst.Const.ElemId.HS.SelectHeaderFavoriteTitle;
        toReturn.FavoriteTitle.classList.add('title');
        return toReturn;
    }
    SelectChanged() {
        this.Logger.FuncStart(this.SelectChanged.name);
        this.Logger.FuncEnd(this.SelectChanged.name);
    }
    PopulateStateOfSnapShotSelectElement() {
        this.Logger.FuncStart(this.PopulateStateOfSnapShotSelectElement.name);
        let priorValue = this.GetSelectSnapshotId();
        if (this.RefreshData.StateOfStorageSnapShots && this.RefreshData.StateOfStorageSnapShots.SnapShots) {
            let snapShots = this.RefreshData.StateOfStorageSnapShots.SnapShots;
            if (this.SelectElement) {
                this.CleanExistingSelection(this.SelectElement);
                var headers = this.WriteHeaders();
                if (snapShots && snapShots.length > 0) {
                    for (var idx = 0; idx < snapShots.length; idx++) {
                        var data = snapShots[idx];
                        let el = this.BuildOneSnapshot(data, priorValue, idx);
                        this.AppendSnapShotToCorrectGroup(data, el, headers);
                    }
                }
                this.SelectElement.appendChild(headers.FavoriteTitle);
                this.SelectElement.appendChild(headers.Favorite);
                this.SelectElement.appendChild(headers.ManualTitle);
                this.SelectElement.appendChild(headers.Manual);
                this.SelectElement.appendChild(headers.AutoTitle);
                this.SelectElement.appendChild(headers.Auto);
            }
        }
        else {
            this.Logger.Log('no snap shots');
        }
        this.Logger.FuncEnd(this.PopulateStateOfSnapShotSelectElement.name);
    }
    GetFirstDataWithActiveNode(data) {
        let toReturn = {
            StateOfContentEditor: null,
            activeTreeNode: null
        };
        if (data.Meta.WindowType === ScWindowType.Desktop) {
            if (data.ScWindowStates && data.ScWindowStates.StateOfDesktop && (data.ScWindowStates.StateOfDesktop.IndexOfActiveFrame > -1) && data.ScWindowStates.StateOfDesktop.StateOfDTFrames) {
                let activeFrame = this.StateHelpers.GetActiveFrameFromStateOfDesktop(data.ScWindowStates.StateOfDesktop);
                toReturn.StateOfContentEditor = activeFrame.StateOfContentEditor;
                toReturn.activeTreeNode = this.StateHelpers.GetActiveTreeNodeFromStateOfContentEditor(activeFrame.StateOfContentEditor);
            }
            else {
            }
        }
        else if ((data.Meta.WindowType === ScWindowType.ContentEditor) && data.ScWindowStates.StateOfContentEditor && data.ScWindowStates.StateOfContentEditor.StateOfTree) {
            toReturn.activeTreeNode = this.StateHelpers.GetActiveTreeNodeFromStateOfContentEditor(toReturn.StateOfContentEditor);
        }
        else {
            this.Logger.WarningAndContinue(this.GetFirstDataWithActiveNode.name, 'Not implemented ' + StaticHelpers_StaticHelpers.ScWindowTypeFriendly(data.Meta.WindowType));
        }
        return toReturn;
    }
    TimeNicknameFavStr(data) {
        var typeStr = '';
        if (data.Meta.WindowType === ScWindowType.ContentEditor) {
            typeStr = 'Cont Ed';
        }
        else if (data.Meta.WindowType === ScWindowType.Desktop) {
            typeStr = 'Desktop';
        }
        var activeCeNode = '';
        let MainSectionNode = '';
        let candidateCe = this.GetFirstDataWithActiveNode(data);
        if (candidateCe && candidateCe.activeTreeNode && candidateCe.activeTreeNode.FriendlyTreeNode) {
            activeCeNode = candidateCe.activeTreeNode.FriendlyTreeNode.trim();
            if (candidateCe.StateOfContentEditor.StateOfTree.StateOfTreeNodes.length >= 2) {
                MainSectionNode = candidateCe.StateOfContentEditor.StateOfTree.StateOfTreeNodes[1].FriendlyTreeNode.trim();
            }
        }
        else {
            MainSectionNode = 'todo ' + this.TimeNicknameFavStr.name;
        }
        let toReturn = StaticHelpers_StaticHelpers.BufferString(data.Friendly.TimeStamp, PopConst.Const.SnapShotFormat.lenTimestamp, BufferChar.space, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString(typeStr, PopConst.Const.SnapShotFormat.lenPageType, BufferChar.Nbsp, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString(data.Friendly.NickName, PopConst.Const.SnapShotFormat.lenNickname, BufferChar.Nbsp, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString(MainSectionNode, PopConst.Const.SnapShotFormat.MainSectionNode, BufferChar.Nbsp, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString(activeCeNode, PopConst.Const.SnapShotFormat.lenActiveNode, BufferChar.Nbsp, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString((data.Meta.Flavor === SnapShotFlavor.Favorite ? '*' : ''), PopConst.Const.SnapShotFormat.lenFavorite, BufferChar.Nbsp, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString(Guid_Guid.AsShort(data.Meta.SnapshotId), PopConst.Const.SnapShotFormat.lenShortId, BufferChar.Nbsp, BufferDirection.right);
        return toReturn;
    }
    BuildOneSnapshot(data, prior, idx) {
        let el = window.document.createElement('option');
        let timeNicknameFavStr = this.TimeNicknameFavStr(data);
        el.innerHTML = timeNicknameFavStr;
        if (data.Meta.Flavor === SnapShotFlavor.Favorite) {
            el.classList.add('favorite');
        }
        el.value = data.Meta.SnapshotId.Raw;
        if ((data.Meta.SessionId && prior && data.Meta.SnapshotId.Raw === prior.Raw) ||
            (idx === 0 && !prior)
            ||
                (idx === 0 && prior.Raw === GuidData_GuidData.GetEmptyGuid().Raw)) {
            el.selected = true;
        }
        return el;
    }
    AppendSnapShotToCorrectGroup(data, el, headers) {
        if (!StaticHelpers_StaticHelpers.IsNullOrUndefined([data, el, headers])) {
            if (data.Meta.Flavor === SnapShotFlavor.Autosave) {
                headers.Auto.appendChild(el);
            }
            else if (data.Meta.Flavor === SnapShotFlavor.Favorite) {
                headers.Favorite.appendChild(el);
            }
            else {
                headers.Manual.appendChild(el);
            }
        }
        else {
            this.Logger.WarningAndContinue(this.AppendSnapShotToCorrectGroup.name, 'null in parameters');
        }
    }
    cleanOneGroup(targetSel, targetId) {
        var optGroup = targetSel.querySelector('[id=' + targetId + ']');
        if (optGroup) {
            optGroup.remove();
        }
    }
    CleanExistingSelection(targetSel) {
        this.Logger.FuncStart(this.CleanExistingSelection.name);
        this.cleanOneGroup(targetSel, PopConst.Const.ElemId.HS.SelectHeaderAuto);
        this.cleanOneGroup(targetSel, PopConst.Const.ElemId.HS.SelectHeaderAutoTitle);
        this.cleanOneGroup(targetSel, PopConst.Const.ElemId.HS.SelectHeaderFavorite);
        this.cleanOneGroup(targetSel, PopConst.Const.ElemId.HS.SelectHeaderFavoriteTitle);
        this.cleanOneGroup(targetSel, PopConst.Const.ElemId.HS.SelectHeaderManual);
        this.cleanOneGroup(targetSel, PopConst.Const.ElemId.HS.SelectHeaderManualTitle);
        targetSel.options.length = 0;
        this.Logger.FuncEnd(this.CleanExistingSelection.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SettingType.js
var SettingType;
(function (SettingType) {
    SettingType[SettingType["Unknown"] = 0] = "Unknown";
    SettingType[SettingType["BoolCheckBox"] = 1] = "BoolCheckBox";
    SettingType[SettingType["Accordion"] = 2] = "Accordion";
    SettingType[SettingType["Number"] = 3] = "Number";
})(SettingType || (SettingType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Events/UiSettingBasedModuleMutationEvent/UiSettingBasedModuleMutationEvent_Subject.js

class UiSettingBasedModuleMutationEvent_Subject_UiSettingBasedModuleMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(logger) {
        super(logger, UiSettingBasedModuleMutationEvent_Subject_UiSettingBasedModuleMutationEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/SettingBasedModules/_SettingsBasedModulesBase.js





class _SettingsBasedModulesBase_SettingsBasedModulesBase extends _UiModuleBase_UiModuleBase {
    constructor(logger, hindSiteSetting) {
        super(logger, hindSiteSetting.HindSiteSetting.UiContainerSelector);
        this.Logger.InstantiateStart(HindSiteSettingCheckBoxModule_HindSiteSettingCheckBoxModule.name);
        if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(hindSiteSetting)) {
            this.SettingJacket = hindSiteSetting;
            this.Friendly = HindSiteSettingCheckBoxModule_HindSiteSettingCheckBoxModule.name + '-' + SettingKey[hindSiteSetting.HindSiteSetting.SettingKey];
        }
        else {
            this.Logger.ErrorAndThrow(HindSiteSettingCheckBoxModule_HindSiteSettingCheckBoxModule.name, 'Null settingsAgent or null hindSiteSetting');
        }
        this.Logger.InstantiateEnd(HindSiteSettingCheckBoxModule_HindSiteSettingCheckBoxModule.name);
    }
    Init_BaseSettingsBasedModule() {
        this.Init_UiModuleBase();
        this.UiSettingBasedModuleMutationEvent_Subject = new UiSettingBasedModuleMutationEvent_Subject_UiSettingBasedModuleMutationEvent_Subject(this.Logger);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/Enabled.js
var UiPresence;
(function (UiPresence) {
    UiPresence[UiPresence["Unknown"] = 0] = "Unknown";
    UiPresence[UiPresence["HasUi"] = 1] = "HasUi";
    UiPresence[UiPresence["HasNoUi"] = 2] = "HasNoUi";
})(UiPresence || (UiPresence = {}));
var UiEnableState;
(function (UiEnableState) {
    UiEnableState[UiEnableState["Unknown"] = 0] = "Unknown";
    UiEnableState[UiEnableState["Enabled"] = 1] = "Enabled";
    UiEnableState[UiEnableState["Disabled"] = 2] = "Disabled";
})(UiEnableState || (UiEnableState = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/SettingBasedModules/HindSiteSettingCheckBoxModule.js





class HindSiteSettingCheckBoxModule_HindSiteSettingCheckBoxModule extends _SettingsBasedModulesBase_SettingsBasedModulesBase {
    constructor() {
        super(...arguments);
        this.Friendly = HindSiteSettingCheckBoxModule_HindSiteSettingCheckBoxModule.name;
    }
    Init() {
        this.Logger.FuncStart(this.Init.name, this.Friendly);
        this.Init_BaseSettingsBasedModule();
        this.BuildHtml();
        this.Logger.FuncEnd(this.Init.name, this.Friendly);
    }
    WireEvents_Module() {
        this.Logger.FuncStart(this.WireEvents_Module.name, this.Friendly);
        if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(this.UiInputElement)) {
            this.UiInputElement.addEventListener('change', (evt) => this.OnCheckboxChanged(evt));
        }
        else {
            this.Logger.WarningAndContinue(this.WireEvents_Module.name, 'null input element');
        }
        this.Logger.FuncEnd(this.WireEvents_Module.name, this.Friendly);
    }
    OnCheckboxChanged(evt) {
        let newValue = evt.target.checked;
        let iUiElementChangeEvent_Payload = {
            ModuleKey: this.ModuleKey,
            HindSiteSetting: this.SettingJacket.HindSiteSetting,
            CheckBoxModule: {
                Checked: newValue,
                SettingKey: this.SettingJacket.HindSiteSetting.SettingKey
            },
            NumberModule: null,
            AccordianModule: null,
        };
        this.SettingJacket.HindSiteSetting.ValueAsObj = newValue;
        this.UiSettingBasedModuleMutationEvent_Subject.NotifyObservers(iUiElementChangeEvent_Payload);
    }
    BuildHtml() {
        this.UiInputElement = document.createElement(SharedConst.Const.KeyWords.Html.Input);
        this.UiInputElement.type = SharedConst.Const.KeyWords.Html.Checkbox;
        this.UiInputElement.checked = this.SettingJacket.HindSiteSetting.ValueAsBool();
        this.UiInputElement.id = "id-" + Guid_Guid.WithoutDashes(Guid_Guid.NewRandomGuid());
        this.LabelElement = document.createElement(SharedConst.Const.KeyWords.Html.Label);
        this.LabelElement.innerHTML = this.SettingJacket.HindSiteSetting.FriendlySetting;
        this.LabelElement.setAttribute(SharedConst.Const.KeyWords.Html.For, this.UiInputElement.id);
        if (this.SettingJacket.HindSiteSetting.EnabledState !== UiEnableState.Enabled) {
            this.UiInputElement.setAttribute('disabled', 'disabled');
            this.LabelElement.innerHTML = this.LabelElement.innerHTML + ' {disabled}';
        }
        if (this.ContainerUiDivElem) {
            this.ContainerUiDivElem.appendChild(this.UiInputElement);
            this.ContainerUiDivElem.appendChild(this.LabelElement);
        }
    }
    RefreshUi() {
        if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(this.UiInputElement)) {
            let valueToDisplay = this.SettingJacket.HindSiteSetting.ValueAsBool();
            this.UiInputElement.checked = valueToDisplay;
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/SettingBasedModules/HindSiteSettingNumberModule.js




class HindSiteSettingNumberModule_HindSiteSettingNumberModule extends _SettingsBasedModulesBase_SettingsBasedModulesBase {
    constructor() {
        super(...arguments);
        this.Friendly = HindSiteSettingNumberModule_HindSiteSettingNumberModule.name;
    }
    Init() {
        this.Init_BaseSettingsBasedModule();
        this.BuildHtml();
    }
    BuildHtml() {
        this.UiInputElement = document.createElement(SharedConst.Const.KeyWords.Html.Input);
        this.UiInputElement.id = 'nm-' + Guid_Guid.WithoutDashes(Guid_Guid.NewRandomGuid());
        this.UiInputElement.type = SharedConst.Const.KeyWords.Html.Number;
        let hindsiteSettingForNumbers = this.SettingJacket.HindSiteSetting;
        if (hindsiteSettingForNumbers) {
            this.UiInputElement.min = hindsiteSettingForNumbers.Min.toString();
            this.UiInputElement.max = hindsiteSettingForNumbers.Max.toString();
        }
        this.UiInputElement.value = this.SettingJacket.HindSiteSetting.ValueAsInt().toString();
        this.LabelElement = document.createElement(SharedConst.Const.KeyWords.Html.Label);
        this.LabelElement.setAttribute(SharedConst.Const.KeyWords.Html.For, this.UiInputElement.id);
        this.LabelElement.innerHTML = this.SettingJacket.HindSiteSetting.FriendlySetting;
        if (this.ContainerUiDivElem) {
            this.ContainerUiDivElem.appendChild(this.UiInputElement);
            this.ContainerUiDivElem.appendChild(this.LabelElement);
        }
    }
    WireEvents_Module() {
        if (this.UiInputElement) {
            this.UiInputElement.addEventListener('change', (evt) => this.OnSettingChanged(evt));
        }
    }
    OnSettingChanged(evt) {
        let numberValue = parseInt(evt.target.value);
        let iUiElementChangeEvent_Payload = {
            ModuleKey: this.ModuleKey,
            CheckBoxModule: null,
            HindSiteSetting: this.SettingJacket.HindSiteSetting,
            NumberModule: {
                NumberValue: numberValue
            },
            AccordianModule: null,
        };
        this.SettingJacket.HindSiteSetting.ValueAsObj = numberValue;
        this.UiSettingBasedModuleMutationEvent_Subject.NotifyObservers(iUiElementChangeEvent_Payload);
    }
    RefreshUi() {
        if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(this.UiInputElement)) {
            let valueToDisplay = this.SettingJacket.HindSiteSetting.ValueAsInt();
            this.UiInputElement.value = valueToDisplay.toString();
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/SettingBasedModules/AccordianModule.js




class AccordianModule_AccordianModule extends _SettingsBasedModulesBase_SettingsBasedModulesBase {
    constructor() {
        super(...arguments);
        this.ModuleKey = ModuleKey.Accordion;
        this.Friendly = AccordianModule_AccordianModule.name;
    }
    Init() {
        this.Logger.FuncStart(this.Init.name, AccordianModule_AccordianModule.name);
        this.Init_BaseSettingsBasedModule();
        this.BuildHtml();
        this.SetAccordionClass();
        this.Logger.FuncEnd(this.Init.name, AccordianModule_AccordianModule.name);
    }
    WireEvents_Module() {
        if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(this.AccordionTriggerElem)) {
            this.AccordionTriggerElem.addEventListener('click', (evt) => this.OnToggleAccordion(evt));
        }
        else {
            this.Logger.ErrorAndThrow(this.DroneRestoreAccordionState.name, 'trigger not found ' + this.SettingJacket.HindSiteSetting.FriendlySetting);
        }
    }
    BuildHtml() {
        if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(this.ContainerUiDivElem)) {
            this.AccordionTriggerElem = this.ContainerUiDivElem.querySelector('.accordion-trigger');
            this.AccordionContentElem = this.ContainerUiDivElem.querySelector('.accordion-content');
            if (!StaticHelpers_StaticHelpers.IsNullOrUndefined([this.AccordionTriggerElem, this.AccordionContentElem])) {
                this.AccordionTriggerElem.innerHTML = this.SettingJacket.HindSiteSetting.FriendlySetting;
            }
            else {
                this.Logger.ErrorAndThrow(this.BuildHtml.name, 'null trigger: ' + this.ContainerSelector);
            }
        }
        if (StaticHelpers_StaticHelpers.IsNullOrUndefined([this.AccordionTriggerElem, this.AccordionContentElem])) {
            this.Logger.ErrorAndThrow(this.BuildHtml.name, AccordianModule_AccordianModule.name + '  missing elem');
        }
    }
    RefreshUi() {
        this.DroneRestoreAccordionState();
    }
    DroneRestoreAccordionState() {
        if (this.AccordionContentElem) {
            this.SetAccordionClass();
        }
    }
    OnToggleAccordion(evt) {
        this.Logger.FuncStart(this.OnToggleAccordion.name);
        if (this.AccordionContentElem && this.SettingJacket) {
            var newVal = !(this.SettingJacket.HindSiteSetting.ValueAsBool());
            if (this.SettingJacket) {
                let iUiElementChangeEvent_Payload = {
                    ModuleKey: this.ModuleKey,
                    HindSiteSetting: this.SettingJacket.HindSiteSetting,
                    CheckBoxModule: null,
                    NumberModule: null,
                    AccordianModule: {
                        NewVal: newVal
                    }
                };
                this.SettingJacket.HindSiteSetting.ValueAsObj = newVal;
                this.SetAccordionClass();
                this.UiSettingBasedModuleMutationEvent_Subject.NotifyObservers(iUiElementChangeEvent_Payload);
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.OnToggleAccordion.name, 'did not find sib');
        }
        this.Logger.FuncEnd(this.OnToggleAccordion.name);
    }
    SetAccordionClass() {
        if (this.SettingJacket.HindSiteSetting.ValueAsBool() !== true) {
            this.AccordionContentElem.classList.remove(PopConst.Const.ClassNames.HS.Collapsed);
            this.AccordionTriggerElem.classList.remove(PopConst.Const.ClassNames.HS.Down);
        }
        else {
            this.AccordionContentElem.classList.add(PopConst.Const.ClassNames.HS.Collapsed);
            this.AccordionTriggerElem.classList.add(PopConst.Const.ClassNames.HS.Down);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/SettingBasedModules/SettingsBasedModules.js






class SettingsBasedModules_SettingsBasedModules extends LoggableBase {
    constructor(logger, settingsAgent) {
        super(logger);
        this.SettingsAgent = settingsAgent;
        this.Instantiate_SettingsBasedModules();
    }
    Instantiate_SettingsBasedModules() {
        this.Logger.FuncStart(this.Instantiate_SettingsBasedModules.name);
        this.CheckBoxModules = this.BuildCheckBoxSettingModules();
        this.NumberModules = this.BuildNumberSettingModules();
        this.AccordianModules = this.BuildAccordianModules();
        this.Logger.FuncEnd(this.Instantiate_SettingsBasedModules.name);
    }
    BuildAccordianModules() {
        let toReturn = [];
        this.SettingsAgent.HindSiteSettingsBucket.SettingWrappers.forEach((hindSiteSetting) => {
            if (hindSiteSetting.HindSiteSetting.DataType === SettingType.Accordion) {
                let newAccordianDrone = new AccordianModule_AccordianModule(this.Logger, hindSiteSetting);
                toReturn.push(newAccordianDrone);
            }
        });
        return toReturn;
    }
    BuildCheckBoxSettingModules() {
        let toReturn = [];
        this.SettingsAgent.HindSiteSettingsBucket.SettingWrappers.forEach((settingWrapper) => {
            if (settingWrapper.HindSiteSetting.DataType === SettingType.BoolCheckBox && settingWrapper.HindSiteSetting.HasUi === UiPresence.HasUi) {
                let hindSiteCheckboxSetting = new HindSiteSettingCheckBoxModule_HindSiteSettingCheckBoxModule(this.Logger, settingWrapper);
                toReturn.push(hindSiteCheckboxSetting);
            }
        });
        return toReturn;
    }
    BuildNumberSettingModules() {
        let toReturn = [];
        this.SettingsAgent.HindSiteSettingsBucket.SettingWrappers.forEach((settingWrapper) => {
            if (settingWrapper.HindSiteSetting.DataType === SettingType.Number && settingWrapper.HindSiteSetting.HasUi === UiPresence.HasUi) {
                let hindSiteCheckboxSetting = new HindSiteSettingNumberModule_HindSiteSettingNumberModule(this.Logger, settingWrapper);
                toReturn.push(hindSiteCheckboxSetting);
            }
        });
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/UiFeedbackModules/_UiFeedbackModuleBase.js



class _UiFeedbackModuleBase_UiFeedbackModuleBase extends _UiModuleBase_UiModuleBase {
    constructor(logger, selector) {
        super(logger, selector);
        this.indentedLineBreak = '<br/>&nbsp;&nbsp;&nbsp;';
        this.lineBreak = '<br/>';
        this.ModuleKey = ModuleKey.Unknown;
        this.ContainerSelector = selector;
    }
    __getFeedbackElem() {
        if (!this.UiElement) {
            this.UiElement = document.querySelector(this.ContainerSelector);
            if (!this.UiElement) {
                this.Logger.ErrorAndThrow(this.__getFeedbackElem.name, 'target not found: ' + this.ContainerSelector);
            }
        }
        return this.UiElement;
    }
    AddHtmlString(htmlText) {
        if (htmlText) {
            this.__getFeedbackElem().insertAdjacentHTML(SharedConst.Const.KeyWords.Html.beforeend, htmlText);
        }
        else {
            this.Logger.ErrorAndThrow(this.AddHtmlString.name, 'htmlText');
        }
    }
    WriteManyLines(strAr) {
        if (strAr) {
            for (var ldx = 0; ldx < strAr.length; ldx++) {
                this.WriteSingleLine(strAr[ldx]);
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.WriteManyLines.name, 'No strAr');
        }
    }
    ClearFeedbackElem() {
        var elem = this.__getFeedbackElem();
        if (elem) {
            elem.innerHTML = '';
        }
        else {
            this.Logger.ErrorAndThrow(this.ClearFeedbackElem.name, 'No feedback elem found');
        }
    }
    ConvertIndents(input) {
        let toReturn = '';
        for (var idx = 0; idx < input.length; idx++) {
            let oneChar = input[idx];
            if (oneChar === ' ') {
                toReturn += '&nbsp;';
            }
            else {
                toReturn += input.substring(idx);
                break;
            }
        }
        return toReturn;
    }
    ConvertLineBreaks(input) {
        return input.replace(/\r?\n/g, "<br/>");
    }
    ConvertTabs(input) {
        return input.replace(/\t/g, "&nbsp;&nbsp;xxxxxx");
    }
    WriteSingleLine(text) {
        var ta = this.__getFeedbackElem();
        if (ta) {
            ta.innerHTML += this.ConvertIndents(this.ConvertTabs(this.ConvertLineBreaks(text)) + '<br/>');
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/UiFeedbackModules/FeedbackModuleBrowserState.js




class FeedbackModuleBrowserState_FeedbackModuleBrowserState extends _UiFeedbackModuleBase_UiFeedbackModuleBase {
    constructor() {
        super(...arguments);
        this.Friendly = FeedbackModuleBrowserState_FeedbackModuleBrowserState.name;
        this.ModuleKey = ModuleKey.BroswerState;
    }
    WireEvents_Module() {
    }
    Init() {
    }
    RefreshUi() {
    }
    Hydrate(refreshData) {
        var targetCurrStateDiv = window.document.querySelector(PopConst.Const.Selector.HS.FeedbackBrowserState);
        var allStateText = 'Browser State' + this.lineBreak;
        allStateText += this.lineBreak + 'URL Parts';
        allStateText += this.indentedLineBreak + '<strong>Page Type:</strong> ' + StaticHelpers_StaticHelpers.ScWindowTypeFriendly(refreshData.ScUrlAgent.GetScWindowType());
        let UrlParts = refreshData.ScUrlAgent.GetUrlParts();
        allStateText += this.indentedLineBreak + 'Url Full (raw  ): ' + UrlParts.OriginalRaw;
        allStateText += this.indentedLineBreak + 'Protocol: ' + UrlParts.Protocol;
        allStateText += this.indentedLineBreak + 'Host & Port: ' + UrlParts.HostAndPort;
        allStateText += this.indentedLineBreak + 'File Path: ' + UrlParts.FilePath;
        targetCurrStateDiv.innerHTML = allStateText;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/UiFeedbackModules/FeedbackModuleContentState.js


class FeedbackModuleContentState_FeedbackModuleContentState extends _UiFeedbackModuleBase_UiFeedbackModuleBase {
    constructor() {
        super(...arguments);
        this.Friendly = FeedbackModuleContentState_FeedbackModuleContentState.name;
        this.ModuleKey = ModuleKey.ContentState;
    }
    WireEvents_Module() {
    }
    Init() {
    }
    RefreshUi() {
    }
    HydrateContentStateFeedack(refreshData) {
        var allStateText = '';
        allStateText += JSON.stringify(refreshData.StateOfSitecoreWindow, null, 1);
        this.WriteSingleLine(allStateText);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/UiFeedbackModules/FeedbackModuleMessages.js

class FeedbackModuleMessages_FeedbackModuleMessages_Observer extends _UiFeedbackModuleBase_UiFeedbackModuleBase {
    UpdateAsync(payload) {
        this.Logger.WarningAndContinue(this.UpdateAsync + ' ' + FeedbackModuleMessages_FeedbackModuleMessages_Observer.name, 'not implemented yet');
    }
    Init() {
    }
    UpdateMsgStatusStack(textToShow) {
        this.AddHtmlString(textToShow + '</br>');
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/UiFeedbackModules/FeedbackModulePopUpState.js



class FeedbackModulePopUpState_FeedbackModulePopUpState extends _UiFeedbackModuleBase_UiFeedbackModuleBase {
    constructor() {
        super(...arguments);
        this.Friendly = FeedbackModulePopUpState_FeedbackModulePopUpState.name;
        this.ModuleKey = ModuleKey.PopUpState;
    }
    WireEvents_Module() {
    }
    Init() {
    }
    RefreshUi() {
    }
    Hydrate(refreshData) {
        var allStateText = 'Pop Up State:' + this.lineBreak;
        allStateText += 'Select Snapshot: ' + Guid_Guid.AsShort(refreshData.SelectSnapShot);
        this.AddHtmlString(allStateText);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/UiModules/UiFeedbackModules/UiFeedbackModuleLog.js


class UiFeedbackModuleLog_UiFeedbackModuleLog extends _UiFeedbackModuleBase_UiFeedbackModuleBase {
    constructor() {
        super(...arguments);
        this.Friendly = UiFeedbackModuleLog_UiFeedbackModuleLog.name;
        this.ModuleKey = ModuleKey.FeedbackModuleLog;
        this.FriendlyName = UiFeedbackModuleLog_UiFeedbackModuleLog.name;
    }
    WireEvents_Module() {
    }
    RefreshUi() {
    }
    Init() {
    }
    WriteText(text) {
        this.WriteSingleLine(text);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Managers/UiManager/UiModulesManager.js
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




















class UiModulesManager_UiModulesManager extends LoggableBase {
    constructor(logger, settingsAgent, commandDefinitionBucket, uiCommandsManager, uiVisibilityTestAgent, scUrlagent) {
        super(logger);
        this.UiModules = [];
        this.FacetSettingsBasedModules = [];
        this.Logger.InstantiateStart(UiModulesManager_UiModulesManager.name);
        this.SettingsAgent = settingsAgent;
        this.CommandDefinitionBucket = commandDefinitionBucket;
        this.UiVisibilityTestAgent = uiVisibilityTestAgent;
        this.UiCommandsMan = uiCommandsManager;
        this.ScUrlAgent = scUrlagent;
        if (StaticHelpers_StaticHelpers.IsNullOrUndefined([this.SettingsAgent, this.CommandDefinitionBucket, this.UiCommandsMan, this.UiVisibilityTestAgent, this.ScUrlAgent])) {
            throw (UiModulesManager_UiModulesManager.name + ' null at constructor');
        }
        this.InstantiateModules();
        this.Logger.InstantiateEnd(UiModulesManager_UiModulesManager.name);
    }
    InstantiateModules() {
        this.Logger.FuncStart(this.InstantiateModules.name);
        this.ModuleSelectSnapShots = new SelectSnapshotModule_SelectSnapshotModule(this.Logger, PopConst.Const.Selector.HS.ModuleContainers.SelStateSnapShot);
        this.UiModules.push(this.ModuleSelectSnapShots);
        this.UiModules.push(new UiFeedbackModuleLog_UiFeedbackModuleLog(this.Logger, PopConst.Const.Selector.HS.FeedbackLogElement));
        this.UiModules.push(new FeedbackModuleBrowserState_FeedbackModuleBrowserState(this.Logger, PopConst.Const.Selector.HS.FeedbackBrowserState));
        this.UiModules.push(new FeedbackModulePopUpState_FeedbackModulePopUpState(this.Logger, PopConst.Const.Selector.HS.FeedbackPopUpState));
        this.UiModules.push(new FeedbackModuleContentState_FeedbackModuleContentState(this.Logger, PopConst.Const.Selector.HS.FeedbackContentState));
        let settingsBaseModules = new SettingsBasedModules_SettingsBasedModules(this.Logger, this.SettingsAgent);
        this.FacetSettingsBasedModules = this.FacetSettingsBasedModules.concat(settingsBaseModules.AccordianModules);
        this.FacetSettingsBasedModules = this.FacetSettingsBasedModules.concat(settingsBaseModules.NumberModules);
        this.FacetSettingsBasedModules = this.FacetSettingsBasedModules.concat(settingsBaseModules.CheckBoxModules);
        this.UiModules = this.UiModules.concat(this.FacetSettingsBasedModules);
        let buttonBasedModules = new ButtonBasedModules_ButtonBasedModules(this.Logger, this.CommandDefinitionBucket);
        this.Logger.LogVal('buttonBaseModules ', buttonBasedModules.AllButtonBasedModules.length);
        this.UiModules = this.UiModules.concat(buttonBasedModules.AllButtonBasedModules);
        this.Logger.FuncEnd(this.InstantiateModules.name);
    }
    Init_UiMan() {
        this.Logger.FuncStart(this.Init_UiMan.name, UiModulesManager_UiModulesManager.name);
        this.WriteBuildNumToUi();
        if (this.UiModules) {
            this.UiModules.forEach((uiModule) => {
                if (uiModule) {
                    uiModule.Init();
                }
                else {
                    this.Logger.ErrorAndThrow(this.Init_UiMan.name, 'null module');
                }
            });
        }
        this.UiCommandsMan.Init_ButtonStateManager();
        this.Logger.FuncEnd(this.Init_UiMan.name, UiModulesManager_UiModulesManager.name);
    }
    GetStateOfModules() {
        this.Logger.FuncStart(this.GetStateOfModules.name);
        let wrappedSettings = this.SettingsAgent.GetSettingsByFlavor([SettingFlavor.ContentAndPopUpStoredInPopUp, SettingFlavor.ContentOnly]);
        let settingsToSend = [];
        wrappedSettings.forEach((wrappedSetting) => settingsToSend.push(wrappedSetting.HindSiteSetting));
        var stateOfUiModules = {
            SelectSnapshotId: this.ModuleSelectSnapShots.GetSelectSnapshotId(),
            CurrentNicknameValue: '',
            SnapShotNewNickname: '',
        };
        return stateOfUiModules;
    }
    WireEvents_ModulesManager() {
        this.Logger.FuncStart(this.WireEvents_ModulesManager.name);
        try {
            this.UiModuleManagerMutationEvent_Subject = new UiModuleManagerPassThroughEvent_Subject_UiModuleManagerPassThroughEvent_Subject(this.Logger);
            if (this.UiModules) {
                this.UiModules.forEach((uiModule) => uiModule.WireEvents_Module());
            }
            this.FeedbackModuleMessages = new FeedbackModuleMessages_FeedbackModuleMessages_Observer(this.Logger, PopConst.Const.Selector.HS.DivOverlayModule);
            this.SelectSnapshotModule_Observer = new SelectSnapUiMutationEvent_ObserverWithCallback_SelectSnapUiMutationEvent_ObserverWithCallback(this.Logger, this.OnRefreshUiUIManagerFromSnapShotSelect.bind(this));
            this.UiSettingBasedModuleMutationEvent_Observer = new UiSettingBasedModuleMutationEvent_Observer_UiSettingBasedModuleMutationEvent_Observer(this.Logger, this.OnUiSettingBasedModuleMutationEvent.bind(this));
            let moduleSelectSnapShots = this.GetModulesByKey(ModuleKey.SelectSnapShot);
            if (moduleSelectSnapShots && moduleSelectSnapShots.length > 0) {
                let moduleSelectSnapShot = moduleSelectSnapShots[0];
                if (moduleSelectSnapShot) {
                    moduleSelectSnapShot.SelectSnapshotModule_Subject.RegisterObserver(this.SelectSnapshotModule_Observer);
                }
            }
            if (this.FacetSettingsBasedModules) {
                this.FacetSettingsBasedModules.forEach((settingBased) => {
                    settingBased.UiSettingBasedModuleMutationEvent_Subject.RegisterObserver(this.UiSettingBasedModuleMutationEvent_Observer);
                });
            }
            let feedBackModuleLog = this.GetFirstModuleByKey(ModuleKey.FeedbackModuleLog);
            if (feedBackModuleLog) {
            }
            this.WireEventsOnCheckBoxes();
        }
        catch (err) {
            this.Logger.ErrorAndThrow(this.WireEvents_ModulesManager.name, err);
        }
        this.Logger.FuncEnd(this.WireEvents_ModulesManager.name);
    }
    OnUiSettingBasedModuleMutationEvent(uiModuleMutationEvent_Payload) {
        this.Logger.FuncStart(this.OnUiSettingBasedModuleMutationEvent.name);
        if (this.SettingsAgent) {
            this.SettingsAgent.SetByKey(uiModuleMutationEvent_Payload.HindSiteSetting.SettingKey, uiModuleMutationEvent_Payload.HindSiteSetting.ValueAsObj);
        }
        this.Logger.FuncEnd(this.OnUiSettingBasedModuleMutationEvent.name);
    }
    WireEventsOnCheckBoxes() {
    }
    FilterUiModulesByMenuCommandKey(uiModules, menuCommandKey) {
        let toReturn = null;
        if (uiModules && uiModules.length > 0) {
            for (let uiModule of uiModules) {
                if (uiModule.GetCommandKey() === menuCommandKey) {
                    toReturn = uiModule;
                    break;
                }
            }
        }
        return toReturn;
    }
    GetFirstModuleByKey(moduleKey) {
        let toReturn = null;
        let uiModules = this.GetModulesByKey(moduleKey);
        if (uiModules && uiModules.length > 0) {
            toReturn = uiModules[0];
        }
        return toReturn;
    }
    GetCommandButtonByKey(Ping) {
        let uiModules = this.GetModulesByKey(ModuleKey.ButtonTypical);
        let toReturn = null;
        if (uiModules) {
            let typButton = this.FilterUiModulesByMenuCommandKey(uiModules, MenuCommandKey.Ping);
            if (typButton) {
                toReturn = typButton;
            }
        }
        return toReturn;
    }
    GetBaseButtonModules() {
        let toReturn = [];
        toReturn = toReturn.concat(this.GetModulesByKey(ModuleKey.ButtonTypical));
        toReturn = toReturn.concat(this.GetModulesByKey(ModuleKey.ButtonWithInput));
        toReturn = toReturn.concat(this.GetModulesByKey(ModuleKey.ButtonCancel));
        toReturn = toReturn.concat(this.GetModulesByKey(ModuleKey.ButtonClose));
        return toReturn;
    }
    GetModulesByKey(moduleKey) {
        let toReturn = [];
        if (this.UiModules) {
            for (var idx = 0; idx < this.UiModules.length; idx++) {
                if (this.UiModules[idx].ModuleKey === moduleKey) {
                    toReturn.push(this.UiModules[idx]);
                }
            }
        }
        return toReturn;
    }
    ClosePopUp() {
        return new Promise((resolve, reject) => {
            this.Logger.FuncStart(this.ClosePopUp.name);
            try {
                this.FeedbackModuleMessages.UpdateMsgStatusStack('Command Completed Successfully');
                let setting = this.SettingsAgent.GetByKey(SettingKey.DebugKeepDialogOpen);
                if (!setting.ValueAsBool()) {
                    window.close();
                }
                else {
                    this.Logger.Log('Window not closed because of setting: ' + setting.FriendlySetting);
                }
                resolve();
            }
            catch (err) {
                reject(this.ClosePopUp.name + ' ' + err);
            }
            this.Logger.FuncEnd(this.ClosePopUp.name);
        });
    }
    WriteBuildNumToUi() {
        this.Logger.LogVal('BuiltDateStamp', BuiltDateStamp);
        var targetTag = document.querySelector(PopConst.Const.Selector.HS.BuildStamp);
        if (targetTag) {
            targetTag.innerText = 'build stamp: ' + StaticHelpers_StaticHelpers.MakeFriendlyDate(new Date(BuiltDateStamp));
        }
        else {
            this.Logger.ErrorAndThrow(this.WriteBuildNumToUi.name, 'No Build Stamp Element Found');
        }
    }
    HydrateUiModules(uiHydrationData) {
        this.Logger.FuncStart(this.HydrateUiModules.name);
        this.Logger.LogAsJsonPretty('uiHydrationData.SelectSnapShot', uiHydrationData.SelectSnapShot);
        if (uiHydrationData) {
            if (uiHydrationData.StateOfSitecoreWindow) {
                if (this.UiModules) {
                    this.UiModules.forEach((uiModule) => uiModule.Hydrate(uiHydrationData));
                }
                this.UiCommandsMan.HydrateUiModules(uiHydrationData);
            }
            else {
                this.Logger.ErrorAndThrow(this.HydrateUiModules.name, 'null state');
            }
        }
        this.Logger.FuncEnd(this.HydrateUiModules.name);
    }
    RefreshModuleUis() {
        this.UiCommandsMan.RefreshUiModuleVisibilityStatus();
        if (this.UiModules) {
            this.UiModules.forEach((uiModule) => uiModule.RefreshUi());
        }
    }
    OnRefreshUiUIManagerFromSnapShotSelect(uiData) {
        return __awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.OnRefreshUiUIManagerFromSnapShotSelect.name);
            if (this.LastKnownSelectSnapshotId !== uiData.SelectSnapshotId) {
                this.LastKnownSelectSnapshotId = uiData.SelectSnapshotId;
                this.UpdateUiCommon();
            }
            this.Logger.FuncEnd(this.OnRefreshUiUIManagerFromSnapShotSelect.name);
        });
    }
    UpdateUiFromContentReply(stateOfSitecoreWindow, stateOfStorageSnapShots) {
        return __awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.UpdateUiFromContentReply.name);
            this.LastKnownSelectSnapshotId = this.ModuleSelectSnapShots.GetSelectSnapshotId();
            this.LastKnownstateOfSitecoreWindow = stateOfSitecoreWindow;
            this.LastKnownStateOfStorageSnapShots = stateOfStorageSnapShots;
            this.UpdateUiCommon();
            this.Logger.FuncEnd(this.UpdateUiFromContentReply.name);
        });
    }
    UpdateUiCommon() {
        if (this.LastKnownstateOfSitecoreWindow && this.LastKnownstateOfSitecoreWindow.Meta) {
            this.UiVisibilityTestAgent.Hydrate(this.LastKnownstateOfSitecoreWindow, this.LastKnownStateOfStorageSnapShots, this.LastKnownstateOfSitecoreWindow.Meta.WindowType, this.LastKnownSelectSnapshotId);
            let refreshData = new UiHydrationData(this.LastKnownstateOfSitecoreWindow, this.ScUrlAgent, this.LastKnownStateOfStorageSnapShots, this.LastKnownSelectSnapshotId, this.UiVisibilityTestAgent);
            this.HydrateUiModules(refreshData);
            this.RefreshModuleUis();
        }
        else {
            this.Logger.ErrorAndThrow(this.UpdateUiFromContentReply.name, 'null state or meta');
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/Managers/UiEventManager.js






class UiEventManager_UiEventManager extends LoggableBase {
    constructor(logger, uimodulesMan) {
        super(logger);
        this.UiModulesMan = uimodulesMan;
        if (StaticHelpers_StaticHelpers.IsNullOrUndefined([uimodulesMan])) {
            throw (UiModulesManager_UiModulesManager.name + ' null at constructor');
        }
    }
    Init_UiEventManager() {
        this.Logger.FuncStart(this.Init_UiEventManager.name);
        this.UiCommandRaisedFlag_UiEventManagerRelay_Subject = new UiCommandFlagRaisedEvent_Subject_UiCommandFlagRaisedEvent_Subject(this.Logger);
        this.CommandButtonSingleClickEvent_Observer = new SingleClickEvent_Observer_SingleClickEvent_Observer(this.Logger, this.OnSingleClickEvent.bind(this));
        this.Logger.FuncEnd(this.Init_UiEventManager.name);
    }
    GetStateOfPopUp() {
        let stateOfUiModules = this.UiModulesMan.GetStateOfModules();
        let StateOfPopup = {
            NewNickName: stateOfUiModules.SnapShotNewNickname,
            SelectSnapShotId: stateOfUiModules.SelectSnapshotId,
        };
        return StateOfPopup;
    }
    OnSingleClickEvent(singleClickEventPayload) {
        this.Logger.Log('single click');
        let payload = {
            MsgFlag: singleClickEventPayload.HandlerData.MsgFlag,
            CommandType: singleClickEventPayload.HandlerData.CommandType,
            StateOfPopUp: this.GetStateOfPopUp()
        };
        this.UiCommandRaisedFlag_UiEventManagerRelay_Subject.NotifyObservers(payload);
    }
    ;
    WireEvents_UiEventMan() {
        this.Logger.FuncStart(this.WireEvents_UiEventMan.name);
        this.ListenForCommandEvents();
        this.Logger.FuncEnd(this.WireEvents_UiEventMan.name);
    }
    ListenForSettingsEvents() {
    }
    ListenForCommandEvents() {
        this.Logger.FuncStart(this.ListenForCommandEvents.name);
        let baseButtonModules = this.UiModulesMan.GetBaseButtonModules();
        if (baseButtonModules) {
            baseButtonModules.forEach((baseButtonModule) => {
                if (!StaticHelpers_StaticHelpers.IsNullOrUndefined(baseButtonModule.SingleButtonClickEvent_Subject)) {
                    this.Logger.LogVal('baseButtonModule.Friendly', baseButtonModule.Friendly);
                    baseButtonModule.SingleButtonClickEvent_Subject.RegisterObserver(this.CommandButtonSingleClickEvent_Observer);
                }
                else {
                    this.Logger.WarningAndContinue(this.ListenForCommandEvents.name, 'null SingleButtonClickEvent_Subject ' + ModuleKey[baseButtonModule.ModuleKey]);
                }
            });
        }
        this.Logger.FuncEnd(this.ListenForCommandEvents.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUpUi/scripts/HindSiteUiLayer.js
var HindSiteUiLayer_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class HindSiteUiLayer_HindSiteUiLayer extends LoggableBase {
    constructor(logger, settingsAgent, commandDefinitionBucket, scUrlAgent) {
        super(logger);
        this.Logger.InstantiateStart(HindSiteUiLayer_HindSiteUiLayer.name);
        try {
            this.SettingsAgent = settingsAgent;
            this.CommandDefinitionBucket = commandDefinitionBucket;
            this.ScUrlAgent = scUrlAgent;
            if (StaticHelpers_StaticHelpers.IsNullOrUndefined([this.SettingsAgent, this.ScUrlAgent, this.CommandDefinitionBucket])) {
                this.Logger.ErrorAndThrow(HindSiteUiLayer_HindSiteUiLayer.name, 'null at constructor');
            }
            this.Instantiate_Ui();
            this.Init_Ui();
            this.WireEvents_Ui();
        }
        catch (err) {
            this.Logger.ErrorAndThrow(HindSiteUiLayer_HindSiteUiLayer.name, err);
        }
        this.Logger.InstantiateEnd(HindSiteUiLayer_HindSiteUiLayer.name);
    }
    GetStateOfPopUp() {
        return this.UiEventMan.GetStateOfPopUp();
    }
    OnContentReplyReceived(dataContentReplyReceivedEvent_Payload) {
        this.Logger.FuncStart(this.OnContentReplyReceived.name);
        this.UiModulesMan.UpdateUiFromContentReply(dataContentReplyReceivedEvent_Payload.StateOfSitecoreWindow, dataContentReplyReceivedEvent_Payload.StateOfStorageSnapShots);
        this.UiModulesMan.UpdateUiFromContentReply(dataContentReplyReceivedEvent_Payload.StateOfSitecoreWindow, dataContentReplyReceivedEvent_Payload.StateOfStorageSnapShots);
        this.Logger.FuncEnd(this.OnContentReplyReceived.name);
    }
    Instantiate_Ui() {
        return HindSiteUiLayer_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.Instantiate_Ui.name);
            try {
                this.UiVisibilityTestAgent = new UiVisibilityTestAgent_UiVisibilityTestAgent(this.Logger);
                this.UiCommandsMan = new UiCommandsManager_UiCommandsManager(this.Logger, this.CommandDefinitionBucket, this.UiVisibilityTestAgent);
                this.UiModulesMan = new UiModulesManager_UiModulesManager(this.Logger, this.SettingsAgent, this.CommandDefinitionBucket, this.UiCommandsMan, this.UiVisibilityTestAgent, this.ScUrlAgent);
                this.UiEventMan = new UiEventManager_UiEventManager(this.Logger, this.UiModulesMan);
            }
            catch (err) {
                console.log(err);
            }
            this.Logger.FuncEnd(this.Instantiate_Ui.name);
        });
    }
    Init_Ui() {
        return HindSiteUiLayer_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncEnd(this.Init_Ui.name);
            this.UiModulesMan.Init_UiMan();
            this.UiEventMan.Init_UiEventManager();
            this.Logger.FuncEnd(this.Init_Ui.name);
        });
    }
    WireEvents_Ui() {
        this.Logger.FuncStart(this.WireEvents_Ui.name);
        this.UiModulesMan.WireEvents_ModulesManager();
        this.UiEventMan.WireEvents_UiEventMan();
        this.FeedbackModuleMsg_Observer = new FeedbackModuleMessages_FeedbackModuleMessages_Observer(this.Logger, PopConst.Const.Selector.HS.FeedbackMessages);
        this.UiCommandRaisedFlag_Subject = this.UiEventMan.UiCommandRaisedFlag_UiEventManagerRelay_Subject;
        this.Logger.FuncEnd(this.WireEvents_Ui.name);
    }
}


/***/ })
/******/ ]);