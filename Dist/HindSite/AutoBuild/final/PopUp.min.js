/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/1xxx-MessageFlag.js
var MsgFlag;
(function (MsgFlag) {
    MsgFlag[MsgFlag["Unknown"] = 0] = "Unknown";
    MsgFlag[MsgFlag["GetAllStorageOneWindow"] = 1001] = "GetAllStorageOneWindow";
    MsgFlag[MsgFlag["NewWindowTest"] = 1002] = "NewWindowTest";
    MsgFlag[MsgFlag["Ping"] = 1003] = "Ping";
    MsgFlag[MsgFlag["ReqRemoveFromStorage"] = 1004] = "ReqRemoveFromStorage";
    MsgFlag[MsgFlag["ReqAddCETab"] = 1100] = "ReqAddCETab";
    MsgFlag[MsgFlag["ReqAdminB"] = 1101] = "ReqAdminB";
    MsgFlag[MsgFlag["ReqGoDesktop"] = 1102] = "ReqGoDesktop";
    MsgFlag[MsgFlag["ReqLoginWithAdminB"] = 1103] = "ReqLoginWithAdminB";
    MsgFlag[MsgFlag["ReqMarkFavorite"] = 1104] = "ReqMarkFavorite";
    MsgFlag[MsgFlag["ReqOpenCE"] = 1105] = "ReqOpenCE";
    MsgFlag[MsgFlag["ReqQuickPublish"] = 1106] = "ReqQuickPublish";
    MsgFlag[MsgFlag["ReqSetStateOfSitecoreWindow"] = 1107] = "ReqSetStateOfSitecoreWindow";
    MsgFlag[MsgFlag["Unused"] = 1108] = "Unused";
    MsgFlag[MsgFlag["ReqSetScMode"] = 1109] = "ReqSetScMode";
    MsgFlag[MsgFlag["ReqTakeSnapShot"] = 1110] = "ReqTakeSnapShot";
    MsgFlag[MsgFlag["ReqToggleCompactCss"] = 1111] = "ReqToggleCompactCss";
    MsgFlag[MsgFlag["ReqUpdateNickName"] = 1112] = "ReqUpdateNickName";
    MsgFlag[MsgFlag["RespCurState"] = 1200] = "RespCurState";
    MsgFlag[MsgFlag["RespTaskFailed"] = 1201] = "RespTaskFailed";
    MsgFlag[MsgFlag["RespListeningAndReady"] = 1202] = "RespListeningAndReady";
    MsgFlag[MsgFlag["_unused"] = 1203] = "_unused";
    MsgFlag[MsgFlag["RespTaskSuccessful"] = 1204] = "RespTaskSuccessful";
    MsgFlag[MsgFlag["RespTest"] = 1205] = "RespTest";
    MsgFlag[MsgFlag["RespNotReady"] = 1206] = "RespNotReady";
})(MsgFlag || (MsgFlag = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/3xxx-SettingKey.js
var _3xxx_SettingKey_SettingKey;
(function (SettingKey) {
    SettingKey[SettingKey["unknown"] = 0] = "unknown";
    SettingKey[SettingKey["AutoLogin"] = 3100] = "AutoLogin";
    SettingKey[SettingKey["__dead"] = 3101] = "__dead";
    SettingKey[SettingKey["DebugKeepDialogOpen"] = 3102] = "DebugKeepDialogOpen";
    SettingKey[SettingKey["AutoSaveIntervalMin"] = 3103] = "AutoSaveIntervalMin";
    SettingKey[SettingKey["UseCompactCss"] = 3104] = "UseCompactCss";
    SettingKey[SettingKey["AutoSaveRetainDays"] = 3105] = "AutoSaveRetainDays";
    SettingKey[SettingKey["AutoRenameCeButton"] = 3106] = "AutoRenameCeButton";
    SettingKey[SettingKey["MaxAutoSaveCount"] = 3200] = "MaxAutoSaveCount";
    SettingKey[SettingKey["EnableLogging"] = 3201] = "EnableLogging";
    SettingKey[SettingKey["LgndPopUpLog"] = 3300] = "LgndPopUpLog";
    SettingKey[SettingKey["LgndForeSite"] = 3301] = "LgndForeSite";
    SettingKey[SettingKey["LgndHindSite"] = 3302] = "LgndHindSite";
    SettingKey[SettingKey["LgndSettings"] = 3303] = "LgndSettings";
    SettingKey[SettingKey["LgndContentState"] = 3304] = "LgndContentState";
    SettingKey[SettingKey["_unused_"] = 3305] = "_unused_";
    SettingKey[SettingKey["LgndMessages"] = 3306] = "LgndMessages";
    SettingKey[SettingKey["LgndBrowserState"] = 3307] = "LgndBrowserState";
    SettingKey[SettingKey["LgndPopUpState"] = 3308] = "LgndPopUpState";
    SettingKey[SettingKey["LastUsedLogToStorageKey"] = 3400] = "LastUsedLogToStorageKey";
    SettingKey[SettingKey["AutoSnapshotBeforeWindowChange"] = 3401] = "AutoSnapshotBeforeWindowChange";
})(_3xxx_SettingKey_SettingKey || (_3xxx_SettingKey_SettingKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferChar.js
var BufferChar;
(function (BufferChar) {
    BufferChar[BufferChar["space"] = 0] = "space";
    BufferChar[BufferChar["Nbsp"] = 1] = "Nbsp";
    BufferChar[BufferChar["Period"] = 2] = "Period";
    BufferChar[BufferChar["Zero"] = 3] = "Zero";
})(BufferChar || (BufferChar = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferDirection.js
var BufferDirection;
(function (BufferDirection) {
    BufferDirection[BufferDirection["left"] = 0] = "left";
    BufferDirection[BufferDirection["right"] = 1] = "right";
})(BufferDirection || (BufferDirection = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/scWindowType.js
var ScWindowType;
(function (ScWindowType) {
    ScWindowType[ScWindowType["Unknown"] = 0] = "Unknown";
    ScWindowType[ScWindowType["LoginPage"] = 1] = "LoginPage";
    ScWindowType[ScWindowType["Desktop"] = 2] = "Desktop";
    ScWindowType[ScWindowType["ContentEditor"] = 3] = "ContentEditor";
    ScWindowType[ScWindowType["Launchpad"] = 4] = "Launchpad";
    ScWindowType[ScWindowType["Edit"] = 5] = "Edit";
    ScWindowType[ScWindowType["Normal"] = 6] = "Normal";
    ScWindowType[ScWindowType["Preview"] = 7] = "Preview";
    ScWindowType[ScWindowType["MediaLibrary"] = 8] = "MediaLibrary";
    ScWindowType[ScWindowType["PackageDesigner"] = 9] = "PackageDesigner";
    ScWindowType[ScWindowType["InstallationWizard"] = 10] = "InstallationWizard";
})(ScWindowType || (ScWindowType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SnapShotFlavor.js
var SnapShotFlavor;
(function (SnapShotFlavor) {
    SnapShotFlavor[SnapShotFlavor["Unknown"] = 0] = "Unknown";
    SnapShotFlavor[SnapShotFlavor["Autosave"] = 1] = "Autosave";
    SnapShotFlavor[SnapShotFlavor["Favorite"] = 2] = "Favorite";
    SnapShotFlavor[SnapShotFlavor["Manual"] = 3] = "Manual";
})(SnapShotFlavor || (SnapShotFlavor = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/StaticHelpers.js






class StaticHelpers_StaticHelpers {
    static MinToMs(minutes) {
        return minutes * 60 * 1000;
    }
    static FlavorAsString(flavor) {
        return 'Flavor.' + SnapShotFlavor[flavor] + '(' + flavor + ')';
    }
    static SettingKeyAsString(settingKey) {
        let toReturn = '';
        try {
            toReturn = 'SettingKey.' + _3xxx_SettingKey_SettingKey[settingKey] + '(' + settingKey + ')';
        }
        catch (err) {
            toReturn = err;
        }
        return toReturn;
    }
    static ScWindowTypeFriendly(windowType) {
        return ScWindowType[windowType];
    }
    static MakeFriendlyDate(date) {
        var toReturn = '';
        var workingDate = new Date(date);
        if (workingDate) {
            var month = StaticHelpers_StaticHelpers.BufferString((workingDate.getMonth() + 1).toString(), 2, BufferChar.Zero, BufferDirection.left);
            var day = StaticHelpers_StaticHelpers.BufferString(workingDate.getDate().toString(), 2, BufferChar.Zero, BufferDirection.left);
            var min = StaticHelpers_StaticHelpers.BufferString(workingDate.getMinutes().toString(), 2, BufferChar.Zero, BufferDirection.left);
            var hoursRaw = workingDate.getHours();
            var hourClean = hoursRaw ? hoursRaw : 12;
            var hourCleanStr = StaticHelpers_StaticHelpers.BufferString(hourClean.toString(), 2, BufferChar.Zero, BufferDirection.left);
            toReturn = month + '.' + day + ' ' + hourCleanStr + ':' + min;
        }
        else {
            toReturn = '{error}';
            throw (this.MakeFriendlyDate.name, 'no date provided');
        }
        return toReturn;
    }
    static getBuffChar(buffCharEnum) {
        var buffChar = ' ';
        if (buffCharEnum === BufferChar.space) {
            buffChar = ' ';
        }
        else if (buffCharEnum === BufferChar.Nbsp) {
            buffChar = '&nbsp;';
        }
        else if (buffCharEnum === BufferChar.Period) {
            buffChar = '.';
        }
        else if (buffCharEnum === BufferChar.Zero) {
            buffChar = '0';
        }
        return buffChar;
    }
    static BufferString(str, desiredLength, buffCharEnum, direction) {
        var toReturn = str;
        var buffChar = this.getBuffChar(buffCharEnum);
        if (toReturn.length > desiredLength) {
            if (desiredLength > 6) {
                toReturn = toReturn.substring(0, desiredLength - 3) + '...';
            }
            else {
                toReturn = toReturn.substring(0, desiredLength);
            }
        }
        if (toReturn.length < desiredLength) {
            var bufferCharNeeded = desiredLength - toReturn.length;
            for (var idx = 0; idx < bufferCharNeeded; idx++) {
                if (direction === BufferDirection.left) {
                    toReturn = buffChar + toReturn;
                }
                else {
                    toReturn = toReturn + buffChar;
                }
            }
        }
        return toReturn;
    }
    static MsgFlagAsString(msg) {
        var toReturn = "{error}";
        if (msg) {
            try {
                toReturn = 'MsgFlag.' + MsgFlag[msg] + '(' + msg + ')';
            }
            catch (e) {
            }
        }
        return 'flag: ' + toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/SharedConst.js
let SharedConst = (() => {
    class SharedConst {
    }
    SharedConst.Const = {
        Debug: {
            ForceLoggingEnabled: false
        },
        IterHelper: {
            GrowthPerIteration: 0.5,
            MaxCount: {
                Default: 10,
                OverridePublishing: 15,
            },
            Timeouts: {
                Max: 10000,
                Default: 100,
            },
        },
        KeyWords: {
            Html: {
                beforeend: 'beforeend',
                optgroup: 'optgroup',
            },
            Javascript: {
                ReadyStates: {
                    Complete: "complete"
                }
            }
        },
        Logger: {
            MinTimeDiffMs: 100
        },
        ObjDiscriminator: {},
        Settings: {
            Defaults: {
                EnableLogging: false,
                LogToStorage: false,
                UseCompactCss: false,
            }
        },
        Regex: {
            ContentEditor: /Content.*?Editor/ig,
            CleanGuid: /{|-|}/ig,
            NbSp: /&nbsp;/ig,
            QueryStrSeparatorQuest: /\?/gi,
            PageType: {
                Desktop: /.*default.aspx/ig,
                Edit: /sc_itemid=.*sc_mode=edit/ig,
                Normal: /sc_itemid=.*sc_mode=normal/ig,
                Preview: /sc_itemid=.*sc_mode=preview/ig,
            },
        },
        UrlSuffix: {
            Desktop: '/sitecore/shell/default.aspx',
            Login: '/sitecore/login',
            LaunchPad: '/client/applications/launchpad',
            CE: '/sitecore/shell/Applications/Content Editor.aspx?sc_bw=1',
            None: '/',
            AboutBlank: 'about:blank',
        },
    };
    return SharedConst;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/Guid.js

let Guid_Guid = (() => {
    class Guid {
        static NewRandomGuid() {
            let guidData = new GuidData_GuidData();
            let newGuid = new Guid();
            let randomStr = newGuid.GetRandomGuidString();
            let toReturn = new GuidData_GuidData(randomStr);
            return toReturn;
        }
        static IsValidGuidStr(candidateStr) {
            let toReturn = false;
            let regexGuid = '^[\}]?[0-9a-f]{8}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{4}[\-]?[0-9a-f]{12}[\}]?$';
            let pattern = new RegExp(regexGuid, 'i');
            toReturn = pattern.test(candidateStr);
            return toReturn;
        }
        static AsShort(guidData) {
            var toReturn = '{error}';
            toReturn = guidData.Raw.substr(0, Guid.ShortGuidLength);
            return toReturn;
        }
        static WithoutDashes(guiddata) {
            let withoutDashes = guiddata.Raw.replace(/-/g, '');
            return withoutDashes;
        }
        static ParseGuid(val, throwOnError) {
            return new GuidData_GuidData(val);
        }
        MakeNewRandomGuid() {
            let randomStr = this.GetRandomGuidString();
            return new GuidData_GuidData(randomStr);
        }
        static GuidStrWithDashes(val) {
            let toReturn = '';
            let withoutDashes = val.replace(/-/g, '');
            var parts = [];
            if (withoutDashes.length !== 32) {
                throw (this.GuidStrWithDashes.name + ' - Wrong count wanted: ' + 32 + " got: " + withoutDashes.length + ' (without dashes) ' + withoutDashes);
            }
            parts.push(withoutDashes.slice(0, 8));
            parts.push(withoutDashes.slice(8, 12));
            parts.push(withoutDashes.slice(12, 16));
            parts.push(withoutDashes.slice(16, 20));
            parts.push(withoutDashes.slice(20, 32));
            toReturn = parts.join('-');
            return toReturn;
        }
        GetRandomGuidString() {
            var toReturn;
            var temp = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
            toReturn = temp.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0;
                var v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
            return toReturn;
        }
        MakeGuidFromString(val, throwOnError) {
            let toReturn = new GuidData_GuidData(val);
            return toReturn;
        }
    }
    Guid.ShortGuidLength = 4;
    return Guid;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/GuidData.js


let GuidData_GuidData = (() => {
    class GuidData {
        constructor(raw = null) {
            if (!raw) {
                this.Raw = GuidData.ConstEmptyGuid;
            }
            else {
                if (Guid_Guid.IsValidGuidStr(raw)) {
                    this.Raw = Guid_Guid.GuidStrWithDashes(raw);
                }
                else {
                    throw ('Invalid GUID string: ' + raw);
                }
            }
        }
        AsBracedGuid() {
            return '{' + this.Raw + "}";
        }
        static GetEmptyGuid() {
            return new GuidData();
        }
        FormatJustNumbers(str) {
            return str.replace(SharedConst.Const.Regex.CleanGuid, '');
        }
    }
    GuidData.ConstEmptyGuid = '00000000-0000-0000-0000-000000000000';
    return GuidData;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LogWriterBuffer.js
class LogWriterBuffer {
    constructor() {
        this.FriendlyName = LogWriterBuffer.name;
        this.LogPreInitBuffer = [];
        this.bufferPrefix = '* ';
    }
    WriteText(text) {
        this.LogPreInitBuffer.push(this.bufferPrefix + text);
    }
    GetBuffer() {
        let iterCheckMax = 1000;
        let toReturn = [];
        while (this.LogPreInitBuffer.length > 0 && iterCheckMax > 0) {
            iterCheckMax--;
            toReturn.push(this.LogPreInitBuffer.shift());
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LoggerTimer.js

class LoggerTimer_LoggerTimer {
    constructor() {
        this.TimeStart = new Date();
        this.TimeLast = this.TimeStart.getTime();
        this.TimeMarkStart = this.TimeLast;
    }
    GetTimeDiff() {
        let toReturn = '';
        let timeNow = new Date().getTime();
        let timeDiffSinceLastMs = timeNow - this.TimeLast;
        let timeDiffOVerAll = timeNow - this.TimeMarkStart;
        let toReturnSinceLast;
        let toReturnSinceStart;
        let padLength = 5;
        if (timeDiffSinceLastMs >= SharedConst.Const.Logger.MinTimeDiffMs) {
            toReturnSinceLast = this.padFront(timeDiffSinceLastMs, padLength);
        }
        else {
            toReturnSinceLast = this.padFront(' ', padLength, ' ');
        }
        ;
        toReturnSinceStart = this.padFront(timeDiffOVerAll, padLength, '0');
        toReturn = toReturnSinceStart + ' ' + toReturnSinceLast;
        this.TimeLast = timeNow;
        return toReturn;
    }
    padFront(input, desiredLength = 2, padChar = '0') {
        let toReturn = input.toString();
        let maxIter = 10;
        while ((toReturn.length < desiredLength) && maxIter > 0) {
            maxIter--;
            toReturn = padChar + toReturn;
        }
        return toReturn;
    }
    LogTimeStamp() {
        var result = this.padFront(this.TimeStart.getDate()) + "/" + this.padFront(this.TimeStart.getMonth() + 1) + "/" + this.TimeStart.getFullYear() + " " + this.padFront(this.TimeStart.getHours()) + ":" + this.padFront(this.TimeStart.getMinutes());
        return result;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LoggerAgent.js
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






class LoggerAgent_LoggerAgent {
    constructor() {
        this.MaxIndent = 10;
        this.ErrorStack = [];
        this.AllLogWriters = [];
        this.__debugTextChangedCallbacks = [];
        this.UseTimeStamp = true;
        this.Timer = new LoggerTimer_LoggerTimer;
        this.BufferWriter = new LogWriterBuffer();
        this.AddWriter(this.BufferWriter);
        this.__callDepth = -1;
        this.LogVal('TimeStamp', this.Timer.LogTimeStamp());
    }
    FlushBuffer() {
        this.RemoveWriter(this.BufferWriter);
        this.LogVal('TimeStamp B', Date.now());
        let bufferAr = this.BufferWriter.GetBuffer();
        for (var idx = 0; idx < bufferAr.length; idx++) {
            this.Log(bufferAr[idx]);
        }
    }
    RemoveWriter(BufferWriter) {
        for (var idx = 0; idx < this.AllLogWriters.length; idx++) {
            let candidate = this.AllLogWriters[idx];
            if (candidate == BufferWriter) {
                this.AllLogWriters.splice(idx, 1);
                break;
            }
        }
    }
    AddWriter(writter) {
        this.HasWriters = true;
        this.AllLogWriters.push(writter);
    }
    SectionMarker(sectionTag) {
        this.Log("");
        this.Log("======================= " + sectionTag + " =======================");
        this.Log("");
    }
    ThrowIfNullOrUndefined(title, subject) {
        if (!this.IsNotNullOrUndefinedBool(title, subject)) {
            throw 'Failed';
        }
    }
    IsNotNullOrUndefinedBool(title, subject) {
        var toReturn = false;
        if (subject) {
            if ((typeof subject) === 'undefined') {
                this.LogVal(title + ' Is Not Undefined', '!!! false !!!');
            }
            else {
                toReturn = true;
            }
        }
        else {
            this.LogVal(title + ' Is Not Null', '!!! false !!!');
        }
        return toReturn;
    }
    HndlrClearDebugText(self, verify = false) {
        this.FuncStart(this.HndlrClearDebugText.name);
        var proceed = true;
        if (verify) {
            proceed = confirm('Clear Debug TextArea ?');
        }
        if (proceed) {
            var newText = '--- Debug Text Reset ---';
            self.__triggerAllDebugTextChangedCallbacks({
                NewText: newText,
                Append: false
            });
        }
        this.FuncEnd(this.HndlrClearDebugText.name);
    }
    MarkerA() {
        this.__markerRaw('A');
    }
    MarkerB() {
        this.__markerRaw('B');
    }
    MarkerC() {
        this.__markerRaw('C');
    }
    MarkerD() {
        this.__markerRaw('D');
    }
    MarkerE() { this.__markerRaw('E'); }
    MarkerF() { this.__markerRaw('F'); }
    __markerRaw(marker) {
        this.Log('Marker ' + marker);
    }
    LogAsJsonPretty(texValName, jsonObj) {
        try {
            this.LogVal(texValName, JSON.stringify(jsonObj, null, 1));
        }
        catch (err) {
            this.Log('Unable to stringify obj');
        }
    }
    LogVal(textValName, textVal) {
        if (typeof textVal === 'undefined') {
            textVal = '{undefined}';
        }
        else if (textVal === null) {
            textVal = '{null}';
        }
        else {
            var asGuid = textVal;
            if (typeof asGuid === typeof GuidData_GuidData) {
                textVal = asGuid.Raw;
            }
        }
        textVal = textVal.toString();
        textValName = StaticHelpers_StaticHelpers.BufferString(textValName.toString(), 50, BufferChar.space, BufferDirection.right);
        const debugPrefix = '  ~~~  ';
        this.Log(debugPrefix + textValName + ' : ' + textVal);
    }
    Log(text, optionalValue = '', hasPrefix = false) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.HasWriters) {
                var indent = '  ';
                this.MaxIndent = 10;
                for (var idx = 0; idx < Math.min(this.__callDepth, this.MaxIndent); idx++) {
                    text = indent + text;
                }
                var prefixLength = 3;
                if (!hasPrefix) {
                    for (var idx = 0; idx < prefixLength; idx++) {
                        text = ' ' + text;
                    }
                }
                this.__triggerAllDebugTextChangedCallbacks({
                    NewText: text,
                    Append: true
                });
                if (this.UseTimeStamp) {
                    let timeDiff = this.Timer.GetTimeDiff() + '  ';
                    text = timeDiff + text;
                }
                this.WriteToAllWriters(text);
            }
        });
    }
    WriteToAllWriters(text) {
        if (this.AllLogWriters) {
            this.AllLogWriters.forEach((oneWriter) => {
                if (oneWriter) {
                    try {
                        oneWriter.WriteText(text);
                    }
                    catch (err) {
                        console.log(this.WriteToAllWriters.name + ' ' + oneWriter.FriendlyName + ' | ' + err);
                    }
                }
                else {
                    console.log('Null writer');
                }
            });
        }
    }
    __triggerAllDebugTextChangedCallbacks(data) {
        for (var idx = 0; idx < this.__debugTextChangedCallbacks.length; idx++) {
            var oneCallback = this.__debugTextChangedCallbacks[idx];
            oneCallback.Func(oneCallback.Caller, data);
        }
    }
    CtorName(ctorName) {
        this.Log('Constructor: ' + ctorName);
    }
    FuncStart(textOrFunc, optionalValue) {
        textOrFunc = 's' + ' ' + this.__callDepth + ') ' + textOrFunc;
        if (!optionalValue) {
            optionalValue = '';
        }
        else {
            optionalValue = optionalValue.toString();
        }
        if (optionalValue.length > 0) {
            textOrFunc = textOrFunc + ' : ' + optionalValue;
        }
        this.Log(textOrFunc, '', true);
        this.__callDepth++;
    }
    InstantiateStart(text) {
        this.FuncStart("[Instantiate] " + text);
    }
    InstantiateEnd(text) {
        this.FuncEnd("[Instantiate] " + text);
    }
    FuncEnd(text, optionalValueInput) {
        this.__callDepth--;
        if (this.__callDepth < 0) {
            this.__callDepth = 0;
        }
        text = 'e' + ' ' + this.__callDepth + ') ' + text;
        if (optionalValue !== null && (typeof optionalValue === typeof Boolean)) {
            optionalValue = optionalValue.toString();
        }
        if (!optionalValueInput) {
            optionalValueInput = '';
        }
        var optionalValue = optionalValueInput.toString();
        if (optionalValue.length > 0) {
            text = text + ' : ' + optionalValue;
        }
        this.Log(text, optionalValue, true);
    }
    ErrorAndThrow(container, text) {
        this.ErrorAndContinue(container, text);
        throw container + " " + text;
    }
    ErrorAndContinue(container, text) {
        if (!container) {
            container = 'unknown';
        }
        if (!text) {
            text = 'unknown';
        }
        this.ErrorStack.push({
            ContainerFunc: container,
            ErrorString: text
        });
        this.Log('');
        this.Log('\t\t** ERROR ** ' + container);
        this.Log('');
        this.Log('\t\t  ' + text);
        this.Log('');
        this.Log('\t\t** ERROR ** ' + container);
        this.Log('');
    }
    WarningAndContinue(container, text) {
        if (!container) {
            container = 'unknown';
        }
        if (!text) {
            text = 'unknown';
        }
        this.Log('');
        this.Log('\t\t** WARNING ** ' + container + ' ' + text);
        this.Log('');
    }
    NotNullCheck(title, value) {
        if (typeof value === 'undefined') {
            this.LogVal(title, 'Is Undefined');
        }
        else if (!value) {
            this.LogVal(title, 'Is Null');
        }
        else {
            this.LogVal(title, 'Is Not Null');
        }
    }
    IsNullOrUndefined(subject) {
        var toReturn = '{unknown}';
        if (subject) {
            if ((typeof subject) === 'undefined') {
                toReturn = 'Is Undefined';
            }
            else {
                toReturn = 'Not Null';
            }
        }
        else {
            toReturn = 'Is Null';
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LoggerConsoleWriter.js
class LoggerConsoleWriter {
    constructor() {
        this.FriendlyName = LoggerConsoleWriter.name;
    }
    WriteText(text) {
        console.log(text);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LoggerStorageWriter.js
var LoggerStorageWriter_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class LoggerStorageWriter {
    constructor() {
        this.FriendlyName = LoggerStorageWriter.name;
        this.CurrentStorageLogKey = '0';
        this.LogToStoragePrefix = 'Hindsite.Log.';
        this.StorageLogCombined = "";
    }
    WriteText(text) {
    }
    SetLogToStorageKey(logToStorageIndex) {
        this.CurrentStorageLogKey = this.LogToStoragePrefix + logToStorageIndex;
    }
    WriteLogToStorage(logMessage) {
        return LoggerStorageWriter_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => LoggerStorageWriter_awaiter(this, void 0, void 0, function* () {
                this.StorageLogCombined += "|||" + JSON.stringify(logMessage);
                if (this.CurrentStorageLogKey) {
                    window.localStorage.setItem(this.CurrentStorageLogKey, this.StorageLogCombined);
                }
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/RepositoryAgent/RepositoryAgent.js
class RepositoryAgent {
    constructor(loggerAgent) {
        this.Logger = loggerAgent;
    }
    RemoveByKey(key) {
        try {
            window.localStorage.removeItem(key);
        }
        catch (err) {
            this.Logger.ErrorAndThrow(this.RemoveByKey.name, err);
        }
    }
    InitRepositoryAgent() {
        this.Logger.FuncStart(RepositoryAgent.name, this.InitRepositoryAgent.name);
        this.Logger.FuncEnd(RepositoryAgent.name, this.InitRepositoryAgent.name);
    }
    GetBulkLocalStorageByKeyPrefix(targetPrefix) {
        var toReturn = [];
        try {
            var storageLength = window.localStorage.length;
            for (var idx = 0; idx < storageLength; idx++) {
                var candidate = {
                    data: '',
                    key: '',
                };
                candidate.key = window.localStorage.key(idx);
                if (candidate.key.startsWith(targetPrefix)) {
                    candidate.data = window.localStorage.getItem(candidate.key);
                    if (typeof candidate != 'undefined' && typeof candidate.data != 'undefined' && candidate != null && candidate.data != null) {
                        toReturn.push(candidate);
                    }
                }
            }
        }
        catch (err) {
            this.Logger.ErrorAndThrow(this.GetBulkLocalStorageByKeyPrefix.name, err);
        }
        return toReturn;
    }
    ReadDataOfKey(targetKey) {
        this.Logger.FuncStart(this.ReadDataOfKey.name);
        let storageValue = null;
        let toReturn = '';
        this.Logger.LogVal('target key ', targetKey);
        storageValue = window.localStorage.getItem(targetKey);
        if (storageValue != null) {
            toReturn = storageValue.toString();
        }
        else {
            this.Logger.Log(this.ReadDataOfKey.name, "No value returned from storage");
        }
        this.Logger.FuncEnd(this.ReadDataOfKey.name);
        return toReturn;
    }
    WriteByKey(storageKey, jsonString) {
        window.localStorage.setItem(storageKey, jsonString);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/OneGenericSetting.js
class HindSiteSetting {
    constructor(settingKey, dataType, valueAsObj, uiSelector, defaultValue, settingFlavor, friendly, enabled, hasUi = true) {
        this.SettingKey = settingKey;
        this.DataType = dataType;
        this.ValueAsObj = valueAsObj;
        this.UiSelector = uiSelector;
        this.DefaultValue = defaultValue;
        this.SettingFlavor = settingFlavor;
        this.FriendlySetting = friendly;
        this.HasUi = hasUi;
        this.Enabled = enabled;
    }
    ValueAsInt() {
        var toReturn = Number.MIN_SAFE_INTEGER;
        if (this.ValueAsObj !== undefined && this.ValueAsObj !== null) {
            toReturn = parseInt(this.ValueAsObj.toString());
        }
        return toReturn;
    }
    ValueAsBool() {
        let toReturn = this.DefaultValue;
        if (this.ValueAsObj !== undefined && this.ValueAsObj !== null) {
            toReturn = this.ValueAsObj;
        }
        else {
            toReturn = this.DefaultValue;
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SettingType.js
var SettingType;
(function (SettingType) {
    SettingType[SettingType["Unknown"] = 0] = "Unknown";
    SettingType[SettingType["BoolCheckBox"] = 1] = "BoolCheckBox";
    SettingType[SettingType["Accordion"] = 2] = "Accordion";
    SettingType[SettingType["Number"] = 3] = "Number";
})(SettingType || (SettingType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SettingFlavor.js
var SettingFlavor;
(function (SettingFlavor) {
    SettingFlavor[SettingFlavor["unknown"] = 0] = "unknown";
    SettingFlavor[SettingFlavor["PopUp"] = 1] = "PopUp";
    SettingFlavor[SettingFlavor["ContentAndPopUpStoredInPopUp"] = 2] = "ContentAndPopUpStoredInPopUp";
    SettingFlavor[SettingFlavor["ContentAndPopUpStoredInEach"] = 3] = "ContentAndPopUpStoredInEach";
    SettingFlavor[SettingFlavor["ContentOnly"] = 4] = "ContentOnly";
})(SettingFlavor || (SettingFlavor = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Classes/PopConst.js
let PopConst = (() => {
    class PopConst {
    }
    PopConst.Const = {
        ClassNames: {
            HS: {
                Collapsed: 'in',
                Buttons: {
                    AdminB: 'admin-b',
                    Cancel: 'cancel',
                    CloseWindow: 'close-window',
                    CompactCe: 'details',
                    Edit: 'edit',
                    GoContentEditor: 'ce',
                    GoDesktop: 'desktop-icon',
                    Ping: 'edit',
                    PresentationDetails: 'details',
                    QuickPublish: 'publish',
                    RemoveFromStorage: 'delete-snapshot',
                    RestoreNewTab: 'restore-snapshot',
                    RestoreSameTab: 'restore-snapshot',
                    RestoreStateTBD: 'restore-snapshot',
                    ScModeEdit: 'edit',
                    ScModeNormal: 'normal',
                    ScModePrev: 'preview-icon',
                    TakeSnapShot: 'take-snapshot',
                    ToggleFavorite: 'btn-favorite',
                    UpdateNickname: 'set-nickname',
                    AddCeTab: 'add-ce-tab',
                },
            },
        },
        ElemId: {
            InputNickname: 'id-input-nickname',
            HindSiteParentInfo: 'spanParentInfo',
            HS: {
                SelectHeaderAuto: 'sel-header-auto',
                SelectHeaderAutoTitle: 'sel-header-auto-title',
                SelectHeaderFavorite: 'sel-header-favorite',
                SelectHeaderFavoriteTitle: 'sel-header-favorite-title',
                SelectHeaderManual: 'sel-header-manual',
                SelectHeaderManualTitle: 'sel-header-manual-title',
                TabId: 'orig-win-id',
            }
        },
        Numbers: {
            MinMenuHeight: 600,
            MinMenuWidth: 600,
            MaxAutoSaveCount: 10,
            AutoSaveIntervalMin: 5,
        },
        Notify: {
            Default: 'Complete',
            PublishComplete: 'Publishing Complete',
        },
        Selector: {
            Btn: {
                WindowClose: '[id=close-window]',
            },
            Legend: {
                LgndBrowserState: '[id=lgnd-browser-state]',
                LgndContentState: '[id=lgnd-content-state]',
                LgndForeSite: '[id=lgnd-fore-site]',
                LgndHindSite: '[id=lgnd-hind-site]',
                LgndMessages: '[id=lgnd-messages]',
                LgndPopUpLog: '[id=lgnd-pop-up-log]',
                LgndPopUpState: '[id=lgnd-pop-up-state]',
                LgndSettings: '[id=lgnd-settings]',
            },
            HS: {
                AdminB: '[id=AdminB]',
                AutoSnapshotBeforeWindowChange: '[id=id-settings-auto-snapshot-on-window-change]',
                BigRed: '[id=BigRed]',
                BuildStamp: '[id=build-stamp]',
                CompactCE: '[id=CompactCE]',
                Desktop: '[id=Desktop]',
                DivOverlayModule: '[id=menu-overlay]',
                DivStateContent: '[id=feedback-div-state-content]',
                FeedbackBrowserState: '[id=feedback-div-browser-state]',
                FeedbackPopUpState: '[id=feedback-div-pop-up-state]',
                FeedbackContentState: '[id=feedback-div-state-content]',
                FeedbackLogElement: '[id=feedback-pop-up-log]',
                FeedbackMessages: '[id=feedback-messages]',
                FeedbackStorage: '[id=feedback-storage]',
                GoCE: '[id=CE]',
                HsCancel: '[id=Cancel]',
                HsRemoveFromStorage: '[id=RemoveOneFromLocalStorage]',
                HsRestoreWindowStateSameTab: '[id=id-restore-state-same-tab]',
                HsRestoreWindowStateNewTab: '[id=id-restore-state-new-tab]',
                iCBoxdSettingsAutoLogin: '[id=id-settings-auto-login]',
                IdFieldSetDebug: '[id=id-fieldset-debug]',
                EnableLogging: '[id=id-settings-show-log-data]',
                ToggleFavorite: '[id=id-toggle-favorite]',
                ModeEdit: '[id=sc-mode-edit]',
                ModeNorm: '[id=Norm]',
                ModePrev: '[id=Prev]',
                PrefAutoLogin: '[id=id-settings-auto-login]',
                PresentationDetails: '[id=PresentationDetails]',
                QuickPublish: '[id=QuickPublish]',
                SelStateSnapShot: '[id=selState]',
                SettingAutoSaveInterval: '[id=id-settings-auto-save-interval]',
                SettingAutoSaveMaxCount: '[id=id-settings-auto-save-max-count]',
                SettingDebugKeepDialogOpen: '[id=id-settings-debug-keep-dialog-open]',
                SettingAutoSaveSnapshotRetainDays: '[id=id-settings-auto-save-snap-shot-retain-days]',
                SettingAutoRenameCeTabButton: '[id=id-settings-auto-rename-ce-tab-button]',
                SettingNotUsed: '[id=id-settings-not-used]',
                SettingUseCompactCss: '[id=id-settings-use-compact]',
                TakeSnapshot: '[id=id-take-snapshot]',
                UpdateNicknameB: '[id=id-btn-update-nickname]',
            },
        },
        Settings: {
            Defaults: {
                AutoSaveEnabled: false,
                DebugKeepDialogOpen: false,
                LgndBrowserState: false,
                LgndContentState: false,
                LgndForeSite: true,
                LgndHindSite: true,
                LgndMessages: false,
                LgndPopUpLog: false,
                LgndPopUpState: false,
                LgndSettings: false,
            }
        },
        Storage: {
            SettingsSuffix: 'todo',
            KeyGenericSettings: 'HindSite.' + 'GenericSettings',
            StorageLogKeyPrefix: 'HindSite.' + 'Log.',
            Defaults: {
                bool: {
                    AutoSaveEnabled: false,
                    AutoLogin: false,
                    DefaultDebugKeepDialogOpen: false,
                    AutoSnapshotBeforeWindowChange: false,
                }
            }
        },
        SnapShotFormat: {
            lenTimestamp: 13,
            lenNickname: 16,
            lenPageType: 7,
            lenPrefix: 6,
            lenShortId: 4,
            colSep: ' - ',
            lenCeCount: 3,
            MainSectionNode: 9,
            lenActiveNode: 9,
            lenFavorite: 3,
        },
        Timeouts: {
            WaitBeforeRemovingCompleteFlag: 1500,
            AutoLoginCheckInterval: 3000,
        },
    };
    return PopConst;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/Enabled.js
var Enabled;
(function (Enabled) {
    Enabled[Enabled["Unknown"] = 0] = "Unknown";
    Enabled[Enabled["Enabled"] = 1] = "Enabled";
    Enabled[Enabled["Disabled"] = 2] = "Disabled";
})(Enabled || (Enabled = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/InjectConst.js
let ContentConst = (() => {
    class ContentConst {
    }
    ContentConst.Const = {
        MaxAutoToSaveCount: 10,
        DefaultMaxAutoSaveAgeDays: 7,
        DefaultAutoRenameCeTabButton: false,
        Iterations: {
            MaxSetHrefEffort: 10,
            MaxIterationSwitchBoard: 20,
        },
        Timeouts: {
            PostLoginBtnClick: 1000,
            SetHrefEffortWait: 1000,
            WaitBeforeRemovingCompleteFlagOnContent: 1500,
            AutoSaveIntervalMin: 1,
        },
        ElemId: {
            sc: {
                scLoginPassword: 'Password',
                scLoginUserName: 'UserName',
                SitecoreRootAnchorNodeId: 'Tree_Node_11111111111111111111111111111111',
                SitecoreRootApparentIdRaw: '11111111111111111111111111111111',
                SitecoreRootGlyphId: 'Tree_Glyph_11111111111111111111111111111111',
                scLoginBtn: {
                    sc920: 'LogInBtn',
                    sc820: null
                },
            }
        },
        ClassNames: {
            SC: {
                ContentTreeNode: 'scContentTreeNode',
                scContentTreeNodeActive: 'scContentTreeNodeActive',
            }
        },
        Selector: {
            SC: {
                ContentEditor: {
                    ContentTreeNodeGlyph: '.scContentTreeNodeGlyph',
                    RootAnchorNode: '[id=Tree_Node_11111111111111111111111111111111]',
                    ScContentTreeContainer: '.scContentTreeContainer',
                    scContentTreeNodeIcon: '.scContentTreeNodeIcon',
                },
                Level2Nodes: {
                    MediaLibraryAnchorRootNode: '[id=Tree_Node_3D6658D8A0BF4E75B3E2D050FABCF4E1]',
                    TemplatesAnchorRootNode: '[id=Tree_Node_3C1715FE6A134FCF845FDE308BA9741D]',
                    LayoutRootAnchorNode: '[id=Tree_Node_EB2E4FFD27614653B05226A64D385227]',
                    SystemRootAnchorNode: '[id=Tree_Node_13D6D6C6C50B4BBDB3312B04F1A58F21]',
                    ContentRootAnchorNode: '[id=Tree_Node_0DE95AE441AB4D019EB067441B7C2450]',
                },
                IdStartsWithTreeNode: '[id^=Tree_Node_]',
                IframeContent: {
                    sc820: null,
                    sc920: 'iframe[src*=Content]'
                },
                JqueryModalDialogsFrame: '[id=jqueryModalDialogsFrame]',
                ContentIframe0: '[id=scContentIframeId0]',
                NextButton: '[id=NextButton]',
                ContentIFrame1: '[id=scContentIframeId1]',
                Ok: '[id=OK]',
                Cancel: '[id=CancelButton]',
                MenuButtonPublish: '[id=B414550BADAF4542C9ADF44BED5FA6CB3E_menu_button]',
                MenuDropDownPublishItem: '[id=B414550BADAF4542C9ADF44BED5FA6CB3E_menu_98719A90225A4802A0625D3967E4DD47]',
                NavPublishStrip: '[id*=_Nav_PublishStrip]',
                StartMenuLeftOption: '.scStartMenuLeftOption',
                Publish: {
                    TheItemHasBeenPublished: '[id=LastPage]:not([style*=\'display:none\'])',
                    SettingsHidden: '[id=Settings][style*=\'display: none\']',
                    PublishingHidden: '[id=Publishing][style*=\'display: none\']',
                },
                LoginBtn: {
                    sc920: null,
                    sc820: 'input.btn',
                },
                scStartButton: {
                    sc920: '[id=StartButton]',
                    sc820: '[id=startButton]'
                },
                Desktop: {
                    DtStartBar: '[id=Startbar]',
                    ContentTreeHolder: '[id=ContentTreeHolder]',
                },
            },
        },
        Storage: {
            SettingsSuffix: '.Settings',
            ShowDebugData: false,
            SnapShotPrefix: 'ScSnapShot.',
            WindowRoot: 'HindSite.',
            SessionKey: 'HindSite.SessionKey',
        },
        Numbers: {
            Desktop: {
                MaxToolBarNameChars: 13
            }
        },
        MaxIter: 100,
        MaxNullOrUndefinedIter: 100,
        prop: {
            AllTreeData: 'AllTreeData',
        },
        Names: {
            SC: {
                TreeGlyphPrefix: 'Tree_Glyph_',
                TreeNodePrefix: 'Tree_Node_',
                TreeExpandedPng: {
                    sc920: 'treemenu_expanded.png',
                    sc820: 'todo'
                }
            },
            Desktop: {
                StartBarApplicationPrefix: 'startbar_application_',
            },
            PopUp: 'PopUp',
            PopUpStyles: 'PopUpStyles',
            TreeMenuExpandedPng: 'treemenu_expanded.png',
            TreeMenuCollapsedPng: 'treemenu_collapsed.png',
            scDefaultAdminPassword: 'b',
            scDefaultAdminUserName: 'admin',
        }
    };
    return ContentConst;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/ConstAllSettings.js








class ConstAllSettings_ConstAllSettings {
    constructor() {
        this.AllSettings = [
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LastUsedLogToStorageKey, SettingType.Number, 0, null, 0, SettingFlavor.ContentAndPopUpStoredInEach, 'Rolling Prefix key for log to storage', Enabled.Enabled, false),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.EnableLogging, SettingType.BoolCheckBox, true, PopConst.Const.Selector.HS.EnableLogging, SharedConst.Const.Settings.Defaults.EnableLogging, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Enable Logging', Enabled.Enabled),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.UseCompactCss, SettingType.BoolCheckBox, false, PopConst.Const.Selector.HS.SettingUseCompactCss, SharedConst.Const.Settings.Defaults.UseCompactCss, SettingFlavor.ContentOnly, 'Use Compact CSS', Enabled.Disabled),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.AutoSnapshotBeforeWindowChange, SettingType.BoolCheckBox, null, PopConst.Const.Selector.HS.AutoSnapshotBeforeWindowChange, PopConst.Const.Storage.Defaults.bool.AutoSnapshotBeforeWindowChange, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Save Snapshot on HindSite Window Change', Enabled.Disabled),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.AutoLogin, SettingType.BoolCheckBox, null, PopConst.Const.Selector.HS.iCBoxdSettingsAutoLogin, PopConst.Const.Storage.Defaults.bool.AutoLogin, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Login', Enabled.Disabled),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndPopUpLog, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndPopUpLog, PopConst.Const.Settings.Defaults.LgndPopUpLog, SettingFlavor.PopUp, 'Pop Up Log', Enabled.Enabled),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndForeSite, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndForeSite, PopConst.Const.Settings.Defaults.LgndForeSite, SettingFlavor.PopUp, 'Fore&bull;Site', Enabled.Enabled),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndHindSite, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndHindSite, PopConst.Const.Settings.Defaults.LgndHindSite, SettingFlavor.PopUp, 'Hind&bull;Site', Enabled.Enabled),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndSettings, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndSettings, PopConst.Const.Settings.Defaults.LgndSettings, SettingFlavor.PopUp, 'Settings', Enabled.Enabled),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndMessages, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndMessages, PopConst.Const.Settings.Defaults.LgndMessages, SettingFlavor.PopUp, 'Messages', Enabled.Enabled),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndPopUpState, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndPopUpState, PopConst.Const.Settings.Defaults.LgndPopUpState, SettingFlavor.PopUp, 'Pop Up State', Enabled.Enabled),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndContentState, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndContentState, PopConst.Const.Settings.Defaults.LgndContentState, SettingFlavor.PopUp, 'Content State', Enabled.Enabled),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.LgndBrowserState, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndBrowserState, PopConst.Const.Settings.Defaults.LgndBrowserState, SettingFlavor.PopUp, 'Browser State', Enabled.Enabled),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.MaxAutoSaveCount, SettingType.Number, null, PopConst.Const.Selector.HS.SettingAutoSaveMaxCount, PopConst.Const.Numbers.MaxAutoSaveCount, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Save Max Count', Enabled.Disabled),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.AutoSaveIntervalMin, SettingType.Number, null, PopConst.Const.Selector.HS.SettingAutoSaveInterval, PopConst.Const.Numbers.AutoSaveIntervalMin, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Save Interval (Min) - 0 to disable', Enabled.Enabled),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.DebugKeepDialogOpen, SettingType.BoolCheckBox, null, PopConst.Const.Selector.HS.SettingDebugKeepDialogOpen, PopConst.Const.Settings.Defaults.DebugKeepDialogOpen, SettingFlavor.PopUp, '(Debug) Keep Dialog Open', Enabled.Enabled),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.AutoSaveRetainDays, SettingType.Number, null, PopConst.Const.Selector.HS.SettingAutoSaveSnapshotRetainDays, ContentConst.Const.DefaultMaxAutoSaveAgeDays, SettingFlavor.ContentOnly, 'Days to Retain Auto Snap Shots', Enabled.Enabled),
            new HindSiteSetting(_3xxx_SettingKey_SettingKey.AutoRenameCeButton, SettingType.BoolCheckBox, false, PopConst.Const.Selector.HS.SettingAutoRenameCeTabButton, ContentConst.Const.DefaultAutoRenameCeTabButton, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto rename Content Editor tab button to match active node', Enabled.Enabled)
        ];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/SettingsAgent.js


class SettingsAgent_SettingsAgent {
    constructor(logger, repoAgent) {
        this.SettingsAr = [];
        this.Logger = logger;
        this.RepoAgent = repoAgent;
    }
    UpdateSettingsFromPopUpMsg(newSettings) {
        this.Logger.FuncStart(this.UpdateSettingsFromPopUpMsg.name);
        if (newSettings) {
            for (var idx = 0; idx < newSettings.length; idx++) {
                let oneSetting = newSettings[idx];
                this.SetByKey(oneSetting.SettingKey, oneSetting.ValueAsObj);
            }
        }
        this.Logger.FuncEnd(this.UpdateSettingsFromPopUpMsg.name);
    }
    InitSettingsAgent(allDefaultSettings) {
        this.Logger.FuncStart(this.InitSettingsAgent.name, allDefaultSettings.length);
        this.SettingsAr = allDefaultSettings;
        let settingsFromStorage = this.ReadGenericSettingsFromStorage();
        this.UpdateSettingValuesFromStorage(settingsFromStorage);
        this.Logger.FuncEnd(this.InitSettingsAgent.name);
    }
    GetAllSettings() {
        return this.SettingsAr;
    }
    ReadGenericSettingsFromStorage() {
        this.Logger.FuncStart(this.ReadGenericSettingsFromStorage.name);
        let toReturn = [];
        let storedValue = this.RepoAgent.ReadDataOfKey(PopConst.Const.Storage.KeyGenericSettings);
        if (storedValue) {
            toReturn = JSON.parse(storedValue.toString());
        }
        else {
            toReturn = [];
        }
        this.Logger.FuncEnd(this.ReadGenericSettingsFromStorage.name);
        return toReturn;
    }
    LogAllSettings() {
        this.Logger.LogAsJsonPretty('this.SettingsAr', this.SettingsAr);
    }
    UpdateSettingValuesFromStorage(settingsFromStorage) {
        this.Logger.FuncStart(this.UpdateSettingValuesFromStorage.name);
        try {
            for (var idx = 0; idx < settingsFromStorage.length; idx++) {
                let storageSetting = settingsFromStorage[idx];
                let matchingSetting = this.GetByKey(storageSetting.SettingKey);
                if (matchingSetting) {
                    matchingSetting.ValueAsObj = storageSetting.ValueAsObj;
                }
                else {
                    this.Logger.ErrorAndContinue(this.UpdateSettingValuesFromStorage.name, 'matching setting not found ' + StaticHelpers_StaticHelpers.SettingKeyAsString(storageSetting.SettingKey));
                }
            }
        }
        catch (err) {
            this.Logger.ErrorAndThrow(this.UpdateSettingValuesFromStorage.name, err);
        }
        this.Logger.FuncEnd(this.UpdateSettingValuesFromStorage.name);
    }
    GetSettingsByFlavor(targetFlavors) {
        let toReturn = [];
        for (var idx = 0; idx < this.SettingsAr.length; idx++) {
            let candidate = this.SettingsAr[idx];
            if (targetFlavors.indexOf(candidate.SettingFlavor) > -1) {
                toReturn.push(candidate);
            }
        }
        return toReturn;
    }
    CheckBoxSettingChanged(SettingKey, valueAsObj) {
        this.SetByKey(SettingKey, valueAsObj);
    }
    NumberSettingChanged(SettingKey, valueAsNumber) {
        this.Logger.Log(StaticHelpers_StaticHelpers.SettingKeyAsString(SettingKey));
        this.Logger.LogVal('valueAsNumber', valueAsNumber.toString());
        this.SetByKey(SettingKey, valueAsNumber);
    }
    GetByKey(needleSettingKey) {
        var toReturn = null;
        for (var idx = 0; idx < this.SettingsAr.length; idx++) {
            let candidate = this.SettingsAr[idx];
            if (candidate.SettingKey === needleSettingKey) {
                toReturn = candidate;
                break;
            }
        }
        if (!toReturn) {
            this.Logger.ErrorAndContinue(this.NumberSettingChanged.name, 'Setting not found ' + StaticHelpers_StaticHelpers.SettingKeyAsString(needleSettingKey));
        }
        return toReturn;
    }
    SetByKey(settingKey, value) {
        let foundSetting = this.GetByKey(settingKey);
        if (foundSetting) {
            foundSetting.ValueAsObj = value;
            this.WriteAllSettingValuesToStorage();
        }
        else {
            this.Logger.ErrorAndThrow(this.SetByKey.name, 'setting match not found');
        }
    }
    WriteAllSettingValuesToStorage() {
        let settingValues = [];
        for (var udx = 0; udx < this.SettingsAr.length; udx++) {
            if (this.SettingsAr[udx].ValueAsObj !== null) {
                settingValues.push({
                    SettingKey: this.SettingsAr[udx].SettingKey,
                    ValueAsObj: this.SettingsAr[udx].ValueAsObj,
                    SettingKeyFriendly: StaticHelpers_StaticHelpers.SettingKeyAsString(this.SettingsAr[udx].SettingKey)
                });
            }
        }
        this.RepoAgent.WriteByKey(PopConst.Const.Storage.KeyGenericSettings, JSON.stringify(settingValues));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/QueryStrKey.js
var QueryStrKey;
(function (QueryStrKey) {
    QueryStrKey[QueryStrKey["hsTargetSs"] = 0] = "hsTargetSs";
    QueryStrKey[QueryStrKey["sc_mode"] = 1] = "sc_mode";
    QueryStrKey[QueryStrKey["sc_itemid"] = 2] = "sc_itemid";
    QueryStrKey[QueryStrKey["sc_lang"] = 3] = "sc_lang";
    QueryStrKey[QueryStrKey["sc_site"] = 4] = "sc_site";
})(QueryStrKey || (QueryStrKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/scMode.js
var scMode;
(function (scMode) {
    scMode[scMode["Unknown"] = 0] = "Unknown";
    scMode[scMode["Edit"] = 1] = "Edit";
    scMode[scMode["Preview"] = 2] = "Preview";
    scMode[scMode["Normal"] = 3] = "Normal";
})(scMode || (scMode = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/UrlAgent/GenericUrlAgent.js
var GenericUrlAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class GenericUrlAgent_GenericUrlAgent {
    constructor(logger) {
        this.Logger = logger;
    }
    GetUrlParts() {
        return this.UrlParts;
    }
    QueryStringHasKey(key) {
        let toReturn = false;
        if (key !== null) {
            let keyAsStr = QueryStrKey[key];
            if (keyAsStr) {
                toReturn = this.UrlParts && this.UrlParts.Parameters && this.UrlParts.Parameters.has(keyAsStr);
            }
        }
        return toReturn;
    }
    GetQueryStringValueByKey(key) {
        let toReturn = '';
        if (this.QueryStringHasKey(key)) {
            let keyAsStr = QueryStrKey[key];
            toReturn = this.UrlParts.Parameters.get(keyAsStr);
        }
        return toReturn;
    }
    SetParameterValueByKey(key, newValue) {
        if (this.UrlParts) {
            this.UrlParts.Parameters.set(QueryStrKey[key], newValue);
        }
        else {
            this.Logger.ErrorAndThrow(this.SetParameterValueByKey.name, 'No URLParts ' + QueryStrKey[key] + ' ' + newValue);
        }
    }
    SetFilePath(newFilePath) {
        this.UrlParts.FilePath = newFilePath;
    }
    InitGenericUrlAgent() {
        return new Promise((resolve, reject) => GenericUrlAgent_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart(this.InitGenericUrlAgent.name);
                if (browser.tabs) {
                    yield browser.tabs.query({ currentWindow: true, active: true })
                        .then((result) => {
                        let resultTab = result[0];
                        this.SetFromHref(resultTab.url);
                        resolve();
                    })
                        .catch((err) => reject(err));
                }
                else {
                    this.Logger.Log('Init from window.location.href');
                    let urlToUse = window.location.href;
                    this.SetFromHref(urlToUse);
                }
                resolve();
            }
            catch (ex) {
                reject(ex);
            }
            this.Logger.FuncEnd(this.InitGenericUrlAgent.name);
        }));
    }
    SetFromHref(href) {
        var parser = document.createElement('a');
        parser.href = href;
        this.UrlParts = {
            OriginalRaw: href,
            Protocol: parser.protocol,
            HostAndPort: parser.host,
            Parameters: new URLSearchParams(window.location.search),
            FilePath: parser.pathname,
            Anchor: parser.hash,
            HasError: false,
        };
    }
    BuildFullUrlFromParts() {
        let toReturn = {
            AbsUrl: '',
        };
        if (this.UrlParts) {
            if (this.UrlParts && !this.UrlParts.HasError) {
                toReturn.AbsUrl = this.UrlParts.Protocol + '//' + this.UrlParts.HostAndPort;
                if (this.UrlParts.FilePath.length > 0) {
                    toReturn.AbsUrl += this.UrlParts.FilePath;
                }
                if (this.UrlParts.Parameters) {
                    toReturn.AbsUrl += '?' + this.UrlParts.Parameters.toString();
                }
                if (this.UrlParts.Anchor.length > 0) {
                    toReturn.AbsUrl += '#' + this.UrlParts.Anchor;
                }
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.BuildFullUrlFromParts.name, 'Null UrlParts');
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/UrlAgent/ScUrlAgent.js
var ScUrlAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class ScUrlAgent_ScUrlAgent extends GenericUrlAgent_GenericUrlAgent {
    constructor(logger) {
        super(logger);
    }
    __urlTestAgainstRegex(regexPattern, url) {
        return new RegExp(regexPattern).test(url);
    }
    InitScUrlAgent() {
        const _super = Object.create(null, {
            InitGenericUrlAgent: { get: () => super.InitGenericUrlAgent }
        });
        return ScUrlAgent_awaiter(this, void 0, void 0, function* () {
            try {
                yield _super.InitGenericUrlAgent.call(this);
            }
            catch (err) {
                this.Logger.ErrorAndThrow(this.InitScUrlAgent.name, err);
            }
        });
    }
    GetFullUrl() {
        return this.BuildFullUrlFromParts();
    }
    GetScWindowType() {
        var toReturn = ScWindowType.Unknown;
        let testPath = this.BuildFullUrlFromParts();
        if (testPath) {
            if (testPath.AbsUrl.indexOf(SharedConst.Const.UrlSuffix.Login) > -1) {
                toReturn = ScWindowType.LoginPage;
            }
            else if (new RegExp(SharedConst.Const.Regex.ContentEditor).test(testPath.AbsUrl)) {
                toReturn = ScWindowType.ContentEditor;
            }
            else if (testPath.AbsUrl.toLowerCase().indexOf(SharedConst.Const.UrlSuffix.LaunchPad.toLowerCase()) > -1) {
                toReturn = ScWindowType.Launchpad;
            }
            else if (this.__urlTestAgainstRegex(SharedConst.Const.Regex.PageType.Desktop, testPath.AbsUrl)) {
                toReturn = ScWindowType.Desktop;
            }
            else if (this.__urlTestAgainstRegex(SharedConst.Const.Regex.PageType.Preview, testPath.AbsUrl)) {
                toReturn = ScWindowType.Preview;
            }
            else if (this.__urlTestAgainstRegex(SharedConst.Const.Regex.PageType.Edit, testPath.AbsUrl)) {
                toReturn = ScWindowType.Edit;
            }
            else if (this.__urlTestAgainstRegex(SharedConst.Const.Regex.PageType.Normal, testPath.AbsUrl)) {
                toReturn = ScWindowType.Normal;
            }
            else {
                toReturn = ScWindowType.Unknown;
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.GetScWindowType.name, 'null url');
        }
        return toReturn;
    }
    BuildEditPrevNormUrl(newMode, contState) {
        this.UrlParts.Anchor = '';
        this.UrlParts.FilePath = '';
        this.SetParameterValueByKey(QueryStrKey.sc_mode, scMode[newMode]);
        this.SetParameterValueByKey(QueryStrKey.sc_lang, 'en');
        this.SetParameterValueByKey(QueryStrKey.sc_site, 'website');
    }
    SetScMode(newMode) {
        if (this.UrlParts && newMode) {
            if (this.UrlParts && this.UrlParts)
                this.SetParameterValueByKey(QueryStrKey.sc_mode, scMode[newMode]);
        }
    }
    SetFilePathFromWindowType(windowType = null) {
        if (!windowType) {
            windowType = ScWindowType.Unknown;
        }
        switch (windowType) {
            case ScWindowType.ContentEditor:
                this.SetFilePath(SharedConst.Const.UrlSuffix.CE);
                break;
            case ScWindowType.Desktop:
                this.SetFilePath(SharedConst.Const.UrlSuffix.Desktop);
                break;
            case ScWindowType.Edit:
                this.SetFilePath(SharedConst.Const.UrlSuffix.None);
                break;
            case ScWindowType.Preview:
                this.SetFilePath(SharedConst.Const.UrlSuffix.None);
                break;
            case ScWindowType.Normal:
                this.SetFilePath(SharedConst.Const.UrlSuffix.None);
                break;
            default:
                this.SetFilePath('');
                this.Logger.ErrorAndThrow(this.SetFilePathFromWindowType.name, 'unaccounted for window type');
                break;
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Drones/RollingLogIdDrone/RollingLogIdDrone.js

class RollingLogIdDrone_RollingLogIdDrone {
    constructor(settingsAgent, loggerAgent) {
        this.maxKey = 5;
        this.minKey = 1;
        this.Logger = loggerAgent;
        this.Logger.InstantiateStart(RollingLogIdDrone_RollingLogIdDrone.name);
        this.SettingsAgent = settingsAgent;
        this.Logger.FuncEnd(RollingLogIdDrone_RollingLogIdDrone.name);
    }
    GetNextLogId() {
        let nextKeyInt = this.minKey;
        let nextKeyToReturn;
        var result = this.GetLastUsedLogId().ValueAsInt();
        nextKeyInt = result + 1;
        if (nextKeyInt > this.maxKey) {
            nextKeyInt = this.minKey;
        }
        this.SettingsAgent.SetByKey(_3xxx_SettingKey_SettingKey.LastUsedLogToStorageKey, nextKeyInt.toString());
        nextKeyToReturn = nextKeyInt.toString();
        return nextKeyToReturn;
    }
    GetLastUsedLogId() {
        var lastUsedLogIdSetting = this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.LastUsedLogToStorageKey);
        return lastUsedLogIdSetting;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/2xxx-MenuCommand.js
var MenuCommand;
(function (MenuCommand) {
    MenuCommand[MenuCommand["Unknown"] = 0] = "Unknown";
    MenuCommand[MenuCommand["GoScModeEdit"] = 2001] = "GoScModeEdit";
    MenuCommand[MenuCommand["ToggleFavorite"] = 2002] = "ToggleFavorite";
    MenuCommand[MenuCommand["CloseWindow"] = 2003] = "CloseWindow";
    MenuCommand[MenuCommand["TakeSnapShot"] = 2004] = "TakeSnapShot";
    MenuCommand[MenuCommand["AddCeTab"] = 2005] = "AddCeTab";
    MenuCommand[MenuCommand["ScModeNormal"] = 2006] = "ScModeNormal";
    MenuCommand[MenuCommand["ScModePrev"] = 2007] = "ScModePrev";
    MenuCommand[MenuCommand["Cancel"] = 2008] = "Cancel";
    MenuCommand[MenuCommand["DrawStorage"] = 2009] = "DrawStorage";
    MenuCommand[MenuCommand["DrawStoragePopUpLogStorage"] = 2010] = "DrawStoragePopUpLogStorage";
    MenuCommand[MenuCommand["Remove"] = 2011] = "Remove";
    MenuCommand[MenuCommand["RestoreStateSameTab"] = 2012] = "RestoreStateSameTab";
    MenuCommand[MenuCommand["RestoreStateNewTab"] = 2013] = "RestoreStateNewTab";
    MenuCommand[MenuCommand["RestoreStateTBDTab"] = 2014] = "RestoreStateTBDTab";
    MenuCommand[MenuCommand["GoDesktop"] = 2015] = "GoDesktop";
    MenuCommand[MenuCommand["GoContentEditor"] = 2016] = "GoContentEditor";
    MenuCommand[MenuCommand["PutAdminB"] = 2017] = "PutAdminB";
    MenuCommand[MenuCommand["PresentationDetails"] = 2017] = "PresentationDetails";
    MenuCommand[MenuCommand["CompactCE"] = 2019] = "CompactCE";
    MenuCommand[MenuCommand["Ping"] = 2020] = "Ping";
    MenuCommand[MenuCommand["UpdateNickname"] = 2021] = "UpdateNickname";
    MenuCommand[MenuCommand["QuickPublish"] = 2022] = "QuickPublish";
})(MenuCommand || (MenuCommand = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/LoggableBase.js
class LoggableBase {
    constructor(logger) {
        this.Logger = logger;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/VisibilityType.js
var VisibilityType;
(function (VisibilityType) {
    VisibilityType[VisibilityType["Unknown"] = 0] = "Unknown";
    VisibilityType[VisibilityType["LoginPage"] = 1] = "LoginPage";
    VisibilityType[VisibilityType["Desktop"] = 2] = "Desktop";
    VisibilityType[VisibilityType["ContentEditor"] = 3] = "ContentEditor";
    VisibilityType[VisibilityType["Launchpad"] = 4] = "Launchpad";
    VisibilityType[VisibilityType["Edit"] = 5] = "Edit";
    VisibilityType[VisibilityType["Normal"] = 6] = "Normal";
    VisibilityType[VisibilityType["Preview"] = 7] = "Preview";
    VisibilityType[VisibilityType["SnapShotSelected"] = 8] = "SnapShotSelected";
    VisibilityType[VisibilityType["NotLogin"] = 9] = "NotLogin";
    VisibilityType[VisibilityType["CommandIsRunning"] = 10] = "CommandIsRunning";
    VisibilityType[VisibilityType["ActiveCeNode"] = 11] = "ActiveCeNode";
    VisibilityType[VisibilityType["SnapShotable"] = 12] = "SnapShotable";
})(VisibilityType || (VisibilityType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/CommandButtonEvents.js
var ModuleType;
(function (ModuleType) {
    ModuleType[ModuleType["Select"] = 0] = "Select";
    ModuleType[ModuleType["Button"] = 1] = "Button";
})(ModuleType || (ModuleType = {}));
var CommandButtonEvents;
(function (CommandButtonEvents) {
    CommandButtonEvents[CommandButtonEvents["OnSingleClick"] = 0] = "OnSingleClick";
    CommandButtonEvents[CommandButtonEvents["OnDoubleClick"] = 1] = "OnDoubleClick";
})(CommandButtonEvents || (CommandButtonEvents = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Classes/AllCommands.js






class AllCommands_CommandManager extends LoggableBase {
    constructor(logger, handlers) {
        super(logger);
        this.Handlers = handlers;
        this.AllMenuCommands = AllCommands_CommandManager.BuildAllCommands(this.Handlers);
    }
    GetCommandById(needleCommand) {
        let toReturn = null;
        for (var idx = 0; idx < this.AllMenuCommands.length; idx++) {
            let candidate = this.AllMenuCommands[idx];
            if (candidate.Command === needleCommand) {
                toReturn = candidate;
                break;
            }
        }
        return toReturn;
    }
    static BuildAllCommands(handlers) {
        let toReturn = [
            {
                Command: MenuCommand.CloseWindow,
                PlaceHolderSelector: PopConst.Const.Selector.Btn.WindowClose,
                IconClassName: PopConst.Const.ClassNames.HS.Buttons.CloseWindow,
                InnerText: "",
                VisibilityControllers: [],
                ModuleType: ModuleType.Button,
                EventData: {
                    Handler: handlers.Internal.CloseWindow,
                    Event: CommandButtonEvents.OnSingleClick,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.AddCeTab,
                PlaceHolderSelector: PopConst.Const.Selector.HS.BigRed,
                IconClassName: PopConst.Const.ClassNames.HS.Buttons.AddCeTab,
                InnerText: "Add CE Tab to DT",
                VisibilityControllers: [VisibilityType.Desktop],
                ModuleType: ModuleType.Button,
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: handlers.External.AddCETab,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.GoScModeEdit,
                PlaceHolderSelector: PopConst.Const.Selector.HS.ModeEdit,
                IconClassName: PopConst.Const.ClassNames.HS.Buttons.ScModeEdit,
                InnerText: "Edit",
                VisibilityControllers: [VisibilityType.ActiveCeNode],
                ModuleType: ModuleType.Button,
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: handlers.Internal.SetScModeInternal,
                    ParameterData: [scMode.Edit],
                }
            },
            {
                Command: MenuCommand.ScModeNormal,
                PlaceHolderSelector: PopConst.Const.Selector.HS.ModeNorm,
                IconClassName: PopConst.Const.ClassNames.HS.Buttons.ScModeNormal,
                InnerText: "Normal",
                VisibilityControllers: [VisibilityType.ActiveCeNode],
                ModuleType: ModuleType.Button,
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: handlers.Internal.SetScModeInternal,
                    ParameterData: [scMode.Normal],
                }
            },
            {
                Command: MenuCommand.ScModePrev,
                PlaceHolderSelector: PopConst.Const.Selector.HS.ModePrev,
                IconClassName: PopConst.Const.ClassNames.HS.Buttons.ScModePrev,
                InnerText: "Preview",
                VisibilityControllers: [VisibilityType.ActiveCeNode, VisibilityType.Edit],
                ModuleType: ModuleType.Button,
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: handlers.Internal.SetScModeInternal,
                    ParameterData: [scMode.Preview],
                }
            },
            {
                Command: MenuCommand.UpdateNickname,
                PlaceHolderSelector: PopConst.Const.Selector.HS.UpdateNicknameB,
                IconClassName: PopConst.Const.ClassNames.HS.Buttons.UpdateNickname,
                InnerText: "Set Nickname",
                VisibilityControllers: [VisibilityType.SnapShotSelected],
                ModuleType: ModuleType.Button,
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: handlers.External.HndlrSnapShotUpdateNickName,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.PresentationDetails,
                PlaceHolderSelector: PopConst.Const.Selector.HS.PresentationDetails,
                IconClassName: PopConst.Const.ClassNames.HS.Buttons.PresentationDetails,
                InnerText: "Presentation Details",
                VisibilityControllers: [VisibilityType.ActiveCeNode],
                ModuleType: ModuleType.Button,
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: handlers.External.HndlrPresentationDetails,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.CompactCE,
                PlaceHolderSelector: PopConst.Const.Selector.HS.CompactCE,
                IconClassName: PopConst.Const.ClassNames.HS.Buttons.CompactCe,
                InnerText: "Compact CE",
                VisibilityControllers: [VisibilityType.ActiveCeNode],
                ModuleType: ModuleType.Button,
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: handlers.External.HndlrCompactCE,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.PutAdminB,
                PlaceHolderSelector: PopConst.Const.Selector.HS.AdminB,
                IconClassName: PopConst.Const.ClassNames.HS.Buttons.AdminB,
                InnerText: "Admin B",
                VisibilityControllers: [VisibilityType.LoginPage],
                ModuleType: ModuleType.Button,
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: handlers.External.PutAdminB,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.GoContentEditor,
                PlaceHolderSelector: PopConst.Const.Selector.HS.GoCE,
                IconClassName: PopConst.Const.ClassNames.HS.Buttons.GoContentEditor,
                InnerText: "Content Editor",
                VisibilityControllers: [VisibilityType.NotLogin],
                ModuleType: ModuleType.Button,
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: handlers.Internal.GoCeInternal,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.QuickPublish,
                PlaceHolderSelector: PopConst.Const.Selector.HS.QuickPublish,
                IconClassName: PopConst.Const.ClassNames.HS.Buttons.QuickPublish,
                InnerText: "Quick Publish",
                VisibilityControllers: [VisibilityType.ActiveCeNode],
                ModuleType: ModuleType.Button,
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: handlers.External.QuickPublish,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.GoDesktop,
                PlaceHolderSelector: PopConst.Const.Selector.HS.Desktop,
                IconClassName: PopConst.Const.ClassNames.HS.Buttons.GoDesktop,
                InnerText: "Desktop",
                VisibilityControllers: [VisibilityType.NotLogin],
                ModuleType: ModuleType.Button,
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: handlers.Internal.GoDesktopInternal,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.Ping,
                PlaceHolderSelector: null,
                IconClassName: PopConst.Const.ClassNames.HS.Buttons.Ping,
                InnerText: "",
                VisibilityControllers: [],
                ModuleType: ModuleType.Button,
                EventData: {
                    Event: null,
                    Handler: handlers.External.HndlrPing,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.TakeSnapShot,
                PlaceHolderSelector: PopConst.Const.Selector.HS.TakeSnapshot,
                IconClassName: PopConst.Const.ClassNames.HS.Buttons.TakeSnapShot,
                InnerText: "Take Snapshot",
                VisibilityControllers: [VisibilityType.SnapShotable],
                ModuleType: ModuleType.Button,
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: handlers.External.HndlrSnapShotCreate,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.ToggleFavorite,
                PlaceHolderSelector: PopConst.Const.Selector.HS.ToggleFavorite,
                IconClassName: PopConst.Const.ClassNames.HS.Buttons.ToggleFavorite,
                InnerText: "Toggle as Favorite",
                VisibilityControllers: [VisibilityType.SnapShotSelected],
                ModuleType: ModuleType.Button,
                EventData: {
                    Handler: handlers.External.ToggleFavorite,
                    Event: CommandButtonEvents.OnSingleClick,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.Cancel,
                PlaceHolderSelector: PopConst.Const.Selector.HS.HsCancel,
                IconClassName: PopConst.Const.ClassNames.HS.Buttons.Cancel,
                InnerText: "Cancel",
                VisibilityControllers: [VisibilityType.CommandIsRunning],
                ModuleType: ModuleType.Button,
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: handlers.External.__hndlrCancelOperation,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.Remove,
                PlaceHolderSelector: PopConst.Const.Selector.HS.HsRemoveFromStorage,
                IconClassName: PopConst.Const.ClassNames.HS.Buttons.RemoveFromStorage,
                InnerText: "Delete Snapshot",
                VisibilityControllers: [VisibilityType.SnapShotSelected],
                ModuleType: ModuleType.Button,
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: handlers.External.HndlrSnapShotRemove,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.RestoreStateTBDTab,
                PlaceHolderSelector: PopConst.Const.Selector.HS.SelStateSnapShot,
                IconClassName: PopConst.Const.ClassNames.HS.Buttons.RestoreStateTBD,
                VisibilityControllers: [],
                InnerText: "Restore to TBD",
                ModuleType: ModuleType.Select,
                EventData: {
                    Event: CommandButtonEvents.OnDoubleClick,
                    Handler: handlers.External.HndlrSnapShotRestoreTBDTab,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.RestoreStateSameTab,
                PlaceHolderSelector: PopConst.Const.Selector.HS.HsRestoreWindowStateSameTab,
                VisibilityControllers: [VisibilityType.SnapShotSelected],
                IconClassName: PopConst.Const.ClassNames.HS.Buttons.RestoreSameTab,
                InnerText: "Restore to this tab",
                ModuleType: ModuleType.Button,
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: handlers.External.HndlrSnapShotRestoreSameTab,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.RestoreStateNewTab,
                PlaceHolderSelector: PopConst.Const.Selector.HS.HsRestoreWindowStateNewTab,
                VisibilityControllers: [VisibilityType.SnapShotSelected],
                IconClassName: PopConst.Const.ClassNames.HS.Buttons.RestoreNewTab,
                InnerText: "Restore to new tab",
                ModuleType: ModuleType.Button,
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: handlers.External.HndlrSnapShotRestoreNewTab,
                    ParameterData: [],
                }
            },
        ];
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/EventManager.js
var EventManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class EventManager_EventManager extends LoggableBase {
    constructor(logger, settingsAgent, uiMan, handlers) {
        super(logger);
        this.SettingsAgent = settingsAgent;
        this.UiMan = uiMan;
        this.Handlers = handlers;
    }
    InitEventManager(allCommands) {
        this.Logger.FuncStart(this.InitEventManager.name);
        try {
            this.__wireAllMenuButtons(allCommands);
            this.WireUiToSettings();
        }
        catch (err) {
            this.Logger.ErrorAndThrow(this.InitEventManager.name, err);
        }
        this.Logger.FuncEnd(this.InitEventManager.name);
    }
    TriggerPingEventAsync(pingCommand) {
        return EventManager_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.TriggerPingEventAsync.name);
            let data = this.BuildCommandData(pingCommand);
            this.RouteAllCommandEvents(data);
            this.Logger.FuncEnd(this.TriggerPingEventAsync.name);
        });
    }
    SetLabel(uiElem, oneSetting) {
        let uiLabel = window.document.querySelector(oneSetting.UiSelector.replace('id', 'for'));
        if (uiLabel) {
            uiLabel.innerHTML = oneSetting.FriendlySetting;
        }
        else {
            uiElem.innerHTML = oneSetting.FriendlySetting;
        }
    }
    WireUiToSettings() {
        this.Logger.FuncStart(this.WireUiToSettings.name);
        let genericSettings = this.SettingsAgent.GetAllSettings();
        for (var idx = 0; idx < genericSettings.length; idx++) {
            let oneSetting = genericSettings[idx];
            if (oneSetting.HasUi) {
                let uiElem = window.document.querySelector(oneSetting.UiSelector);
                if (uiElem) {
                    this.SetLabel(uiElem, oneSetting);
                    if (oneSetting.DataType === SettingType.BoolCheckBox) {
                        let self = this;
                        uiElem.addEventListener('change', (evt) => {
                            self.SettingsAgent.CheckBoxSettingChanged(oneSetting.SettingKey, evt.target.checked);
                        });
                    }
                    else if (oneSetting.DataType === SettingType.Accordion) {
                        this.UiMan.AccordianManager.AddAccordianDrone(oneSetting, uiElem);
                    }
                    else if (oneSetting.DataType == SettingType.Number) {
                        let self = this;
                        uiElem.addEventListener('change', (evt) => {
                            self.SettingsAgent.NumberSettingChanged(oneSetting.SettingKey, parseInt(evt.target.value));
                        });
                    }
                }
                else {
                    this.Logger.ErrorAndThrow(this.WireUiToSettings.name, 'ui generic element not found');
                }
            }
        }
        this.Logger.FuncEnd(this.WireUiToSettings.name);
    }
    __wireAllMenuButtons(allCommands) {
        this.Logger.FuncStart(this.__wireAllMenuButtons.name);
        for (var idx = 0; idx < allCommands.length; idx++) {
            let oneCommand = allCommands[idx];
            this.__wireOneMenuButtonListener(oneCommand);
        }
        this.Logger.FuncEnd(this.__wireAllMenuButtons.name);
    }
    __wireOneMenuButtonListener(oneCommand) {
        var targetElem = this.UiMan.GetButtonByIdOrSelector(oneCommand.PlaceHolderSelector);
        if (oneCommand.EventData.Event === CommandButtonEvents.OnSingleClick) {
            this.WireSingleClickEvent(oneCommand, targetElem);
        }
        else if (oneCommand.EventData.Event === CommandButtonEvents.OnDoubleClick) {
            this.__wireDoubleClickEvent(oneCommand, targetElem);
        }
    }
    __wireDoubleClickEvent(oneCommand, targetElem) {
        if (targetElem) {
            targetElem.ondblclick = (evt) => {
                let data = this.BuildCommandData(oneCommand);
                data.Evt = evt,
                    data.EventMan.RouteAllCommandEvents(data);
            };
        }
    }
    WireSingleClickEvent(oneCommand, targetElem) {
        if (targetElem) {
            let self = this;
            targetElem.addEventListener('click', (evt) => {
                let data = this.BuildCommandData(oneCommand);
                data.Evt = evt;
                data.EventMan = self;
                data.EventMan.RouteAllCommandEvents(data);
            });
        }
        else {
            this.Logger.ErrorAndThrow(this.WireSingleClickEvent.name, 'No Id: ' + oneCommand.PlaceHolderSelector);
        }
    }
    BuildCommandData(oneCommand) {
        var self = this;
        let data = {
            EventMan: self,
            Command: oneCommand,
            Event: oneCommand.EventData,
            Evt: null,
            MenuState: {
                SelectSnapshotId: this.UiMan.ModuleSnapShots.GetSelectSnapshotId(),
                CurrentNicknameValue: this.UiMan.GetValueInNickname()
            }
        };
        return data;
    }
    RouteAllCommandEvents(data) {
        return EventManager_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => EventManager_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.RouteAllCommandEvents.name);
                yield data.Event.Handler(data)
                    .then(() => resolve())
                    .catch((err) => reject(this.RouteAllCommandEvents.name + ' | ' + err));
                this.Logger.FuncEnd(this.RouteAllCommandEvents.name);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/MsgFromXBase.js

class MsgFromXBase_MsgFromXBase {
    constructor(msgFlag) {
        this.MsgFlag = MsgFlag.Unknown;
        this.MsgFlag = msgFlag;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/PayloadDataReqPopUp.js
class PayloadDataFromPopUp {
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/MsgFromPopUp.js



class MsgFromPopUp_MsgFromPopUp extends MsgFromXBase_MsgFromXBase {
    constructor(msgFlag, scWindowType, selectSnapshotId, contentPrefs) {
        super(msgFlag);
        this.Payload = new PayloadDataFromPopUp();
        this.Payload.IdOfSelect = selectSnapshotId;
        this.Payload.SnapShotSettings = {
            SnapShotNewNickname: '',
            Flavor: SnapShotFlavor.Unknown,
            CurrentPageType: scWindowType
        };
        this.CurrentContentPrefs = contentPrefs;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/Desktop/DesktopProxy/Events/_HindSiteEvent/HindeSiteEvent_Subject.js

class HindeSiteEvent_Subject_HindeSiteEvent_Subject extends LoggableBase {
    constructor(logger, friendly) {
        super(logger);
        this.ObserverCollection = [];
        this.Friendly_Subject = friendly;
        this.Logger.InstantiateStart(this.Friendly_Subject);
        this.Logger.InstantiateEnd(this.Friendly_Subject);
    }
    HasObservers() {
        return this.ObserverCollection && this.ObserverCollection.length > 0;
    }
    RegisterObserver(observer) {
        this.Logger.FuncStart(this.RegisterObserver.name);
        if (observer) {
            this.Logger.Log(observer.Friendly + ' to ' + this.Friendly_Subject);
            if (this.ObserverCollection.indexOf(observer) < 0) {
                this.ObserverCollection.push(observer);
            }
            else {
                this.Logger.WarningAndContinue(this.RegisterObserver.name, 'Observer already registered');
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.RegisterObserver.name, 'Observer is null');
        }
        this.Logger.FuncEnd(this.RegisterObserver.name);
    }
    UnregisterObserver(observer) {
        this.Logger.FuncStart(this.UnregisterObserver.name);
        if (observer) {
            let observerIndex = this.ObserverCollection.indexOf(observer);
            if (observerIndex > -1) {
                this.ObserverCollection.splice(observerIndex, 1);
            }
        }
        this.Logger.FuncEnd(this.UnregisterObserver.name);
    }
    NotifyObservers(payload) {
        this.Logger.FuncStart(this.NotifyObservers.name + ' of: ' + this.Friendly_Subject, ' observer count: ' + this.ObserverCollection.length);
        this.ObserverCollection.forEach((observer) => {
            observer.UpdateAsync(payload);
        });
        this.Logger.FuncEnd(this.NotifyObservers.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/Desktop/DesktopProxy/Events/ContentReplyReceivedEvent/ContentReplyReceivedEvent_Subject.js

class ContentReplyReceivedEvent_Subject_ContentReplyReceivedEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(logger) {
        super(logger, ContentReplyReceivedEvent_Subject_ContentReplyReceivedEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Classes/HandlersExternal.js
var HandlersExternal_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class HandlersExternal_HandlersExternalEvent extends LoggableBase {
    constructor(logger, settingsAgent, browserTabAgent, popUpMessagesBroker) {
        super(logger);
        this.SettingsAgent = settingsAgent;
        this.ValidMessageRecievedEvent = new ContentReplyReceivedEvent_Subject_ContentReplyReceivedEvent_Subject(this.Logger);
        this.BrowserTabAgent = browserTabAgent;
        this.MessageBroker = popUpMessagesBroker;
    }
    __cleardebugText() {
        this.Logger.HndlrClearDebugText(this.Logger);
    }
    BuildNewMsgFromPopUp(msgFlag, data) {
        this.Logger.FuncStart(this.BuildNewMsgFromPopUp.name);
        let settingsToSend = this.SettingsAgent.GetSettingsByFlavor([SettingFlavor.ContentAndPopUpStoredInPopUp, SettingFlavor.ContentOnly]);
        var msg = new MsgFromPopUp_MsgFromPopUp(msgFlag, this.BrowserTabAgent.GetWindowType(), data.MenuState.SelectSnapshotId, settingsToSend);
        this.Logger.FuncEnd(this.BuildNewMsgFromPopUp.name);
        return msg;
    }
    SendMessageToContentAsync(msgPayload) {
        return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
            this.MessageBroker.SendMessageToContentAsync(msgPayload)
                .then((result) => resolve(result))
                .catch((err) => reject(err));
        }));
    }
    SendCommandToContent(sendMsgPlayload) {
        return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.SendCommandToContent.name);
            this.__cleardebugText();
            this.SendMessageToContentAsync(sendMsgPlayload)
                .then((replyMessagePayload) => this.ValidMessageRecievedEvent.NotifyObservers(replyMessagePayload))
                .then(() => resolve())
                .catch((err) => reject(err));
            this.Logger.FuncEnd(this.SendCommandToContent.name);
        }));
    }
    AddCETab(data) {
        return HandlersExternal_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
                let msg = data.EventMan.Handlers.External.BuildNewMsgFromPopUp(MsgFlag.ReqAddCETab, data);
                yield data.EventMan.Handlers.External.SendCommandToContent(msg)
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }));
        });
    }
    PutAdminB(data) {
        return HandlersExternal_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
                let msg = data.EventMan.Handlers.External.BuildNewMsgFromPopUp(MsgFlag.ReqAdminB, data);
                yield data.EventMan.Handlers.External.SendCommandToContent(msg)
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }));
        });
    }
    QuickPublish(data) {
        return HandlersExternal_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
                let msg = data.EventMan.Handlers.External.BuildNewMsgFromPopUp(MsgFlag.ReqQuickPublish, data);
                yield data.EventMan.Handlers.External.SendCommandToContent(msg)
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }));
        });
    }
    HndlrSnapShotCreate(data) {
        return HandlersExternal_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
                let msg = data.EventMan.Handlers.External.BuildNewMsgFromPopUp(MsgFlag.ReqTakeSnapShot, data);
                yield data.EventMan.Handlers.External.SendCommandToContent(msg)
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }));
        });
    }
    HndlrSnapShotRestoreTBDTab(data) {
        return HandlersExternal_awaiter(this, void 0, void 0, function* () {
            data.EventMan.Handlers.External.Logger.FuncStart(data.EventMan.Handlers.External.HndlrSnapShotRestoreTBDTab.name);
            try {
                if (!data.Evt.ctrlKey) {
                    yield data.EventMan.Handlers.External.HndlrSnapShotRestoreSameTab(data);
                }
                else {
                    yield data.EventMan.Handlers.External.HndlrSnapShotRestoreNewTab(data);
                }
            }
            catch (err) {
                throw (err);
            }
            data.EventMan.Handlers.External.Logger.FuncEnd(data.EventMan.Handlers.External.HndlrSnapShotRestoreTBDTab.name);
        });
    }
    HndlrPing(data) {
        return HandlersExternal_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
                let msg = data.EventMan.Handlers.External.BuildNewMsgFromPopUp(MsgFlag.Ping, data);
                yield data.EventMan.Handlers.External.SendCommandToContent(msg)
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }));
        });
    }
    HndlrSnapShotRestoreSameTab(data) {
        return HandlersExternal_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
                data.EventMan.Handlers.External.Logger.FuncStart(data.EventMan.Handlers.External.HndlrSnapShotRestoreSameTab.name);
                var msg = data.EventMan.Handlers.External.BuildNewMsgFromPopUp(MsgFlag.ReqSetStateOfSitecoreWindow, data);
                msg.Payload.IdOfSelect = data.MenuState.SelectSnapshotId;
                yield data.EventMan.Handlers.External.SendCommandToContent(msg)
                    .then(() => resolve())
                    .catch((ex) => reject(ex));
                data.EventMan.Handlers.External.Logger.FuncEnd(data.EventMan.Handlers.External.HndlrSnapShotRestoreSameTab.name);
            }));
        });
    }
    HndlrSnapShotRestoreNewTab(data) {
        return HandlersExternal_awaiter(this, void 0, void 0, function* () {
            data.EventMan.Handlers.External.Logger.FuncStart(data.EventMan.Handlers.External.HndlrSnapShotRestoreNewTab.name);
            data.EventMan.Handlers.External.BrowserTabAgent.SetQueryStringKeyValue(QueryStrKey.hsTargetSs, data.MenuState.SelectSnapshotId.Raw);
            let newUrl = data.EventMan.Handlers.External.BrowserTabAgent.GetFullUrl();
            yield data.EventMan.Handlers.External.CreateNewWindow(data, newUrl)
                .catch((ex) => {
                data.EventMan.Handlers.External.Logger.ErrorAndThrow(data.EventMan.Handlers.External.HndlrSnapShotRestoreSameTab.name, ex.toString());
            });
            data.EventMan.Handlers.External.Logger.FuncEnd(this.HndlrSnapShotRestoreNewTab.name);
        });
    }
    HndlrSnapShotUpdateNickName(data) {
        return HandlersExternal_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
                let msg = data.EventMan.Handlers.External.BuildNewMsgFromPopUp(MsgFlag.ReqUpdateNickName, data);
                msg.Payload.SnapShotSettings.SnapShotNewNickname = data.MenuState.CurrentNicknameValue;
                yield data.EventMan.Handlers.External.SendCommandToContent(msg)
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }));
        });
    }
    __hndlrCancelOperation(data) {
    }
    ToggleFavorite(data) {
        return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
            var msg = data.EventMan.Handlers.External.BuildNewMsgFromPopUp(MsgFlag.ReqMarkFavorite, data);
            yield data.EventMan.Handlers.External.SendCommandToContent(msg)
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    HndlrSnapShotRemove(data) {
        return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
            let msg = data.EventMan.Handlers.External.BuildNewMsgFromPopUp(MsgFlag.ReqRemoveFromStorage, data);
            var result = confirm('Remove ?: ' + Guid_Guid.AsShort(msg.Payload.IdOfSelect));
            if (result === true) {
                yield data.EventMan.Handlers.External.SendCommandToContent(msg)
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }
            else {
                reject('Canceled');
            }
        }));
    }
    HndlrCompactCE(data) {
        return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
            let msg = data.EventMan.Handlers.External.BuildNewMsgFromPopUp(MsgFlag.ReqToggleCompactCss, data);
            msg.Payload.SnapShotSettings.SnapShotNewNickname = data.MenuState.CurrentNicknameValue;
            yield data.EventMan.Handlers.External.SendCommandToContent(msg)
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    CreateNewWindow(data, tabUrl) {
        return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.CreateNewWindow.name);
            yield this.BrowserTabAgent.CreateNewTab(tabUrl)
                .then(() => resolve())
                .catch((err) => reject(err));
            this.Logger.FuncEnd(this.CreateNewWindow.name);
        }));
    }
    HndlrPresentationDetails(data) {
        this.Logger.ErrorAndThrow(this.HndlrPresentationDetails.name, 'to do');
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Classes/HandlersInternal.js
var HandlersInternal_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class HandlersInternal_HandlersInternal {
    constructor(logger, tabMan) {
        this.Logger = logger;
        this.TabMan = tabMan;
    }
    __cleardebugTextWithConfirm(evt) {
        this.Logger.HndlrClearDebugText(this.Logger, true);
    }
    GenericSettingChanged() {
    }
    CloseWindow(evt) {
        window.close();
    }
    GoCeInternal(evt) {
        return HandlersInternal_awaiter(this, void 0, void 0, function* () {
            this.TabMan.ChangeLocationSwitchBoard(ScWindowType.ContentEditor);
        });
    }
    GoDesktopInternal(evt) {
        this.TabMan.ChangeLocationSwitchBoard(ScWindowType.Desktop);
    }
    SetScModeInternal(data) {
        return HandlersInternal_awaiter(this, void 0, void 0, function* () {
            try {
            }
            catch (err) {
                throw (err);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/Handlers.js



class Handlers_Handlers extends LoggableBase {
    constructor(logger, settingsAgent, browserTabAgent, popUpMessagesBroker) {
        super(logger);
        this.External = new HandlersExternal_HandlersExternalEvent(logger, settingsAgent, browserTabAgent, popUpMessagesBroker);
        this.Internal = new HandlersInternal_HandlersInternal(logger, browserTabAgent);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfDesktop.js
class DefaultStateOfDesktop {
    constructor() {
        this.IndexOfActiveFrame = -1;
        this.StateOfFrames = [];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfContentEditor.js
class DefaultStateOfContentEditor {
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfSitecoreWindow.js






class DefaultStateOfSitecoreWindow_DefaultFriendly {
    constructor() {
        this.Flavor = SnapShotFlavor[SnapShotFlavor.Unknown];
        this.NickName = '';
        this.TimeStamp = '';
        this.WindowType = ScWindowType[ScWindowType.Unknown];
    }
}
class DefaultStateOfSitecoreWindow_DefaultMetaData {
    constructor() {
        this.Flavor = SnapShotFlavor.Unknown;
        this.SessionId = '';
        this.SnapshotId = Guid_Guid.NewRandomGuid();
        this.StorageKey = '';
        this.TimeStamp = null;
        this.WindowType = ScWindowType.Unknown;
    }
}
class DefaultStateOfSitecoreWindow_DefaultStates {
    constructor() {
        this.StateOfContentEditor = new DefaultStateOfContentEditor;
        this.StateOfDesktop = new DefaultStateOfDesktop();
    }
}
class DefaultStateOfSitecoreWindow_DefaultStateOfSitecoreWindow {
    constructor() {
        this.Friendly = new DefaultStateOfSitecoreWindow_DefaultFriendly();
        this.Meta = new DefaultStateOfSitecoreWindow_DefaultMetaData();
        this.States = new DefaultStateOfSitecoreWindow_DefaultStates();
        this.Meta.TimeStamp = new Date();
        this.Friendly.TimeStamp = StaticHelpers_StaticHelpers.MakeFriendlyDate(this.Meta.TimeStamp);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfSnapshots.js
class DefaultStateOfSnapshotStorage {
    constructor() {
        this.CreationDate = new Date(1970);
        this.SnapShots = [];
        this.FavoriteCount = 0;
        this.PlainCount = 0;
        this.SnapShotsAutoCount = 0;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultScWindowState.js



class DefaultScWindowState_DefaultContentReplyPayload {
    constructor() {
        this.ErrorStack = [];
        this.LastReq = MsgFlag.Unknown;
        this.LastReqSuccessful = false;
        this.StateOfSitecoreWindow = new DefaultStateOfSitecoreWindow_DefaultStateOfSitecoreWindow();
        this.StateOfStorageSnapShots = new DefaultStateOfSnapshotStorage();
    }
}
;

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/MsgPayloadResponseFromContent.js


class MsgPayloadResponseFromContent_MsgFromContent extends MsgFromXBase_MsgFromXBase {
    constructor(msgFlag) {
        super(msgFlag);
        this.Payload = new DefaultScWindowState_DefaultContentReplyPayload();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfTree.js
class DefaultStateOfTree {
    constructor() {
        this.ActiveTreeNodeIndex = -1;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/ScWindowStateValidator.js







class ScWindowStateValidator_ScWindowStateValidator extends LoggableBase {
    ValidatePayload(payload) {
        this.Logger.FuncStart(this.ValidatePayload.name);
        var defaultVal = new DefaultScWindowState_DefaultContentReplyPayload();
        if (!payload) {
            payload = defaultVal;
            this.Logger.ErrorAndContinue(this.ValidatePayload.name, 'Null contentState');
        }
        payload.StateOfSitecoreWindow = this.ValidateStateOfSitecoreWindow(payload.StateOfSitecoreWindow);
        payload.StateOfStorageSnapShots = this.ValidateStateOfSnapshots(payload.StateOfStorageSnapShots);
        if (!payload.ErrorStack) {
            payload.ErrorStack = defaultVal.ErrorStack;
        }
        this.Logger.FuncEnd(this.ValidatePayload.name);
        return payload;
    }
    ValidateStateOfSnapshots(stateOfSnapShots) {
        if (!stateOfSnapShots) {
            stateOfSnapShots = new DefaultStateOfSnapshotStorage();
        }
        return stateOfSnapShots;
    }
    ValidateStateOfSitecoreWindow(StateOfSitecoreWindow) {
        if (!StateOfSitecoreWindow) {
            StateOfSitecoreWindow = new DefaultStateOfSitecoreWindow_DefaultStateOfSitecoreWindow();
        }
        StateOfSitecoreWindow.States.StateOfDesktop = this.ValidateStateOfDesktop(StateOfSitecoreWindow.States.StateOfDesktop);
        StateOfSitecoreWindow.States.StateOfContentEditor = this.ValidateStateOfContentEditor(StateOfSitecoreWindow.States.StateOfContentEditor);
        return StateOfSitecoreWindow;
    }
    ValidateStateOfContentEditor(StateOfContentEditor) {
        if (!StateOfContentEditor) {
            StateOfContentEditor = new DefaultStateOfContentEditor();
        }
        if (!StateOfContentEditor.StateOfTree) {
            StateOfContentEditor.StateOfTree = new DefaultStateOfTree();
        }
        return StateOfContentEditor;
    }
    ValidateStateOfDesktop(StateOfDesktop) {
        if (!StateOfDesktop) {
            StateOfDesktop = new DefaultStateOfDesktop();
        }
        if (StateOfDesktop.IndexOfActiveFrame === null) {
            StateOfDesktop.IndexOfActiveFrame = -1;
        }
        if (!StateOfDesktop.StateOfFrames) {
            StateOfDesktop.StateOfFrames = [];
        }
        return StateOfDesktop;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/PopUpMessagesBroker/PopUpMessagesBroker.js
var PopUpMessagesBroker_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class PopUpMessagesBroker_PopUpMessagesBroker {
    constructor(loggerAgent) {
        this.Logger = loggerAgent;
    }
    ReceiveResponseHndlr(response) {
        return new Promise((resolve, reject) => {
            this.Logger.FuncStart(this.ReceiveResponseHndlr.name);
            if (response) {
                StaticHelpers_StaticHelpers.MsgFlagAsString(response.MsgFlag);
                if (response) {
                    var asMsgFromContent = response;
                    if (asMsgFromContent) {
                        switch (response.MsgFlag) {
                            case MsgFlag.RespCurState:
                                break;
                            case MsgFlag.RespTaskSuccessful:
                                resolve(asMsgFromContent.Payload);
                                break;
                            case MsgFlag.RespTaskFailed:
                                reject(StaticHelpers_StaticHelpers.MsgFlagAsString(asMsgFromContent.MsgFlag));
                                break;
                            default:
                                reject('Unrecognized MsgFlag' + StaticHelpers_StaticHelpers.MsgFlagAsString(response.MsgFlag));
                                break;
                        }
                    }
                    else {
                        reject(this.ReceiveResponseHndlr.name + ' response is not class: ' + MsgPayloadResponseFromContent_MsgFromContent.name);
                    }
                }
            }
            else {
                reject(this.ReceiveResponseHndlr.name + ' null or undefined response');
            }
            this.Logger.FuncEnd(this.ReceiveResponseHndlr.name);
        });
    }
    SendMessageToSingleTab(messageToSend) {
        return new Promise((resolve, reject) => PopUpMessagesBroker_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.SendMessageToSingleTab.name, StaticHelpers_StaticHelpers.MsgFlagAsString(messageToSend.MsgFlag));
            let targetTab;
            yield browser.tabs.query({ currentWindow: true, active: true })
                .then((result) => { targetTab = result[0]; })
                .catch((err) => reject(err));
            this.Logger.LogVal('Tab Id', targetTab.id);
            yield browser.tabs.sendMessage(targetTab.id, messageToSend)
                .then((response) => this.ReceiveResponseHndlr(response))
                .then((scWindowState) => {
                let validator = new ScWindowStateValidator_ScWindowStateValidator(this.Logger);
                let validatedPayload = validator.ValidatePayload(scWindowState);
                resolve(validatedPayload);
            })
                .catch((ex) => { reject(ex); });
            this.Logger.FuncEnd(this.SendMessageToSingleTab.name, StaticHelpers_StaticHelpers.MsgFlagAsString(messageToSend.MsgFlag));
        }));
    }
    SendMessageToContentAsync(msgPlayload) {
        return PopUpMessagesBroker_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => PopUpMessagesBroker_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.SendMessageToContentAsync.name, StaticHelpers_StaticHelpers.MsgFlagAsString(msgPlayload.MsgFlag));
                this.SendMessageToSingleTab(msgPlayload)
                    .then((result) => resolve(result))
                    .catch((err) => reject(err));
                this.Logger.FuncEnd(this.SendMessageToContentAsync.name, StaticHelpers_StaticHelpers.MsgFlagAsString(msgPlayload.MsgFlag));
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Drones/IterationDrone/IterationDrone.js

class IterationDrone_IterationDrone {
    constructor(logger, nickname, maxIterations = null) {
        this.IsExhaustedMsg = 'Iteration helper exhausted';
        this.Logger = logger;
        if (!maxIterations) {
            maxIterations = SharedConst.Const.IterHelper.MaxCount.Default;
        }
        this.__maxIterations = maxIterations;
        this.__currentIteration = maxIterations;
        this.__timeout = SharedConst.Const.IterHelper.Timeouts.Default;
        this.__nickName = nickname;
        this.IsExhausted = false;
    }
    DecrementAndKeepGoing() {
        var toReturn = false;
        if (this.__currentIteration > 0) {
            this.__currentIteration -= 1;
            this.__timeout += this.__timeout * SharedConst.Const.IterHelper.GrowthPerIteration;
            if (this.__timeout > SharedConst.Const.IterHelper.Timeouts.Max) {
                this.__timeout = SharedConst.Const.IterHelper.Timeouts.Max;
            }
            this.Logger.Log('DecrementAndKeepGoing: ' + this.__nickName + ' ' + this.__currentIteration + ':' + this.__maxIterations + ' | timeout: ' + this.__timeout);
            toReturn = true;
        }
        else {
            this.IsExhausted = true;
            this.NotifyExhausted();
            toReturn = false;
        }
        return toReturn;
    }
    CurrentTimeout() {
        return this.__timeout;
    }
    NotifyExhausted() {
        this.Logger.Log('Iteration: ' + this.__nickName + ' counter exhausted ' + this.__currentIteration + ':' + this.__maxIterations);
    }
    WaitAndThen(timeoutFunction) {
        this.Logger.FuncStart(this.WaitAndThen.name, this.__nickName + ' ' + timeoutFunction.name);
        var self = this;
        setTimeout(timeoutFunction(), self.__timeout);
        this.Logger.FuncEnd(this.WaitAndThen.name, this.__nickName);
    }
    Wait() {
        if (!this.OperationCancelled) {
            return new Promise((resolve) => {
                setTimeout(resolve, this.__timeout);
            });
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/_BaseFrameProxy.js



class _BaseFrameProxy_BaseFrameProxy extends LoggableBase {
    constructor(logger, iframeElem) {
        super(logger);
        this.Index = -1;
        this.HTMLIframeElement = null;
        this.Id = null;
        this.HTMLIframeElement = iframeElem;
        this.Id = Guid_Guid.NewRandomGuid();
    }
    GetZindex() {
        let toReturn = -99;
        if (this.HTMLIframeElement && this.HTMLIframeElement.style && this.HTMLIframeElement.style.zIndex) {
            toReturn = parseInt(this.HTMLIframeElement.style.zIndex);
        }
        return toReturn;
    }
    GetContentDoc() {
        return new FactoryHelper_FactoryHelper(this.Logger).DataOneContentDocFactoryFromIframe(this);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/Agents/ISettingsAgent.js
class InitResultTreeProxy {
    constructor() {
        this.TreeInitialized = false;
    }
}
class InitResultsScWindowManager {
    constructor() {
        this.InitResultsDesktop = null;
    }
}
class InitResultsDesktopProxy {
    constructor() {
        this.InitResultsFrameProxies = [];
    }
}
class InitResultsCEFrameProxy {
    constructor() {
        this.FrameProxyInitialized = false;
    }
}
class InitResultContentEditorProxy {
    constructor() {
        this.ContentEditorProxyInitialized = false;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/Desktop/DesktopProxy/Events/ContentEditorProxyMutationEvent/ContentEditorProxyMutationEvent_Subject.js

class ContentEditorProxyMutationEvent_Subject_ContentEditorProxyMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(logger) {
        super(logger, ContentEditorProxyMutationEvent_Subject_ContentEditorProxyMutationEvent_Subject.name);
        this.Logger.InstantiateStart(ContentEditorProxyMutationEvent_Subject_ContentEditorProxyMutationEvent_Subject.name);
        this.Logger.InstantiateEnd(ContentEditorProxyMutationEvent_Subject_ContentEditorProxyMutationEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/Desktop/DesktopProxy/Events/_HindSiteEvent/HindSiteEvent_Observer.js

class HindSiteEvent_Observer_HindSiteEvent_Observer extends LoggableBase {
    constructor(logger, friendly) {
        super(logger);
        this.Friendly = friendly;
    }
    UpdateAsync(payload) {
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/Desktop/DesktopProxy/Events/TreeMutationEvent/TreeMutationEvent_Observer.js

class TreeMutationEvent_Observer_TreeMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(logger, ownerContentEditorProxy) {
        super(logger, TreeMutationEvent_Observer_TreeMutationEvent_Observer.name);
        this.OwnerContentEditorProxy = ownerContentEditorProxy;
    }
    SetAssociatedContentEditorProxy(contentEditorProxy) {
        this.OwnerContentEditorProxy = contentEditorProxy;
    }
    UpdateAsync(payload) {
        this.OwnerContentEditorProxy.ContentEditorProxyOnTreeMutationEvent(payload);
        payload.OwnerContentEditorProxy = this.OwnerContentEditorProxy;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/ContentEditor/ContentEditorTreeNodeProxy/ContentEditorTreeNodeProxy.js



class ContentEditorTreeNodeProxy_ScContentTreeNodeProxy extends LoggableBase {
    constructor(logger, sourceElement) {
        super(logger);
        this.Logger.InstantiateStart(ContentEditorTreeNodeProxy_ScContentTreeNodeProxy.name);
        if (sourceElement) {
            if (sourceElement.hasAttribute('src')) {
                this.InferFromImageElement(sourceElement);
            }
            else if (sourceElement.hasAttribute('href')) {
                this.InferFromAnchorElement(sourceElement);
            }
            else if (sourceElement.classList.contains('scContentTreeNode')) {
                this.InferFromDivElement(sourceElement);
            }
            else {
                this.Logger.ErrorAndThrow(ContentEditorTreeNodeProxy_ScContentTreeNodeProxy.name, 'invalid source element type: ' + (typeof sourceElement));
            }
        }
        else {
            this.Logger.ErrorAndThrow(ContentEditorTreeNodeProxy_ScContentTreeNodeProxy.name, 'null sourceElement or associatedDoc');
        }
        this.Logger.InstantiateEnd(ContentEditorTreeNodeProxy_ScContentTreeNodeProxy.name);
    }
    InferFromDivElement(divElement) {
        this.Logger.Log(this.InferFromAnchorElement.name);
        if (divElement) {
            this.ScContentTreeNodeDivElem = divElement;
        }
    }
    InferFromAnchorElement(anchorElement) {
        this.Logger.FuncStart(this.InferFromAnchorElement.name);
        if (anchorElement) {
            this.ScContentTreeNodeDivElem = anchorElement.parentElement;
        }
        this.Logger.FuncEnd(this.InferFromAnchorElement.name);
    }
    InferFromImageElement(imageElement) {
        this.Logger.Log(this.InferFromImageElement.name);
        if (imageElement) {
            this.ScContentTreeNodeDivElem = imageElement.parentElement;
        }
    }
    GetGlyphNodeElem() {
        return this.ScContentTreeNodeDivElem.querySelector(":scope > img");
    }
    GetLinkNodeElem() {
        return this.ScContentTreeNodeDivElem.querySelector(":scope > a");
    }
    GetStateOfScContentTreeNode() {
        var newData = {
            IsExpanded: this.QueryIsExpanded(),
            IsActive: this.QueryIsActive(),
            FriendlyTreeNode: this.GetNodeLinkText(),
            ItemId: this.GetApparentItemId(),
        };
        return newData;
    }
    GetApparentItemId() {
        let glyphNodeIdSuffix = this.GetGlyphNodeElem().id.replace(ContentConst.Const.Names.SC.TreeGlyphPrefix, '');
        let toReturnGuidData = Guid_Guid.ParseGuid(glyphNodeIdSuffix, true);
        this.Logger.LogVal('apparent id', toReturnGuidData.Raw);
        return toReturnGuidData;
    }
    GetIconSrc() {
        let toReturn;
        let foundElement = this.ScContentTreeNodeDivElem.querySelector(ContentConst.Const.Selector.SC.ContentEditor.scContentTreeNodeIcon);
        if (foundElement) {
            toReturn = foundElement.src;
        }
        return toReturn;
    }
    GetParentTreeNode() {
        let toReturn = null;
        let candidate = this.ScContentTreeNodeDivElem.closest(ContentConst.Const.Selector.SC.ContentEditor.scContentTreeNodeIcon);
        if (candidate) {
            this.Logger.Log('found a candidate');
            toReturn = new ContentEditorTreeNodeProxy_ScContentTreeNodeProxy(this.Logger, candidate);
        }
        else {
            this.Logger.Log('no candidate found');
        }
        return toReturn;
    }
    IsSitecoreRootNode() {
        let toReturn = false;
        let apparentId = this.GetApparentItemId();
        if (apparentId) {
            toReturn = apparentId.Raw === ContentConst.Const.ElemId.sc.SitecoreRootApparentIdRaw;
        }
        return toReturn;
    }
    GetMainIconSrc() {
        let toReturn;
        let maxIter = 100;
        let penultimateNode = this;
        let parentNode = this;
        let penultimateElem = this.ScContentTreeNodeDivElem.closest('[id=ContentTreeActualSize] > .scContentTreeNode >  div > .scContentTreeNode');
        if (penultimateElem) {
            penultimateNode = new ContentEditorTreeNodeProxy_ScContentTreeNodeProxy(this.Logger, penultimateElem);
        }
        if (penultimateNode !== null) {
            toReturn = penultimateNode.GetIconSrc();
        }
        return toReturn;
    }
    SetStateOfTreeNode(newData) {
        if (newData.IsExpanded) {
            this.ExpandNode();
        }
        this.Logger.LogVal('IsActive', newData.IsActive.toString());
        if (newData.IsActive) {
            var hotTreeNodeId = ContentConst.Const.Names.SC.TreeGlyphPrefix + Guid_Guid.WithoutDashes(newData.ItemId);
            let hotTreeNode = this.ScContentTreeNodeDivElem.querySelector('[id=' + hotTreeNodeId + ']');
            if (hotTreeNode) {
                let hotTreeNodeProxy = new ContentEditorTreeNodeProxy_ScContentTreeNodeProxy(this.Logger, hotTreeNode);
                if (hotTreeNodeProxy) {
                    hotTreeNodeProxy.ActivateNode();
                }
                else {
                    this.Logger.ErrorAndContinue(this.SetStateOfTreeNode.name, 'hot tree node not found');
                }
            }
            else {
                this.Logger.WarningAndContinue(this.SetStateOfTreeNode.name, 'No hotTreeNode');
            }
        }
    }
    QueryIsActive() {
        var toReturn = false;
        if (this.GetLinkNodeElem()) {
            var classList = this.GetLinkNodeElem().classList;
            if (classList.contains(ContentConst.Const.ClassNames.SC.scContentTreeNodeActive)) {
                toReturn = true;
                this.Logger.Log('** isActive ' + this.ScContentTreeNodeDivElem.innerText);
            }
        }
        else {
            this.Logger.Log('no node link elem');
        }
        return toReturn;
    }
    ActivateNode() {
        this.Logger.FuncStart(this.ActivateNode.name);
        if (this.GetLinkNodeElem()) {
            this.Logger.Log('clicking it to activate');
            this.GetLinkNodeElem().click();
            if (!this.QueryIsActive()) {
                this.Logger.WarningAndContinue(this.ActivateNode.name, 'Did not work. Trying to activate: ' + this.GetNodeLinkText());
            }
        }
        else {
            this.Logger.ErrorAndContinue(this.ActivateNode.name, 'No associated Elem');
        }
        this.Logger.FuncEnd(this.ActivateNode.name);
    }
    __collapseNode(element) {
        var currentSrc = element.getAttribute('src');
        this.Logger.Log('currentSrc' + currentSrc);
        if (currentSrc.indexOf(ContentConst.Const.Names.TreeMenuExpandedPng) > -1) {
            this.Logger.Log('clicking it to collapse');
            element.click();
        }
    }
    ExpandNode() {
        this.Logger.FuncStart(this.ExpandNode.name);
        if (!this.QueryIsExpanded()) {
            this.Logger.Log('clicking it to expand');
            this.GetGlyphNodeElem().click();
        }
        else {
            this.Logger.Log('Already expanded');
        }
        this.Logger.FuncEnd(this.ExpandNode.name);
    }
    GetNodeLinkText() {
        var toReturn = 'unknown';
        if (this.GetLinkNodeElem()) {
            toReturn = this.GetLinkNodeElem().innerText;
        }
        return toReturn;
    }
    IsContentTreeNode() {
        this.Logger.FuncStart(this.IsContentTreeNode.name);
        var toReturn = false;
        var className = this.ScContentTreeNodeDivElem.className;
        this.Logger.LogVal('className', className);
        if (className === ContentConst.Const.ClassNames.SC.ContentTreeNode) {
            toReturn = true;
        }
        this.Logger.FuncEnd(this.IsContentTreeNode.name, toReturn);
        return toReturn;
    }
    QueryIsExpanded() {
        var toReturn = false;
        let candidate = this.GetGlyphNodeElem();
        if (candidate) {
            var srcAttr = candidate.getAttribute('src');
            if (srcAttr !== null) {
                if (srcAttr.indexOf(ContentConst.Const.Names.SC.TreeExpandedPng.sc920) > -1) {
                    toReturn = true;
                }
            }
            else {
                this.Logger.ErrorAndThrow(this.QueryIsExpanded.name, 'Bad Glyph/ node data');
            }
            return toReturn;
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/Desktop/DesktopProxy/Events/TreeMutationEvent/TreeMutationEvent_Subject.js


class TreeMutationEvent_Subject_TreeMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(logger, treeElement, hostIframeId, host) {
        super(logger, TreeMutationEvent_Subject_TreeMutationEvent_Subject.name);
        this.Logger.InstantiateStart(TreeMutationEvent_Subject_TreeMutationEvent_Subject.name);
        this.TreeElement = treeElement;
        this.HostIframeId = hostIframeId;
        this.Logger.LogVal('this.HostIframeId', this.HostIframeId);
        this.InitTreeMutationEvent_Observer();
        this.Logger.InstantiateEnd(TreeMutationEvent_Subject_TreeMutationEvent_Subject.name);
    }
    InitTreeMutationEvent_Observer() {
        this.Logger.FuncStart(this.InitTreeMutationEvent_Observer.name);
        try {
            if (this.TreeElement) {
                let self = this;
                let observer = new MutationObserver((mutations) => self.OnTreeMutationEvent_TreeMutationEvent_Subject(mutations));
                observer.observe(this.TreeElement, { attributes: true, subtree: true, childList: true });
            }
        }
        catch (err) {
            throw (this.InitTreeMutationEvent_Observer.name + ' | ' + err);
        }
        this.Logger.FuncEnd(this.InitTreeMutationEvent_Observer.name);
    }
    MakeScContentTreeNodeProxy(mutation) {
        this.Logger.FuncStart(this.MakeScContentTreeNodeProxy.name);
        let candidateNode = null;
        let mutatedAnchorElement = (mutation.target);
        candidateNode = new ContentEditorTreeNodeProxy_ScContentTreeNodeProxy(this.Logger, mutatedAnchorElement);
        this.Logger.Log('innerText : ' + mutation.target.innerText);
        this.Logger.FuncEnd(this.MakeScContentTreeNodeProxy.name);
        return candidateNode;
    }
    OnTreeMutationEvent_TreeMutationEvent_Subject(mutationRecords) {
        this.Logger.FuncStart(this.OnTreeMutationEvent_TreeMutationEvent_Subject.name, 'mutationRecord count: ' + mutationRecords.length);
        mutationRecords.forEach((mutationRecord, index) => {
            if (mutationRecord.attributeName === 'class') {
                let anchorTest = (mutationRecord.target);
                if (anchorTest) {
                    this.Logger.Log(index + ':' + mutationRecords.length + '  - passes the class and anchor test');
                    let scContentTreeNodeProxy = this.MakeScContentTreeNodeProxy(mutationRecord);
                    if (scContentTreeNodeProxy) {
                        if (scContentTreeNodeProxy.QueryIsActive()) {
                            let treeMutationEvent_Payload = {
                                OwnerContentEditorProxy: null,
                                StateOfTree: null,
                                MutatedElement: (mutationRecord.target),
                                ActiveNode: scContentTreeNodeProxy,
                            };
                            this.NotifyObservers(treeMutationEvent_Payload);
                        }
                    }
                }
            }
        });
        this.Logger.FuncEnd(this.OnTreeMutationEvent_TreeMutationEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/ContentEditor/ContentEditorTreeProxy/ContentEditorTreeProxy.js
var ContentEditorTreeProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class ContentEditorTreeProxy_TreeProxy extends LoggableBase {
    constructor(logger, associatedDoc, treeContainerElement) {
        super(logger);
        this.Logger.InstantiateStart(ContentEditorTreeProxy_TreeProxy.name);
        this.AssociatedDoc = associatedDoc;
        this.TreeContainerElement = treeContainerElement;
        this.Logger.LogAsJsonPretty('this.AssociatedDoc', this.AssociatedDoc);
        this.Logger.InstantiateEnd(ContentEditorTreeProxy_TreeProxy.name);
    }
    OnReadyInitTreeProxy() {
        this.Logger.FuncStart(this.OnReadyInitTreeProxy.name);
        let initResultTreeProxy = new InitResultTreeProxy();
        this.TreeMutationEvent_Subject = new TreeMutationEvent_Subject_TreeMutationEvent_Subject(this.Logger, this.TreeContainerElement, '', this.AssociatedDoc);
        initResultTreeProxy.TreeInitialized = true;
        this.Logger.FuncEnd(this.OnReadyInitTreeProxy.name);
        return initResultTreeProxy;
    }
    GetTreeNodeByGlyph(targetNode) {
        this.Logger.FuncStart(this.GetTreeNodeByGlyph.name);
        let toReturn = null;
        if (targetNode && this.TreeContainerElement) {
            var treeGlyphTargetId = ContentConst.Const.Names.SC.TreeGlyphPrefix + Guid_Guid.WithoutDashes(targetNode.ItemId);
            this.Logger.Log('looking for: (' + targetNode.FriendlyTreeNode + ')' + treeGlyphTargetId + ' in id:' + this.TreeContainerElement.id);
            var foundOnPageTreeGlyph = this.TreeContainerElement.querySelector('[id=' + treeGlyphTargetId + ']');
            if (foundOnPageTreeGlyph) {
                toReturn = new ContentEditorTreeNodeProxy_ScContentTreeNodeProxy(this.Logger, foundOnPageTreeGlyph);
                this.Logger.Log('Found it ' + toReturn.GetNodeLinkText());
            }
            else {
                this.Logger.Log('Not Found');
            }
        }
        this.Logger.FuncEnd(this.GetTreeNodeByGlyph.name);
        return toReturn;
    }
    SetStateOfTree(stateOfContentEditor) {
        return ContentEditorTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.SetStateOfTree.name);
            let iterHelper = new IterationDrone_IterationDrone(this.Logger, this.SetStateOfTree.name);
            while (stateOfContentEditor.StateOfTreeNodes.length > 0 && iterHelper.DecrementAndKeepGoing()) {
                var nextNode = stateOfContentEditor.StateOfTreeNodes.shift();
                yield this.SetStateOfTreeNode(nextNode);
            }
            this.Logger.FuncEnd(this.SetStateOfTree.name);
        });
    }
    SetStateOfTreeNode(dataStateOfTreeNode) {
        return ContentEditorTreeProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.SetStateOfTreeNode.name);
            try {
                var iterHelper = new IterationDrone_IterationDrone(this.Logger, this.SetStateOfTreeNode.name);
                let treeNodeProxy = null;
                while (!treeNodeProxy && iterHelper.DecrementAndKeepGoing()) {
                    treeNodeProxy = this.GetTreeNodeByGlyph(dataStateOfTreeNode);
                    if (treeNodeProxy) {
                        treeNodeProxy.SetStateOfTreeNode(dataStateOfTreeNode);
                    }
                    else {
                        this.Logger.Log('not Found...waiting: ');
                        yield iterHelper.Wait();
                    }
                }
            }
            catch (err) {
                throw (this.SetStateOfTreeNode.name + ' | ' + err);
            }
            this.Logger.FuncEnd(this.SetStateOfTreeNode.name);
        });
    }
    WalkNodeRecursive(targetNode, depth) {
        var toReturn = [];
        depth = depth - 1;
        if (targetNode) {
            var firstChildGlyphNode = targetNode.querySelector(ContentConst.Const.Selector.SC.ContentEditor.ContentTreeNodeGlyph);
            if (firstChildGlyphNode) {
                let treeNodeProxy = new ContentEditorTreeNodeProxy_ScContentTreeNodeProxy(this.Logger, firstChildGlyphNode);
                this.Logger.LogVal('treeNodeProxy.IsContentTreeNode', treeNodeProxy.IsContentTreeNode() + ' ' + treeNodeProxy.GetNodeLinkText());
                if (treeNodeProxy.IsContentTreeNode()) {
                    if (treeNodeProxy.QueryIsExpanded() || treeNodeProxy.QueryIsActive()) {
                        let newData = treeNodeProxy.GetStateOfScContentTreeNode();
                        toReturn.push(newData);
                    }
                    else {
                        this.Logger.Log('no first img');
                    }
                }
            }
            var childNodes = targetNode.children;
            if (childNodes && childNodes.length > 0 && depth > 0) {
                for (var jdx = 0; jdx < childNodes.length; jdx++) {
                    var oneChild = childNodes[jdx];
                    toReturn = toReturn.concat(this.WalkNodeRecursive(oneChild, depth));
                }
            }
        }
        return toReturn;
    }
    GetRootNode() {
        this.Logger.LogVal('Looking for: ', ContentConst.Const.Selector.SC.ContentEditor.RootAnchorNode);
        let toReturn = this.TreeContainerElement.querySelector(ContentConst.Const.Selector.SC.ContentEditor.RootAnchorNode);
        return toReturn;
    }
    GetStateOfTree() {
        this.Logger.FuncStart(this.GetStateOfTree.name);
        let toReturnOneTreeState = new DefaultStateOfTree();
        try {
            toReturnOneTreeState.StateOfTreeNodes = this.GetStateOfTreeNodes();
            toReturnOneTreeState.ActiveTreeNodeIndex = null;
            toReturnOneTreeState.ActiveTreeNodeIndex = this.GetActiveNode(toReturnOneTreeState.StateOfTreeNodes);
            if (toReturnOneTreeState) {
                this.Logger.LogVal('Tree State node count', toReturnOneTreeState.StateOfTreeNodes.length);
            }
        }
        catch (err) {
            throw (this.GetStateOfTree.name + ' | ' + err);
        }
        this.Logger.FuncEnd(this.GetStateOfTree.name);
        return toReturnOneTreeState;
    }
    GetActiveNode(allTreeNodeAr) {
        let toReturn = -1;
        if (allTreeNodeAr) {
            for (var idx = 0; idx < allTreeNodeAr.length; idx++) {
                let candidate = allTreeNodeAr[idx];
                if (candidate.IsActive) {
                    toReturn = idx;
                    break;
                }
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.GetActiveNode.name, 'No tree data provided');
        }
        return toReturn;
    }
    GetStateOfTreeNodes() {
        this.Logger.FuncStart(this.GetStateOfTreeNodes.name);
        var toReturn = [];
        if (this.AssociatedDoc) {
            var rootNode = this.GetRootNode();
            if (rootNode) {
                this.Logger.Log('rootNode: ' + rootNode.innerHTML);
                var rootParent = rootNode.parentElement;
                toReturn = this.WalkNodeRecursive(rootParent, ContentConst.Const.MaxIter);
                this.Logger.Log('foundNodes count: ' + toReturn.length);
            }
            else {
                this.Logger.ErrorAndThrow(this.GetStateOfTreeNodes.name, 'no root node');
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.GetStateOfTreeNodes.name, 'no targetDoc');
        }
        this.Logger.LogVal('length', toReturn.length);
        this.Logger.FuncEnd(this.GetStateOfTreeNodes.name);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/ContentEditor/ContentEditorProxy/ContentEditorProxy.js
var ContentEditorProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};










class ContentEditorProxy_ContentEditorProxy extends LoggableBase {
    constructor(associatedDoc, logger) {
        super(logger);
        this.Logger.InstantiateStart(ContentEditorProxy_ContentEditorProxy.name);
        this.AssociatedHindsiteId = Guid_Guid.NewRandomGuid();
        this.AssociatedDoc = associatedDoc;
        this.ValidateAssociatedDocContentEditor();
        this.Logger.InstantiateEnd(ContentEditorProxy_ContentEditorProxy.name);
    }
    OnReadyInitContentEditorProxy() {
        return new Promise((resolve, reject) => ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.OnReadyInitContentEditorProxy.name);
            let initResultContentEditorProxy = new InitResultContentEditorProxy();
            let recipeBasic = new RecipeBasics_RecipeBasics(this.Logger);
            yield recipeBasic.WaitForPageReadyNative(this.AssociatedDoc)
                .then(() => {
                this.ChildTreeProxy = new ContentEditorTreeProxy_TreeProxy(this.Logger, this.AssociatedDoc, this.GetTreeContainer());
                initResultContentEditorProxy.InitResultTreeProxy = this.ChildTreeProxy.OnReadyInitTreeProxy();
                this.ContentEditorProxyMutationEvent_Subject = new ContentEditorProxyMutationEvent_Subject_ContentEditorProxyMutationEvent_Subject(this.Logger);
                this.TreeMutationEvent_Observer = new TreeMutationEvent_Observer_TreeMutationEvent_Observer(this.Logger, this);
                if (this.ChildTreeProxy) {
                    this.ChildTreeProxy.TreeMutationEvent_Subject.RegisterObserver(this.TreeMutationEvent_Observer);
                }
                else {
                    this.Logger.ErrorAndThrow(this.OnReadyInitContentEditorProxy.name, 'no child tree found');
                }
                initResultContentEditorProxy.ContentEditorProxyInitialized = true;
            })
                .then(() => resolve(initResultContentEditorProxy))
                .catch((err) => reject(this.OnReadyInitContentEditorProxy.name + ' | ' + err));
            this.Logger.FuncEnd(this.OnReadyInitContentEditorProxy.name);
        }));
    }
    GetTreeContainer() {
        return this.AssociatedDoc.ContentDoc.querySelector(ContentConst.Const.Selector.SC.ContentEditor.ScContentTreeContainer);
    }
    ContentEditorProxyOnTreeMutationEvent(payload) {
        let contentEditorProxyMutationEvent_Payload = {
            AddedIframes: [],
            MutatedElement: null,
            TreeMutation: payload,
            ContentEditorProxy: this
        };
        if (this.ContentEditorProxyMutationEvent_Subject) {
            this.ContentEditorProxyMutationEvent_Subject.NotifyObservers(contentEditorProxyMutationEvent_Payload);
        }
    }
    GetStateOfContentEditor() {
        {
            let toReturnStateOfContentEditor = new DefaultStateOfContentEditor();
            toReturnStateOfContentEditor.StateOfTree = this.ChildTreeProxy.GetStateOfTree();
            return toReturnStateOfContentEditor;
        }
    }
    ValidateAssociatedDocContentEditor() {
        this.Logger.FuncStart(this.ValidateAssociatedDocContentEditor.name);
        if (!this.AssociatedDoc) {
            this.Logger.ErrorAndThrow(this.ValidateAssociatedDocContentEditor.name, 'No doc provided');
        }
        else if (!this.AssociatedDoc.ContentDoc) {
            this.Logger.ErrorAndThrow(this.ValidateAssociatedDocContentEditor.name, 'No content doc');
        }
        else if (!this.AssociatedDoc.ContentDoc.URL) {
            this.Logger.ErrorAndThrow(this.ValidateAssociatedDocContentEditor.name, 'No URL');
        }
        else if (this.AssociatedDoc.ContentDoc.URL === SharedConst.Const.UrlSuffix.AboutBlank) {
            this.Logger.ErrorAndThrow(this.ValidateAssociatedDocContentEditor.name, SharedConst.Const.UrlSuffix.AboutBlank + ' not allowed');
        }
        this.Logger.LogVal('URL', this.AssociatedDoc.ContentDoc.URL);
        this.Logger.FuncEnd(this.ValidateAssociatedDocContentEditor.name);
    }
    WaitForReadyContentEditor() {
        return ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForReadyContentEditor.name);
            try {
                let recipeBasics = new RecipeBasics_RecipeBasics(this.Logger);
                yield recipeBasics.WaitForPageReadyNative(this.AssociatedDoc)
                    .catch((err) => this.Logger.ErrorAndThrow(this.WaitForReadyContentEditor.name, err));
            }
            catch (e) {
            }
            this.Logger.FuncEnd(this.WaitForReadyContentEditor.name);
        });
    }
    RegisterObserverForTreeMutation(treeMutationEvent_Observer) {
        this.Logger.FuncStart(this.RegisterObserverForTreeMutation.name);
        if (this.ChildTreeProxy) {
            treeMutationEvent_Observer.SetAssociatedContentEditorProxy(this);
            this.ChildTreeProxy.TreeMutationEvent_Subject.RegisterObserver(treeMutationEvent_Observer);
        }
        else {
            this.Logger.WarningAndContinue(this.RegisterObserverForTreeMutation.name, 'no associated tree proxy');
        }
        this.Logger.FuncEnd(this.RegisterObserverForTreeMutation.name);
    }
    SetCompactCss() {
        this.Logger.FuncStart(this.SetCompactCss.name, Guid_Guid.AsShort(this.AssociatedDoc.DocId));
        this.Logger.FuncStart(this.SetCompactCss.name, Guid_Guid.AsShort(this.AssociatedDoc.DocId));
    }
    SetStateOfContentEditor(dataToRestore) {
        return ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentEditorProxy_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.SetStateOfContentEditor.name, Guid_Guid.AsShort(this.AssociatedDoc.DocId));
                this.Logger.Log('Node Count in storage data: ' + dataToRestore.StateOfTree.StateOfTreeNodes.length);
                yield this.ChildTreeProxy.SetStateOfTree(dataToRestore.StateOfTree)
                    .then(() => resolve(true))
                    .catch((err) => reject(this.SetStateOfContentEditor.name + " " + err));
                this.Logger.FuncEnd(this.SetStateOfContentEditor.name);
            }));
        });
    }
    GetActiveNode(allTreeNodeAr) {
        this.Logger.FuncStart(this.GetActiveNode.name);
        let toReturn = null;
        if (allTreeNodeAr) {
            for (var idx = 0; idx < allTreeNodeAr.length; idx++) {
                let candidate = allTreeNodeAr[idx];
                if (candidate.IsActive) {
                    toReturn = candidate;
                    break;
                }
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.GetActiveNode.name, 'No tree data provided');
        }
        this.Logger.FuncEnd(this.GetActiveNode.name, toReturn.FriendlyTreeNode);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/Desktop/DesktopProxy/Events/ContentEditorProxyMutationEvent/ContentEditorProxyMutationEvent_Observer.js

class ContentEditorProxyMutationEvent_Observer_ContentEditorProxyMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(logger, ownerFrameProxy) {
        super(logger, ContentEditorProxyMutationEvent_Observer_ContentEditorProxyMutationEvent_Observer.name);
        this.OwnerCEFrameProxy = ownerFrameProxy;
    }
    UpdateAsync(payload) {
        this.OwnerCEFrameProxy.OnContentEditorProxyMutation(payload);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/Desktop/DesktopProxy/Events/FrameProxyMutationEvent/FrameProxyMutatedEvent_Subject.js

class FrameProxyMutatedEvent_Subject_FrameProxyMutationEvent_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(logger) {
        super(logger, FrameProxyMutatedEvent_Subject_FrameProxyMutationEvent_Subject.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Defaults/DefaultStateOfFrame.js


class DefaultStateOfFrame_DefaultStateOfFrame {
    constructor() {
        this.StateOfContentEditor = new DefaultStateOfContentEditor();
        this.StorageId = Guid_Guid.NewRandomGuid();
        this.Styling = '';
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/CEFrameProxy.js
var CEFrameProxy_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class CEFrameProxy_CEFrameProxy extends _BaseFrameProxy_BaseFrameProxy {
    constructor(logger, iframeElem) {
        super(logger, iframeElem);
    }
    GetStateOfCEFrame() {
        let toReturn = new DefaultStateOfFrame_DefaultStateOfFrame();
        toReturn.Styling = this.HTMLIframeElement.style.cssText;
        if (this.ContentEditorProxy) {
            toReturn.StateOfContentEditor = this.ContentEditorProxy.GetStateOfContentEditor();
        }
        return toReturn;
    }
    SetStateOfCEFrame(stateOfFrame) {
        return CEFrameProxy_awaiter(this, void 0, void 0, function* () {
            yield this.ContentEditorProxy.SetStateOfContentEditor(stateOfFrame.StateOfContentEditor);
        });
    }
    OnContentEditorProxyMutation(payload) {
        this.Logger.FuncStart(this.OnContentEditorProxyMutation.name);
        let frameProxyMutationEvent_Payload = {
            ContentEditorProxyMutationPayload: payload,
            CeFrameProxy: this
        };
        this.FrameProxyMutationEvent_Subject.NotifyObservers(frameProxyMutationEvent_Payload);
        this.Logger.FuncEnd(this.OnContentEditorProxyMutation.name);
    }
    OnReadyInitCEFrameProxy() {
        return new Promise((resolve, reject) => CEFrameProxy_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.OnReadyInitCEFrameProxy.name);
            let recipeBasic = new RecipeBasics_RecipeBasics(this.Logger);
            let initResultFrameProxy = new InitResultsCEFrameProxy();
            yield recipeBasic.WaitForPageReadyHtmlIframeElement(this.HTMLIframeElement)
                .then(() => this.ContentEditorProxy = new ContentEditorProxy_ContentEditorProxy(this.GetContentDoc(), this.Logger))
                .then(() => this.ContentEditorProxy.OnReadyInitContentEditorProxy())
                .then((result) => initResultFrameProxy.InitResultContentEditorProxy = result)
                .then(() => {
                this.FrameProxyMutationEvent_Subject = new FrameProxyMutatedEvent_Subject_FrameProxyMutationEvent_Subject(this.Logger);
                this.ContentEditorProxyMutationEvent_Observer = new ContentEditorProxyMutationEvent_Observer_ContentEditorProxyMutationEvent_Observer(this.Logger, this);
                this.ContentEditorProxy.ContentEditorProxyMutationEvent_Subject.RegisterObserver(this.ContentEditorProxyMutationEvent_Observer);
                initResultFrameProxy.FrameProxyInitialized = true;
            })
                .then(() => resolve(initResultFrameProxy))
                .catch((err) => reject(this.OnReadyInitCEFrameProxy.name + ' | ' + err));
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/FactoryHelper.js
var FactoryHelper_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class FactoryHelper_FactoryHelper extends LoggableBase {
    constructor(logger) {
        super(logger);
    }
    DataOneContentDocFactoryFromIframe(dataOneIframe) {
        var toReturn = null;
        if (dataOneIframe) {
            toReturn =
                {
                    ContentDoc: dataOneIframe.HTMLIframeElement.contentDocument,
                    DocId: Guid_Guid.NewRandomGuid(),
                    Nickname: ' - content doc'
                };
        }
        else {
            this.Logger.ErrorAndThrow(this.DataOneContentDocFactoryFromIframe.name, 'no iframe provided');
        }
        return toReturn;
    }
    FrameProxyForPromiseFactory(iframeElem, nickname) {
        this.Logger.FuncStart(this.FrameProxyForPromiseFactory.name);
        var toReturn = null;
        if (iframeElem && nickname) {
            var toReturn = new _BaseFrameProxy_BaseFrameProxy(this.Logger, iframeElem);
        }
        else {
            this.Logger.ErrorAndThrow(this.FrameProxyForPromiseFactory.name, 'one of these is null');
            this.Logger.LogAsJsonPretty('iframeElem', iframeElem);
            this.Logger.LogAsJsonPretty('nickname', nickname);
        }
        this.Logger.FuncEnd(this.FrameProxyForPromiseFactory.name);
        return toReturn;
    }
    CEFrameProxyFactory(iframeElem) {
        return FactoryHelper_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.CEFrameProxyFactory.name);
            var toReturn = null;
            if (iframeElem) {
                var toReturn = new CEFrameProxy_CEFrameProxy(this.Logger, iframeElem);
                yield toReturn.OnReadyInitCEFrameProxy();
            }
            else {
                this.Logger.ErrorAndThrow(this.CEFrameProxyFactory.name, 'one of these is null');
                this.Logger.LogAsJsonPretty('iframeElem', iframeElem);
            }
            this.Logger.FuncEnd(this.CEFrameProxyFactory.name);
            return toReturn;
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Helpers/IframeHelper.js
var IframeHelper_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class IframeHelper_FrameHelper extends LoggableBase {
    constructor(logger) {
        super(logger);
    }
    GetIFramesFromDoc(targetDoc) {
        let toReturnIframeAr = [];
        var queryResults = targetDoc.ContentDoc.querySelectorAll(ContentConst.Const.Selector.SC.IframeContent.sc920);
        if (!queryResults) {
            queryResults = targetDoc.ContentDoc.querySelectorAll(ContentConst.Const.Selector.SC.IframeContent.sc820);
        }
        if (queryResults) {
            for (var ifrIdx = 0; ifrIdx < queryResults.length; ifrIdx++) {
                var iframeElem = queryResults[ifrIdx];
                if (iframeElem) {
                    toReturnIframeAr.push(iframeElem);
                }
            }
        }
        this.Logger.LogVal('found iframes count', toReturnIframeAr.length);
        return toReturnIframeAr;
    }
    GetIFramesAsFrameProxies(targetDoc) {
        return IframeHelper_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.Logger.FuncStart(this.GetIFramesAsFrameProxies.name);
                var toReturn = [];
                let iframeAr = this.GetIFramesFromDoc(targetDoc);
                let recipeBasics = new RecipeBasics_RecipeBasics(this.Logger);
                let factoryHelper = new FactoryHelper_FactoryHelper(this.Logger);
                if (iframeAr) {
                    iframeAr.forEach((iframeElem, ifrIdx) => IframeHelper_awaiter(this, void 0, void 0, function* () {
                        yield recipeBasics.WaitForPageReadyHtmlIframeElement(iframeElem)
                            .then(() => factoryHelper.FrameProxyForPromiseFactory(iframeElem, 'desktop Iframe_' + ifrIdx))
                            .then((result) => toReturn.push(result))
                            .catch((err) => reject(this.GetIFramesAsFrameProxies.name + ' | ' + err));
                    }));
                }
                this.Logger.FuncEnd(this.GetIFramesAsFrameProxies.name, 'count: ' + toReturn.length);
                resolve(toReturn);
            });
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/PromiseResult.js
class PromiseResult {
    constructor(nickname, logger) {
        this.prefix = 'Promise Successful? -> ';
        this.Success = false;
        this.NickName = nickname;
        this.Log = logger;
    }
    WasSuccessful() {
        return this.Success;
    }
    MarkSuccessful() {
        this.Success = true;
        if (this.Log) {
            this.Log.LogVal(this.prefix + this.NickName, this.Success);
        }
        else {
            console.log('no logger success');
        }
    }
    MarkFailed(ex) {
        if (ex) {
            ex = ex.toString();
        }
        else {
            ex = '{no fail message}';
        }
        this.RejectReasons += ', ' + ex;
        this.Success = false;
        if (this.Log) {
            this.Log.ErrorAndThrow(this.prefix + this.NickName, this.Success + '  err: ' + ex);
        }
        else {
            console.log('no logger fail ' + ex);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/RecipeBasics.js
var RecipeBasics_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class RecipeBasics_RecipeBasics extends LoggableBase {
    constructor(logger) {
        super(logger);
        this.FrameHelper = new IframeHelper_FrameHelper(this.Logger);
        this.FactoryHelp = new FactoryHelper_FactoryHelper(this.Logger);
    }
    WaitForReadyFrameProxy(baseframeProxy) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForReadyFrameProxy.name, Guid_Guid.AsShort(baseframeProxy.Id));
                var iterationJr = new IterationDrone_IterationDrone(this.Logger, this.WaitForReadyFrameProxy.name);
                let IsReady = false;
                yield this.WaitForPageReadyHtmlIframeElement(baseframeProxy.HTMLIframeElement)
                    .then(() => resolve(baseframeProxy))
                    .catch((err) => reject(this.WaitForReadyFrameProxy.name + ' | ' + err));
                this.Logger.FuncEnd(this.WaitForReadyFrameProxy.name);
            }));
        });
    }
    IsDocumentReady(document) {
        let toReturn = false;
        if (document) {
            let currentReadyState = document.readyState.toString();
            let isReadyStateComplete = currentReadyState === 'complete';
            let url = document.URL;
            if (isReadyStateComplete && url !== SharedConst.Const.UrlSuffix.AboutBlank && url != '') {
                toReturn = true;
            }
            this.Logger.LogVal('url', url);
            ;
            this.Logger.LogVal('readyState', currentReadyState);
            ;
            this.Logger.LogVal('isReadyStateComplete', isReadyStateComplete);
            this.Logger.LogVal('toReturn', toReturn);
        }
        return toReturn;
    }
    WaitForPageReadyHtmlIframeElement(targetIframe) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForPageReadyHtmlIframeElement.name);
                if (targetIframe) {
                    var iterationJr = new IterationDrone_IterationDrone(this.Logger, this.WaitForPageReadyNative.name);
                    var isReady = false;
                    let currentReadyState;
                    while (iterationJr.DecrementAndKeepGoing() && !isReady) {
                        currentReadyState = targetIframe.contentDocument.readyState.toString();
                        isReady = this.IsDocumentReady(targetIframe.contentDocument);
                        if (isReady) {
                            break;
                        }
                        else {
                            yield iterationJr.Wait();
                        }
                    }
                    if (isReady) {
                        resolve();
                    }
                    if (iterationJr.IsExhausted) {
                        reject(iterationJr.IsExhaustedMsg);
                    }
                    this.Logger.Log('ready state: ' + currentReadyState + ' is ready: ' + isReady.toString());
                }
                else {
                    this.Logger.ErrorAndThrow(this.WaitForPageReadyHtmlIframeElement.name, 'No target doc');
                }
                this.Logger.FuncEnd(this.WaitForPageReadyHtmlIframeElement.name);
                ;
            }));
        });
    }
    WaitForPageReadyNative(targetDoc) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForPageReadyNative.name);
                if (targetDoc) {
                    var iterationJr = new IterationDrone_IterationDrone(this.Logger, this.WaitForPageReadyNative.name);
                    var isReady = false;
                    let currentReadyState;
                    while (iterationJr.DecrementAndKeepGoing() && !isReady) {
                        isReady = this.IsDocumentReady(targetDoc.ContentDoc);
                        if (isReady) {
                            break;
                        }
                        else {
                            yield iterationJr.Wait();
                        }
                    }
                    if (isReady) {
                        resolve();
                    }
                    if (iterationJr.IsExhausted) {
                        reject(iterationJr.IsExhaustedMsg);
                    }
                    this.Logger.Log('ready state: ' + currentReadyState + ' is ready: ' + isReady.toString());
                }
                else {
                    this.Logger.ErrorAndThrow(this.WaitForPageReadyNative.name, 'No target doc');
                }
                this.Logger.FuncEnd(this.WaitForPageReadyNative.name);
                ;
            }));
        });
    }
    GetTopLevelIframe(targetDoc) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.GetTopLevelIframe.name);
            var toReturn = null;
            yield this.FrameHelper.GetIFramesAsFrameProxies(targetDoc)
                .then((allIframe) => {
                var maxZVal = -1;
                if (allIframe && allIframe.length > 0) {
                    for (var idx = 0; idx < allIframe.length; idx++) {
                        var candidateIframe = allIframe[idx];
                        if (candidateIframe && candidateIframe.GetZindex() > maxZVal) {
                            toReturn = candidateIframe;
                            maxZVal = candidateIframe.GetZindex();
                        }
                    }
                }
            });
            this.Logger.FuncEnd(this.GetTopLevelIframe.name);
            return toReturn;
        });
    }
    WaitForIframeElemAndReturnWhenReady(haystackDoc, selector, iframeNickName) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForIframeElemAndReturnWhenReady.name);
                yield this.WaitForAndReturnFoundElem(haystackDoc, selector)
                    .then((foundElem) => RecipeBasics_awaiter(this, void 0, void 0, function* () { return yield this.FactoryHelp.FrameProxyForPromiseFactory(foundElem, iframeNickName); }))
                    .then((result) => this.WaitForReadyFrameProxy(result))
                    .then((result) => resolve(result))
                    .catch((err) => reject(err));
                this.Logger.FuncEnd(this.WaitForIframeElemAndReturnWhenReady.name);
            }));
        });
    }
    WaitForNewIframeContentEditor(allIframesBefore, targetDoc) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForNewIframe.name);
                let toReturn = null;
                yield this.WaitForNewIframe(allIframesBefore, targetDoc)
                    .then((result) => toReturn = result)
                    .then(() => resolve(toReturn))
                    .catch((err) => reject(this.WaitForNewIframeContentEditor.name + ' | ' + err));
                this.Logger.FuncEnd(this.WaitForNewIframe.name);
            }));
        });
    }
    WaitForNewIframe(allIframesBefore, targetDoc) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForNewIframe.name);
                this.Logger.LogAsJsonPretty('allIframesBefore', allIframesBefore);
                this.Logger.ThrowIfNullOrUndefined(this.WaitForNewIframe.name, allIframesBefore);
                this.Logger.ThrowIfNullOrUndefined(this.WaitForNewIframe.name, targetDoc);
                var toReturn = null;
                var iterationJr = new IterationDrone_IterationDrone(this.Logger, this.WaitForNewIframe.name);
                let beforeCount = allIframesBefore.length;
                while (!toReturn && iterationJr.DecrementAndKeepGoing()) {
                    var allIframesAfter;
                    yield this.FrameHelper.GetIFramesAsFrameProxies(targetDoc)
                        .then((result) => allIframesAfter = result)
                        .catch((err) => reject(this.WaitForNewIframe.name + ' ' + err));
                    var count = allIframesAfter.length;
                    this.Logger.Log('iFrame count before: ' + beforeCount);
                    this.Logger.Log('iFrame count after: ' + allIframesAfter.length);
                    if (count > beforeCount) {
                        var newIframes = allIframesAfter.filter(e => !allIframesBefore.includes(e));
                        toReturn = newIframes[0];
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                this.Logger.FuncEnd(this.WaitForNewIframe.name);
                if (toReturn) {
                    resolve(toReturn);
                }
                else {
                    reject(iterationJr.IsExhaustedMsg);
                }
            }));
        });
    }
    WaitForAndReturnFoundElem(haystackDoc, selector, overrideIterCount = 8) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForAndReturnFoundElem.name);
                this.Logger.LogVal('selector', selector);
                this.Logger.LogVal('doc nickname', haystackDoc.Nickname);
                var toReturnFoundElem = null;
                let promiseResult = new PromiseResult(this.WaitForAndReturnFoundElem.name, this.Logger);
                var iterationJr = new IterationDrone_IterationDrone(this.Logger, this.WaitForAndReturnFoundElem.name, overrideIterCount);
                while (!toReturnFoundElem && iterationJr.DecrementAndKeepGoing()) {
                    toReturnFoundElem = haystackDoc.ContentDoc.querySelector(selector);
                    if (toReturnFoundElem) {
                        this.Logger.Log('found');
                        this.Logger.LogVal('found.style.display', toReturnFoundElem.style.display);
                        promiseResult.MarkSuccessful();
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (!toReturnFoundElem && iterationJr.IsExhausted) {
                    promiseResult.MarkFailed(iterationJr.IsExhaustedMsg);
                }
                this.Logger.FuncEnd(this.WaitForAndReturnFoundElem.name);
                if (promiseResult.WasSuccessful()) {
                    resolve(toReturnFoundElem);
                }
                else {
                    reject(promiseResult.RejectReasons);
                }
            }));
        });
    }
    WaitForAndClickWithPayload(selector, targetDoc, payload) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForAndClickWithPayload.name, selector);
            yield this.WaitForThenClick([selector], targetDoc)
                .then(() => resolve(payload))
                .catch(ex => {
                this.Logger.ErrorAndThrow(this.WaitForAndClickWithPayload.name, ex);
                reject(ex);
            });
        }));
    }
    TabWaitForReadyStateCompleteNative(browserTab) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            let iterHelper = new IterationDrone_IterationDrone(this.Logger, this.TabWaitForReadyStateCompleteNative.name);
            let result = new PromiseResult(this.TabWaitForReadyStateCompleteNative.name, this.Logger);
            while (browserTab.status !== 'complete' && iterHelper.DecrementAndKeepGoing()) {
                this.Logger.LogVal('tab status', browserTab.status);
                yield iterHelper.Wait;
            }
            if (browserTab.status === 'complete') {
                result.MarkSuccessful();
            }
            else {
                result.MarkFailed('browser status: ' + browserTab.status);
                if (iterHelper.IsExhausted) {
                    result.MarkFailed(iterHelper.IsExhaustedMsg);
                }
            }
            if (result.WasSuccessful()) {
                resolve();
            }
            else {
                reject(result.RejectReasons);
            }
        }));
    }
    TabChainSetHrefWaitForComplete(href) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.TabChainSetHrefWaitForComplete.name, href.AbsUrl);
            yield browser.tabs.query({ currentWindow: true, active: true })
                .then((result) => {
                let targetTab = result[0];
                browser.tabs.update(targetTab.id, { url: href.AbsUrl });
                this.TabWaitForReadyStateCompleteNative(targetTab);
            })
                .then(resolve)
                .catch((ex) => reject(ex));
            this.Logger.FuncEnd(this.TabChainSetHrefWaitForComplete.name, href.AbsUrl);
        }));
    }
    RaceWaitAndClick(selector, targetDoc) {
        return RecipeBasics_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.RaceWaitAndClick.name);
                yield this.WaitForThenClick([selector.sc920, selector.sc820], targetDoc)
                    .then(() => {
                    this.Logger.FuncEnd(this.RaceWaitAndClick.name);
                    resolve();
                })
                    .catch((ex) => {
                    this.Logger.FuncEnd(this.RaceWaitAndClick.name);
                    reject(ex);
                });
            }));
        });
    }
    WaitForThenClick(selectorAr, targetDoc) {
        return new Promise((resolve, reject) => RecipeBasics_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForThenClick.name);
            if (targetDoc) {
                var found = null;
                var iterationJr = new IterationDrone_IterationDrone(this.Logger, this.WaitForThenClick.name);
                while (!found && iterationJr.DecrementAndKeepGoing()) {
                    for (var idx = 0; idx < selectorAr.length; idx++) {
                        found = targetDoc.ContentDoc.querySelector(selectorAr[idx]);
                        if (found) {
                            this.Logger.LogVal('found target', selectorAr[idx]);
                            break;
                        }
                    }
                    if (found) {
                        this.Logger.Log('clicking');
                        try {
                            found.click();
                            resolve();
                        }
                        catch (err) {
                            reject(err);
                        }
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
            }
            else {
                reject('no target doc');
            }
            if (!found && iterationJr.IsExhausted) {
                reject(iterationJr.IsExhaustedMsg);
            }
            this.Logger.FuncEnd(this.WaitForThenClick.name);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/TabManager.js
var TabManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class TabManager_BrowserTabAgent {
    constructor(logger, scUrlAgent, settingsAgent) {
        this.Logger = logger;
        this.Logger.InstantiateStart(TabManager_BrowserTabAgent.name);
        this.ScUrlAgent = scUrlAgent;
        this.SettingsAgent = settingsAgent;
        this.RecipeBasics = new RecipeBasics_RecipeBasics(this.Logger);
        this.Logger.InstantiateEnd(TabManager_BrowserTabAgent.name);
    }
    GetFullUrl() {
        return this.ScUrlAgent.BuildFullUrlFromParts();
    }
    SetQueryStringKeyValue(qsKey, qsValue) {
        this.ScUrlAgent.SetParameterValueByKey(qsKey, qsValue);
    }
    GetScUrlAgent() {
        return this.ScUrlAgent;
    }
    GetWindowType() {
        return this.ScUrlAgent.GetScWindowType();
    }
    CreateNewTab(tabUrl) {
        return TabManager_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => TabManager_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.CreateNewTab.name, tabUrl.AbsUrl);
                yield browser.tabs.create({ url: tabUrl.AbsUrl })
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }));
        });
    }
    ChangeLocationSwitchBoard(desiredPageType) {
        this.Logger.FuncStart(this.ChangeLocationSwitchBoard.name, 'desired = ' + ScWindowType[desiredPageType]);
        var iteration = new IterationDrone_IterationDrone(this.Logger, this.ChangeLocationSwitchBoard.name);
        if (iteration.DecrementAndKeepGoing()) {
            var currentScWindowType = this.ScUrlAgent.GetScWindowType();
            if (currentScWindowType === ScWindowType.LoginPage) {
                var self = this;
            }
            else if (currentScWindowType === ScWindowType.Launchpad || currentScWindowType === ScWindowType.ContentEditor || currentScWindowType === ScWindowType.Desktop) {
                var self = this;
                this.ScUrlAgent.SetFilePathFromWindowType(desiredPageType);
                var absUrl = this.ScUrlAgent.BuildFullUrlFromParts();
                var callBackOnSuccessfulHrefChange = function () {
                    self.Logger.Log('Callback triggered');
                    self.ChangeLocationSwitchBoard(desiredPageType);
                };
                this.RecipeBasics.TabChainSetHrefWaitForComplete(absUrl)
                    .then(() => {
                })
                    .then(() => callBackOnSuccessfulHrefChange);
            }
        }
        this.Logger.FuncEnd(this.ChangeLocationSwitchBoard.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Drones/AccordianDrone/AccordianDrone.js

class AccordianDrone_AccordianDrone {
    constructor(loggerAgent, settingsAgent, uiElem, oneSetting) {
        this.Logger = loggerAgent;
        this.SettingsAgent = settingsAgent;
        this.AssociatedSetting = oneSetting;
        this.AssociatedElement = uiElem;
        this.Init();
    }
    Init() {
        this.AssociatedBodyElem = this.GetaccordionBodyElem(this.AssociatedElement);
        if (this.AssociatedBodyElem) {
            this.AddListener();
        }
        else {
            this.Logger.LogAsJsonPretty('this.AssociatedElement', this.AssociatedElement);
            this.Logger.ErrorAndThrow(this.DroneRestoreAccordionState.name, 'Sibling not found ' + this.AssociatedSetting.FriendlySetting);
        }
    }
    AddListener() {
        if (this.AssociatedElement) {
            let self = this;
            this.AssociatedElement.addEventListener('click', (evt) => {
                self.ToggleAccordion(evt);
            });
        }
    }
    DroneRestoreAccordionState(oneSetting) {
        if (this.AssociatedBodyElem) {
            this.SetAccordionClass(this.AssociatedBodyElem, oneSetting.ValueAsBool());
        }
    }
    ToggleAccordion(evt) {
        this.Logger.FuncStart(this.ToggleAccordion.name);
        if (this.AssociatedBodyElem && this.AssociatedSetting) {
            if (this.AssociatedSetting) {
                var newVal = !(this.AssociatedSetting.ValueAsBool());
                this.SetAccordionClass(this.AssociatedBodyElem, newVal);
                this.SettingsAgent.SetByKey(this.AssociatedSetting.SettingKey, newVal);
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.ToggleAccordion.name, 'did not find sib');
        }
        this.Logger.FuncEnd(this.ToggleAccordion.name);
    }
    GetaccordionBodyElem(sib) {
        var toReturn;
        if (sib) {
            var siblings = sib.parentElement.getElementsByClassName('accordion-content');
            if (siblings) {
                var toReturn = siblings[0];
            }
            else {
                this.Logger.ErrorAndContinue(this.GetaccordionBodyElem.name, 'Sibling not found');
            }
        }
        return toReturn;
    }
    SetAccordionClass(targetElem, isCollapsed) {
        if (!isCollapsed) {
            targetElem.classList.remove(PopConst.Const.ClassNames.HS.Collapsed);
        }
        else {
            targetElem.classList.add(PopConst.Const.ClassNames.HS.Collapsed);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Drones/AccordianDrone/AccordianManager.js
var AccordianManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class AccordianManager_AccordianManager {
    constructor(loggerAgent, settingsAgent) {
        this.AllAccordians = [];
        this.Logger = loggerAgent;
        this.SettingsAgent = settingsAgent;
    }
    RestoreAccordionState(oneSetting) {
        return AccordianManager_awaiter(this, void 0, void 0, function* () {
            if (oneSetting) {
                let foundAccordian = this.GetAccordianByKey(oneSetting);
                if (foundAccordian) {
                    foundAccordian.DroneRestoreAccordionState(oneSetting);
                }
                else {
                    this.Logger.Log('No accordion found for ' + oneSetting.FriendlySetting);
                }
            }
            else {
                this.Logger.Log('No setting provided ');
            }
        });
    }
    AddAccordianDrone(oneSetting, uiElem) {
        let newAccordianDrone = new AccordianDrone_AccordianDrone(this.Logger, this.SettingsAgent, uiElem, oneSetting);
        this.AllAccordians.push(newAccordianDrone);
    }
    GetAccordianByKey(oneSetting) {
        let toReturn = null;
        for (var idx = 0; idx < this.AllAccordians.length; idx++) {
            let candidate = this.AllAccordians[idx];
            if (candidate.AssociatedSetting.SettingKey === oneSetting.SettingKey) {
                toReturn = candidate;
                break;
            }
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/AutoBuild/BuildNum.js
const BuiltDateStamp = 1600105773591;


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/Agents/VisiblityTestResult.js
class VisiblityTestResult {
    constructor(testNameFriendly) {
        this.Passes = true;
        this.FriendlyFailReason = '';
        this.TestNameFriendly = testNameFriendly;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Classes/StateHelpers.js

class StateHelpers_StateHelpers extends LoggableBase {
    GetActiveTreeNodeFromStateOfTree(stateOfTree) {
        return stateOfTree.StateOfTreeNodes[stateOfTree.ActiveTreeNodeIndex];
    }
    GetActiveTreeNodeFromStateOfContentEditor(stateOfContentEditor) {
        return this.GetActiveTreeNodeFromStateOfTree(stateOfContentEditor.StateOfTree);
    }
    GetActiveFrameFromStateOfDesktop(stateOfDesktop) {
        return stateOfDesktop.StateOfFrames[stateOfDesktop.IndexOfActiveFrame];
    }
    GetActiveContentEditFromStateOfDesktop(stateOfDesktop) {
        let toReturn = null;
        if (stateOfDesktop && stateOfDesktop.IndexOfActiveFrame > -1) {
            return stateOfDesktop.StateOfFrames[stateOfDesktop.IndexOfActiveFrame].StateOfContentEditor;
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/UiManager/ButtonVisibilityTests.js






class ButtonVisibilityTests_ButtonVisibilityTester extends LoggableBase {
    constructor(logger) {
        super(logger);
        this.StateHelpers = new StateHelpers_StateHelpers(this.Logger);
    }
    VisibilityTestWindowType(windowType, currentWindowType) {
        let OneResult = new VisiblityTestResult(this.VisibilityTestWindowType.name);
        OneResult.Passes = windowType === currentWindowType;
        if (!OneResult.Passes) {
            OneResult.FriendlyFailReason = 'Window types did not match: ' + StaticHelpers_StaticHelpers.ScWindowTypeFriendly(windowType) + ' vs ' + StaticHelpers_StaticHelpers.ScWindowTypeFriendly(currentWindowType);
        }
        return OneResult;
    }
    VisibilityTestSnapShotSelected(currSelSnapshot) {
        let OneResult = new VisiblityTestResult(this.VisibilityTestSnapShotSelected.name);
        OneResult.Passes = currSelSnapshot && currSelSnapshot.AsBracedGuid() !== GuidData_GuidData.GetEmptyGuid().AsBracedGuid();
        if (!OneResult.Passes) {
            OneResult.FriendlyFailReason = "No snapshot selected";
        }
        return OneResult;
    }
    VisibilityTestSnapShotable(stateOfSitecoreWindow) {
        return this.VisibilityTestActiveCeNode(stateOfSitecoreWindow);
    }
    VisibilityTestActiveCeNode(stateOfSitecoreWindow) {
        let visiblityTestResult = new VisiblityTestResult(this.VisibilityTestActiveCeNode.name);
        visiblityTestResult.Passes = stateOfSitecoreWindow.Meta.WindowType === ScWindowType.ContentEditor ||
            ((stateOfSitecoreWindow.Meta.WindowType === ScWindowType.Desktop) && stateOfSitecoreWindow.States.StateOfDesktop.IndexOfActiveFrame > -1);
        if (!visiblityTestResult.Passes) {
            visiblityTestResult.FriendlyFailReason = 'Requires Content Editor or Desktop';
        }
        return visiblityTestResult;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/Agents/IUiVisiblityTestResult.js
class VisiblityTestResults {
    constructor() {
        this.TestResults = [];
    }
    HasFailures() {
        let oneFailed = false;
        this.TestResults.forEach((oneTest) => oneFailed = oneFailed || !oneTest.Passes);
        return oneFailed;
    }
    GetFriendlyFails() {
        let toReturn = '';
        this.TestResults.forEach((oneTest) => {
            if (!oneTest.Passes) {
                toReturn = ' ' + oneTest.FriendlyFailReason;
            }
        });
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/UiModules/CommandButtonModule.js






class CommandButtonModule_CommandButtonModule extends LoggableBase {
    constructor(loggerAgent, oneCommand, tester) {
        super(loggerAgent);
        this.Command = oneCommand;
        this.Tester = tester;
        if (this.Command.PlaceHolderSelector && this.Command.PlaceHolderSelector.length > 0) {
            this.PlaceHolderUiElem = document.querySelector(oneCommand.PlaceHolderSelector);
            if (this.Command.ModuleType === ModuleType.Button) {
                this.BuildModuleButton();
            }
        }
    }
    Init() {
    }
    BuildButtonOverlayBackFill() {
        let divElem = document.createElement("div");
        divElem.classList.add("back-fill");
        return divElem;
    }
    BuildButtonTextContainer() {
        this.ElemButtonBackText = document.createElement("div");
        this.ElemButtonBackText.classList.add("back-text");
        this.ElemButtonBackText.innerText = 'here is why it is disabled';
        return this.ElemButtonBackText;
    }
    BuildButtonOverlay() {
        this.ElemDivBtnOverlay = document.createElement("div");
        this.ElemDivBtnOverlay.classList.add("btn-overlay");
        let backFill = this.BuildButtonOverlayBackFill();
        this.BuildButtonTextContainer();
        this.ElemDivBtnOverlay.appendChild(backFill);
        this.ElemDivBtnOverlay.appendChild(this.ElemButtonBackText);
    }
    BuildButtonElem() {
        this.ElemButton = document.createElement("button");
        this.ElemButton.classList.add("icon");
        this.ElemButton.classList.add(this.Command.IconClassName);
        this.ElemButton.innerText = this.Command.InnerText;
        this.ElemButton.type = "button";
    }
    BuildModuleButton() {
        this.Logger.FuncStart(this.BuildModuleButton.name, this.Command.InnerText + ' ' + MenuCommand[this.Command.Command]);
        if (this.PlaceHolderUiElem) {
            this.BuildButtonElem();
            this.BuildButtonOverlay();
            this.PlaceHolderUiElem.classList.add('btn-container');
            this.PlaceHolderUiElem.appendChild(this.ElemDivBtnOverlay);
            this.PlaceHolderUiElem.appendChild(this.ElemButton);
        }
        else {
            this.Logger.ErrorAndContinue(CommandButtonModule_CommandButtonModule.name, 'Could not find ' + this.Command.PlaceHolderSelector);
        }
        this.Logger.FuncEnd(this.BuildModuleButton.name);
    }
    Hydrate(stateOfSitecoreWindow, currentWindowType, selectedSnapshot) {
        this.StateOfSitecoreWindow = stateOfSitecoreWindow;
        this.CurrentWindowType = currentWindowType;
        this.SelectedSnapshot = selectedSnapshot;
    }
    RefreshUi() {
        if (this.PlaceHolderUiElem) {
            let allresults = this.TestAgainstAllSetControllers();
            this.SetCommandButtonVisibility(allresults);
        }
    }
    SetCommandButtonVisibility(allresults) {
        if (allresults && this.ElemButton) {
            if (!allresults.HasFailures()) {
                this.ElemButton.classList.remove('disabled');
                this.ElemButton.removeAttribute('disabled');
                if (this.ElemDivBtnOverlay) {
                    this.ElemDivBtnOverlay.style.display = 'none';
                }
            }
            else {
                this.ElemButton.classList.add('disabled');
                this.ElemButton.setAttribute('disabled', 'disabled');
                if (this.ElemDivBtnOverlay) {
                    this.ElemDivBtnOverlay.style.display = 'block';
                }
                if (this.ElemButtonBackText) {
                    this.ElemButtonBackText.innerText = allresults.GetFriendlyFails();
                }
            }
        }
        else {
            this.Logger.ErrorAndContinue(this.SetCommandButtonVisibility.name, 'targetButton is NULL');
        }
    }
    TestAgainstAllSetControllers() {
        let allResults = new VisiblityTestResults();
        if (this.Command.VisibilityControllers.length > 0) {
            for (var jdx = 0; jdx < this.Command.VisibilityControllers.length; jdx++) {
                let oneControl = this.Command.VisibilityControllers[jdx];
                switch (oneControl) {
                    case VisibilityType.Desktop:
                        allResults.TestResults.push(this.Tester.VisibilityTestWindowType(ScWindowType.Desktop, this.CurrentWindowType));
                        break;
                    case VisibilityType.ActiveCeNode:
                        allResults.TestResults.push(this.Tester.VisibilityTestActiveCeNode(this.StateOfSitecoreWindow));
                        break;
                    case VisibilityType.ContentEditor:
                        allResults.TestResults.push(this.Tester.VisibilityTestWindowType(ScWindowType.ContentEditor, this.CurrentWindowType));
                        break;
                    case VisibilityType.Edit:
                        allResults.TestResults.push(this.Tester.VisibilityTestWindowType(ScWindowType.Edit, this.CurrentWindowType));
                        break;
                    case VisibilityType.Launchpad:
                        allResults.TestResults.push(this.Tester.VisibilityTestWindowType(ScWindowType.Launchpad, this.CurrentWindowType));
                        break;
                    case VisibilityType.LoginPage:
                        allResults.TestResults.push(this.Tester.VisibilityTestWindowType(ScWindowType.LoginPage, this.CurrentWindowType));
                        break;
                    case VisibilityType.Normal:
                        allResults.TestResults.push(this.Tester.VisibilityTestWindowType(ScWindowType.Normal, this.CurrentWindowType));
                        break;
                    case VisibilityType.Preview:
                        allResults.TestResults.push(this.Tester.VisibilityTestWindowType(ScWindowType.Preview, this.CurrentWindowType));
                        break;
                    case VisibilityType.SnapShotable:
                        allResults.TestResults.push(this.Tester.VisibilityTestSnapShotable(this.StateOfSitecoreWindow));
                        break;
                    case VisibilityType.SnapShotSelected:
                        allResults.TestResults.push(this.Tester.VisibilityTestSnapShotSelected(this.SelectedSnapshot));
                        break;
                    case VisibilityType.NotLogin:
                        break;
                    case VisibilityType.CommandIsRunning:
                        break;
                    case VisibilityType.Unknown:
                        this.Logger.ErrorAndThrow(this.TestAgainstAllSetControllers.name, 'unknown visibility type');
                        break;
                    default:
                        this.Logger.ErrorAndThrow(this.TestAgainstAllSetControllers.name, 'unknown visibility type');
                        break;
                }
                if (allResults.HasFailures()) {
                    break;
                }
            }
        }
        return allResults;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/UiButtonStateManager.js



class UiButtonStateManager_UiStateManager extends LoggableBase {
    constructor(logger, allMenuCommands) {
        super(logger);
        this.AllMenuCommandButtons = [];
        this.Logger.InstantiateStart(UiButtonStateManager_UiStateManager.name);
        this.AllMenuCommands = allMenuCommands;
        this.Logger.InstantiateEnd(UiButtonStateManager_UiStateManager.name);
    }
    InitButtonStateManager() {
        this.Tester = new ButtonVisibilityTests_ButtonVisibilityTester(this.Logger);
        this.BuildCommandButtons();
    }
    BuildCommandButtons() {
        this.AllMenuCommands.forEach((oneCommand) => {
            let newButtonCommandModule = new CommandButtonModule_CommandButtonModule(this.Logger, oneCommand, this.Tester);
            this.AllMenuCommandButtons.push(newButtonCommandModule);
        });
    }
    HydrateUiButtonState(stateOfSitecoreWindow, selectSnapShotId) {
        let currentWindowType = stateOfSitecoreWindow.Meta.WindowType;
        this.AllMenuCommandButtons.forEach((commandButton) => commandButton.Hydrate(stateOfSitecoreWindow, currentWindowType, selectSnapShotId));
    }
    RefreshUiButtonVisibilityStatus() {
        this.Logger.FuncStart(this.RefreshUiButtonVisibilityStatus.name, this.AllMenuCommands.length);
        this.AllMenuCommandButtons.forEach((oneButtonModule) => oneButtonModule.RefreshUi());
        this.Logger.FuncEnd(this.RefreshUiButtonVisibilityStatus.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/UiModules/CancelButtonModule.js
class CancelButtonModule {
    constructor(selector, loggerAgent) {
        this.Logger = loggerAgent;
        this.Selector = selector;
    }
    Init() {
    }
    RefreshUi() {
    }
    __GetCancelButton() {
        return document.getElementById(this.Selector);
    }
    SetCancelFlag() {
        var btn = this.__GetCancelButton();
        if (btn) {
            btn.classList.add('red');
        }
    }
    ClearCancelFlag() {
        var btn = this.__GetCancelButton();
        if (btn) {
            btn.classList.remove('red');
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/UiModules/SelectSnapshotModule/SelectSnapshotModule.js












class SelectSnapshotModule_SelectSnapshotModule_Subject extends HindeSiteEvent_Subject_HindeSiteEvent_Subject {
    constructor(logger) {
        super(logger, SelectSnapshotModule_SelectSnapshotModule_Subject.name);
    }
}
class SelectSnapshotModule_SelectSnapshotModule extends LoggableBase {
    constructor(selector, logger) {
        super(logger);
        this.Selector = selector;
        this.SelectSnapshotModule_Subject = new SelectSnapshotModule_SelectSnapshotModule_Subject(this.Logger);
        this.StateHelpers = new StateHelpers_StateHelpers(this.Logger);
    }
    Init() {
        this.AssignOnChangeEvent(PopConst.Const.Selector.HS.SelStateSnapShot);
    }
    AssignOnChangeEvent(selector) {
        this.Logger.FuncStart(this.AssignOnChangeEvent.name, selector);
        var targetElem = document.querySelector(selector);
        if (!targetElem) {
            this.Logger.ErrorAndThrow(this.AssignOnChangeEvent.name, 'No Id: ' + selector);
        }
        else {
            targetElem.onchange = (() => {
                let self = this;
                let payload = {};
                this.SelectSnapshotModule_Subject.NotifyObservers(payload);
            });
        }
        this.Logger.FuncEnd(this.AssignOnChangeEvent.name, selector);
    }
    HydrateStorageSnapShotModule(stateOfSitecoreWindow, states, stateOfStorageSnapShots) {
        this.StateOfSitecoreWindow = stateOfSitecoreWindow;
        this.StateOfStorageSnapShots = stateOfStorageSnapShots;
        this.PopulateStateOfSnapShotSelectElement();
    }
    RefreshUi() {
    }
    __getSelectElem() {
        return window.document.querySelector(this.Selector);
    }
    SelectHeaderStr(prefix) {
        let toReturn = StaticHelpers_StaticHelpers.BufferString('', 4, BufferChar.Period, BufferDirection.right)
            + StaticHelpers_StaticHelpers.BufferString('Time Stamp', PopConst.Const.SnapShotFormat.lenTimestamp, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('Type', PopConst.Const.SnapShotFormat.lenPageType, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('Nickname', PopConst.Const.SnapShotFormat.lenNickname, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('Main Sec', PopConst.Const.SnapShotFormat.MainSectionNode, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('Active', PopConst.Const.SnapShotFormat.lenActiveNode, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('Fav.', PopConst.Const.SnapShotFormat.lenFavorite, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('Id', PopConst.Const.SnapShotFormat.lenShortId, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('#CE', PopConst.Const.SnapShotFormat.lenCeCount, BufferChar.Period, BufferDirection.right);
        return toReturn;
    }
    GetSelectSnapshotId() {
        let currentVal = this.__getSelectElem().value;
        let toReturn;
        if (currentVal) {
            toReturn = Guid_Guid.ParseGuid(currentVal, true);
        }
        else {
            toReturn = GuidData_GuidData.GetEmptyGuid();
        }
        return toReturn;
    }
    WriteHeaders() {
        var toReturn = {
            Auto: null,
            Favorite: null,
            AutoTitle: null,
            FavoriteTitle: null,
            Manual: null,
            ManualTitle: null
        };
        toReturn.Auto = window.document.createElement(SharedConst.Const.KeyWords.Html.optgroup);
        toReturn.Auto.label = this.SelectHeaderStr('');
        toReturn.Auto.id = PopConst.Const.ElemId.HS.SelectHeaderAuto;
        toReturn.AutoTitle = window.document.createElement(SharedConst.Const.KeyWords.Html.optgroup);
        toReturn.AutoTitle.label = 'Auto Snap Shots';
        toReturn.AutoTitle.id = PopConst.Const.ElemId.HS.SelectHeaderAutoTitle;
        toReturn.AutoTitle.classList.add('title');
        toReturn.Manual = window.document.createElement(SharedConst.Const.KeyWords.Html.optgroup);
        toReturn.Manual.label = this.SelectHeaderStr('');
        toReturn.Manual.id = PopConst.Const.ElemId.HS.SelectHeaderManual;
        toReturn.ManualTitle = window.document.createElement(SharedConst.Const.KeyWords.Html.optgroup);
        toReturn.ManualTitle.label = 'Manual Snap Shots';
        toReturn.ManualTitle.id = PopConst.Const.ElemId.HS.SelectHeaderManualTitle;
        toReturn.ManualTitle.classList.add('title');
        toReturn.Favorite = window.document.createElement(SharedConst.Const.KeyWords.Html.optgroup);
        toReturn.Favorite.label = this.SelectHeaderStr('');
        toReturn.Favorite.id = PopConst.Const.ElemId.HS.SelectHeaderFavorite;
        toReturn.FavoriteTitle = window.document.createElement(SharedConst.Const.KeyWords.Html.optgroup);
        toReturn.FavoriteTitle.label = 'Favorite Snap Shots';
        toReturn.FavoriteTitle.id = PopConst.Const.ElemId.HS.SelectHeaderFavoriteTitle;
        toReturn.FavoriteTitle.classList.add('title');
        return toReturn;
    }
    SelectChanged() {
        this.Logger.FuncStart(this.SelectChanged.name);
        this.Logger.FuncEnd(this.SelectChanged.name);
    }
    PopulateStateOfSnapShotSelectElement() {
        this.Logger.FuncStart(this.PopulateStateOfSnapShotSelectElement.name);
        let priorValue = this.GetSelectSnapshotId();
        if (this.StateOfStorageSnapShots && this.StateOfStorageSnapShots.SnapShots) {
            let snapShots = this.StateOfStorageSnapShots.SnapShots;
            var targetSel = this.__getSelectElem();
            if (targetSel) {
                this.CleanExistingSelection(targetSel);
                var headers = this.WriteHeaders();
                if (snapShots && snapShots.length > 0) {
                    for (var idx = 0; idx < snapShots.length; idx++) {
                        var data = snapShots[idx];
                        let el = this.BuildOneSnapshot(data, priorValue, idx);
                        this.AppendSnapShotToCorrectGroup(data, el, headers);
                    }
                }
                targetSel.appendChild(headers.FavoriteTitle);
                targetSel.appendChild(headers.Favorite);
                targetSel.appendChild(headers.ManualTitle);
                targetSel.appendChild(headers.Manual);
                targetSel.appendChild(headers.AutoTitle);
                targetSel.appendChild(headers.Auto);
            }
        }
        else {
            this.Logger.Log('no snap shots');
        }
        this.Logger.FuncEnd(this.PopulateStateOfSnapShotSelectElement.name);
    }
    GetFirstDataWithActiveNode(data) {
        let toReturn = {
            StateOfContentEditor: null,
            activeTreeNode: null
        };
        if ((data.Meta.WindowType === ScWindowType.Desktop) && data.States.StateOfDesktop && (data.States.StateOfDesktop.IndexOfActiveFrame > -1) && data.States.StateOfDesktop.StateOfFrames) {
            let activeFrame = this.StateHelpers.GetActiveFrameFromStateOfDesktop(data.States.StateOfDesktop);
            toReturn.StateOfContentEditor = activeFrame.StateOfContentEditor;
            toReturn.activeTreeNode = this.StateHelpers.GetActiveTreeNodeFromStateOfContentEditor(activeFrame.StateOfContentEditor);
        }
        else if ((data.Meta.WindowType === ScWindowType.ContentEditor) && data.States.StateOfContentEditor && data.States.StateOfContentEditor.StateOfTree) {
            toReturn.activeTreeNode = this.StateHelpers.GetActiveTreeNodeFromStateOfContentEditor(toReturn.StateOfContentEditor);
        }
        else {
            this.Logger.WarningAndContinue(this.GetFirstDataWithActiveNode.name, 'Not implemented ' + StaticHelpers_StaticHelpers.ScWindowTypeFriendly(data.Meta.WindowType));
        }
        return toReturn;
    }
    TimeNicknameFavStr(data) {
        var typeStr = '';
        if (data.Meta.WindowType === ScWindowType.ContentEditor) {
            typeStr = 'Cont Ed';
        }
        else if (data.Meta.WindowType === ScWindowType.Desktop) {
            typeStr = 'Desktop';
        }
        var activeCeNode = '';
        let MainSectionNode = '';
        let candidateCe = this.GetFirstDataWithActiveNode(data);
        if (candidateCe && candidateCe.activeTreeNode && candidateCe.activeTreeNode.FriendlyTreeNode) {
            activeCeNode = candidateCe.activeTreeNode.FriendlyTreeNode.trim();
            if (candidateCe.StateOfContentEditor.StateOfTree.StateOfTreeNodes.length >= 2) {
                MainSectionNode = candidateCe.StateOfContentEditor.StateOfTree.StateOfTreeNodes[1].FriendlyTreeNode.trim();
            }
        }
        else {
            MainSectionNode = 'todo ' + this.TimeNicknameFavStr.name;
        }
        let toReturn = StaticHelpers_StaticHelpers.BufferString(data.Friendly.TimeStamp, PopConst.Const.SnapShotFormat.lenTimestamp, BufferChar.space, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString(typeStr, PopConst.Const.SnapShotFormat.lenPageType, BufferChar.Nbsp, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString(data.Friendly.NickName, PopConst.Const.SnapShotFormat.lenNickname, BufferChar.Nbsp, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString(MainSectionNode, PopConst.Const.SnapShotFormat.MainSectionNode, BufferChar.Nbsp, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString(activeCeNode, PopConst.Const.SnapShotFormat.lenActiveNode, BufferChar.Nbsp, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString((data.Meta.Flavor === SnapShotFlavor.Favorite ? '*' : ''), PopConst.Const.SnapShotFormat.lenFavorite, BufferChar.Nbsp, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString(Guid_Guid.AsShort(data.Meta.SnapshotId), PopConst.Const.SnapShotFormat.lenShortId, BufferChar.Nbsp, BufferDirection.right);
        return toReturn;
    }
    BuildOneSnapshot(data, prior, idx) {
        let el = window.document.createElement('option');
        let timeNicknameFavStr = this.TimeNicknameFavStr(data);
        el.innerHTML = timeNicknameFavStr;
        if (data.Meta.Flavor === SnapShotFlavor.Favorite) {
            el.classList.add('favorite');
        }
        el.value = data.Meta.SnapshotId.Raw;
        if ((data.Meta.SessionId && prior && data.Meta.SnapshotId.Raw === prior.Raw) ||
            (idx === 0 && !prior)
            ||
                (idx === 0 && prior.Raw === GuidData_GuidData.GetEmptyGuid().Raw)) {
            el.selected = true;
        }
        return el;
    }
    AppendSnapShotToCorrectGroup(data, el, headers) {
        if (data.Meta.Flavor === SnapShotFlavor.Autosave) {
            headers.Auto.appendChild(el);
        }
        else if (data.Meta.Flavor === SnapShotFlavor.Favorite) {
            headers.Favorite.appendChild(el);
        }
        else {
            headers.Manual.appendChild(el);
        }
    }
    cleanOneGroup(targetSel, targetId) {
        var optGroup = targetSel.querySelector('[id=' + targetId + ']');
        if (optGroup) {
            optGroup.remove();
        }
    }
    CleanExistingSelection(targetSel) {
        this.Logger.FuncStart(this.CleanExistingSelection.name);
        this.cleanOneGroup(targetSel, PopConst.Const.ElemId.HS.SelectHeaderAuto);
        this.cleanOneGroup(targetSel, PopConst.Const.ElemId.HS.SelectHeaderAutoTitle);
        this.cleanOneGroup(targetSel, PopConst.Const.ElemId.HS.SelectHeaderFavorite);
        this.cleanOneGroup(targetSel, PopConst.Const.ElemId.HS.SelectHeaderFavoriteTitle);
        this.cleanOneGroup(targetSel, PopConst.Const.ElemId.HS.SelectHeaderManual);
        this.cleanOneGroup(targetSel, PopConst.Const.ElemId.HS.SelectHeaderManualTitle);
        targetSel.options.length = 0;
        this.Logger.FuncEnd(this.CleanExistingSelection.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/UiModules/SettingsModule/SettingsModule.js

class SettingsModule_SettingsModule {
    constructor(logger, settingsAgent, accordianManager) {
        this.Logger = logger;
        this.SettingsAgent = settingsAgent;
        this.AccordianManager = accordianManager;
    }
    Init() {
    }
    RefreshUi() {
        this.Logger.FuncStart(this.RefreshUi.name);
        this.refreshUiSettings();
        this.Logger.FuncEnd(this.RefreshUi.name);
    }
    refreshUiSettings() {
        this.Logger.FuncStart(this.refreshUiSettings.name);
        let allSettings = this.SettingsAgent.GetAllSettings();
        for (var idx = 0; idx < allSettings.length; idx++) {
            var oneSetting = allSettings[idx];
            if (oneSetting.UiSelector) {
                var foundElem = document.querySelector(oneSetting.UiSelector);
                if (foundElem) {
                    if (oneSetting.DataType === SettingType.BoolCheckBox) {
                        let valueToDisplay = oneSetting.ValueAsBool();
                        foundElem.checked = valueToDisplay;
                    }
                    else if (oneSetting.DataType === SettingType.Accordion) {
                        this.AccordianManager.RestoreAccordionState(oneSetting);
                    }
                    else if (oneSetting.DataType == SettingType.Number) {
                        let valueToDisplay = oneSetting.ValueAsInt();
                        foundElem.value = valueToDisplay.toString();
                    }
                }
                else {
                    this.Logger.LogAsJsonPretty('oneSetting', oneSetting);
                    this.Logger.ErrorAndThrow(this.RefreshUi.name, 'ui element not found: ' + oneSetting.UiSelector);
                }
            }
        }
        this.Logger.FuncEnd(this.refreshUiSettings.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/UiModules/UiFeedbackModules/UiFeedbackModuleBase/UiFeedbackModuleBase.js


class UiFeedbackModuleBase_UiFeedbackModuleBase extends LoggableBase {
    constructor(selector, logger) {
        super(logger);
        this.indentedLineBreak = '<br/>&nbsp;&nbsp;&nbsp;';
        this.lineBreak = '<br/>';
        this.ElementSelector = selector;
    }
    __getFeedbackElem() {
        if (!this.__targetElement) {
            this.__targetElement = document.querySelector(this.ElementSelector);
            if (!this.__targetElement) {
                this.Logger.ErrorAndThrow(this.__getFeedbackElem.name, 'target not found: ' + this.ElementSelector);
            }
        }
        return this.__targetElement;
    }
    AddHtmlString(htmlText) {
        if (htmlText) {
            this.__getFeedbackElem().insertAdjacentHTML(SharedConst.Const.KeyWords.Html.beforeend, htmlText);
        }
        else {
            this.Logger.ErrorAndThrow(this.AddHtmlString.name, 'htmlText');
        }
    }
    WriteManyLines(strAr) {
        if (strAr) {
            for (var ldx = 0; ldx < strAr.length; ldx++) {
                this.WriteSingleLine(strAr[ldx]);
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.WriteManyLines.name, 'No strAr');
        }
    }
    ClearFeedbackElem() {
        var elem = this.__getFeedbackElem();
        if (elem) {
            elem.innerHTML = '';
        }
        else {
            this.Logger.ErrorAndThrow(this.ClearFeedbackElem.name, 'No feedback elem found');
        }
    }
    ConvertIndents(input) {
        let toReturn = '';
        for (var idx = 0; idx < input.length; idx++) {
            let oneChar = input[idx];
            if (oneChar === ' ') {
                toReturn += '&nbsp;';
            }
            else {
                toReturn += input.substring(idx);
                break;
            }
        }
        return toReturn;
    }
    ConvertLineBreaks(input) {
        return input.replace(/\r?\n/g, "<br/>");
    }
    ConvertTabs(input) {
        return input.replace(/\t/g, "&nbsp;&nbsp;xxxxxx");
    }
    WriteSingleLine(text) {
        var ta = this.__getFeedbackElem();
        if (ta) {
            ta.innerHTML += this.ConvertIndents(this.ConvertTabs(this.ConvertLineBreaks(text)) + '<br/>');
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/UiModules/UiFeedbackModules/FeedbackModuleBrowserState/FeedbackModuleBrowserState.js



class FeedbackModuleBrowserState_FeedbackModuleBrowserState extends UiFeedbackModuleBase_UiFeedbackModuleBase {
    constructor(selector, loggerAgent) {
        super(selector, loggerAgent);
    }
    Init() {
    }
    RefreshUi() {
    }
    HydrateFeedackBrowserState(scUrlAgent) {
        var targetCurrStateDiv = window.document.querySelector(PopConst.Const.Selector.HS.FeedbackBrowserState);
        var allStateText = 'Browser State' + this.lineBreak;
        allStateText += this.lineBreak + 'URL Parts';
        allStateText += this.indentedLineBreak + '<strong>Page Type:</strong> ' + StaticHelpers_StaticHelpers.ScWindowTypeFriendly(scUrlAgent.GetScWindowType());
        let UrlParts = scUrlAgent.GetUrlParts();
        allStateText += this.indentedLineBreak + 'Url Full (raw  ): ' + UrlParts.OriginalRaw;
        allStateText += this.indentedLineBreak + 'Protocol: ' + UrlParts.Protocol;
        allStateText += this.indentedLineBreak + 'Host & Port: ' + UrlParts.HostAndPort;
        allStateText += this.indentedLineBreak + 'File Path: ' + UrlParts.FilePath;
        targetCurrStateDiv.innerHTML = allStateText;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/UiModules/UiFeedbackModules/FeedbackModuleContentState/FeedbackModuleContentState.js

class FeedbackModuleContentState_FeedbackModuleContentState extends UiFeedbackModuleBase_UiFeedbackModuleBase {
    constructor(selector, loggerAgent) {
        super(selector, loggerAgent);
    }
    Init() {
    }
    RefreshUi() {
    }
    HydrateContentStateFeedack(stateOfSitecoreWindow) {
        var allStateText = '';
        allStateText += JSON.stringify(stateOfSitecoreWindow, null, 1);
        this.WriteSingleLine(allStateText);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/UiModules/UiFeedbackModules/FeedbackModuleMessages/FeedbackModuleMessages.js

class FeedbackModuleMessages_FeedbackModuleMessages_Observer extends UiFeedbackModuleBase_UiFeedbackModuleBase {
    constructor(selector, loggerAgent) {
        super(selector, loggerAgent);
    }
    UpdateAsync(payload) {
        this.Logger.WarningAndContinue(this.UpdateAsync + ' ' + FeedbackModuleMessages_FeedbackModuleMessages_Observer.name, 'not implemented yet');
    }
    Init() {
    }
    UpdateMsgStatusStack(textToShow) {
        this.AddHtmlString(textToShow + '</br>');
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/UiModules/UiFeedbackModules/FeedbackModulePopUpState/FeedbackModulePopUpState.js


class FeedbackModulePopUpState_FeedbackModulePopUpState extends UiFeedbackModuleBase_UiFeedbackModuleBase {
    constructor(selector, loggerAgent) {
        super(selector, loggerAgent);
    }
    Init() {
    }
    RefreshUi() {
    }
    HydratePopUpStateUI(selectSnapShot) {
        var allStateText = 'Pop Up State:' + this.lineBreak;
        allStateText += 'Select Snapshot: ' + Guid_Guid.AsShort(selectSnapShot);
        this.AddHtmlString(allStateText);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/UiModules/UiFeedbackModules/UiFeedbackModuleLog/UiFeedbackModuleLog.js

class UiFeedbackModuleLog_UiFeedbackModuleLog extends UiFeedbackModuleBase_UiFeedbackModuleBase {
    constructor(selector, logger) {
        super(selector, logger);
        this.FriendlyName = UiFeedbackModuleLog_UiFeedbackModuleLog.name;
    }
    WriteText(text) {
        this.WriteSingleLine(text);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/Desktop/DesktopProxy/Events/UiSelectSnapshotMutatedEvent/UiSelectSnapshotMutatedEvent_Observer.js

class UiSelectSnapshotMutatedEvent_Observer_UiSelectSnapshotMutationEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(logger, owner) {
        super(logger, UiSelectSnapshotMutatedEvent_Observer_UiSelectSnapshotMutationEvent_Observer.name);
        this.Owner = owner;
    }
    UpdateAsync(payload) {
        this.Owner.RefreshUiUIManagerFromSnapShotSelect(payload);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/UiManager/UiManager.js
var UiManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
















class UiManager_UiManager {
    constructor(logger, settingsAgent, tabMan, commandMan) {
        this.MenuEnabled = true;
        this.MenuFocused = true;
        this.OtherFocused = false;
        this.ParentFocused = false;
        this.Logger = logger;
        this.SettingsAgent = settingsAgent;
        this.TabMan = tabMan;
        this.CommandMan = commandMan;
        this.Logger.InstantiateStart(UiManager_UiManager.name);
        this.ButtonModulesManager = new UiButtonStateManager_UiStateManager(this.Logger, this.CommandMan.AllMenuCommands);
        this.AccordianManager = new AccordianManager_AccordianManager(this.Logger, this.SettingsAgent);
        this.BuildModules();
        this.WireEvents();
        this.Logger.InstantiateEnd(UiManager_UiManager.name);
    }
    BuildModules() {
        this.Logger.FuncStart(this.BuildModules.name);
        this.FeedbackModuleLog = new UiFeedbackModuleLog_UiFeedbackModuleLog(PopConst.Const.Selector.HS.FeedbackLogElement, this.Logger);
        this.ModuleFeedbackOfContentState = new FeedbackModuleContentState_FeedbackModuleContentState(PopConst.Const.Selector.HS.FeedbackContentState, this.Logger);
        this.ModuleFeedbackOfBrowserState = new FeedbackModuleBrowserState_FeedbackModuleBrowserState(PopConst.Const.Selector.HS.FeedbackBrowserState, this.Logger);
        this.ModuleFeedbackOfPopUpState = new FeedbackModulePopUpState_FeedbackModulePopUpState(PopConst.Const.Selector.HS.FeedbackPopUpState, this.Logger);
        this.ModuleSnapShots = new SelectSnapshotModule_SelectSnapshotModule(PopConst.Const.Selector.HS.SelStateSnapShot, this.Logger);
        this.SettingsModule = new SettingsModule_SettingsModule(this.Logger, this.SettingsAgent, this.AccordianManager);
        this.CancelButtonModule = new CancelButtonModule(PopConst.Const.Selector.HS.HsCancel, this.Logger);
        this.Logger.FuncEnd(this.BuildModules.name);
    }
    WireEvents() {
        this.Logger.FuncStart(this.WireEvents.name);
        this.FeedbackModuleMessages = new FeedbackModuleMessages_FeedbackModuleMessages_Observer(PopConst.Const.Selector.HS.DivOverlayModule, this.Logger);
        this.Logger.AddWriter(this.FeedbackModuleLog);
        this.Logger.FuncEnd(this.WireEvents.name);
    }
    InitUiManager() {
        this.Logger.FuncStart(this.InitUiManager.name);
        var self = this;
        this.WriteBuildNumToUi();
        this.ModuleSnapShots.Init();
        this.ModuleFeedbackOfBrowserState.Init();
        this.ModuleFeedbackOfContentState.Init();
        this.ScheduleAutoSaveSnapShot();
        this.ScheduleAutoLogin();
        let uiSelectSnapshotChangeEvent_Observer = new UiSelectSnapshotMutatedEvent_Observer_UiSelectSnapshotMutationEvent_Observer(this.Logger, this);
        this.ModuleSnapShots.SelectSnapshotModule_Subject.RegisterObserver(uiSelectSnapshotChangeEvent_Observer);
        this.ButtonModulesManager.InitButtonStateManager();
        this.Logger.FuncEnd(this.InitUiManager.name);
    }
    SelectChanged() {
        this.ModuleSnapShots.SelectChanged();
    }
    OnFailedCommand(err) {
        this.Logger.Log(err);
    }
    ContentReplyReceivedEventCallBack(stateOfSitecoreWindow, stateOfStorageSnapshots) {
        this.Logger.FuncStart(this.ContentReplyReceivedEventCallBack.name);
        this.Logger.LogAsJsonPretty('stateOfStorageSnapshots', stateOfStorageSnapshots);
        this.UpdateUiFromContentReply(stateOfSitecoreWindow, stateOfStorageSnapshots);
        this.Logger.FuncEnd(this.ContentReplyReceivedEventCallBack.name);
    }
    ClosePopUp() {
        return new Promise((resolve, reject) => {
            this.Logger.FuncStart(this.ClosePopUp.name);
            try {
                this.FeedbackModuleMessages.UpdateMsgStatusStack('Command Completed Successfully');
                let setting = this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.DebugKeepDialogOpen);
                if (!setting.ValueAsBool()) {
                    window.close();
                }
                else {
                    this.Logger.Log('Window not closed because of setting: ' + setting.FriendlySetting);
                }
                resolve();
            }
            catch (err) {
                reject(this.ClosePopUp.name + ' ' + err);
            }
            this.Logger.FuncEnd(this.ClosePopUp.name);
        });
    }
    AutoLogin() {
    }
    ScheduleAutoSaveSnapShot() {
    }
    ScheduleAutoLogin() {
    }
    WriteBuildNumToUi() {
        this.Logger.LogVal('BuiltDateStamp', BuiltDateStamp);
        var targetTag = document.querySelector(PopConst.Const.Selector.HS.BuildStamp);
        if (targetTag) {
            targetTag.innerText = 'build stamp: ' + StaticHelpers_StaticHelpers.MakeFriendlyDate(new Date(BuiltDateStamp));
        }
        else {
            this.Logger.ErrorAndThrow(this.WriteBuildNumToUi.name, 'No Build Stamp Element Found');
        }
    }
    HydrateModules(scUrlAgent, stateOfSitecoreWindow, stateOfStorageSnapShots) {
        this.Logger.FuncStart(this.HydrateModules.name);
        if (stateOfSitecoreWindow) {
            this.ModuleFeedbackOfPopUpState.HydratePopUpStateUI(this.ModuleSnapShots.GetSelectSnapshotId());
            this.ModuleFeedbackOfContentState.HydrateContentStateFeedack(stateOfSitecoreWindow);
            this.ModuleFeedbackOfBrowserState.HydrateFeedackBrowserState(scUrlAgent);
            this.ModuleSnapShots.HydrateStorageSnapShotModule(stateOfSitecoreWindow, stateOfSitecoreWindow.States, stateOfStorageSnapShots);
            this.ButtonModulesManager.HydrateUiButtonState(stateOfSitecoreWindow, this.ModuleSnapShots.GetSelectSnapshotId());
            this.ModuleFeedbackOfBrowserState.RefreshUi();
        }
        this.Logger.FuncEnd(this.HydrateModules.name);
    }
    RefreshModuleUis() {
        this.ModuleSnapShots.RefreshUi();
        this.SettingsModule.RefreshUi();
        this.ButtonModulesManager.RefreshUiButtonVisibilityStatus();
    }
    RefreshUiUIManagerFromSnapShotSelect(uiData) {
        return UiManager_awaiter(this, void 0, void 0, function* () {
        });
    }
    UpdateUiFromContentReply(stateOfSitecoreWindow, stateOfStorageSnapShots) {
        return UiManager_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.UpdateUiFromContentReply.name);
            this.HydrateModules(this.TabMan.GetScUrlAgent(), stateOfSitecoreWindow, stateOfStorageSnapShots);
            this.RefreshModuleUis();
            this.DrawCorrectNicknameInUI(stateOfStorageSnapShots.SnapShots);
            this.Logger.FuncEnd(this.UpdateUiFromContentReply.name);
        });
    }
    ShowDebugDataOneWindow() {
        this.Logger.FuncStart('ShowDebugDataOneWindow');
        var toReturn = [];
        for (var kdx = 0; kdx < toReturn.length; kdx++) {
            this.Logger.Log(toReturn[kdx]);
        }
        this.Logger.FuncEnd('ShowDebugDataOneWindow');
        return toReturn;
    }
    DrawCorrectNicknameInUI(snapShots) {
        this.Logger.FuncStart(this.DrawCorrectNicknameInUI.name);
        var targetId = this.ModuleSnapShots.GetSelectSnapshotId();
        if (targetId) {
            this.Logger.Log('targetId : ' + targetId.Raw);
            var storageValues = snapShots;
            var storageMatch;
            for (var idx = 0; idx < storageValues.length; idx++) {
                var candidate = storageValues[idx];
                if (candidate.Meta.SnapshotId.Raw === this.ModuleSnapShots.GetSelectSnapshotId().Raw) {
                    storageMatch = candidate;
                    break;
                }
            }
            if (storageMatch) {
                var inputElem = window.document.getElementById(PopConst.Const.ElemId.InputNickname);
                if (inputElem) {
                    inputElem.value = storageMatch.NickName;
                }
            }
        }
        this.Logger.FuncEnd(this.DrawCorrectNicknameInUI.name);
    }
    GetValueInNickname() {
        var toReturn = '';
        toReturn = window.document.getElementById(PopConst.Const.ElemId.InputNickname).value;
        return toReturn;
    }
    GetButtonByIdOrSelector(targetId) {
        var toReturn = document.querySelector(targetId);
        if (!toReturn) {
            toReturn = document.querySelector('[id=' + targetId + ']');
        }
        return toReturn;
    }
    AssignOnCheckedEvent(targetId, handler) {
        var targetElem = document.getElementById(targetId);
        if (!targetElem) {
            this.Logger.ErrorAndThrow(this.AssignOnClickEvent.name, 'No Id: ' + targetId);
        }
        else {
            targetElem.addEventListener('checked', (evt) => { handler(evt); });
        }
    }
    AssignOnClickEvent(targetId, handler) {
        var targetElem = this.GetButtonByIdOrSelector(targetId);
        if (!targetElem) {
            this.Logger.ErrorAndThrow(this.AssignOnClickEvent.name, 'No Id: ' + targetId);
        }
        else {
            targetElem.addEventListener('click', (evt) => { handler(evt); });
        }
    }
    AssignOnClickEventFromCmd(command, handler) {
        if (command && command.Command !== MenuCommand.Unknown) {
            this.AssignOnClickEvent(command.PlaceHolderSelector, handler);
        }
    }
    AssignDblClickEvent(selector, handler) {
        var targetElem = document.querySelector(selector);
        if (!targetElem) {
            this.Logger.ErrorAndThrow(this.AssignOnClickEvent.name, 'No Id: ' + selector);
        }
        else {
            targetElem.ondblclick = (evt) => { handler(evt); };
        }
    }
    PopulateSnapShotsAuto() {
    }
    PopulateSnapShotsNotAuto() {
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Proxies/Desktop/DesktopProxy/Events/ContentReplyReceivedEvent/ContentReplyReceivedEvent_Observer.js

class ContentReplyReceivedEvent_Observer_ContentReplyReceivedEvent_Observer extends HindSiteEvent_Observer_HindSiteEvent_Observer {
    constructor(logger, owner) {
        super(logger, ContentReplyReceivedEvent_Observer_ContentReplyReceivedEvent_Observer.name);
        this.OwnerUiManager = owner;
    }
    UpdateAsync(payload) {
        this.OwnerUiManager.ContentReplyReceivedEventCallBack(payload.StateOfSitecoreWindow, payload.StateOfStorageSnapShots);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/zPopUpEntryPoint.js
var zPopUpEntryPoint_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




















class zPopUpEntryPoint_PopUpEntry {
    main() {
        return zPopUpEntryPoint_awaiter(this, void 0, void 0, function* () {
            try {
                this.InstantiateAndInitSettingsAndLogger();
                this.InstantiateAgents();
                this.InstantiateMembers();
                this.Logger.SectionMarker('Begin Init');
                yield this.InitHub()
                    .then(() => this.WireCustomevents())
                    .then(() => this.eventMan.TriggerPingEventAsync(this.commandMan.GetCommandById(MenuCommand.Ping)))
                    .then(() => this.Logger.Log(this.main.name + ' completed'))
                    .catch((err) => console.log(err));
                this.Logger.SectionMarker('End Init');
                this.Logger.SectionMarker('Begin Standby');
            }
            catch (err) {
                console.log(err);
            }
        });
    }
    InstantiateAndInitSettingsAndLogger() {
        this.Logger = new LoggerAgent_LoggerAgent();
        this.RepoAgent = new RepositoryAgent(this.Logger);
        this.SettingsAgent = new SettingsAgent_SettingsAgent(this.Logger, this.RepoAgent);
        var allSettings = new ConstAllSettings_ConstAllSettings().AllSettings;
        this.SettingsAgent.InitSettingsAgent(allSettings);
        this.InitLogger();
    }
    InstantiateMembers() {
        return zPopUpEntryPoint_awaiter(this, void 0, void 0, function* () {
            this.handlers = new Handlers_Handlers(this.Logger, this.SettingsAgent, this.browserTabAgent, this.PopUpMessageAgent);
            this.commandMan = new AllCommands_CommandManager(this.Logger, this.handlers);
            this.uiMan = new UiManager_UiManager(this.Logger, this.SettingsAgent, this.browserTabAgent, this.commandMan);
            this.eventMan = new EventManager_EventManager(this.Logger, this.SettingsAgent, this.uiMan, this.handlers);
        });
    }
    InitLogger() {
        this.Logger.FuncStart(this.InitLogger.name);
        let enableLoggingSetting = this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.EnableLogging);
        if (SharedConst.Const.Debug.ForceLoggingEnabled || enableLoggingSetting.ValueAsBool()) {
            var RollingLogId = new RollingLogIdDrone_RollingLogIdDrone(this.SettingsAgent, this.Logger);
            var nextLogId = RollingLogId.GetNextLogId();
            let storageLogWriter = new LoggerStorageWriter();
            storageLogWriter.SetLogToStorageKey(nextLogId);
            let consoleLogger = new LoggerConsoleWriter();
            this.Logger.AddWriter(consoleLogger);
        }
        this.Logger.FlushBuffer();
        this.Logger.FuncEnd(this.InitLogger.name);
    }
    InstantiateAgents() {
        this.scUrlAgent = new ScUrlAgent_ScUrlAgent(this.Logger);
        this.browserTabAgent = new TabManager_BrowserTabAgent(this.Logger, this.scUrlAgent, this.SettingsAgent);
        this.PopUpMessageAgent = new PopUpMessagesBroker_PopUpMessagesBroker(this.Logger);
    }
    WireCustomevents() {
        this.handlers.External.ValidMessageRecievedEvent.RegisterObserver(new ContentReplyReceivedEvent_Observer_ContentReplyReceivedEvent_Observer(this.Logger, this.uiMan));
        this.FeedbackModuleMsg_Observer = new FeedbackModuleMessages_FeedbackModuleMessages_Observer(PopConst.Const.Selector.HS.FeedbackMessages, this.Logger);
        this.handlers.External.ValidMessageRecievedEvent.RegisterObserver(this.FeedbackModuleMsg_Observer);
    }
    InitHub() {
        return zPopUpEntryPoint_awaiter(this, void 0, void 0, function* () {
            try {
                this.uiMan.InitUiManager();
                this.eventMan.InitEventManager(this.commandMan.AllMenuCommands);
                yield this.scUrlAgent.InitScUrlAgent()
                    .catch((err) => {
                    this.Logger.ErrorAndContinue('Pop Up Entry Point Main', JSON.stringify(err));
                    throw (err);
                });
            }
            catch (err) {
                this.Logger.ErrorAndThrow(this.InitHub.name, err);
            }
        });
    }
}
let popUpEntry = new zPopUpEntryPoint_PopUpEntry();
popUpEntry.main();


/***/ })
/******/ ]);