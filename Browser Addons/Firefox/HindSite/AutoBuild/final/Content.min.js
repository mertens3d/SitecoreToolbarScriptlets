/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/_first/_ContentManagerBase.js
class ContentManagerBase {
    constructor(xyyz) {
        this.Xyyz = xyyz;
    }
    AtticMan() { return this.Xyyz.AtticMan; }
    Const() { return this.Xyyz.Const; }
    debug() { return this.Xyyz.debug; }
    DesktopMan() { return this.Xyyz.OneDesktopMan; }
    GuidMan() { return this.Xyyz.GuidMan; }
    locMan() { return this.Xyyz.LocationMan; }
    OneCEMan() { return this.Xyyz.OneCEMan; }
    OneWinMan() { return this.Xyyz.OneWindowMan; }
    PageDataMan() { return this.Xyyz.PageDataMan; }
    MsgMan() { return this.Xyyz.MsgMan; }
    Utilites() { return this.Xyyz.Utilities; }
    Factoryman() { return this.Xyyz.Factory; }
    MiscMan() { return this.Xyyz.MiscMan; }
    PromiseGen() { return this.Xyyz.PromiseGeneric; }
    PromiseOneStep() { return this.Xyyz.PromiseOneStep; }
    ScUiMan() { return this.Xyyz.SitecoreUiMan; }
    MsgFlag() { return this.Xyyz.MessageFlag; }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/scWindowType.js
var scWindowType;
(function (scWindowType) {
    scWindowType[scWindowType["Unknown"] = 0] = "Unknown";
    scWindowType[scWindowType["LoginPage"] = 1] = "LoginPage";
    scWindowType[scWindowType["Desktop"] = 2] = "Desktop";
    scWindowType[scWindowType["ContentEditor"] = 3] = "ContentEditor";
    scWindowType[scWindowType["Launchpad"] = 4] = "Launchpad";
    scWindowType[scWindowType["Edit"] = 5] = "Edit";
    scWindowType[scWindowType["Normal"] = 6] = "Normal";
    scWindowType[scWindowType["Preview"] = 7] = "Preview";
})(scWindowType || (scWindowType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/ContentAtticManager.js


class ContentAtticManager_ContentAtticManager extends ContentManagerBase {
    constructor(xyyz) {
        super(xyyz);
        xyyz.debug.FuncStart(ContentAtticManager_ContentAtticManager.name);
        xyyz.debug.FuncEnd(ContentAtticManager_ContentAtticManager.name);
    }
    Init() {
    }
    UpdateNickname(payload) {
        this.debug().FuncStart(this.UpdateNickname.name);
        if (payload.idOfSelect) {
            var storageMatch = this.GetFromStorageById(payload.idOfSelect);
            if (storageMatch) {
                storageMatch.NickName = payload.NewNickname;
                this.WriteToStorage(storageMatch);
            }
        }
        this.debug().FuncEnd(this.UpdateNickname);
    }
    ToggleFavorite(data) {
        this.debug().FuncStart(this.ToggleFavorite.name);
        if (data.idOfSelect) {
            var storageMatch = this.GetFromStorageById(data.idOfSelect);
            if (storageMatch) {
                storageMatch.IsFavorite = !storageMatch.IsFavorite;
                this.WriteToStorage(storageMatch);
            }
        }
        this.debug().FuncEnd(this.ToggleFavorite.name);
    }
    WriteToStorage(dataOneWindow) {
        this.debug().FuncStart(this.WriteToStorage.name);
        var snapShotAsString = JSON.stringify(dataOneWindow);
        this.debug().Log('snapShotAsString: ' + snapShotAsString);
        window.localStorage.setItem(this.Const().Storage.WindowRoot + this.Const().Storage.SnapShotSuffix + dataOneWindow.Id.asString, snapShotAsString);
        this.debug().FuncEnd(this.WriteToStorage.name);
    }
    GetFromStorageById(needleId) {
        this.debug().FuncStart(this.GetFromStorageById.name, needleId.asString);
        var foundStorage = this.GetAllStorageAsIDataOneWindow();
        var DateOneWinStoreMatch = null;
        if (foundStorage) {
            for (var idx = 0; idx < foundStorage.length; idx++) {
                var candidate = foundStorage[idx];
                if (candidate.Id.asString === needleId.asString) {
                    DateOneWinStoreMatch = candidate;
                    break;
                }
            }
        }
        if (DateOneWinStoreMatch) {
            this.debug().Log('found match', this.Utilites().TimeNicknameFavStr(DateOneWinStoreMatch));
        }
        else {
            this.debug().Error(this.GetFromStorageById.name, 'Match notfound');
        }
        this.debug().FuncEnd(this.GetFromStorageById.name);
        return DateOneWinStoreMatch;
    }
    __getAllLocalStorageAsIOneStorageData() {
        this.debug().FuncStart(this.__getAllLocalStorageAsIOneStorageData.name);
        var toReturn = [];
        for (var idx = 0; idx < window.localStorage.length; idx++) {
            var candidate = {
                data: '',
                key: '',
            };
            candidate.key = window.localStorage.key(idx);
            if (candidate.key.startsWith(this.Const().Storage.WindowRoot + this.Const().Storage.SnapShotSuffix)) {
                candidate.data = window.localStorage.getItem(candidate.key);
                toReturn.push(candidate);
            }
        }
        this.debug().FuncEnd(this.__getAllLocalStorageAsIOneStorageData.name);
        return toReturn;
    }
    GetAllStorageAsIDataOneWindow() {
        this.debug().FuncStart(this.GetAllStorageAsIDataOneWindow.name);
        var toReturn = [];
        var rawStorageData = this.__getAllLocalStorageAsIOneStorageData();
        if (rawStorageData) {
            for (var idx = 0; idx < rawStorageData.length; idx++) {
                var oneRaw = rawStorageData[idx];
                var candidate = JSON.parse(oneRaw.data);
                if (candidate) {
                    candidate.TimeStamp = new Date(candidate.TimeStamp);
                    candidate.Id = this.Xyyz.GuidMan.ParseGuid(candidate.Id.asString);
                    candidate.RawData = oneRaw;
                    if (!candidate.WindowType) {
                        candidate.WindowType = scWindowType.Unknown;
                        candidate.WindowFriendly = scWindowType[candidate.WindowType];
                    }
                    if (!candidate.NickName) {
                        candidate.NickName = '';
                    }
                    toReturn.push(candidate);
                }
            }
        }
        toReturn.sort((a, b) => +b.TimeStamp - +a.TimeStamp);
        this.debug().FuncEnd(this.GetAllStorageAsIDataOneWindow.name);
        return toReturn;
    }
    RemoveOneFromStorage(targetId) {
        this.debug().FuncStart(this.RemoveOneFromStorage.name);
        if (targetId) {
            var storageMatch = this.GetFromStorageById(targetId);
            if (storageMatch) {
                var result = confirm('Remove ?: ' + this.Xyyz.Utilities.TimeNicknameFavStr(storageMatch));
                if (result === true) {
                    window.localStorage.removeItem(storageMatch.RawData.key);
                }
            }
        }
        this.debug().FuncEnd(this.RemoveOneFromStorage.name);
    }
    GetRawFromStorageById(needleId) {
        this.debug().FuncStart(this.GetRawFromStorageById.name, needleId.asString);
        var toReturn = null;
        var foundStorage = this.__getAllLocalStorageAsIOneStorageData();
        if (foundStorage) {
            for (var idx = 0; idx < foundStorage.length; idx++) {
                var candidate = foundStorage[idx];
            }
        }
        this.debug().FuncEnd(this.GetRawFromStorageById.name);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/LocationManager.js
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class LocationManager_LocationManager extends ContentManagerBase {
    constructor(xyyz) {
        super(xyyz);
        xyyz.debug.FuncStart(LocationManager_LocationManager.name);
        xyyz.debug.FuncEnd(LocationManager_LocationManager.name);
    }
    SetHref(href, callback, targetWindow, effortCount = this.Const().Iterations.MaxSetHrefEffort) {
        this.debug().FuncStart(this.SetHref.name, href + ' : ' + effortCount + ' : has callback? ' + (callback !== null));
        effortCount -= 1;
        var isCorrectHref = targetWindow.Window.location.href = href;
        var isReadyState = targetWindow.DataDocSelf.Document.readyState === 'complete';
        if (effortCount > 0) {
            if (isCorrectHref && isReadyState) {
                this.debug().Log(this.SetHref.name, 'triggering callback');
                callback();
            }
            else {
                if (!isCorrectHref) {
                    targetWindow.Window.location.href !== href;
                }
                var self = this;
                setTimeout(function () {
                    this.debug().Log('setting timeout');
                    self.SetHref(href, callback, targetWindow, effortCount);
                }, self.Const().Timeouts.SetHrefEffortWait);
            }
        }
        else {
            this.debug().Log('changing href unsuccessful. Dying');
        }
        this.debug().FuncEnd(this.SetHref.name);
    }
    ChangeLocationSwitchBoard(desiredPageType, targetWindow, iteration = this.Const().Iterations.MaxIterationSwitchBoard) {
        this.debug().FuncStart(this.ChangeLocationSwitchBoard.name, 'desired = ' + scWindowType[desiredPageType] + ' iteration: ' + iteration + ':' + this.Const().Iterations.MaxIterationSwitchBoard);
        if (iteration > 0) {
            iteration -= 1;
            var currentState = this.PageDataMan().GetCurrentPageType();
            if (currentState === scWindowType.LoginPage) {
                var self = this;
                var callbackOnComplete = () => {
                    this.debug().Log('callback triggered');
                    self.ChangeLocationSwitchBoard(desiredPageType, targetWindow, iteration);
                };
                this.AdminB(targetWindow.DataDocSelf, callbackOnComplete);
                var self = this;
            }
            else if (currentState === scWindowType.Launchpad || currentState === scWindowType.ContentEditor || currentState === scWindowType.Desktop) {
                var self = this;
                var callBackOnSuccessfulHrefChange = function () {
                    self.debug().Log('Callback triggered');
                    targetWindow = self.PageDataMan().SetWindowDataToCurrent(targetWindow.Window, targetWindow.DataDocSelf.Nickname);
                    self.ChangeLocationSwitchBoard(desiredPageType, targetWindow, iteration);
                };
                if (desiredPageType === scWindowType.Desktop && currentState !== scWindowType.Desktop) {
                    this.SetHref(this.Const().UrlSuffix.Desktop, callBackOnSuccessfulHrefChange, targetWindow);
                }
                else if (desiredPageType === scWindowType.ContentEditor && currentState !== scWindowType.ContentEditor) {
                    this.SetHref(this.Const().UrlSuffix.CE, callBackOnSuccessfulHrefChange, targetWindow);
                }
                else if (currentState === scWindowType.Desktop && desiredPageType === scWindowType.Desktop) {
                    this.debug().Log('On Desktop');
                }
            }
        }
        this.debug().FuncEnd(this.ChangeLocationSwitchBoard.name);
    }
    SetScMode(newValue, useOrigWindow) {
        return new Promise(() => __awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.SetScMode.name, newValue.asString);
            var itemGuid;
            var targetWindow;
            var currentPageType = this.PageDataMan().GetCurrentPageType();
            if (currentPageType === scWindowType.ContentEditor
                ||
                    currentPageType === scWindowType.Desktop) {
                var dataOneDoc = this.PageDataMan().TopLevelWindow().DataDocSelf;
                var AllTreeNodeAr = this.Xyyz.OneTreeMan.GetOneLiveTreeData(dataOneDoc);
                for (var idx = 0; idx < AllTreeNodeAr.length; idx++) {
                    var candidate = AllTreeNodeAr[idx];
                    if (candidate.IsActive) {
                        itemGuid = candidate.NodeId;
                        break;
                    }
                }
                yield alert(itemGuid.asString);
                if (itemGuid) {
                    targetWindow = yield this.PageDataMan().GetTargetWindowAsync(useOrigWindow, scWindowType.Edit);
                }
            }
            else if (currentPageType == scWindowType.Edit
                || currentPageType == scWindowType.Normal
                || currentPageType == scWindowType.Preview) {
                if (targetWindow) {
                    window.opener.location.href = window.opener.location.href.replace('=normal', newValue.asString).replace('=preview', newValue.asString).replace('=edit', newValue.asString);
                }
            }
            this.debug().FuncEnd(this.SetScMode.name);
        }));
    }
    GetLoginButton(targetDoc) {
        this.debug().FuncStart(this.GetLoginButton.name);
        var toReturn = targetDoc.Document.getElementById(this.Const().ElemId.sc.scLoginBtn.sc920);
        if (!toReturn) {
            toReturn = targetDoc.Document.querySelector(this.Const().Selector.SC.LoginBtn.sc820);
        }
        this.debug().Log('toReturn: ' + toReturn);
        this.debug().FuncEnd(this.GetLoginButton.name);
        return toReturn;
    }
    AdminB(targetDoc, callbackOnComplete) {
        this.debug().FuncStart(this.AdminB.name, 'targetDoc: ' + targetDoc.XyyzId.asShort);
        this.debug().Log('callback passed: ' + (callbackOnComplete !== null));
        var userNameElem = targetDoc.Document.getElementById(this.Const().ElemId.sc.scLoginUserName);
        var passwordElem = targetDoc.Document.getElementById(this.Const().ElemId.sc.scLoginPassword);
        this.debug().Log('userNameElem: ' + userNameElem);
        this.debug().Log('passwordElem: ' + passwordElem);
        userNameElem.setAttribute('value', this.Const().Names.scDefaultAdminUserName);
        passwordElem.setAttribute('value', this.Const().Names.scDefaultAdminPassword);
        var loginButton = this.GetLoginButton(targetDoc);
        if (loginButton) {
            this.debug().Log('clicking');
            loginButton.click();
            if (callbackOnComplete) {
                this.debug().Log('Triggering callback');
                setTimeout(callbackOnComplete, this.Const().Timeouts.PostLoginBtnClick);
            }
            else {
                this.debug().Log('no callback passed');
            }
        }
        else {
            this.debug().Error(this.AdminB.name, 'No loginButton');
        }
        this.debug().FuncEnd(this.AdminB.name);
    }
    QkID() {
        return this.Const().ElemId;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/MiscManager.js

class MiscManager_MiscManager extends ContentManagerBase {
    constructor(xyyz) {
        super(xyyz);
    }
    NotNullOrUndefined(subjectAnyOrAr, label = '', iterationCheck = null) {
        var toReturn = false;
        if (!iterationCheck) {
            iterationCheck = this.Const().MaxNullOrUndefinedIter;
        }
        iterationCheck -= 1;
        if (iterationCheck > 0) {
            if (label === '') {
                label = this.NotNullOrUndefined.name + ' : no labelprovided';
            }
            if (subjectAnyOrAr === 'undefined') {
                this.debug().Error(label, 'Is undefined');
            }
            else if (!subjectAnyOrAr) {
                this.debug().Error(label, 'Is Null');
            }
            else {
                this.debug().LogVal(label, 'Passed');
                toReturn = true;
                if (Array.isArray(subjectAnyOrAr)) {
                    for (var idx = 0; idx < subjectAnyOrAr.length; idx++) {
                        toReturn = toReturn && this.NotNullOrUndefined(subjectAnyOrAr[idx], (idx + 1) + ':' + subjectAnyOrAr.length + ' ' + label, iterationCheck);
                    }
                }
            }
        }
        else {
            this.debug().Error(this.NotNullOrUndefined.name, 'max iteration hit');
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Classes/IterationHelper.js

class IterationHelper_IterationHelper extends ContentManagerBase {
    constructor(xyyz, nickname, maxIterations = null) {
        super(xyyz);
        if (!maxIterations) {
            maxIterations = this.Const().IterHelper.MaxCount.Default;
        }
        this.__maxIterations = maxIterations;
        this.__currentIteration = maxIterations;
        this.__timeout = xyyz.Const.IterHelper.Timeouts.Default;
        this.__nickName = nickname;
        this.IsExhausted = false;
    }
    DecrementAndKeepGoing() {
        var toReturn = false;
        if (!this.MsgMan().OperationCancelled && this.__currentIteration > 0) {
            this.__currentIteration -= 1;
            this.__timeout += this.__timeout * this.Const().IterHelper.GrowthPerIteration;
            if (this.__timeout > this.Const().IterHelper.Timeouts.Max) {
                this.__timeout = this.Const().IterHelper.Timeouts.Max;
            }
            this.debug().Log('DecrementAndKeepGoing: ' + this.__nickName + ' ' + this.__currentIteration + ':' + this.__maxIterations + ' | timeout: ' + this.__timeout);
            toReturn = true;
        }
        else {
            this.IsExhausted = true;
            this.NotifyExhausted();
            toReturn = false;
        }
        return toReturn;
    }
    NotifyExhausted() {
        this.debug().Log('Iteration: ' + this.__nickName + ' counter exhausted ' + this.__currentIteration + ':' + this.__maxIterations);
    }
    WaitAndThen(timeoutFunction) {
        this.debug().FuncStart(this.WaitAndThen.name, this.__nickName + ' ' + timeoutFunction.name);
        var self = this;
        setTimeout(timeoutFunction(), self.__timeout);
        this.debug().FuncEnd(this.WaitAndThen.name, this.__nickName);
    }
    Wait() {
        if (!this.MsgMan().OperationCancelled) {
            return new Promise((resolve) => {
                setTimeout(resolve, this.__timeout);
            });
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/OneCEManager.js
var OneCEManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class OneCEManager_OneCEManager extends ContentManagerBase {
    constructor(xyyz) {
        super(xyyz);
    }
    WaitForNode(needleId, targetDoc, currentIteration, timeout, callbackOnComplete) {
        this.debug().FuncStart(this.WaitForNode.name, 'looking for guid: iter: ' + currentIteration + ' ' + needleId.asString + ' on ' + this.GuidMan().ShortGuid(targetDoc.XyyzId));
        currentIteration--;
        var foundOnPage = targetDoc.Document.getElementById(needleId.asString);
        if (foundOnPage) {
            this.debug().Log('foundOnPage. Triggering callback on complete');
            this.__expandNode(foundOnPage);
            callbackOnComplete(foundOnPage);
        }
        else {
            if (currentIteration > 0) {
                this.debug().Log('not found on page...setting timeout: ' + timeout);
                var self = this;
                setTimeout(function () {
                    currentIteration = currentIteration - 1;
                    self.WaitForNode(needleId, targetDoc, currentIteration, timeout, callbackOnComplete);
                }, timeout);
            }
            else {
                this.debug().Log('Not Found. Triggering callback on complete');
                callbackOnComplete(null);
            }
        }
        this.debug().FuncEnd(this.WaitForNode.name);
    }
    __activateNode(hotTreeNode) {
        this.debug().FuncStart(this.__activateNode.name);
        this.debug().Log('clicking it');
        hotTreeNode.click();
        this.debug().FuncEnd(this.__activateNode.name);
    }
    __expandNode(foundOnPage) {
        this.debug().FuncStart(this.__expandNode.name);
        var currentSrc = foundOnPage.getAttribute('src');
        this.debug().Log('currentSrc' + currentSrc);
        if (currentSrc.indexOf(this.Const().Names.TreeMenuExpandedPng) < 0) {
            this.debug().Log('clicking it');
            foundOnPage.click();
        }
        this.debug().FuncEnd(this.__expandNode.name);
    }
    __collapseNode(element) {
        var currentSrc = element.getAttribute('src');
        this.debug().Log('currentSrc' + currentSrc);
        if (currentSrc.indexOf(this.Const().Names.TreeMenuExpandedPng) > -1) {
            this.debug().Log('clicking it');
            element.click();
        }
    }
    __collapseRootNode(targetCEDoc) {
        var rootElem = targetCEDoc.Document.getElementById(this.Const().ElemId.sc.SitecoreRootGlyphId);
        if (rootElem) {
            this.__collapseNode(rootElem);
        }
        else {
            this.debug().Error(this.__collapseRootNode.name, 'Root glyph not found ' + this.Const().ElemId.sc.SitecoreRootGlyphId);
        }
    }
    WaitForAndRestoreOneNode(nextNode, dataOneDocTarget) {
        return OneCEManager_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.WaitForAndRestoreOneNode.name, dataOneDocTarget.XyyzId.asShort);
            var treeGlyphTargetId = this.Const().Names.SC.TreeGlyphPrefix + nextNode.NodeId.asString;
            this.debug().Log('looking for: ' + treeGlyphTargetId + ' ' + nextNode.NodeFriendly + ' in ' + dataOneDocTarget.XyyzId.asShort);
            this.debug().Log('document not null ' + (dataOneDocTarget.Document != null));
            var iterHelper = new IterationHelper_IterationHelper(this.Xyyz, this.WaitForAndRestoreOneNode.name);
            var foundOnPageTreeGlyph = null;
            while (!foundOnPageTreeGlyph && iterHelper.DecrementAndKeepGoing()) {
                this.debug().Log('looking for: *' + treeGlyphTargetId + '* ' + nextNode.NodeFriendly + ' in *' + dataOneDocTarget.XyyzId.asShort + '*');
                foundOnPageTreeGlyph = dataOneDocTarget.Document.getElementById(treeGlyphTargetId);
                if (foundOnPageTreeGlyph) {
                    if (nextNode.IsExpanded) {
                        this.__expandNode(foundOnPageTreeGlyph);
                    }
                    if (nextNode.IsActive) {
                        var hotTreeNodeId = this.Const().Names.SC.TreeNodePrefix + nextNode.NodeId.asString;
                        var hotTreeNode = dataOneDocTarget.Document.getElementById(hotTreeNodeId);
                        if (hotTreeNode) {
                            this.__activateNode(hotTreeNode);
                        }
                    }
                }
                else {
                    this.debug().Log('not Found...waiting: ');
                    yield iterHelper.Wait();
                }
            }
            this.debug().FuncEnd(this.WaitForAndRestoreOneNode.name, dataOneDocTarget.XyyzId.asShort);
        });
    }
    WaitForAndRestoreManyAllNodes(storageData, dataOneDocTarget, iterHelper = null) {
        return OneCEManager_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.WaitForAndRestoreManyAllNodes.name, dataOneDocTarget.XyyzId.asShort);
            if (!iterHelper) {
                iterHelper = new IterationHelper_IterationHelper(this.Xyyz, this.WaitForAndRestoreManyAllNodes.name);
            }
            while (storageData.AllTreeNodeAr.length > 0 && iterHelper.DecrementAndKeepGoing()) {
                var nextNode = storageData.AllTreeNodeAr.shift();
                yield this.WaitForAndRestoreOneNode(nextNode, dataOneDocTarget);
            }
            this.debug().FuncEnd(this.WaitForAndRestoreManyAllNodes.name);
        });
    }
    RestoreCEStateAsync(dataToRestore, dataOneDocTarget) {
        return OneCEManager_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.RestoreCEStateAsync.name, dataOneDocTarget.XyyzId.asShort);
            var toReturn = false;
            this.debug().Log('Node Count in storage data: ' + dataToRestore.AllTreeNodeAr.length);
            yield this.WaitForAndRestoreManyAllNodes(dataToRestore, dataOneDocTarget);
            this.debug().FuncEnd(this.RestoreCEStateAsync.name);
            return toReturn;
        });
    }
    SaveStateOneContentEditor(id, dataOneDoc) {
        this.debug().FuncStart('SaveOneContentEditor');
        this.debug().Log('SaveOneContentEditor');
        ;
        this.debug().Log('docElem is null: ' + (dataOneDoc === null));
        ;
        var CeSnapShot = this.Xyyz.OneCEMan.MakeNewData(id);
        CeSnapShot.AllTreeNodeAr = this.Xyyz.OneTreeMan.GetOneLiveTreeData(dataOneDoc);
        this.Xyyz.OneWindowMan.PutCEDataToCurrentSnapShot(CeSnapShot);
        this.debug().FuncEnd('SaveOneContentEditor');
    }
    MakeNewData(id) {
        this.debug().FuncStart('MakeNewData: ' + id);
        var toReturn = {
            Id: id,
            AllTreeNodeAr: []
        };
        this.debug().FuncEnd('MakeNewData: ' + id);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Promises/PromiseChainRestoreDesktop.js
var PromiseChainRestoreDesktop_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class PromiseChainRestoreDesktop_PromiseChainRestoreDesktop extends ContentManagerBase {
    constructor(xyyz) {
        xyyz.debug.FuncStart(PromiseChainRestoreDesktop_PromiseChainRestoreDesktop.name);
        super(xyyz);
        xyyz.debug.FuncEnd(PromiseChainRestoreDesktop_PromiseChainRestoreDesktop.name);
    }
    __waitForAndClickRedStartButtonPromise(promiseBucket) {
        return new Promise((resolve, reject) => PromiseChainRestoreDesktop_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.__waitForAndClickRedStartButtonPromise.name);
            if (this.MiscMan().NotNullOrUndefined([promiseBucket, promiseBucket.targetDoc], this.__waitForAndClickRedStartButtonPromise.name)) {
                yield this.PromiseGen().RaceWaitAndClick(this.Const().Selector.SC.scStartButton, promiseBucket.targetDoc)
                    .then(() => resolve(promiseBucket))
                    .catch(ex => {
                    this.debug().Error(this.__waitForAndClickRedStartButtonPromise.name, ex);
                    reject();
                });
            }
            else {
                reject();
            }
            this.debug().FuncEnd(this.__waitForAndClickRedStartButtonPromise.name);
        }));
    }
    __waitForIframeReady(promiseBucket) {
        return new Promise((resolve, reject) => PromiseChainRestoreDesktop_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.__waitForIframeReady.name, 'promiseBucket not null: ' + (promiseBucket !== null));
            this.debug().PromiseBucketDebug(promiseBucket, this.__waitForIframeReady.name);
            var success = yield this.PromiseGen().WaitForReadyIframe(promiseBucket.NewIframe);
            if (success) {
                this.debug().Log('resolved! : ');
                promiseBucket.NewIframe.ContentDoc.Document = promiseBucket.NewIframe.IframeElem.contentDocument;
                this.debug().DebugDataOneIframe(promiseBucket.NewIframe);
                resolve(promiseBucket);
            }
            else {
                this.debug().Log('rejected ! : ');
                reject(this.__waitForIframeReady.name);
            }
            this.debug().FuncEnd(this.__waitForIframeReady.name);
        }));
    }
    __waitForIframeCountDiffPromise(promiseBucket) {
        return new Promise((resolve, reject) => PromiseChainRestoreDesktop_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.__waitForIframeCountDiffPromise.name);
            this.debug().MarkerA();
            var success = yield this.DesktopMan().WaitForIframeCountDiffWorker(promiseBucket.IFramesbefore, promiseBucket.targetWindow);
            this.debug().MarkerB();
            if (success) {
                this.debug().MarkerC();
                promiseBucket.NewIframe = success;
                this.debug().DebugDataOneIframe(promiseBucket.NewIframe);
                resolve(promiseBucket);
            }
            else {
                reject(this.__waitForIframeCountDiffPromise.name);
            }
            this.debug().FuncEnd(this.__waitForIframeCountDiffPromise.name);
        }));
    }
    __waitForAndThenClickCEFromMenuPromise(promiseBucket) {
        return new Promise((resolve, reject) => PromiseChainRestoreDesktop_awaiter(this, void 0, void 0, function* () {
            yield this.PromiseGen().WaitForThenClick(this.Const().Selector.SC.StartMenuLeftOption, promiseBucket.targetWindow.DataDocSelf)
                .then(() => { resolve(promiseBucket); })
                .catch((ex) => { reject(this.__waitForAndThenClickCEFromMenuPromise.name); });
        }));
    }
    __restoreDataToOneIframe(promiseBucket) {
        return new Promise((resolve, reject) => PromiseChainRestoreDesktop_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.__restoreDataToOneIframe.name);
            this.debug().DebugDataOneIframe(promiseBucket.NewIframe);
            var success = yield this.DesktopMan().RestoreDataToOneIframeWorker(promiseBucket.oneCEdata, promiseBucket.NewIframe);
            if (success) {
                resolve(promiseBucket);
            }
            else {
                reject(this.__restoreDataToOneIframe.name);
            }
            this.debug().FuncEnd(this.__restoreDataToOneIframe.name);
        }));
    }
    RunOneChain(targetWindow, dataToRestore) {
        return PromiseChainRestoreDesktop_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.RunOneChain.name);
            if (this.MiscMan().NotNullOrUndefined([targetWindow, dataToRestore], this.RunOneChain.name)) {
                var allIframeData = this.DesktopMan().GetAllLiveIframeData(targetWindow);
                var dataBucket = {
                    targetWindow: targetWindow,
                    targetDoc: targetWindow.DataDocSelf,
                    IFramesbefore: allIframeData,
                    oneCEdata: dataToRestore,
                    NewIframe: null,
                    LastChainLinkSuccessful: false,
                };
                yield this.__waitForAndClickRedStartButtonPromise(dataBucket)
                    .then(dataBucket => this.__waitForAndThenClickCEFromMenuPromise(dataBucket))
                    .then(dataBucket => this.__waitForIframeCountDiffPromise(dataBucket))
                    .then(dataBucket => this.__waitForIframeReady(dataBucket))
                    .then(dataBucket => this.__restoreDataToOneIframe(dataBucket))
                    .catch(ex => {
                    this.debug().Error(this.RunOneChain.name, ex);
                });
                this.debug().FuncEnd(this.RunOneChain.name);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/OneDesktopManager.js
var OneDesktopManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class OneDesktopManager_OneDesktopManager extends ContentManagerBase {
    constructor(xyyz) {
        xyyz.debug.FuncStart(OneDesktopManager_OneDesktopManager.name);
        super(xyyz);
        xyyz.debug.FuncEnd(OneDesktopManager_OneDesktopManager.name);
    }
    RestoreDesktopStateAsync(targetWindow, dataToRestore) {
        return OneDesktopManager_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.RestoreDesktopStateAsync.name);
            ;
            if (this.MiscMan().NotNullOrUndefined([targetWindow, dataToRestore, dataToRestore.AllCEAr], this.RestoreDesktopStateAsync.name)) {
                for (var idx = 0; idx < dataToRestore.AllCEAr.length; idx++) {
                    this.debug().Log('data idx: ' + idx + ':' + dataToRestore.AllCEAr.length);
                    var desktopPromiser = new PromiseChainRestoreDesktop_PromiseChainRestoreDesktop(this.Xyyz);
                    yield desktopPromiser.RunOneChain(targetWindow, dataToRestore.AllCEAr[idx]);
                }
            }
            this.debug().FuncEnd(this.RestoreDesktopStateAsync.name);
        });
    }
    RestoreDataToOneIframeWorker(oneCEdata, newIframe) {
        return OneDesktopManager_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.RestoreDataToOneIframeWorker.name, 'data not null: ' + (oneCEdata != null) + ' newFrame not null: ' + (newIframe !== null));
            var toReturn = false;
            this.debug().DebugDataOneIframe(newIframe);
            if (oneCEdata && newIframe) {
                yield this.Xyyz.OneCEMan.RestoreCEStateAsync(oneCEdata, newIframe.ContentDoc);
                toReturn = true;
            }
            else {
                this.debug().Error(this.RestoreDataToOneIframeWorker.name, 'bad data');
                toReturn = false;
            }
            this.debug().FuncEnd(this.RestoreDataToOneIframeWorker.name, toReturn.toString());
            return toReturn;
        });
    }
    WaitForIframeCountDiffWorker(IFramesbefore, targetWin) {
        return OneDesktopManager_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.WaitForIframeCountDiffWorker.name);
            var toReturn = null;
            var iterationJr = new IterationHelper_IterationHelper(this.Xyyz, this.WaitForIframeCountDiffWorker.name);
            while (!toReturn && iterationJr.DecrementAndKeepGoing()) {
                let beforeCount = IFramesbefore.length;
                var allIframesAfter = this.GetAllLiveIframeData(targetWin);
                var count = allIframesAfter.length;
                this.debug().Log('iFrame count before: ' + IFramesbefore.length);
                this.debug().Log('iFrame count after: ' + allIframesAfter.length);
                if (count > beforeCount) {
                    var newIframes = allIframesAfter.filter(e => !IFramesbefore.includes(e));
                    toReturn = newIframes[0];
                }
                else {
                    var self = this;
                    yield iterationJr.Wait();
                }
            }
            this.debug().FuncEnd(this.WaitForIframeCountDiffWorker.name);
            return toReturn;
        });
    }
    GetAllLiveIframeData(targetWindow) {
        this.debug().FuncStart(this.GetAllLiveIframeData.name);
        var toReturn = [];
        var iframeAr = targetWindow.DataDocSelf.Document.querySelectorAll(this.Const().Selector.SC.IframeContent);
        if (iframeAr) {
            this.debug().Log('iframeAr: ' + iframeAr.length);
            for (var ifrIdx = 0; ifrIdx < iframeAr.length; ifrIdx++) {
                this.debug().Log('pushing: ' + ifrIdx);
                var iframeElem = iframeAr[ifrIdx];
                var dataOneIframe = this.Factoryman().DateOneIframeFactory(iframeElem, targetWindow.DataDocSelf, 'desktop Iframe_' + ifrIdx);
                dataOneIframe.ContentDoc.HasParentDesktop = true;
                dataOneIframe.ContentDoc.IsCEDoc = true;
                toReturn.push(dataOneIframe);
            }
        }
        this.debug().FuncEnd(this.GetAllLiveIframeData.name, 'count:  ' + toReturn.length);
        return toReturn;
    }
    SaveStateOneDesktop(targetWindow) {
        this.debug().FuncStart(this.SaveStateOneDesktop.name);
        ;
        this.debug().Log('SaveOneDesktop');
        ;
        var livingIframeAr = this.GetAllLiveIframeData(targetWindow);
        if (livingIframeAr && livingIframeAr.length > 0) {
            for (var iframeIdx = 0; iframeIdx < livingIframeAr.length; iframeIdx++) {
                this.debug().Log('iframeIdx: ' + iframeIdx);
                var targetIframeObj = livingIframeAr[iframeIdx];
                this.Xyyz.OneCEMan.SaveStateOneContentEditor(targetIframeObj.Id, targetIframeObj.ContentDoc);
            }
        }
        this.debug().FuncEnd(this.SaveStateOneDesktop.name);
    }
}
;

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/OneTreeManager.js

class OneTreeManager_OneTreeManager extends ContentManagerBase {
    constructor(xyyz) {
        super(xyyz);
        xyyz.debug.FuncStart(OneTreeManager_OneTreeManager.name);
        xyyz.debug.FuncEnd(OneTreeManager_OneTreeManager.name);
    }
    GetFriendlyNameFromNode(inputNode) {
        this.debug().FuncStart(this.GetFriendlyNameFromNode.name);
        var toReturn = 'unknown';
        var parentNode = inputNode.parentNode;
        var treeNode = parentNode.querySelector(this.Const().Selector.SC.IdStartsWithTreeNode);
        if (treeNode) {
            toReturn = treeNode.innerText;
        }
        else {
            this.debug().Log('No treeNode');
        }
        this.debug().FuncEnd(this.GetFriendlyNameFromNode.name, toReturn);
        return toReturn;
    }
    __isActive(targetNode) {
        var toReturn = false;
        var firstNodeActiveTest = targetNode.querySelector(this.Const().Selector.SC.IdStartsWithTreeNode);
        if (firstNodeActiveTest) {
            var className = firstNodeActiveTest.className;
            if (className.indexOf(this.Const().ClassNames.SC.scContentTreeNodeActive) > -1) {
                toReturn = true;
                this.debug().Log('** isActive ' + targetNode.innerText);
            }
        }
        return toReturn;
    }
    __isExpanded(firstImg) {
        var toReturn = false;
        if (firstImg) {
            var srcAttr = firstImg.getAttribute('src');
            if (srcAttr.indexOf(this.Const().Names.SC.TreeExpandedPng.sc920) > -1) {
                toReturn = true;
            }
            return toReturn;
        }
    }
    __isContentTreeNode(targetNode) {
        var toReturn = false;
        var className = targetNode.className;
        if (className === this.Const().ClassNames.ContentTreeNode) {
            toReturn = true;
        }
        return toReturn;
    }
    WalkNodeRecursive(targetNode, depth) {
        var toReturn = [];
        depth = depth - 1;
        if (targetNode) {
            var firstImg = targetNode.querySelector(this.Const().Selector.SC.ContentTreeNodeGlyph);
            if (this.__isContentTreeNode(targetNode)) {
                var newData = {
                    IsExpanded: this.__isExpanded(firstImg),
                    IsActive: this.__isActive(targetNode),
                    NodeFriendly: '',
                    NodeId: null
                };
                if (newData.IsExpanded || newData.IsActive) {
                    this.debug().LogVal('isExpanded', newData.IsExpanded.toString());
                    this.debug().LogVal('isActive', newData.IsActive.toString());
                    newData.NodeFriendly = this.GetFriendlyNameFromNode(firstImg);
                    this.debug().LogVal('friendlyName', newData.NodeFriendly);
                    var apparentId = firstImg.id.replace(this.Const().Names.SC.TreeGlyphPrefix, '');
                    newData.NodeId = this.Xyyz.GuidMan.ParseGuid(apparentId);
                    toReturn.push(newData);
                }
            }
            var childNodes = targetNode.children;
            if (childNodes && childNodes.length > 0 && depth > 0) {
                for (var jdx = 0; jdx < childNodes.length; jdx++) {
                    var oneChild = childNodes[jdx];
                    toReturn = toReturn.concat(this.WalkNodeRecursive(oneChild, depth));
                }
            }
        }
        return toReturn;
    }
    GetOneLiveTreeData(targetDoc) {
        this.debug().FuncStart(this.GetOneLiveTreeData.name);
        this.debug().Log('targetDoc isnull: ' + (targetDoc === null));
        var toReturn = [];
        if (targetDoc) {
            var rootNode = targetDoc.Document.getElementById(this.Const().ElemId.sc.SitecoreRootNodeId);
            if (rootNode) {
                this.debug().Log('rootNode: ' + rootNode.innerHTML);
                var rootParent = rootNode.parentElement;
                toReturn = this.WalkNodeRecursive(rootParent, this.Const().MaxIter);
                this.debug().Log('foundNodes count: ' + toReturn.length);
            }
            else {
                this.debug().Error(this.GetOneLiveTreeData.name, 'no root node');
            }
        }
        else {
            this.debug().Error(this.GetOneLiveTreeData.name, 'no targetDoc');
        }
        this.debug().FuncEnd(this.GetOneLiveTreeData.name);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Promises/PromiseChainQuickPublish.js
var PromiseChainQuickPublish_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class PromiseChainQuickPublish_PromiseChainQuickPublish extends ContentManagerBase {
    constructor(xyyz) {
        super(xyyz);
    }
    __debugDataPublishChain(dataPublishChain, nickname) {
        this.debug().FuncStart(this.__debugDataPublishChain.name, nickname);
        this.debug().LogVal('docToPublish', this.debug().IsNullOrUndefined(dataPublishChain.docToPublish));
        this.debug().LogVal('jqIframe', this.debug().IsNullOrUndefined(dataPublishChain.jqIframe) + ' ' + (dataPublishChain.jqIframe ? dataPublishChain.jqIframe.IframeElem.src : ''));
        this.debug().LogVal('Iframe0blueIframe', this.debug().IsNullOrUndefined(dataPublishChain.Iframe0Blue) + ' ' + (dataPublishChain.Iframe0Blue ? dataPublishChain.Iframe0Blue.IframeElem.src : ''));
        this.debug().LogVal('messageDialogIframeRed', this.debug().IsNullOrUndefined(dataPublishChain.messageDialogIframeRed) + ' ' + (dataPublishChain.messageDialogIframeRed ? dataPublishChain.messageDialogIframeRed.IframeElem.src : ''));
        this.debug().FuncEnd(this.__debugDataPublishChain.name);
        return dataPublishChain;
    }
    PublishCE(docToPublish) {
        return PromiseChainQuickPublish_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.PublishCE.name);
            var dataPublishChain = {
                docToPublish: docToPublish,
                TopLevelDoc: this.PageDataMan().TopLevelWindow().DataDocSelf,
                Iframe0Blue: null,
                jqIframe: null,
                messageDialogIframeRed: null
            };
            yield this.PromiseOneStep().ClickPublishOnNav(dataPublishChain)
                .then((dataPublishChain) => this.PromiseOneStep().ClickMenuButtonPublishDropDown(dataPublishChain))
                .then((dataPublishChain) => this.__debugDataPublishChain(dataPublishChain, 'post ClickMenuButtonPublishDropDown'))
                .then((dataPublishChain) => this.PromiseOneStep().ClickMenuDropDownPublishItem(dataPublishChain))
                .then((dataPublishChain) => this.__debugDataPublishChain(dataPublishChain, 'post MenuDropDownPublishItem'))
                .then((dataPublishChain) => this.PromiseOneStep().GetThePublishItemDialog(dataPublishChain))
                .then((dataPublishChain) => this.__debugDataPublishChain(dataPublishChain, 'post PublishItemDialog'))
                .then((dataPublishChain) => this.GetDialogIframe0Blue(dataPublishChain))
                .then((dataPublishChain) => this.__WaitForAndClickPublishNextButton(dataPublishChain))
                .then((dataPublishChain) => this.GetMessageDialog(dataPublishChain))
                .then((dataPublishChain) => this.__waitForAndClickOk(dataPublishChain))
                .then((dataPublishChain) => this.__waitForAndClickClose(dataPublishChain))
                .catch(ex => {
                this.debug().Error(this.PublishCE.name, ex);
            });
            this.debug().FuncEnd(this.PublishCE.name);
        });
    }
    __waitForAndClickClose(dataPublishChain) {
        return PromiseChainQuickPublish_awaiter(this, void 0, void 0, function* () {
            yield this.PromiseGen().WaitForAndReturnFoundElem(dataPublishChain.Iframe0Blue.ContentDoc, this.Const().Selector.SC.Publish.SettingsHidden)
                .then(() => PromiseChainQuickPublish_awaiter(this, void 0, void 0, function* () {
                yield this.PromiseGen().WaitForAndReturnFoundElem(dataPublishChain.Iframe0Blue.ContentDoc, this.Const().Selector.SC.Publish.TheItemHasBeenPublished, this.Const().IterHelper.MaxCount.OverridePublishing);
            }))
                .then(() => PromiseChainQuickPublish_awaiter(this, void 0, void 0, function* () {
                yield this.PromiseGen().WaitForThenClick(this.Const().Selector.SC.Cancel, dataPublishChain.Iframe0Blue.ContentDoc);
            }));
            return dataPublishChain;
        });
    }
    __waitForAndClickOk(dataPublishChain) {
        return PromiseChainQuickPublish_awaiter(this, void 0, void 0, function* () {
            yield this.PromiseGen().WaitForThenClick(this.Const().Selector.SC.Ok, dataPublishChain.messageDialogIframeRed.ContentDoc);
            return dataPublishChain;
        });
    }
    __WaitForAndClickPublishNextButton(dataPublishChain) {
        return PromiseChainQuickPublish_awaiter(this, void 0, void 0, function* () {
            yield this.PromiseGen().WaitForThenClick(this.Const().Selector.SC.NextButton, dataPublishChain.Iframe0Blue.ContentDoc);
            return dataPublishChain;
        });
    }
    GetMessageDialog(dataPublishChain) {
        return PromiseChainQuickPublish_awaiter(this, void 0, void 0, function* () {
            dataPublishChain.messageDialogIframeRed = yield this.PromiseGen().WaitForAndReturnReadyIframe(dataPublishChain.jqIframe.ContentDoc, this.Const().Selector.SC.ContentIFrame1, 'iframeRed');
            return dataPublishChain;
        });
    }
    GetDialogIframe0Blue(dataPublishChain = null) {
        return PromiseChainQuickPublish_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.GetDialogIframe0Blue.name);
            dataPublishChain.Iframe0Blue = yield this.PromiseGen().WaitForAndReturnReadyIframe(dataPublishChain.jqIframe.ContentDoc, this.Const().Selector.SC.ContentIframe0, 'Iframe0Blue');
            this.debug().DebugDataOneIframe(dataPublishChain.Iframe0Blue);
            this.debug().FuncEnd(this.GetDialogIframe0Blue.name);
            return dataPublishChain;
        });
    }
    __waitForThenFunc(selector, targetDoc, dataPublishChain, optionFunc) {
        return new Promise((resolve, reject) => PromiseChainQuickPublish_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.__waitForThenFunc.name, selector);
            this.debug().DebugIDataDoc(targetDoc);
            var found = null;
            var found = yield this.PromiseGen().WaitForAndReturnFoundElem(targetDoc, selector);
            if (found) {
                this.debug().Log('found');
                if (optionFunc) {
                    this.debug().Log('executing func');
                    dataPublishChain = yield optionFunc(found, dataPublishChain);
                }
                this.__debugDataPublishChain(dataPublishChain, this.__waitForThenFunc.name);
                this.debug().FuncEnd(this.__waitForThenFunc.name, selector);
                resolve(dataPublishChain);
            }
            else {
                reject('not found');
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/OneWindowManager.js
var OneWindowManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class OneWindowManager_OneWindowManager extends ContentManagerBase {
    constructor(xyyz) {
        super(xyyz);
        xyyz.debug.FuncStart(OneWindowManager_OneWindowManager.name);
        xyyz.debug.FuncEnd(OneWindowManager_OneWindowManager.name);
    }
    SaveWindowState(targetWindow) {
        this.debug().FuncStart(this.SaveWindowState.name);
        var currentPageType = this.PageDataMan().GetCurrentPageType();
        this.Xyyz.OneWindowMan.CreateNewWindowSnapShot(currentPageType);
        if (currentPageType === scWindowType.ContentEditor) {
            this.debug().Log('is Content Editor');
            var id = this.Xyyz.GuidMan.EmptyGuid();
            this.Xyyz.OneCEMan.SaveStateOneContentEditor(id, targetWindow.DataDocSelf);
        }
        else if (currentPageType === scWindowType.Desktop) {
            this.debug().Log('is Desktop');
            this.Xyyz.OneDesktopMan.SaveStateOneDesktop(targetWindow);
        }
        else {
            this.debug().Error(this.SaveWindowState.name, 'Invalid page location ' + currentPageType);
        }
        this.debug().FuncEnd(this.SaveWindowState.name);
        ;
    }
    __getTopLevelIframe(targetWindow) {
        var toReturn = null;
        var allIframe = this.DesktopMan().GetAllLiveIframeData(targetWindow);
        var maxZVal = -1;
        if (allIframe && allIframe.length > 0) {
            for (var idx = 0; idx < allIframe.length; idx++) {
                var candidateIframe = allIframe[idx];
                if (candidateIframe && candidateIframe.Zindex > maxZVal) {
                    toReturn = candidateIframe;
                    maxZVal = candidateIframe.Zindex;
                }
            }
        }
        return toReturn;
    }
    PublishActiveCE(targetWindow) {
        return OneWindowManager_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.PublishActiveCE.name);
            var currentWindowType = this.PageDataMan().GetCurrentPageType();
            var docToPublish = null;
            if (currentWindowType == scWindowType.Desktop) {
                var topIframe = this.__getTopLevelIframe(targetWindow);
                if (topIframe) {
                    docToPublish = topIframe.ContentDoc;
                }
            }
            else {
                docToPublish = this.PageDataMan().TopLevelWindow().DataDocSelf;
            }
            this.debug().Log('docToPublish', this.debug().IsNullOrUndefined(docToPublish));
            if (docToPublish) {
                var publishChain = new PromiseChainQuickPublish_PromiseChainQuickPublish(this.Xyyz);
                yield publishChain.PublishCE(docToPublish);
            }
            this.debug().FuncEnd(this.PublishActiveCE.name);
        });
    }
    RestoreWindowStateToTarget(targetWindow, dataToRestore) {
        return OneWindowManager_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.RestoreWindowStateToTarget.name);
            if (dataToRestore) {
                if (dataToRestore.WindowType === scWindowType.ContentEditor) {
                    yield this.Xyyz.OneCEMan.RestoreCEStateAsync(dataToRestore.AllCEAr[0], targetWindow.DataDocSelf);
                }
                else if (dataToRestore.WindowType === scWindowType.Desktop) {
                    yield this.Xyyz.OneDesktopMan.RestoreDesktopStateAsync(targetWindow, dataToRestore);
                }
                else {
                    this.debug().Error(this.RestoreWindowStateToTarget.name, 'No match found for snap shot');
                }
                this.debug().FuncEnd(this.RestoreWindowStateToTarget.name);
            }
        });
    }
    PutCEDataToCurrentSnapShot(oneCeData) {
        this.debug().FuncStart(this.PutCEDataToCurrentSnapShot.name);
        this.debug().Log('PutCEDataToCurrentSnapShot');
        var matchingCeData = this.FindMatchingCeData(oneCeData);
        if (matchingCeData) {
            matchingCeData = oneCeData;
        }
        else {
            this.__activeWindowSnapShot.AllCEAr.push(oneCeData);
        }
        this.UpdateStorage();
        this.debug().FuncEnd(this.PutCEDataToCurrentSnapShot.name);
    }
    UpdateStorage() {
        this.debug().FuncStart(this.UpdateStorage.name);
        this.AtticMan().WriteToStorage(this.__activeWindowSnapShot);
        this.debug().FuncEnd(this.UpdateStorage.name);
    }
    FindMatchingCeData(oneCeData) {
        var toReturn = null;
        for (var idx = 0; idx < this.__activeWindowSnapShot.AllCEAr.length; idx++) {
            var candidate = this.__activeWindowSnapShot.AllCEAr[idx];
            if (candidate.Id === oneCeData.Id) {
                toReturn = candidate;
                break;
            }
        }
        this.debug().Log('match found :' + (toReturn !== null));
        return toReturn;
    }
    Init() {
        var currentPageType = this.PageDataMan().GetCurrentPageType();
        this.CreateNewWindowSnapShot(currentPageType);
    }
    CreateNewWindowSnapShot(windowType) {
        this.debug().FuncStart('CreateNewWindowSnapShot');
        var dateToUse = new Date();
        var newGuid = this.Xyyz.GuidMan.NewGuid();
        this.__activeWindowSnapShot = {
            TimeStamp: dateToUse,
            WindowType: windowType,
            WindowFriendly: windowType[windowType],
            AllCEAr: [],
            Id: newGuid,
            IsFavorite: false,
            NickName: '',
            RawData: null
        };
        this.debug().FuncEnd('CreateNewWindowSnapShot');
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/PageDataManager.js
var PageDataManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class PageDataManager_PageDataManager extends ContentManagerBase {
    constructor(xyyz) {
        super(xyyz);
        this.debug().CtorName(this.constructor.name);
    }
    GetTargetWindowAsync(useOrigWindow, windowType) {
        return PageDataManager_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.GetTargetWindowAsync.name);
            var targetWindow;
            if (useOrigWindow) {
                this.debug().Log('target window is self');
                targetWindow = this.TopLevelWindow();
            }
            else {
                this.debug().Log('target window is new');
                let newWindowUrl = this.__getUrlForWindowType(windowType);
                yield this.__getNewTargetWindowAsync(newWindowUrl)
                    .then((data) => targetWindow = data);
            }
            this.debug().FuncEnd(this.GetTargetWindowAsync.name, 'child window id: ' + targetWindow.DataDocSelf.XyyzId.asShort);
            return targetWindow;
        });
    }
    __getNewTargetWindowAsync(newWindowUrl) {
        return PageDataManager_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => {
                this.debug().FuncStart(this.__getNewTargetWindowAsync.name);
                this.debug().LogVal('newWindowUrl', newWindowUrl);
                var newWindow = this.__winDataParent.Window.open(newWindowUrl);
                var self = this;
                newWindow.addEventListener('load', () => {
                    var toReturn = self.SetWindowDataToCurrent(newWindow, 'newly spawned window');
                    resolve(toReturn);
                });
                this.debug().FuncEnd(this.__getNewTargetWindowAsync.name);
            });
        });
    }
    SetWindowDataToCurrent(window, nickname) {
        var toReturn = {
            Friendly: 'New Tab',
            Window: window,
            WindowType: scWindowType.Unknown,
            DataDocSelf: {
                ParentDoc: null,
                Document: window.document,
                HasParentDesktop: false,
                XyyzId: this.GuidMan().NewGuid(),
                IsCEDoc: false,
                ParentDesktop: null,
                Nickname: nickname
            },
        };
        toReturn.DataDocSelf.ParentDoc = toReturn.DataDocSelf;
        return toReturn;
    }
    TopLevelWindow() {
        return this.__winDataParent;
    }
    Init() {
        this.debug().FuncStart(this.Init.name);
        this.__winDataParent = {
            Window: window,
            Friendly: 'Window',
            WindowType: scWindowType.Unknown,
            DataDocSelf: {
                ParentDoc: null,
                Document: (window).document,
                HasParentDesktop: false,
                XyyzId: this.GuidMan().NewGuid(),
                IsCEDoc: false,
                ParentDesktop: null,
                Nickname: 'Original Target Page'
            }
        };
        this.__winDataParent.DataDocSelf.ParentDoc = this.__winDataParent.DataDocSelf;
        this.MsgMan().SetParentInfo(this.__winDataParent);
        this.debug().FuncEnd(this.Init.name);
    }
    GetPageTypeOfTargetWindow(targetWindow) {
        this.debug().FuncStart(this.GetPageTypeOfTargetWindow.name, targetWindow.location.href);
        var toReturn;
        var currentLoc = targetWindow.location.href;
        if (currentLoc.indexOf(this.Const().UrlSuffix.Login) > -1) {
            toReturn = scWindowType.LoginPage;
        }
        else if (currentLoc.toLowerCase().indexOf(this.Const().UrlSuffix.Desktop.toLowerCase()) > -1) {
            this.debug().Log('Testing for Desktop editor');
            this.debug().Log('currentLoc.toLowerCase()' + currentLoc.toLowerCase());
            this.debug().Log('this.Const().Url.Desktop.toLowerCase()' + this.Const().UrlSuffix.Desktop.toLowerCase());
            toReturn = scWindowType.Desktop;
        }
        else if (new RegExp(this.Const().Regex.ContentEditor).test(currentLoc)) {
            toReturn = scWindowType.ContentEditor;
        }
        else if (currentLoc.toLowerCase().indexOf(this.Const().UrlSuffix.LaunchPad.toLowerCase()) > -1) {
            toReturn = scWindowType.Launchpad;
        }
        else {
            toReturn = scWindowType.Unknown;
        }
        this.debug().FuncEnd(this.GetPageTypeOfTargetWindow.name, scWindowType[toReturn]);
        return toReturn;
    }
    __getUrlForWindowType(windowType) {
        var toReturn;
        this.debug().NotNullCheck('this.__winDataParent.DataDocSelf.Document', this.__winDataParent.DataDocSelf.Document);
        var hostName = this.__winDataParent.DataDocSelf.Document.location.origin;
        switch (windowType) {
            case scWindowType.ContentEditor:
                toReturn = hostName + this.Const().UrlSuffix.CE;
                break;
            case scWindowType.Desktop:
                toReturn = hostName + this.Const().UrlSuffix.Desktop;
                break;
            case scWindowType.Edit:
                toReturn = hostName + this.Const().UrlSuffix.None;
                break;
            case scWindowType.Preview:
                toReturn = hostName + this.Const().UrlSuffix.None;
                break;
            case scWindowType.Normal:
                toReturn = hostName + this.Const().UrlSuffix.None;
                break;
            default:
                toReturn = hostName;
                this.debug().Error(this.__getUrlForWindowType.name, 'unaccounted for window type');
                break;
        }
        return toReturn;
    }
    GetCurrentPageType() {
        this.debug().FuncStart(this.GetCurrentPageType.name);
        var toReturn = scWindowType.Unknown;
        if (this.__winDataParent && this.__winDataParent && this.__winDataParent.Window && this.__winDataParent.DataDocSelf) {
            toReturn = this.GetPageTypeOfTargetWindow(this.__winDataParent.Window);
        }
        this.debug().FuncEnd(this.GetCurrentPageType.name + ' (' + toReturn + ') ' + scWindowType[toReturn]);
        return toReturn;
    }
    DebugInfo() {
        this.debug().FuncStart(this.DebugInfo.name);
        this.debug().Log(this.__winDataParent.Window);
        this.debug().Log(this.__winDataParent.DataDocSelf);
        this.debug().FuncEnd(this.DebugInfo.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Promises/PromiseGeneric.js
var PromiseGeneric_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class PromiseGeneric_PromiseGeneric extends ContentManagerBase {
    constructor(xyyz) {
        xyyz.debug.FuncStart(PromiseGeneric_PromiseGeneric.name);
        super(xyyz);
        xyyz.debug.FuncEnd(PromiseGeneric_PromiseGeneric.name);
    }
    WaitForReadyIframe(dataOneIframe) {
        return PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
                this.debug().FuncStart(this.WaitForReadyIframe.name, dataOneIframe.Nickname + ' ' + dataOneIframe.Id.asShort);
                this.debug().DebugDataOneIframe(dataOneIframe);
                var iterationJr = new IterationHelper_IterationHelper(this.Xyyz, this.WaitForReadyIframe.name);
                var isReady = false;
                this.debug().MarkerA();
                while (iterationJr.DecrementAndKeepGoing() && !isReady) {
                    this.debug().MarkerB();
                    var currentReadyState = dataOneIframe.IframeElem.contentDocument.readyState.toString();
                    var isReadyStateComplete = currentReadyState === 'complete';
                    this.debug().Log('currentReadyState : ' + currentReadyState);
                    ;
                    this.debug().MarkerC();
                    this.debug().Log('isReadyStateComplete: ' + isReadyStateComplete);
                    if (isReadyStateComplete) {
                        this.debug().Log('toReturn A is true');
                        isReady = true;
                        dataOneIframe.ContentDoc = this.Factoryman().DataOneContentDocFactoryFromIframe(dataOneIframe.IframeElem, dataOneIframe.ContentDoc.ParentDoc, dataOneIframe.Nickname);
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                this.debug().DebugDataOneIframe(dataOneIframe);
                this.debug().FuncEnd(this.WaitForReadyIframe.name, dataOneIframe.Nickname + ' : ' + currentReadyState + ' is ready: ' + isReady.toString());
                ;
                resolve(dataOneIframe);
            }));
        });
    }
    WaitForAndReturnReadyIframe(targetDoc, selector, nickname) {
        return PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
                var iframeData;
                yield this.WaitForAndReturnFoundElem(targetDoc, selector)
                    .then((foundElem) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
                    if (foundElem) {
                        iframeData = this.Factoryman().DateOneIframeFactory(foundElem, targetDoc, nickname);
                        this.debug().DebugDataOneIframe(iframeData);
                        return iframeData;
                    }
                }))
                    .then((iframeData) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
                    iframeData = yield this.PromiseGen().WaitForReadyIframe(iframeData);
                    resolve(iframeData);
                }));
            }));
        });
    }
    WaitForAndReturnFoundElem(targetDoc, selector, overrideIterCount = 8) {
        return PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
                this.debug().FuncStart(this.WaitForAndReturnFoundElem.name, 'selector: ' + selector + ' nickname: ' + targetDoc.Nickname);
                var found = null;
                var iterationJr = new IterationHelper_IterationHelper(this.Xyyz, this.WaitForAndReturnFoundElem.name, overrideIterCount);
                while (!found && iterationJr.DecrementAndKeepGoing()) {
                    this.debug().LogVal('targetDoc.Document', targetDoc.Document.toString());
                    this.debug().LogVal('targetDoc.Document.location', targetDoc.Document.location.toString());
                    this.debug().LogVal('targetDoc.Document.location.href', targetDoc.Document.location.href);
                    found = targetDoc.Document.querySelector(selector);
                    if (found) {
                        this.debug().Log('found');
                        this.debug().LogVal('found.style.display', found.style.display);
                        this.debug().FuncEnd(this.WaitForAndReturnFoundElem.name, selector + targetDoc.Document.location.href);
                        resolve(found);
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (!found && iterationJr.IsExhausted) {
                    this.debug().FuncEnd(this.WaitForAndReturnFoundElem.name, selector + targetDoc.Document.location.href);
                    reject('exhausted');
                }
            }));
        });
    }
    WaitForPageReadyNative(targetWindow) {
        return PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
                this.debug().FuncStart(this.WaitForPageReadyNative.name);
                let iterationJr = new IterationHelper_IterationHelper(this.Xyyz, this.WaitForThenClick.name, 5);
                var loaded = false;
                if (this.MiscMan().NotNullOrUndefined(targetWindow, this.WaitForPageReadyNative.name + ' document')) {
                }
            }));
        });
    }
    WaitForAndClickWithPayload(selector, targetDoc, payload) {
        return new Promise((resolve, reject) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.WaitForAndClickWithPayload.name, selector);
            yield this.PromiseGen().WaitForThenClick(selector, targetDoc)
                .then(() => resolve(payload))
                .catch(ex => {
                this.debug().Error(this.WaitForAndClickWithPayload.name, ex);
                reject(ex);
            });
        }));
    }
    WaitForPageReady(targetWindow) {
        return PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
                this.debug().FuncStart(this.WaitForPageReady.name);
                this.debug().NotNullCheck('toReturn', targetWindow);
                this.debug().NotNullCheck('toReturn', targetWindow.DataDocSelf);
                this.debug().NotNullCheck('toReturn', targetWindow.DataDocSelf.Document);
                this.debug().NotNullCheck('toReturn', targetWindow.DataDocSelf.Document.location);
                this.debug().NotNullCheck('toReturn', targetWindow.DataDocSelf.Document.location.href);
                this.debug().LogVal('targetWindow.DataDocSelf.Document.location.href', targetWindow.DataDocSelf.Document.location.href);
                if (targetWindow) {
                    yield this.WaitForPageReadyNative(targetWindow)
                        .then(() => resolve())
                        .catch((ex) => {
                        reject(ex);
                    });
                }
                this.debug().FuncEnd(this.WaitForPageReady.name);
            }));
        });
    }
    RaceWaitAndClick(selector, targetDoc, resolveFn = null) {
        return PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.RaceWaitAndClick.name);
            var prom1 = this.WaitForThenClick(selector.sc920, targetDoc, resolveFn);
            var prom2 = this.WaitForThenClick(selector.sc820, targetDoc, resolveFn);
            this.debug().FuncEnd(this.RaceWaitAndClick.name);
            return yield Promise.race([prom1, prom2]);
        });
    }
    WaitForThenClick(selector, targetDoc, resolveFn = null) {
        return new Promise((resolve, reject) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            if (targetDoc) {
                this.debug().FuncStart(this.WaitForThenClick.name, selector);
                var found = null;
                var iterationJr = new IterationHelper_IterationHelper(this.Xyyz, this.WaitForThenClick.name);
                while (!found && iterationJr.DecrementAndKeepGoing() && !this.MsgMan().OperationCancelled) {
                    found = targetDoc.Document.querySelector(selector);
                    if (found) {
                        this.debug().Log('found and clicking');
                        found.click();
                        this.debug().FuncEnd(this.WaitForThenClick.name, selector);
                        if (resolveFn) {
                            resolveFn();
                        }
                        resolve();
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
            }
            else {
                reject();
            }
            this.debug().FuncEnd(this.WaitForThenClick.name, selector);
            if (!found && iterationJr.IsExhausted) {
                reject('exhausted');
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Promises/PromiseOneStep.js
var PromiseOneStep_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class PromiseOneStep_PromiseOneStep extends ContentManagerBase {
    constructor(xyyz) {
        xyyz.debug.FuncStart(PromiseGeneric_PromiseGeneric.name);
        super(xyyz);
        xyyz.debug.FuncEnd(PromiseGeneric_PromiseGeneric.name);
    }
    ClickPublishOnNav(payload) {
        return PromiseOneStep_awaiter(this, void 0, void 0, function* () {
            yield this.PromiseGen().WaitForThenClick(this.Const().Selector.SC.NavPublishStrip, payload.docToPublish);
            return payload;
        });
    }
    ClickMenuButtonPublishDropDown(payload = null) {
        return PromiseOneStep_awaiter(this, void 0, void 0, function* () {
            yield this.PromiseGen().WaitForThenClick(this.Const().Selector.SC.MenuButtonPublish, payload.docToPublish);
            return payload;
        });
    }
    ClickMenuDropDownPublishItem(payload = null) {
        return PromiseOneStep_awaiter(this, void 0, void 0, function* () {
            return yield this.PromiseGen().WaitForAndClickWithPayload(this.Const().Selector.SC.MenuDropDownPublishItem, payload.docToPublish, payload);
        });
    }
    GetThePublishItemDialog(dataPublishChain = null) {
        return PromiseOneStep_awaiter(this, void 0, void 0, function* () {
            yield this.PromiseGen().WaitForAndReturnFoundElem(dataPublishChain.TopLevelDoc, this.Const().Selector.SC.JqueryModalDialogsFrame)
                .then((found) => {
                dataPublishChain.jqIframe = this.Factoryman().DateOneIframeFactory(found, dataPublishChain.docToPublish.ParentDoc, 'jqIframe');
                return dataPublishChain;
            })
                .then((payload) => PromiseOneStep_awaiter(this, void 0, void 0, function* () {
                yield this.PromiseGen().WaitForReadyIframe(payload.jqIframe);
                dataPublishChain = payload;
            }));
            return dataPublishChain;
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/GuidHelper.js
class GuidHelper {
    EmptyGuid() {
        return this.ParseGuid('00000000-0000-0000-0000-000000000000');
    }
    NewGuid() {
        var toReturn;
        var temp = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            var toReturn = v.toString(16);
            return toReturn;
        });
        toReturn = this.ParseGuid(temp);
        return toReturn;
    }
    ShortGuid(Id) {
        var toReturn = '{error}';
        if (Id && Id.asString.length > this.ShortGuidLength) {
            toReturn = Id.asString.substr(0, this.ShortGuidLength);
        }
        return toReturn;
    }
    ParseGuid(val) {
        let toReturn = {
            asString: val,
            asShort: ''
        };
        toReturn.asShort = this.ShortGuid(toReturn);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Utilities.js


class Utilities_Utilities {
    constructor(debug) {
        debug.FuncStart(Utilities_Utilities.name);
        this.GuidMan = new GuidHelper();
        debug.FuncEnd(Utilities_Utilities.name);
    }
    SelectHeaderStr() {
        let toReturn = '';
        toReturn += this.Buffer('...Time Stamp', 23, '.', false);
        toReturn += this.Buffer('- Page Type', 20, '.', false, false);
        toReturn += this.Buffer('- Nickname', 16, '.', false, false);
        toReturn += this.Buffer('- Fav.', 4, '.', false);
        return toReturn;
    }
    MakeSelectorFromId(TabId) {
        return '[id=' + TabId + ']';
    }
    TimeNicknameFavStr(data) {
        var typeStr = (data.WindowType === scWindowType.Unknown) ? '?' : scWindowType[data.WindowType];
        return this.MakeFriendlyDate(data.TimeStamp)
            + ' - ' + this.Buffer(typeStr, 17, ' ', false)
            + ' - ' + this.Buffer(data.NickName, 16, ' ', false)
            + ' - ' + this.Buffer((data.IsFavorite ? '*' : ' '), 1);
    }
    Buffer(str, desiredLength, buffChar = ' ', bufferLEft = true, useNbsp = true) {
        var toReturn = str;
        if (buffChar.length === 0) {
            buffChar = ' ';
        }
        if (toReturn.length > desiredLength) {
            if (desiredLength > 6) {
                toReturn = toReturn.substring(0, desiredLength - 3) + '...';
            }
            else {
                toReturn = toReturn.substring(0, desiredLength);
            }
        }
        if (toReturn.length < desiredLength) {
            var spacesNeeded = desiredLength - toReturn.length;
            if (buffChar === ' ' && useNbsp) {
                buffChar = '&nbsp;';
            }
            for (var idx = 0; idx < spacesNeeded; idx++) {
                if (bufferLEft) {
                    toReturn = buffChar + toReturn;
                }
                else {
                    toReturn = toReturn + buffChar;
                }
            }
        }
        return toReturn;
    }
    MakeFriendlyDate(date) {
        var year = date.getFullYear();
        var month = date.getMonth();
        var day = this.Buffer(date.getDay().toString(), 2, '0');
        var min = this.Buffer(date.getMinutes().toString(), 2, '0');
        var hoursRaw = date.getHours();
        var ampm = hoursRaw >= 12 ? 'pm' : 'am';
        hoursRaw = hoursRaw % 12;
        var hourClean = hoursRaw ? hoursRaw : 12;
        var hourCleanStr = this.Buffer(hourClean.toString(), 2, '0');
        var toReturn = year + '.' + month + '.' + day + ' ' + hourCleanStr + ':' + min + ' ' + ampm;
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/MessageFlag.js
var MsgFlag;
(function (MsgFlag) {
    MsgFlag[MsgFlag["AddCETab"] = 0] = "AddCETab";
    MsgFlag[MsgFlag["AdminB"] = 1] = "AdminB";
    MsgFlag[MsgFlag["GoDesktop"] = 2] = "GoDesktop";
    MsgFlag[MsgFlag["OpenCE"] = 3] = "OpenCE";
    MsgFlag[MsgFlag["QuickPublish"] = 4] = "QuickPublish";
    MsgFlag[MsgFlag["RemoveFromStorage"] = 5] = "RemoveFromStorage";
    MsgFlag[MsgFlag["TakeSnapShot"] = 6] = "TakeSnapShot";
    MsgFlag[MsgFlag["UpdateNickName"] = 7] = "UpdateNickName";
    MsgFlag[MsgFlag["RestoreClick"] = 8] = "RestoreClick";
    MsgFlag[MsgFlag["Unknown"] = 9] = "Unknown";
    MsgFlag[MsgFlag["GetAllStorageOneWindow"] = 10] = "GetAllStorageOneWindow";
    MsgFlag[MsgFlag["TaskSuccessful"] = 11] = "TaskSuccessful";
    MsgFlag[MsgFlag["SetScMode"] = 12] = "SetScMode";
    MsgFlag[MsgFlag["TaskFailed"] = 13] = "TaskFailed";
    MsgFlag[MsgFlag["GiveCurrentData"] = 14] = "GiveCurrentData";
    MsgFlag[MsgFlag["TestResponse"] = 15] = "TestResponse";
})(MsgFlag || (MsgFlag = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/MsgFromXBase.js

class MsgFromXBase_MsgFromXBase {
    constructor(msgFlag) {
        this.MsgFlag = msgFlag;
        this.FlagAsString = MsgFlag[this.MsgFlag];
        this.greeting = 'this is the base greeting';
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/MsgPayloadResponseFromContent.js

class MsgPayloadResponseFromContent_MsgFromContent extends MsgFromXBase_MsgFromXBase {
    constructor(msgFlag) {
        super(msgFlag);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/MsgRunner.js


class MsgRunner_MessageRunner {
    constructor(receiveHndlr, sendHndlr, debug, nickname) {
        this.Debug = debug;
        this.Nickname = nickname;
        this.Debug.FuncStart(MsgRunner_MessageRunner.name, 'new messageRunner ' + this.Nickname);
        this.ReceiveHndlr = receiveHndlr;
        if (this.ReceiveHndlr) {
            this.Debug.Log('2222222222 has receive handler');
            var self = this;
            browser.runtime.onMessage.addListener(request => self.ContentReceiver(request));
        }
        else {
            this.Debug.Log('2222222222 has NO receive handler');
        }
        this.SendHndlr = sendHndlr;
        this.Debug.FuncEnd(MsgRunner_MessageRunner.name, this.Nickname);
    }
    onError(error) {
        console.error(`Error: ${error}`);
    }
    ContentReceiver(requestMsg) {
        this.Debug.FuncStart(this.ContentReceiver.name + " Message from the popup script yyyyy:", requestMsg.FlagAsString);
        this.Debug.LogVal('Nickname bb', this.Nickname);
        this.Debug.LogVal('greeting', requestMsg.greeting);
        var response = new MsgPayloadResponseFromContent_MsgFromContent(MsgFlag.TestResponse);
        response.response = "Hi from content script";
        if (this.ReceiveHndlr) {
            this.Debug.Log('has receiver defined');
            this.ReceiveHndlr(requestMsg);
        }
        else {
            this.Debug.Log('No handler assigned');
        }
        this.Debug.FuncEnd(this.ContentReceiver.name);
        return Promise.resolve(response);
    }
    SendMessageToTabs(tabs, messageToSend) {
        this.Debug.FuncStart(this.SendMessageToTabs.name, messageToSend.FlagAsString);
        for (let tab of tabs) {
            browser.tabs.sendMessage(tab.id, messageToSend).then(response => {
                var asImsg = response;
                if (asImsg) {
                    this.Debug.Log("Message from the content script:");
                    this.Debug.Log(asImsg.FlagAsString);
                    this.Debug.Log(asImsg.greeting);
                    if (this.ReceiveHndlr) {
                        this.ReceiveHndlr(asImsg);
                    }
                }
                else {
                    this.Debug.Error(this.SendMessageToTabs.name, 'response is not imsg');
                }
            }).catch(this.onError);
        }
    }
    HandleMessageExample(request, sender, sendResponse) {
        this.Debug.FuncStart(this.HandleMessageExample.name, request.MsgFlag);
        console.log("Message from the content script: " + request.greeting);
    }
    HandleMessage(message) {
        this.Debug.FuncStart(this.HandleMessage.name, this.Nickname);
        this.Debug.LogVal('Message Flag', MsgFlag[message.MsgFlag]);
        if (this.ReceiveHndlr) {
            this.ReceiveHndlr(message);
        }
        else {
            this.Debug.Error(this.HandleMessage.name, 'no receive handler');
        }
        this.Debug.FuncEnd(this.HandleMessage.name);
    }
    handleResponse() {
    }
    SendMessage(msgPlayload) {
        this.Debug.FuncStart(this.SendMessage.name, this.Nickname + MsgFlag[msgPlayload.MsgFlag]);
        browser.tabs.query({
            currentWindow: true,
            active: true
        }).then((tabs) => this.SendMessageToTabs(tabs, msgPlayload)).catch(this.onError);
        this.Debug.FuncEnd(this.SendMessage.name);
    }
    handleError(reason) {
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/ContentMessageManager.js
var ContentMessageManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class ContentMessageManager_ContentMessageManager extends ContentManagerBase {
    constructor(contentHub) {
        super(contentHub);
        contentHub.debug.FuncStart(ContentMessageManager_ContentMessageManager.name);
        contentHub.debug.FuncEnd(ContentMessageManager_ContentMessageManager.name);
    }
    Init() {
        this.debug().FuncStart(this.Init.name + ' ' + ContentMessageManager_ContentMessageManager.name);
        var self = this;
        this.MsgRunner = new MsgRunner_MessageRunner((msg) => {
            self.ReceiveMessageHndlr(msg);
        }, this.SendMessageHndlr, this.debug(), 'Content');
        this.debug().FuncEnd(this.Init.name);
    }
    NotifyCompleteOnContent(targetWindow = null, Message) {
        if (!targetWindow) {
            targetWindow = this.PageDataMan().TopLevelWindow();
        }
        let bodyTag = targetWindow.DataDocSelf.Document.getElementsByTagName('body')[0];
        var flagElem = targetWindow.DataDocSelf.Document.createElement('div');
        flagElem.innerHTML = '<div>' + Message + '</div>';
        flagElem.style.position = 'absolute';
        flagElem.style.top = '100px';
        flagElem.style.left = '100px';
        flagElem.style.backgroundColor = 'yellow';
        flagElem.style.zIndex = '999';
        flagElem.style.fontSize = '40px';
        setTimeout(function () {
            flagElem.remove();
            window.close();
        }, this.Const().Timeouts.WaitBeforeRemovingCompleteFlagOnContent);
        bodyTag.appendChild(flagElem);
    }
    ReceiveMessageHndlr(payload) {
        return ContentMessageManager_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(ContentMessageManager_ContentMessageManager.name + ' ' + this.ReceiveMessageHndlr.name);
            var response;
            switch (payload.MsgFlag) {
                case MsgFlag.AddCETab:
                    yield this.PromiseGen().RaceWaitAndClick(this.Const().Selector.SC.scStartButton, this.PageDataMan().TopLevelWindow().DataDocSelf)
                        .then(() => { this.PromiseGen().WaitForThenClick(this.Const().Selector.SC.StartMenuLeftOption, this.PageDataMan().TopLevelWindow().DataDocSelf); });
                    break;
                case MsgFlag.AdminB:
                    this.debug().LogVal('flag is adminb', payload.FlagAsString);
                    this.debug().DebugPageDataMan(this.PageDataMan());
                    this.locMan().AdminB(this.PageDataMan().TopLevelWindow().DataDocSelf, null);
                    break;
                case MsgFlag.GetAllStorageOneWindow:
                    response = this.AtticMan().GetAllStorageAsIDataOneWindow();
                    break;
                case MsgFlag.GiveCurrentData:
                    this.AtticMan().GetAllStorageAsIDataOneWindow();
                    break;
                case MsgFlag.GoDesktop:
                    this.locMan().ChangeLocationSwitchBoard(scWindowType.Desktop, this.PageDataMan().TopLevelWindow());
                    break;
                case MsgFlag.OpenCE:
                    this.locMan().ChangeLocationSwitchBoard(scWindowType.ContentEditor, this.PageDataMan().TopLevelWindow());
                    break;
                case MsgFlag.QuickPublish:
                    var targetWin = this.PageDataMan().TopLevelWindow();
                    yield this.OneWinMan().PublishActiveCE(targetWin);
                    break;
                case MsgFlag.SetScMode:
                    this.locMan().SetScMode(payload.Data.ReqScMode, payload.Data.UseOriginalWindowLocation)
                        .then(() => this.respondSuccessful())
                        .catch(() => this.respondFail());
                    break;
                case MsgFlag.RestoreClick:
                    yield this.__restoreClick(payload.Data)
                        .then(() => this.respondSuccessful())
                        .catch(() => this.respondFail());
                    break;
                case MsgFlag.TaskSuccessful:
                    this.NotifyCompleteOnContent(null, payload.Data.ScreenMessage);
                case MsgFlag.TakeSnapShot:
                    this.Xyyz.OneWindowMan.SaveWindowState(this.PageDataMan().TopLevelWindow());
                    break;
                default:
                    this.debug().LogVal('Unrecognized MsgFlag', payload.FlagAsString);
                    break;
            }
        });
    }
    respondSuccessful() {
        this.SendMessageHndlr(new MsgPayloadResponseFromContent_MsgFromContent(MsgFlag.TaskSuccessful));
    }
    respondFail() {
        this.SendMessageHndlr(new MsgPayloadResponseFromContent_MsgFromContent(MsgFlag.TaskFailed));
    }
    SendMessageHndlr(msgflag) {
    }
    __restoreClick(Data) {
        return new Promise(() => ContentMessageManager_awaiter(this, void 0, void 0, function* () {
            try {
                this.debug().MarkerA();
                var dataOneWindowStorage = this.AtticMan().GetFromStorageById(Data.idOfSelect);
                this.debug().MarkerB();
                var self = this;
                var targetWindow = yield this.PageDataMan().GetTargetWindowAsync(Data.UseOriginalWindowLocation ? true : false, dataOneWindowStorage.WindowType);
                if (targetWindow) {
                    yield self.Xyyz.OneWindowMan.RestoreWindowStateToTarget(targetWindow, dataOneWindowStorage)
                        .then(() => this.respondSuccessful())
                        .catch(() => this.respondFail());
                }
                else {
                    self.debug().Error(this.__restoreClick.name, 'no target window');
                }
            }
            catch (ex) {
                this.debug().Error(this.__restoreClick.name, ex);
            }
        }));
    }
    IsDebugEnabled() {
        return true;
    }
    SetParentInfo(__winDataParent) {
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/scMode.js
var scMode;
(function (scMode) {
    scMode[scMode["Unknown"] = 0] = "Unknown";
    scMode[scMode["Edit"] = 1] = "Edit";
    scMode[scMode["Preview"] = 2] = "Preview";
    scMode[scMode["Normal"] = 3] = "Normal";
})(scMode || (scMode = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/InjectConst.js

class InjectConst {
}
InjectConst.ContConst = {
    Iterations: {
        MaxSetHrefEffort: 10,
        MaxIterationSwitchBoard: 20,
    },
    Timeouts: {
        PostLoginBtnClick: 1000,
        SetHrefEffortWait: 1000,
        WaitBeforeRemovingCompleteFlagOnContent: 1500
    },
    IterHelper: {
        GrowthPerIteration: 0.5,
        MaxCount: {
            Default: 10,
            OverridePublishing: 15,
        },
        Timeouts: {
            Max: 10000,
            Default: 100,
        },
    },
    ElemId: {
        sc: {
            scLoginUserName: 'UserName',
            scLoginPassword: 'Password',
            SitecoreRootNodeId: 'Tree_Node_11111111111111111111111111111111',
            SitecoreRootGlyphId: 'Tree_Glyph_11111111111111111111111111111111',
            scLoginBtn: {
                sc920: 'LogInBtn',
                sc820: null
            },
        }
    },
    ClassNames: {
        ContentTreeNode: 'scContentTreeNode',
        SC: {
            scContentTreeNodeActive: 'scContentTreeNodeActive',
        }
    },
    UrlSuffix: {
        Desktop: '/sitecore/shell/default.aspx',
        Login: '/sitecore/login',
        LaunchPad: '/client/applications/launchpad',
        CE: '/sitecore/shell/Applications/Content Editor.aspx?sc_bw=1',
        None: '/',
    },
    Regex: {
        ContentEditor: /Content.*?Editor/ig,
    },
    ScMode: {
        edit: { asEnum: scMode.Edit, asString: 'edit' },
        normal: { asEnum: scMode.Normal, asString: 'normal' },
        preview: { asEnum: scMode.Preview, asString: 'preview' },
    },
    Selector: {
        SC: {
            ContentTreeNodeGlyph: '.scContentTreeNodeGlyph',
            IdStartsWithTreeNode: '[id^=Tree_Node_]',
            IframeContent: 'iframe[src*=content]',
            JqueryModalDialogsFrame: '[id=jqueryModalDialogsFrame]',
            ContentIframe0: '[id=scContentIframeId0]',
            NextButton: '[id=NextButton]',
            ContentIFrame1: '[id=scContentIframeId1]',
            Ok: '[id=OK]',
            Cancel: '[id=CancelButton]',
            MenuButtonPublish: '[id=B414550BADAF4542C9ADF44BED5FA6CB3E_menu_button]',
            MenuDropDownPublishItem: '[id=B414550BADAF4542C9ADF44BED5FA6CB3E_menu_98719A90225A4802A0625D3967E4DD47]',
            NavPublishStrip: '[id*=_Nav_PublishStrip]',
            StartMenuLeftOption: '.scStartMenuLeftOption',
            Publish: {
                TheItemHasBeenPublished: '[id=LastPage]:not([style*=\'display:none\'])',
                SettingsHidden: '[id=Settings][style*=\'display: none\']',
                PublishingHidden: '[id=Publishing][style*=\'display: none\']',
            },
            LoginBtn: {
                sc920: null,
                sc820: 'input.btn',
            },
            scStartButton: {
                sc920: '[id=StartButton]',
                sc820: '[id=startButton]'
            },
        },
    },
    Storage: {
        SettingsSuffix: '.Settings',
        ShowDebugData: false,
        SnapShotSuffix: '.WindowSnapShot.',
        WindowRoot: 'Xyyz',
    },
    MaxIter: 100,
    MaxNullOrUndefinedIter: 100,
    prop: {
        AllTreeData: 'AllTreeData',
    },
    Names: {
        SC: {
            TreeGlyphPrefix: 'Tree_Glyph_',
            TreeNodePrefix: 'Tree_Node_',
            TreeExpandedPng: {
                sc920: 'treemenu_expanded.png',
                sc820: 'todo'
            }
        },
        PopUp: 'PopUp',
        PopUpStyles: 'PopUpStyles',
        TreeMenuExpandedPng: 'treemenu_expanded.png',
        TreeMenuCollapsedPng: 'treemenu_collapsed.png',
        scDefaultAdminPassword: 'b',
        scDefaultAdminUserName: 'admin',
    }
};

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Classes/Factories.js



class Factories_Factories extends ContentManagerBase {
    constructor(xyyz) {
        xyyz.debug.FuncStart(PromiseGeneric_PromiseGeneric.name);
        super(xyyz);
        this.GuidHelper = new GuidHelper();
        xyyz.debug.FuncEnd(PromiseGeneric_PromiseGeneric.name);
    }
    DateOneIframeFactory(iframeElem, parentDocument, nickname) {
        var toReturn = {
            Index: -1,
            IframeElem: iframeElem,
            Id: this.GuidHelper.NewGuid(),
            Zindex: iframeElem.style.zIndex ? parseInt(iframeElem.style.zIndex) : -1,
            Nickname: nickname,
            ContentDoc: this.DataOneContentDocFactoryFromIframe(iframeElem, parentDocument, nickname),
        };
        return toReturn;
    }
    DataOneContentDocFactoryFromIframe(IframeElem, parentDocument, nickname) {
        var toReturn = {
            ParentDoc: parentDocument,
            Document: IframeElem.contentDocument,
            HasParentDesktop: false,
            XyyzId: this.GuidHelper.NewGuid(),
            IsCEDoc: false,
            ParentDesktop: null,
            Nickname: nickname + ' - content doc'
        };
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/ContentHub.js















class ContentHub_ContentHub {
    constructor(sitecoreUiMan, debug) {
        debug.FuncStart(ContentHub_ContentHub.name);
        this.debug = debug;
        this.SitecoreUiMan = sitecoreUiMan;
        this.Instantiate();
        debug.FuncEnd(ContentHub_ContentHub.name);
    }
    Instantiate() {
        this.debug.FuncStart(this.Instantiate.name);
        this.AtticMan = new ContentAtticManager_ContentAtticManager(this);
        this.GuidMan = new GuidHelper();
        this.LocationMan = new LocationManager_LocationManager(this);
        this.MsgMan = new ContentMessageManager_ContentMessageManager(this);
        this.MiscMan = new MiscManager_MiscManager(this);
        this.OneCEMan = new OneCEManager_OneCEManager(this);
        this.OneDesktopMan = new OneDesktopManager_OneDesktopManager(this);
        this.OneTreeMan = new OneTreeManager_OneTreeManager(this);
        this.OneWindowMan = new OneWindowManager_OneWindowManager(this);
        this.PageDataMan = new PageDataManager_PageDataManager(this);
        this.PromiseGeneric = new PromiseGeneric_PromiseGeneric(this);
        this.PromiseOneStep = new PromiseOneStep_PromiseOneStep(this);
        this.Factory = new Factories_Factories(this);
        this.Utilities = new Utilities_Utilities(this.debug);
        this.Init();
        this.debug.FuncEnd(this.Instantiate.name);
    }
    Init() {
        this.debug.FuncStart(ContentHub_ContentHub.constructor.name + ' ' + this.Init.name);
        this.Const = InjectConst.ContConst;
        this.AtticMan.Init();
        this.MsgMan.Init();
        this.debug.Enabled = this.MsgMan.IsDebugEnabled();
        this.PageDataMan.Init();
        this.OneWindowMan.Init();
        this.debug.FuncEnd(ContentHub_ContentHub.constructor.name + ' ' + this.Init.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/SitecoreUiManager.js
class SitecoreUiManager {
    constructor(debug) {
        debug.FuncStart(SitecoreUiManager.name);
        this.debug = debug;
        debug.FuncEnd(SitecoreUiManager.name);
    }
    AssignMenuWindowChanged(handler) {
        window.addEventListener('click', (evt) => { handler(); });
        window.addEventListener('resize', (evt) => { handler(); });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/debug.js
class BaseDebug {
    constructor(parentWindow) {
        this.Enabled = false;
        this.__debugTextChangedCallbacks = [];
        this.debugPrefix = '\t\t';
        this.__indentCount = 0;
        this.ParentWindow = parentWindow;
    }
    DebugIDataDoc(dataOneDoc) {
        this.FuncStart(this.DebugIDataDoc.name);
        this.Log('');
        this.Log(this.debugPrefix + this.DebugIDataDoc.name);
        if (dataOneDoc) {
            this.Log(this.debugPrefix + 'dataOneDoc: \t' + this.IsNullOrUndefined(dataOneDoc));
            this.Log(this.debugPrefix + 'dataOneDoc.XyyzId.asShort: \t' + this.IsNullOrUndefined(dataOneDoc.XyyzId.asShort));
            this.Log(this.debugPrefix + 'dataOneDoc.Document: \t' + this.IsNullOrUndefined(dataOneDoc.Document));
            if (dataOneDoc.Document) {
                this.LogVal(this.debugPrefix + 'dataOneDoc.Document.readyState:', dataOneDoc.Document.readyState);
                if (dataOneDoc.Document.location) {
                    this.LogVal(this.debugPrefix + 'targetDoc.location.href', dataOneDoc.Document.location.href);
                }
                else {
                    this.Log(this.debugPrefix + 'dataOneDoc.Document.location - does not exist');
                }
            }
            else {
                this.Log(this.debugPrefix + 'dataOneDoc.Document - does not exist');
            }
        }
        else {
            this.Error(this.DebugIDataDoc.name, 'no targetDoc');
        }
        this.Log('');
    }
    AddDebugTextChangedCallback(caller, callback) {
        this.__debugTextChangedCallbacks.push({
            Caller: caller,
            Func: callback
        });
    }
    HndlrClearDebugText(self, verify = false) {
        this.FuncStart(this.HndlrClearDebugText.name);
        var proceed = true;
        if (verify) {
            proceed = confirm('Clear Debug TextArea ?');
        }
        console.log('maker pink');
        console.log('enabled? ' + this.Enabled.toString());
        if (proceed) {
            var newText = '--- Debug Text Reset ---';
            self.__triggerAllDebugTextChangedCallbacks({
                NewText: newText,
                Append: false
            });
        }
        this.FuncEnd(this.HndlrClearDebugText.name);
    }
    MarkerA() {
        this.__markerRaw('A');
    }
    MarkerB() {
        this.__markerRaw('B');
    }
    MarkerC() {
        this.__markerRaw('C');
    }
    MarkerD() {
        this.__markerRaw('D');
    }
    MarkerE() {
        this.__markerRaw('E');
    }
    __markerRaw(marker) {
        this.Log('Marker ' + marker);
    }
    LogVal(textValName, textValVal) {
        this.Log(textValName + ' : ' + textValVal);
    }
    Log(text, optionalValue = '', hasPrefix = false) {
        if (this.Enabled) {
            var indent = '  ';
            for (var idx = 0; idx < this.__indentCount; idx++) {
                text = indent + text;
            }
            var prefixLength = 3;
            if (!hasPrefix) {
                for (var idx = 0; idx < prefixLength; idx++) {
                    text = ' ' + text;
                }
            }
            this.__triggerAllDebugTextChangedCallbacks({
                NewText: text,
                Append: true
            });
            console.log(text);
        }
    }
    __triggerAllDebugTextChangedCallbacks(data) {
        for (var idx = 0; idx < this.__debugTextChangedCallbacks.length; idx++) {
            var oneCallback = this.__debugTextChangedCallbacks[idx];
            oneCallback.Func(oneCallback.Caller, data);
        }
    }
    CtorName(ctorName) {
        this.Log('Constructor: ' + ctorName);
    }
    FuncStart(textOrFunc, optionalValue) {
        textOrFunc = 's) ' + textOrFunc;
        if (!optionalValue) {
            optionalValue = '';
        }
        else {
            optionalValue = optionalValue.toString();
        }
        if (optionalValue.length > 0) {
            textOrFunc = textOrFunc + ' : ' + optionalValue;
        }
        this.Log(textOrFunc, '', true);
        this.__indentCount++;
        if (this.__indentCount > 10) {
            this.__indentCount = 10;
        }
    }
    FuncEnd(text, optionalValue = '') {
        text = 'e) ' + text;
        if (optionalValue.length > 0) {
            text = text + ' : ' + optionalValue;
        }
        this.__indentCount--;
        if (this.__indentCount < 0) {
            this.__indentCount = 0;
        }
        this.Log(text, optionalValue, true);
    }
    Error(container, text) {
        if (!container) {
            container = 'unknown';
        }
        if (!text) {
            text = 'unknown';
        }
        this.Log('');
        this.Log('\t\t** ERROR ** ' + container);
        this.Log('');
        this.Log('\t\t  ' + text);
        this.Log('');
        this.Log('\t\t** ERROR ** ' + container);
        this.Log('');
    }
    NotNullCheck(title, value) {
        if (typeof value === 'undefined') {
            this.LogVal(title, 'Is Undefined');
        }
        else if (!value) {
            this.LogVal(title, 'Is Null');
        }
        else {
            this.LogVal(title, 'Is Not Null');
        }
    }
    IsNotNullOrUndefinedBool(title, subject) {
        var toReturn = false;
        if (subject) {
            if ((typeof subject) == 'undefined') {
                this.LogVal(title + 'Is Not Undefined', '*** false ***');
            }
            else {
                this.LogVal(title + 'Is Not Null', 'true');
                toReturn = true;
            }
        }
        else {
            this.LogVal(title + 'Is Not Null', '*** false ***');
        }
        return toReturn;
    }
    IsNullOrUndefined(subject) {
        var toReturn = '{unknown}';
        if (subject) {
            if ((typeof subject) == 'undefined') {
                toReturn = 'Is Undefined';
            }
            else {
                toReturn = 'Not Null';
            }
        }
        else {
            toReturn = 'Is Null';
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Classes/ContentDebug.js


class ContentDebug_ContentDebug extends BaseDebug {
    DebugPageDataMan(pageDataMan) {
        if (this.IsNotNullOrUndefinedBool('pageDataMan', pageDataMan)) {
            this.DebugIDataBrowserWindow(pageDataMan.TopLevelWindow());
        }
    }
    DebugIDataBrowserWindow(browserWindow) {
        if (this.IsNotNullOrUndefinedBool('IDataBrowserWindow', browserWindow)) {
            this.LogVal('Friendly', browserWindow.Friendly);
            this.LogVal('WindowType', scWindowType[browserWindow.WindowType]);
            this.DebugIDataOneDoc(browserWindow.DataDocSelf);
            this.DebugWindow(browserWindow.Window);
        }
    }
    DebugWindow(window) {
        if (this.IsNotNullOrUndefinedBool('window', window)) {
        }
    }
    DebugIDataOneDoc(dataOneDoc) {
        if (this.IsNotNullOrUndefinedBool('IDataOneDoc', dataOneDoc)) {
        }
    }
    PromiseBucketDebug(promiseBucket, friendlyName) {
        this.FuncStart(this.PromiseBucketDebug.name, friendlyName);
        this.Log('promiseBucket : ' + this.IsNullOrUndefined(promiseBucket));
        if (promiseBucket && typeof (promiseBucket) !== 'undefined') {
            this.Log('promiseBucket.IFramesbefore: ' + this.IsNullOrUndefined(promiseBucket.IFramesbefore));
            this.Log('promiseBucket.targetWindow: ' + this.IsNullOrUndefined(promiseBucket.targetWindow));
            this.Log('promiseBucket.oneCEdata: ' + this.IsNullOrUndefined(promiseBucket.oneCEdata));
            this.Log('promiseBucket.NewIframe: ' + this.IsNullOrUndefined(promiseBucket.NewIframe));
            if (promiseBucket.NewIframe) {
                this.DebugDataOneIframe(promiseBucket.NewIframe);
            }
        }
        this.FuncEnd(this.PromiseBucketDebug.name, friendlyName);
    }
    DebugDataOneIframe(dataOneIframe) {
        this.FuncStart(this.DebugDataOneIframe.name);
        this.Log('dataOneIframe : ' + this.IsNullOrUndefined(dataOneIframe));
        if (dataOneIframe) {
            this.Log('dataOneIframe.Nickname : ' + dataOneIframe.Nickname);
            this.Log('dataOneIframe.IframeElem: \t' + this.IsNullOrUndefined(dataOneIframe.IframeElem));
            if (dataOneIframe.IframeElem) {
                this.Log('dataOneIframe.id: \t' + this.IsNullOrUndefined(dataOneIframe.IframeElem.id));
            }
            this.Log('dataOneIframe.ContentDoc: \t' + this.IsNullOrUndefined(dataOneIframe.ContentDoc));
            this.DebugIDataDoc(dataOneIframe.ContentDoc);
        }
        this.FuncEnd(this.DebugDataOneIframe.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/zLast.js



var zLast_xyyz = zLast_xyyz || {};
let zLast_debug = new ContentDebug_ContentDebug(window.opener);
zLast_debug.Enabled = true;
zLast_debug.LogVal('test of content debug', 'cat cat cat');
let SitecoreUiMan = new SitecoreUiManager(zLast_debug);
zLast_xyyz.HubObj = new ContentHub_ContentHub(SitecoreUiMan, zLast_debug);


/***/ })
/******/ ]);