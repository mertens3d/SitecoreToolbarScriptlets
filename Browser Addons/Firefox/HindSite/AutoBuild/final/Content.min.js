/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/_first/_ContentManagerBase.js
class ContentManagerBase {
    constructor(contentHub) {
        this.ContentHub = contentHub;
    }
    AtticMan() { return this.ContentHub.AtticMan; }
    debug() { return this.ContentHub.debug; }
    Helpers() { return this.ContentHub.Helpers; }
    OneScWinMan() { return this.ContentHub.OneWindowMan; }
    ScUiMan() { return this.ContentHub.SitecoreUiMan; }
    MsgMan() { return this.ContentHub.MsgMan; }
    Factoryman() { return this.ContentHub.Factory; }
    MiscMan() { return this.ContentHub.MiscMan; }
    PromiseOneStep() { return this.ContentHub.PromiseOneStep; }
    MsgFlag() { return this.ContentHub.MessageFlag; }
    SharedConst() { return this.ContentHub.SharedConst; }
    ReadyForMessages() { return this.ContentHub.ReadyForMessages; }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/scWindowType.js
var scWindowType;
(function (scWindowType) {
    scWindowType[scWindowType["Unknown"] = 0] = "Unknown";
    scWindowType[scWindowType["LoginPage"] = 1] = "LoginPage";
    scWindowType[scWindowType["Desktop"] = 2] = "Desktop";
    scWindowType[scWindowType["ContentEditor"] = 3] = "ContentEditor";
    scWindowType[scWindowType["Launchpad"] = 4] = "Launchpad";
    scWindowType[scWindowType["Edit"] = 5] = "Edit";
    scWindowType[scWindowType["Normal"] = 6] = "Normal";
    scWindowType[scWindowType["Preview"] = 7] = "Preview";
})(scWindowType || (scWindowType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SnapShotFlavor.js
var SnapShotFlavor;
(function (SnapShotFlavor) {
    SnapShotFlavor[SnapShotFlavor["Unknown"] = 0] = "Unknown";
    SnapShotFlavor[SnapShotFlavor["Autosave"] = 1] = "Autosave";
    SnapShotFlavor[SnapShotFlavor["Favorite"] = 2] = "Favorite";
    SnapShotFlavor[SnapShotFlavor["Manual"] = 3] = "Manual";
})(SnapShotFlavor || (SnapShotFlavor = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/ResultSuccessFail.js
class ResultSuccessFail {
    constructor() {
        this.Succeeded = false;
        this.RejectMessage = '';
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/CacheMode.js
var CacheMode;
(function (CacheMode) {
    CacheMode[CacheMode["DoNotUseCach"] = 0] = "DoNotUseCach";
    CacheMode[CacheMode["OkToUseCache"] = 1] = "OkToUseCache";
})(CacheMode || (CacheMode = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/MessageFlag.js
var MsgFlag;
(function (MsgFlag) {
    MsgFlag[MsgFlag["Unknown"] = 0] = "Unknown";
    MsgFlag[MsgFlag["GetAllStorageOneWindow"] = 1] = "GetAllStorageOneWindow";
    MsgFlag[MsgFlag["NewWindowTest"] = 2] = "NewWindowTest";
    MsgFlag[MsgFlag["RemoveFromStorage"] = 3] = "RemoveFromStorage";
    MsgFlag[MsgFlag["ReqAddCETab"] = 4] = "ReqAddCETab";
    MsgFlag[MsgFlag["ReqAdminB"] = 5] = "ReqAdminB";
    MsgFlag[MsgFlag["ReqCurState"] = 6] = "ReqCurState";
    MsgFlag[MsgFlag["ReqGoDesktop"] = 7] = "ReqGoDesktop";
    MsgFlag[MsgFlag["ReqLoginWithAdminB"] = 8] = "ReqLoginWithAdminB";
    MsgFlag[MsgFlag["ReqOpenCE"] = 9] = "ReqOpenCE";
    MsgFlag[MsgFlag["ReqQuickPublish"] = 10] = "ReqQuickPublish";
    MsgFlag[MsgFlag["ReqRestoreClick"] = 11] = "ReqRestoreClick";
    MsgFlag[MsgFlag["ReqRestoreToNewTab"] = 12] = "ReqRestoreToNewTab";
    MsgFlag[MsgFlag["ReqSetScMode"] = 13] = "ReqSetScMode";
    MsgFlag[MsgFlag["ReqTakeSnapShot"] = 14] = "ReqTakeSnapShot";
    MsgFlag[MsgFlag["ReqUpdateNickName"] = 15] = "ReqUpdateNickName";
    MsgFlag[MsgFlag["RespCurState"] = 16] = "RespCurState";
    MsgFlag[MsgFlag["RespError"] = 17] = "RespError";
    MsgFlag[MsgFlag["RespTaskFailed"] = 18] = "RespTaskFailed";
    MsgFlag[MsgFlag["RespTaskSuccessful"] = 19] = "RespTaskSuccessful";
    MsgFlag[MsgFlag["RespTest"] = 20] = "RespTest";
    MsgFlag[MsgFlag["ReqMarkFavorite"] = 21] = "ReqMarkFavorite";
    MsgFlag[MsgFlag["Ping"] = 22] = "Ping";
    MsgFlag[MsgFlag["RespListeningAndReady"] = 23] = "RespListeningAndReady";
})(MsgFlag || (MsgFlag = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferDirection.js
var BufferDirection;
(function (BufferDirection) {
    BufferDirection[BufferDirection["left"] = 0] = "left";
    BufferDirection[BufferDirection["right"] = 1] = "right";
})(BufferDirection || (BufferDirection = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferChar.js
var BufferChar;
(function (BufferChar) {
    BufferChar[BufferChar["space"] = 0] = "space";
    BufferChar[BufferChar["Nbsp"] = 1] = "Nbsp";
    BufferChar[BufferChar["Period"] = 2] = "Period";
    BufferChar[BufferChar["Zero"] = 3] = "Zero";
})(BufferChar || (BufferChar = {}));
var BufferUseNbsp;
(function (BufferUseNbsp) {
    BufferUseNbsp[BufferUseNbsp["space"] = 0] = "space";
    BufferUseNbsp[BufferUseNbsp["nbsp"] = 1] = "nbsp";
})(BufferUseNbsp || (BufferUseNbsp = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/StaticHelpers.js






class StaticHelpers_StaticHelpers {
    static MinToMs(minutes) {
        return minutes * 60 * 1000;
    }
    static FlavorAsString(flavor) {
        return 'Flavor.' + SnapShotFlavor[flavor] + '(' + flavor + ')';
    }
    static CacheModeAsString(cacheMode) {
        return 'CacheMode.' + CacheMode[cacheMode] + ' (' + cacheMode + ')';
    }
    static WindowTypeAsString(windowType) {
        return scWindowType[windowType];
    }
    static BufferString(str, desiredLength, buffCharEnum, direction) {
        var toReturn = str;
        var buffChar = ' ';
        if (buffCharEnum === BufferChar.space) {
            buffChar = ' ';
        }
        else if (buffCharEnum == BufferChar.Nbsp) {
            buffChar = '&nbsp;';
        }
        else if (buffCharEnum == BufferChar.Period) {
            buffChar = '.';
        }
        else if (buffCharEnum == BufferChar.Zero) {
            buffChar = '0';
        }
        if (toReturn.length > desiredLength) {
            if (desiredLength > 6) {
                toReturn = toReturn.substring(0, desiredLength - 3) + '...';
            }
            else {
                toReturn = toReturn.substring(0, desiredLength);
            }
        }
        if (toReturn.length < desiredLength) {
            var bufferCharNeeded = desiredLength - toReturn.length;
            for (var idx = 0; idx < bufferCharNeeded; idx++) {
                if (direction == BufferDirection.left) {
                    toReturn = buffChar + toReturn;
                }
                else {
                    toReturn = toReturn + buffChar;
                }
            }
        }
        return toReturn;
    }
    static MsgFlagAsString(msg) {
        var toReturn = "{error}";
        if (msg) {
            try {
                toReturn = MsgFlag[msg];
            }
            catch (e) {
            }
        }
        return 'flag: ' + toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/scMode.js
var scMode;
(function (scMode) {
    scMode[scMode["Unknown"] = 0] = "Unknown";
    scMode[scMode["Edit"] = 1] = "Edit";
    scMode[scMode["Preview"] = 2] = "Preview";
    scMode[scMode["Normal"] = 3] = "Normal";
})(scMode || (scMode = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/InjectConst.js

class ContentConst {
}
ContentConst.Const = {
    MaxAutoToSaveCount: 10,
    MaxAutoSaveAgeDays: 1,
    MaxCacheAgeMs: 1000 * 60 * 10,
    Iterations: {
        MaxSetHrefEffort: 10,
        MaxIterationSwitchBoard: 20,
    },
    Timeouts: {
        PostLoginBtnClick: 1000,
        SetHrefEffortWait: 1000,
        WaitBeforeRemovingCompleteFlagOnContent: 1500,
        AutoSaveIntervalMin: 1,
    },
    ElemId: {
        sc: {
            scLoginUserName: 'UserName',
            scLoginPassword: 'Password',
            SitecoreRootNodeId: 'Tree_Node_11111111111111111111111111111111',
            SitecoreRootGlyphId: 'Tree_Glyph_11111111111111111111111111111111',
            scLoginBtn: {
                sc920: 'LogInBtn',
                sc820: null
            },
        }
    },
    ClassNames: {
        ContentTreeNode: 'scContentTreeNode',
        SC: {
            scContentTreeNodeActive: 'scContentTreeNodeActive',
        }
    },
    ScMode: {
        edit: { AsEnum: scMode.Edit, AsString: 'edit' },
        normal: { AsEnum: scMode.Normal, AsString: 'normal' },
        preview: { AsEnum: scMode.Preview, AsString: 'preview' },
    },
    Selector: {
        SC: {
            ContentTreeNodeGlyph: '.scContentTreeNodeGlyph',
            IdStartsWithTreeNode: '[id^=Tree_Node_]',
            IframeContent: 'iframe[src*=content]',
            JqueryModalDialogsFrame: '[id=jqueryModalDialogsFrame]',
            ContentIframe0: '[id=scContentIframeId0]',
            NextButton: '[id=NextButton]',
            ContentIFrame1: '[id=scContentIframeId1]',
            Ok: '[id=OK]',
            Cancel: '[id=CancelButton]',
            MenuButtonPublish: '[id=B414550BADAF4542C9ADF44BED5FA6CB3E_menu_button]',
            MenuDropDownPublishItem: '[id=B414550BADAF4542C9ADF44BED5FA6CB3E_menu_98719A90225A4802A0625D3967E4DD47]',
            NavPublishStrip: '[id*=_Nav_PublishStrip]',
            StartMenuLeftOption: '.scStartMenuLeftOption',
            Publish: {
                TheItemHasBeenPublished: '[id=LastPage]:not([style*=\'display:none\'])',
                SettingsHidden: '[id=Settings][style*=\'display: none\']',
                PublishingHidden: '[id=Publishing][style*=\'display: none\']',
            },
            LoginBtn: {
                sc920: null,
                sc820: 'input.btn',
            },
            scStartButton: {
                sc920: '[id=StartButton]',
                sc820: '[id=startButton]'
            },
        },
    },
    Storage: {
        SettingsSuffix: '.Settings',
        ShowDebugData: false,
        SnapShotPrefix: '.WindowSnapShot.',
        WindowRoot: 'Xyyz',
    },
    MaxIter: 100,
    MaxNullOrUndefinedIter: 100,
    prop: {
        AllTreeData: 'AllTreeData',
    },
    Names: {
        SC: {
            TreeGlyphPrefix: 'Tree_Glyph_',
            TreeNodePrefix: 'Tree_Node_',
            TreeExpandedPng: {
                sc920: 'treemenu_expanded.png',
                sc820: 'todo'
            }
        },
        PopUp: 'PopUp',
        PopUpStyles: 'PopUpStyles',
        TreeMenuExpandedPng: 'treemenu_expanded.png',
        TreeMenuCollapsedPng: 'treemenu_collapsed.png',
        scDefaultAdminPassword: 'b',
        scDefaultAdminUserName: 'admin',
    }
};

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/ContentAtticManager.js
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class ContentAtticManager_ContentAtticManager extends ContentManagerBase {
    constructor(hub) {
        super(hub);
        hub.debug.FuncStart(ContentAtticManager_ContentAtticManager.name);
        hub.debug.FuncEnd(ContentAtticManager_ContentAtticManager.name);
    }
    Init() {
    }
    UpdateNickname(payload) {
        this.debug().FuncStart(this.UpdateNickname.name);
        if (payload.IdOfSelect) {
            var storageMatch = this.GetFromStorageById(payload.IdOfSelect, CacheMode.OkToUseCache);
            if (storageMatch && payload.SnapShotSettings && payload.SnapShotSettings.SnapShotNewNickname) {
                storageMatch.NickName = payload.SnapShotSettings.SnapShotNewNickname;
                this.WriteToStorage(storageMatch);
            }
        }
        this.debug().FuncEnd(this.UpdateNickname);
    }
    MarkFavorite(data) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.MarkFavorite.name);
            var result = new ResultSuccessFail();
            if (data.IdOfSelect) {
                var storageMatch = this.GetFromStorageById(data.IdOfSelect, CacheMode.OkToUseCache);
                if (storageMatch) {
                    storageMatch.Flavor = SnapShotFlavor.Favorite;
                    yield this.WriteToStorage(storageMatch);
                    result.Succeeded = true;
                }
                else {
                    result.Succeeded = false;
                    result.RejectMessage = 'No storage match found';
                }
            }
            else {
                result.Succeeded = false;
                result.RejectMessage = 'no id provided';
            }
            this.debug().FuncEnd(this.MarkFavorite.name);
            if (result) {
                resolve();
            }
            else {
                reject(result.RejectMessage);
            }
        }));
    }
    WriteToStorage(dataOneWindow) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.debug().FuncStart(this.WriteToStorage.name);
                var result = new ResultSuccessFail();
                var snapShotAsString = JSON.stringify(dataOneWindow);
                yield window.localStorage.setItem(ContentConst.Const.Storage.WindowRoot + ContentConst.Const.Storage.SnapShotPrefix + dataOneWindow.Id.AsString, snapShotAsString);
                var foundInStorage = yield this.GetFromStorageById(dataOneWindow.Id, CacheMode.DoNotUseCach);
                if (foundInStorage) {
                    result.Succeeded = true;
                }
                else {
                    result.Succeeded = false;
                    result.RejectMessage = 'Snap shot not successfully saved';
                }
                this.debug().FuncEnd(this.WriteToStorage.name);
                if (result.Succeeded) {
                    resolve();
                }
                else {
                    reject(result.RejectMessage);
                }
            }));
        });
    }
    GetFromStorageById(needleId, cacheMode) {
        this.debug().FuncStart(this.GetFromStorageById.name, needleId.AsString);
        var foundStorage = this.GetAllSnapShotsMany(cacheMode);
        var DateOneWinStoreMatch = null;
        if (foundStorage) {
            for (var idx = 0; idx < foundStorage.CurrentSnapShots.length; idx++) {
                var candidate = foundStorage.CurrentSnapShots[idx];
                if (candidate.Id.AsString === needleId.AsString) {
                    DateOneWinStoreMatch = candidate;
                    break;
                }
            }
        }
        if (DateOneWinStoreMatch) {
            this.debug().Log('found match', this.Helpers().UtilityHelp.TimeNicknameFavStr(DateOneWinStoreMatch));
        }
        else {
            this.debug().LogVal(this.GetFromStorageById.name, 'Match notfound');
        }
        this.debug().FuncEnd(this.GetFromStorageById.name);
        return DateOneWinStoreMatch;
    }
    __getAllLocalStorageAsIOneStorageData() {
        this.debug().FuncStart(this.__getAllLocalStorageAsIOneStorageData.name);
        var toReturn = [];
        var storageLength = window.localStorage.length;
        this.debug().LogVal('storageLength', storageLength);
        for (var idx = 0; idx < storageLength; idx++) {
            this.debug().LogVal('Processing Index', idx);
            var candidate = {
                data: '',
                key: '',
            };
            candidate.key = window.localStorage.key(idx);
            this.debug().LogVal('Candidate.key', candidate.key);
            if (candidate.key.startsWith(ContentConst.Const.Storage.WindowRoot + ContentConst.Const.Storage.SnapShotPrefix)) {
                this.debug().LogVal('valid candidate', true);
                candidate.data = window.localStorage.getItem(candidate.key);
                if (this.debug().IsNotNullOrUndefinedBool('candidate.data', candidate.data)) {
                    toReturn.push(candidate);
                }
            }
        }
        this.debug().FuncEnd(this.__getAllLocalStorageAsIOneStorageData.name, toReturn.length);
        return toReturn;
    }
    __parseRawData(oneRaw) {
        var candidate = JSON.parse(oneRaw.data);
        console.log;
        if (candidate) {
            candidate.TimeStamp = new Date(candidate.TimeStamp);
            candidate.Id = this.ContentHub.Helpers.GuidHelp.ParseGuid(candidate.Id.AsString);
            candidate.RawData = oneRaw;
            if (!candidate.WindowType) {
                candidate.WindowType = scWindowType.Unknown;
                candidate.WindowFriendly = scWindowType[candidate.WindowType];
            }
            if (!candidate.NickName) {
                candidate.NickName = '';
            }
        }
        else {
            this.debug().Error(this.__parseRawData.name, 'Saved data did not import correctly');
        }
        return candidate;
    }
    __getAllStorageReal() {
        this.debug().FuncStart(this.__getAllStorageReal.name);
        var toReturn = [];
        var rawStorageData = this.__getAllLocalStorageAsIOneStorageData();
        if (rawStorageData) {
            for (var idx = 0; idx < rawStorageData.length; idx++) {
                toReturn.push(this.__parseRawData(rawStorageData[idx]));
            }
        }
        toReturn.sort((a, b) => +b.TimeStamp - +a.TimeStamp);
        toReturn = this.FilterOutOldData(toReturn);
        this.debug().FuncEnd(this.__getAllStorageReal.name);
        return toReturn;
    }
    CleanOutOldData() {
        this.debug().FuncStart(this.CleanOutOldData.name);
        var cleanData = [];
        var now = new Date();
        var maxAutoSaveDiff = ContentConst.Const.MaxAutoSaveAgeDays * 24 * 60 * 60 * 1000;
        if (this.CachedWindowStorage) {
            var cacheLength = this.CachedWindowStorage.CurrentSnapShots.length;
            var autoCount = 0;
            for (var idx = 0; idx < cacheLength; idx++) {
                var deleteFlag = false;
                var candidate = this.CachedWindowStorage.CurrentSnapShots[idx];
                if (candidate.Flavor) {
                    if (autoCount > ContentConst.Const.MaxAutoToSaveCount) {
                        this.debug().LogVal('Delete (max count :' + ContentConst.Const.MaxAutoToSaveCount + ')', candidate.TimeStamp.toString());
                        deleteFlag = true;
                    }
                    autoCount++;
                }
                if (now.getTime() - candidate.TimeStamp.getTime() > maxAutoSaveDiff) {
                    this.debug().LogVal('Delete (Old : max' + ContentConst.Const.MaxAutoSaveAgeDays + ' days)', candidate.TimeStamp.toString());
                    deleteFlag = true;
                }
                if (!deleteFlag) {
                    cleanData.push(candidate);
                }
                else {
                    try {
                        this.debug().LogVal('Cleaning old autosave', candidate.RawData.key);
                        window.localStorage.removeItem(candidate.RawData.key);
                    }
                    catch (e) {
                        this.debug().Error(this.CleanOutOldData.name, 'unable to delete key: ' + candidate.RawData.key);
                    }
                }
            }
            this.CachedWindowStorage.CurrentSnapShots = cleanData;
        }
        this.debug().FuncEnd(this.CleanOutOldData.name);
    }
    GetAllSnapShotsMany(cacheMode) {
        this.debug().FuncStart(this.GetAllSnapShotsMany.name, StaticHelpers_StaticHelpers.CacheModeAsString(cacheMode));
        var toReturn;
        if (cacheMode === CacheMode.DoNotUseCach) {
            this.CachedWindowStorage = null;
        }
        if (!this.CachedWindowStorage) {
            this.CachedWindowStorage = {
                CurrentSnapShots: [],
                Birthday: new Date(1970),
                FavoriteCount: 0,
                SnapShotsAutoCount: 0,
                PlainCount: 0,
            };
        }
        var timeDiff = Date.now() - this.CachedWindowStorage.Birthday.getTime();
        this.debug().LogVal('cached timeDiff', timeDiff + ' : ' + ContentConst.Const.MaxCacheAgeMs);
        if (timeDiff > (ContentConst.Const.MaxCacheAgeMs)) {
            this.debug().Log('updating cache');
            this.CachedWindowStorage.CurrentSnapShots = this.__getAllStorageReal();
            this.CachedWindowStorage.Birthday = new Date();
        }
        else {
            this.debug().Log('using cache');
        }
        this.CleanOutOldData();
        this.UpdateCounts();
        toReturn = this.CachedWindowStorage;
        this.debug().FuncEnd(this.GetAllSnapShotsMany.name);
        return toReturn;
    }
    UpdateCounts() {
        this.CachedWindowStorage.FavoriteCount = 0;
        this.CachedWindowStorage.SnapShotsAutoCount = 0;
        this.CachedWindowStorage.PlainCount = 0;
        for (var idx = 0; idx < this.CachedWindowStorage.CurrentSnapShots.length; idx++) {
            var candidate = this.CachedWindowStorage.CurrentSnapShots[idx];
            if (candidate.Flavor == SnapShotFlavor.Autosave) {
                this.CachedWindowStorage.SnapShotsAutoCount++;
            }
            else if (candidate.Flavor == SnapShotFlavor.Favorite) {
                this.CachedWindowStorage.FavoriteCount++;
            }
            else {
                this.CachedWindowStorage.PlainCount++;
            }
        }
    }
    FilterOutOldData(data) {
        var toReturn = data;
        return toReturn;
    }
    RemoveOneFromStorage(targetId) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.RemoveOneFromStorage.name);
            var successful = true;
            var failMsg = '';
            try {
                if (targetId) {
                    var storageMatch = yield this.GetFromStorageById(targetId, CacheMode.OkToUseCache);
                    if (storageMatch) {
                        var result = confirm('Remove ?: ' + this.ContentHub.Utilities.TimeNicknameFavStrForConfirmation(storageMatch));
                        if (result === true) {
                            this.debug().LogVal('Key to Delete', storageMatch.RawData.key);
                            yield window.localStorage.removeItem(storageMatch.RawData.key);
                            var stillExists = yield this.GetFromStorageById(targetId, CacheMode.DoNotUseCach);
                            if (stillExists) {
                                successful = false;
                                failMsg = 'Snapshot still exists after deleting';
                            }
                            else {
                                successful = true;
                            }
                            this.debug().Log('Attempting completed');
                        }
                        else {
                            successful = false;
                            failMsg = 'Confirmation not received';
                        }
                    }
                    else {
                        successful = false;
                        failMsg = 'no storage match';
                    }
                }
                else {
                    successful = false;
                    failMsg = 'no target id';
                }
            }
            catch (e) {
                successful = false;
                failMsg = e.toString();
            }
            this.debug().FuncEnd(this.RemoveOneFromStorage.name);
            if (successful) {
                this.debug().Log('resolving');
                resolve();
            }
            else {
                this.debug().Log('rejecting');
                reject(failMsg);
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/MiscManager.js


class MiscManager_MiscManager extends ContentManagerBase {
    constructor(hub) {
        hub.debug.FuncStart(MiscManager_MiscManager.name);
        super(hub);
        hub.debug.FuncEnd(MiscManager_MiscManager.name);
    }
    NotNullOrUndefined(subjectAnyOrAr, label = '', iterationCheck = null) {
        var toReturn = false;
        if (!iterationCheck) {
            iterationCheck = ContentConst.Const.MaxNullOrUndefinedIter;
        }
        iterationCheck -= 1;
        if (iterationCheck > 0) {
            if (label === '') {
                label = this.NotNullOrUndefined.name + ' : no labelprovided';
            }
            if (subjectAnyOrAr === 'undefined') {
                this.debug().Error(label, 'Is undefined');
            }
            else if (!subjectAnyOrAr) {
                this.debug().Error(label, 'Is Null');
            }
            else {
                this.debug().LogVal(label, 'Passed');
                toReturn = true;
                if (Array.isArray(subjectAnyOrAr)) {
                    for (var idx = 0; idx < subjectAnyOrAr.length; idx++) {
                        toReturn = toReturn && this.NotNullOrUndefined(subjectAnyOrAr[idx], (idx + 1) + ':' + subjectAnyOrAr.length + ' ' + label, iterationCheck);
                    }
                }
            }
        }
        else {
            this.debug().Error(this.NotNullOrUndefined.name, 'max iteration hit');
        }
        this.debug().LogVal('toReturn', toReturn);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Promises/PromiseChainQuickPublish.js
var PromiseChainQuickPublish_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class PromiseChainQuickPublish_PromiseChainQuickPublish extends ContentManagerBase {
    constructor(hub) {
        super(hub);
    }
    __debugDataPublishChain(dataPublishChain, nickname) {
        this.debug().FuncStart(this.__debugDataPublishChain.name, nickname);
        this.debug().LogVal('docToPublish', this.debug().IsNullOrUndefined(dataPublishChain.docToPublish));
        this.debug().LogVal('jqIframe', this.debug().IsNullOrUndefined(dataPublishChain.jqIframe) + ' ' + (dataPublishChain.jqIframe ? dataPublishChain.jqIframe.IframeElem.src : ''));
        this.debug().LogVal('Iframe0blueIframe', this.debug().IsNullOrUndefined(dataPublishChain.Iframe0Blue) + ' ' + (dataPublishChain.Iframe0Blue ? dataPublishChain.Iframe0Blue.IframeElem.src : ''));
        this.debug().LogVal('messageDialogIframeRed', this.debug().IsNullOrUndefined(dataPublishChain.messageDialogIframeRed) + ' ' + (dataPublishChain.messageDialogIframeRed ? dataPublishChain.messageDialogIframeRed.IframeElem.src : ''));
        this.debug().FuncEnd(this.__debugDataPublishChain.name);
        return dataPublishChain;
    }
    PublishCE(docToPublish) {
        return PromiseChainQuickPublish_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.PublishCE.name);
            var dataPublishChain = {
                docToPublish: docToPublish,
                TopLevelDoc: this.ScUiMan().TopLevelDoc(),
                Iframe0Blue: null,
                jqIframe: null,
                messageDialogIframeRed: null
            };
            yield this.PromiseOneStep().ClickPublishOnNav(dataPublishChain)
                .then((dataPublishChain) => this.PromiseOneStep().ClickMenuButtonPublishDropDown(dataPublishChain))
                .then((dataPublishChain) => this.__debugDataPublishChain(dataPublishChain, 'post ClickMenuButtonPublishDropDown'))
                .then((dataPublishChain) => this.PromiseOneStep().ClickMenuDropDownPublishItem(dataPublishChain))
                .then((dataPublishChain) => this.__debugDataPublishChain(dataPublishChain, 'post MenuDropDownPublishItem'))
                .then((dataPublishChain) => this.PromiseOneStep().GetThePublishItemDialog(dataPublishChain))
                .then((dataPublishChain) => this.__debugDataPublishChain(dataPublishChain, 'post PublishItemDialog'))
                .then((dataPublishChain) => this.GetDialogIframe0Blue(dataPublishChain))
                .then((dataPublishChain) => this.__WaitForAndClickPublishNextButton(dataPublishChain))
                .then((dataPublishChain) => this.GetMessageDialog(dataPublishChain))
                .then((dataPublishChain) => this.__waitForAndClickOk(dataPublishChain))
                .then((dataPublishChain) => this.__waitForAndClickClose(dataPublishChain))
                .catch(ex => {
                this.debug().Error(this.PublishCE.name, ex);
            });
            this.debug().FuncEnd(this.PublishCE.name);
        });
    }
    __waitForAndClickClose(dataPublishChain) {
        return PromiseChainQuickPublish_awaiter(this, void 0, void 0, function* () {
            yield this.Helpers().PromiseHelp.WaitForAndReturnFoundElem(dataPublishChain.Iframe0Blue.ContentDoc, ContentConst.Const.Selector.SC.Publish.SettingsHidden)
                .then(() => PromiseChainQuickPublish_awaiter(this, void 0, void 0, function* () {
                yield this.Helpers().PromiseHelp.WaitForAndReturnFoundElem(dataPublishChain.Iframe0Blue.ContentDoc, ContentConst.Const.Selector.SC.Publish.TheItemHasBeenPublished, this.SharedConst().IterHelper.MaxCount.OverridePublishing);
            }))
                .then(() => PromiseChainQuickPublish_awaiter(this, void 0, void 0, function* () {
                yield this.Helpers().PromiseHelp.WaitForThenClick([ContentConst.Const.Selector.SC.Cancel], dataPublishChain.Iframe0Blue.ContentDoc);
            }));
            return dataPublishChain;
        });
    }
    __waitForAndClickOk(dataPublishChain) {
        return PromiseChainQuickPublish_awaiter(this, void 0, void 0, function* () {
            yield this.Helpers().PromiseHelp.WaitForThenClick([ContentConst.Const.Selector.SC.Ok], dataPublishChain.messageDialogIframeRed.ContentDoc);
            return dataPublishChain;
        });
    }
    __WaitForAndClickPublishNextButton(dataPublishChain) {
        return PromiseChainQuickPublish_awaiter(this, void 0, void 0, function* () {
            yield this.Helpers().PromiseHelp.WaitForThenClick([ContentConst.Const.Selector.SC.NextButton], dataPublishChain.Iframe0Blue.ContentDoc);
            return dataPublishChain;
        });
    }
    GetMessageDialog(dataPublishChain) {
        return PromiseChainQuickPublish_awaiter(this, void 0, void 0, function* () {
            var IDataOneIframe = this.Factoryman().DateOneIframeFactory(null, dataPublishChain.jqIframe.ContentDoc, 'iframeRed');
            dataPublishChain.messageDialogIframeRed =
                yield this.Helpers().PromiseHelp.WaitForAndReturnReadyIframe(dataPublishChain.jqIframe.ContentDoc, ContentConst.Const.Selector.SC.ContentIFrame1, IDataOneIframe);
            return dataPublishChain;
        });
    }
    GetDialogIframe0Blue(dataPublishChain = null) {
        return PromiseChainQuickPublish_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.GetDialogIframe0Blue.name);
            var IDataOneIframe = this.Factoryman().DateOneIframeFactory(null, dataPublishChain.jqIframe.ContentDoc, 'Iframe0Blue');
            dataPublishChain.Iframe0Blue = yield this.Helpers().PromiseHelp.WaitForAndReturnReadyIframe(dataPublishChain.jqIframe.ContentDoc, ContentConst.Const.Selector.SC.ContentIframe0, IDataOneIframe);
            this.debug().DebugDataOneIframe(dataPublishChain.Iframe0Blue);
            this.debug().FuncEnd(this.GetDialogIframe0Blue.name);
            return dataPublishChain;
        });
    }
    __waitForThenFunc(selector, targetDoc, dataPublishChain, optionFunc) {
        return new Promise((resolve, reject) => PromiseChainQuickPublish_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.__waitForThenFunc.name, selector);
            this.debug().DebugIDataOneDoc(targetDoc);
            var found = null;
            var found = yield this.Helpers().PromiseHelp.WaitForAndReturnFoundElem(targetDoc, selector);
            if (found) {
                this.debug().Log('found');
                if (optionFunc) {
                    this.debug().Log('executing func');
                    dataPublishChain = yield optionFunc(found, dataPublishChain);
                }
                this.__debugDataPublishChain(dataPublishChain, this.__waitForThenFunc.name);
                this.debug().FuncEnd(this.__waitForThenFunc.name, selector);
                resolve(dataPublishChain);
            }
            else {
                reject('not found');
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/SharedConst.js
class SharedConst {
}
SharedConst.SharedConst = {
    IterHelper: {
        GrowthPerIteration: 0.5,
        MaxCount: {
            Default: 10,
            OverridePublishing: 15,
        },
        Timeouts: {
            Max: 10000,
            Default: 100,
        },
    },
    Regex: {
        ContentEditor: /Content.*?Editor/ig,
        NbSp: /&nbsp;/ig,
        PageType: {
            Desktop: /.*default.aspx/ig,
            Edit: /sc_itemid=.*sc_mode=edit/ig,
            Normal: /sc_itemid=.*sc_mode=normal/ig,
            Preview: /sc_itemid=.*sc_mode=preview/ig,
        },
    },
    UrlSuffix: {
        Desktop: '/sitecore/shell/default.aspx',
        Login: '/sitecore/login',
        LaunchPad: '/client/applications/launchpad',
        CE: '/sitecore/shell/Applications/Content Editor.aspx?sc_bw=1',
        None: '/',
    },
};

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/HelperBase.js
class HelperBase {
    constructor(helperHub) {
        this.HelperHub = helperHub;
        this.Debug = helperHub.Debug;
    }
    GuidHelp() { return this.HelperHub.GuidHelp; }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/IterationHelper.js


class IterationHelper_IterationHelper extends HelperBase {
    constructor(helperHub, nickname, maxIterations = null) {
        super(helperHub);
        this.IsExhaustedMsg = 'Iteration helper exhausted';
        if (!maxIterations) {
            maxIterations = SharedConst.SharedConst.IterHelper.MaxCount.Default;
        }
        this.__maxIterations = maxIterations;
        this.__currentIteration = maxIterations;
        this.__timeout = SharedConst.SharedConst.IterHelper.Timeouts.Default;
        this.__nickName = nickname;
        this.IsExhausted = false;
    }
    DecrementAndKeepGoing() {
        var toReturn = false;
        if (this.__currentIteration > 0) {
            this.__currentIteration -= 1;
            this.__timeout += this.__timeout * SharedConst.SharedConst.IterHelper.GrowthPerIteration;
            if (this.__timeout > SharedConst.SharedConst.IterHelper.Timeouts.Max) {
                this.__timeout = SharedConst.SharedConst.IterHelper.Timeouts.Max;
            }
            this.Debug.Log('DecrementAndKeepGoing: ' + this.__nickName + ' ' + this.__currentIteration + ':' + this.__maxIterations + ' | timeout: ' + this.__timeout);
            toReturn = true;
        }
        else {
            this.IsExhausted = true;
            this.NotifyExhausted();
            toReturn = false;
        }
        return toReturn;
    }
    NotifyExhausted() {
        this.Debug.Log('Iteration: ' + this.__nickName + ' counter exhausted ' + this.__currentIteration + ':' + this.__maxIterations);
    }
    WaitAndThen(timeoutFunction) {
        this.Debug.FuncStart(this.WaitAndThen.name, this.__nickName + ' ' + timeoutFunction.name);
        var self = this;
        setTimeout(timeoutFunction(), self.__timeout);
        this.Debug.FuncEnd(this.WaitAndThen.name, this.__nickName);
    }
    Wait() {
        this.Debug.FuncStart(this.Wait.name, this.__nickName);
        if (!this.OperationCancelled) {
            return new Promise((resolve) => {
                setTimeout(resolve, this.__timeout);
            });
        }
        this.Debug.FuncEnd(this.WaitAndThen.name, this.__nickName);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Promises/PromiseChainRestoreDesktop.js
var PromiseChainRestoreDesktop_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class PromiseChainRestoreDesktop_PromiseChainRestoreDesktop extends ContentManagerBase {
    constructor(hub) {
        hub.debug.FuncStart(PromiseChainRestoreDesktop_PromiseChainRestoreDesktop.name);
        super(hub);
        hub.debug.FuncEnd(PromiseChainRestoreDesktop_PromiseChainRestoreDesktop.name);
    }
    __waitForAndClickRedStartButtonPromise(promiseBucket) {
        return new Promise((resolve, reject) => PromiseChainRestoreDesktop_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.__waitForAndClickRedStartButtonPromise.name);
            if (this.MiscMan().NotNullOrUndefined([promiseBucket, promiseBucket.targetDoc], this.__waitForAndClickRedStartButtonPromise.name)) {
                this.debug().MarkerB();
                yield this.Helpers().PromiseHelp.RaceWaitAndClick(ContentConst.Const.Selector.SC.scStartButton, promiseBucket.targetDoc)
                    .then(() => resolve(promiseBucket))
                    .catch(ex => {
                    this.debug().Error(this.__waitForAndClickRedStartButtonPromise.name, ex);
                    reject(ex);
                });
            }
            else {
                reject(this.__waitForAndClickRedStartButtonPromise.name + ' something was null or undefined');
            }
            this.debug().FuncEnd(this.__waitForAndClickRedStartButtonPromise.name);
        }));
    }
    __waitForIframeReady(promiseBucket) {
        return new Promise((resolve, reject) => PromiseChainRestoreDesktop_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.__waitForIframeReady.name, 'promiseBucket not null: ' + (promiseBucket !== null));
            this.debug().PromiseBucketDebug(promiseBucket, this.__waitForIframeReady.name);
            var success = yield this.Helpers().PromiseHelp.WaitForReadyIframe(promiseBucket.NewIframe);
            if (success) {
                this.debug().Log('resolved! : ');
                promiseBucket.NewIframe.ContentDoc.Document = promiseBucket.NewIframe.IframeElem.contentDocument;
                this.debug().DebugDataOneIframe(promiseBucket.NewIframe);
                resolve(promiseBucket);
            }
            else {
                this.debug().Log('rejected ! : ');
                reject(this.__waitForIframeReady.name);
            }
            this.debug().FuncEnd(this.__waitForIframeReady.name);
        }));
    }
    __waitForIframeCountDiffPromise(promiseBucket) {
        return new Promise((resolve, reject) => PromiseChainRestoreDesktop_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.__waitForIframeCountDiffPromise.name);
            var success = new ResultSuccessFail();
            var iframeResult = yield this.OneScWinMan().OneDesktopMan.WaitForIframeCountDiffWorker(promiseBucket.IFramesbefore);
            this.debug().MarkerB();
            if (iframeResult) {
                this.debug().MarkerC();
                promiseBucket.NewIframe = iframeResult;
                this.debug().DebugDataOneIframe(promiseBucket.NewIframe);
                success.Succeeded = true;
            }
            else {
                success.Succeeded = false;
                success.RejectMessage = 'fail ' + this.__waitForIframeCountDiffPromise.name;
            }
            this.debug().FuncEnd(this.__waitForIframeCountDiffPromise.name);
            if (success.Succeeded) {
                resolve(promiseBucket);
            }
            else {
                reject(success.RejectMessage);
            }
        }));
    }
    __waitForAndThenClickCEFromMenuPromise(promiseBucket) {
        return new Promise((resolve, reject) => PromiseChainRestoreDesktop_awaiter(this, void 0, void 0, function* () {
            yield this.Helpers().PromiseHelp.WaitForThenClick([ContentConst.Const.Selector.SC.StartMenuLeftOption], promiseBucket.targetDoc)
                .then(() => { resolve(promiseBucket); })
                .catch((ex) => { reject(this.__waitForAndThenClickCEFromMenuPromise.name); });
        }));
    }
    __restoreDataToOneIframe(promiseBucket) {
        return new Promise((resolve, reject) => PromiseChainRestoreDesktop_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.__restoreDataToOneIframe.name);
            this.debug().DebugDataOneIframe(promiseBucket.NewIframe);
            var success = yield this.OneScWinMan().OneDesktopMan.RestoreDataToOneIframeWorker(promiseBucket.oneCEdata, promiseBucket.NewIframe);
            if (success) {
                resolve(promiseBucket);
            }
            else {
                reject(this.__restoreDataToOneIframe.name);
            }
            this.debug().FuncEnd(this.__restoreDataToOneIframe.name);
        }));
    }
    RunOneChain(targetDoc, dataToRestore) {
        return PromiseChainRestoreDesktop_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.RunOneChain.name);
            if (this.MiscMan().NotNullOrUndefined([targetDoc, dataToRestore], this.RunOneChain.name)) {
                var allIframeData = this.OneScWinMan().OneDesktopMan.GetAllLiveIframeData();
                var dataBucket = {
                    targetDoc: targetDoc,
                    IFramesbefore: allIframeData,
                    oneCEdata: dataToRestore,
                    NewIframe: null,
                    LastChainLinkSuccessful: false,
                };
                yield this.__waitForAndClickRedStartButtonPromise(dataBucket)
                    .then(dataBucket => this.__waitForAndThenClickCEFromMenuPromise(dataBucket))
                    .then(dataBucket => this.__waitForIframeCountDiffPromise(dataBucket))
                    .then(dataBucket => this.__waitForIframeReady(dataBucket))
                    .then(dataBucket => this.__restoreDataToOneIframe(dataBucket))
                    .catch(ex => {
                    this.debug().Error(this.RunOneChain.name, ex);
                });
                this.debug().FuncEnd(this.RunOneChain.name);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/OneTreeManager.js


class OneTreeManager_OneTreeManager extends ContentManagerBase {
    constructor(hub, associatedDoc) {
        super(hub);
        hub.debug.FuncStart(OneTreeManager_OneTreeManager.name);
        this.AssociatedDoc = associatedDoc;
        hub.debug.FuncEnd(OneTreeManager_OneTreeManager.name);
    }
    GetFriendlyNameFromNode(inputNode) {
        this.debug().FuncStart(this.GetFriendlyNameFromNode.name);
        var toReturn = 'unknown';
        var parentNode = inputNode.parentNode;
        var treeNode = parentNode.querySelector(ContentConst.Const.Selector.SC.IdStartsWithTreeNode);
        if (treeNode) {
            toReturn = treeNode.innerText;
        }
        else {
            this.debug().Log('No treeNode');
        }
        this.debug().FuncEnd(this.GetFriendlyNameFromNode.name, toReturn);
        return toReturn;
    }
    GetActiveNode() {
        let toReturn = null;
        var AllTreeNodeAr = this.GetOneLiveTreeData();
        for (var idx = 0; idx < AllTreeNodeAr.length; idx++) {
            var candidate = AllTreeNodeAr[idx];
            if (candidate.IsActive) {
                toReturn = candidate;
                break;
            }
        }
        return toReturn;
    }
    __isActive(targetNode) {
        var toReturn = false;
        var firstNodeActiveTest = targetNode.querySelector(ContentConst.Const.Selector.SC.IdStartsWithTreeNode);
        if (firstNodeActiveTest) {
            var className = firstNodeActiveTest.className;
            if (className.indexOf(ContentConst.Const.ClassNames.SC.scContentTreeNodeActive) > -1) {
                toReturn = true;
                this.debug().Log('** isActive ' + targetNode.innerText);
            }
        }
        return toReturn;
    }
    __isExpanded(firstImg) {
        var toReturn = false;
        if (firstImg) {
            var srcAttr = firstImg.getAttribute('src');
            if (srcAttr.indexOf(ContentConst.Const.Names.SC.TreeExpandedPng.sc920) > -1) {
                toReturn = true;
            }
            return toReturn;
        }
    }
    __isContentTreeNode(targetNode) {
        var toReturn = false;
        var className = targetNode.className;
        if (className === ContentConst.Const.ClassNames.ContentTreeNode) {
            toReturn = true;
        }
        return toReturn;
    }
    WalkNodeRecursive(targetNode, depth) {
        var toReturn = [];
        depth = depth - 1;
        if (targetNode) {
            var firstImg = targetNode.querySelector(ContentConst.Const.Selector.SC.ContentTreeNodeGlyph);
            if (this.__isContentTreeNode(targetNode)) {
                var newData = {
                    IsExpanded: this.__isExpanded(firstImg),
                    IsActive: this.__isActive(targetNode),
                    NodeFriendly: '',
                    NodeId: null
                };
                if (newData.IsExpanded || newData.IsActive) {
                    newData.NodeFriendly = this.GetFriendlyNameFromNode(firstImg);
                    var apparentId = firstImg.id.replace(ContentConst.Const.Names.SC.TreeGlyphPrefix, '');
                    newData.NodeId = this.ContentHub.Helpers.GuidHelp.ParseGuid(apparentId);
                    toReturn.push(newData);
                }
            }
            var childNodes = targetNode.children;
            if (childNodes && childNodes.length > 0 && depth > 0) {
                for (var jdx = 0; jdx < childNodes.length; jdx++) {
                    var oneChild = childNodes[jdx];
                    toReturn = toReturn.concat(this.WalkNodeRecursive(oneChild, depth));
                }
            }
        }
        return toReturn;
    }
    GetOneLiveTreeData() {
        this.debug().FuncStart(this.GetOneLiveTreeData.name);
        this.debug().Log('targetDoc isnull: ' + (this.AssociatedDoc === null));
        var toReturn = [];
        if (this.AssociatedDoc) {
            this.debug().LogVal('Looking for node ID: ', ContentConst.Const.ElemId.sc.SitecoreRootNodeId);
            this.debug().DebugIDataOneDoc(this.AssociatedDoc);
            var rootNode = this.AssociatedDoc.Document.getElementById(ContentConst.Const.ElemId.sc.SitecoreRootNodeId);
            if (rootNode) {
                this.debug().Log('rootNode: ' + rootNode.innerHTML);
                var rootParent = rootNode.parentElement;
                toReturn = this.WalkNodeRecursive(rootParent, ContentConst.Const.MaxIter);
                this.debug().Log('foundNodes count: ' + toReturn.length);
            }
            else {
                this.debug().Error(this.GetOneLiveTreeData.name, 'no root node');
            }
        }
        else {
            this.debug().Error(this.GetOneLiveTreeData.name, 'no targetDoc');
        }
        this.debug().FuncEnd(this.GetOneLiveTreeData.name);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/OneCEManager.js
var OneCEManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class OneCEManager_OneCEManager extends ContentManagerBase {
    constructor(hub, associatedDoc) {
        super(hub);
        this.AssociatedDoc = associatedDoc;
        this.OneTreeMan = new OneTreeManager_OneTreeManager(hub, this.AssociatedDoc);
    }
    __activateNode(hotTreeNode) {
        this.debug().FuncStart(this.__activateNode.name);
        this.debug().Log('clicking it');
        hotTreeNode.click();
        this.debug().FuncEnd(this.__activateNode.name);
    }
    __expandNode(foundOnPage) {
        this.debug().FuncStart(this.__expandNode.name);
        var currentSrc = foundOnPage.getAttribute('src');
        this.debug().Log('currentSrc' + currentSrc);
        if (currentSrc.indexOf(ContentConst.Const.Names.TreeMenuExpandedPng) < 0) {
            this.debug().Log('clicking it');
            foundOnPage.click();
        }
        this.debug().FuncEnd(this.__expandNode.name);
    }
    __collapseNode(element) {
        var currentSrc = element.getAttribute('src');
        this.debug().Log('currentSrc' + currentSrc);
        if (currentSrc.indexOf(ContentConst.Const.Names.TreeMenuExpandedPng) > -1) {
            this.debug().Log('clicking it');
            element.click();
        }
    }
    __collapseRootNode(targetCEDoc) {
        var rootElem = targetCEDoc.Document.getElementById(ContentConst.Const.ElemId.sc.SitecoreRootGlyphId);
        if (rootElem) {
            this.__collapseNode(rootElem);
        }
        else {
            this.debug().Error(this.__collapseRootNode.name, 'Root glyph not found ' + ContentConst.Const.ElemId.sc.SitecoreRootGlyphId);
        }
    }
    WaitForAndRestoreOneNode(nextNode, dataOneDocTarget) {
        return OneCEManager_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.WaitForAndRestoreOneNode.name, dataOneDocTarget.DocId.AsShort);
            var treeGlyphTargetId = ContentConst.Const.Names.SC.TreeGlyphPrefix + nextNode.NodeId.AsString;
            this.debug().Log('looking for: ' + treeGlyphTargetId + ' ' + nextNode.NodeFriendly + ' in ' + dataOneDocTarget.DocId.AsShort);
            this.debug().Log('document not null ' + (dataOneDocTarget.Document != null));
            var iterHelper = new IterationHelper_IterationHelper(this.Helpers(), this.WaitForAndRestoreOneNode.name);
            var foundOnPageTreeGlyph = null;
            while (!foundOnPageTreeGlyph && iterHelper.DecrementAndKeepGoing()) {
                this.debug().Log('looking for: *' + treeGlyphTargetId + '* ' + nextNode.NodeFriendly + ' in *' + dataOneDocTarget.DocId.AsShort + '*');
                foundOnPageTreeGlyph = dataOneDocTarget.Document.getElementById(treeGlyphTargetId);
                if (foundOnPageTreeGlyph) {
                    if (nextNode.IsExpanded) {
                        this.__expandNode(foundOnPageTreeGlyph);
                    }
                    if (nextNode.IsActive) {
                        var hotTreeNodeId = ContentConst.Const.Names.SC.TreeNodePrefix + nextNode.NodeId.AsString;
                        var hotTreeNode = dataOneDocTarget.Document.getElementById(hotTreeNodeId);
                        if (hotTreeNode) {
                            this.__activateNode(hotTreeNode);
                        }
                    }
                }
                else {
                    this.debug().Log('not Found...waiting: ');
                    yield iterHelper.Wait();
                }
            }
            this.debug().FuncEnd(this.WaitForAndRestoreOneNode.name, dataOneDocTarget.DocId.AsShort);
        });
    }
    WaitForAndRestoreManyAllNodes(storageData, dataOneDocTarget) {
        return OneCEManager_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.WaitForAndRestoreManyAllNodes.name, dataOneDocTarget.DocId.AsShort);
            let iterHelper = new IterationHelper_IterationHelper(this.Helpers(), this.WaitForAndRestoreManyAllNodes.name);
            while (storageData.AllTreeNodeAr.length > 0 && iterHelper.DecrementAndKeepGoing()) {
                var nextNode = storageData.AllTreeNodeAr.shift();
                yield this.WaitForAndRestoreOneNode(nextNode, dataOneDocTarget);
            }
            this.debug().FuncEnd(this.WaitForAndRestoreManyAllNodes.name);
        });
    }
    RestoreCEStateAsync(dataToRestore, dataOneDocTarget) {
        return OneCEManager_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.RestoreCEStateAsync.name, dataOneDocTarget.DocId.AsShort);
            var toReturn = false;
            this.debug().Log('Node Count in storage data: ' + dataToRestore.AllTreeNodeAr.length);
            yield this.WaitForAndRestoreManyAllNodes(dataToRestore, dataOneDocTarget);
            this.debug().FuncEnd(this.RestoreCEStateAsync.name);
            return toReturn;
        });
    }
    GetState(id) {
        this.debug().FuncStart(this.GetState.name);
        var toReturnCEData = {
            Id: id,
            AllTreeNodeAr: this.OneTreeMan.GetOneLiveTreeData(),
            ActiveNode: null
        };
        this.debug().FuncEnd(this.GetState.name);
        return toReturnCEData;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/OneDesktopManager.js
var OneDesktopManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class OneDesktopManager_OneDesktopManager extends ContentManagerBase {
    constructor(hub, associatedDoc) {
        hub.debug.FuncStart(OneDesktopManager_OneDesktopManager.name);
        super(hub);
        this.associatedDoc = associatedDoc;
        hub.debug.FuncEnd(OneDesktopManager_OneDesktopManager.name);
    }
    RestoreDesktopState(targetDoc, dataToRestore) {
        return OneDesktopManager_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.RestoreDesktopState.name);
            ;
            if (this.MiscMan().NotNullOrUndefined([targetDoc, dataToRestore, dataToRestore.AllCEAr], this.RestoreDesktopState.name)) {
                for (var idx = 0; idx < dataToRestore.AllCEAr.length; idx++) {
                    this.debug().Log('data idx: ' + idx + ':' + dataToRestore.AllCEAr.length);
                    var desktopPromiser = new PromiseChainRestoreDesktop_PromiseChainRestoreDesktop(this.ContentHub);
                    yield desktopPromiser.RunOneChain(targetDoc, dataToRestore.AllCEAr[idx]);
                }
            }
            this.debug().FuncEnd(this.RestoreDesktopState.name);
        });
    }
    RestoreDataToOneIframeWorker(oneCEdata, newIframe) {
        return OneDesktopManager_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.RestoreDataToOneIframeWorker.name, 'data not null: ' + (oneCEdata != null) + ' newFrame not null: ' + (newIframe !== null));
            var toReturn = false;
            this.debug().DebugDataOneIframe(newIframe);
            if (oneCEdata && newIframe) {
                yield this.OneScWinMan().OneCEMan.RestoreCEStateAsync(oneCEdata, newIframe.ContentDoc);
                toReturn = true;
            }
            else {
                this.debug().Error(this.RestoreDataToOneIframeWorker.name, 'bad data');
                toReturn = false;
            }
            this.debug().FuncEnd(this.RestoreDataToOneIframeWorker.name, toReturn.toString());
            return toReturn;
        });
    }
    WaitForIframeCountDiffWorker(IFramesbefore) {
        return OneDesktopManager_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.WaitForIframeCountDiffWorker.name);
            var toReturn = null;
            var iterationJr = new IterationHelper_IterationHelper(this.Helpers(), this.WaitForIframeCountDiffWorker.name);
            while (!toReturn && iterationJr.DecrementAndKeepGoing()) {
                let beforeCount = IFramesbefore.length;
                var allIframesAfter = this.GetAllLiveIframeData();
                var count = allIframesAfter.length;
                this.debug().Log('iFrame count before: ' + IFramesbefore.length);
                this.debug().Log('iFrame count after: ' + allIframesAfter.length);
                if (count > beforeCount) {
                    var newIframes = allIframesAfter.filter(e => !IFramesbefore.includes(e));
                    toReturn = newIframes[0];
                }
                else {
                    yield iterationJr.Wait();
                }
            }
            this.debug().FuncEnd(this.WaitForIframeCountDiffWorker.name);
            return toReturn;
        });
    }
    GetAllLiveIframeData() {
        this.debug().FuncStart(this.GetAllLiveIframeData.name);
        this.debug().DebugIDataOneDoc(this.associatedDoc);
        var toReturn = [];
        var iframeAr = this.associatedDoc.Document.querySelectorAll(ContentConst.Const.Selector.SC.IframeContent);
        if (iframeAr) {
            this.debug().Log('iframeAr: ' + iframeAr.length);
            for (var ifrIdx = 0; ifrIdx < iframeAr.length; ifrIdx++) {
                this.debug().Log('pushing: ' + ifrIdx);
                var iframeElem = iframeAr[ifrIdx];
                var dataOneIframe = this.Factoryman().DateOneIframeFactory(iframeElem, this.associatedDoc, 'desktop Iframe_' + ifrIdx);
                dataOneIframe.ContentDoc.HasParentDesktop = true;
                toReturn.push(dataOneIframe);
            }
        }
        this.debug().FuncEnd(this.GetAllLiveIframeData.name, 'count:  ' + toReturn.length);
        return toReturn;
    }
    GetState() {
        this.debug().FuncStart(this.GetState.name);
        this.debug().DebugIDataOneDoc(this.associatedDoc);
        var toReturnAllCeState = this.Helpers().FactoryHelp.CreateNewDtDataShell();
        toReturnAllCeState.livingIframeAr = this.GetAllLiveIframeData();
        if (toReturnAllCeState.livingIframeAr && toReturnAllCeState.livingIframeAr.length > 0) {
            for (var iframeIdx = 0; iframeIdx < toReturnAllCeState.livingIframeAr.length; iframeIdx++) {
                this.debug().Log('iframeIdx: ' + iframeIdx);
                var targetIframeObj = toReturnAllCeState.livingIframeAr[iframeIdx];
                var oneCeMan = new OneCEManager_OneCEManager(this.ContentHub, targetIframeObj.ContentDoc);
                if (targetIframeObj.Zindex === 1) {
                    toReturnAllCeState.ActiveCeMan = oneCeMan;
                }
                var oneCeState = oneCeMan.GetState(this.Helpers().GuidHelp.EmptyGuid());
                toReturnAllCeState.AllCeData.push(oneCeState);
            }
        }
        this.debug().FuncEnd(this.GetState.name);
        return toReturnAllCeState;
    }
}
;

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/OneScWindowManager.js
var OneScWindowManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class OneScWindowManager_OneScWindowManager extends ContentManagerBase {
    constructor(hub) {
        super(hub);
        this.OneDesktopMan = null;
        this.OneCEMan = null;
        hub.debug.FuncStart(OneScWindowManager_OneScWindowManager.name);
        let currPageType = this.ScUiMan().GetCurrentPageType();
        if (currPageType === scWindowType.Desktop) {
            this.OneDesktopMan = new OneDesktopManager_OneDesktopManager(hub, this.ScUiMan().TopLevelDoc());
        }
        else if (currPageType === scWindowType.ContentEditor) {
            this.OneCEMan = new OneCEManager_OneCEManager(hub, this.ScUiMan().TopLevelDoc());
        }
        hub.debug.FuncEnd(OneScWindowManager_OneScWindowManager.name);
    }
    SaveWindowState(snapShotSettings) {
        this.debug().FuncStart(this.SaveWindowState.name);
        var currentPageType = snapShotSettings.CurrentPageType;
        this.Helpers().FactoryHelp.CreateNewWindowSnapShotShell(currentPageType, snapShotSettings.Flavor);
        var snapShot;
        if (snapShotSettings) {
            if (snapShotSettings.SnapShotNewNickname) {
                snapShot.NickName = snapShotSettings.SnapShotNewNickname;
            }
            snapShot.Flavor = snapShotSettings.Flavor;
        }
        if (currentPageType === scWindowType.ContentEditor) {
            this.debug().Log('is Content Editor');
            var id = this.ContentHub.Helpers.GuidHelp.EmptyGuid();
            snapShot.AllCEAr.push(this.OneCEMan.GetState(id));
        }
        else if (currentPageType === scWindowType.Desktop) {
            snapShot.AllCEAr = this.OneDesktopMan.GetState().AllCeData;
        }
        else {
            this.debug().Error(this.SaveWindowState.name, 'Invalid page location ' + currentPageType);
        }
        this.debug().FuncEnd(this.SaveWindowState.name);
        ;
    }
    __getTopLevelIframe(targetDoc) {
        var toReturn = null;
        var allIframe = this.OneDesktopMan.GetAllLiveIframeData();
        var maxZVal = -1;
        if (allIframe && allIframe.length > 0) {
            for (var idx = 0; idx < allIframe.length; idx++) {
                var candidateIframe = allIframe[idx];
                if (candidateIframe && candidateIframe.Zindex > maxZVal) {
                    toReturn = candidateIframe;
                    maxZVal = candidateIframe.Zindex;
                }
            }
        }
        return toReturn;
    }
    PublishActiveCE(targetDoc) {
        return OneScWindowManager_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.PublishActiveCE.name);
            var currentWindowType = this.ScUiMan().GetCurrentPageType();
            var docToPublish = null;
            if (currentWindowType == scWindowType.Desktop) {
                var topIframe = this.__getTopLevelIframe(targetDoc);
                if (topIframe) {
                    docToPublish = topIframe.ContentDoc;
                }
            }
            else {
                docToPublish = this.ScUiMan().TopLevelDoc();
            }
            this.debug().Log('docToPublish', this.debug().IsNullOrUndefined(docToPublish));
            if (docToPublish) {
                var publishChain = new PromiseChainQuickPublish_PromiseChainQuickPublish(this.ContentHub);
                yield publishChain.PublishCE(docToPublish);
            }
            this.debug().FuncEnd(this.PublishActiveCE.name);
        });
    }
    RestoreWindowStateToTarget(targetDoc, dataToRestore) {
        return OneScWindowManager_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.RestoreWindowStateToTarget.name);
            if (dataToRestore) {
                if (dataToRestore.WindowType === scWindowType.ContentEditor) {
                    yield this.OneCEMan.RestoreCEStateAsync(dataToRestore.AllCEAr[0], targetDoc);
                }
                else if (dataToRestore.WindowType === scWindowType.Desktop) {
                    yield this.OneDesktopMan.RestoreDesktopState(targetDoc, dataToRestore);
                }
                else {
                    this.debug().Error(this.RestoreWindowStateToTarget.name, 'No match found for snap shot');
                }
                this.debug().FuncEnd(this.RestoreWindowStateToTarget.name);
            }
        });
    }
    Init() {
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/PromiseGeneric.js
var PromiseGeneric_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class PromiseGeneric_PromiseHelper extends HelperBase {
    WaitForReadyIframe(dataOneIframe) {
        return PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
                this.Debug.FuncStart(this.WaitForReadyIframe.name, dataOneIframe.Nickname + ' ' + dataOneIframe.Id.AsShort);
                this.Debug.DebugDataOneIframe(dataOneIframe);
                var iterationJr = new IterationHelper_IterationHelper(this.HelperHub, this.WaitForReadyIframe.name);
                var isReady = false;
                this.Debug.MarkerA();
                while (iterationJr.DecrementAndKeepGoing() && !isReady) {
                    this.Debug.MarkerB();
                    var currentReadyState = dataOneIframe.IframeElem.contentDocument.readyState.toString();
                    var isReadyStateComplete = currentReadyState === 'complete';
                    this.Debug.Log('currentReadyState : ' + currentReadyState);
                    ;
                    this.Debug.MarkerC();
                    this.Debug.Log('isReadyStateComplete: ' + isReadyStateComplete);
                    if (isReadyStateComplete) {
                        this.Debug.Log('toReturn A is true');
                        isReady = true;
                        dataOneIframe.ContentDoc = this.HelperHub.FactoryHelp.DataOneContentDocFactoryFromIframe(dataOneIframe.IframeElem, dataOneIframe.ContentDoc.ParentDoc, dataOneIframe.Nickname);
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                this.Debug.DebugDataOneIframe(dataOneIframe);
                this.Debug.FuncEnd(this.WaitForReadyIframe.name, dataOneIframe.Nickname + ' : ' + currentReadyState + ' is ready: ' + isReady.toString());
                ;
                resolve(dataOneIframe);
            }));
        });
    }
    WaitForPageReadyNative(targetDoc) {
        return PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
                this.Debug.FuncStart(this.WaitForPageReadyNative.name);
                var result = new ResultSuccessFail();
                this.Debug.DebugIDataOneDoc(targetDoc);
                var iterationJr = new IterationHelper_IterationHelper(this.HelperHub, this.WaitForPageReadyNative.name);
                var isReady = false;
                this.Debug.MarkerA();
                while (iterationJr.DecrementAndKeepGoing() && !isReady) {
                    this.Debug.MarkerB();
                    var currentReadyState = targetDoc.Document.readyState.toString();
                    var isReadyStateComplete = currentReadyState === 'complete';
                    this.Debug.LogVal('readyState', currentReadyState);
                    ;
                    this.Debug.LogVal('isReadyStateComplete', isReadyStateComplete);
                    if (isReadyStateComplete) {
                        isReady = true;
                        result.Succeeded = true;
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (iterationJr.IsExhausted) {
                    result.Succeeded = false;
                    result.RejectMessage = iterationJr.IsExhaustedMsg;
                }
                this.Debug.FuncEnd(this.WaitForPageReadyNative.name, 'ready state: ' + currentReadyState + ' is ready: ' + isReady.toString());
                ;
                if (result.Succeeded) {
                    resolve();
                }
                else {
                    reject(result.RejectMessage);
                }
            }));
        });
    }
    WaitForAndReturnReadyIframe(targetDoc, selector, iframeObj) {
        return PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
                var iframeData;
                yield this.WaitForAndReturnFoundElem(targetDoc, selector)
                    .then((foundElem) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
                    if (foundElem) {
                        iframeObj.IframeElem = foundElem;
                        this.Debug.DebugDataOneIframe(iframeData);
                        return iframeData;
                    }
                }))
                    .then((iframeData) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
                    iframeData = yield this.WaitForReadyIframe(iframeData);
                    resolve(iframeData);
                }));
            }));
        });
    }
    WaitForAndReturnFoundElem(targetDoc, selector, overrideIterCount = 8) {
        return PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
                this.Debug.FuncStart(this.WaitForAndReturnFoundElem.name, 'selector: ' + selector + ' nickname: ' + targetDoc.Nickname);
                var found = null;
                var iterationJr = new IterationHelper_IterationHelper(this.HelperHub, this.WaitForAndReturnFoundElem.name, overrideIterCount);
                while (!found && iterationJr.DecrementAndKeepGoing()) {
                    this.Debug.LogVal('targetDoc.Document', targetDoc.Document.toString());
                    this.Debug.LogVal('targetDoc.Document.location', targetDoc.Document.location.toString());
                    this.Debug.LogVal('targetDoc.Document.location.href', targetDoc.Document.location.href);
                    found = targetDoc.Document.querySelector(selector);
                    if (found) {
                        this.Debug.Log('found');
                        this.Debug.LogVal('found.style.display', found.style.display);
                        this.Debug.FuncEnd(this.WaitForAndReturnFoundElem.name, selector + targetDoc.Document.location.href);
                        resolve(found);
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (!found && iterationJr.IsExhausted) {
                    this.Debug.FuncEnd(this.WaitForAndReturnFoundElem.name, selector + targetDoc.Document.location.href);
                    reject('exhausted');
                }
            }));
        });
    }
    WaitForAndClickWithPayload(selector, targetDoc, payload) {
        return new Promise((resolve, reject) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            this.Debug.FuncStart(this.WaitForAndClickWithPayload.name, selector);
            yield this.WaitForThenClick([selector], targetDoc)
                .then(() => resolve(payload))
                .catch(ex => {
                this.Debug.Error(this.WaitForAndClickWithPayload.name, ex);
                reject(ex);
            });
        }));
    }
    TabWaitForReadyStateCompleteNative(browserTab) {
        return new Promise((resolve, reject) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            let iterHelper = new IterationHelper_IterationHelper(this.HelperHub, this.TabWaitForReadyStateCompleteNative.name);
            let success = new ResultSuccessFail();
            while (browserTab.status !== 'complete' && iterHelper.DecrementAndKeepGoing()) {
                this.Debug.LogVal('tab status', browserTab.status);
                yield iterHelper.Wait;
            }
            if (browserTab.status === 'complete') {
                success.Succeeded = true;
            }
            else {
                success.Succeeded = false;
                if (iterHelper.IsExhausted) {
                    success.RejectMessage = iterHelper.IsExhaustedMsg;
                }
            }
            if (success.Succeeded) {
                resolve();
            }
            else {
                reject(success.RejectMessage);
            }
        }));
    }
    TabChainSetHrefWaitForComplete(href, targetTab) {
        return new Promise((resolve, reject) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            this.Debug.FuncStart(this.TabChainSetHrefWaitForComplete.name, href);
            yield browser.tabs.update(targetTab.Tab.id, { url: href })
                .then(() => this.TabWaitForReadyStateCompleteNative(targetTab.Tab));
            this.Debug.FuncEnd(this.TabChainSetHrefWaitForComplete.name, href);
        }));
    }
    RaceWaitAndClick(selector, targetDoc) {
        return PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
                this.Debug.FuncStart(this.RaceWaitAndClick.name);
                yield this.WaitForThenClick([selector.sc920, selector.sc820], targetDoc)
                    .then(() => {
                    this.Debug.FuncEnd(this.RaceWaitAndClick.name);
                    resolve();
                })
                    .catch((ex) => {
                    this.Debug.FuncEnd(this.RaceWaitAndClick.name);
                    reject(ex);
                });
            }));
        });
    }
    WaitForThenClick(selector, targetDoc) {
        return new Promise((resolve, reject) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            if (targetDoc) {
                this.Debug.FuncStart(this.WaitForThenClick.name, selector.length);
                var found = null;
                var iterationJr = new IterationHelper_IterationHelper(this.HelperHub, this.WaitForThenClick.name);
                while (!found && iterationJr.DecrementAndKeepGoing()) {
                    for (var idx = 0; idx < selector.length; idx++) {
                        found = targetDoc.Document.querySelector(selector[idx]);
                        if (found) {
                            break;
                        }
                    }
                    if (found) {
                        this.Debug.Log('found and clicking');
                        found.click();
                        this.Debug.FuncEnd(this.WaitForThenClick.name, selector.length);
                        resolve();
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
            }
            else {
                reject();
            }
            this.Debug.FuncEnd(this.WaitForThenClick.name, selector.length);
            if (!found && iterationJr.IsExhausted) {
                reject('exhausted');
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Promises/PromiseOneStep.js
var PromiseOneStep_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class PromiseOneStep_PromiseOneStep extends ContentManagerBase {
    constructor(hub) {
        hub.debug.FuncStart(PromiseGeneric_PromiseHelper.name);
        super(hub);
        hub.debug.FuncEnd(PromiseGeneric_PromiseHelper.name);
    }
    ClickPublishOnNav(payload) {
        return PromiseOneStep_awaiter(this, void 0, void 0, function* () {
            yield this.Helpers().PromiseHelp.WaitForThenClick([ContentConst.Const.Selector.SC.NavPublishStrip], payload.docToPublish);
            yield this.Helpers().PromiseHelp.WaitForThenClick([ContentConst.Const.Selector.SC.NavPublishStrip], payload.docToPublish);
            return payload;
        });
    }
    ClickMenuButtonPublishDropDown(payload = null) {
        return PromiseOneStep_awaiter(this, void 0, void 0, function* () {
            yield this.Helpers().PromiseHelp.WaitForThenClick([ContentConst.Const.Selector.SC.MenuButtonPublish], payload.docToPublish);
            return payload;
        });
    }
    ClickMenuDropDownPublishItem(payload = null) {
        return PromiseOneStep_awaiter(this, void 0, void 0, function* () {
            return yield this.Helpers().PromiseHelp.WaitForAndClickWithPayload(ContentConst.Const.Selector.SC.MenuDropDownPublishItem, payload.docToPublish, payload);
        });
    }
    GetThePublishItemDialog(dataPublishChain = null) {
        return PromiseOneStep_awaiter(this, void 0, void 0, function* () {
            yield this.Helpers().PromiseHelp.WaitForAndReturnFoundElem(dataPublishChain.TopLevelDoc, ContentConst.Const.Selector.SC.JqueryModalDialogsFrame)
                .then((found) => {
                dataPublishChain.jqIframe = this.Factoryman().DateOneIframeFactory(found, dataPublishChain.docToPublish.ParentDoc, 'jqIframe');
                return dataPublishChain;
            })
                .then((payload) => PromiseOneStep_awaiter(this, void 0, void 0, function* () {
                yield this.Helpers().PromiseHelp.WaitForReadyIframe(payload.jqIframe);
                dataPublishChain = payload;
            }));
            return dataPublishChain;
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/PayloadDataFromContent.js
class PayloadDataFromContent {
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/MsgFromXBase.js

class MsgFromXBase_MsgFromXBase {
    constructor(msgFlag) {
        this.MsgFlag = MsgFlag.Unknown;
        this.MsgFlag = msgFlag;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/MsgPayloadResponseFromContent.js



class MsgPayloadResponseFromContent_MsgFromContent extends MsgFromXBase_MsgFromXBase {
    constructor(msgFlag) {
        super(msgFlag);
        this.Data = new PayloadDataFromContent();
        this.ContentState = {
            SnapShotsMany: {
                CurrentSnapShots: [],
                FavoriteCount: 0,
                SnapShotsAutoCount: 0,
                PlainCount: 0,
                Birthday: new Date(1970),
            },
            LastReq: MsgFlag.Unknown,
            ErrorStack: [],
            LastReqSuccessful: false,
            LastReqFailReason: '',
            CurrentCe: null
        };
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/PayloadDataReqPopUp.js
class PayloadDataFromPopUp {
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/ContentMessageManager.js
var ContentMessageManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class ContentMessageManager_ContentMessageManager extends ContentManagerBase {
    constructor(contentHub) {
        super(contentHub);
        this.AutoSaveHasBeenScheduled = false;
        contentHub.debug.FuncStart(ContentMessageManager_ContentMessageManager.name);
        var self = this;
        browser.runtime.onMessage.addListener(request => self.ContentReceiveRequest(request));
        contentHub.debug.FuncEnd(ContentMessageManager_ContentMessageManager.name);
    }
    ValidateRequest(reqMsgFromPopup) {
        this.debug().FuncStart(this.ValidateRequest.name);
        var isValid = true;
        if (reqMsgFromPopup) {
            if (reqMsgFromPopup.CurrentContentPrefs) {
                if (reqMsgFromPopup.Data) {
                }
                else {
                    reqMsgFromPopup.Data = new PayloadDataFromPopUp();
                }
            }
            else {
                this.debug().Error(this.ValidateRequest.name, 'No CurrentContentPrefs');
                reqMsgFromPopup.IsValid = false;
                isValid = false;
            }
        }
        else {
            this.debug().Error(this.ValidateRequest.name, 'no reqMsgFromPopup');
        }
        reqMsgFromPopup.IsValid = isValid;
        this.debug().FuncEnd(this.ValidateRequest.name, isValid.toString());
        return reqMsgFromPopup;
    }
    ScheduleIntervalTasks(reqMsgFromPopup) {
        this.debug().FuncStart(this.ScheduleIntervalTasks.name);
        this.debug().LogVal('Has been scheduled: ', this.AutoSaveHasBeenScheduled);
        this.debug().LogVal('reqMsgFromPopup.CurrentContentPrefs.AutoSave: ', reqMsgFromPopup.CurrentContentPrefs.AutoSave);
        if (true) {
            if (!this.AutoSaveHasBeenScheduled) {
                this.debug().MarkerA();
                var self = this;
                this.debug().MarkerB();
                var intervalMs = StaticHelpers_StaticHelpers.MinToMs(ContentConst.Const.Timeouts.AutoSaveIntervalMin);
                this.debug().MarkerC();
                window.setInterval(() => {
                    self.AutoSaveSnapShot(this.ScUiMan().GetCurrentPageType());
                }, intervalMs);
                this.debug().MarkerD();
                this.AutoSaveHasBeenScheduled = true;
            }
        }
        this.debug().FuncEnd(this.ScheduleIntervalTasks.name);
    }
    AutoSaveSnapShot(pageType) {
        this.debug().FuncStart(this.AutoSaveSnapShot.name);
        var SnapShotSettings = {
            SnapShotNewNickname: '',
            Flavor: SnapShotFlavor.Autosave,
            CurrentPageType: pageType
        };
        this.OneScWinMan().SaveWindowState(SnapShotSettings);
        this.debug().FuncEnd(this.AutoSaveSnapShot.name);
    }
    ContentReceiveRequest(reqMsgFromPopup) {
        return ContentMessageManager_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => ContentMessageManager_awaiter(this, void 0, void 0, function* () {
                this.debug().FuncStart(this.ContentReceiveRequest.name, StaticHelpers_StaticHelpers.MsgFlagAsString(reqMsgFromPopup.MsgFlag));
                this.debug().DebugMsgFromPopUp(reqMsgFromPopup);
                this.debug().MarkerA();
                var response;
                if (reqMsgFromPopup) {
                    reqMsgFromPopup = this.ValidateRequest(reqMsgFromPopup);
                    if (reqMsgFromPopup.IsValid) {
                        this.ScheduleIntervalTasks(reqMsgFromPopup);
                        response = yield this.ReqMsgRouter(reqMsgFromPopup);
                    }
                    else {
                        this.debug().Error(this.ContentReceiveRequest.name, 'reqMsgFromPopup is not valid');
                    }
                }
                else {
                    response = new MsgPayloadResponseFromContent_MsgFromContent(MsgFlag.RespError);
                    this.debug().Error(this.ContentReceiveRequest.name, 'no request');
                }
                this.debug().FuncEnd(this.ContentReceiveRequest.name, StaticHelpers_StaticHelpers.MsgFlagAsString(reqMsgFromPopup.MsgFlag));
                if (response.MsgFlag != MsgFlag.RespError) {
                    resolve(response);
                }
                else {
                    reject(response);
                }
            }));
        });
    }
    Init() {
        this.debug().FuncStart(this.Init.name + ' ' + ContentMessageManager_ContentMessageManager.name);
        var self = this;
        this.debug().FuncEnd(this.Init.name);
    }
    NotifyCompleteOnContent(targetDoc = null, Message) {
        if (!targetDoc) {
            targetDoc = this.ScUiMan().TopLevelDoc();
        }
        let bodyTag = targetDoc.Document.getElementsByTagName('body')[0];
        var flagElem = targetDoc.Document.createElement('div');
        flagElem.innerHTML = '<div>' + Message + '</div>';
        flagElem.style.position = 'absolute';
        flagElem.style.top = '100px';
        flagElem.style.left = '100px';
        flagElem.style.backgroundColor = 'yellow';
        flagElem.style.zIndex = '999';
        flagElem.style.fontSize = '40px';
        setTimeout(function () {
            flagElem.remove();
            window.close();
        }, ContentConst.Const.Timeouts.WaitBeforeRemovingCompleteFlagOnContent);
        bodyTag.appendChild(flagElem);
    }
    ReqMsgRouter(payload) {
        return ContentMessageManager_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.ReqMsgRouter.name, StaticHelpers_StaticHelpers.MsgFlagAsString(payload.MsgFlag));
            this.debug().MarkerA();
            this.debug().DebugMsgFromPopUp(payload);
            this.debug().MarkerB();
            var response = yield this.Factoryman().NewMsgFromContentShell();
            this.debug().MarkerC();
            switch (payload.MsgFlag) {
                case MsgFlag.ReqRestoreToNewTab:
                    console.log('we are going to restore to this window');
                    break;
                case MsgFlag.ReqAddCETab:
                    yield this.Helpers().PromiseHelp.RaceWaitAndClick(ContentConst.Const.Selector.SC.scStartButton, this.ScUiMan().TopLevelDoc())
                        .then(() => { this.Helpers().PromiseHelp.WaitForThenClick([ContentConst.Const.Selector.SC.StartMenuLeftOption], this.ScUiMan().TopLevelDoc()); });
                    break;
                case MsgFlag.ReqAdminB:
                    this.ScUiMan().AdminB(this.ScUiMan().TopLevelDoc(), null);
                    break;
                case MsgFlag.Ping:
                    this.debug().LogVal('Ping', StaticHelpers_StaticHelpers.MsgFlagAsString(payload.MsgFlag));
                    if (this.ReadyForMessages) {
                        response.MsgFlag = MsgFlag.RespListeningAndReady;
                    }
                    break;
                case MsgFlag.ReqCurState:
                    response.MsgFlag = MsgFlag.RespCurState;
                    break;
                case MsgFlag.ReqOpenCE:
                    break;
                case MsgFlag.ReqMarkFavorite:
                    this.AtticMan().MarkFavorite(payload.Data)
                        .then(() => this.respondSuccessful())
                        .catch((failMsg) => this.respondFail(failMsg));
                    break;
                case MsgFlag.ReqQuickPublish:
                    var targetWin = this.ScUiMan().TopLevelDoc();
                    yield this.OneScWinMan().PublishActiveCE(targetWin);
                    break;
                case MsgFlag.ReqRestoreClick:
                    yield this.__restoreClick(payload.Data)
                        .then(() => this.respondSuccessful())
                        .catch((failReason) => this.respondFail(failReason));
                    break;
                case MsgFlag.ReqTakeSnapShot:
                    this.OneScWinMan().SaveWindowState(payload.Data.SnapShotSettings);
                    break;
                case MsgFlag.RemoveFromStorage:
                    yield this.AtticMan().RemoveOneFromStorage(payload.Data.IdOfSelect)
                        .then(() => response.ContentState.LastReqSuccessful = true)
                        .catch(() => response.ContentState.LastReqSuccessful = false);
                    break;
                case MsgFlag.RespTaskSuccessful:
                    this.NotifyCompleteOnContent(null, payload.Data.ScreenMessage);
                case MsgFlag.ReqUpdateNickName:
                    this.AtticMan().UpdateNickname(payload.Data);
                    break;
                default:
                    this.debug().Error('Unrecognized MsgFlag', StaticHelpers_StaticHelpers.MsgFlagAsString(payload.MsgFlag));
                    break;
            }
            yield this.Factoryman().UpdateContentState(response);
            response.ContentState.LastReq = payload.MsgFlag;
            this.debug().FuncEnd(this.ReqMsgRouter.name);
            return response;
        });
    }
    respondSuccessful() {
        this.SendMessageHndlr(new MsgPayloadResponseFromContent_MsgFromContent(MsgFlag.RespTaskSuccessful));
    }
    respondFail(failReason) {
        var msg = new MsgPayloadResponseFromContent_MsgFromContent(MsgFlag.RespTaskFailed);
        msg.ContentState.LastReqFailReason = failReason;
        this.SendMessageHndlr(msg);
    }
    SendMessageHndlr(msgflag) {
    }
    __restoreClick(Data) {
        return new Promise(() => ContentMessageManager_awaiter(this, void 0, void 0, function* () {
            try {
                this.debug().MarkerA();
                var dataOneWindowStorage = this.AtticMan().GetFromStorageById(Data.IdOfSelect, CacheMode.OkToUseCache);
                this.debug().MarkerB();
                var self = this;
                var targetDoc = this.ScUiMan().TopLevelDoc();
                if (targetDoc) {
                    yield self.OneScWinMan().RestoreWindowStateToTarget(targetDoc, dataOneWindowStorage)
                        .then(() => this.respondSuccessful())
                        .catch((failReason) => this.respondFail(failReason));
                }
                else {
                    self.debug().Error(this.__restoreClick.name, 'no target window');
                }
            }
            catch (ex) {
                this.debug().Error(this.__restoreClick.name, ex);
            }
        }));
    }
    IsDebugEnabled() {
        return true;
    }
    SetParentInfo(__winDataParent) {
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Classes/ContentFactories.js
var ContentFactories_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






class ContentFactories_ContentFactories extends ContentManagerBase {
    constructor(contentHub) {
        contentHub.debug.FuncStart(PromiseGeneric_PromiseHelper.name);
        super(contentHub);
        contentHub.debug.FuncEnd(PromiseGeneric_PromiseHelper.name);
    }
    UpdateContentState(response) {
        return ContentFactories_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.UpdateContentState.name);
            response.ContentState.SnapShotsMany = yield this.AtticMan().GetAllSnapShotsMany(CacheMode.OkToUseCache);
            response.ContentState.ErrorStack = this.debug().ErrorStack;
            this.debug().DebugObjState(response.ContentState);
            response.ContentState.CurrentCe = this.GetCurrentCeState();
            this.debug().FuncEnd(this.UpdateContentState.name);
        });
    }
    GetCurrentCeState() {
        let toReturnCeState = null;
        let pageType = this.ScUiMan().GetCurrentPageType();
        if (pageType === scWindowType.Desktop) {
            var currState = this.OneScWinMan().OneDesktopMan.GetState();
            if (currState) {
                toReturnCeState = currState.ActiveCeMan.GetState(this.Helpers().GuidHelp.EmptyGuid());
            }
        }
        else if (pageType == scWindowType.ContentEditor) {
        }
        else {
            toReturnCeState = null;
        }
        return toReturnCeState;
    }
    NewMsgFromContentShell() {
        return ContentFactories_awaiter(this, void 0, void 0, function* () {
            var response = new MsgPayloadResponseFromContent_MsgFromContent(MsgFlag.Unknown);
            yield this.UpdateContentState(response);
            response.ContentState.LastReq = MsgFlag.Unknown;
            return response;
        });
    }
    DateOneIframeFactory(iframeElem, parentDocument, nickname) {
        var toReturn = {
            Index: -1,
            IframeElem: iframeElem,
            Id: this.Helpers().GuidHelp.NewGuid(),
            Zindex: iframeElem.style.zIndex ? parseInt(iframeElem.style.zIndex) : -1,
            Nickname: nickname,
            ContentDoc: this.Helpers().FactoryHelp.DataOneContentDocFactoryFromIframe(iframeElem, parentDocument, nickname),
        };
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/SitecoreUiManager.js


class SitecoreUiManager_SitecoreUiManager extends ContentManagerBase {
    GetCurrentPageType() {
        return this.Helpers().UtilityHelp.CalcPageTypeFromHref(document.location.href);
    }
    TopLevelDoc() {
        if (!this.topDoc) {
            this.topDoc = {
                ParentDoc: null,
                Document: window.document,
                HasParentDesktop: false,
                DocId: this.Helpers().GuidHelp.NewGuid(),
                ParentDesktop: null,
                Nickname: 'top doc'
            };
        }
        return this.topDoc;
    }
    AdminB(targetDoc, callbackOnComplete) {
        this.debug().FuncStart(this.AdminB.name, 'targetDoc: ' + targetDoc.DocId.AsShort);
        this.debug().Log('callback passed: ' + (callbackOnComplete !== null));
        var userNameElem = targetDoc.Document.getElementById(ContentConst.Const.ElemId.sc.scLoginUserName);
        var passwordElem = targetDoc.Document.getElementById(ContentConst.Const.ElemId.sc.scLoginPassword);
        if (this.debug().IsNotNullOrUndefinedBool('userNameElem', userNameElem)
            &&
                this.debug().IsNotNullOrUndefinedBool('passwordElem', passwordElem)) {
            userNameElem.setAttribute('value', ContentConst.Const.Names.scDefaultAdminUserName);
            passwordElem.setAttribute('value', ContentConst.Const.Names.scDefaultAdminPassword);
            var loginButton = this.GetLoginButton(targetDoc);
            if (this.debug().IsNotNullOrUndefinedBool('loginButton', loginButton)) {
                this.debug().Log('clicking');
                loginButton.click();
                if (callbackOnComplete) {
                    this.debug().Log('Triggering callback');
                    setTimeout(callbackOnComplete, ContentConst.Const.Timeouts.PostLoginBtnClick);
                }
                else {
                    this.debug().Log('no callback passed');
                }
            }
            else {
                this.debug().Error(this.AdminB.name, 'No loginButton');
            }
        }
        else {
            this.debug().Error(this.AdminB.name, 'No Username or password field');
        }
        this.debug().FuncEnd(this.AdminB.name);
    }
    GetLoginButton(targetDoc) {
        this.debug().FuncStart(this.GetLoginButton.name);
        var toReturn = targetDoc.Document.getElementById(ContentConst.Const.ElemId.sc.scLoginBtn.sc920);
        if (!toReturn) {
            toReturn = targetDoc.Document.querySelector(ContentConst.Const.Selector.SC.LoginBtn.sc820);
        }
        this.debug().Log('toReturn: ' + toReturn);
        this.debug().FuncEnd(this.GetLoginButton.name);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/GuidHelper.js

class GuidHelper_GuidHelper extends HelperBase {
    constructor() {
        super(...arguments);
        this.ShortGuidLength = 4;
    }
    EmptyGuid() {
        return this.ParseGuid('00000000-0000-0000-0000-000000000000');
    }
    newGuidString() {
        var toReturn;
        var temp = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
        toReturn = temp.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0;
            var v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
        return toReturn;
    }
    NewGuid() {
        var toReturn = this.ParseGuid(this.newGuidString());
        return toReturn;
    }
    ShortGuid(Id) {
        var toReturn = '{error}';
        if (Id && Id.AsString.length > this.ShortGuidLength) {
            toReturn = Id.AsString.substr(0, this.ShortGuidLength);
        }
        else {
            this.Debug.DebugIGuid(Id);
            this.Debug.LogVal('Length', Id.AsString.length);
            this.Debug.LogVal('ShortLength', this.ShortGuidLength);
        }
        return toReturn;
    }
    ParseGuid(val) {
        let toReturn = {
            AsString: val,
            AsShort: '',
            Type: 'IGuid'
        };
        toReturn.AsShort = this.ShortGuid(toReturn);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/UtilityHelper.js







class UtilityHelper_UtilityHelper extends HelperBase {
    constructor() {
        super(...arguments);
        this.lenTimestamp = 13;
        this.lenNickname = 16;
        this.lenPageType = 7;
        this.lenPrefix = 6;
        this.lenShortId = 4;
        this.colSep = ' - ';
        this.lenCeCount = 3;
        this.lenActiveNode = 16;
        this.lenFavorite = 3;
    }
    SelectHeaderStr(prefix) {
        let toReturn = StaticHelpers_StaticHelpers.BufferString('Time Stamp', this.lenTimestamp, BufferChar.Period, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString('Type', this.lenPageType, BufferChar.Period, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString('Nickname', this.lenNickname, BufferChar.Period, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString('Active Node.', this.lenActiveNode, BufferChar.Period, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString('Fav.', this.lenFavorite, BufferChar.Period, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString('Id', this.lenShortId, BufferChar.Period, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString('#CE', this.lenCeCount, BufferChar.Period, BufferDirection.right);
        return toReturn;
    }
    MakeSelectorFromId(TabId) {
        return '[id=' + TabId + ']';
    }
    TimeNicknameFavStr(data) {
        var typeStr = '';
        if (data.WindowType === scWindowType.ContentEditor) {
            typeStr = 'Cont Ed';
        }
        else if (data.WindowType === scWindowType.Desktop) {
            typeStr = 'Desktop';
        }
        var activeCeNode = '';
        for (var idx = 0; idx < data.AllCEAr.length; idx++) {
            var candidateCe = data.AllCEAr[idx];
            for (var jdx = 0; jdx < candidateCe.AllTreeNodeAr.length; jdx++) {
                var candidateNode = candidateCe.AllTreeNodeAr[jdx];
                if (candidateNode.IsActive) {
                    var lvl2Node = '';
                    if (jdx >= 2) {
                        lvl2Node = candidateCe.AllTreeNodeAr[1].NodeFriendly + '/';
                    }
                    activeCeNode = lvl2Node + candidateNode.NodeFriendly;
                    break;
                }
            }
        }
        let toReturn = StaticHelpers_StaticHelpers.BufferString(this.MakeFriendlyDate(data.TimeStamp), this.lenTimestamp, BufferChar.space, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString(typeStr, this.lenPageType, BufferChar.Nbsp, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString(data.NickName, this.lenNickname, BufferChar.Nbsp, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString(activeCeNode, this.lenActiveNode, BufferChar.Nbsp, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString((data.Flavor == SnapShotFlavor.Favorite ? '*' : ''), this.lenFavorite, BufferChar.Nbsp, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString(data.Id.AsShort, this.lenShortId, BufferChar.Nbsp, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString(data.AllCEAr.length.toString(), this.lenCeCount, BufferChar.Nbsp, BufferDirection.right);
        return toReturn;
    }
    TimeNicknameFavStrForConfirmation(data) {
        var result = this.TimeNicknameFavStr(data);
        result = result.replace(new RegExp(/&nbsp;/ig), '');
        return result;
    }
    MakeFriendlyDate(date) {
        var toReturn = '';
        if (date) {
            var year = date.getFullYear();
            var month = StaticHelpers_StaticHelpers.BufferString(date.getMonth().toString(), 2, BufferChar.Zero, BufferDirection.left);
            var day = StaticHelpers_StaticHelpers.BufferString(date.getDay().toString(), 2, BufferChar.Zero, BufferDirection.left);
            var min = StaticHelpers_StaticHelpers.BufferString(date.getMinutes().toString(), 2, BufferChar.Zero, BufferDirection.left);
            var hoursRaw = date.getHours();
            var ampm = hoursRaw >= 12 ? 'p' : 'a';
            hoursRaw = hoursRaw % 12;
            var hourClean = hoursRaw ? hoursRaw : 12;
            var hourCleanStr = StaticHelpers_StaticHelpers.BufferString(hourClean.toString(), 2, BufferChar.Zero, BufferDirection.left);
            toReturn = month + '.' + day + ' ' + hourCleanStr + ':' + min + ' ' + ampm;
        }
        else {
            toReturn = '{error}';
            this.Debug.Error(this.MakeFriendlyDate.name, 'no date provided');
        }
        return toReturn;
    }
    __urlVsRegex(regexPattern, url) {
        return new RegExp(regexPattern).test(url);
    }
    CalcPageTypeFromHref(currentLocHref) {
        this.Debug.FuncStart(this.CalcPageTypeFromHref.name);
        var toReturn = scWindowType.Unknown;
        this.Debug.LogVal('current url', currentLocHref);
        if (currentLocHref.indexOf(SharedConst.SharedConst.UrlSuffix.Login) > -1) {
            toReturn = scWindowType.LoginPage;
        }
        else if (new RegExp(SharedConst.SharedConst.Regex.ContentEditor).test(currentLocHref)) {
            toReturn = scWindowType.ContentEditor;
        }
        else if (currentLocHref.toLowerCase().indexOf(SharedConst.SharedConst.UrlSuffix.LaunchPad.toLowerCase()) > -1) {
            toReturn = scWindowType.Launchpad;
        }
        else if (this.__urlVsRegex(SharedConst.SharedConst.Regex.PageType.Desktop, currentLocHref)) {
            toReturn = scWindowType.Desktop;
        }
        else if (this.__urlVsRegex(SharedConst.SharedConst.Regex.PageType.Preview, currentLocHref)) {
            toReturn = scWindowType.Preview;
        }
        else if (this.__urlVsRegex(SharedConst.SharedConst.Regex.PageType.Edit, currentLocHref)) {
            toReturn = scWindowType.Edit;
        }
        else if (this.__urlVsRegex(SharedConst.SharedConst.Regex.PageType.Normal, currentLocHref)) {
            toReturn = scWindowType.Normal;
        }
        else {
            toReturn = scWindowType.Unknown;
        }
        this.Debug.FuncEnd(this.CalcPageTypeFromHref.name, scWindowType[toReturn]);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/FactoryHelper.js

class FactoryHelper_FactoryHelper extends HelperBase {
    DataOneContentDocFactoryFromIframe(IframeElem, parentDocument, nickname) {
        var toReturn = {
            ParentDoc: parentDocument,
            Document: IframeElem.contentDocument,
            HasParentDesktop: false,
            DocId: this.HelperHub.GuidHelp.NewGuid(),
            ParentDesktop: null,
            Nickname: nickname + ' - content doc'
        };
        return toReturn;
    }
    CreateNewDtDataShell() {
        var toReturn = {
            AllCeData: [],
            livingIframeAr: [],
            ActiveCeMan: null
        };
        return toReturn;
    }
    CreateNewWindowSnapShotShell(windowType, flavor) {
        this.Debug.FuncStart(this.CreateNewWindowSnapShotShell.name);
        var dateToUse = new Date();
        var newGuid = this.GuidHelp().NewGuid();
        var activeWindowSnapShot = {
            TimeStamp: dateToUse,
            WindowType: windowType,
            WindowFriendly: windowType[windowType],
            AllCEAr: [],
            Id: newGuid,
            NickName: '',
            RawData: null,
            Flavor: flavor,
        };
        this.Debug.FuncEnd(this.CreateNewWindowSnapShotShell.name);
        return activeWindowSnapShot;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/Helpers.js




class Helpers_HelperHub {
    constructor(debug) {
        debug.FuncStart(Helpers_HelperHub.name);
        this.Debug = debug;
        this.Init();
        debug.FuncEnd(Helpers_HelperHub.name);
    }
    Init() {
        this.GuidHelp = new GuidHelper_GuidHelper(this);
        this.UtilityHelp = new UtilityHelper_UtilityHelper(this);
        this.PromiseHelp = new PromiseGeneric_PromiseHelper(this);
        this.FactoryHelp = new FactoryHelper_FactoryHelper(this);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/ContentHub.js










class ContentHub_ContentHub {
    constructor(debug) {
        this.ReadyForMessages = false;
        debug.FuncStart(ContentHub_ContentHub.name);
        this.debug = debug;
        this.Instantiate();
        debug.FuncEnd(ContentHub_ContentHub.name);
    }
    Instantiate() {
        this.debug.FuncStart(this.Instantiate.name);
        this.AtticMan = new ContentAtticManager_ContentAtticManager(this);
        this.Helpers = new Helpers_HelperHub(this.debug);
        this.MsgMan = new ContentMessageManager_ContentMessageManager(this);
        this.MiscMan = new MiscManager_MiscManager(this);
        this.debug.MarkerA();
        this.OneWindowMan = new OneScWindowManager_OneScWindowManager(this);
        this.PromiseOneStep = new PromiseOneStep_PromiseOneStep(this);
        this.Factory = new ContentFactories_ContentFactories(this);
        this.SharedConst = SharedConst.SharedConst;
        this.SitecoreUiMan = new SitecoreUiManager_SitecoreUiManager(this);
        this.Init();
        this.debug.Log('ready for messages');
        this.ReadyForMessages = true;
        this.debug.FuncEnd(this.Instantiate.name);
    }
    Init() {
        this.debug.FuncStart(ContentHub_ContentHub.constructor.name + ' ' + this.Init.name);
        this.Const = ContentConst.Const;
        this.AtticMan.Init();
        this.MsgMan.Init();
        this.debug.Enabled = this.MsgMan.IsDebugEnabled();
        this.OneWindowMan.Init();
        this.debug.FuncEnd(ContentHub_ContentHub.constructor.name + ' ' + this.Init.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/debug.js




class debug_BaseDebug {
    constructor(parentWindow) {
        this.Enabled = false;
        this.ErrorStack = [];
        this.__debugTextChangedCallbacks = [];
        this.debugPrefix = '\t\t';
        this.__indentCount = 0;
        this.ParentWindow = parentWindow;
    }
    DebugDataOneIframe(dataOneIframe) {
        this.FuncStart(this.DebugDataOneIframe.name);
        this.Log('dataOneIframe : ' + this.IsNullOrUndefined(dataOneIframe));
        if (dataOneIframe) {
            this.Log('dataOneIframe.Nickname : ' + dataOneIframe.Nickname);
            this.Log('dataOneIframe.IframeElem: \t' + this.IsNullOrUndefined(dataOneIframe.IframeElem));
            if (dataOneIframe.IframeElem) {
                this.Log('dataOneIframe.id: \t' + this.IsNullOrUndefined(dataOneIframe.IframeElem.id));
            }
            this.Log('dataOneIframe.ContentDoc: \t' + this.IsNullOrUndefined(dataOneIframe.ContentDoc));
            this.DebugIDataOneDoc(dataOneIframe.ContentDoc);
        }
        this.FuncEnd(this.DebugDataOneIframe.name);
    }
    DebugIdataPopUpSettings(toReturn) {
        this.LogVal('Settings', JSON.stringify(toReturn));
    }
    DebugIDataBrowserTab(browserWindow) {
        if (this.IsNotNullOrUndefinedBool('IDataBrowserWindow', browserWindow)) {
            this.LogVal('WindowType', scWindowType[browserWindow.ScWindowType]);
        }
    }
    DebugWindow(window) {
        if (this.IsNotNullOrUndefinedBool('window', window)) {
        }
    }
    IsNotNullOrUndefinedBool(title, subject) {
        var toReturn = false;
        if (subject) {
            if ((typeof subject) == 'undefined') {
                this.LogVal(title + ' Is Not Undefined', '!!! false !!!');
            }
            else {
                this.LogVal(title + ' Is Not Null', 'true');
                toReturn = true;
            }
        }
        else {
            this.LogVal(title + ' Is Not Null', '!!! false !!!');
        }
        return toReturn;
    }
    DebugIGuid(id) {
        if (this.IsNotNullOrUndefinedBool('IGuid', id)) {
            this.LogVal('asShort', id.AsShort);
            this.LogVal('asString', id.AsString);
        }
    }
    DebugIDataOneDoc(dataOneDoc) {
        this.FuncStart(this.DebugIDataOneDoc.name);
        this.Log('');
        this.Log(this.debugPrefix + this.DebugIDataOneDoc.name);
        if (dataOneDoc) {
            this.Log(this.debugPrefix + 'dataOneDoc: \t' + this.IsNullOrUndefined(dataOneDoc));
            this.Log(this.debugPrefix + 'dataOneDoc.XyyzId.asShort: \t' + this.IsNullOrUndefined(dataOneDoc.DocId.AsShort));
            this.Log(this.debugPrefix + 'dataOneDoc.Document: \t' + this.IsNullOrUndefined(dataOneDoc.Document));
            if (dataOneDoc.Document) {
                this.LogVal(this.debugPrefix + 'dataOneDoc.Document.readyState:', dataOneDoc.Document.readyState);
                if (dataOneDoc.Document.location) {
                    this.LogVal(this.debugPrefix + 'targetDoc.location.href', dataOneDoc.Document.location.href);
                }
                else {
                    this.Log(this.debugPrefix + 'dataOneDoc.Document.location - does not exist');
                }
            }
            else {
                this.Log(this.debugPrefix + 'dataOneDoc.Document - does not exist');
            }
        }
        else {
            this.Error(this.DebugIDataOneDoc.name, 'no targetDoc');
        }
        this.Log('');
    }
    AddDebugTextChangedCallback(caller, callback) {
        this.__debugTextChangedCallbacks.push({
            Caller: caller,
            Func: callback
        });
    }
    HndlrClearDebugText(self, verify = false) {
        this.FuncStart(this.HndlrClearDebugText.name);
        var proceed = true;
        if (verify) {
            proceed = confirm('Clear Debug TextArea ?');
        }
        if (proceed) {
            var newText = '--- Debug Text Reset ---';
            self.__triggerAllDebugTextChangedCallbacks({
                NewText: newText,
                Append: false
            });
        }
        this.FuncEnd(this.HndlrClearDebugText.name);
    }
    MarkerA() {
        this.__markerRaw('A');
    }
    MarkerB() {
        this.__markerRaw('B');
    }
    MarkerC() {
        this.__markerRaw('C');
    }
    MarkerD() {
        this.__markerRaw('D');
    }
    MarkerE() { this.__markerRaw('E'); }
    MarkerF() { this.__markerRaw('F'); }
    __markerRaw(marker) {
        this.Log('Marker ' + marker);
    }
    LogVal(textValName, textVal) {
        if (typeof textVal === 'undefined') {
            textVal = '{undefined}';
        }
        else if (textVal === null) {
            textVal = '{null}';
        }
        else {
            var asGuid = textVal;
            if (asGuid.Type === 'IGuid') {
                textVal = asGuid.AsString;
            }
        }
        textVal = textVal.toString();
        textValName = StaticHelpers_StaticHelpers.BufferString(textValName.toString(), 32, BufferChar.space, BufferDirection.right);
        const debugPrefix = '  ~~~  ';
        this.Log(debugPrefix + textValName + ' : ' + textVal);
    }
    Log(text, optionalValue = '', hasPrefix = false) {
        if (this.Enabled) {
            var indent = '  ';
            for (var idx = 0; idx < this.__indentCount; idx++) {
                text = indent + text;
            }
            var prefixLength = 3;
            if (!hasPrefix) {
                for (var idx = 0; idx < prefixLength; idx++) {
                    text = ' ' + text;
                }
            }
            this.__triggerAllDebugTextChangedCallbacks({
                NewText: text,
                Append: true
            });
            console.log(text);
        }
    }
    __triggerAllDebugTextChangedCallbacks(data) {
        for (var idx = 0; idx < this.__debugTextChangedCallbacks.length; idx++) {
            var oneCallback = this.__debugTextChangedCallbacks[idx];
            oneCallback.Func(oneCallback.Caller, data);
        }
    }
    CtorName(ctorName) {
        this.Log('Constructor: ' + ctorName);
    }
    FuncStart(textOrFunc, optionalValue) {
        textOrFunc = 's) ' + textOrFunc;
        if (!optionalValue) {
            optionalValue = '';
        }
        else {
            optionalValue = optionalValue.toString();
        }
        if (optionalValue.length > 0) {
            textOrFunc = textOrFunc + ' : ' + optionalValue;
        }
        this.Log(textOrFunc, '', true);
        this.__indentCount++;
        if (this.__indentCount > 10) {
            this.__indentCount = 10;
        }
    }
    FuncEnd(text, optionalValueInput) {
        text = 'e) ' + text;
        if (!optionalValueInput) {
            optionalValueInput = '';
        }
        var optionalValue = optionalValueInput.toString();
        if (optionalValue.length > 0) {
            text = text + ' : ' + optionalValue;
        }
        this.__indentCount--;
        if (this.__indentCount < 0) {
            this.__indentCount = 0;
        }
        this.Log(text, optionalValue, true);
    }
    Error(container, text) {
        if (!container) {
            container = 'unknown';
        }
        if (!text) {
            text = 'unknown';
        }
        this.ErrorStack.push({
            ContainerFunc: container,
            ErrorString: text
        });
        this.Log('');
        this.Log('\t\t** ERROR ** ' + container);
        this.Log('');
        this.Log('\t\t  ' + text);
        this.Log('');
        this.Log('\t\t** ERROR ** ' + container);
        this.Log('');
    }
    NotNullCheck(title, value) {
        if (typeof value === 'undefined') {
            this.LogVal(title, 'Is Undefined');
        }
        else if (!value) {
            this.LogVal(title, 'Is Null');
        }
        else {
            this.LogVal(title, 'Is Not Null');
        }
    }
    IsNullOrUndefined(subject) {
        var toReturn = '{unknown}';
        if (subject) {
            if ((typeof subject) == 'undefined') {
                toReturn = 'Is Undefined';
            }
            else {
                toReturn = 'Not Null';
            }
        }
        else {
            toReturn = 'Is Null';
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Classes/ContentDebug.js


class ContentDebug_ContentDebug extends debug_BaseDebug {
    DebugMsgFromPopUp(reqMsgFromPopup) {
        if (this.IsNotNullOrUndefinedBool('MsgFromPopUp', reqMsgFromPopup)) {
            this.LogVal('requestMsgFromPopup', JSON.stringify(reqMsgFromPopup));
            this.LogVal('MsgFlag', StaticHelpers_StaticHelpers.MsgFlagAsString(reqMsgFromPopup.MsgFlag));
            this.DebugIDataContentPrefs(reqMsgFromPopup.CurrentContentPrefs);
            this.DebugPayloadDataFromPopUp(reqMsgFromPopup.Data);
        }
    }
    DebugPayloadDataFromPopUp(data) {
        if (this.IsNotNullOrUndefinedBool('PayloadDataFromPopUp', data)) {
            this.LogVal('idOfSelect', data.IdOfSelect);
            this.DebugIGuid(data.IdOfSelect);
            this.DebugIDataPayloadSnapShot(data.SnapShotSettings);
        }
    }
    DebugIDataPayloadSnapShot(snapShotSettings) {
        if (this.IsNotNullOrUndefinedBool('IDataPayloadSnapShot', snapShotSettings)) {
            this.LogVal('Flavor', StaticHelpers_StaticHelpers.FlavorAsString(snapShotSettings.Flavor));
            this.LogVal('Nickname', snapShotSettings.SnapShotNewNickname);
        }
    }
    DebugIDataContentPrefs(prefs) {
        if (this.IsNotNullOrUndefinedBool('IDataContentPrefs', prefs)) {
            if (this.IsNotNullOrUndefinedBool('MaxAutoSaveCount', prefs.MaxAutoSaveCount)) {
                this.LogVal('MaxAutoSaveCount', prefs.MaxAutoSaveCount);
            }
        }
    }
    DebugObjState(state) {
        if (this.IsNotNullOrUndefinedBool('State', state)) {
            if (this.IsNotNullOrUndefinedBool('CurrentSnapShots', state.SnapShotsMany.CurrentSnapShots)) {
                this.LogVal('Snapshot count', state.SnapShotsMany.CurrentSnapShots.length);
            }
        }
    }
    DebugIDataOneDoc(dataOneDoc) {
        if (this.IsNotNullOrUndefinedBool('IDataOneDoc', dataOneDoc)) {
            if (this.IsNotNullOrUndefinedBool('Document', dataOneDoc.Document)) {
                this.LogVal('Doc Url', dataOneDoc.Document.location.href);
            }
        }
    }
    PromiseBucketDebug(promiseBucket, friendlyName) {
        this.FuncStart(this.PromiseBucketDebug.name, friendlyName);
        this.Log('promiseBucket : ' + this.IsNullOrUndefined(promiseBucket));
        if (promiseBucket && typeof (promiseBucket) !== 'undefined') {
            this.Log('promiseBucket.IFramesbefore: ' + this.IsNullOrUndefined(promiseBucket.IFramesbefore));
            this.Log('promiseBucket.oneCEdata: ' + this.IsNullOrUndefined(promiseBucket.oneCEdata));
            this.Log('promiseBucket.NewIframe: ' + this.IsNullOrUndefined(promiseBucket.NewIframe));
            if (promiseBucket.NewIframe) {
                this.DebugDataOneIframe(promiseBucket.NewIframe);
            }
        }
        this.FuncEnd(this.PromiseBucketDebug.name, friendlyName);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/zLast.js


let debug = new ContentDebug_ContentDebug(window.opener);
debug.Enabled = true;
new ContentHub_ContentHub(debug);


/***/ })
/******/ ]);