/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/PopUpManagerBase.js
class PopUpManagerBase {
    constructor(popHub) {
        this.IsInit = false;
        this.PopHub = popHub;
    }
    UiMan() { return this.PopHub.UiMan; }
    Log() { return this.PopHub.Log; }
    MsgMan() { return this.PopHub.PopMsgMan; }
    PopAtticMan() { return this.PopHub.PopUpAtticMan; }
    Helpers() { return this.PopHub.Helpers; }
    EventMan() { return this.PopHub.EventMan; }
    locMan() { return this.PopHub.LocMan; }
    TabMan() { return this.PopHub.TabMan; }
    BrowserMan() { return this.PopHub.BrowserMan; }
    SettingsMan() { return this.PopHub.SettingsMan; }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/scWindowType.js
var scWindowType;
(function (scWindowType) {
    scWindowType[scWindowType["Unknown"] = 0] = "Unknown";
    scWindowType[scWindowType["LoginPage"] = 1] = "LoginPage";
    scWindowType[scWindowType["Desktop"] = 2] = "Desktop";
    scWindowType[scWindowType["ContentEditor"] = 3] = "ContentEditor";
    scWindowType[scWindowType["Launchpad"] = 4] = "Launchpad";
    scWindowType[scWindowType["Edit"] = 5] = "Edit";
    scWindowType[scWindowType["Normal"] = 6] = "Normal";
    scWindowType[scWindowType["Preview"] = 7] = "Preview";
})(scWindowType || (scWindowType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/PayloadDataReqPopUp.js
class PayloadDataFromPopUp {
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/MessageFlag.js
var MsgFlag;
(function (MsgFlag) {
    MsgFlag[MsgFlag["Unknown"] = 0] = "Unknown";
    MsgFlag[MsgFlag["GetAllStorageOneWindow"] = 1] = "GetAllStorageOneWindow";
    MsgFlag[MsgFlag["NewWindowTest"] = 2] = "NewWindowTest";
    MsgFlag[MsgFlag["RemoveFromStorage"] = 3] = "RemoveFromStorage";
    MsgFlag[MsgFlag["ReqAddCETab"] = 4] = "ReqAddCETab";
    MsgFlag[MsgFlag["ReqAdminB"] = 5] = "ReqAdminB";
    MsgFlag[MsgFlag["ReqCurState"] = 6] = "ReqCurState";
    MsgFlag[MsgFlag["ReqGoDesktop"] = 7] = "ReqGoDesktop";
    MsgFlag[MsgFlag["ReqLoginWithAdminB"] = 8] = "ReqLoginWithAdminB";
    MsgFlag[MsgFlag["ReqOpenCE"] = 9] = "ReqOpenCE";
    MsgFlag[MsgFlag["ReqQuickPublish"] = 10] = "ReqQuickPublish";
    MsgFlag[MsgFlag["ReqRestoreClick"] = 11] = "ReqRestoreClick";
    MsgFlag[MsgFlag["ReqRestoreToNewTab"] = 12] = "ReqRestoreToNewTab";
    MsgFlag[MsgFlag["ReqSetScMode"] = 13] = "ReqSetScMode";
    MsgFlag[MsgFlag["ReqTakeSnapShot"] = 14] = "ReqTakeSnapShot";
    MsgFlag[MsgFlag["ReqUpdateNickName"] = 15] = "ReqUpdateNickName";
    MsgFlag[MsgFlag["RespCurState"] = 16] = "RespCurState";
    MsgFlag[MsgFlag["RespError"] = 17] = "RespError";
    MsgFlag[MsgFlag["RespTaskFailed"] = 18] = "RespTaskFailed";
    MsgFlag[MsgFlag["RespTaskSuccessful"] = 19] = "RespTaskSuccessful";
    MsgFlag[MsgFlag["RespTest"] = 20] = "RespTest";
    MsgFlag[MsgFlag["ReqMarkFavorite"] = 21] = "ReqMarkFavorite";
    MsgFlag[MsgFlag["Ping"] = 22] = "Ping";
    MsgFlag[MsgFlag["RespListeningAndReady"] = 23] = "RespListeningAndReady";
})(MsgFlag || (MsgFlag = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/MsgFromXBase.js

class MsgFromXBase_MsgFromXBase {
    constructor(msgFlag) {
        this.MsgFlag = MsgFlag.Unknown;
        this.MsgFlag = msgFlag;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SnapShotFlavor.js
var SnapShotFlavor;
(function (SnapShotFlavor) {
    SnapShotFlavor[SnapShotFlavor["Unknown"] = 0] = "Unknown";
    SnapShotFlavor[SnapShotFlavor["Autosave"] = 1] = "Autosave";
    SnapShotFlavor[SnapShotFlavor["Favorite"] = 2] = "Favorite";
    SnapShotFlavor[SnapShotFlavor["Manual"] = 3] = "Manual";
})(SnapShotFlavor || (SnapShotFlavor = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/MsgFromPopUp.js



class MsgFromPopUp_MsgFromPopUp extends MsgFromXBase_MsgFromXBase {
    constructor(msgFlag, popHub) {
        super(msgFlag);
        this.Data = new PayloadDataFromPopUp();
        this.Data.IdOfSelect = popHub.UiMan.CurrentMenuState.SelectSnapshotId;
        this.Data.SnapShotSettings = {
            SnapShotNewNickname: '',
            Flavor: SnapShotFlavor.Unknown,
            CurrentPageType: popHub.TabMan.CurrentTabData.UrlParts.ScWindowType
        };
        popHub.Log.Log('constructor done msgfrompopup');
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/MenuCommand.js
var MenuCommand;
(function (MenuCommand) {
    MenuCommand[MenuCommand["GoScModeEdit"] = 0] = "GoScModeEdit";
    MenuCommand[MenuCommand["Unknown"] = 1] = "Unknown";
    MenuCommand[MenuCommand["MarkFavorite"] = 2] = "MarkFavorite";
    MenuCommand[MenuCommand["CloseWindow"] = 3] = "CloseWindow";
    MenuCommand[MenuCommand["TakeSnapShot"] = 4] = "TakeSnapShot";
    MenuCommand[MenuCommand["AddCeTab"] = 5] = "AddCeTab";
    MenuCommand[MenuCommand["ScModeNormal"] = 6] = "ScModeNormal";
    MenuCommand[MenuCommand["ScModePrev"] = 7] = "ScModePrev";
    MenuCommand[MenuCommand["Cancel"] = 8] = "Cancel";
    MenuCommand[MenuCommand["DrawStorage"] = 9] = "DrawStorage";
    MenuCommand[MenuCommand["Remove"] = 10] = "Remove";
    MenuCommand[MenuCommand["RestoreState"] = 11] = "RestoreState";
    MenuCommand[MenuCommand["UpdateNickname"] = 12] = "UpdateNickname";
    MenuCommand[MenuCommand["QuickPublish"] = 13] = "QuickPublish";
    MenuCommand[MenuCommand["GoDesktop"] = 14] = "GoDesktop";
    MenuCommand[MenuCommand["GoContentEditor"] = 15] = "GoContentEditor";
    MenuCommand[MenuCommand["PutAdminB"] = 16] = "PutAdminB";
    MenuCommand[MenuCommand["PresentationDetails"] = 17] = "PresentationDetails";
})(MenuCommand || (MenuCommand = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/CacheMode.js
var CacheMode;
(function (CacheMode) {
    CacheMode[CacheMode["DoNotUseCach"] = 0] = "DoNotUseCach";
    CacheMode[CacheMode["OkToUseCache"] = 1] = "OkToUseCache";
})(CacheMode || (CacheMode = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferDirection.js
var BufferDirection;
(function (BufferDirection) {
    BufferDirection[BufferDirection["left"] = 0] = "left";
    BufferDirection[BufferDirection["right"] = 1] = "right";
})(BufferDirection || (BufferDirection = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferChar.js
var BufferChar;
(function (BufferChar) {
    BufferChar[BufferChar["space"] = 0] = "space";
    BufferChar[BufferChar["Nbsp"] = 1] = "Nbsp";
    BufferChar[BufferChar["Period"] = 2] = "Period";
    BufferChar[BufferChar["Zero"] = 3] = "Zero";
})(BufferChar || (BufferChar = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SettingKey.js
var SettingKey_SettingKey;
(function (SettingKey) {
    SettingKey[SettingKey["unknown"] = 0] = "unknown";
    SettingKey[SettingKey["AutoLogin"] = 100] = "AutoLogin";
    SettingKey[SettingKey["__dead101"] = 101] = "__dead101";
    SettingKey[SettingKey["DebugKeepDialogOpen"] = 102] = "DebugKeepDialogOpen";
    SettingKey[SettingKey["AutoSaveIntervalMin"] = 103] = "AutoSaveIntervalMin";
    SettingKey[SettingKey["MaxAutoSaveCount"] = 200] = "MaxAutoSaveCount";
    SettingKey[SettingKey["LogToConsole"] = 201] = "LogToConsole";
    SettingKey[SettingKey["Test"] = 202] = "Test";
    SettingKey[SettingKey["LgndLog"] = 300] = "LgndLog";
    SettingKey[SettingKey["LgndForeSite"] = 301] = "LgndForeSite";
    SettingKey[SettingKey["LgndHindSite"] = 302] = "LgndHindSite";
    SettingKey[SettingKey["LgndSettings"] = 303] = "LgndSettings";
    SettingKey[SettingKey["LgndState"] = 304] = "LgndState";
    SettingKey[SettingKey["NotUsed"] = 305] = "NotUsed";
    SettingKey[SettingKey["AutoSnapshotBeforeWindowChange"] = 306] = "AutoSnapshotBeforeWindowChange";
})(SettingKey_SettingKey || (SettingKey_SettingKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/StaticHelpers.js







class StaticHelpers_StaticHelpers {
    static MinToMs(minutes) {
        return minutes * 60 * 1000;
    }
    static FlavorAsString(flavor) {
        return 'Flavor.' + SnapShotFlavor[flavor] + '(' + flavor + ')';
    }
    static SettingKeyAsString(settingKey) {
        return 'SettingKey.' + SettingKey_SettingKey[settingKey] + '(' + settingKey + ')';
    }
    static CacheModeAsString(cacheMode) {
        return 'CacheMode.' + CacheMode[cacheMode] + ' (' + cacheMode + ')';
    }
    static WindowTypeAsString(windowType) {
        return scWindowType[windowType];
    }
    static BufferString(str, desiredLength, buffCharEnum, direction) {
        var toReturn = str;
        var buffChar = ' ';
        if (buffCharEnum === BufferChar.space) {
            buffChar = ' ';
        }
        else if (buffCharEnum === BufferChar.Nbsp) {
            buffChar = '&nbsp;';
        }
        else if (buffCharEnum === BufferChar.Period) {
            buffChar = '.';
        }
        else if (buffCharEnum === BufferChar.Zero) {
            buffChar = '0';
        }
        if (toReturn.length > desiredLength) {
            if (desiredLength > 6) {
                toReturn = toReturn.substring(0, desiredLength - 3) + '...';
            }
            else {
                toReturn = toReturn.substring(0, desiredLength);
            }
        }
        if (toReturn.length < desiredLength) {
            var bufferCharNeeded = desiredLength - toReturn.length;
            for (var idx = 0; idx < bufferCharNeeded; idx++) {
                if (direction === BufferDirection.left) {
                    toReturn = buffChar + toReturn;
                }
                else {
                    toReturn = toReturn + buffChar;
                }
            }
        }
        return toReturn;
    }
    static MsgFlagAsString(msg) {
        var toReturn = "{error}";
        if (msg) {
            try {
                toReturn = 'MsgFlag.' + MsgFlag[msg] + '(' + msg + ')';
            }
            catch (e) {
            }
        }
        return 'flag: ' + toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SettingType.js
var SettingType;
(function (SettingType) {
    SettingType[SettingType["Unknown"] = 0] = "Unknown";
    SettingType[SettingType["BoolCheckBox"] = 1] = "BoolCheckBox";
    SettingType[SettingType["Accordian"] = 2] = "Accordian";
    SettingType[SettingType["Number"] = 3] = "Number";
})(SettingType || (SettingType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/AutoBuild/BuildNum.js
const BuildDateStamp = 1583434649486;


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/scMode.js
var scMode_scMode;
(function (scMode) {
    scMode[scMode["Unknown"] = 0] = "Unknown";
    scMode[scMode["Edit"] = 1] = "Edit";
    scMode[scMode["Preview"] = 2] = "Preview";
    scMode[scMode["Normal"] = 3] = "Normal";
})(scMode_scMode || (scMode_scMode = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Classes/PopConst.js

class PopConst {
}
PopConst.Const = {
    ClassNames: {
        HS: {
            Collapsed: 'in',
        },
    },
    ElemId: {
        textAreaFeedback: 'ta-feedback',
        InputNickname: 'inputNickname',
        HindSiteParentInfo: 'spanParentInfo',
        HS: {
            SelectHeaderAuto: 'sel-header-auto',
            SelectHeaderAutoTitle: 'sel-header-auto-title',
            SelectHeaderFavorite: 'sel-header-favorite',
            SelectHeaderFavoriteTitle: 'sel-header-favorite-title',
            TabId: 'orig-win-id',
            Btn: {
                AdminB: 'AdminB',
                MarkFavorite: 'MarkFavorite',
                HsCancel: 'Cancel',
                GoCE: 'CE',
                Desktop: 'Desktop',
                HsDrawStorage: 'DrawLocalStorage',
                BigRed: 'BigRed',
                ModeEdit: 'sc-mode-edit',
                ModeNorm: 'Norm',
                ModePrev: 'Prev',
                PresentationDetails: 'PresentationDetails',
                QuickPublish: 'QuickPublish',
                HsRemoveFromStorage: 'RemoveOneFromLocalStorage',
                HsRestoreWindowState: 'RestoreWindowState',
                TakeSnapshot: 'SaveWindowState',
                UpdateNicknameB: 'UpdateNickname',
            },
        }
    },
    Numbers: {
        MinMenuHeight: 600,
        MinMenuWidth: 600,
        MaxAutoSaveCount: 10,
        AutoSaveIntervalMin: 5,
    },
    Notify: {
        Default: 'Complete',
        PublishComplete: 'Publishing Complete',
    },
    ScMode: {
        edit: { AsEnum: scMode_scMode.Edit, AsString: 'edit' },
        normal: { AsEnum: scMode_scMode.Normal, AsString: 'normal' },
        preview: { AsEnum: scMode_scMode.Preview, AsString: 'preview' },
    },
    Selector: {
        Btn: {
            WindowClose: '[id=close-window]',
        },
        Legend: {
            LgndSettings: '[id=lgnd-settings]',
            LgndInSite: '[id=lgnd-in-site]',
            LgndHindSite: '[id=lgnd-hind-site]',
            LgndDebug: '[id=lgnd-log]',
            LgndForeSite: '[id=lgnd-fore-site]',
            LgndState: '[id=lgnd-state]',
        },
        HS: {
            GenericSettingTest: '[id=id-generic-setting-test]',
            LogToConsole: '[id=id-settings-show-log-data]',
            iCBoxdSettingsAutoLogin: '[id=id-settings-auto-login]',
            PrefAutoLogin: '[id=id-settings-auto-login]',
            SettingNotUsed: '[id=id-settings-not-used]',
            AutoSnapshotBeforeWindowChange: '[id=id-settings-auto-snapshot-on-window-change]',
            SettingAutoSaveInterval: '[id=id-settings-auto-save-interval]',
            SettingAutoSaveMaxCount: '[id=id-settings-auto-save-max-count]',
            SettingDebugKeepDialogOpen: '[id=id-settings-debug-keep-dialog-open]',
            BuildStamp: '[id=build-stamp]',
            DivMsgStatus: '[id=msg-status]',
            DivStatePopUp: '[id=div-state-pop-up]',
            DivStateContent: '[id=div-state-content]',
            IdFieldSetDebug: '[id=id-fieldset-debug]',
            SelStateSnapShot: '[id=selState]',
            TaDebug: '[id=ta-log]',
        },
    },
    Settings: {
        Defaults: {
            LgndDebug: false,
            LgndForeSite: true,
            LgndHindSite: true,
            LgndInSite: true,
            LgndSettings: false,
            LgndState: false,
            DebugKeepDialogOpen: false,
            AutoSaveEnabled: false,
        }
    },
    Storage: {
        WindowRoot: 'todo',
        SettingsSuffix: 'todo',
        KeyGenericSettings: 'GenericSettings',
        Defaults: {
            bool: {
                AutoSaveEnabled: false,
                AutoLogin: false,
                DefaultDebugKeepDialogOpen: false,
                AutoSnapshotBeforeWindowChange: true,
            }
        }
    },
    Timeouts: {
        WaitBeforeRemovingCompleteFlag: 1500,
        AutoLoginCheckInterval: 3000,
    },
};

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/HelperBase.js
class HelperBase {
    constructor(helperHub) {
        this.HelperHub = helperHub;
        this.Log = helperHub.Log;
    }
    GuidHelp() { return this.HelperHub.GuidHelp; }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/SettingsHelper.js

class SettingsHelper_SettingsHelper extends HelperBase {
    GetByKey(settingKey, settingAr) {
        var toReturn;
        for (var idx = 0; idx < settingAr.length; idx++) {
            if (settingAr[idx].SettingKey === settingKey) {
                toReturn = settingAr[idx];
                break;
            }
        }
        return toReturn;
    }
    static ValueAsInteger(setting) {
        let toReturn = 0;
        if (setting) {
            toReturn = setting.ValueAsObj;
        }
        return toReturn;
    }
    static ValueAsBool(setting) {
        let toReturn = false;
        if (setting) {
            toReturn = setting.ValueAsObj;
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/VisibilityType.js
var VisibilityType;
(function (VisibilityType) {
    VisibilityType[VisibilityType["Unknown"] = 0] = "Unknown";
    VisibilityType[VisibilityType["LoginPage"] = 1] = "LoginPage";
    VisibilityType[VisibilityType["Desktop"] = 2] = "Desktop";
    VisibilityType[VisibilityType["ContentEditor"] = 3] = "ContentEditor";
    VisibilityType[VisibilityType["Launchpad"] = 4] = "Launchpad";
    VisibilityType[VisibilityType["Edit"] = 5] = "Edit";
    VisibilityType[VisibilityType["Normal"] = 6] = "Normal";
    VisibilityType[VisibilityType["Preview"] = 7] = "Preview";
    VisibilityType[VisibilityType["SnapShotSelected"] = 8] = "SnapShotSelected";
    VisibilityType[VisibilityType["NotLogin"] = 9] = "NotLogin";
    VisibilityType[VisibilityType["CommandIsRunning"] = 10] = "CommandIsRunning";
    VisibilityType[VisibilityType["ActiveCeNode"] = 11] = "ActiveCeNode";
    VisibilityType[VisibilityType["SnapShotable"] = 12] = "SnapShotable";
})(VisibilityType || (VisibilityType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/UiButtonStateManager.js



class UiButtonStateManager_UiButtonStateManager extends PopUpManagerBase {
    constructor(popHub) {
        super(popHub);
        popHub.Log.FuncStart(UiButtonStateManager_UiButtonStateManager.name);
        popHub.Log.FuncEnd(UiButtonStateManager_UiButtonStateManager.name);
    }
    VisibilityTestWindowType(windowType) {
        let toReturn = false;
        var currentWindowType = this.TabMan().CurrentTabData.UrlParts.ScWindowType;
        toReturn = windowType === currentWindowType;
        return toReturn;
    }
    TestAgainstAllSetControllers(command) {
        let toReturn = false;
        if (command.VisibilityControllers.length > 0) {
            for (var jdx = 0; jdx < command.VisibilityControllers.length; jdx++) {
                let oneControl = command.VisibilityControllers[jdx];
                switch (oneControl) {
                    case VisibilityType.Desktop:
                        toReturn = this.VisibilityTestWindowType(scWindowType.Desktop);
                        break;
                    case VisibilityType.ActiveCeNode:
                        toReturn = this.VisibilityTestActiveCeNode();
                        break;
                    case VisibilityType.ContentEditor:
                        toReturn = this.VisibilityTestWindowType(scWindowType.ContentEditor);
                        break;
                    case VisibilityType.Edit:
                        toReturn = this.VisibilityTestWindowType(scWindowType.Edit);
                        break;
                    case VisibilityType.Launchpad:
                        toReturn = this.VisibilityTestWindowType(scWindowType.Launchpad);
                        break;
                    case VisibilityType.LoginPage:
                        toReturn = this.VisibilityTestWindowType(scWindowType.LoginPage);
                        break;
                    case VisibilityType.Normal:
                        toReturn = this.VisibilityTestWindowType(scWindowType.Normal);
                        break;
                    case VisibilityType.Preview:
                        toReturn = this.VisibilityTestWindowType(scWindowType.Preview);
                        break;
                    case VisibilityType.SnapShotable:
                        toReturn = this.VisibilityTestSnapShotable();
                        break;
                    case VisibilityType.SnapShotSelected:
                        toReturn = this.VisibilityTestSnapShotSelected();
                        break;
                    case VisibilityType.NotLogin:
                        toReturn = !this.VisibilityTestWindowType(scWindowType.LoginPage);
                        break;
                    case VisibilityType.CommandIsRunning:
                        toReturn = false;
                        break;
                    case VisibilityType.Unknown:
                        this.Log().Error(this.TestAgainstAllSetControllers.name, 'unknown visibility type');
                        break;
                    default:
                        this.Log().Error(this.TestAgainstAllSetControllers.name, 'unknown visibility type');
                        break;
                }
                if (toReturn) {
                    break;
                }
            }
        }
        else {
            toReturn = true;
        }
        return toReturn;
    }
    VisibilityTestSnapShotSelected() {
        let toReturn = false;
        let currSelSnapshot = this.UiMan().CurrentMenuState.SelectSnapshotId;
        if (currSelSnapshot && currSelSnapshot.AsBracedGuid !== this.Helpers().GuidHelp.EmptyGuid().AsBracedGuid) {
            toReturn = true;
        }
        return toReturn;
    }
    VisibilityTestSnapShotable() {
        return this.VisibilityTestActiveCeNode();
    }
    VisibilityTestActiveCeNode() {
        let toReturn = false;
        toReturn = this.UiMan().CurrContentState.ActiveCe && this.UiMan().CurrContentState.ActiveCe.ActiveNode !== null;
        return toReturn;
    }
    SetOneButtonVisibility(targetButton, passesOneTest) {
        if (passesOneTest) {
            targetButton.classList.remove('disabled');
            targetButton.removeAttribute('disabled');
        }
        else {
            targetButton.classList.add('disabled');
            targetButton.setAttribute('disabled', 'disabled');
        }
    }
    RefreshButtonStates() {
        this.Log().FuncStart(this.RefreshButtonStates.name, this.EventMan().AllMenuCommands.length);
        for (var idx = 0; idx < this.EventMan().AllMenuCommands.length; idx++) {
            var oneCommand = this.EventMan().AllMenuCommands[idx];
            let passesOneTest = false;
            var targetButton = this.UiMan().GetButtonByIdOrSelector(oneCommand.ButtonSelector);
            if (targetButton) {
                passesOneTest = this.TestAgainstAllSetControllers(oneCommand);
            }
            else {
                this.Log().Error(this.RefreshButtonStates.name, 'target button not found');
            }
            this.SetOneButtonVisibility(targetButton, passesOneTest);
        }
        this.Log().FuncEnd(this.RefreshButtonStates.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/UiManager.js
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};













class UiManager_UiManager extends PopUpManagerBase {
    constructor(popHub) {
        super(popHub);
        this.ParentFocused = false;
        this.MenuFocused = true;
        this.OtherFocused = false;
        this.MenuEnabled = true;
        this.lineBreak = '<br/>';
        this.indentedLineBreak = '<br/>&nbsp;&nbsp;&nbsp;';
        this.CurrentMenuState = {
            SelectSnapshotId: null,
        };
        popHub.Log.FuncStart(UiManager_UiManager.name);
        this.ButtonStateManager = new UiButtonStateManager_UiButtonStateManager(this.PopHub);
        popHub.Log.FuncEnd(UiManager_UiManager.name);
    }
    Init() {
        this.Log().FuncStart(UiManager_UiManager.name, this.Init.name);
        var self = this;
        this.Log().AddDebugTextChangedCallback(self, this.HndlrDebugTextChanged);
        this.LookForMsgStatusDiv();
        this.WriteBuildNumToUi();
        this.MsgMan().SendMessageToContentTab(new MsgFromPopUp_MsgFromPopUp(MsgFlag.ReqCurState, this.PopHub), this.TabMan().CurrentTabData);
        this.Log().FuncEnd(UiManager_UiManager.name, this.Init.name);
    }
    LookForMsgStatusDiv() {
        this.MsgStatusDiv = document.querySelector(PopConst.Const.Selector.HS.DivMsgStatus);
    }
    UpdateMsgStatusStack(textToShow) {
        if (this.MsgStatusDiv) {
            this.MsgStatusDiv.innerHTML = textToShow + '</br>' + this.MsgStatusDiv.innerHTML;
        }
        this.Log().Log('msg stat: ' + textToShow);
    }
    OnSuccessfullCommand() {
        this.Log().FuncStart(this.OnSuccessfullCommand.name);
        try {
            this.UpdateMsgStatusStack('Command Completed Successfully');
            let setting = this.SettingsMan().GetByKey(SettingKey_SettingKey.DebugKeepDialogOpen);
            if (!SettingsHelper_SettingsHelper.ValueAsBool(setting)) {
                window.close();
            }
            else {
                this.Log().Log('Window not closed because of setting: ' + setting.Friendly);
            }
        }
        catch (ex) {
            console.log(ex.toString());
        }
        this.Log().FuncEnd(this.OnSuccessfullCommand.name);
    }
    WriteBuildNumToUi() {
        this.Log().LogVal('BuildDateStamp', BuildDateStamp);
        var targetTag = document.querySelector(PopConst.Const.Selector.HS.BuildStamp);
        if (targetTag) {
            targetTag.innerText = 'build: ' + this.Helpers().UtilityHelp.MakeFriendlyDate(new Date(BuildDateStamp));
        }
        else {
            this.Log().Error(this.WriteBuildNumToUi.name, 'No Build Stamp Element Found');
        }
    }
    __drawStoragePretty(ourData) {
        this.Log().FuncStart(this.__drawStoragePretty.name);
        this.ClearTextArea();
        for (var idx = 0; idx < ourData.length; idx++) {
            this.Log().Log('key: \t' + ourData[idx].key);
            var parsed = JSON.parse(ourData[idx].data);
            if (parsed) {
                this.DrawDebugDataPretty(parsed);
                this.Log().Log('------------');
            }
        }
        this.Log().FuncEnd(this.__drawStoragePretty.name);
    }
    DebugDataOneNode(dataOneTreeNode) {
        this.Log().FuncStart(this.DebugDataOneNode.name);
        var activeOrNot = dataOneTreeNode.IsActive ? '* ' : '  ';
        var expandedOrNot = dataOneTreeNode.IsExpanded ? '+ ' : '  ';
        var toReturn = activeOrNot + expandedOrNot + dataOneTreeNode.NodeId.AsString + ' ' + dataOneTreeNode.NodeFriendly;
        this.Log().FuncEnd(this.DebugDataOneNode.name);
        return toReturn;
    }
    GetDebugDataOneCE(dataOneCe) {
        this.Log().FuncStart('GetDebugDataOneCE');
        var toReturn = [];
        toReturn.push('------ All Tree Nodes -----');
        for (var idx = 0; idx < dataOneCe.AllTreeNodeAr.length; idx++) {
            this.Log().Log('idx: ' + idx);
            var oneVal = this.DebugDataOneNode(dataOneCe.AllTreeNodeAr[idx]);
            this.Log().Log('oneVal : ' + oneVal);
            toReturn.push(oneVal);
        }
        this.Log().FuncEnd(this.GetDebugDataOneCE.name);
        return toReturn;
    }
    __buildDebugDataPretty(dataOneWindow) {
        this.Log().FuncStart(this.__buildDebugDataPretty.name, 'data not null? ' + this.Log().IsNullOrUndefined(dataOneWindow));
        var toReturn = [];
        if (dataOneWindow) {
            toReturn.push('------ One Window Snap Shot Start -----');
            toReturn.push('Id: ' + dataOneWindow.Id);
            toReturn.push('TimeStamp: ' + dataOneWindow.TimeStamp);
            toReturn.push('CE Count: ' + dataOneWindow.AllCEAr.length);
            toReturn.push('Type: ' + scWindowType[dataOneWindow.WindowType]);
            toReturn.push('Nickname: ' + dataOneWindow.NickName);
            for (var jdx = 0; jdx < dataOneWindow.AllCEAr.length; jdx++) {
                toReturn.push('\t------ One CE Start -----');
                var dataOneCE = dataOneWindow.AllCEAr[jdx];
                toReturn.push('\tId: ' + dataOneCE.Id.AsString);
                var allCeDebugDataAr = this.GetDebugDataOneCE(dataOneCE);
                for (var kdx = 0; kdx < allCeDebugDataAr.length; kdx++) {
                    toReturn.push('\t\t' + allCeDebugDataAr[kdx]);
                }
                toReturn.push('\t------ One CE End -----');
            }
            toReturn.push('------ One Window Snap Shot End -----');
            this.Log().FuncEnd(this.__buildDebugDataPretty.name);
        }
        else {
            this.Log().Error(this.__buildDebugDataPretty.name, 'missing data');
        }
        return toReturn;
    }
    DrawDebugDataPretty(source) {
        this.Log().FuncStart(this.DrawDebugDataPretty.name, 'source not null: ' + this.Log().IsNullOrUndefined(source));
        var allDebugData = this.__buildDebugDataPretty(source);
        for (var ldx = 0; ldx < allDebugData.length; ldx++) {
            this.PopHub.FeedbackMan.WriteLine(allDebugData[ldx]);
        }
        this.Log().FuncEnd(this.DrawDebugDataPretty.name);
    }
    ClearTextArea() {
        var ta = this.__getTextArea();
        if (ta) {
            ta.value = '';
        }
        else {
            this.Log().Error(this.ClearTextArea.name, 'No text area found');
        }
    }
    __getTextArea() {
        return document.querySelector(PopConst.Const.Selector.HS.TaDebug);
    }
    HndlrDebugTextChanged(caller, data) {
        var self = caller;
        var ta = self.__getTextArea();
        if (ta) {
            if (data.Append) {
                ta.value += data.NewText + '\n';
            }
            else {
                ta.value = data.NewText + '\n';
            }
            ta.scrollTop = ta.scrollHeight;
        }
    }
    SetAccordianClass(targetElem, isCollapsed) {
        if (!isCollapsed) {
            targetElem.classList.remove(PopConst.Const.ClassNames.HS.Collapsed);
        }
        else {
            targetElem.classList.add(PopConst.Const.ClassNames.HS.Collapsed);
        }
    }
    GetAccordianContentElem(sib) {
        var toReturn;
        if (sib) {
            var siblings = sib.parentElement.getElementsByClassName('accordian-content');
            if (siblings) {
                var toReturn = siblings[0];
            }
        }
        return toReturn;
    }
    DrawStorageResponse(data) {
        this.Log().FuncStart('DrawStorage');
        try {
            if (data.State.SnapShotsMany.CurrentSnapShots) {
            }
        }
        catch (e) {
            this.Log().Error(this.DrawStorageResponse.name, e.message);
        }
        this.Log().FuncEnd('DrawStorage');
    }
    __drawStorageRaw(ourData) {
        this.Log().FuncStart('DrawStorageRaw');
        for (var idx = 0; idx < ourData.length; idx++) {
            this.Log().Log('key: \t' + ourData[idx].key);
            this.Log().Log('data: \t' + ourData[idx].data);
            this.Log().Log('------------');
        }
        this.Log().FuncEnd('DrawStorageRaw');
    }
    RestoreAccordianState(oneSetting, foundElem) {
        return __awaiter(this, void 0, void 0, function* () {
            this.Log().FuncStart(this.RestoreAccordianState.name);
            var contentSib = this.GetAccordianContentElem(foundElem);
            if (contentSib) {
                this.SetAccordianClass(contentSib, oneSetting.ValueAsObj);
            }
            else {
                this.Log().Error(this.RestoreAccordianState.name, 'Sibling not found');
            }
            this.Log().FuncEnd(this.RestoreAccordianState.name);
        });
    }
    UpdateAtticFromUi() {
        return __awaiter(this, void 0, void 0, function* () {
            this.Log().FuncStart(this.UpdateAtticFromUi.name);
            this.RefreshUiFromCache();
            this.Log().FuncEnd(this.UpdateAtticFromUi.name);
        });
    }
    SelectChanged() {
        this.Log().FuncStart(this.SelectChanged.name);
        this.CurrentMenuState.SelectSnapshotId = this.Helpers().GuidHelp.ParseGuid(this.__getSelectElem().value);
        this.RefreshUiFromCache();
        this.Log().FuncEnd(this.SelectChanged.name);
    }
    __GetCancelButton() {
        return document.getElementById(PopConst.Const.ElemId.HS.Btn.HsCancel);
    }
    SetCancelFlag() {
        var btn = this.__GetCancelButton();
        if (btn) {
            btn.classList.add('red');
        }
    }
    ClearCancelFlag() {
        var btn = this.__GetCancelButton();
        if (btn) {
            btn.classList.remove('red');
        }
    }
    RefreshUiGenericSettings() {
        this.Log().FuncStart(this.RefreshUiGenericSettings.name);
        for (var idx = 0; idx < this.SettingsMan().AllSettings.SettingsAr.length; idx++) {
            var oneSetting = this.SettingsMan().AllSettings.SettingsAr[idx];
            var foundElem = document.querySelector(oneSetting.UiSelector);
            if (foundElem) {
                if (oneSetting.DataType === SettingType.BoolCheckBox) {
                    let valueToDisplay = (oneSetting.ValueAsObj || oneSetting.DefaultValue);
                    foundElem.checked = valueToDisplay;
                }
                if (oneSetting.DataType === SettingType.Accordian) {
                    this.RestoreAccordianState(oneSetting, foundElem);
                }
            }
            else {
                this.Log().Error(this.RefreshUiGenericSettings.name, 'ui element not found: ' + oneSetting.UiSelector);
            }
        }
        this.Log().FuncEnd(this.RefreshUiGenericSettings.name);
    }
    RefreshUiFromCache() {
        return __awaiter(this, void 0, void 0, function* () {
            this.Log().FuncStart(this.RefreshUiFromCache.name);
            this.RefreshUiGenericSettings();
            this.UiMan().PopulateState(this.MsgMan().LastKnownContentState);
            this.PopulateStateOfSnapShotSelect(this.MsgMan().LastKnownContentState.SnapShotsMany.CurrentSnapShots);
            this.ButtonStateManager.RefreshButtonStates();
            this.__drawCorrectNicknameInUI(this.MsgMan().LastKnownContentState.SnapShotsMany.CurrentSnapShots);
            this.Log().FuncEnd(this.RefreshUiFromCache.name);
        });
    }
    ShowDebugDataOneWindow() {
        this.Log().FuncStart('ShowDebugDataOneWindow');
        var toReturn = [];
        for (var kdx = 0; kdx < toReturn.length; kdx++) {
            this.Log().Log(toReturn[kdx]);
        }
        this.Log().FuncEnd('ShowDebugDataOneWindow');
        return toReturn;
    }
    __drawCorrectNicknameInUI(snapShots) {
        this.Log().FuncStart(this.__drawCorrectNicknameInUI.name);
        var targetId = this.UiMan().CurrentMenuState.SelectSnapshotId;
        if (targetId) {
            this.Log().Log('targetId : ' + targetId.AsString);
            var storageValues = snapShots;
            var storageMatch;
            for (var idx = 0; idx < storageValues.length; idx++) {
                var candidate = storageValues[idx];
                if (candidate.Id.AsString === this.CurrentMenuState.SelectSnapshotId.AsString) {
                    storageMatch = candidate;
                    break;
                }
            }
            if (storageMatch) {
                var inputElem = window.document.getElementById(PopConst.Const.ElemId.InputNickname);
                if (inputElem) {
                    inputElem.value = storageMatch.NickName;
                }
            }
        }
        this.Log().FuncEnd(this.__drawCorrectNicknameInUI.name);
    }
    GetValueInNickname() {
        var toReturn = '';
        toReturn = window.document.getElementById(PopConst.Const.ElemId.InputNickname).value;
        return toReturn;
    }
    __getSelectElem() {
        return window.document.querySelector(PopConst.Const.Selector.HS.SelStateSnapShot);
    }
    GetButtonByIdOrSelector(targetId) {
        var toReturn = document.querySelector(targetId);
        if (!toReturn) {
            toReturn = document.querySelector('[id=' + targetId + ']');
        }
        return toReturn;
    }
    AssignOnCheckedEvent(targetId, handler) {
        var targetElem = document.getElementById(targetId);
        if (!targetElem) {
            this.Log().Error(this.AssignOnClickEvent.name, 'No Id: ' + targetId);
        }
        else {
            targetElem.addEventListener('checked', (evt) => { handler(evt); });
        }
    }
    AssignOnClickEvent(targetId, handler) {
        var targetElem = this.GetButtonByIdOrSelector(targetId);
        if (!targetElem) {
            this.Log().Error(this.AssignOnClickEvent.name, 'No Id: ' + targetId);
        }
        else {
            var popHub = this.PopHub;
            targetElem.addEventListener('click', (evt) => { handler(evt, popHub); });
        }
    }
    AssignOnClickEventFromCmd(command, handler) {
        if (command && command.Command !== MenuCommand.Unknown) {
            this.AssignOnClickEvent(command.ButtonSelector, handler);
        }
    }
    AssignOnChangeEvent(selector, handler) {
        this.Log().FuncStart(this.AssignOnChangeEvent.name, selector);
        var targetElem = document.querySelector(selector);
        if (!targetElem) {
            this.Log().Error(this.AssignOnClickEvent.name, 'No Id: ' + selector);
        }
        else {
            targetElem.onchange = () => { handler; };
        }
        this.Log().FuncEnd(this.AssignOnChangeEvent.name, selector);
    }
    AssignDblClickEvent(selector, handler) {
        var targetElem = document.querySelector(selector);
        if (!targetElem) {
            this.Log().Error(this.AssignOnClickEvent.name, 'No Id: ' + selector);
        }
        else {
            targetElem.ondblclick = (evt) => { handler(evt); };
        }
    }
    PopulateContentStateDivContent(contentState) {
        var targetCurrStateDiv = window.document.querySelector(PopConst.Const.Selector.HS.DivStateContent);
        var allStateText = this.lineBreak + 'Content State as of: ' + this.Helpers().UtilityHelp.MakeFriendlyDate(new Date());
        if (targetCurrStateDiv) {
            allStateText += this.lineBreak + 'Editor:';
            allStateText += this.indentedLineBreak + 'Active Ce: ';
            if (contentState.ActiveCe) {
                allStateText += contentState.ActiveCe.Id.AsShort;
                allStateText += this.indentedLineBreak + 'Active Node: ';
                if (contentState.ActiveCe.ActiveNode) {
                    allStateText += contentState.ActiveCe.ActiveNode.NodeFriendly + ' ' + contentState.ActiveCe.ActiveNode.NodeId.AsBracedGuid;
                }
                else {
                    allStateText += '{no active node in CE}';
                }
            }
            else {
                allStateText += '{no active CE}';
            }
            allStateText += this.lineBreak;
            allStateText += this.lineBreak + 'Snap Shots: ';
            allStateText += this.indentedLineBreak + 'Birthday: ' + contentState.SnapShotsMany.Birthday.toString();
            allStateText += this.indentedLineBreak + 'Total Snapshots: ' + contentState.SnapShotsMany.CurrentSnapShots.length;
            allStateText += this.indentedLineBreak + 'Favorite Snapshots: ' + contentState.SnapShotsMany.FavoriteCount;
            allStateText += this.indentedLineBreak + 'Plain Snapshots: ' + contentState.SnapShotsMany.PlainCount;
            allStateText += this.indentedLineBreak + 'Auto Snapshots: ' + contentState.SnapShotsMany.SnapShotsAutoCount;
            allStateText += this.lineBreak;
            allStateText += 'Last Request: ' + MsgFlag[contentState.LastReq];
            allStateText += this.lineBreak;
            allStateText += 'Error Stack (' + contentState.ErrorStack.length + '):';
            for (var idx = 0; idx < contentState.ErrorStack.length; idx++) {
                allStateText += this.indentedLineBreak + idx + ' : ' + contentState.ErrorStack[idx].ContainerFunc + ' ' + contentState.ErrorStack[idx].ErrorString;
            }
            targetCurrStateDiv.innerHTML = allStateText;
        }
    }
    PopulateContentStateDivPopUp() {
        var targetCurrStateDiv = window.document.querySelector(PopConst.Const.Selector.HS.DivStatePopUp);
        var allStateText = this.lineBreak + 'PopUp State as of: ' + this.Helpers().UtilityHelp.MakeFriendlyDate(new Date());
        if (targetCurrStateDiv) {
            allStateText += this.lineBreak + 'UI';
            allStateText += this.indentedLineBreak + 'Select Snapshot: ';
            if (this.CurrentMenuState.SelectSnapshotId) {
                allStateText += this.CurrentMenuState.SelectSnapshotId.AsShort;
            }
            else {
                allStateText += 'none selected';
            }
            allStateText += this.lineBreak + 'URL Parts';
            let urlParts = this.TabMan().CurrentTabData.UrlParts;
            allStateText += this.indentedLineBreak + 'Page Type: ' + StaticHelpers_StaticHelpers.WindowTypeAsString(urlParts.ScWindowType);
            allStateText += this.indentedLineBreak + 'Url Full (raw  ): ' + urlParts.OriginalRaw;
            allStateText += this.indentedLineBreak + 'Url Full (parts): ' + this.Helpers().UrlHelp.BuildFullUrlFromParts(urlParts).AbsUrl;
            allStateText += this.indentedLineBreak + 'Protocol: ' + urlParts.Protocol;
            allStateText += this.indentedLineBreak + 'Host & Port: ' + urlParts.HostAndPort;
            allStateText += this.indentedLineBreak + 'File Path: ' + urlParts.FilePath;
            allStateText += this.lineBreak + 'Parameters: ';
            if (urlParts.Parameters) {
                for (var idx = 0; idx < urlParts.Parameters.length; idx++) {
                    allStateText += this.indentedLineBreak + this.indentedLineBreak + urlParts.Parameters[idx].Key;
                    allStateText += '&nbsp; : &nbsp;';
                    allStateText += urlParts.Parameters[idx].value || '';
                }
            }
            targetCurrStateDiv.innerHTML = allStateText;
        }
    }
    PopulateState(contentState) {
        return __awaiter(this, void 0, void 0, function* () {
            this.Log().FuncStart(this.PopulateState.name);
            this.Log().DebugIDataBrowserTab(this.TabMan().CurrentTabData);
            this.CurrContentState = contentState;
            if (this.Log().IsNotNullOrUndefinedBool('state', contentState)) {
                this.UiMan().PopulateStateOfSnapShotSelect(contentState.SnapShotsMany.CurrentSnapShots);
                this.PopulateContentStateDivPopUp();
                this.PopulateContentStateDivContent(contentState);
            }
            this.Log().FuncEnd(this.PopulateState.name);
        });
    }
    PopulateSnapShotsAuto() {
    }
    PopulateSnapShotsNotAuto() {
    }
    CleanExistingSelection(targetSel) {
        var optGroup = targetSel.querySelector('[id=' + PopConst.Const.ElemId.HS.SelectHeaderAutoTitle + ']');
        if (optGroup) {
            optGroup.remove();
        }
        optGroup = targetSel.querySelector('[id=' + PopConst.Const.ElemId.HS.SelectHeaderAuto + ']');
        if (optGroup) {
            optGroup.remove();
        }
        optGroup = targetSel.querySelector('[id=' + PopConst.Const.ElemId.HS.SelectHeaderFavorite + ']');
        if (optGroup) {
            optGroup.remove();
        }
        optGroup = targetSel.querySelector('[id=' + PopConst.Const.ElemId.HS.SelectHeaderFavoriteTitle + ']');
        if (optGroup) {
            optGroup.remove();
        }
        targetSel.options.length = 0;
    }
    WriteHeaders(targetSel) {
        var toReturn = {
            Auto: null,
            Favorite: null,
            AutoTitle: null,
            FavoriteTitle: null,
        };
        toReturn.Auto = window.document.createElement('optgroup');
        toReturn.Auto.label = this.Helpers().UtilityHelp.SelectHeaderStr('');
        toReturn.Auto.id = PopConst.Const.ElemId.HS.SelectHeaderAuto;
        toReturn.AutoTitle = window.document.createElement('optgroup');
        toReturn.AutoTitle.label = 'Auto Snap Shots';
        toReturn.AutoTitle.id = PopConst.Const.ElemId.HS.SelectHeaderAutoTitle;
        toReturn.AutoTitle.classList.add('title');
        toReturn.Favorite = window.document.createElement('optgroup');
        toReturn.Favorite.label = this.Helpers().UtilityHelp.SelectHeaderStr('');
        toReturn.Favorite.id = PopConst.Const.ElemId.HS.SelectHeaderFavorite;
        toReturn.FavoriteTitle = window.document.createElement('optgroup');
        toReturn.FavoriteTitle.label = 'Tyical Snap Shots';
        toReturn.FavoriteTitle.id = PopConst.Const.ElemId.HS.SelectHeaderFavoriteTitle;
        toReturn.FavoriteTitle.classList.add('title');
        return toReturn;
    }
    PopulateStateOfSnapShotSelect(snapShots) {
        this.Log().FuncStart(this.PopulateStateOfSnapShotSelect.name);
        if (snapShots) {
            var targetSel = this.__getSelectElem();
            if (targetSel) {
                this.CleanExistingSelection(targetSel);
                var headers = this.WriteHeaders(targetSel);
                if (snapShots && snapShots.length > 0) {
                    this.Log().Log('targetSel.options.length : ' + targetSel.options.length);
                    for (var idx = 0; idx < snapShots.length; idx++) {
                        var data = snapShots[idx];
                        var el = window.document.createElement('option');
                        el.innerHTML = this.PopHub.Helpers.UtilityHelp.TimeNicknameFavStr(data);
                        if (data.Flavor === SnapShotFlavor.Favorite) {
                            el.classList.add('favorite');
                        }
                        el.value = data.Id.AsString;
                        if (data.Id === this.CurrentMenuState.SelectSnapshotId) {
                            el.selected = true;
                        }
                        if (data.Flavor === SnapShotFlavor.Autosave) {
                            headers.Auto.appendChild(el);
                        }
                        else {
                            headers.Favorite.appendChild(el);
                        }
                    }
                }
                targetSel.appendChild(headers.FavoriteTitle);
                targetSel.appendChild(headers.Favorite);
                targetSel.appendChild(headers.AutoTitle);
                targetSel.appendChild(headers.Auto);
                if (!this.CurrentMenuState.SelectSnapshotId || this.CurrentMenuState.SelectSnapshotId === this.Helpers().GuidHelp.EmptyGuid()) {
                    targetSel.selectedIndex = 0;
                }
            }
        }
        this.Log().FuncEnd(this.PopulateStateOfSnapShotSelect.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/SharedConst.js
class SharedConst {
}
SharedConst.Const = {
    IterHelper: {
        GrowthPerIteration: 0.5,
        MaxCount: {
            Default: 10,
            OverridePublishing: 15,
        },
        Timeouts: {
            Max: 10000,
            Default: 100,
        },
    },
    Settings: {
        Defaults: {
            LogToConsole: true,
        }
    },
    Regex: {
        ContentEditor: /Content.*?Editor/ig,
        CleanGuid: /{|-|}/ig,
        NbSp: /&nbsp;/ig,
        QueryStrSeparatorQuest: /\?/gi,
        PageType: {
            Desktop: /.*default.aspx/ig,
            Edit: /sc_itemid=.*sc_mode=edit/ig,
            Normal: /sc_itemid=.*sc_mode=normal/ig,
            Preview: /sc_itemid=.*sc_mode=preview/ig,
        },
    },
    UrlSuffix: {
        Desktop: '/sitecore/shell/default.aspx',
        Login: '/sitecore/login',
        LaunchPad: '/client/applications/launchpad',
        CE: '/sitecore/shell/Applications/Content Editor.aspx?sc_bw=1',
        None: '/',
    },
};

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/LoggerBase.js




class LoggerBase_LoggerBase {
    constructor() {
        this.LogHasBeenInit = false;
        this.ErrorStack = [];
        this.LogPreInitBuffer = [];
        this.__debugTextChangedCallbacks = [];
        this.debugPrefix = '\t\t';
        this.__callDepth = -1;
        console.log('default: ' + SharedConst.Const.Settings.Defaults.LogToConsole);
        this.LogToConsoleEnabled = SharedConst.Const.Settings.Defaults.LogToConsole;
        this.LogHasBeenInit = false;
        console.log('(ctor) Logger log to console enabled: ' + this.LogToConsoleEnabled);
    }
    Init(val) {
        this.LogToConsoleEnabled = val;
        this.LogHasBeenInit = true;
        if (this.LogToConsoleEnabled) {
            var iterCheckMax = 1000;
            while (this.LogPreInitBuffer.length > 0 && iterCheckMax > 0) {
                iterCheckMax--;
                this.Log(this.LogPreInitBuffer.shift());
            }
        }
        console.log('(init) Logger log to console enabled: ' + this.LogToConsoleEnabled);
    }
    SetEnabled(newValue) {
        this.LogToConsoleEnabled = newValue;
        console.log('Logging set to: ' + newValue);
    }
    EnabledStatus() {
        return this.LogToConsoleEnabled;
    }
    DebugIdataPopUpSettings(toReturn) {
        this.LogVal('Settings', JSON.stringify(toReturn));
    }
    DebugWindow(window) {
        if (this.IsNotNullOrUndefinedBool('window', window)) {
        }
    }
    IsNotNullOrUndefinedBool(title, subject) {
        var toReturn = false;
        if (subject) {
            if ((typeof subject) === 'undefined') {
                this.LogVal(title + ' Is Not Undefined', '!!! false !!!');
            }
            else {
                this.LogVal(title + ' Is Not Null', 'true');
                toReturn = true;
            }
        }
        else {
            this.LogVal(title + ' Is Not Null', '!!! false !!!');
        }
        return toReturn;
    }
    DebugIGuid(id) {
        if (this.IsNotNullOrUndefinedBool('IGuid', id)) {
            this.LogVal('asShort', id.AsShort);
            this.LogVal('asString', id.AsString);
        }
    }
    DebugIDataOneDoc(dataOneDoc) {
        this.FuncStart(this.DebugIDataOneDoc.name);
        this.Log('');
        this.Log(this.debugPrefix + this.DebugIDataOneDoc.name);
        if (dataOneDoc) {
            this.Log(this.debugPrefix + 'dataOneDoc: \t' + this.IsNullOrUndefined(dataOneDoc));
            this.Log(this.debugPrefix + 'dataOneDoc.XyyzId.asShort: \t' + this.IsNullOrUndefined(dataOneDoc.DocId.AsShort));
            this.Log(this.debugPrefix + 'dataOneDoc.Document: \t' + this.IsNullOrUndefined(dataOneDoc.ContentDoc));
            if (dataOneDoc.ContentDoc) {
                this.LogVal(this.debugPrefix + 'dataOneDoc.Document.readyState:', dataOneDoc.ContentDoc.readyState);
                if (dataOneDoc.ContentDoc.location) {
                    this.LogVal(this.debugPrefix + 'targetDoc.location.href', dataOneDoc.ContentDoc.location.href);
                }
                else {
                    this.Log(this.debugPrefix + 'dataOneDoc.Document.location - does not exist');
                }
            }
            else {
                this.Log(this.debugPrefix + 'dataOneDoc.Document - does not exist');
            }
        }
        else {
            this.Error(this.DebugIDataOneDoc.name, 'no targetDoc');
        }
        this.Log('');
    }
    AddDebugTextChangedCallback(caller, callback) {
        this.__debugTextChangedCallbacks.push({
            Caller: caller,
            Func: callback
        });
    }
    HndlrClearDebugText(self, verify = false) {
        this.FuncStart(this.HndlrClearDebugText.name);
        var proceed = true;
        if (verify) {
            proceed = confirm('Clear Debug TextArea ?');
        }
        if (proceed) {
            var newText = '--- Debug Text Reset ---';
            self.__triggerAllDebugTextChangedCallbacks({
                NewText: newText,
                Append: false
            });
        }
        this.FuncEnd(this.HndlrClearDebugText.name);
    }
    MarkerA() {
        this.__markerRaw('A');
    }
    MarkerB() {
        this.__markerRaw('B');
    }
    MarkerC() {
        this.__markerRaw('C');
    }
    MarkerD() {
        this.__markerRaw('D');
    }
    MarkerE() { this.__markerRaw('E'); }
    MarkerF() { this.__markerRaw('F'); }
    __markerRaw(marker) {
        this.Log('Marker ' + marker);
    }
    LogAsJsonPretty(texValName, jsonObj) {
        this.LogVal(texValName, JSON.stringify(jsonObj, null, 1));
    }
    LogVal(textValName, textVal) {
        if (typeof textVal === 'undefined') {
            textVal = '{undefined}';
        }
        else if (textVal === null) {
            textVal = '{null}';
        }
        else {
            var asGuid = textVal;
            if (asGuid.Type === 'IGuid') {
                textVal = asGuid.AsString;
            }
        }
        textVal = textVal.toString();
        textValName = StaticHelpers_StaticHelpers.BufferString(textValName.toString(), 50, BufferChar.space, BufferDirection.right);
        const debugPrefix = '  ~~~  ';
        this.Log(debugPrefix + textValName + ' : ' + textVal);
    }
    Log(text, optionalValue = '', hasPrefix = false) {
        if (this.LogToConsoleEnabled || !this.LogHasBeenInit) {
            var indent = '  ';
            for (var idx = 0; idx < this.__callDepth; idx++) {
                text = indent + text;
            }
            var prefixLength = 3;
            if (!hasPrefix) {
                for (var idx = 0; idx < prefixLength; idx++) {
                    text = ' ' + text;
                }
            }
            this.__triggerAllDebugTextChangedCallbacks({
                NewText: text,
                Append: true
            });
            if (this.LogToConsoleEnabled) {
                console.log(text);
            }
            else if (!this.LogHasBeenInit) {
                this.LogPreInitBuffer.push(text);
            }
        }
    }
    __triggerAllDebugTextChangedCallbacks(data) {
        for (var idx = 0; idx < this.__debugTextChangedCallbacks.length; idx++) {
            var oneCallback = this.__debugTextChangedCallbacks[idx];
            oneCallback.Func(oneCallback.Caller, data);
        }
    }
    CtorName(ctorName) {
        this.Log('Constructor: ' + ctorName);
    }
    FuncStart(textOrFunc, optionalValue) {
        textOrFunc = 's' + ' ' + this.__callDepth + ') ' + textOrFunc;
        if (!optionalValue) {
            optionalValue = '';
        }
        else {
            optionalValue = optionalValue.toString();
        }
        if (optionalValue.length > 0) {
            textOrFunc = textOrFunc + ' : ' + optionalValue;
        }
        this.Log(textOrFunc, '', true);
        this.__callDepth++;
        if (this.__callDepth > 10) {
            this.__callDepth = 10;
        }
    }
    FuncEnd(text, optionalValueInput) {
        this.__callDepth--;
        if (this.__callDepth < 0) {
            this.__callDepth = 0;
        }
        text = 'e' + ' ' + this.__callDepth + ') ' + text;
        if (!optionalValueInput) {
            optionalValueInput = '';
        }
        var optionalValue = optionalValueInput.toString();
        if (optionalValue.length > 0) {
            text = text + ' : ' + optionalValue;
        }
        this.Log(text, optionalValue, true);
    }
    Error(container, text) {
        if (!container) {
            container = 'unknown';
        }
        if (!text) {
            text = 'unknown';
        }
        this.ErrorStack.push({
            ContainerFunc: container,
            ErrorString: text
        });
        this.Log('');
        this.Log('\t\t** ERROR ** ' + container);
        this.Log('');
        this.Log('\t\t  ' + text);
        this.Log('');
        this.Log('\t\t** ERROR ** ' + container);
        this.Log('');
    }
    NotNullCheck(title, value) {
        if (typeof value === 'undefined') {
            this.LogVal(title, 'Is Undefined');
        }
        else if (!value) {
            this.LogVal(title, 'Is Null');
        }
        else {
            this.LogVal(title, 'Is Not Null');
        }
    }
    IsNullOrUndefined(subject) {
        var toReturn = '{unknown}';
        if (subject) {
            if ((typeof subject) === 'undefined') {
                toReturn = 'Is Undefined';
            }
            else {
                toReturn = 'Not Null';
            }
        }
        else {
            toReturn = 'Is Null';
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Classes/LoggerPopUp.js


class LoggerPopUp_LoggerPopUp extends LoggerBase_LoggerBase {
    DebugIDataBrowserTab(browserWindow) {
        if (this.IsNotNullOrUndefinedBool('IDataBrowserWindow', browserWindow)) {
            this.LogVal('WindowType', scWindowType[browserWindow.UrlParts.ScWindowType]);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Classes/CommonEvents.js
var CommonEvents_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class CommonEvents {
    constructor(hub) {
        this.PopHub = hub;
    }
    __cleardebugText() {
        this.PopHub.Log.HndlrClearDebugText(this.PopHub.Log);
    }
    GoContentCommand(msgPlayload, targetTab = null) {
        return new Promise((resolve, reject) => CommonEvents_awaiter(this, void 0, void 0, function* () {
            this.PopHub.Log.FuncStart(this.GoContentCommand.name);
            this.__cleardebugText();
            this.PopHub.UiMan.ClearCancelFlag();
            yield this.PopHub.PopMsgMan.SendMessageToContentTab(msgPlayload, targetTab);
            this.PopHub.Log.FuncEnd(this.GoContentCommand.name);
            resolve();
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/PromiseResult.js
class PromiseResult {
    constructor(nickname, logger) {
        this.prefix = 'Promise Successful? -> ';
        this.Success = false;
        this.NickName = nickname;
        this.RejectReasonArPvt = [];
        this.Log = logger;
    }
    WasSuccessful() {
        return this.Success;
    }
    MarkSuccessful() {
        this.Success = true;
        if (this.Log) {
            this.Log.LogVal(this.prefix + this.NickName, this.Success);
        }
        else {
            console.log('no logger success');
        }
    }
    MarkFailed(ex) {
        if (ex) {
            ex = ex.toString();
        }
        else {
            ex = '{no fail message}';
        }
        this.RejectReasons += ', ' + ex;
        this.Success = false;
        if (this.Log) {
            this.Log.Error(this.prefix + this.NickName, this.Success + '  err: ' + ex);
        }
        else {
            console.log('no logger fail ' + ex);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Classes/HandlersExternal.js
var HandlersExternal_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class HandlersExternal_HandlersExternal extends CommonEvents {
    AddCETab(evt, popHub) {
        return HandlersExternal_awaiter(this, void 0, void 0, function* () {
            popHub.EventMan.Handlers.External.GoContentCommand(new MsgFromPopUp_MsgFromPopUp(MsgFlag.ReqAddCETab, popHub));
            popHub.UiMan.OnSuccessfullCommand();
            ;
        });
    }
    PutAdminB(evt, popHub) {
        return HandlersExternal_awaiter(this, void 0, void 0, function* () {
            popHub.EventMan.Handlers.External.GoContentCommand(new MsgFromPopUp_MsgFromPopUp(MsgFlag.ReqAdminB, popHub));
        });
    }
    QuickPublish(evt, popHub) {
        return HandlersExternal_awaiter(this, void 0, void 0, function* () {
            yield popHub.EventMan.Handlers.External.GoContentCommand(new MsgFromPopUp_MsgFromPopUp(MsgFlag.ReqQuickPublish, popHub))
                .then(popHub.UiMan.OnSuccessfullCommand)
                .catch((ex) => popHub.Log.Error(popHub.EventMan.Handlers.External.QuickPublish.name, ex));
        });
    }
    HndlrSnapShotCreate(evt, popHub) {
        return HandlersExternal_awaiter(this, void 0, void 0, function* () {
            var msg = new MsgFromPopUp_MsgFromPopUp(MsgFlag.ReqTakeSnapShot, popHub);
            msg.Data.SnapShotSettings.Flavor = SnapShotFlavor.Manual;
            popHub.EventMan.Handlers.External.GoContentCommand(msg);
        });
    }
    HndlrSnapShotRestore(evt, popHub) {
        return HandlersExternal_awaiter(this, void 0, void 0, function* () {
            popHub.Log.FuncStart(this.HndlrSnapShotRestore.name);
            yield popHub.EventMan.Handlers.External.CreateNewWindowIfRequired(evt, popHub, popHub.Helpers.UrlHelp.BuildFullUrlFromParts(popHub.TabMan.CurrentTabData.UrlParts))
                .then((newTab) => {
                var msg = new MsgFromPopUp_MsgFromPopUp(MsgFlag.ReqRestoreClick, popHub);
                msg.Data.IdOfSelect = popHub.UiMan.CurrentMenuState.SelectSnapshotId;
                this.GoContentCommand(msg, newTab);
            })
                .catch((ex) => {
                popHub.Log.Error(this.HndlrSnapShotRestore.name, ex.toString());
            });
            popHub.Log.FuncEnd(this.HndlrSnapShotRestore.name);
        });
    }
    __hndlrCancelOperation(evt, popHub) {
        popHub.UiMan.SetCancelFlag();
    }
    MarkFavorite(evt, popHub) {
        popHub.PopMsgMan.SendMessageToContentTab(new MsgFromPopUp_MsgFromPopUp(MsgFlag.ReqMarkFavorite, popHub));
    }
    __DrawStorage(evt, popHub) {
        popHub.PopMsgMan.FromAtticDrawStorage();
    }
    HndlrSnapShotRemove(evt, popHub) {
        var msg = new MsgFromPopUp_MsgFromPopUp(MsgFlag.RemoveFromStorage, popHub);
        this.GoContentCommand(msg);
    }
    CreateNewWindowIfRequired(evt, popHub, tabUrl) {
        return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
            popHub.Log.FuncStart(this.CreateNewWindowIfRequired.name, 'ctrl key? ' + evt.ctrlKey.toString() + ' ' + tabUrl);
            let result = new PromiseResult(this.CreateNewWindowIfRequired.name, popHub.Log);
            let toReturn;
            if (!evt.ctrlKey) {
                yield popHub.BrowserMan.CreateNewTab(tabUrl)
                    .then((newTab) => {
                    popHub.Log.MarkerA();
                    toReturn = newTab;
                });
                popHub.Log.DebugIDataBrowserTab(toReturn);
                result.MarkSuccessful();
            }
            else {
                toReturn = popHub.TabMan.CurrentTabData;
                result.MarkSuccessful();
            }
            popHub.Log.FuncEnd(this.CreateNewWindowIfRequired.name);
            if (result.WasSuccessful) {
                resolve(toReturn);
            }
            else {
                reject(result.RejectReasons);
            }
        }));
    }
    HndlrPresentationDetails(evt, popHub) {
        popHub.Log.Error(this.HndlrPresentationDetails.name, 'to do');
    }
    HndlrSnapShotUpdateNickName(evt, popHub) {
        var msg = new MsgFromPopUp_MsgFromPopUp(MsgFlag.ReqUpdateNickName, popHub);
        msg.Data.IdOfSelect = popHub.UiMan.CurrentMenuState.SelectSnapshotId;
        msg.Data.SnapShotSettings.SnapShotNewNickname = popHub.UiMan.GetValueInNickname();
        this.GoContentCommand(msg);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Classes/HandlersInternal.js
var HandlersInternal_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class HandlersInternal_HandlersInternal extends CommonEvents {
    HndlrSelectChange(evt, popHub) {
        this.PopHub.UiMan.SelectChanged();
    }
    __cleardebugTextWithConfirm(evt, popHub) {
        popHub.Log.HndlrClearDebugText(popHub.Log, true);
    }
    GenericSettingChanged() {
    }
    CloseWindow(evt, popHub) {
        window.close();
    }
    GoCeInternal(evt, popHub) {
        return HandlersInternal_awaiter(this, void 0, void 0, function* () {
            popHub.LocMan.ChangeLocationSwitchBoard(scWindowType.ContentEditor);
        });
    }
    GoDesktopInternal(evt, popHub) {
        popHub.LocMan.ChangeLocationSwitchBoard(scWindowType.Desktop);
    }
    SetScModeInternal(evt, popHub, parameters) {
        return HandlersInternal_awaiter(this, void 0, void 0, function* () {
            let newMode = parameters[0];
            yield popHub.LocMan.SetScMode(newMode)
                .then(() => popHub.UiMan.OnSuccessfullCommand());
        });
    }
    ToggleAccordian(evt, popHub, settingKey) {
        popHub.Log.FuncStart(this.ToggleAccordian.name);
        var srcElem = (evt.target || evt.srcElement);
        var foundContentSib = popHub.UiMan.GetAccordianContentElem(srcElem);
        if (foundContentSib) {
            var oldValue = popHub.Helpers.SettingsHelp.GetByKey(settingKey, popHub.SettingsMan.AllSettings.SettingsAr);
            if (oldValue) {
                var oldValueBool = oldValue.ValueAsObj;
                var newVal = !oldValue;
                popHub.UiMan.SetAccordianClass(foundContentSib, newVal);
            }
            popHub.SettingsMan.SetByKey(settingKey, newVal);
        }
        else {
            popHub.Log.Error(this.ToggleAccordian.name, 'did not find sib');
        }
        popHub.Log.FuncEnd(this.ToggleAccordian.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/CommandButtonEvents.js
var CommandButtonEvents;
(function (CommandButtonEvents) {
    CommandButtonEvents[CommandButtonEvents["OnClick"] = 0] = "OnClick";
})(CommandButtonEvents || (CommandButtonEvents = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Classes/AllCommands.js




class AllCommands_AllCommands {
    static BuildAllCommands(popHub, handlers) {
        let toReturn = [
            {
                Command: MenuCommand.CloseWindow,
                ButtonSelector: PopConst.Const.Selector.Btn.WindowClose,
                VisibilityControllers: [],
                Events: [{
                        Handler: handlers.Internal.CloseWindow,
                        Event: CommandButtonEvents.OnClick,
                        ParameterData: [],
                    }]
            },
            {
                Command: MenuCommand.AddCeTab,
                ButtonSelector: PopConst.Const.ElemId.HS.Btn.BigRed,
                VisibilityControllers: [VisibilityType.Desktop],
                Events: [{
                        Event: CommandButtonEvents.OnClick,
                        Handler: popHub.EventMan.Handlers.External.AddCETab,
                        ParameterData: [],
                    }]
            },
            {
                Command: MenuCommand.GoScModeEdit,
                ButtonSelector: PopConst.Const.ElemId.HS.Btn.ModeEdit,
                VisibilityControllers: [VisibilityType.ActiveCeNode],
                Events: [{
                        Event: CommandButtonEvents.OnClick,
                        Handler: popHub.EventMan.Handlers.Internal.SetScModeInternal,
                        ParameterData: [PopConst.Const.ScMode.edit],
                    }]
            },
            {
                Command: MenuCommand.ScModeNormal,
                ButtonSelector: PopConst.Const.ElemId.HS.Btn.ModeNorm,
                VisibilityControllers: [VisibilityType.ActiveCeNode],
                Events: [{
                        Event: CommandButtonEvents.OnClick,
                        Handler: popHub.EventMan.Handlers.Internal.SetScModeInternal,
                        ParameterData: [PopConst.Const.ScMode.normal],
                    }]
            },
            {
                Command: MenuCommand.ScModePrev,
                ButtonSelector: PopConst.Const.ElemId.HS.Btn.ModePrev,
                VisibilityControllers: [VisibilityType.ActiveCeNode],
                Events: [{
                        Event: CommandButtonEvents.OnClick,
                        Handler: popHub.EventMan.Handlers.Internal.SetScModeInternal,
                        ParameterData: [PopConst.Const.ScMode.preview],
                    }]
            },
            {
                Command: MenuCommand.UpdateNickname,
                ButtonSelector: PopConst.Const.ElemId.HS.Btn.UpdateNicknameB,
                VisibilityControllers: [VisibilityType.SnapShotSelected],
                Events: [{
                        Event: CommandButtonEvents.OnClick,
                        Handler: popHub.EventMan.Handlers.External.HndlrSnapShotUpdateNickName,
                        ParameterData: [],
                    }]
            },
            {
                Command: MenuCommand.PresentationDetails,
                ButtonSelector: PopConst.Const.ElemId.HS.Btn.PresentationDetails,
                VisibilityControllers: [VisibilityType.ActiveCeNode],
                Events: [{
                        Event: CommandButtonEvents.OnClick,
                        Handler: popHub.EventMan.Handlers.External.HndlrSnapShotUpdateNickName,
                        ParameterData: [],
                    }]
            },
            {
                Command: MenuCommand.PutAdminB,
                ButtonSelector: PopConst.Const.ElemId.HS.Btn.AdminB,
                VisibilityControllers: [VisibilityType.LoginPage],
                Events: [{
                        Event: CommandButtonEvents.OnClick,
                        Handler: popHub.EventMan.Handlers.External.PutAdminB,
                        ParameterData: [],
                    }]
            },
            {
                Command: MenuCommand.GoContentEditor,
                ButtonSelector: PopConst.Const.ElemId.HS.Btn.GoCE,
                VisibilityControllers: [VisibilityType.NotLogin],
                Events: [{
                        Event: CommandButtonEvents.OnClick,
                        Handler: popHub.EventMan.Handlers.Internal.GoCeInternal,
                        ParameterData: [],
                    }]
            },
            {
                Command: MenuCommand.QuickPublish,
                ButtonSelector: PopConst.Const.ElemId.HS.Btn.QuickPublish,
                VisibilityControllers: [VisibilityType.ActiveCeNode],
                Events: [{
                        Event: CommandButtonEvents.OnClick,
                        Handler: popHub.EventMan.Handlers.External.QuickPublish,
                        ParameterData: [],
                    }]
            },
            {
                Command: MenuCommand.GoDesktop,
                ButtonSelector: PopConst.Const.ElemId.HS.Btn.Desktop,
                VisibilityControllers: [VisibilityType.NotLogin],
                Events: [{
                        Event: CommandButtonEvents.OnClick,
                        Handler: popHub.EventMan.Handlers.Internal.GoDesktopInternal,
                        ParameterData: [],
                    }]
            },
            {
                Command: MenuCommand.TakeSnapShot,
                ButtonSelector: PopConst.Const.ElemId.HS.Btn.TakeSnapshot,
                VisibilityControllers: [VisibilityType.SnapShotable],
                Events: [{
                        Event: CommandButtonEvents.OnClick,
                        Handler: popHub.EventMan.Handlers.External.HndlrSnapShotCreate,
                        ParameterData: [],
                    }]
            },
            {
                Command: MenuCommand.MarkFavorite,
                ButtonSelector: PopConst.Const.ElemId.HS.Btn.MarkFavorite,
                VisibilityControllers: [VisibilityType.SnapShotSelected],
                Events: [{
                        Handler: popHub.EventMan.Handlers.External.MarkFavorite,
                        Event: null,
                        ParameterData: [],
                    }]
            },
            {
                Command: MenuCommand.Cancel,
                ButtonSelector: PopConst.Const.ElemId.HS.Btn.HsCancel,
                VisibilityControllers: [VisibilityType.CommandIsRunning],
                Events: [{
                        Event: CommandButtonEvents.OnClick,
                        Handler: popHub.EventMan.Handlers.External.__hndlrCancelOperation,
                        ParameterData: [],
                    }]
            },
            {
                Command: MenuCommand.Remove,
                ButtonSelector: PopConst.Const.ElemId.HS.Btn.HsRemoveFromStorage,
                VisibilityControllers: [VisibilityType.SnapShotSelected],
                Events: [{
                        Event: CommandButtonEvents.OnClick,
                        Handler: popHub.EventMan.Handlers.External.HndlrSnapShotRemove,
                        ParameterData: [],
                    }]
            },
            {
                Command: MenuCommand.RestoreState,
                ButtonSelector: PopConst.Const.ElemId.HS.Btn.HsRestoreWindowState,
                VisibilityControllers: [VisibilityType.SnapShotSelected],
                Events: [{
                        Event: CommandButtonEvents.OnClick,
                        Handler: popHub.EventMan.Handlers.External.HndlrSnapShotRestore,
                        ParameterData: [],
                    }]
            },
            {
                Command: MenuCommand.DrawStorage,
                ButtonSelector: PopConst.Const.ElemId.HS.Btn.HsDrawStorage,
                VisibilityControllers: [],
                Events: [{
                        Event: CommandButtonEvents.OnClick,
                        Handler: popHub.EventMan.Handlers.External.__DrawStorage,
                        ParameterData: [],
                    }]
            },
        ];
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/Handlers.js
class Handlers {
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/EventManager.js









class EventManager_EventManager extends PopUpManagerBase {
    constructor(popHub) {
        super(popHub);
        this.Handlers = new Handlers();
        this.Handlers.External = new HandlersExternal_HandlersExternal(popHub);
        this.Handlers.Internal = new HandlersInternal_HandlersInternal(popHub);
    }
    Init() {
        this.Log().FuncStart(EventManager_EventManager.name + this.Init.name);
        this.AllMenuCommands = AllCommands_AllCommands.BuildAllCommands(this.PopHub, this.Handlers);
        this.__wireMenuButtons();
        this.WireAllGenericSettings();
        this.Log().FuncEnd(EventManager_EventManager.name + this.Init.name);
    }
    WireAllGenericSettings() {
        let genericSettings = this.SettingsMan().AllSettings.SettingsAr;
        for (var idx = 0; idx < genericSettings.length; idx++) {
            let oneSetting = genericSettings[idx];
            let uiElem = window.document.querySelector(oneSetting.UiSelector);
            if (uiElem) {
                let uiLabel = window.document.querySelector(oneSetting.UiSelector.replace('id', 'for'));
                if (uiLabel) {
                    uiLabel.innerHTML = oneSetting.Friendly;
                }
                else {
                    uiElem.innerHTML = oneSetting.Friendly;
                }
                if (oneSetting.DataType === SettingType.BoolCheckBox) {
                    let self = this;
                    uiElem.addEventListener('change', (evt) => {
                        self.SettingsMan().SettingChanged(oneSetting.SettingKey, evt.target.checked);
                    });
                }
                else if (oneSetting.DataType === SettingType.Accordian) {
                    let self = this;
                    uiElem.addEventListener('click', (evt) => {
                        self.Handlers.Internal.ToggleAccordian(evt, this.PopHub, oneSetting.SettingKey);
                    });
                }
            }
            else {
                this.Log().Error(this.WireAllGenericSettings.name, 'ui generic element not found');
            }
        }
    }
    __wireMenuButtons() {
        this.Log().FuncStart(this.__wireMenuButtons.name);
        this.UiMan().AssignDblClickEvent(PopConst.Const.Selector.HS.SelStateSnapShot, (evt) => { this.Handlers.External.HndlrSnapShotRestore(evt, this.PopHub); });
        this.UiMan().AssignDblClickEvent(PopConst.Const.Selector.HS.TaDebug, (evt) => { this.Handlers.Internal.__cleardebugTextWithConfirm(evt, this.PopHub); });
        this.UiMan().AssignOnChangeEvent(PopConst.Const.Selector.HS.SelStateSnapShot, (evt) => { this.Handlers.Internal.HndlrSelectChange(evt, this.PopHub); });
        for (var idx = 0; idx < this.AllMenuCommands.length; idx++) {
            let oneCommand = this.AllMenuCommands[idx];
            for (var jdx = 0; jdx < oneCommand.Events.length; jdx++) {
                let oneEvent = oneCommand.Events[jdx];
                if (oneEvent.Event === CommandButtonEvents.OnClick) {
                    var targetElem = this.UiMan().GetButtonByIdOrSelector(oneCommand.ButtonSelector);
                    if (targetElem) {
                        var popHub = this.PopHub;
                        targetElem.addEventListener('click', (evt) => { oneEvent.Handler(evt, this.PopHub, oneEvent.ParameterData); });
                    }
                    else {
                        this.Log().Error(this.__wireMenuButtons.name, 'No Id: ' + oneCommand.ButtonSelector);
                    }
                }
            }
        }
        this.Log().FuncEnd(this.__wireMenuButtons.name);
    }
    GetCommandByKey(menuCommand) {
        var toReturn;
        for (var idx = 0; idx < this.AllMenuCommands.length; idx++) {
            var candidate = this.AllMenuCommands[idx];
            if (candidate.Command === menuCommand) {
                toReturn = candidate;
                this.Log().LogVal('Command', MenuCommand[toReturn.Command]);
                break;
            }
        }
        if (!toReturn) {
            this.Log().Error(this.GetCommandByKey.name, 'matching command not found ' + MenuCommand[menuCommand]);
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/IterationHelper.js


class IterationHelper_IterationHelper extends HelperBase {
    constructor(helperHub, nickname, maxIterations = null) {
        super(helperHub);
        this.IsExhaustedMsg = 'Iteration helper exhausted';
        if (!maxIterations) {
            maxIterations = SharedConst.Const.IterHelper.MaxCount.Default;
        }
        this.__maxIterations = maxIterations;
        this.__currentIteration = maxIterations;
        this.__timeout = SharedConst.Const.IterHelper.Timeouts.Default;
        this.__nickName = nickname;
        this.IsExhausted = false;
    }
    DecrementAndKeepGoing() {
        var toReturn = false;
        if (this.__currentIteration > 0) {
            this.__currentIteration -= 1;
            this.__timeout += this.__timeout * SharedConst.Const.IterHelper.GrowthPerIteration;
            if (this.__timeout > SharedConst.Const.IterHelper.Timeouts.Max) {
                this.__timeout = SharedConst.Const.IterHelper.Timeouts.Max;
            }
            this.Log.Log('DecrementAndKeepGoing: ' + this.__nickName + ' ' + this.__currentIteration + ':' + this.__maxIterations + ' | timeout: ' + this.__timeout);
            toReturn = true;
        }
        else {
            this.IsExhausted = true;
            this.NotifyExhausted();
            toReturn = false;
        }
        return toReturn;
    }
    NotifyExhausted() {
        this.Log.Log('Iteration: ' + this.__nickName + ' counter exhausted ' + this.__currentIteration + ':' + this.__maxIterations);
    }
    WaitAndThen(timeoutFunction) {
        this.Log.FuncStart(this.WaitAndThen.name, this.__nickName + ' ' + timeoutFunction.name);
        var self = this;
        setTimeout(timeoutFunction(), self.__timeout);
        this.Log.FuncEnd(this.WaitAndThen.name, this.__nickName);
    }
    Wait() {
        if (!this.OperationCancelled) {
            return new Promise((resolve) => {
                setTimeout(resolve, this.__timeout);
            });
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/PopUpMessagesManager.js
var PopUpMessagesManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






class PopUpMessagesManager_PopUpMessagesManager extends PopUpManagerBase {
    Init() {
        this.ScheduleAutoSaveSnapShot();
        this.ScheduleAutoLogin();
    }
    ReceiveResponseHndlr(response) {
        this.Log().FuncStart(this.ReceiveResponseHndlr.name, StaticHelpers_StaticHelpers.MsgFlagAsString(response.MsgFlag));
        if (response) {
            this.UiMan().UpdateMsgStatusStack('Response Received: ' + StaticHelpers_StaticHelpers.MsgFlagAsString(response.MsgFlag));
            var asMsgFromContent = response;
            if (asMsgFromContent) {
                this.LastKnownContentState = response.ContentState;
                this.Log().Log(StaticHelpers_StaticHelpers.MsgFlagAsString(asMsgFromContent.MsgFlag));
                this.UiMan().RefreshUiFromCache();
                switch (response.MsgFlag) {
                    case MsgFlag.RespCurState:
                        break;
                    case MsgFlag.RespTaskSuccessful:
                        break;
                    case MsgFlag.RespError:
                        this.Log().Error(this.ReceiveResponseHndlr.name, response.ContentState.ErrorStack);
                        break;
                    default:
                        this.Log().LogVal('Unrecognized MsgFlag', StaticHelpers_StaticHelpers.MsgFlagAsString(response.MsgFlag));
                        break;
                }
            }
            else {
                this.Log().Error(this.ReceiveResponseHndlr.name, 'response is not imsg');
            }
            this.Log().FuncEnd(this.ReceiveResponseHndlr.name, StaticHelpers_StaticHelpers.MsgFlagAsString(response.MsgFlag));
        }
    }
    ScheduleAutoSaveSnapShot() {
    }
    ScheduleAutoLogin() {
    }
    AutoLogin() {
    }
    OnePing(targetTab, msg) {
        return new Promise((resolve, reject) => PopUpMessagesManager_awaiter(this, void 0, void 0, function* () {
            this.Log().FuncStart(this.OnePing.name);
            var promResult = new PromiseResult(this.OnePing.name, this.Log());
            this.Log().LogVal('sending to tab id', targetTab.Tab.id);
            this.UiMan().UpdateMsgStatusStack('Sending Msg: ' + StaticHelpers_StaticHelpers.MsgFlagAsString(msg.MsgFlag));
            yield browser.tabs.sendMessage(targetTab.Tab.id, msg)
                .then((response) => {
                this.Log().MarkerC();
                this.Log().LogAsJsonPretty('response', response);
                var asMsgFromContent = response;
                if (asMsgFromContent) {
                    this.Log().Log(StaticHelpers_StaticHelpers.MsgFlagAsString(asMsgFromContent.MsgFlag));
                    if (asMsgFromContent.MsgFlag = MsgFlag.RespListeningAndReady) {
                        promResult.MarkSuccessful();
                    }
                }
                else {
                    promResult.MarkFailed('no message from content');
                }
            })
                .catch((err) => {
                this.Log().MarkerB();
                promResult.MarkFailed(err);
            });
            this.Log().FuncEnd(this.OnePing.name);
            if (promResult.WasSuccessful()) {
                resolve();
            }
            else {
                reject(promResult.RejectReasons);
            }
        }));
    }
    WaitForListeningTab(targetTab) {
        return PopUpMessagesManager_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => PopUpMessagesManager_awaiter(this, void 0, void 0, function* () {
                this.Log().FuncStart(this.WaitForListeningTab.name);
                var promResult = new PromiseResult(this.WaitForListeningTab.name, this.Log());
                var iterationJr = new IterationHelper_IterationHelper(this.Helpers(), this.WaitForListeningTab.name);
                var msg = new MsgFromPopUp_MsgFromPopUp(MsgFlag.Ping, this.PopHub);
                msg.CurrentContentPrefs = this.SettingsMan().GetOnlyContentPrefs();
                while (iterationJr.DecrementAndKeepGoing() && !promResult.WasSuccessful()) {
                    this.Log().Log('Pinging');
                    yield this.OnePing(targetTab, msg)
                        .then(() => promResult.MarkSuccessful())
                        .catch((ex) => {
                        this.Log().MarkerA();
                        promResult.MarkFailed(ex);
                    });
                    if (!promResult.WasSuccessful()) {
                        this.UiMan().UpdateMsgStatusStack('Ping did not succeed, waiting');
                        yield iterationJr.Wait();
                        this.Log().Log('Done waiting');
                        msg;
                    }
                    else {
                        this.UiMan().UpdateMsgStatusStack('Ping succeeded');
                    }
                }
                this.Log().FuncEnd(this.WaitForListeningTab.name);
                if (promResult.WasSuccessful()) {
                    resolve(targetTab);
                }
                else {
                    if (iterationJr.IsExhausted) {
                        promResult.MarkFailed(iterationJr.IsExhaustedMsg);
                    }
                    reject(promResult.RejectReasons);
                }
            }));
        });
    }
    SendMessageToSingleTab(dataBrowserTab, messageToSend) {
        return new Promise((resolve, reject) => {
            this.Log().FuncStart(this.SendMessageToSingleTab.name, StaticHelpers_StaticHelpers.MsgFlagAsString(messageToSend.MsgFlag));
            var result = new PromiseResult(this.SendMessageToSingleTab.name, this.Log());
            this.UiMan().UpdateMsgStatusStack('Sending Msg: ' + StaticHelpers_StaticHelpers.MsgFlagAsString(messageToSend.MsgFlag));
            browser.tabs.sendMessage(dataBrowserTab.Tab.id, messageToSend)
                .then((response) => this.ReceiveResponseHndlr(response))
                .then(() => result.MarkSuccessful)
                .catch((ex) => {
                result.MarkFailed('likely no response yet');
            });
            this.Log().FuncEnd(this.SendMessageToSingleTab.name, StaticHelpers_StaticHelpers.MsgFlagAsString(messageToSend.MsgFlag));
            if (result.WasSuccessful()) {
                resolve();
            }
            else {
                reject(result.RejectReasons);
            }
        });
    }
    onError(error) {
        console.error(`Error: ${error}`);
    }
    SendMessageToContentTab(msgPlayload, targetTab = null) {
        return PopUpMessagesManager_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => PopUpMessagesManager_awaiter(this, void 0, void 0, function* () {
                if (!targetTab) {
                    targetTab = this.TabMan().CurrentTabData;
                }
                this.Log().FuncStart(this.SendMessageToContentTab.name, StaticHelpers_StaticHelpers.MsgFlagAsString(msgPlayload.MsgFlag));
                var result = new PromiseResult(this.SendMessageToContentTab.name, this.Log());
                msgPlayload.CurrentContentPrefs = yield this.SettingsMan().GetOnlyContentPrefs();
                yield this.WaitForListeningTab(targetTab)
                    .then(() => this.SendMessageToSingleTab(targetTab, msgPlayload))
                    .then(() => result.MarkSuccessful)
                    .catch((err) => result.MarkFailed(err));
                this.Log().FuncEnd(this.SendMessageToContentTab.name, StaticHelpers_StaticHelpers.MsgFlagAsString(msgPlayload.MsgFlag));
                if (result.MarkSuccessful) {
                    resolve();
                }
                else {
                    (reject(result.RejectReasons));
                }
            }));
        });
    }
    FromAtticDrawStorage() {
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/PopUpAtticManager.js
var PopUpAtticManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class PopUpAtticManager_PopUpAtticManager extends PopUpManagerBase {
    Init() {
        this.Log().FuncStart(PopUpAtticManager_PopUpAtticManager.name, this.Init.name);
        this.Log().FuncEnd(PopUpAtticManager_PopUpAtticManager.name, this.Init.name);
    }
    ReadGenericSettings() {
        return PopUpAtticManager_awaiter(this, void 0, void 0, function* () {
            this.Log().FuncStart(this.ReadGenericSettings.name);
            let toReturn = [];
            try {
                yield browser.storage.local.get().then((storageResults) => {
                    var storageKeys = Object.keys(storageResults);
                    for (let oneKey of storageKeys) {
                        if (oneKey === PopConst.Const.Storage.KeyGenericSettings) {
                            let storedValue = storageResults[oneKey];
                            if (storedValue) {
                                toReturn = JSON.parse(storedValue.toString());
                            }
                        }
                    }
                });
            }
            catch (e) {
                this.Log().Error(this.ReadGenericSettings.name, e.toString());
            }
            this.Log().FuncEnd(this.ReadGenericSettings.name);
            return toReturn;
        });
    }
    WriteGenericSettings(settingsToWrite) {
        this.Log().FuncStart(this.WriteGenericSettings.name);
        this.Log().LogAsJsonPretty('settings', settingsToWrite);
        let storageObj = {
            [PopConst.Const.Storage.KeyGenericSettings]: JSON.stringify(settingsToWrite)
        };
        browser.storage.local.set(storageObj);
        this.Log().FuncEnd(this.WriteGenericSettings.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/FeedbackManager.js


class FeedbackManager_FeedbackManager extends PopUpManagerBase {
    constructor(popHub) {
        super(popHub);
    }
    __getTextArea() {
        return document.getElementById(PopConst.Const.ElemId.textAreaFeedback);
    }
    WriteLine(text) {
        var ta = this.__getTextArea();
        if (ta) {
            ta.value += text + '\n';
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SettingFlavor.js
var SettingFlavor;
(function (SettingFlavor) {
    SettingFlavor[SettingFlavor["unknown"] = 0] = "unknown";
    SettingFlavor[SettingFlavor["PopUp"] = 1] = "PopUp";
    SettingFlavor[SettingFlavor["ContentAndPopUp"] = 2] = "ContentAndPopUp";
})(SettingFlavor || (SettingFlavor = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/OneGenericSetting.js
class OneGenericSetting {
    constructor(settingKey, dataType, valueAsObj, uiSelector, defaultValue, settingFlavor, friendly) {
        this.SettingKey = settingKey;
        this.DataType = dataType;
        this.ValueAsObj = valueAsObj;
        this.UiSelector = uiSelector;
        this.DefaultValue = defaultValue;
        this.SettingFlavor = settingFlavor;
        this.Friendly = friendly;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/ConstAllSettings.js






class ConstAllSettings_ConstAllSettings {
    constructor() {
        this.AllSettings = [
            new OneGenericSetting(SettingKey_SettingKey.Test, SettingType.BoolCheckBox, null, PopConst.Const.Selector.HS.GenericSettingTest, false, SettingFlavor.PopUp, 'Generic Setting Test'),
            new OneGenericSetting(SettingKey_SettingKey.LogToConsole, SettingType.BoolCheckBox, null, PopConst.Const.Selector.HS.LogToConsole, SharedConst.Const.Settings.Defaults.LogToConsole, SettingFlavor.ContentAndPopUp, 'Log to Console'),
            new OneGenericSetting(SettingKey_SettingKey.AutoSnapshotBeforeWindowChange, SettingType.BoolCheckBox, null, PopConst.Const.Selector.HS.AutoSnapshotBeforeWindowChange, PopConst.Const.Storage.Defaults.bool.AutoSnapshotBeforeWindowChange, SettingFlavor.ContentAndPopUp, 'Auto Save Snapshot on HindSite Window Change'),
            new OneGenericSetting(SettingKey_SettingKey.AutoLogin, SettingType.BoolCheckBox, null, PopConst.Const.Selector.HS.iCBoxdSettingsAutoLogin, PopConst.Const.Storage.Defaults.bool.AutoLogin, SettingFlavor.ContentAndPopUp, 'Auto Login'),
            new OneGenericSetting(SettingKey_SettingKey.LgndLog, SettingType.Accordian, null, PopConst.Const.Selector.Legend.LgndDebug, PopConst.Const.Settings.Defaults.LgndDebug, SettingFlavor.PopUp, 'Log'),
            new OneGenericSetting(SettingKey_SettingKey.LgndForeSite, SettingType.Accordian, null, PopConst.Const.Selector.Legend.LgndForeSite, PopConst.Const.Settings.Defaults.LgndForeSite, SettingFlavor.PopUp, 'Fore&bull;Site'),
            new OneGenericSetting(SettingKey_SettingKey.LgndHindSite, SettingType.Accordian, null, PopConst.Const.Selector.Legend.LgndHindSite, PopConst.Const.Settings.Defaults.LgndHindSite, SettingFlavor.PopUp, 'Hind&bull;Site'),
            new OneGenericSetting(SettingKey_SettingKey.LgndHindSite, SettingType.Accordian, null, PopConst.Const.Selector.Legend.LgndInSite, PopConst.Const.Settings.Defaults.LgndInSite, SettingFlavor.PopUp, 'In&bull;Site'),
            new OneGenericSetting(SettingKey_SettingKey.LgndSettings, SettingType.Accordian, null, PopConst.Const.Selector.Legend.LgndSettings, PopConst.Const.Settings.Defaults.LgndSettings, SettingFlavor.PopUp, 'Settings'),
            new OneGenericSetting(SettingKey_SettingKey.LgndState, SettingType.Accordian, null, PopConst.Const.Selector.Legend.LgndState, PopConst.Const.Settings.Defaults.LgndState, SettingFlavor.PopUp, 'State'),
            new OneGenericSetting(SettingKey_SettingKey.MaxAutoSaveCount, SettingType.Number, null, PopConst.Const.Selector.HS.SettingAutoSaveMaxCount, PopConst.Const.Numbers.MaxAutoSaveCount, SettingFlavor.ContentAndPopUp, 'Auto Save Max Count'),
            new OneGenericSetting(SettingKey_SettingKey.AutoSaveIntervalMin, SettingType.Number, null, PopConst.Const.Selector.HS.SettingAutoSaveInterval, PopConst.Const.Numbers.AutoSaveIntervalMin, SettingFlavor.ContentAndPopUp, 'Auto Save Interval (Min) - 0 to disable'),
            new OneGenericSetting(SettingKey_SettingKey.DebugKeepDialogOpen, SettingType.BoolCheckBox, null, PopConst.Const.Selector.HS.SettingDebugKeepDialogOpen, PopConst.Const.Settings.Defaults.DebugKeepDialogOpen, SettingFlavor.PopUp, '(Debug) Keep Dialog Open')
        ];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/SettingsManager.js
var SettingsManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class SettingsManager_SettingsManager extends PopUpManagerBase {
    Init() {
        return SettingsManager_awaiter(this, void 0, void 0, function* () {
            this.AllSettings = {
                SettingsAr: new ConstAllSettings_ConstAllSettings().AllSettings
            };
            yield this.HarvestNonDefaultGenericSettingsFromStorage();
        });
    }
    HarvestNonDefaultGenericSettingsFromStorage() {
        return SettingsManager_awaiter(this, void 0, void 0, function* () {
            this.Log().FuncStart(this.HarvestNonDefaultGenericSettingsFromStorage.name);
            let foundSettings;
            try {
                foundSettings = yield this.PopAtticMan().ReadGenericSettings();
            }
            catch (e) {
                this.Log().Error(this.HarvestNonDefaultGenericSettingsFromStorage.name, e.toString());
            }
            this.Log().LogAsJsonPretty('settings from storage', foundSettings);
            if (foundSettings) {
                for (var idx = 0; idx < foundSettings.length; idx++) {
                    let storageSetting = foundSettings[idx];
                    this.Log().LogVal('setting key', storageSetting.SettingKeyFriendly);
                    let matchingSetting = this.Helpers().SettingsHelp.GetByKey(storageSetting.SettingKey, this.AllSettings.SettingsAr);
                    if (matchingSetting) {
                        matchingSetting.ValueAsObj = storageSetting.ValueAsObj;
                    }
                    else {
                        this.Log().Error(this.HarvestNonDefaultGenericSettingsFromStorage.name, 'matching setting not found ' + StaticHelpers_StaticHelpers.SettingKeyAsString(storageSetting.SettingKey));
                    }
                }
            }
            else {
                this.Log().Error(this.HarvestNonDefaultGenericSettingsFromStorage.name, 'settings not found');
            }
            this.Log().FuncEnd(this.HarvestNonDefaultGenericSettingsFromStorage.name);
        });
    }
    GetOnlyContentPrefs() {
        let toReturn = [];
        for (var idx = 0; idx < this.AllSettings.SettingsAr.length; idx++) {
            let candidate = this.AllSettings.SettingsAr[idx];
            if (candidate.SettingFlavor === SettingFlavor.ContentAndPopUp) {
                toReturn.push(candidate);
            }
        }
        return toReturn;
    }
    SettingChanged(SettingKey, valueAsObj) {
        this.Log().Log(StaticHelpers_StaticHelpers.SettingKeyAsString(SettingKey));
        this.Log().LogVal('valueAsObj', valueAsObj.toString());
        this.SetByKey(SettingKey, valueAsObj);
    }
    GetByKey(settingKey) {
        let foundSetting = this.Helpers().SettingsHelp.GetByKey(settingKey, this.AllSettings.SettingsAr);
        console.log(foundSetting.Friendly);
        return foundSetting;
    }
    SetByKey(settingKey, value) {
        this.Log().FuncStart(this.SetByKey.name, StaticHelpers_StaticHelpers.SettingKeyAsString(settingKey));
        let foundSetting = this.Helpers().SettingsHelp.GetByKey(settingKey, this.AllSettings.SettingsAr);
        if (foundSetting) {
            if (foundSetting.DefaultValue !== value) {
                foundSetting.ValueAsObj = value;
            }
            else {
                foundSetting.ValueAsObj = null;
            }
            let nonDefaultSettings = [];
            for (var udx = 0; udx < this.AllSettings.SettingsAr.length; udx++) {
                if (this.AllSettings.SettingsAr[udx].ValueAsObj !== null) {
                    nonDefaultSettings.push({
                        SettingKey: this.AllSettings.SettingsAr[udx].SettingKey,
                        ValueAsObj: this.AllSettings.SettingsAr[udx].ValueAsObj,
                        SettingKeyFriendly: StaticHelpers_StaticHelpers.SettingKeyAsString(this.AllSettings.SettingsAr[udx].SettingKey)
                    });
                }
            }
            this.PopAtticMan().WriteGenericSettings(nonDefaultSettings);
        }
        else {
            this.Log().Error(this.SetByKey.name, 'setting match not found');
        }
        this.Log().FuncEnd(this.SetByKey.name, StaticHelpers_StaticHelpers.SettingKeyAsString(settingKey));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/TabManager.js
var TabManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class TabManager_TabManager extends PopUpManagerBase {
    constructor(hub) {
        super(hub);
        hub.Log.FuncStart(TabManager_TabManager.name);
        hub.Log.FuncEnd(TabManager_TabManager.name);
    }
    MakeTabData(rawTab) {
        let toReturn = {
            Tab: rawTab,
            UrlParts: this.Helpers().UrlHelp.MakeUrlParts({ AbsUrl: rawTab.url }),
        };
        return toReturn;
    }
    Init() {
        return TabManager_awaiter(this, void 0, void 0, function* () {
            this.Log().FuncStart(TabManager_TabManager.name, this.Init.name);
            yield this.GetAssociatedTab()
                .then((tabData) => {
                this.CurrentTabData = tabData;
            });
            this.Log().DebugIDataBrowserTab(this.CurrentTabData);
            this.Log().FuncEnd(TabManager_TabManager.name, this.Init.name);
        });
    }
    GetAssociatedTab() {
        return TabManager_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => TabManager_awaiter(this, void 0, void 0, function* () {
                this.Log().FuncStart(this.GetAssociatedTab.name);
                var toReturn;
                yield browser.tabs.query({ currentWindow: true, active: true })
                    .then((tabs) => TabManager_awaiter(this, void 0, void 0, function* () {
                    toReturn = {
                        Tab: tabs[0],
                        UrlParts: this.Helpers().UrlHelp.MakeUrlParts({ AbsUrl: tabs[0].url })
                    };
                    this.Log().DebugIDataBrowserTab(toReturn);
                    this.Log().FuncEnd(this.GetAssociatedTab.name);
                    resolve(toReturn);
                }))
                    .catch((err) => reject(err));
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/LocationManager.js
var LocationManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class LocationManager_LocationManager extends PopUpManagerBase {
    constructor(hub) {
        super(hub);
        hub.Log.FuncStart(LocationManager_LocationManager.name);
        hub.Log.FuncEnd(LocationManager_LocationManager.name);
    }
    ChangeLocationSwitchBoard(desiredPageType) {
        this.Log().FuncStart(this.ChangeLocationSwitchBoard.name, 'desired = ' + scWindowType[desiredPageType]);
        var iteration = new IterationHelper_IterationHelper(this.Helpers(), this.ChangeLocationSwitchBoard.name);
        if (iteration.DecrementAndKeepGoing()) {
            var currentScWindowType = this.TabMan().CurrentTabData.UrlParts.ScWindowType;
            if (this.TabMan().CurrentTabData.UrlParts.ScWindowType === scWindowType.LoginPage) {
                var self = this;
                var callbackOnComplete = () => {
                    this.Log().Log('callback triggered');
                    self.ChangeLocationSwitchBoard(desiredPageType);
                };
                var self = this;
            }
            else if (currentScWindowType === scWindowType.Launchpad || currentScWindowType === scWindowType.ContentEditor || currentScWindowType === scWindowType.Desktop) {
                var self = this;
                this.TabMan().CurrentTabData.UrlParts = this.Helpers().UrlHelp.SetFilePathFromWindowType(this.TabMan().CurrentTabData.UrlParts, desiredPageType);
                var absUrl = this.Helpers().UrlHelp.BuildFullUrlFromParts(this.TabMan().CurrentTabData.UrlParts);
                var callBackOnSuccessfulHrefChange = function () {
                    self.Log().Log('Callback triggered');
                    self.ChangeLocationSwitchBoard(desiredPageType);
                };
                this.Helpers().PromiseHelp.TabChainSetHrefWaitForComplete(absUrl, this.TabMan().CurrentTabData)
                    .then(() => this.MsgMan().WaitForListeningTab(this.TabMan().CurrentTabData))
                    .then(() => callBackOnSuccessfulHrefChange);
            }
        }
        this.Log().FuncEnd(this.ChangeLocationSwitchBoard.name);
    }
    SetScModeFromCeDt(newValue, currentPageType) {
        return LocationManager_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => LocationManager_awaiter(this, void 0, void 0, function* () {
                this.Log().FuncStart(this.SetScModeFromCeDt.name, newValue.AsString);
                this.Log().LogVal('WindowType', StaticHelpers_StaticHelpers.WindowTypeAsString(currentPageType));
                let result = new PromiseResult(this.SetScModeFromCeDt.name, this.Log());
                this.Log().MarkerA();
                if (currentPageType === scWindowType.Desktop) {
                    this.Log().MarkerB();
                    let contState = this.UiMan().CurrContentState;
                    this.Log().MarkerC();
                    if (contState && contState.ActiveCe && contState.ActiveCe.ActiveNode) {
                        this.Log().MarkerD();
                        let currentNodeId = contState.ActiveCe.ActiveNode;
                        let newUrlParts = this.Helpers().UrlHelp.CloneUrlParts(this.TabMan().CurrentTabData.UrlParts);
                        newUrlParts = this.Helpers().UrlHelp.BuildEditPrevNormUrl(newValue, contState, this.TabMan().CurrentTabData.UrlParts);
                        let editUrl = this.Helpers().UrlHelp.BuildFullUrlFromParts(newUrlParts);
                        yield this.BrowserMan().CreateNewTab(editUrl)
                            .then(() => result.MarkSuccessful())
                            .catch((ex) => result.MarkFailed(ex));
                    }
                    else {
                        this.Log().Log('unknown case');
                        this.Log().LogAsJsonPretty('contState', contState);
                    }
                }
                else {
                    this.Log().Log('need to handle ce case');
                }
                this.Log().FuncEnd(this.SetScModeFromCeDt.name, newValue.AsString);
                if (result.WasSuccessful()) {
                    resolve();
                }
                else {
                    reject(result.RejectReasons);
                }
            }));
        });
    }
    SetScMode(newValue) {
        return new Promise((resolve, reject) => LocationManager_awaiter(this, void 0, void 0, function* () {
            this.Log().FuncStart(this.SetScMode.name, newValue.AsString);
            let result = new PromiseResult(this.SetScMode.name, this.Log());
            var currentPageType = this.TabMan().CurrentTabData.UrlParts.ScWindowType;
            if (currentPageType === scWindowType.ContentEditor
                ||
                    currentPageType === scWindowType.Desktop) {
                yield this.SetScModeFromCeDt(newValue, currentPageType)
                    .then(() => result.MarkSuccessful())
                    .catch((ex) => result.MarkFailed(ex));
            }
            else if (currentPageType === scWindowType.Edit
                || currentPageType === scWindowType.Normal
                || currentPageType === scWindowType.Preview) {
                this.TabMan().CurrentTabData.UrlParts = this.Helpers().UrlHelp.SetScModeFromEditPrevNorm(newValue, this.TabMan().CurrentTabData.UrlParts);
                let newHref = this.Helpers().UrlHelp.BuildFullUrlFromParts(this.TabMan().CurrentTabData.UrlParts);
                yield this.Helpers().PromiseHelp.TabChainSetHrefWaitForComplete(newHref, this.TabMan().CurrentTabData)
                    .then(() => result.MarkSuccessful())
                    .catch((ex) => result.MarkFailed(ex));
            }
            this.Log().FuncEnd(this.SetScMode.name);
            if (result.MarkSuccessful) {
                resolve();
            }
            else {
                reject(result.RejectReasons);
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/GuidHelper.js


class GuidHelper_GuidHelper extends HelperBase {
    constructor() {
        super(...arguments);
        this.ShortGuidLength = 4;
    }
    EmptyGuid() {
        return this.ParseGuid('00000000-0000-0000-0000-000000000000');
    }
    newGuidString() {
        var toReturn;
        var temp = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
        toReturn = temp.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0;
            var v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
        return toReturn;
    }
    NewGuid() {
        var toReturn = this.ParseGuid(this.newGuidString());
        return toReturn;
    }
    ShortGuid(Id) {
        var toReturn = '{error}';
        if (Id && Id.AsString.length > this.ShortGuidLength) {
            toReturn = Id.AsString.substr(0, this.ShortGuidLength);
        }
        else {
            this.Log.DebugIGuid(Id);
            this.Log.LogVal('Length', Id.AsString.length);
            this.Log.LogVal('ShortLength', this.ShortGuidLength);
        }
        return toReturn;
    }
    FormatJustNumbers(str) {
        return str.replace(SharedConst.Const.Regex.CleanGuid, '');
    }
    FormatAsBracedGuid(str) {
        var parts = [];
        parts.push(str.slice(0, 8));
        parts.push(str.slice(8, 12));
        parts.push(str.slice(12, 16));
        parts.push(str.slice(16, 20));
        parts.push(str.slice(20, 32));
        var GUID = '{' + parts.join('-') + '}';
        return GUID;
    }
    ParseGuid(val) {
        let justNumbers = this.FormatJustNumbers(val);
        let guidFormat = this.FormatAsBracedGuid(justNumbers);
        let toReturn = {
            AsString: justNumbers,
            AsBracedGuid: guidFormat,
            AsShort: '',
            Type: 'IGuid'
        };
        toReturn.AsShort = this.ShortGuid(toReturn);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/UtilityHelper.js






class UtilityHelper_UtilityHelper extends HelperBase {
    constructor() {
        super(...arguments);
        this.lenTimestamp = 13;
        this.lenNickname = 16;
        this.lenPageType = 7;
        this.lenPrefix = 6;
        this.lenShortId = 4;
        this.colSep = ' - ';
        this.lenCeCount = 3;
        this.lenActiveNode = 16;
        this.lenFavorite = 3;
    }
    SelectHeaderStr(prefix) {
        let toReturn = StaticHelpers_StaticHelpers.BufferString('Time Stamp', this.lenTimestamp, BufferChar.Period, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString('Type', this.lenPageType, BufferChar.Period, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString('Nickname', this.lenNickname, BufferChar.Period, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString('Active Node.', this.lenActiveNode, BufferChar.Period, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString('Fav.', this.lenFavorite, BufferChar.Period, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString('Id', this.lenShortId, BufferChar.Period, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString('#CE', this.lenCeCount, BufferChar.Period, BufferDirection.right);
        return toReturn;
    }
    MakeSelectorFromId(TabId) {
        return '[id=' + TabId + ']';
    }
    TimeNicknameFavStr(data) {
        var typeStr = '';
        if (data.WindowType === scWindowType.ContentEditor) {
            typeStr = 'Cont Ed';
        }
        else if (data.WindowType === scWindowType.Desktop) {
            typeStr = 'Desktop';
        }
        var activeCeNode = '';
        for (var idx = 0; idx < data.AllCEAr.length; idx++) {
            var candidateCe = data.AllCEAr[idx];
            for (var jdx = 0; jdx < candidateCe.AllTreeNodeAr.length; jdx++) {
                var candidateNode = candidateCe.AllTreeNodeAr[jdx];
                if (candidateNode.IsActive) {
                    var lvl2Node = '';
                    if (jdx >= 2) {
                        lvl2Node = candidateCe.AllTreeNodeAr[1].NodeFriendly + '/';
                    }
                    activeCeNode = lvl2Node + candidateNode.NodeFriendly;
                    break;
                }
            }
        }
        let toReturn = StaticHelpers_StaticHelpers.BufferString(this.MakeFriendlyDate(data.TimeStamp), this.lenTimestamp, BufferChar.space, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString(typeStr, this.lenPageType, BufferChar.Nbsp, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString(data.NickName, this.lenNickname, BufferChar.Nbsp, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString(activeCeNode, this.lenActiveNode, BufferChar.Nbsp, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString((data.Flavor === SnapShotFlavor.Favorite ? '*' : ''), this.lenFavorite, BufferChar.Nbsp, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString(data.Id.AsShort, this.lenShortId, BufferChar.Nbsp, BufferDirection.right)
            + this.colSep + StaticHelpers_StaticHelpers.BufferString(data.AllCEAr.length.toString(), this.lenCeCount, BufferChar.Nbsp, BufferDirection.right);
        return toReturn;
    }
    TimeNicknameFavStrForConfirmation(data) {
        var result = this.TimeNicknameFavStr(data);
        result = result.replace(new RegExp(/&nbsp;/ig), '');
        return result;
    }
    MakeFriendlyDate(date) {
        var toReturn = '';
        var workingDate = new Date(date);
        if (workingDate) {
            var month = StaticHelpers_StaticHelpers.BufferString((workingDate.getMonth() + 1).toString(), 2, BufferChar.Zero, BufferDirection.left);
            var day = StaticHelpers_StaticHelpers.BufferString(workingDate.getDate().toString(), 2, BufferChar.Zero, BufferDirection.left);
            var min = StaticHelpers_StaticHelpers.BufferString(workingDate.getMinutes().toString(), 2, BufferChar.Zero, BufferDirection.left);
            var hoursRaw = workingDate.getHours();
            var ampm = hoursRaw >= 12 ? 'p' : 'a';
            hoursRaw = hoursRaw % 12;
            var hourClean = hoursRaw ? hoursRaw : 12;
            var hourCleanStr = StaticHelpers_StaticHelpers.BufferString(hourClean.toString(), 2, BufferChar.Zero, BufferDirection.left);
            toReturn = month + '.' + day + ' ' + hourCleanStr + ':' + min + ' ' + ampm;
        }
        else {
            toReturn = '{error}';
            this.Log.Error(this.MakeFriendlyDate.name, 'no date provided');
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/PromiseGeneric.js
var PromiseGeneric_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class PromiseGeneric_PromiseHelper extends HelperBase {
    WaitForReadyIframe(dataOneIframe) {
        return PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
                this.Log.FuncStart(this.WaitForReadyIframe.name, dataOneIframe.Nickname + ' ' + dataOneIframe.Id.AsShort);
                var iterationJr = new IterationHelper_IterationHelper(this.HelperHub, this.WaitForReadyIframe.name);
                let promiseResult = new PromiseResult(this.WaitForReadyIframe.name, this.Log);
                while (iterationJr.DecrementAndKeepGoing() && !promiseResult.WasSuccessful()) {
                    var currentReadyState = dataOneIframe.IframeElem.contentDocument.readyState.toString();
                    var isReadyStateComplete = currentReadyState === 'complete';
                    if (isReadyStateComplete) {
                        promiseResult.MarkSuccessful();
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (iterationJr.IsExhausted) {
                    promiseResult.MarkFailed(iterationJr.IsExhaustedMsg);
                }
                this.Log.LogAsJsonPretty('dataOneIframe', dataOneIframe);
                this.Log.FuncEnd(this.WaitForReadyIframe.name);
                if (promiseResult.WasSuccessful()) {
                    resolve();
                }
                else {
                    reject(promiseResult.RejectReasons);
                }
            }));
        });
    }
    WaitForPageReadyNative(targetDoc) {
        return PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
                this.Log.FuncStart(this.WaitForPageReadyNative.name);
                var result = new PromiseResult(this.WaitForPageReadyNative.name, this.Log);
                this.Log.DebugIDataOneDoc(targetDoc);
                var iterationJr = new IterationHelper_IterationHelper(this.HelperHub, this.WaitForPageReadyNative.name);
                var isReady = false;
                this.Log.MarkerA();
                while (iterationJr.DecrementAndKeepGoing() && !isReady) {
                    this.Log.MarkerB();
                    var currentReadyState = targetDoc.ContentDoc.readyState.toString();
                    var isReadyStateComplete = currentReadyState === 'complete';
                    this.Log.LogVal('readyState', currentReadyState);
                    ;
                    this.Log.LogVal('isReadyStateComplete', isReadyStateComplete);
                    if (isReadyStateComplete) {
                        isReady = true;
                        result.MarkSuccessful();
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (iterationJr.IsExhausted) {
                    result.MarkFailed(iterationJr.IsExhaustedMsg);
                }
                this.Log.FuncEnd(this.WaitForPageReadyNative.name, 'ready state: ' + currentReadyState + ' is ready: ' + isReady.toString());
                ;
                if (result.WasSuccessful()) {
                    resolve();
                }
                else {
                    reject(result.RejectReasons);
                }
            }));
        });
    }
    WaitForIframeElemAndReturnWhenReady(haystackDoc, selector, iframeNickName) {
        return PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
                this.Log.FuncStart(this.WaitForIframeElemAndReturnWhenReady.name);
                var toReturnIframeData = null;
                let promiseResult = new PromiseResult(this.WaitForIframeElemAndReturnWhenReady.name, this.Log);
                yield this.WaitForAndReturnFoundElem(haystackDoc, selector)
                    .then((foundElem) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
                    if (foundElem) {
                        toReturnIframeData = this.HelperHub.FactoryHelp.DataOneIframeFactory(foundElem, iframeNickName);
                    }
                }))
                    .then(() => this.WaitForReadyIframe(toReturnIframeData))
                    .then(() => {
                    toReturnIframeData.ContentDoc = this.HelperHub.FactoryHelp.DataOneContentDocFactoryFromIframe(toReturnIframeData);
                    promiseResult.MarkSuccessful();
                })
                    .catch((err) => promiseResult.MarkFailed(err));
                this.Log.FuncEnd(this.WaitForIframeElemAndReturnWhenReady.name);
                if (promiseResult.WasSuccessful()) {
                    resolve(toReturnIframeData);
                }
                else {
                    reject(promiseResult.RejectReasons);
                }
            }));
        });
    }
    WaitForAndReturnFoundElem(haystackDoc, selector, overrideIterCount = 8) {
        return PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
                this.Log.FuncStart(this.WaitForAndReturnFoundElem.name);
                this.Log.LogVal('selector', selector);
                this.Log.LogVal('doc nickname', haystackDoc.Nickname);
                var toReturnFoundElem = null;
                let promiseResult = new PromiseResult(this.WaitForAndReturnFoundElem.name, this.Log);
                var iterationJr = new IterationHelper_IterationHelper(this.HelperHub, this.WaitForAndReturnFoundElem.name, overrideIterCount);
                while (!toReturnFoundElem && iterationJr.DecrementAndKeepGoing()) {
                    this.Log.LogVal('targetDoc.Document', haystackDoc.ContentDoc.toString());
                    this.Log.LogVal('targetDoc.Document.location', haystackDoc.ContentDoc.location.toString());
                    this.Log.LogVal('targetDoc.Document.location.href', haystackDoc.ContentDoc.location.href);
                    toReturnFoundElem = haystackDoc.ContentDoc.querySelector(selector);
                    if (toReturnFoundElem) {
                        this.Log.Log('found');
                        this.Log.LogVal('found.style.display', toReturnFoundElem.style.display);
                        promiseResult.MarkSuccessful();
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (!toReturnFoundElem && iterationJr.IsExhausted) {
                    promiseResult.MarkFailed(iterationJr.IsExhaustedMsg);
                }
                this.Log.FuncEnd(this.WaitForAndReturnFoundElem.name);
                if (promiseResult.WasSuccessful()) {
                    resolve(toReturnFoundElem);
                }
                else {
                    reject(promiseResult.RejectReasons);
                }
            }));
        });
    }
    WaitForAndClickWithPayload(selector, targetDoc, payload) {
        return new Promise((resolve, reject) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            this.Log.FuncStart(this.WaitForAndClickWithPayload.name, selector);
            yield this.WaitForThenClick([selector], targetDoc)
                .then(() => resolve(payload))
                .catch(ex => {
                this.Log.Error(this.WaitForAndClickWithPayload.name, ex);
                reject(ex);
            });
        }));
    }
    TabWaitForReadyStateCompleteNative(browserTab) {
        return new Promise((resolve, reject) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            let iterHelper = new IterationHelper_IterationHelper(this.HelperHub, this.TabWaitForReadyStateCompleteNative.name);
            let result = new PromiseResult(this.TabWaitForReadyStateCompleteNative.name, this.Log);
            while (browserTab.status !== 'complete' && iterHelper.DecrementAndKeepGoing()) {
                this.Log.LogVal('tab status', browserTab.status);
                yield iterHelper.Wait;
            }
            if (browserTab.status === 'complete') {
                result.MarkSuccessful();
            }
            else {
                result.MarkFailed('browser status: ' + browserTab.status);
                if (iterHelper.IsExhausted) {
                    result.MarkFailed(iterHelper.IsExhaustedMsg);
                }
            }
            if (result.WasSuccessful()) {
                resolve();
            }
            else {
                reject(result.RejectReasons);
            }
        }));
    }
    TabChainSetHrefWaitForComplete(href, targetTab) {
        return new Promise((resolve, reject) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            this.Log.FuncStart(this.TabChainSetHrefWaitForComplete.name, href.AbsUrl);
            try {
                yield browser.tabs.update(targetTab.Tab.id, { url: href.AbsUrl })
                    .then(() => this.TabWaitForReadyStateCompleteNative(targetTab.Tab))
                    .then(resolve)
                    .catch(reject);
            }
            catch (e) {
                this.Log.Error(this.TabChainSetHrefWaitForComplete.name, e.toString());
                reject(e);
            }
            this.Log.FuncEnd(this.TabChainSetHrefWaitForComplete.name, href.AbsUrl);
        }));
    }
    RaceWaitAndClick(selector, targetDoc) {
        return PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
                this.Log.FuncStart(this.RaceWaitAndClick.name);
                yield this.WaitForThenClick([selector.sc920, selector.sc820], targetDoc)
                    .then(() => {
                    this.Log.FuncEnd(this.RaceWaitAndClick.name);
                    resolve();
                })
                    .catch((ex) => {
                    this.Log.FuncEnd(this.RaceWaitAndClick.name);
                    reject(ex);
                });
            }));
        });
    }
    WaitForThenClick(selectorAr, targetDoc) {
        return new Promise((resolve, reject) => PromiseGeneric_awaiter(this, void 0, void 0, function* () {
            this.Log.FuncStart(this.WaitForThenClick.name);
            let promiseResults = new PromiseResult(this.WaitForThenClick.name, this.Log);
            if (targetDoc) {
                this.Log.LogAsJsonPretty('selectors', selectorAr);
                var found = null;
                var iterationJr = new IterationHelper_IterationHelper(this.HelperHub, this.WaitForThenClick.name);
                while (!found && iterationJr.DecrementAndKeepGoing()) {
                    for (var idx = 0; idx < selectorAr.length; idx++) {
                        found = targetDoc.ContentDoc.querySelector(selectorAr[idx]);
                        if (found) {
                            this.Log.LogVal('found target', selectorAr[idx]);
                            break;
                        }
                    }
                    if (found) {
                        this.Log.Log('clicking');
                        try {
                            found.click();
                            promiseResults.MarkSuccessful();
                        }
                        catch (e) {
                            promiseResults.MarkFailed(e);
                        }
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
            }
            else {
                promiseResults.MarkFailed('no target doc');
            }
            if (!found && iterationJr.IsExhausted) {
                promiseResults.MarkFailed(iterationJr.IsExhaustedMsg);
            }
            this.Log.FuncEnd(this.WaitForThenClick.name);
            if (promiseResults.WasSuccessful()) {
                resolve();
            }
            else {
                reject(promiseResults.RejectReasons);
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/FactoryHelper.js

class FactoryHelper_FactoryHelper extends HelperBase {
    CreateNewDtDataShell() {
        var toReturn = {
            AllCeData: [],
            livingIframeAr: [],
            ActiveCeMan: null,
            ActiveCeState: null
        };
        return toReturn;
    }
    DataOneContentDocFactoryFromIframe(dataOneIframe) {
        var toReturn = null;
        if (dataOneIframe) {
            toReturn =
                {
                    ContentDoc: dataOneIframe.IframeElem.contentDocument,
                    DocId: this.HelperHub.GuidHelp.NewGuid(),
                    Nickname: dataOneIframe.Nickname + ' - content doc'
                };
        }
        else {
            this.Log.Error(this.DataOneContentDocFactoryFromIframe.name, 'no iframe provided');
        }
        return toReturn;
    }
    DataOneIframeFactory(iframeElem, nickname) {
        this.Log.FuncStart(this.DataOneIframeFactory.name);
        var toReturn = null;
        if (iframeElem && nickname) {
            let zIndex = -1;
            if (iframeElem && iframeElem.style && iframeElem.style.zIndex) {
                zIndex = parseInt(iframeElem.style.zIndex);
            }
            var toReturn = {
                Index: -1,
                IframeElem: iframeElem,
                Id: this.HelperHub.GuidHelp.NewGuid(),
                Zindex: zIndex,
                Nickname: nickname,
                ContentDoc: null,
            };
            toReturn.ContentDoc = this.DataOneContentDocFactoryFromIframe(toReturn);
            this.Log.FuncEnd(this.DataOneIframeFactory.name);
        }
        else {
            this.Log.Error(this.DataOneIframeFactory.name, 'one of these is null');
            this.Log.LogAsJsonPretty('iframeElem', iframeElem);
            this.Log.LogAsJsonPretty('nickname', nickname);
        }
        return toReturn;
    }
    CreateShellIDataOneWindowStorage(windowType, flavor) {
        this.Log.FuncStart(this.CreateShellIDataOneWindowStorage.name);
        var dateToUse = new Date();
        var newGuid = this.GuidHelp().NewGuid();
        var activeWindowSnapShot = {
            TimeStamp: dateToUse,
            WindowType: windowType,
            WindowFriendly: windowType[windowType],
            AllCEAr: [],
            Id: newGuid,
            NickName: '',
            RawData: null,
            Flavor: flavor,
        };
        this.Log.FuncEnd(this.CreateShellIDataOneWindowStorage.name);
        return activeWindowSnapShot;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/UrlHelper.js



class UrlHelper_UrlHelper extends HelperBase {
    MakeUrlParts(url) {
        var parser = document.createElement('a');
        parser.href = url.AbsUrl;
        let toReturn = {
            OriginalRaw: url.AbsUrl,
            Protocol: parser.protocol,
            HostAndPort: parser.host,
            Parameters: this.ExtractParameters(parser.search),
            FilePath: parser.pathname,
            Anchor: parser.hash,
            ScWindowType: scWindowType.Unknown,
            HasError: false,
        };
        toReturn.ScWindowType = this.CalcPageTypeFromHref(url);
        return toReturn;
    }
    CloneUrlParts(original) {
        let toReturn = {
            Anchor: original.Anchor,
            FilePath: original.FilePath,
            HasError: original.HasError,
            HostAndPort: original.HostAndPort,
            OriginalRaw: original.OriginalRaw,
            Parameters: original.Parameters,
            Protocol: original.Protocol,
            ScWindowType: original.ScWindowType,
        };
        return toReturn;
    }
    BuildEditPrevNormUrl(scMode, contState, urlParts) {
        let toReturn = urlParts;
        urlParts.Anchor = '';
        urlParts.FilePath = '';
        urlParts.Parameters = [];
        urlParts.ScWindowType = scWindowType.Unknown;
        urlParts.Parameters.push({
            Key: 'sc_itemid',
            value: contState.ActiveCe.ActiveNode.NodeId.AsBracedGuid
        });
        urlParts.Parameters.push({
            Key: 'sc_mode',
            value: scMode.AsString
        });
        urlParts.Parameters.push({
            Key: 'sc_lang',
            value: 'en'
        });
        urlParts.Parameters.push({
            Key: 'sc_site',
            value: 'website'
        });
        return toReturn;
    }
    BuildFullUrlFromParts(UrlParts) {
        let toReturn = {
            AbsUrl: '',
        };
        if (UrlParts && !UrlParts.HasError) {
            toReturn.AbsUrl = UrlParts.Protocol + '//' + UrlParts.HostAndPort;
            if (UrlParts.FilePath.length > 0) {
                toReturn.AbsUrl += UrlParts.FilePath;
            }
            if (UrlParts.Parameters && UrlParts.Parameters.length > 0) {
                toReturn.AbsUrl += '?';
                for (var idx = 0; idx < UrlParts.Parameters.length; idx++) {
                    if (idx > 0) {
                        toReturn.AbsUrl += '&';
                    }
                    let oneParam = UrlParts.Parameters[idx];
                    toReturn.AbsUrl += oneParam.Key;
                    if (oneParam.value) {
                        toReturn.AbsUrl += '=' + oneParam.value;
                    }
                }
            }
            if (UrlParts.Anchor.length > 0) {
                toReturn.AbsUrl += '#' + UrlParts.Anchor;
            }
        }
        return toReturn;
    }
    SetScModeFromEditPrevNorm(newValue, urlParts) {
        let toReturn = urlParts;
        if (urlParts && newValue) {
            urlParts = this.SetFilePathFromWindowType(urlParts);
            if (urlParts && urlParts.Parameters && urlParts.Parameters.length > 0)
                for (var idx = 0; idx < urlParts.Parameters.length; idx++) {
                    let candidate = urlParts.Parameters[idx];
                    if (candidate.Key === 'scmode') {
                        candidate.value = newValue.AsString;
                        break;
                    }
                }
        }
        return toReturn;
    }
    SetFilePathFromWindowType(urlParts, windowType = null) {
        let toReturn = urlParts;
        if (!windowType) {
            windowType = urlParts.ScWindowType;
        }
        toReturn.ScWindowType = windowType;
        switch (toReturn.ScWindowType) {
            case scWindowType.ContentEditor:
                toReturn.FilePath = SharedConst.Const.UrlSuffix.CE;
                break;
            case scWindowType.Desktop:
                toReturn.FilePath = SharedConst.Const.UrlSuffix.Desktop;
                break;
            case scWindowType.Edit:
                toReturn.FilePath = SharedConst.Const.UrlSuffix.None;
                break;
            case scWindowType.Preview:
                toReturn.FilePath = SharedConst.Const.UrlSuffix.None;
                break;
            case scWindowType.Normal:
                toReturn.FilePath = SharedConst.Const.UrlSuffix.None;
                break;
            default:
                toReturn.FilePath = '';
                this.Log.Error(this.SetFilePathFromWindowType.name, 'unaccounted for window type');
                break;
        }
        return toReturn;
    }
    ExtractParameters(url) {
        let toReturn = [];
        if (url) {
            let splitStr = url.split('?');
            if (splitStr.length > 1) {
                let paramString = splitStr[1].replace(SharedConst.Const.Regex.QueryStrSeparatorQuest, '');
                let pairStr = paramString.split('&');
                if (pairStr && pairStr.length > 0) {
                    for (var idx = 0; idx < pairStr.length; idx++) {
                        let oneParamAr = pairStr[idx].split('=');
                        let paramPair = {
                            Key: '',
                            value: ''
                        };
                        if (oneParamAr) {
                            paramPair.Key = oneParamAr[0];
                            if (oneParamAr.length > 1) {
                                paramPair.value = oneParamAr[1];
                            }
                            toReturn.push(paramPair);
                        }
                    }
                }
            }
        }
        return toReturn;
    }
    ExtractFilePath(url, parser) {
        let toReturn = '';
        parser.protocol;
        parser.hostname;
        parser.port;
        parser.pathname;
        parser.search;
        parser.hash;
        parser.host;
        toReturn = parser.pathname;
        return toReturn;
    }
    ExtractProtocol(url) {
        let toReturn = '';
        if (url.startsWith('https')) {
            toReturn = 'https';
        }
        else {
            toReturn = 'http';
        }
        return toReturn;
    }
    ExtractHostName(url) {
        let toReturn = '';
        if (url.indexOf('//') > -1) {
            toReturn = url.split('/')[2];
        }
        else {
            toReturn = url.split('/')[0];
        }
        toReturn = toReturn.split(':')[0];
        toReturn = toReturn.split('?')[0];
        return toReturn;
    }
    __urlVsRegex(regexPattern, url) {
        return new RegExp(regexPattern).test(url);
    }
    CalcPageTypeFromHref(absUrl) {
        this.Log.FuncStart(this.CalcPageTypeFromHref.name);
        var toReturn = scWindowType.Unknown;
        if (absUrl && absUrl.AbsUrl) {
            this.Log.LogVal('current url', absUrl.AbsUrl);
            if (absUrl.AbsUrl.indexOf(SharedConst.Const.UrlSuffix.Login) > -1) {
                toReturn = scWindowType.LoginPage;
            }
            else if (new RegExp(SharedConst.Const.Regex.ContentEditor).test(absUrl.AbsUrl)) {
                toReturn = scWindowType.ContentEditor;
            }
            else if (absUrl.AbsUrl.toLowerCase().indexOf(SharedConst.Const.UrlSuffix.LaunchPad.toLowerCase()) > -1) {
                toReturn = scWindowType.Launchpad;
            }
            else if (this.__urlVsRegex(SharedConst.Const.Regex.PageType.Desktop, absUrl.AbsUrl)) {
                toReturn = scWindowType.Desktop;
            }
            else if (this.__urlVsRegex(SharedConst.Const.Regex.PageType.Preview, absUrl.AbsUrl)) {
                toReturn = scWindowType.Preview;
            }
            else if (this.__urlVsRegex(SharedConst.Const.Regex.PageType.Edit, absUrl.AbsUrl)) {
                toReturn = scWindowType.Edit;
            }
            else if (this.__urlVsRegex(SharedConst.Const.Regex.PageType.Normal, absUrl.AbsUrl)) {
                toReturn = scWindowType.Normal;
            }
            else {
                toReturn = scWindowType.Unknown;
            }
        }
        else {
            this.Log.Error(this.CalcPageTypeFromHref.name, 'null url');
        }
        this.Log.FuncEnd(this.CalcPageTypeFromHref.name, scWindowType[toReturn]);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/Helpers.js






class Helpers_HelperHub {
    constructor(debug) {
        debug.FuncStart(Helpers_HelperHub.name);
        this.Log = debug;
        this.Init();
        debug.FuncEnd(Helpers_HelperHub.name);
    }
    Init() {
        this.GuidHelp = new GuidHelper_GuidHelper(this);
        this.UtilityHelp = new UtilityHelper_UtilityHelper(this);
        this.PromiseHelp = new PromiseGeneric_PromiseHelper(this);
        this.FactoryHelp = new FactoryHelper_FactoryHelper(this);
        this.SettingsHelp = new SettingsHelper_SettingsHelper(this);
        this.UrlHelp = new UrlHelper_UrlHelper(this);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/BrowserManager.js
var BrowserManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class BrowserManager_BrowserManager extends PopUpManagerBase {
    CreateNewTab(tabUrl) {
        return BrowserManager_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => BrowserManager_awaiter(this, void 0, void 0, function* () {
                this.Log().FuncStart(this.CreateNewTab.name, tabUrl.AbsUrl);
                let result = new PromiseResult(this.CreateNewTab.name, this.Log());
                let newTab;
                this.UiMan().UpdateMsgStatusStack('Opening new tab');
                yield browser.tabs.create({
                    url: tabUrl.AbsUrl
                })
                    .then((rawTab) => { newTab = this.TabMan().MakeTabData(rawTab); })
                    .then(() => {
                    this.UiMan().UpdateMsgStatusStack('Waiting for Tab Ready State ');
                    this.Helpers().PromiseHelp.TabWaitForReadyStateCompleteNative(newTab.Tab);
                })
                    .then(() => {
                    this.UiMan().UpdateMsgStatusStack('Waiting for Tab Listening ');
                    this.MsgMan().WaitForListeningTab(newTab);
                })
                    .then(() => result.MarkSuccessful())
                    .catch((ex) => {
                    result.MarkFailed(ex);
                });
                if (result.WasSuccessful()) {
                    this.Log().FuncEnd(this.CreateNewTab.name, tabUrl.AbsUrl);
                    resolve(newTab);
                }
                else {
                    this.Log().FuncEnd(this.CreateNewTab.name, tabUrl.AbsUrl);
                    reject(result.RejectReasons);
                }
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/PopUpHub.js
var PopUpHub_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};














class PopUpHub_PopUpHub {
    constructor() {
        this.Log = new LoggerPopUp_LoggerPopUp();
        this.SettingsMan = new SettingsManager_SettingsManager(this);
        this.PopUpAtticMan = new PopUpAtticManager_PopUpAtticManager(this);
        this.PopMsgMan = new PopUpMessagesManager_PopUpMessagesManager(this);
        this.UiMan = new UiManager_UiManager(this);
        this.EventMan = new EventManager_EventManager(this);
        this.Helpers = new Helpers_HelperHub(this.Log);
        this.LocMan = new LocationManager_LocationManager(this);
        this.FeedbackMan = new FeedbackManager_FeedbackManager(this);
        this.TabMan = new TabManager_TabManager(this);
        this.BrowserMan = new BrowserManager_BrowserManager(this);
        this.init();
    }
    init() {
        return PopUpHub_awaiter(this, void 0, void 0, function* () {
            this.Log.FuncStart(PopUpHub_PopUpHub.name, this.init.name);
            yield this.PopUpAtticMan.Init();
            yield this.SettingsMan.Init();
            let setting = yield this.SettingsMan.GetByKey(SettingKey_SettingKey.LogToConsole);
            if (setting) {
                this.Log.Init(SettingsHelper_SettingsHelper.ValueAsBool(setting));
            }
            else {
                this.Log.Init(SharedConst.Const.Settings.Defaults.LogToConsole);
            }
            yield this.TabMan.Init();
            this.Log.DebugIDataBrowserTab(this.TabMan.CurrentTabData);
            this.EventMan.Init();
            this.Log.DebugIDataBrowserTab(this.TabMan.CurrentTabData);
            this.Log.DebugIDataBrowserTab(this.TabMan.CurrentTabData);
            this.PopMsgMan.Init();
            this.UiMan.Init();
            this.Log.FuncEnd(PopUpHub_PopUpHub.name, this.init.name);
            this.Log.Log('');
            this.Log.Log('');
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/EntryPoint.js

new PopUpHub_PopUpHub();


/***/ })
/******/ ]);