/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/PopUpManagerBase.js
class PopUpManagerBase {
    constructor(popHub) {
        this.PopHub = popHub;
    }
    Utilites() { return this.PopHub.Utilities; }
    UiMan() { return this.PopHub.UiMan; }
    debug() { return this.PopHub.debug; }
    PopConst() { return this.PopHub.PopUpConst; }
    MsgMan() { return this.PopHub.PopMsgMan; }
    PopAtticMan() { return this.PopHub.PopUpAtticMan; }
    GuidMan() { return this.PopHub.GuidMan; }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/scWindowType.js
var scWindowType;
(function (scWindowType) {
    scWindowType[scWindowType["Unknown"] = 0] = "Unknown";
    scWindowType[scWindowType["LoginPage"] = 1] = "LoginPage";
    scWindowType[scWindowType["Desktop"] = 2] = "Desktop";
    scWindowType[scWindowType["ContentEditor"] = 3] = "ContentEditor";
    scWindowType[scWindowType["Launchpad"] = 4] = "Launchpad";
    scWindowType[scWindowType["Edit"] = 5] = "Edit";
    scWindowType[scWindowType["Normal"] = 6] = "Normal";
    scWindowType[scWindowType["Preview"] = 7] = "Preview";
})(scWindowType || (scWindowType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/PayloadDataReqPopUp.js
class PayloadDataFromPopUp {
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/MsgFromXBase.js
class MsgFromXBase {
    constructor(msgFlag) {
        this.MsgFlag = msgFlag;
        this.greeting = 'this is the base greeting';
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/MsgPayloadRequestFromPopUp.js


class MsgPayloadRequestFromPopUp_MsgFromPopUp extends MsgFromXBase {
    constructor(msgFlag) {
        super(msgFlag);
        this.Data = new PayloadDataFromPopUp();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/MessageFlag.js
var MsgFlag;
(function (MsgFlag) {
    MsgFlag[MsgFlag["GetAllStorageOneWindow"] = 0] = "GetAllStorageOneWindow";
    MsgFlag[MsgFlag["RemoveFromStorage"] = 1] = "RemoveFromStorage";
    MsgFlag[MsgFlag["ReqAddCETab"] = 2] = "ReqAddCETab";
    MsgFlag[MsgFlag["ReqAdminB"] = 3] = "ReqAdminB";
    MsgFlag[MsgFlag["ReqCurState"] = 4] = "ReqCurState";
    MsgFlag[MsgFlag["ReqGoDesktop"] = 5] = "ReqGoDesktop";
    MsgFlag[MsgFlag["ReqOpenCE"] = 6] = "ReqOpenCE";
    MsgFlag[MsgFlag["ReqQuickPublish"] = 7] = "ReqQuickPublish";
    MsgFlag[MsgFlag["ReqRestoreClick"] = 8] = "ReqRestoreClick";
    MsgFlag[MsgFlag["ReqSetScMode"] = 9] = "ReqSetScMode";
    MsgFlag[MsgFlag["ReqTakeSnapShot"] = 10] = "ReqTakeSnapShot";
    MsgFlag[MsgFlag["RespCurState"] = 11] = "RespCurState";
    MsgFlag[MsgFlag["TaskFailed"] = 12] = "TaskFailed";
    MsgFlag[MsgFlag["TaskSuccessful"] = 13] = "TaskSuccessful";
    MsgFlag[MsgFlag["TestResponse"] = 14] = "TestResponse";
    MsgFlag[MsgFlag["Unknown"] = 15] = "Unknown";
    MsgFlag[MsgFlag["UpdateNickName"] = 16] = "UpdateNickName";
    MsgFlag[MsgFlag["NewWindowTest"] = 17] = "NewWindowTest";
    MsgFlag[MsgFlag["ReqRestoreToNewTab"] = 18] = "ReqRestoreToNewTab";
})(MsgFlag || (MsgFlag = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/UiManager.js
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class UiManager_UiManager extends PopUpManagerBase {
    constructor(popHub) {
        super(popHub);
        this.__selectSnapshotIndex = 0;
        this.ParentFocused = false;
        this.MenuFocused = true;
        this.OtherFocused = false;
        this.MenuEnabled = true;
        popHub.debug.FuncStart(UiManager_UiManager.name);
        popHub.debug.FuncEnd(UiManager_UiManager.name);
    }
    Init() {
        this.debug().FuncStart(this.Init.name, UiManager_UiManager.name);
        var self = this;
        this.debug().AddDebugTextChangedCallback(self, this.HndlrDebugTextChanged);
        this.__wireParentFocusCheck();
        this.RefreshUiRequest();
        this.debug().FuncEnd(this.Init.name);
    }
    __drawStoragePretty(ourData) {
        this.debug().FuncStart(this.__drawStoragePretty.name);
        this.ClearTextArea();
        for (var idx = 0; idx < ourData.length; idx++) {
            this.debug().Log('key: \t' + ourData[idx].key);
            var parsed = JSON.parse(ourData[idx].data);
            if (parsed) {
                this.DrawDebugDataPretty(parsed);
                this.debug().Log('------------');
            }
        }
        this.debug().FuncEnd(this.__drawStoragePretty.name);
    }
    DebugDataOneNode(dataOneTreeNode) {
        this.debug().FuncStart(this.DebugDataOneNode.name);
        var activeOrNot = dataOneTreeNode.IsActive ? '* ' : '  ';
        var expandedOrNot = dataOneTreeNode.IsExpanded ? '+ ' : '  ';
        var toReturn = activeOrNot + expandedOrNot + dataOneTreeNode.NodeId.AsString + ' ' + dataOneTreeNode.NodeFriendly;
        this.debug().FuncEnd(this.DebugDataOneNode.name);
        return toReturn;
    }
    GetDebugDataOneCE(dataOneCe) {
        this.debug().FuncStart('GetDebugDataOneCE');
        var toReturn = [];
        toReturn.push('------ All Tree Nodes -----');
        for (var idx = 0; idx < dataOneCe.AllTreeNodeAr.length; idx++) {
            this.debug().Log('idx: ' + idx);
            var oneVal = this.DebugDataOneNode(dataOneCe.AllTreeNodeAr[idx]);
            this.debug().Log('oneVal : ' + oneVal);
            toReturn.push(oneVal);
        }
        this.debug().FuncEnd(this.GetDebugDataOneCE.name);
        return toReturn;
    }
    __buildDebugDataPretty(dataOneWindow) {
        this.debug().FuncStart(this.__buildDebugDataPretty.name, 'data not null? ' + this.debug().IsNullOrUndefined(dataOneWindow));
        var toReturn = [];
        if (dataOneWindow) {
            toReturn.push('------ One Window Snap Shot Start -----');
            toReturn.push('Id: ' + dataOneWindow.Id);
            toReturn.push('TimeStamp: ' + dataOneWindow.TimeStamp);
            toReturn.push('CE Count: ' + dataOneWindow.AllCEAr.length);
            toReturn.push('Type: ' + scWindowType[dataOneWindow.WindowType]);
            toReturn.push('Nickname: ' + dataOneWindow.NickName);
            for (var jdx = 0; jdx < dataOneWindow.AllCEAr.length; jdx++) {
                toReturn.push('\t------ One CE Start -----');
                var dataOneCE = dataOneWindow.AllCEAr[jdx];
                toReturn.push('\tId: ' + dataOneCE.Id.AsString);
                var allCeDebugDataAr = this.GetDebugDataOneCE(dataOneCE);
                for (var kdx = 0; kdx < allCeDebugDataAr.length; kdx++) {
                    toReturn.push('\t\t' + allCeDebugDataAr[kdx]);
                }
                toReturn.push('\t------ One CE End -----');
            }
            toReturn.push('------ One Window Snap Shot End -----');
            this.debug().FuncEnd(this.__buildDebugDataPretty.name);
        }
        else {
            this.debug().Error(this.__buildDebugDataPretty.name, 'missing data');
        }
        return toReturn;
    }
    DrawDebugDataPretty(source) {
        this.debug().FuncStart(this.DrawDebugDataPretty.name, 'source not null: ' + this.debug().IsNullOrUndefined(source));
        var allDebugData = this.__buildDebugDataPretty(source);
        for (var ldx = 0; ldx < allDebugData.length; ldx++) {
            this.PopHub.FeedbackMan.WriteLine(allDebugData[ldx]);
        }
        this.debug().FuncEnd(this.DrawDebugDataPretty.name);
    }
    ClearTextArea() {
        var ta = this.__getTextArea();
        if (ta) {
            ta.value = '';
        }
        else {
            this.debug().Error(this.ClearTextArea.name, 'No text area found');
        }
    }
    __wireParentFocusCheck() {
        window.addEventListener('focus', () => { this.OnMenuFocused(true); });
        window.addEventListener('blur', () => { this.OnMenuFocused(false); });
    }
    OnParentFocused(isFocused) {
        this.ParentFocused = isFocused;
        this.CalculateMenuDisplay();
    }
    OnMenuFocused(isFocused) {
        this.MenuFocused = isFocused;
        this.CalculateMenuDisplay();
    }
    CalculateMenuDisplayDelayed(self) {
        if (!self.ParentFocused && !self.MenuFocused) {
            self.OtherFocused = true;
        }
        if (self.ParentFocused) {
            self.OtherFocused = false;
        }
        self.MenuEnabled = !self.OtherFocused && (self.ParentFocused || self.MenuFocused);
        var menuOverlay = document.querySelector(self.PopConst().Selector.HS.menuOverlay);
        if (menuOverlay) {
            if (self.MenuEnabled) {
                menuOverlay.style.display = 'none';
            }
            else
                menuOverlay.style.display = '';
        }
    }
    CalculateMenuDisplay() {
        var self = this;
        setTimeout(() => { this.CalculateMenuDisplayDelayed(self); }, 100);
        setTimeout(() => { this.CalculateMenuDisplayDelayed(self); }, 1000);
    }
    __getTextArea() {
        return document.querySelector(this.PopConst().Selector.HS.TaDebug);
    }
    HndlrDebugTextChanged(caller, data) {
        var self = caller;
        var ta = self.__getTextArea();
        if (ta) {
            if (data.Append) {
                ta.value += data.NewText + '\n';
            }
            else {
                ta.value = data.NewText + '\n';
            }
            ta.scrollTop = ta.scrollHeight;
        }
    }
    SetParentInfo(winDataParent) {
        var targetSpan = document.getElementById(this.PopConst().ElemId.HindSiteParentInfo);
        if (targetSpan) {
            targetSpan.innerHTML = ' | Parent Id: ' + winDataParent.DataDocSelf.DocId.AsShort + ' | ' + winDataParent.Window.location.href;
        }
    }
    SetAccordianClass(targetElem, isCollapsed) {
        if (!isCollapsed) {
            targetElem.classList.remove(this.PopConst().ClassNames.HS.Collapsed);
        }
        else {
            targetElem.classList.add(this.PopConst().ClassNames.HS.Collapsed);
        }
    }
    GetAccordianContentElem(sib) {
        var toReturn;
        if (sib) {
            var siblings = sib.parentElement.getElementsByClassName('accordian-content');
            if (siblings) {
                var toReturn = siblings[0];
            }
        }
        return toReturn;
    }
    DrawStorageResponse(data) {
        this.debug().FuncStart('DrawStorage');
        try {
            if (data.State.CurrentSnapShots) {
            }
        }
        catch (e) {
            this.debug().Error(this.DrawStorageResponse.name, e.message);
        }
        this.debug().FuncEnd('DrawStorage');
    }
    __drawStorageRaw(ourData) {
        this.debug().FuncStart('DrawStorageRaw');
        for (var idx = 0; idx < ourData.length; idx++) {
            this.debug().Log('key: \t' + ourData[idx].key);
            this.debug().Log('data: \t' + ourData[idx].data);
            this.debug().Log('------------');
        }
        this.debug().FuncEnd('DrawStorageRaw');
    }
    RestoreAccordianStates() {
        var accordianSettings = this.PopAtticMan().CurrentSettings().Accordian;
        for (var idx = 0; idx < accordianSettings.length; idx++) {
            var candidate = accordianSettings[idx];
            var target = document.getElementById(candidate.ElemId);
            if (target) {
                var contentSib = this.GetAccordianContentElem(target);
                if (contentSib) {
                    this.SetAccordianClass(contentSib, candidate.isCollapsed);
                }
            }
        }
    }
    UpdateAtticFromUi() {
        this.debug().FuncStart(this.UpdateAtticFromUi.name);
        let currentSettings = this.PopAtticMan().CurrentSettings();
        let currentVal = document.querySelector(this.PopConst().Selector.HS.iCBoxdSettingsShowDebugData).checked;
        currentVal = true;
        this.debug().LogVal('currentVal', currentVal.toString());
        currentSettings.DebugSettings.ShowDebugData = currentVal;
        this.PopAtticMan().StoreSettings(currentSettings);
        this.RefreshUiRequest();
        this.debug().FuncEnd(this.UpdateAtticFromUi.name);
    }
    SelectChanged() {
        this.debug().FuncStart(this.SelectChanged.name);
        this.__selectSnapshotIndex = this.__getSelectElem().selectedIndex;
        this.debug().Log('new index :' + this.__selectSnapshotIndex);
        this.RefreshUiRequest();
        this.debug().FuncEnd(this.SelectChanged.name);
    }
    __GetCancelButton() {
        return document.getElementById(this.PopConst().ElemId.HS.Btn.Cancel);
    }
    SetCancelFlag() {
        this.OperationCancelled = true;
        var btn = this.__GetCancelButton();
        if (btn) {
            btn.classList.add('red');
        }
    }
    ClearCancelFlag() {
        var btn = this.__GetCancelButton();
        if (btn) {
            btn.classList.remove('red');
        }
        this.UiMan().OperationCancelled = false;
    }
    __refreshSettings() {
        this.debug().FuncStart(this.__refreshSettings.name);
        let debugFieldSet = window.document.querySelector(this.PopConst().Selector.HS.IdFieldSetDebug);
        let currentSettings = this.PopAtticMan().CurrentSettings();
        if (currentSettings) {
            if (debugFieldSet) {
                let newDisplay = this.PopAtticMan().CurrentSettings().DebugSettings.ShowDebugData ? '' : 'none';
                debugFieldSet.style.display = newDisplay;
            }
            let checkBoxShowDebug = window.document.querySelector(this.PopConst().Selector.HS.iCBoxdSettingsShowDebugData);
            if (checkBoxShowDebug) {
                this.debug().LogVal('before', checkBoxShowDebug.checked.toString());
                checkBoxShowDebug.checked = currentSettings.DebugSettings.ShowDebugData;
                this.debug().LogVal('after', checkBoxShowDebug.checked.toString());
            }
            else {
                this.debug().Error(this.__refreshSettings.name, 'no checkbox found');
            }
        }
        else {
            this.debug().Error(this.RefreshUiRequest.name, 'no settings found');
        }
        this.debug().FuncEnd(this.__refreshSettings.name);
    }
    RefreshUiRequest() {
        return __awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.RefreshUiRequest.name);
            this.MsgMan().SendMessageHndlr(new MsgPayloadRequestFromPopUp_MsgFromPopUp(MsgFlag.ReqCurState));
            this.__refreshSettings();
            this.RestoreAccordianStates();
            this.debug().FuncEnd(this.RefreshUiRequest.name);
        });
    }
    RefreshUiResponse(data) {
        this.PopulateStateOfSnapShotSelect(data.State.CurrentSnapShots);
        this.__drawCorrectNicknameInUI(data.State.CurrentSnapShots);
    }
    ShowDebugDataOneWindow() {
        this.debug().FuncStart('ShowDebugDataOneWindow');
        var toReturn = [];
        for (var kdx = 0; kdx < toReturn.length; kdx++) {
            this.debug().Log(toReturn[kdx]);
        }
        this.debug().FuncEnd('ShowDebugDataOneWindow');
        return toReturn;
    }
    __drawCorrectNicknameInUI(snapShots) {
        this.debug().FuncStart(this.__drawCorrectNicknameInUI.name);
        var targetId = this.UiMan().GetIdOfSelectWindowSnapshot();
        if (targetId) {
            this.debug().Log('targetId : ' + targetId.AsString);
            var storageValues = snapShots;
            var currentSelectId = this.GetIdOfSelectWindowSnapshot();
            var storageMatch;
            for (var idx = 0; idx < storageValues.length; idx++) {
                var candidate = storageValues[idx];
                if (candidate.Id.AsString === currentSelectId.AsString) {
                    storageMatch = candidate;
                    break;
                }
            }
            if (storageMatch) {
                var inputElem = window.document.getElementById(this.PopConst().ElemId.InputNickname);
                if (inputElem) {
                    inputElem.value = storageMatch.NickName;
                }
            }
        }
        this.debug().FuncEnd(this.__drawCorrectNicknameInUI.name);
    }
    GetValueInNickname() {
        var toReturn = '';
        toReturn = window.document.getElementById(this.PopConst().ElemId.InputNickname).value;
        return toReturn;
    }
    __getSelectElem() {
        return window.document.querySelector(this.PopConst().Selector.HS.SelStateSnapShot);
    }
    GetIdOfSelectWindowSnapshot() {
        this.debug().FuncStart(this.GetIdOfSelectWindowSnapshot.name);
        var targetSel = this.__getSelectElem();
        var toReturn = null;
        if (targetSel) {
            var optionsLength = targetSel.options.length;
            if (this.__selectSnapshotIndex < optionsLength) {
                var temp = targetSel.options[this.__selectSnapshotIndex].value;
                toReturn = this.GuidMan().ParseGuid(temp);
                this.debug().LogVal('toReturn', toReturn.AsString);
            }
        }
        this.debug().FuncEnd(this.GetIdOfSelectWindowSnapshot.name);
        return toReturn;
    }
    AssignOnCheckedEvent(targetId, handler) {
        var targetElem = document.getElementById(targetId);
        if (!targetElem) {
            this.debug().Error(this.AssignOnClickEvent.name, 'No Id: ' + targetId);
        }
        else {
            targetElem.addEventListener('checked', (evt) => { handler(evt); });
        }
    }
    AssignOnClickEvent(targetId, handler) {
        var targetElem = document.querySelector(targetId);
        if (!targetElem) {
            targetElem = document.querySelector('[id=' + targetId + ']');
        }
        if (!targetElem) {
            this.debug().Error(this.AssignOnClickEvent.name, 'No Id: ' + targetId);
        }
        else {
            targetElem.addEventListener('click', (evt) => { handler(evt); });
        }
    }
    AssignOnChangeEvent(selector, handler) {
        this.debug().FuncStart(this.AssignOnChangeEvent.name, selector);
        var targetElem = document.querySelector(selector);
        if (!targetElem) {
            this.debug().Error(this.AssignOnClickEvent.name, 'No Id: ' + selector);
        }
        else {
            targetElem.onchange = () => { handler; };
        }
        this.debug().FuncEnd(this.AssignOnChangeEvent.name, selector);
    }
    AssignDblClickEvent(selector, handler) {
        var targetElem = document.querySelector(selector);
        if (!targetElem) {
            this.debug().Error(this.AssignOnClickEvent.name, 'No Id: ' + selector);
        }
        else {
            targetElem.ondblclick = (evt) => { handler(evt); };
        }
    }
    PopulateContentState(state) {
        this.debug().FuncStart(this.PopulateContentState.name);
        this.currentState = state;
        if (this.debug().IsNotNullOrUndefinedBool('state', state)) {
            this.UiMan().PopulateStateOfSnapShotSelect(state.CurrentSnapShots);
            var targetCurrStateTa = window.document.querySelector(this.PopConst().Selector.HS.TaState);
            if (targetCurrStateTa) {
                var allTaText = 'State as of: ' + this.Utilites().MakeFriendlyDate(new Date());
                allTaText += '\n';
                allTaText += 'Page Type: ' + scWindowType[state.WindowType];
                allTaText += '\n';
                allTaText += 'Url: ' + state.Url;
                allTaText += '\n';
                allTaText += 'Last Request: ' + MsgFlag[state.LastReq];
                allTaText += '\n';
                allTaText += 'Error Stack (' + state.ErrorStack.length + '):';
                for (var idx = 0; idx < state.ErrorStack.length; idx++) {
                    allTaText += '\n';
                    allTaText += '\t' + idx + ' : ' + state.ErrorStack[idx].ContainerFunc + ' ' + state.ErrorStack[idx].ErrorString;
                }
                targetCurrStateTa.value = allTaText;
            }
        }
        this.debug().FuncEnd(this.PopulateContentState.name);
    }
    PopulateStateOfSnapShotSelect(snapShots) {
        this.debug().FuncStart(this.PopulateStateOfSnapShotSelect.name, this.__selectSnapshotIndex.toString());
        if (snapShots) {
            var targetSel = this.__getSelectElem();
            if (targetSel) {
                var header = window.document.createElement('optgroup');
                header.label = this.Utilites().SelectHeaderStr();
                if (snapShots && snapShots.length > 0) {
                    targetSel.options.length = 0;
                    this.debug().Log('targetSel.options.length : ' + targetSel.options.length);
                    for (var idx = 0; idx < snapShots.length; idx++) {
                        var data = snapShots[idx];
                        var el = window.document.createElement('option');
                        el.innerHTML = this.PopHub.Utilities.TimeNicknameFavStr(data);
                        el.value = data.Id.AsString;
                        if (idx === this.__selectSnapshotIndex) {
                            el.selected = true;
                        }
                        header.appendChild(el);
                    }
                }
                targetSel.appendChild(header);
            }
        }
        this.debug().FuncEnd(this.PopulateStateOfSnapShotSelect.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/StaticHelpers.js
class StaticHelpers {
    static BufferString(str, desiredLength, buffChar = ' ', bufferLEft = true, useNbsp = true) {
        var toReturn = str;
        if (buffChar.length === 0) {
            buffChar = ' ';
        }
        if (toReturn.length > desiredLength) {
            if (desiredLength > 6) {
                toReturn = toReturn.substring(0, desiredLength - 3) + '...';
            }
            else {
                toReturn = toReturn.substring(0, desiredLength);
            }
        }
        if (toReturn.length < desiredLength) {
            var spacesNeeded = desiredLength - toReturn.length;
            if (buffChar === ' ' && useNbsp) {
                buffChar = '&nbsp;';
            }
            for (var idx = 0; idx < spacesNeeded; idx++) {
                if (bufferLEft) {
                    toReturn = buffChar + toReturn;
                }
                else {
                    toReturn = toReturn + buffChar;
                }
            }
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/debug.js

class debug_BaseDebug {
    constructor(parentWindow) {
        this.Enabled = false;
        this.ErrorStack = [];
        this.__debugTextChangedCallbacks = [];
        this.debugPrefix = '\t\t';
        this.__indentCount = 0;
        this.ParentWindow = parentWindow;
    }
    IsNotNullOrUndefinedBool(title, subject) {
        var toReturn = false;
        if (subject) {
            if ((typeof subject) == 'undefined') {
                this.LogVal(title + 'Is Not Undefined', '*** false ***');
            }
            else {
                this.LogVal(title + 'Is Not Null', 'true');
                toReturn = true;
            }
        }
        else {
            this.LogVal(title + 'Is Not Null', '*** false ***');
        }
        return toReturn;
    }
    DebugIGuid(id) {
        if (this.IsNotNullOrUndefinedBool('IGuid', id)) {
            this.LogVal('asShort', id.AsShort);
            this.LogVal('asString', id.AsString);
        }
    }
    DebugIDataOneDoc(dataOneDoc) {
        this.FuncStart(this.DebugIDataOneDoc.name);
        this.Log('');
        this.Log(this.debugPrefix + this.DebugIDataOneDoc.name);
        if (dataOneDoc) {
            this.Log(this.debugPrefix + 'dataOneDoc: \t' + this.IsNullOrUndefined(dataOneDoc));
            this.Log(this.debugPrefix + 'dataOneDoc.XyyzId.asShort: \t' + this.IsNullOrUndefined(dataOneDoc.DocId.AsShort));
            this.Log(this.debugPrefix + 'dataOneDoc.Document: \t' + this.IsNullOrUndefined(dataOneDoc.Document));
            if (dataOneDoc.Document) {
                this.LogVal(this.debugPrefix + 'dataOneDoc.Document.readyState:', dataOneDoc.Document.readyState);
                if (dataOneDoc.Document.location) {
                    this.LogVal(this.debugPrefix + 'targetDoc.location.href', dataOneDoc.Document.location.href);
                }
                else {
                    this.Log(this.debugPrefix + 'dataOneDoc.Document.location - does not exist');
                }
            }
            else {
                this.Log(this.debugPrefix + 'dataOneDoc.Document - does not exist');
            }
        }
        else {
            this.Error(this.DebugIDataOneDoc.name, 'no targetDoc');
        }
        this.Log('');
    }
    AddDebugTextChangedCallback(caller, callback) {
        this.__debugTextChangedCallbacks.push({
            Caller: caller,
            Func: callback
        });
    }
    HndlrClearDebugText(self, verify = false) {
        this.FuncStart(this.HndlrClearDebugText.name);
        var proceed = true;
        if (verify) {
            proceed = confirm('Clear Debug TextArea ?');
        }
        console.log('maker pink');
        console.log('enabled? ' + this.Enabled.toString());
        if (proceed) {
            var newText = '--- Debug Text Reset ---';
            self.__triggerAllDebugTextChangedCallbacks({
                NewText: newText,
                Append: false
            });
        }
        this.FuncEnd(this.HndlrClearDebugText.name);
    }
    MarkerA() {
        this.__markerRaw('A');
    }
    MarkerB() {
        this.__markerRaw('B');
    }
    MarkerC() {
        this.__markerRaw('C');
    }
    MarkerD() {
        this.__markerRaw('D');
    }
    MarkerE() {
        this.__markerRaw('E');
    }
    __markerRaw(marker) {
        this.Log('Marker ' + marker);
    }
    LogVal(textValName, textValVal) {
        if (!textValVal) {
            textValVal = '{notVal}';
        }
        else {
            textValVal = textValVal.toString();
        }
        textValName = StaticHelpers.BufferString(textValName.toString(), 26, ' ', false, false);
        const debugPrefix = '  ~~~  ';
        this.Log(debugPrefix + textValName + ' : ' + textValVal);
    }
    Log(text, optionalValue = '', hasPrefix = false) {
        if (this.Enabled) {
            var indent = '  ';
            for (var idx = 0; idx < this.__indentCount; idx++) {
                text = indent + text;
            }
            var prefixLength = 3;
            if (!hasPrefix) {
                for (var idx = 0; idx < prefixLength; idx++) {
                    text = ' ' + text;
                }
            }
            this.__triggerAllDebugTextChangedCallbacks({
                NewText: text,
                Append: true
            });
            console.log(text);
        }
    }
    __triggerAllDebugTextChangedCallbacks(data) {
        for (var idx = 0; idx < this.__debugTextChangedCallbacks.length; idx++) {
            var oneCallback = this.__debugTextChangedCallbacks[idx];
            oneCallback.Func(oneCallback.Caller, data);
        }
    }
    CtorName(ctorName) {
        this.Log('Constructor: ' + ctorName);
    }
    FuncStart(textOrFunc, optionalValue) {
        textOrFunc = 's) ' + textOrFunc;
        if (!optionalValue) {
            optionalValue = '';
        }
        else {
            optionalValue = optionalValue.toString();
        }
        if (optionalValue.length > 0) {
            textOrFunc = textOrFunc + ' : ' + optionalValue;
        }
        this.Log(textOrFunc, '', true);
        this.__indentCount++;
        if (this.__indentCount > 10) {
            this.__indentCount = 10;
        }
    }
    FuncEnd(text, optionalValueInput) {
        text = 'e) ' + text;
        if (!optionalValueInput) {
            optionalValueInput = '';
        }
        var optionalValue = optionalValueInput.toString();
        if (optionalValue.length > 0) {
            text = text + ' : ' + optionalValue;
        }
        this.__indentCount--;
        if (this.__indentCount < 0) {
            this.__indentCount = 0;
        }
        this.Log(text, optionalValue, true);
    }
    Error(container, text) {
        if (!container) {
            container = 'unknown';
        }
        if (!text) {
            text = 'unknown';
        }
        this.ErrorStack.push({
            ContainerFunc: container,
            ErrorString: text
        });
        this.Log('');
        this.Log('\t\t** ERROR ** ' + container);
        this.Log('');
        this.Log('\t\t  ' + text);
        this.Log('');
        this.Log('\t\t** ERROR ** ' + container);
        this.Log('');
    }
    NotNullCheck(title, value) {
        if (typeof value === 'undefined') {
            this.LogVal(title, 'Is Undefined');
        }
        else if (!value) {
            this.LogVal(title, 'Is Null');
        }
        else {
            this.LogVal(title, 'Is Not Null');
        }
    }
    IsNullOrUndefined(subject) {
        var toReturn = '{unknown}';
        if (subject) {
            if ((typeof subject) == 'undefined') {
                toReturn = 'Is Undefined';
            }
            else {
                toReturn = 'Not Null';
            }
        }
        else {
            toReturn = 'Is Null';
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Classes/PopUpDebug.js

class PopUpDebug_PopUpDebug extends debug_BaseDebug {
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Classes/CommonEvents.js

class CommonEvents_CommonEvents extends PopUpManagerBase {
    constructor(hub) {
        super(hub);
    }
    __cleardebugText() {
        this.debug().HndlrClearDebugText(this.debug());
    }
    __initNewOperation() {
        this.__cleardebugText();
        this.UiMan().ClearCancelFlag();
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Classes/ExternalEvents.js
var ExternalEvents_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class ExternalEvents_ExternalEvents extends CommonEvents_CommonEvents {
    __hndlrAddCETab() {
        return ExternalEvents_awaiter(this, void 0, void 0, function* () {
            this.__initNewOperation();
            this.MsgMan().SendMessageHndlr(new MsgPayloadRequestFromPopUp_MsgFromPopUp(MsgFlag.ReqAddCETab));
        });
    }
    __hndlrCancelOperation(evt) {
        this.UiMan().SetCancelFlag();
    }
    __DrawStorage(evt) {
        this.MsgMan().FromAtticDrawStorage();
    }
    __hndlrDesktop(evt) {
        this.__initNewOperation();
        this.MsgMan().SendMessageHndlr(new MsgPayloadRequestFromPopUp_MsgFromPopUp(MsgFlag.ReqGoDesktop));
    }
    HndlrAdminB() {
        this.__initNewOperation();
        this.MsgMan().SendMessageHndlr(new MsgPayloadRequestFromPopUp_MsgFromPopUp(MsgFlag.ReqAdminB));
    }
    __hndlrSetScMode(newMode, evt) {
        return ExternalEvents_awaiter(this, void 0, void 0, function* () {
            this.__initNewOperation();
            var payload = new MsgPayloadRequestFromPopUp_MsgFromPopUp(MsgFlag.ReqSetScMode);
            payload.Data = new PayloadDataFromPopUp();
            payload.Data.ReqScMode = newMode;
            payload.Data.UseOriginalWindowLocation = evt.ctrlKey;
            this.MsgMan().SendMessageHndlr(payload);
        });
    }
    __hndlrOpenCE() {
        return ExternalEvents_awaiter(this, void 0, void 0, function* () {
            this.__initNewOperation();
            this.MsgMan().SendMessageHndlr(new MsgPayloadRequestFromPopUp_MsgFromPopUp(MsgFlag.ReqOpenCE));
        });
    }
    __hndlrQuickPublish(evt) {
        return ExternalEvents_awaiter(this, void 0, void 0, function* () {
            this.__initNewOperation();
            this.MsgMan().SendMessageHndlr(new MsgPayloadRequestFromPopUp_MsgFromPopUp(MsgFlag.ReqQuickPublish));
            this.MsgMan().SendMessageHndlr(new MsgPayloadRequestFromPopUp_MsgFromPopUp(MsgFlag.TaskSuccessful));
        });
    }
    HndlrSnapShotRemove(evt) {
        this.__initNewOperation();
        this.MsgMan().SendMessageHndlr(new MsgPayloadRequestFromPopUp_MsgFromPopUp(MsgFlag.RemoveFromStorage));
    }
    CreateNewWindowIfRequired(evt) {
        return new Promise((resolve, reject) => ExternalEvents_awaiter(this, void 0, void 0, function* () {
            if (!evt.ctrlKey) {
                browser.tabs.create({
                    url: this.UiMan().currentState.Url,
                }).then((tab) => {
                    browser.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
                        console.log('status: ' + tab.status);
                        if (tab.status == 'complete' && tab.active) {
                            resolve();
                        }
                    });
                })
                    .catch(reject);
            }
            else {
                resolve();
            }
        }));
    }
    HndlrSnapShotRestore(evt) {
        return ExternalEvents_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.HndlrSnapShotRestore.name);
            this.__initNewOperation();
            yield this.CreateNewWindowIfRequired(evt)
                .then(() => {
                var payload = new MsgPayloadRequestFromPopUp_MsgFromPopUp(MsgFlag.ReqRestoreClick);
                payload.Data.idOfSelect = this.UiMan().GetIdOfSelectWindowSnapshot();
                this.MsgMan().SendMessageHndlr(payload);
            })
                .catch(() => { this.debug().Error(this.HndlrSnapShotRestore.name, 'promise error'); });
            this.debug().FuncEnd(this.HndlrSnapShotRestore.name);
        });
    }
    HndlrSnapShotUpdateNickName() {
        this.__initNewOperation();
        var self = this.PopAtticMan;
        var payload = new MsgPayloadRequestFromPopUp_MsgFromPopUp(MsgFlag.UpdateNickName);
        payload.Data.idOfSelect = this.UiMan().GetIdOfSelectWindowSnapshot();
        payload.Data.NewNickname = this.UiMan().GetValueInNickname();
        ;
        this.MsgMan().SendMessageHndlr(payload);
    }
    __hndlrSnapShotCreate(evt) {
        return ExternalEvents_awaiter(this, void 0, void 0, function* () {
            this.__initNewOperation();
            this.MsgMan().SendMessageHndlr(new MsgPayloadRequestFromPopUp_MsgFromPopUp(MsgFlag.ReqTakeSnapShot));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Classes/InternalEvents.js

class InternalEvents_InternalEvents extends CommonEvents_CommonEvents {
    HndlrSelectChange(evt) {
        this.PopHub.UiMan.SelectChanged();
    }
    __showDebugButtonClicked(evt) {
        this.__initNewOperation();
        this.debug().FuncStart(this.__showDebugButtonClicked.name);
        this.debug().FuncEnd(this.__showDebugButtonClicked.name);
    }
    __cleardebugTextWithConfirm() {
        this.debug().HndlrClearDebugText(this.debug(), true);
    }
    __toggleAccordian(evt) {
        this.debug().FuncStart(this.__toggleAccordian.name);
        var srcElem = (evt.target || evt.srcElement);
        var foundContentSib = this.UiMan().GetAccordianContentElem(srcElem);
        if (foundContentSib) {
            var isCollapsed = foundContentSib.classList.contains(this.PopConst().ClassNames.HS.Collapsed);
            var newVal = !isCollapsed;
            this.UiMan().SetAccordianClass(foundContentSib, newVal);
            this.PopAtticMan().UpdateAccodianState(srcElem.getAttribute('id'), newVal);
        }
        else {
            this.debug().Error(this.__toggleAccordian.name, 'did not find sib');
        }
        this.debug().FuncEnd(this.__toggleAccordian.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/EventManager.js



class EventManager_EventManager extends PopUpManagerBase {
    constructor(popHub) {
        super(popHub);
        this.ExternalCall = new ExternalEvents_ExternalEvents(popHub);
        this.InternalCall = new InternalEvents_InternalEvents(popHub);
    }
    Init() {
        this.__wireMenuButtons();
    }
    __wireMenuButtons() {
        this.debug().FuncStart(this.__wireMenuButtons.name);
        this.UiMan().AssignDblClickEvent(this.PopConst().Selector.HS.SelStateSnapShot, (evt) => { this.ExternalCall.HndlrSnapShotRestore(evt); });
        this.UiMan().AssignDblClickEvent(this.PopConst().Selector.HS.TaDebug, () => { this.InternalCall.__cleardebugTextWithConfirm(); });
        this.UiMan().AssignOnChangeEvent(this.PopConst().Selector.HS.SelStateSnapShot, (evt) => { this.InternalCall.HndlrSelectChange(evt); });
        this.UiMan().AssignOnClickEvent(this.PopConst().ElemId.HS.Btn.AdminB, () => { this.ExternalCall.HndlrAdminB(); });
        this.UiMan().AssignOnClickEvent(this.PopConst().ElemId.HS.Btn.Cancel, (evt) => { this.ExternalCall.__hndlrCancelOperation(evt); });
        this.UiMan().AssignOnClickEvent(this.PopConst().ElemId.HS.Btn.CE, () => { this.ExternalCall.__hndlrOpenCE(); });
        this.UiMan().AssignOnClickEvent(this.PopConst().ElemId.HS.Btn.Desktop, (evt) => { this.ExternalCall.__hndlrDesktop(evt); });
        this.UiMan().AssignOnClickEvent(this.PopConst().ElemId.HS.Btn.DrawStorage, (evt) => this.ExternalCall.__DrawStorage(evt));
        this.UiMan().AssignOnClickEvent(this.PopConst().ElemId.HS.Btn.ModeEdit, (evt) => this.ExternalCall.__hndlrSetScMode(this.PopConst().ScMode.edit, evt));
        this.UiMan().AssignOnClickEvent(this.PopConst().ElemId.HS.Btn.ModeNorm, (evt) => this.ExternalCall.__hndlrSetScMode(this.PopConst().ScMode.normal, evt));
        this.UiMan().AssignOnClickEvent(this.PopConst().ElemId.HS.Btn.ModePrev, (evt) => this.ExternalCall.__hndlrSetScMode(this.PopConst().ScMode.preview, evt));
        this.UiMan().AssignOnClickEvent(this.PopConst().ElemId.HS.Btn.QuickPublish, (evt) => { this.ExternalCall.__hndlrQuickPublish(evt); });
        this.UiMan().AssignOnClickEvent(this.PopConst().ElemId.HS.Btn.RemoveFromStorage, (evt) => this.ExternalCall.HndlrSnapShotRemove(evt));
        this.UiMan().AssignOnClickEvent(this.PopConst().ElemId.HS.Btn.RestoreWindowState, (evt) => { this.ExternalCall.HndlrSnapShotRestore(evt); });
        this.UiMan().AssignOnClickEvent(this.PopConst().ElemId.HS.Btn.SaveWindowState, (evt) => { this.ExternalCall.__hndlrSnapShotCreate(evt); });
        this.UiMan().AssignOnClickEvent(this.PopConst().ElemId.HS.Btn.UpdateNicknameB, () => this.ExternalCall.HndlrSnapShotUpdateNickName());
        this.UiMan().AssignOnClickEvent(this.PopConst().ElemId.HS.Btn.BigRed, () => this.ExternalCall.__hndlrAddCETab);
        this.UiMan().AssignOnClickEvent(this.PopConst().ElemId.HS.Legend.LgndDebug, (evt) => { this.InternalCall.__toggleAccordian(evt); });
        this.UiMan().AssignOnClickEvent(this.PopConst().ElemId.HS.Legend.LgndForeSite, (evt) => { this.InternalCall.__toggleAccordian(evt); });
        this.UiMan().AssignOnClickEvent(this.PopConst().ElemId.HS.Legend.LgndHindSite, (evt) => { this.InternalCall.__toggleAccordian(evt); });
        this.UiMan().AssignOnClickEvent(this.PopConst().ElemId.HS.Legend.LgndInSite, (evt) => { this.InternalCall.__toggleAccordian(evt); });
        this.UiMan().AssignOnClickEvent(this.PopConst().ElemId.HS.Legend.LgndSettings, (evt) => { this.InternalCall.__toggleAccordian(evt); });
        this.UiMan().AssignOnClickEvent(this.PopConst().ElemId.HS.Legend.LgndState, (evt) => { this.InternalCall.__toggleAccordian(evt); });
        this.UiMan().AssignOnClickEvent(this.PopConst().Selector.HS.iCBoxdSettingsShowDebugData, (evt) => { this.InternalCall.__showDebugButtonClicked(evt); });
        this.debug().FuncEnd(this.__wireMenuButtons.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/PopUpMessagesManager.js
var PopUpMessagesManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class PopUpMessagesManager_PopUpMessagesManager extends PopUpManagerBase {
    Init() {
        var self = this;
    }
    ReceiveResponseHndlr(response) {
        this.debug().FuncStart(this.ReceiveResponseHndlr.name, this.Utilites().MsgFlagAsString(response.MsgFlag));
        if (response) {
            this.UiMan().PopulateContentState(response.State);
            switch (response.MsgFlag) {
                case MsgFlag.RespCurState:
                    break;
                default:
                    this.debug().LogVal('Unrecognized MsgFlag', this.Utilites().MsgFlagAsString(response.MsgFlag));
                    break;
            }
            this.debug().LogVal('response', JSON.stringify(response));
            this.debug().FuncEnd(this.ReceiveResponseHndlr.name, this.Utilites().MsgFlagAsString(response.MsgFlag));
        }
    }
    ReceiveMessageHndlr(msgPayload) {
        this.debug().FuncStart(this.ReceiveMessageHndlr.name, this.Utilites().MsgFlagAsString(msgPayload.MsgFlag));
        this.debug().LogVal('greeting', msgPayload.greeting);
        this.debug().FuncEnd(this.ReceiveMessageHndlr.name, this.Utilites().MsgFlagAsString(msgPayload.MsgFlag));
    }
    SendMessageToSingleTab(tab, messageToSend) {
        browser.tabs.sendMessage(tab.id, messageToSend).then((response) => {
            console.log('dealing with a response }}}}}}}}}}}}}}}}}}}}}}}}}}}');
            this.debug().LogVal('response', JSON.stringify(response));
            var asImsg = response;
            if (asImsg) {
                this.debug().Log("Message from the content script:");
                this.debug().Log(JSON.stringify(asImsg));
                this.debug().Log(this.Utilites().MsgFlagAsString(asImsg.MsgFlag));
                this.debug().Log(asImsg.greeting);
                this.ReceiveResponseHndlr(asImsg);
            }
            else {
                this.debug().Error(this.SendMessageToTabs.name, 'response is not imsg');
            }
        }).catch(this.onError);
    }
    SendMessageToTabs(tabs, messageToSend) {
        this.debug().FuncStart(this.SendMessageToTabs.name, this.Utilites().MsgFlagAsString(messageToSend.MsgFlag));
        for (let tab of tabs) {
            this.SendMessageToSingleTab(tab, messageToSend);
        }
        this.debug().FuncEnd(this.SendMessageToTabs.name);
    }
    onError(error) {
        console.error(`Error: ${error}`);
    }
    handleError(reason) {
    }
    SendMessageHndlr(msgPlayload) {
        return PopUpMessagesManager_awaiter(this, void 0, void 0, function* () {
            this.debug().FuncStart(this.SendMessageHndlr.name, this.Utilites().MsgFlagAsString(msgPlayload.MsgFlag));
            yield browser.tabs.query({
                currentWindow: true,
                active: true
            }).then((tabs) => this.SendMessageToTabs(tabs, msgPlayload)).catch(this.onError);
            this.debug().FuncEnd(this.SendMessageHndlr.name, this.Utilites().MsgFlagAsString(msgPlayload.MsgFlag));
        });
    }
    FromAtticDrawStorage() {
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/PopUpAtticManager.js

class PopUpAtticManager_PopUpAtticManager extends PopUpManagerBase {
    Init() {
        var prefs = this.CurrentSettings().MenuPrefs;
        if (prefs.MenuX && prefs.MenuY) {
            var currentX = window.screenLeft;
            var currentY = window.screenTop;
            var deltaX = Math.abs(prefs.MenuX - currentX);
            var deltaY = Math.abs(prefs.MenuY - currentY);
            window.moveTo(Math.abs(prefs.MenuX), Math.abs(prefs.MenuY));
        }
        if (prefs.MenuWidth && prefs.MenuHeight) {
            if (prefs.MenuHeight < this.PopConst().Numbers.MinMenuHeight) {
                prefs.MenuHeight = this.PopConst().Numbers.MinMenuHeight;
            }
            if (prefs.MenuWidth < this.PopConst().Numbers.MinMenuWidth) {
                prefs.MenuWidth = this.PopConst().Numbers.MinMenuWidth;
            }
            window.resizeTo(Math.abs(prefs.MenuWidth), Math.abs(prefs.MenuHeight));
        }
    }
    UpdateMenuCoords(menuData) {
        var settings = this.CurrentSettings();
        settings.MenuPrefs = menuData;
        this.StoreSettings(settings);
    }
    __drawSettings() {
        var toReturn = [];
        var settings = this.CurrentSettings();
        toReturn.push('----- Settings - Accordian ------');
        for (var idx = 0; idx < settings.Accordian.length; idx++) {
            toReturn.push(settings.Accordian[idx].ElemId + ':' + settings.Accordian[idx].isCollapsed.toString());
        }
        return toReturn;
    }
    GetDefaultSettings() {
        this.debug().FuncStart(this.GetDefaultSettings.name);
        let defaultDebugSettings = {
            KeepDialogOpen: this.PopConst().Storage.DefaultDebugKeepDialogOpen,
            ShowDebugData: this.PopConst().Storage.DefaultShowDebugData,
        };
        let defaultMenuPrefs = {
            MenuHeight: null,
            MenuWidth: null,
            MenuX: null,
            MenuY: null
        };
        let toReturn = {
            DebugSettings: defaultDebugSettings,
            Accordian: [],
            MenuPrefs: defaultMenuPrefs
        };
        this.DebugSettings(toReturn);
        this.debug().FuncEnd(this.GetDefaultSettings.name);
        return toReturn;
    }
    DebugSettings(toReturn) {
        this.debug().FuncStart(this.DebugSettings.name);
        this.debug().LogVal('Settings', JSON.stringify(toReturn));
        this.debug().FuncEnd(this.DebugSettings.name);
    }
    CurrentSettings() {
        this.debug().FuncStart(this.CurrentSettings.name);
        var defaultSettings = this.GetDefaultSettings();
        var toReturn;
        var settingsRaw = window.localStorage.getItem(this.PopConst().Storage.WindowRoot + this.PopConst().Storage.SettingsSuffix);
        if (settingsRaw) {
            toReturn = JSON.parse(settingsRaw);
        }
        if (!toReturn) {
            toReturn = defaultSettings;
        }
        this.debug().NotNullCheck('toReturn', toReturn);
        if (!toReturn.DebugSettings) {
            toReturn.DebugSettings = defaultSettings.DebugSettings;
        }
        if (!toReturn.DebugSettings.KeepDialogOpen) {
            toReturn.DebugSettings.KeepDialogOpen = defaultSettings.DebugSettings.KeepDialogOpen;
        }
        if (!toReturn.DebugSettings.ShowDebugData) {
            toReturn.DebugSettings.ShowDebugData = defaultSettings.DebugSettings.ShowDebugData;
        }
        if (!toReturn.Accordian) {
            toReturn.Accordian = [];
        }
        if (!toReturn.MenuPrefs) {
            toReturn.MenuPrefs = defaultSettings.MenuPrefs;
        }
        this.debug().FuncEnd(this.CurrentSettings.name);
        return toReturn;
    }
    StoreSettings(currentSettings) {
        window.localStorage.setItem(this.PopConst().Storage.WindowRoot + this.PopConst().Storage.SettingsSuffix, JSON.stringify(currentSettings));
    }
    UpdateAccodianState(needleKey, isCollapsed) {
        this.debug().FuncStart(this.UpdateAccodianState.name, needleKey + ' ' + isCollapsed);
        var settings = this.CurrentSettings();
        var accordianPairs = settings.Accordian;
        var found = null;
        for (var idx = 0; idx < accordianPairs.length; idx++) {
            var candidate = accordianPairs[idx];
            if (candidate.ElemId === needleKey) {
                found = true;
                candidate.isCollapsed = isCollapsed;
                break;
            }
        }
        if (!found) {
            var newSetting = {
                ElemId: needleKey,
                isCollapsed: isCollapsed
            };
            accordianPairs.push(newSetting);
        }
        this.StoreSettings(settings);
        this.debug().FuncStart(this.UpdateAccodianState.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/GuidHelper.js
class GuidHelper {
    constructor(debug) {
        this.ShortGuidLength = 4;
        this.Debug = debug;
    }
    EmptyGuid() {
        return this.ParseGuid('00000000-0000-0000-0000-000000000000');
    }
    newGuidString() {
        var toReturn;
        var temp = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
        toReturn = temp.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0;
            var v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
        return toReturn;
    }
    NewGuid() {
        var toReturn = this.ParseGuid(this.newGuidString());
        return toReturn;
    }
    ShortGuid(Id) {
        var toReturn = '{error}';
        if (Id && Id.AsString.length > this.ShortGuidLength) {
            toReturn = Id.AsString.substr(0, this.ShortGuidLength);
        }
        else {
            this.Debug.DebugIGuid(Id);
            this.Debug.LogVal('Length', Id.AsString.length);
            this.Debug.LogVal('ShortLength', this.ShortGuidLength);
        }
        return toReturn;
    }
    ParseGuid(val) {
        let toReturn = {
            AsString: val,
            AsShort: ''
        };
        toReturn.AsShort = this.ShortGuid(toReturn);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/Utilities.js




class Utilities_Utilities {
    constructor(debug) {
        debug.FuncStart(Utilities_Utilities.name);
        this.Debug = debug;
        this.GuidMan = new GuidHelper(debug);
        debug.FuncEnd(Utilities_Utilities.name);
    }
    SelectHeaderStr() {
        let toReturn = '';
        toReturn += StaticHelpers.BufferString('...Time Stamp', 23, '.', false);
        toReturn += StaticHelpers.BufferString('- Page Type', 20, '.', false, false);
        toReturn += StaticHelpers.BufferString('- Nickname', 16, '.', false, false);
        toReturn += StaticHelpers.BufferString('- Fav.', 4, '.', false);
        return toReturn;
    }
    MakeSelectorFromId(TabId) {
        return '[id=' + TabId + ']';
    }
    MsgFlagAsString(msg) {
        var toReturn = "{error}";
        try {
            toReturn = MsgFlag[msg];
        }
        catch (e) {
        }
        return 'flag: ' + toReturn;
    }
    TimeNicknameFavStr(data) {
        var typeStr = (data.WindowType === scWindowType.Unknown) ? '?' : scWindowType[data.WindowType];
        return this.MakeFriendlyDate(data.TimeStamp)
            + ' - ' + StaticHelpers.BufferString(typeStr, 17, ' ', false)
            + ' - ' + StaticHelpers.BufferString(data.NickName, 16, ' ', false)
            + ' - ' + StaticHelpers.BufferString((data.IsFavorite ? '*' : ' '), 1);
    }
    MakeFriendlyDate(date) {
        var year = date.getFullYear();
        var month = date.getMonth();
        var day = StaticHelpers.BufferString(date.getDay().toString(), 2, '0');
        var min = StaticHelpers.BufferString(date.getMinutes().toString(), 2, '0');
        var hoursRaw = date.getHours();
        var ampm = hoursRaw >= 12 ? 'pm' : 'am';
        hoursRaw = hoursRaw % 12;
        var hourClean = hoursRaw ? hoursRaw : 12;
        var hourCleanStr = StaticHelpers.BufferString(hourClean.toString(), 2, '0');
        var toReturn = year + '.' + month + '.' + day + ' ' + hourCleanStr + ':' + min + ' ' + ampm;
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/FeedbackManager.js

class FeedbackManager_FeedbackManager extends PopUpManagerBase {
    constructor(popHub) {
        super(popHub);
    }
    __getTextArea() {
        return document.getElementById(this.PopConst().ElemId.textAreaFeedback);
    }
    WriteLine(text) {
        var ta = this.__getTextArea();
        if (ta) {
            ta.value += text + '\n';
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/scMode.js
var scMode;
(function (scMode) {
    scMode[scMode["Unknown"] = 0] = "Unknown";
    scMode[scMode["Edit"] = 1] = "Edit";
    scMode[scMode["Preview"] = 2] = "Preview";
    scMode[scMode["Normal"] = 3] = "Normal";
})(scMode || (scMode = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Classes/PopConst.js

class PopConst {
}
PopConst.PopConst = {
    ClassNames: {
        HS: {
            Collapsed: 'in',
        },
    },
    ElemId: {
        textAreaFeedback: 'ta-feedback',
        InputNickname: 'inputNickname',
        HindSiteParentInfo: 'spanParentInfo',
        HS: {
            TabId: 'orig-win-id',
            Btn: {
                AdminB: 'AdminB',
                ToggleFavoriteB: 'ToggleFavorite',
                Cancel: 'Cancel',
                CE: 'CE',
                Desktop: 'Desktop',
                DrawStorage: 'DrawLocalStorage',
                BigRed: 'BigRed',
                ModeEdit: 'Edit',
                ModeNorm: 'Norm',
                ModePrev: 'Prev',
                QuickPublish: 'QuickPublish',
                RemoveFromStorage: 'RemoveOneFromLocalStorage',
                RestoreWindowState: 'RestoreWindowState',
                SaveWindowState: 'SaveWindowState',
                UpdateNicknameB: 'UpdateNickname',
            },
            Legend: {
                LgndSettings: 'lgnd-settings',
                LgndInSite: 'lgnd-in-site',
                LgndHindSite: 'lgnd-hind-site',
                LgndDebug: 'lgnd-debug',
                LgndForeSite: 'lgnd-fore-site',
                LgndState: 'lgnd-state',
            }
        }
    },
    Numbers: {
        MinMenuHeight: 600,
        MinMenuWidth: 600,
    },
    Notify: {
        Default: 'Complete',
        PublishComplete: 'Publishing Complete',
    },
    ScMode: {
        edit: { AsEnum: scMode.Edit, AsString: 'edit' },
        normal: { AsEnum: scMode.Normal, AsString: 'normal' },
        preview: { AsEnum: scMode.Preview, AsString: 'preview' },
    },
    Selector: {
        HS: {
            iCBoxdSettingsShowDebugData: '[id=id-settings-show-debug-data]',
            IdFieldSetDebug: '[id=id-fieldset-debug]',
            menuOverlay: '[id=id-menu-overlay]',
            PrefAutoLogin: '[id=id-settings-auto-login]',
            SelStateSnapShot: '[id=selState]',
            TaDebug: '[id=ta-debug]',
            TaState: '[id=ta-state]'
        },
    },
    Storage: {
        DefaultDebugKeepDialogOpen: true,
        WindowRoot: 'todo',
        SettingsSuffix: 'todo',
        DefaultShowDebugData: true
    },
    Timeouts: {
        WaitBeforeRemovingCompleteFlag: 1500,
    },
};

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/PopUpHub.js









class PopUpHub_PopUpHub {
    constructor() {
        this.debug = new PopUpDebug_PopUpDebug(window);
        this.debug.Enabled = true;
        console.log('enabled? ' + this.debug.Enabled);
        this.PopUpAtticMan = new PopUpAtticManager_PopUpAtticManager(this);
        console.log("asdfasdfsdafa");
        console.log("dafsadfdsafsdafsaasdfasdfsa");
        this.debug.LogVal("dddd", "eeee");
        this.PopMsgMan = new PopUpMessagesManager_PopUpMessagesManager(this);
        this.UiMan = new UiManager_UiManager(this);
        this.EventMan = new EventManager_EventManager(this);
        this.GuidMan = new GuidHelper(this.debug);
        this.PopUpConst = PopConst.PopConst;
        this.Utilities = new Utilities_Utilities(this.debug);
        this.FeedbackMan = new FeedbackManager_FeedbackManager(this);
        this.init();
    }
    init() {
        this.debug.FuncStart(this.init.name, PopUpHub_PopUpHub.name);
        this.EventMan.Init();
        this.PopMsgMan.Init();
        this.UiMan.Init();
        this.debug.FuncEnd(this.init.name, PopUpHub_PopUpHub.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/EntryPoint.js

console.log('did it');
new PopUpHub_PopUpHub();


/***/ })
/******/ ]);