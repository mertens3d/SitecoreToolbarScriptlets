/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/3xxx-SettingKey.js
var _3xxx_SettingKey_SettingKey;
(function (SettingKey) {
    SettingKey[SettingKey["unknown"] = 0] = "unknown";
    SettingKey[SettingKey["AutoLogin"] = 3100] = "AutoLogin";
    SettingKey[SettingKey["__dead101"] = 3101] = "__dead101";
    SettingKey[SettingKey["DebugKeepDialogOpen"] = 3102] = "DebugKeepDialogOpen";
    SettingKey[SettingKey["AutoSaveIntervalMin"] = 3103] = "AutoSaveIntervalMin";
    SettingKey[SettingKey["UseCompactCss"] = 3104] = "UseCompactCss";
    SettingKey[SettingKey["AutoSaveRetainDays"] = 3105] = "AutoSaveRetainDays";
    SettingKey[SettingKey["MaxAutoSaveCount"] = 3200] = "MaxAutoSaveCount";
    SettingKey[SettingKey["LogToConsole"] = 3201] = "LogToConsole";
    SettingKey[SettingKey["LgndPopUpLog"] = 3300] = "LgndPopUpLog";
    SettingKey[SettingKey["LgndForeSite"] = 3301] = "LgndForeSite";
    SettingKey[SettingKey["LgndHindSite"] = 3302] = "LgndHindSite";
    SettingKey[SettingKey["LgndSettings"] = 3303] = "LgndSettings";
    SettingKey[SettingKey["LgndContentState"] = 3304] = "LgndContentState";
    SettingKey[SettingKey["_unused_"] = 3305] = "_unused_";
    SettingKey[SettingKey["LgndMessages"] = 3306] = "LgndMessages";
    SettingKey[SettingKey["LgndBrowserState"] = 3307] = "LgndBrowserState";
    SettingKey[SettingKey["LgndPopUpState"] = 3308] = "LgndPopUpState";
    SettingKey[SettingKey["LastUsedLogToStorageKey"] = 3400] = "LastUsedLogToStorageKey";
    SettingKey[SettingKey["AutoSnapshotBeforeWindowChange"] = 3401] = "AutoSnapshotBeforeWindowChange";
})(_3xxx_SettingKey_SettingKey || (_3xxx_SettingKey_SettingKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/HelperBase.js
class HelperBase {
    constructor(logger, helperAgent) {
        this.Logger = logger;
        this.HelperAgent = helperAgent;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/SharedConst.js
let SharedConst = (() => {
    class SharedConst {
    }
    SharedConst.Const = {
        IterHelper: {
            GrowthPerIteration: 0.5,
            MaxCount: {
                Default: 10,
                OverridePublishing: 15,
            },
            Timeouts: {
                Max: 10000,
                Default: 100,
            },
        },
        Settings: {
            Defaults: {
                LogToConsole: true,
                LogToStorage: true,
                UseCompactCss: false,
            }
        },
        Regex: {
            ContentEditor: /Content.*?Editor/ig,
            CleanGuid: /{|-|}/ig,
            NbSp: /&nbsp;/ig,
            QueryStrSeparatorQuest: /\?/gi,
            PageType: {
                Desktop: /.*default.aspx/ig,
                Edit: /sc_itemid=.*sc_mode=edit/ig,
                Normal: /sc_itemid=.*sc_mode=normal/ig,
                Preview: /sc_itemid=.*sc_mode=preview/ig,
            },
        },
        UrlSuffix: {
            Desktop: '/sitecore/shell/default.aspx',
            Login: '/sitecore/login',
            LaunchPad: '/client/applications/launchpad',
            CE: '/sitecore/shell/Applications/Content Editor.aspx?sc_bw=1',
            None: '/',
        },
    };
    return SharedConst;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/GuidHelper.js


class GuidHelper_GuidHelper extends HelperBase {
    constructor() {
        super(...arguments);
        this.ShortGuidLength = 4;
    }
    EmptyGuidJustNumbers() {
        return '00000000000000000000000000000000';
    }
    EmptyGuid() {
        return this.ParseGuid('00000000-0000-0000-0000-000000000000', true);
    }
    newGuidString() {
        var toReturn;
        var temp = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
        toReturn = temp.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0;
            var v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
        return toReturn;
    }
    NewGuid() {
        var toReturn = this.ParseGuid(this.newGuidString(), true);
        return toReturn;
    }
    ShortGuid(Id) {
        var toReturn = '{error}';
        if (Id && Id.AsString.length > this.ShortGuidLength) {
            toReturn = Id.AsString.substr(0, this.ShortGuidLength);
        }
        else {
            this.Logger.DebugIGuid(Id);
            this.Logger.LogVal('Length', Id.AsString.length);
            this.Logger.LogVal('ShortLength', this.ShortGuidLength);
        }
        return toReturn;
    }
    FormatJustNumbers(str) {
        return str.replace(SharedConst.Const.Regex.CleanGuid, '');
    }
    FormatAsBracedGuid(str, throwOnError) {
        var GUID;
        try {
            var parts = [];
            if (str.length !== 32 && throwOnError) {
                this.Logger.ErrorAndThrow(this.FormatAsBracedGuid.name, 'Wrong count wanted: ' + 32 + " got: " + str.length);
            }
            parts.push(str.slice(0, 8));
            parts.push(str.slice(8, 12));
            parts.push(str.slice(12, 16));
            parts.push(str.slice(16, 20));
            parts.push(str.slice(20, 32));
            GUID = '{' + parts.join('-') + '}';
        }
        catch (ex) {
            this.Logger.ErrorAndThrow(this.FormatAsBracedGuid.name, ex);
        }
        return GUID;
    }
    ParseGuid(val, throwOnError) {
        let justNumbers = this.FormatJustNumbers(val);
        let guidFormat = this.FormatAsBracedGuid(justNumbers, throwOnError);
        let toReturn = {
            AsString: justNumbers,
            AsBracedGuid: guidFormat,
            AsShort: '',
            Type: 'IGuid'
        };
        toReturn.AsShort = this.ShortGuid(toReturn);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/1xxx-MessageFlag.js
var MsgFlag;
(function (MsgFlag) {
    MsgFlag[MsgFlag["Unknown"] = 0] = "Unknown";
    MsgFlag[MsgFlag["GetAllStorageOneWindow"] = 1001] = "GetAllStorageOneWindow";
    MsgFlag[MsgFlag["NewWindowTest"] = 1002] = "NewWindowTest";
    MsgFlag[MsgFlag["Ping"] = 1003] = "Ping";
    MsgFlag[MsgFlag["RemoveFromStorage"] = 1004] = "RemoveFromStorage";
    MsgFlag[MsgFlag["ReqAddCETab"] = 1100] = "ReqAddCETab";
    MsgFlag[MsgFlag["ReqAdminB"] = 1101] = "ReqAdminB";
    MsgFlag[MsgFlag["ReqGoDesktop"] = 1102] = "ReqGoDesktop";
    MsgFlag[MsgFlag["ReqLoginWithAdminB"] = 1103] = "ReqLoginWithAdminB";
    MsgFlag[MsgFlag["ReqMarkFavorite"] = 1104] = "ReqMarkFavorite";
    MsgFlag[MsgFlag["ReqOpenCE"] = 1105] = "ReqOpenCE";
    MsgFlag[MsgFlag["ReqQuickPublish"] = 1106] = "ReqQuickPublish";
    MsgFlag[MsgFlag["ReqRestoreClick"] = 1107] = "ReqRestoreClick";
    MsgFlag[MsgFlag["Unused"] = 1108] = "Unused";
    MsgFlag[MsgFlag["ReqSetScMode"] = 1109] = "ReqSetScMode";
    MsgFlag[MsgFlag["ReqTakeSnapShot"] = 1110] = "ReqTakeSnapShot";
    MsgFlag[MsgFlag["ReqToggleCompactCss"] = 1111] = "ReqToggleCompactCss";
    MsgFlag[MsgFlag["ReqUpdateNickName"] = 1112] = "ReqUpdateNickName";
    MsgFlag[MsgFlag["RespCurState"] = 1200] = "RespCurState";
    MsgFlag[MsgFlag["RespError"] = 1201] = "RespError";
    MsgFlag[MsgFlag["RespListeningAndReady"] = 1202] = "RespListeningAndReady";
    MsgFlag[MsgFlag["RespTaskFailed"] = 1203] = "RespTaskFailed";
    MsgFlag[MsgFlag["RespTaskSuccessful"] = 1204] = "RespTaskSuccessful";
    MsgFlag[MsgFlag["RespTest"] = 1205] = "RespTest";
    MsgFlag[MsgFlag["RespNotReady"] = 1206] = "RespNotReady";
})(MsgFlag || (MsgFlag = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferChar.js
var BufferChar;
(function (BufferChar) {
    BufferChar[BufferChar["space"] = 0] = "space";
    BufferChar[BufferChar["Nbsp"] = 1] = "Nbsp";
    BufferChar[BufferChar["Period"] = 2] = "Period";
    BufferChar[BufferChar["Zero"] = 3] = "Zero";
})(BufferChar || (BufferChar = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/BufferDirection.js
var BufferDirection;
(function (BufferDirection) {
    BufferDirection[BufferDirection["left"] = 0] = "left";
    BufferDirection[BufferDirection["right"] = 1] = "right";
})(BufferDirection || (BufferDirection = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/scWindowType.js
var scWindowType_scWindowType;
(function (scWindowType) {
    scWindowType[scWindowType["Unknown"] = 0] = "Unknown";
    scWindowType[scWindowType["LoginPage"] = 1] = "LoginPage";
    scWindowType[scWindowType["Desktop"] = 2] = "Desktop";
    scWindowType[scWindowType["ContentEditor"] = 3] = "ContentEditor";
    scWindowType[scWindowType["Launchpad"] = 4] = "Launchpad";
    scWindowType[scWindowType["Edit"] = 5] = "Edit";
    scWindowType[scWindowType["Normal"] = 6] = "Normal";
    scWindowType[scWindowType["Preview"] = 7] = "Preview";
})(scWindowType_scWindowType || (scWindowType_scWindowType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SnapShotFlavor.js
var SnapShotFlavor;
(function (SnapShotFlavor) {
    SnapShotFlavor[SnapShotFlavor["Unknown"] = 0] = "Unknown";
    SnapShotFlavor[SnapShotFlavor["Autosave"] = 1] = "Autosave";
    SnapShotFlavor[SnapShotFlavor["Favorite"] = 2] = "Favorite";
    SnapShotFlavor[SnapShotFlavor["Manual"] = 3] = "Manual";
})(SnapShotFlavor || (SnapShotFlavor = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/StaticHelpers.js






class StaticHelpers_StaticHelpers {
    static MinToMs(minutes) {
        return minutes * 60 * 1000;
    }
    static FlavorAsString(flavor) {
        return 'Flavor.' + SnapShotFlavor[flavor] + '(' + flavor + ')';
    }
    static SettingKeyAsString(settingKey) {
        return 'SettingKey.' + _3xxx_SettingKey_SettingKey[settingKey] + '(' + settingKey + ')';
    }
    static WindowTypeAsString(windowType) {
        return scWindowType_scWindowType[windowType];
    }
    static BufferString(str, desiredLength, buffCharEnum, direction) {
        var toReturn = str;
        var buffChar = ' ';
        if (buffCharEnum === BufferChar.space) {
            buffChar = ' ';
        }
        else if (buffCharEnum === BufferChar.Nbsp) {
            buffChar = '&nbsp;';
        }
        else if (buffCharEnum === BufferChar.Period) {
            buffChar = '.';
        }
        else if (buffCharEnum === BufferChar.Zero) {
            buffChar = '0';
        }
        if (toReturn.length > desiredLength) {
            if (desiredLength > 6) {
                toReturn = toReturn.substring(0, desiredLength - 3) + '...';
            }
            else {
                toReturn = toReturn.substring(0, desiredLength);
            }
        }
        if (toReturn.length < desiredLength) {
            var bufferCharNeeded = desiredLength - toReturn.length;
            for (var idx = 0; idx < bufferCharNeeded; idx++) {
                if (direction === BufferDirection.left) {
                    toReturn = buffChar + toReturn;
                }
                else {
                    toReturn = toReturn + buffChar;
                }
            }
        }
        return toReturn;
    }
    static MsgFlagAsString(msg) {
        var toReturn = "{error}";
        if (msg) {
            try {
                toReturn = 'MsgFlag.' + MsgFlag[msg] + '(' + msg + ')';
            }
            catch (e) {
            }
        }
        return 'flag: ' + toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/UtilityHelper.js




class UtilityHelper_UtilityHelper extends HelperBase {
    MakeSelectorFromId(TabId) {
        return '[id=' + TabId + ']';
    }
    MakeFriendlyDate(date) {
        var toReturn = '';
        var workingDate = new Date(date);
        if (workingDate) {
            var month = StaticHelpers_StaticHelpers.BufferString((workingDate.getMonth() + 1).toString(), 2, BufferChar.Zero, BufferDirection.left);
            var day = StaticHelpers_StaticHelpers.BufferString(workingDate.getDate().toString(), 2, BufferChar.Zero, BufferDirection.left);
            var min = StaticHelpers_StaticHelpers.BufferString(workingDate.getMinutes().toString(), 2, BufferChar.Zero, BufferDirection.left);
            var hoursRaw = workingDate.getHours();
            var hourClean = hoursRaw ? hoursRaw : 12;
            var hourCleanStr = StaticHelpers_StaticHelpers.BufferString(hourClean.toString(), 2, BufferChar.Zero, BufferDirection.left);
            toReturn = month + '.' + day + ' ' + hourCleanStr + ':' + min;
        }
        else {
            toReturn = '{error}';
            this.Logger.ErrorAndThrow(this.MakeFriendlyDate.name, 'no date provided');
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Drones/IterationDrone/IterationDrone.js

class IterationDrone_IterationDrone {
    constructor(logger, nickname, maxIterations = null) {
        this.IsExhaustedMsg = 'Iteration helper exhausted';
        this.Logger = logger;
        if (!maxIterations) {
            maxIterations = SharedConst.Const.IterHelper.MaxCount.Default;
        }
        this.__maxIterations = maxIterations;
        this.__currentIteration = maxIterations;
        this.__timeout = SharedConst.Const.IterHelper.Timeouts.Default;
        this.__nickName = nickname;
        this.IsExhausted = false;
    }
    DecrementAndKeepGoing() {
        var toReturn = false;
        if (this.__currentIteration > 0) {
            this.__currentIteration -= 1;
            this.__timeout += this.__timeout * SharedConst.Const.IterHelper.GrowthPerIteration;
            if (this.__timeout > SharedConst.Const.IterHelper.Timeouts.Max) {
                this.__timeout = SharedConst.Const.IterHelper.Timeouts.Max;
            }
            this.Logger.Log('DecrementAndKeepGoing: ' + this.__nickName + ' ' + this.__currentIteration + ':' + this.__maxIterations + ' | timeout: ' + this.__timeout);
            toReturn = true;
        }
        else {
            this.IsExhausted = true;
            this.NotifyExhausted();
            toReturn = false;
        }
        return toReturn;
    }
    CurrentTimeout() {
        return this.__timeout;
    }
    NotifyExhausted() {
        this.Logger.Log('Iteration: ' + this.__nickName + ' counter exhausted ' + this.__currentIteration + ':' + this.__maxIterations);
    }
    WaitAndThen(timeoutFunction) {
        this.Logger.FuncStart(this.WaitAndThen.name, this.__nickName + ' ' + timeoutFunction.name);
        var self = this;
        setTimeout(timeoutFunction(), self.__timeout);
        this.Logger.FuncEnd(this.WaitAndThen.name, this.__nickName);
    }
    Wait() {
        if (!this.OperationCancelled) {
            return new Promise((resolve) => {
                setTimeout(resolve, this.__timeout);
            });
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/InjectConst.js
let ContentConst = (() => {
    class ContentConst {
    }
    ContentConst.Const = {
        MaxAutoToSaveCount: 10,
        DefaultMaxAutoSaveAgeDays: 7,
        Iterations: {
            MaxSetHrefEffort: 10,
            MaxIterationSwitchBoard: 20,
        },
        Timeouts: {
            PostLoginBtnClick: 1000,
            SetHrefEffortWait: 1000,
            WaitBeforeRemovingCompleteFlagOnContent: 1500,
            AutoSaveIntervalMin: 1,
        },
        ElemId: {
            sc: {
                scLoginUserName: 'UserName',
                scLoginPassword: 'Password',
                SitecoreRootNodeId: 'Tree_Node_11111111111111111111111111111111',
                SitecoreRootGlyphId: 'Tree_Glyph_11111111111111111111111111111111',
                scLoginBtn: {
                    sc920: 'LogInBtn',
                    sc820: null
                },
            }
        },
        ClassNames: {
            ContentTreeNode: 'scContentTreeNode',
            SC: {
                scContentTreeNodeActive: 'scContentTreeNodeActive',
            }
        },
        Selector: {
            SC: {
                ContentTreeNodeGlyph: '.scContentTreeNodeGlyph',
                IdStartsWithTreeNode: '[id^=Tree_Node_]',
                IframeContent: {
                    sc820: null,
                    sc920: 'iframe[src*=Content]'
                },
                JqueryModalDialogsFrame: '[id=jqueryModalDialogsFrame]',
                ContentIframe0: '[id=scContentIframeId0]',
                NextButton: '[id=NextButton]',
                ContentIFrame1: '[id=scContentIframeId1]',
                Ok: '[id=OK]',
                Cancel: '[id=CancelButton]',
                MenuButtonPublish: '[id=B414550BADAF4542C9ADF44BED5FA6CB3E_menu_button]',
                MenuDropDownPublishItem: '[id=B414550BADAF4542C9ADF44BED5FA6CB3E_menu_98719A90225A4802A0625D3967E4DD47]',
                NavPublishStrip: '[id*=_Nav_PublishStrip]',
                StartMenuLeftOption: '.scStartMenuLeftOption',
                Publish: {
                    TheItemHasBeenPublished: '[id=LastPage]:not([style*=\'display:none\'])',
                    SettingsHidden: '[id=Settings][style*=\'display: none\']',
                    PublishingHidden: '[id=Publishing][style*=\'display: none\']',
                },
                LoginBtn: {
                    sc920: null,
                    sc820: 'input.btn',
                },
                scStartButton: {
                    sc920: '[id=StartButton]',
                    sc820: '[id=startButton]'
                },
            },
        },
        Storage: {
            SettingsSuffix: '.Settings',
            ShowDebugData: false,
            SnapShotPrefix: 'WindowSnapShot.',
            WindowRoot: 'HindSite.',
        },
        MaxIter: 100,
        MaxNullOrUndefinedIter: 100,
        prop: {
            AllTreeData: 'AllTreeData',
        },
        Names: {
            SC: {
                TreeGlyphPrefix: 'Tree_Glyph_',
                TreeNodePrefix: 'Tree_Node_',
                TreeExpandedPng: {
                    sc920: 'treemenu_expanded.png',
                    sc820: 'todo'
                }
            },
            PopUp: 'PopUp',
            PopUpStyles: 'PopUpStyles',
            TreeMenuExpandedPng: 'treemenu_expanded.png',
            TreeMenuCollapsedPng: 'treemenu_collapsed.png',
            scDefaultAdminPassword: 'b',
            scDefaultAdminUserName: 'admin',
        }
    };
    return ContentConst;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/PromiseResult.js
class PromiseResult {
    constructor(nickname, logger) {
        this.prefix = 'Promise Successful? -> ';
        this.Success = false;
        this.NickName = nickname;
        this.RejectReasonArPvt = [];
        this.Log = logger;
    }
    WasSuccessful() {
        return this.Success;
    }
    MarkSuccessful() {
        this.Success = true;
        if (this.Log) {
            this.Log.LogVal(this.prefix + this.NickName, this.Success);
        }
        else {
            console.log('no logger success');
        }
    }
    MarkFailed(ex) {
        if (ex) {
            ex = ex.toString();
        }
        else {
            ex = '{no fail message}';
        }
        this.RejectReasons += ', ' + ex;
        this.Success = false;
        if (this.Log) {
            this.Log.ErrorAndThrow(this.prefix + this.NickName, this.Success + '  err: ' + ex);
        }
        else {
            console.log('no logger fail ' + ex);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/PromiseGeneric.js
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class PromiseGeneric_PromisesBasic extends HelperBase {
    WaitForReadyIframe(dataOneIframe) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForReadyIframe.name, dataOneIframe.Nickname + ' ' + dataOneIframe.Id.AsShort);
                var iterationJr = new IterationDrone_IterationDrone(this.Logger, this.WaitForReadyIframe.name);
                let promiseResult = new PromiseResult(this.WaitForReadyIframe.name, this.Logger);
                while (iterationJr.DecrementAndKeepGoing() && !promiseResult.WasSuccessful()) {
                    var currentReadyState = dataOneIframe.IframeElem.contentDocument.readyState.toString();
                    var isReadyStateComplete = currentReadyState === 'complete';
                    var currentDocName = dataOneIframe.IframeElem.contentDocument.location.href;
                    if (isReadyStateComplete && (currentDocName !== 'about:blank')) {
                        this.Logger.LogVal('doc name', dataOneIframe.IframeElem.contentDocument.location.href);
                        promiseResult.MarkSuccessful();
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (iterationJr.IsExhausted) {
                    promiseResult.MarkFailed(iterationJr.IsExhaustedMsg);
                }
                if (promiseResult.WasSuccessful()) {
                    resolve();
                }
                else {
                    reject(promiseResult.RejectReasons);
                }
                this.Logger.FuncEnd(this.WaitForReadyIframe.name);
            }));
        });
    }
    WaitForPageReadyNative(targetDoc) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForPageReadyNative.name);
                var result = new PromiseResult(this.WaitForPageReadyNative.name, this.Logger);
                this.Logger.LogAsJsonPretty(this.WaitForPageReadyNative.name, targetDoc);
                var iterationJr = new IterationDrone_IterationDrone(this.Logger, this.WaitForPageReadyNative.name);
                var isReady = false;
                this.Logger.MarkerA();
                while (iterationJr.DecrementAndKeepGoing() && !isReady) {
                    this.Logger.MarkerB();
                    var currentReadyState = targetDoc.ContentDoc.readyState.toString();
                    var isReadyStateComplete = currentReadyState === 'complete';
                    this.Logger.LogVal('readyState', currentReadyState);
                    ;
                    this.Logger.LogVal('isReadyStateComplete', isReadyStateComplete);
                    if (isReadyStateComplete) {
                        isReady = true;
                        result.MarkSuccessful();
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (iterationJr.IsExhausted) {
                    result.MarkFailed(iterationJr.IsExhaustedMsg);
                }
                this.Logger.FuncEnd(this.WaitForPageReadyNative.name, 'ready state: ' + currentReadyState + ' is ready: ' + isReady.toString());
                ;
                if (result.WasSuccessful()) {
                    resolve();
                }
                else {
                    reject(result.RejectReasons);
                }
            }));
        });
    }
    GetTopLevelIframe(targetDoc) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.GetTopLevelIframe.name);
                var toReturn = null;
                var allIframe;
                yield this.GetAllLiveIframeData(targetDoc)
                    .then((result) => {
                    allIframe = result;
                    var maxZVal = -1;
                    if (allIframe && allIframe.length > 0) {
                        for (var idx = 0; idx < allIframe.length; idx++) {
                            var candidateIframe = allIframe[idx];
                            if (candidateIframe && candidateIframe.Zindex > maxZVal) {
                                toReturn = candidateIframe;
                                maxZVal = candidateIframe.Zindex;
                            }
                        }
                    }
                })
                    .then(() => resolve(toReturn))
                    .catch((err) => this.Logger.ErrorAndThrow(this.GetTopLevelIframe.name, err));
                this.Logger.FuncEnd(this.GetTopLevelIframe.name);
            }));
        });
    }
    WaitForIframeElemAndReturnWhenReady(haystackDoc, selector, iframeNickName) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForIframeElemAndReturnWhenReady.name);
                var toReturnIframeData = null;
                let promiseResult = new PromiseResult(this.WaitForIframeElemAndReturnWhenReady.name, this.Logger);
                yield this.WaitForAndReturnFoundElem(haystackDoc, selector)
                    .then((foundElem) => __awaiter(this, void 0, void 0, function* () {
                    if (foundElem) {
                        toReturnIframeData = this.HelperAgent.FactoryHelp.DataOneIframeFactory(foundElem, iframeNickName);
                    }
                }))
                    .then(() => this.WaitForReadyIframe(toReturnIframeData))
                    .then(() => {
                    toReturnIframeData.ContentDoc = this.HelperAgent.FactoryHelp.DataOneContentDocFactoryFromIframe(toReturnIframeData);
                    promiseResult.MarkSuccessful();
                })
                    .catch((err) => promiseResult.MarkFailed(err));
                this.Logger.FuncEnd(this.WaitForIframeElemAndReturnWhenReady.name);
                if (promiseResult.WasSuccessful()) {
                    resolve(toReturnIframeData);
                }
                else {
                    reject(promiseResult.RejectReasons);
                }
            }));
        });
    }
    GetAllLiveIframeData(targetDoc) {
        return new Promise((resolve, reject) => {
            this.Logger.FuncStart(this.GetAllLiveIframeData.name);
            let successful = true;
            let rejectReason = '';
            var toReturn = [];
            var iframeAr = targetDoc.ContentDoc.querySelectorAll(ContentConst.Const.Selector.SC.IframeContent.sc920);
            if (!iframeAr) {
                iframeAr = targetDoc.ContentDoc.querySelectorAll(ContentConst.Const.Selector.SC.IframeContent.sc820);
            }
            this.Logger.LogVal('found iframes count', iframeAr.length);
            if (iframeAr) {
                for (var ifrIdx = 0; ifrIdx < iframeAr.length; ifrIdx++) {
                    this.Logger.Log('pushing: ' + ifrIdx);
                    var iframeElem = iframeAr[ifrIdx];
                    var dataOneIframe = this.HelperAgent.FactoryHelp.DataOneIframeFactory(iframeElem, 'desktop Iframe_' + ifrIdx);
                    toReturn.push(dataOneIframe);
                }
            }
            else {
                successful = false;
                rejectReason = 'no iframes found';
                this.Logger.Log(rejectReason);
            }
            this.Logger.LogVal('GetAllLiveIframeData: iframe count', toReturn.length);
            if (successful) {
                resolve(toReturn);
            }
            else {
                reject(rejectReason);
            }
            this.Logger.FuncEnd(this.GetAllLiveIframeData.name);
        });
    }
    WaitForNewIframe(allIframesBefore, targetDoc) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForNewIframe.name);
                this.Logger.LogAsJsonPretty('allIframesBefore', allIframesBefore);
                this.Logger.ThrowIfNullOrUndefined(this.WaitForNewIframe.name, allIframesBefore);
                this.Logger.ThrowIfNullOrUndefined(this.WaitForNewIframe.name, targetDoc);
                var toReturn = null;
                var iterationJr = new IterationDrone_IterationDrone(this.Logger, this.WaitForNewIframe.name);
                let beforeCount = allIframesBefore.length;
                while (!toReturn && iterationJr.DecrementAndKeepGoing()) {
                    var allIframesAfter;
                    yield this.GetAllLiveIframeData(targetDoc)
                        .then((result) => allIframesAfter = result)
                        .catch((err) => this.Logger.ErrorAndThrow(this.WaitForNewIframe.name, err));
                    var count = allIframesAfter.length;
                    this.Logger.Log('iFrame count before: ' + beforeCount);
                    this.Logger.Log('iFrame count after: ' + allIframesAfter.length);
                    if (count > beforeCount) {
                        var newIframes = allIframesAfter.filter(e => !allIframesBefore.includes(e));
                        toReturn = newIframes[0];
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                this.Logger.FuncEnd(this.WaitForNewIframe.name);
                if (toReturn) {
                    resolve(toReturn);
                }
                else {
                    reject(iterationJr.IsExhaustedMsg);
                }
            }));
        });
    }
    WaitForAndReturnFoundElem(haystackDoc, selector, overrideIterCount = 8) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.WaitForAndReturnFoundElem.name);
                this.Logger.LogVal('selector', selector);
                this.Logger.LogVal('doc nickname', haystackDoc.Nickname);
                var toReturnFoundElem = null;
                let promiseResult = new PromiseResult(this.WaitForAndReturnFoundElem.name, this.Logger);
                var iterationJr = new IterationDrone_IterationDrone(this.Logger, this.WaitForAndReturnFoundElem.name, overrideIterCount);
                while (!toReturnFoundElem && iterationJr.DecrementAndKeepGoing()) {
                    this.Logger.LogVal('targetDoc.Document', haystackDoc.ContentDoc.toString());
                    this.Logger.LogVal('targetDoc.Document.location', haystackDoc.ContentDoc.location.toString());
                    this.Logger.LogVal('targetDoc.Document.location.href', haystackDoc.ContentDoc.location.href);
                    toReturnFoundElem = haystackDoc.ContentDoc.querySelector(selector);
                    if (toReturnFoundElem) {
                        this.Logger.Log('found');
                        this.Logger.LogVal('found.style.display', toReturnFoundElem.style.display);
                        promiseResult.MarkSuccessful();
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
                if (!toReturnFoundElem && iterationJr.IsExhausted) {
                    promiseResult.MarkFailed(iterationJr.IsExhaustedMsg);
                }
                this.Logger.FuncEnd(this.WaitForAndReturnFoundElem.name);
                if (promiseResult.WasSuccessful()) {
                    resolve(toReturnFoundElem);
                }
                else {
                    reject(promiseResult.RejectReasons);
                }
            }));
        });
    }
    WaitForAndClickWithPayload(selector, targetDoc, payload) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForAndClickWithPayload.name, selector);
            yield this.WaitForThenClick([selector], targetDoc)
                .then(() => resolve(payload))
                .catch(ex => {
                this.Logger.ErrorAndThrow(this.WaitForAndClickWithPayload.name, ex);
                reject(ex);
            });
        }));
    }
    TabWaitForReadyStateCompleteNative(browserTab) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let iterHelper = new IterationDrone_IterationDrone(this.Logger, this.TabWaitForReadyStateCompleteNative.name);
            let result = new PromiseResult(this.TabWaitForReadyStateCompleteNative.name, this.Logger);
            while (browserTab.status !== 'complete' && iterHelper.DecrementAndKeepGoing()) {
                this.Logger.LogVal('tab status', browserTab.status);
                yield iterHelper.Wait;
            }
            if (browserTab.status === 'complete') {
                result.MarkSuccessful();
            }
            else {
                result.MarkFailed('browser status: ' + browserTab.status);
                if (iterHelper.IsExhausted) {
                    result.MarkFailed(iterHelper.IsExhaustedMsg);
                }
            }
            if (result.WasSuccessful()) {
                resolve();
            }
            else {
                reject(result.RejectReasons);
            }
        }));
    }
    TabChainSetHrefWaitForComplete(href) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.TabChainSetHrefWaitForComplete.name, href.AbsUrl);
            yield browser.tabs.query({ currentWindow: true, active: true })
                .then((result) => {
                let targetTab = result[0];
                browser.tabs.update(targetTab.id, { url: href.AbsUrl });
                this.TabWaitForReadyStateCompleteNative(targetTab);
            })
                .then(resolve)
                .catch((ex) => reject(ex));
            this.Logger.FuncEnd(this.TabChainSetHrefWaitForComplete.name, href.AbsUrl);
        }));
    }
    RaceWaitAndClick(selector, targetDoc) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.RaceWaitAndClick.name);
                yield this.WaitForThenClick([selector.sc920, selector.sc820], targetDoc)
                    .then(() => {
                    this.Logger.FuncEnd(this.RaceWaitAndClick.name);
                    resolve();
                })
                    .catch((ex) => {
                    this.Logger.FuncEnd(this.RaceWaitAndClick.name);
                    reject(ex);
                });
            }));
        });
    }
    WaitForThenClick(selectorAr, targetDoc) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForThenClick.name);
            if (targetDoc) {
                this.Logger.LogAsJsonPretty('selectors', selectorAr);
                var found = null;
                var iterationJr = new IterationDrone_IterationDrone(this.Logger, this.WaitForThenClick.name);
                while (!found && iterationJr.DecrementAndKeepGoing()) {
                    for (var idx = 0; idx < selectorAr.length; idx++) {
                        found = targetDoc.ContentDoc.querySelector(selectorAr[idx]);
                        if (found) {
                            this.Logger.LogVal('found target', selectorAr[idx]);
                            break;
                        }
                    }
                    if (found) {
                        this.Logger.Log('clicking');
                        try {
                            found.click();
                            resolve();
                        }
                        catch (err) {
                            reject(err);
                        }
                    }
                    else {
                        yield iterationJr.Wait();
                    }
                }
            }
            else {
                reject('no target doc');
            }
            if (!found && iterationJr.IsExhausted) {
                reject(iterationJr.IsExhaustedMsg);
            }
            this.Logger.FuncEnd(this.WaitForThenClick.name);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/FactoryHelper.js

class FactoryHelper_FactoryHelper extends HelperBase {
    CreateNewDtDataShell() {
        var toReturn = {
            AllCeData: [],
            livingIframeAr: [],
            ActiveCeMan: null,
            ActiveCeState: null
        };
        return toReturn;
    }
    DataOneContentDocFactoryFromIframe(dataOneIframe) {
        var toReturn = null;
        if (dataOneIframe) {
            toReturn =
                {
                    ContentDoc: dataOneIframe.IframeElem.contentDocument,
                    DocId: this.HelperAgent.GuidHelper.NewGuid(),
                    Nickname: dataOneIframe.Nickname + ' - content doc'
                };
        }
        else {
            this.Logger.ErrorAndThrow(this.DataOneContentDocFactoryFromIframe.name, 'no iframe provided');
        }
        return toReturn;
    }
    DataOneIframeFactory(iframeElem, nickname) {
        this.Logger.FuncStart(this.DataOneIframeFactory.name);
        var toReturn = null;
        if (iframeElem && nickname) {
            let zIndex = -1;
            if (iframeElem && iframeElem.style && iframeElem.style.zIndex) {
                zIndex = parseInt(iframeElem.style.zIndex);
            }
            var toReturn = {
                Index: -1,
                IframeElem: iframeElem,
                Id: this.HelperAgent.GuidHelper.NewGuid(),
                Zindex: zIndex,
                Nickname: nickname,
                ContentDoc: null,
            };
            toReturn.ContentDoc = this.DataOneContentDocFactoryFromIframe(toReturn);
            this.Logger.FuncEnd(this.DataOneIframeFactory.name);
        }
        else {
            this.Logger.ErrorAndThrow(this.DataOneIframeFactory.name, 'one of these is null');
            this.Logger.LogAsJsonPretty('iframeElem', iframeElem);
            this.Logger.LogAsJsonPretty('nickname', nickname);
        }
        return toReturn;
    }
    CreateShellIDataOneWindowStorage(windowType, flavor) {
        this.Logger.FuncStart(this.CreateShellIDataOneWindowStorage.name);
        var dateToUse = new Date();
        var newGuid = this.HelperAgent.GuidHelper.NewGuid();
        var activeWindowSnapShot = {
            TimeStamp: dateToUse,
            TimeStampFriendly: this.HelperAgent.UtilityHelp.MakeFriendlyDate(dateToUse),
            WindowType: windowType,
            WindowFriendly: windowType[windowType],
            AllCEAr: [],
            Id: newGuid,
            NickName: '',
            RawData: null,
            Flavor: flavor,
        };
        this.Logger.FuncEnd(this.CreateShellIDataOneWindowStorage.name);
        return activeWindowSnapShot;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Drones/OneTreeDrone/OneTreeDrone.js

class OneTreeDrone_OneTreeDrone {
    constructor(logger, helperAgent, associatedDoc) {
        this.Logger = logger;
        this.HelperAgent = helperAgent;
        this.Logger.FuncStart(OneTreeDrone_OneTreeDrone.name);
        this.AssociatedDoc = associatedDoc;
        this.Logger.FuncEnd(OneTreeDrone_OneTreeDrone.name);
    }
    GetFriendlyNameFromNode(inputNode) {
        this.Logger.FuncStart(this.GetFriendlyNameFromNode.name);
        var toReturn = 'unknown';
        var parentNode = inputNode.parentNode;
        var treeNode = parentNode.querySelector(ContentConst.Const.Selector.SC.IdStartsWithTreeNode);
        if (treeNode) {
            toReturn = treeNode.innerText;
        }
        else {
            this.Logger.Log('No treeNode');
        }
        this.Logger.FuncEnd(this.GetFriendlyNameFromNode.name, toReturn);
        return toReturn;
    }
    __isActive(targetNode) {
        var toReturn = false;
        var firstNodeActiveTest = targetNode.querySelector(ContentConst.Const.Selector.SC.IdStartsWithTreeNode);
        if (firstNodeActiveTest) {
            var className = firstNodeActiveTest.className;
            if (className.indexOf(ContentConst.Const.ClassNames.SC.scContentTreeNodeActive) > -1) {
                toReturn = true;
                this.Logger.Log('** isActive ' + targetNode.innerText);
            }
        }
        return toReturn;
    }
    __isExpanded(firstImg) {
        var toReturn = false;
        if (firstImg) {
            var srcAttr = firstImg.getAttribute('src');
            if (srcAttr.indexOf(ContentConst.Const.Names.SC.TreeExpandedPng.sc920) > -1) {
                toReturn = true;
            }
            return toReturn;
        }
    }
    __isContentTreeNode(targetNode) {
        var toReturn = false;
        var className = targetNode.className;
        if (className === ContentConst.Const.ClassNames.ContentTreeNode) {
            toReturn = true;
        }
        return toReturn;
    }
    WalkNodeRecursive(targetNode, depth) {
        var toReturn = [];
        depth = depth - 1;
        if (targetNode) {
            var firstImg = targetNode.querySelector(ContentConst.Const.Selector.SC.ContentTreeNodeGlyph);
            if (this.__isContentTreeNode(targetNode)) {
                var newData = {
                    IsExpanded: this.__isExpanded(firstImg),
                    IsActive: this.__isActive(targetNode),
                    NodeFriendly: '',
                    NodeId: null
                };
                if (newData.IsExpanded || newData.IsActive) {
                    newData.NodeFriendly = this.GetFriendlyNameFromNode(firstImg);
                    var apparentId = firstImg.id.replace(ContentConst.Const.Names.SC.TreeGlyphPrefix, '');
                    newData.NodeId = this.HelperAgent.GuidHelper.ParseGuid(apparentId, true);
                    toReturn.push(newData);
                }
            }
            var childNodes = targetNode.children;
            if (childNodes && childNodes.length > 0 && depth > 0) {
                for (var jdx = 0; jdx < childNodes.length; jdx++) {
                    var oneChild = childNodes[jdx];
                    toReturn = toReturn.concat(this.WalkNodeRecursive(oneChild, depth));
                }
            }
        }
        return toReturn;
    }
    GetOneLiveTreeData() {
        this.Logger.FuncStart(this.GetOneLiveTreeData.name);
        this.Logger.Log('targetDoc isnull: ' + (this.AssociatedDoc === null));
        this.Logger.LogVal('Doc url: ', this.AssociatedDoc.ContentDoc.location.href);
        this.Logger.LogVal('Ready State: ', this.AssociatedDoc.ContentDoc.readyState);
        var toReturn = [];
        if (this.AssociatedDoc) {
            this.Logger.LogVal('Looking for node ID: ', ContentConst.Const.ElemId.sc.SitecoreRootNodeId);
            var rootNode = this.AssociatedDoc.ContentDoc.getElementById(ContentConst.Const.ElemId.sc.SitecoreRootNodeId);
            if (rootNode) {
                this.Logger.Log('rootNode: ' + rootNode.innerHTML);
                var rootParent = rootNode.parentElement;
                toReturn = this.WalkNodeRecursive(rootParent, ContentConst.Const.MaxIter);
                this.Logger.Log('foundNodes count: ' + toReturn.length);
            }
            else {
                this.Logger.ErrorAndThrow(this.GetOneLiveTreeData.name, 'no root node');
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.GetOneLiveTreeData.name, 'no targetDoc');
        }
        this.Logger.FuncEnd(this.GetOneLiveTreeData.name);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Content/scripts/Managers/OneCEAgent/OneCEAgent.js
var OneCEAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class OneCEAgent_OneCEAgent {
    constructor(associatedDoc, logger, helperAgent) {
        this.Logger = logger;
        this.HelperAgent = helperAgent;
        this.Logger.FuncStart(this.constructor.name);
        this.Logger.IsNotNullOrUndefinedBool("helperAgent", helperAgent);
        this.Logger.IsNotNullOrUndefinedBool("associatedDoc", associatedDoc);
        this.ContextDoc = associatedDoc;
        this.OneTreeDrone = new OneTreeDrone_OneTreeDrone(this.Logger, this.HelperAgent, this.ContextDoc);
        this.Logger.FuncEnd(this.constructor.name);
    }
    __activateNode(hotTreeNode) {
        this.Logger.FuncStart(this.__activateNode.name);
        this.Logger.Log('clicking it');
        hotTreeNode.click();
        this.Logger.FuncEnd(this.__activateNode.name);
    }
    __expandNode(foundOnPage) {
        this.Logger.FuncStart(this.__expandNode.name);
        var currentSrc = foundOnPage.getAttribute('src');
        this.Logger.Log('currentSrc' + currentSrc);
        if (currentSrc.indexOf(ContentConst.Const.Names.TreeMenuExpandedPng) < 0) {
            this.Logger.Log('clicking it');
            foundOnPage.click();
        }
        this.Logger.FuncEnd(this.__expandNode.name);
    }
    __collapseNode(element) {
        var currentSrc = element.getAttribute('src');
        this.Logger.Log('currentSrc' + currentSrc);
        if (currentSrc.indexOf(ContentConst.Const.Names.TreeMenuExpandedPng) > -1) {
            this.Logger.Log('clicking it');
            element.click();
        }
    }
    __collapseRootNode(targetCEDoc) {
        var rootElem = targetCEDoc.ContentDoc.getElementById(ContentConst.Const.ElemId.sc.SitecoreRootGlyphId);
        if (rootElem) {
            this.__collapseNode(rootElem);
        }
        else {
            this.Logger.ErrorAndThrow(this.__collapseRootNode.name, 'Root glyph not found ' + ContentConst.Const.ElemId.sc.SitecoreRootGlyphId);
        }
    }
    WaitForAndRestoreOneNode(nextNode, dataOneDocTarget) {
        return OneCEAgent_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForAndRestoreOneNode.name, dataOneDocTarget.DocId.AsShort);
            var treeGlyphTargetId = ContentConst.Const.Names.SC.TreeGlyphPrefix + nextNode.NodeId.AsString;
            this.Logger.Log('looking for: ' + treeGlyphTargetId + ' ' + nextNode.NodeFriendly + ' in ' + dataOneDocTarget.DocId.AsShort);
            this.Logger.Log('document not null ' + (dataOneDocTarget.ContentDoc != null));
            var iterHelper = new IterationDrone_IterationDrone(this.Logger, this.WaitForAndRestoreOneNode.name);
            var foundOnPageTreeGlyph = null;
            while (!foundOnPageTreeGlyph && iterHelper.DecrementAndKeepGoing()) {
                this.Logger.Log('looking for: *' + treeGlyphTargetId + '* ' + nextNode.NodeFriendly + ' in *' + dataOneDocTarget.DocId.AsShort + '*');
                foundOnPageTreeGlyph = dataOneDocTarget.ContentDoc.getElementById(treeGlyphTargetId);
                if (foundOnPageTreeGlyph) {
                    if (nextNode.IsExpanded) {
                        this.__expandNode(foundOnPageTreeGlyph);
                    }
                    if (nextNode.IsActive) {
                        var hotTreeNodeId = ContentConst.Const.Names.SC.TreeNodePrefix + nextNode.NodeId.AsString;
                        var hotTreeNode = dataOneDocTarget.ContentDoc.getElementById(hotTreeNodeId);
                        if (hotTreeNode) {
                            this.__activateNode(hotTreeNode);
                        }
                    }
                }
                else {
                    this.Logger.Log('not Found...waiting: ');
                    yield iterHelper.Wait();
                }
            }
            this.Logger.FuncEnd(this.WaitForAndRestoreOneNode.name, dataOneDocTarget.DocId.AsShort);
        });
    }
    WaitForAndRestoreManyAllNodes(storageData, targetDoc) {
        return OneCEAgent_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.WaitForAndRestoreManyAllNodes.name, targetDoc.DocId.AsShort);
            let iterHelper = new IterationDrone_IterationDrone(this.Logger, this.WaitForAndRestoreManyAllNodes.name);
            while (storageData.AllTreeNodeAr.length > 0 && iterHelper.DecrementAndKeepGoing()) {
                var nextNode = storageData.AllTreeNodeAr.shift();
                yield this.WaitForAndRestoreOneNode(nextNode, targetDoc);
            }
            this.Logger.FuncEnd(this.WaitForAndRestoreManyAllNodes.name);
        });
    }
    SetCompactCss() {
        this.Logger.FuncStart(this.SetCompactCss.name, this.ContextDoc.DocId.AsShort);
        this.Logger.FuncStart(this.SetCompactCss.name, this.ContextDoc.DocId.AsShort);
    }
    RestoreCEStateAsync(dataToRestore) {
        return OneCEAgent_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => OneCEAgent_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.RestoreCEStateAsync.name, this.ContextDoc.DocId.AsShort);
                var toReturn = false;
                this.Logger.Log('Node Count in storage data: ' + dataToRestore.AllTreeNodeAr.length);
                yield this.WaitForAndRestoreManyAllNodes(dataToRestore, this.ContextDoc)
                    .then(() => resolve(true))
                    .catch((err) => reject(this.RestoreCEStateAsync.name + " " + err));
                this.Logger.FuncEnd(this.RestoreCEStateAsync.name);
            }));
        });
    }
    GetActiveNode(allTreeNodeAr) {
        let toReturn = null;
        if (allTreeNodeAr) {
            for (var idx = 0; idx < allTreeNodeAr.length; idx++) {
                let candidate = allTreeNodeAr[idx];
                if (candidate.IsActive) {
                    toReturn = candidate;
                    break;
                }
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.GetActiveNode.name, 'No tree data provided');
        }
        return toReturn;
    }
    GetTreeState(id) {
        return new Promise((resolve, reject) => {
            this.Logger.FuncStart(this.GetTreeState.name);
            let result = new PromiseResult(this.GetTreeState.name, this.Logger);
            var toReturnOneTreeState = {
                Id: id,
                AllTreeNodeAr: this.OneTreeDrone.GetOneLiveTreeData(),
                ActiveNode: null
            };
            toReturnOneTreeState.ActiveNode = this.GetActiveNode(toReturnOneTreeState.AllTreeNodeAr);
            if (toReturnOneTreeState) {
                result.MarkSuccessful();
            }
            else {
                result.MarkFailed('todo why would this fail?');
            }
            this.Logger.FuncEnd(this.GetTreeState.name);
            if (result.WasSuccessful()) {
                resolve(toReturnOneTreeState);
            }
            else {
                reject(result.RejectReasons);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/PromisesRecipes.js
var PromisesRecipes_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class PromisesRecipes_PromisesRecipes extends HelperBase {
    FromDesktopOpenNewCEIframe(targetDoc) {
        return PromisesRecipes_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                let allIframeDataAtBeginning;
                let targetCeAgent;
                let newIframe;
                this.HelperAgent.PromisesBasic.GetAllLiveIframeData(targetDoc)
                    .then((result) => allIframeDataAtBeginning = result)
                    .then(() => this.HelperAgent.PromisesBasic.RaceWaitAndClick(ContentConst.Const.Selector.SC.scStartButton, targetDoc))
                    .then(() => this.HelperAgent.PromisesBasic.WaitForThenClick([ContentConst.Const.Selector.SC.StartMenuLeftOption], targetDoc))
                    .then(() => this.HelperAgent.PromisesBasic.WaitForNewIframe(allIframeDataAtBeginning, targetDoc))
                    .then((result) => newIframe = result)
                    .then(() => this.HelperAgent.PromisesBasic.WaitForReadyIframe(newIframe))
                    .then(() => targetCeAgent = new OneCEAgent_OneCEAgent(newIframe.ContentDoc, this.Logger, this.HelperAgent))
                    .then(() => resolve(targetCeAgent))
                    .catch((err) => { throw this.FromDesktopOpenNewCEIframe.name + ' ' + err; });
            });
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Helpers/Helpers.js





class Helpers_HelperAgent {
    constructor(logger) {
        logger.InstantiateStart(Helpers_HelperAgent.name);
        this.Init(logger, this);
        logger.InstantiateEnd(Helpers_HelperAgent.name);
    }
    Init(logger, helperAgent) {
        this.GuidHelper = new GuidHelper_GuidHelper(logger, helperAgent);
        this.UtilityHelp = new UtilityHelper_UtilityHelper(logger, helperAgent);
        this.PromisesBasic = new PromiseGeneric_PromisesBasic(logger, helperAgent);
        this.PromisesRecipes = new PromisesRecipes_PromisesRecipes(logger, helperAgent);
        this.FactoryHelp = new FactoryHelper_FactoryHelper(logger, helperAgent);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/2xxx-MenuCommand.js
var MenuCommand;
(function (MenuCommand) {
    MenuCommand[MenuCommand["Unknown"] = 0] = "Unknown";
    MenuCommand[MenuCommand["GoScModeEdit"] = 2001] = "GoScModeEdit";
    MenuCommand[MenuCommand["MarkFavorite"] = 2002] = "MarkFavorite";
    MenuCommand[MenuCommand["CloseWindow"] = 2003] = "CloseWindow";
    MenuCommand[MenuCommand["TakeSnapShot"] = 2004] = "TakeSnapShot";
    MenuCommand[MenuCommand["AddCeTab"] = 2005] = "AddCeTab";
    MenuCommand[MenuCommand["ScModeNormal"] = 2006] = "ScModeNormal";
    MenuCommand[MenuCommand["ScModePrev"] = 2007] = "ScModePrev";
    MenuCommand[MenuCommand["Cancel"] = 2008] = "Cancel";
    MenuCommand[MenuCommand["DrawStorage"] = 2009] = "DrawStorage";
    MenuCommand[MenuCommand["DrawStoragePopUpLogStorage"] = 2010] = "DrawStoragePopUpLogStorage";
    MenuCommand[MenuCommand["Remove"] = 2011] = "Remove";
    MenuCommand[MenuCommand["RestoreStateSameTab"] = 2012] = "RestoreStateSameTab";
    MenuCommand[MenuCommand["RestoreStateNewTab"] = 2013] = "RestoreStateNewTab";
    MenuCommand[MenuCommand["RestoreStateTBDTab"] = 2014] = "RestoreStateTBDTab";
    MenuCommand[MenuCommand["GoDesktop"] = 2015] = "GoDesktop";
    MenuCommand[MenuCommand["GoContentEditor"] = 2016] = "GoContentEditor";
    MenuCommand[MenuCommand["PutAdminB"] = 2017] = "PutAdminB";
    MenuCommand[MenuCommand["PresentationDetails"] = 2017] = "PresentationDetails";
    MenuCommand[MenuCommand["CompactCE"] = 2019] = "CompactCE";
    MenuCommand[MenuCommand["Ping"] = 2020] = "Ping";
    MenuCommand[MenuCommand["UpdateNickname"] = 2021] = "UpdateNickname";
    MenuCommand[MenuCommand["QuickPublish"] = 2022] = "QuickPublish";
})(MenuCommand || (MenuCommand = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SettingType.js
var SettingType;
(function (SettingType) {
    SettingType[SettingType["Unknown"] = 0] = "Unknown";
    SettingType[SettingType["BoolCheckBox"] = 1] = "BoolCheckBox";
    SettingType[SettingType["Accordion"] = 2] = "Accordion";
    SettingType[SettingType["Number"] = 3] = "Number";
})(SettingType || (SettingType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/CommandButtonEvents.js
var CommandButtonEvents;
(function (CommandButtonEvents) {
    CommandButtonEvents[CommandButtonEvents["OnSingleClick"] = 0] = "OnSingleClick";
    CommandButtonEvents[CommandButtonEvents["OnDoubleClick"] = 1] = "OnDoubleClick";
})(CommandButtonEvents || (CommandButtonEvents = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/VisibilityType.js
var VisibilityType;
(function (VisibilityType) {
    VisibilityType[VisibilityType["Unknown"] = 0] = "Unknown";
    VisibilityType[VisibilityType["LoginPage"] = 1] = "LoginPage";
    VisibilityType[VisibilityType["Desktop"] = 2] = "Desktop";
    VisibilityType[VisibilityType["ContentEditor"] = 3] = "ContentEditor";
    VisibilityType[VisibilityType["Launchpad"] = 4] = "Launchpad";
    VisibilityType[VisibilityType["Edit"] = 5] = "Edit";
    VisibilityType[VisibilityType["Normal"] = 6] = "Normal";
    VisibilityType[VisibilityType["Preview"] = 7] = "Preview";
    VisibilityType[VisibilityType["SnapShotSelected"] = 8] = "SnapShotSelected";
    VisibilityType[VisibilityType["NotLogin"] = 9] = "NotLogin";
    VisibilityType[VisibilityType["CommandIsRunning"] = 10] = "CommandIsRunning";
    VisibilityType[VisibilityType["ActiveCeNode"] = 11] = "ActiveCeNode";
    VisibilityType[VisibilityType["SnapShotable"] = 12] = "SnapShotable";
})(VisibilityType || (VisibilityType = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Classes/PopConst.js
let PopConst = (() => {
    class PopConst {
    }
    PopConst.Const = {
        ClassNames: {
            HS: {
                Collapsed: 'in',
            },
        },
        ElemId: {
            InputNickname: 'inputNickname',
            HindSiteParentInfo: 'spanParentInfo',
            HS: {
                SelectHeaderAuto: 'sel-header-auto',
                SelectHeaderAutoTitle: 'sel-header-auto-title',
                SelectHeaderFavorite: 'sel-header-favorite',
                SelectHeaderFavoriteTitle: 'sel-header-favorite-title',
                TabId: 'orig-win-id',
                Btn: {},
            }
        },
        Numbers: {
            MinMenuHeight: 600,
            MinMenuWidth: 600,
            MaxAutoSaveCount: 10,
            AutoSaveIntervalMin: 5,
        },
        Notify: {
            Default: 'Complete',
            PublishComplete: 'Publishing Complete',
        },
        Selector: {
            Btn: {
                WindowClose: '[id=close-window]',
            },
            Legend: {
                LgndBrowserState: '[id=lgnd-browser-state]',
                LgndContentState: '[id=lgnd-content-state]',
                LgndForeSite: '[id=lgnd-fore-site]',
                LgndHindSite: '[id=lgnd-hind-site]',
                LgndMessages: '[id=lgnd-messages]',
                LgndPopUpLog: '[id=lgnd-pop-up-log]',
                LgndPopUpState: '[id=lgnd-pop-up-state]',
                LgndSettings: '[id=lgnd-settings]',
            },
            HS: {
                AdminB: '[id=AdminB]',
                AutoSnapshotBeforeWindowChange: '[id=id-settings-auto-snapshot-on-window-change]',
                BigRed: '[id=BigRed]',
                BuildStamp: '[id=build-stamp]',
                CompactCE: '[id=CompactCE]',
                Desktop: '[id=Desktop]',
                DivOverlayModule: '[id=menu-overlay]',
                DivStateContent: '[id=feedback-div-state-content]',
                FeedbackBrowserState: '[id=feedback-div-browser-state]',
                FeedbackPopUpState: '[id=feedback-div-pop-up-state]',
                FeedbackContentState: '[id=feedback-div-state-content]',
                FeedbackLogElement: '[id=feedback-pop-up-log]',
                FeedbackMessages: '[id=feedback-messages]',
                FeedbackStorage: '[id=feedback-storage]',
                GoCE: '[id=CE]',
                HsCancel: '[id=Cancel]',
                HsRemoveFromStorage: '[id=RemoveOneFromLocalStorage]',
                HsRestoreWindowStateSameTab: '[id=id-restore-state-same-tab]',
                HsRestoreWindowStateNewTab: '[id=id-restore-state-new-tab]',
                iCBoxdSettingsAutoLogin: '[id=id-settings-auto-login]',
                IdFieldSetDebug: '[id=id-fieldset-debug]',
                LogToConsole: '[id=id-settings-show-log-data]',
                MarkFavorite: '[id=MarkFavorite]',
                ModeEdit: '[id=sc-mode-edit]',
                ModeNorm: '[id=Norm]',
                ModePrev: '[id=Prev]',
                PrefAutoLogin: '[id=id-settings-auto-login]',
                PresentationDetails: '[id=PresentationDetails]',
                QuickPublish: '[id=QuickPublish]',
                SelStateSnapShot: '[id=selState]',
                SettingAutoSaveInterval: '[id=id-settings-auto-save-interval]',
                SettingAutoSaveMaxCount: '[id=id-settings-auto-save-max-count]',
                SettingDebugKeepDialogOpen: '[id=id-settings-debug-keep-dialog-open]',
                SettingAutoSaveSnapshotRetainDays: '[id=id-settings-auto-save-snap-shot-retain-days]',
                SettingNotUsed: '[id=id-settings-not-used]',
                SettingUseCompactCss: '[id=id-settings-use-compact]',
                TakeSnapshot: '[id=SaveWindowState]',
                UpdateNicknameB: '[id=UpdateNickname]',
            },
        },
        Settings: {
            Defaults: {
                AutoSaveEnabled: false,
                DebugKeepDialogOpen: false,
                LgndBrowserState: false,
                LgndContentState: false,
                LgndForeSite: true,
                LgndHindSite: true,
                LgndMessages: false,
                LgndPopUpLog: false,
                LgndPopUpState: false,
                LgndSettings: false,
            }
        },
        Storage: {
            SettingsSuffix: 'todo',
            KeyGenericSettings: 'HindSite.' + 'GenericSettings',
            StorageLogKeyPrefix: 'HindSite.' + 'Log.',
            Defaults: {
                bool: {
                    AutoSaveEnabled: false,
                    AutoLogin: false,
                    DefaultDebugKeepDialogOpen: false,
                    AutoSnapshotBeforeWindowChange: true,
                }
            }
        },
        SnapShotFormat: {
            lenTimestamp: 13,
            lenNickname: 16,
            lenPageType: 7,
            lenPrefix: 6,
            lenShortId: 4,
            colSep: ' - ',
            lenCeCount: 3,
            lenActiveNode: 16,
            lenFavorite: 3,
        },
        Timeouts: {
            WaitBeforeRemovingCompleteFlag: 1500,
            AutoLoginCheckInterval: 3000,
        },
    };
    return PopConst;
})();


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/scMode.js
var scMode;
(function (scMode) {
    scMode[scMode["Unknown"] = 0] = "Unknown";
    scMode[scMode["Edit"] = 1] = "Edit";
    scMode[scMode["Preview"] = 2] = "Preview";
    scMode[scMode["Normal"] = 3] = "Normal";
})(scMode || (scMode = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Classes/AllCommands.js





class AllCommands_AllCommands {
    static BuildAllCommands(popHub, handlers) {
        let toReturn = [
            {
                Command: MenuCommand.CloseWindow,
                ButtonSelector: PopConst.Const.Selector.Btn.WindowClose,
                VisibilityControllers: [],
                EventData: {
                    Handler: handlers.Internal.CloseWindow,
                    Event: CommandButtonEvents.OnSingleClick,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.AddCeTab,
                ButtonSelector: PopConst.Const.Selector.HS.BigRed,
                VisibilityControllers: [VisibilityType.Desktop],
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: popHub.EventMan.Handlers.External.AddCETab,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.GoScModeEdit,
                ButtonSelector: PopConst.Const.Selector.HS.ModeEdit,
                VisibilityControllers: [VisibilityType.ActiveCeNode],
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: popHub.EventMan.Handlers.Internal.SetScModeInternal,
                    ParameterData: [scMode.Edit],
                }
            },
            {
                Command: MenuCommand.ScModeNormal,
                ButtonSelector: PopConst.Const.Selector.HS.ModeNorm,
                VisibilityControllers: [VisibilityType.ActiveCeNode],
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: popHub.EventMan.Handlers.Internal.SetScModeInternal,
                    ParameterData: [scMode.Normal],
                }
            },
            {
                Command: MenuCommand.ScModePrev,
                ButtonSelector: PopConst.Const.Selector.HS.ModePrev,
                VisibilityControllers: [VisibilityType.ActiveCeNode, VisibilityType.Edit],
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: popHub.EventMan.Handlers.Internal.SetScModeInternal,
                    ParameterData: [scMode.Preview],
                }
            },
            {
                Command: MenuCommand.UpdateNickname,
                ButtonSelector: PopConst.Const.Selector.HS.UpdateNicknameB,
                VisibilityControllers: [VisibilityType.SnapShotSelected],
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: popHub.EventMan.Handlers.External.HndlrSnapShotUpdateNickName,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.PresentationDetails,
                ButtonSelector: PopConst.Const.Selector.HS.PresentationDetails,
                VisibilityControllers: [VisibilityType.ActiveCeNode],
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: popHub.EventMan.Handlers.External.HndlrPresentationDetails,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.CompactCE,
                ButtonSelector: PopConst.Const.Selector.HS.CompactCE,
                VisibilityControllers: [VisibilityType.ActiveCeNode],
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: popHub.EventMan.Handlers.External.HndlrCompactCE,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.PutAdminB,
                ButtonSelector: PopConst.Const.Selector.HS.AdminB,
                VisibilityControllers: [VisibilityType.LoginPage],
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: popHub.EventMan.Handlers.External.PutAdminB,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.GoContentEditor,
                ButtonSelector: PopConst.Const.Selector.HS.GoCE,
                VisibilityControllers: [VisibilityType.NotLogin],
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: popHub.EventMan.Handlers.Internal.GoCeInternal,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.QuickPublish,
                ButtonSelector: PopConst.Const.Selector.HS.QuickPublish,
                VisibilityControllers: [VisibilityType.ActiveCeNode],
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: popHub.EventMan.Handlers.External.QuickPublish,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.GoDesktop,
                ButtonSelector: PopConst.Const.Selector.HS.Desktop,
                VisibilityControllers: [VisibilityType.NotLogin],
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: popHub.EventMan.Handlers.Internal.GoDesktopInternal,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.Ping,
                ButtonSelector: null,
                VisibilityControllers: [],
                EventData: {
                    Event: null,
                    Handler: popHub.EventMan.Handlers.External.Ping,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.TakeSnapShot,
                ButtonSelector: PopConst.Const.Selector.HS.TakeSnapshot,
                VisibilityControllers: [VisibilityType.SnapShotable],
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: popHub.EventMan.Handlers.External.HndlrSnapShotCreate,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.MarkFavorite,
                ButtonSelector: PopConst.Const.Selector.HS.MarkFavorite,
                VisibilityControllers: [VisibilityType.SnapShotSelected],
                EventData: {
                    Handler: popHub.EventMan.Handlers.External.MarkFavorite,
                    Event: null,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.Cancel,
                ButtonSelector: PopConst.Const.Selector.HS.HsCancel,
                VisibilityControllers: [VisibilityType.CommandIsRunning],
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: popHub.EventMan.Handlers.External.__hndlrCancelOperation,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.Remove,
                ButtonSelector: PopConst.Const.Selector.HS.HsRemoveFromStorage,
                VisibilityControllers: [VisibilityType.SnapShotSelected],
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: popHub.EventMan.Handlers.External.HndlrSnapShotRemove,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.RestoreStateTBDTab,
                ButtonSelector: PopConst.Const.Selector.HS.SelStateSnapShot,
                VisibilityControllers: [VisibilityType.SnapShotSelected],
                EventData: {
                    Event: CommandButtonEvents.OnDoubleClick,
                    Handler: popHub.EventMan.Handlers.External.HndlrSnapShotRestoreTBDTab,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.RestoreStateSameTab,
                ButtonSelector: PopConst.Const.Selector.HS.HsRestoreWindowStateSameTab,
                VisibilityControllers: [VisibilityType.SnapShotSelected],
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: popHub.EventMan.Handlers.External.HndlrSnapShotRestoreSameTab,
                    ParameterData: [],
                }
            },
            {
                Command: MenuCommand.RestoreStateNewTab,
                ButtonSelector: PopConst.Const.Selector.HS.HsRestoreWindowStateNewTab,
                VisibilityControllers: [VisibilityType.SnapShotSelected],
                EventData: {
                    Event: CommandButtonEvents.OnSingleClick,
                    Handler: popHub.EventMan.Handlers.External.HndlrSnapShotRestoreNewTab,
                    ParameterData: [],
                }
            },
        ];
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Interfaces/MsgFromXBase.js

class MsgFromXBase_MsgFromXBase {
    constructor(msgFlag) {
        this.MsgFlag = MsgFlag.Unknown;
        this.MsgFlag = msgFlag;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/PayloadDataReqPopUp.js
class PayloadDataFromPopUp {
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/MsgFromPopUp.js



class MsgFromPopUp_MsgFromPopUp extends MsgFromXBase_MsgFromXBase {
    constructor(msgFlag, scWindowType, selectSnapshotId, contentPrefs) {
        super(msgFlag);
        this.Data = new PayloadDataFromPopUp();
        this.Data.IdOfSelect = selectSnapshotId;
        this.Data.SnapShotSettings = {
            SnapShotNewNickname: '',
            Flavor: SnapShotFlavor.Unknown,
            CurrentPageType: scWindowType
        };
        this.CurrentContentPrefs = contentPrefs;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/QueryStrKey.js
var QueryStrKey;
(function (QueryStrKey) {
    QueryStrKey[QueryStrKey["hsTargetSs"] = 0] = "hsTargetSs";
    QueryStrKey[QueryStrKey["sc_mode"] = 1] = "sc_mode";
    QueryStrKey[QueryStrKey["sc_itemid"] = 2] = "sc_itemid";
    QueryStrKey[QueryStrKey["sc_lang"] = 3] = "sc_lang";
    QueryStrKey[QueryStrKey["sc_site"] = 4] = "sc_site";
})(QueryStrKey || (QueryStrKey = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Classes/CommonEvents.js
var CommonEvents_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class CommonEvents {
    constructor(hub, allAgents) {
        this.PopHub = hub;
        this.AllAgents = allAgents;
    }
    __cleardebugText() {
        this.AllAgents.Logger.HndlrClearDebugText(this.AllAgents.Logger);
    }
    SendContentCommand(msgPlayload) {
        return new Promise((resolve, reject) => CommonEvents_awaiter(this, void 0, void 0, function* () {
            this.AllAgents.Logger.FuncStart(this.SendContentCommand.name);
            this.__cleardebugText();
            this.PopHub.UiMan.ClearCancelFlag();
            yield this.PopHub.MessageMan.SendMessageToContent(msgPlayload)
                .then((contentState) => {
                this.AllAgents.Logger.LogAsJsonPretty('contentState ' + this.SendContentCommand.name, contentState);
                this.PopHub.UiMan.SetContentState(contentState);
                this.PopHub.UiMan.RefreshUi();
                resolve();
            })
                .catch((err) => reject(err));
            this.AllAgents.Logger.FuncEnd(this.SendContentCommand.name);
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Classes/HandlersExternal.js
var HandlersExternal_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class HandlersExternal_HandlersExternal extends CommonEvents {
    BuildNewMsgFromPopUp(msgFlag) {
        this.AllAgents.Logger.FuncStart(this.BuildNewMsgFromPopUp.name);
        var msg = new MsgFromPopUp_MsgFromPopUp(msgFlag, this.PopHub.TabMan.GetWindowType(), this.PopHub.UiMan.ModuleSelectSnapShot.GetSelectSnapshotId(), this.PopHub._allAgents.SettingsAgent.GetOnlyContentPrefs());
        this.AllAgents.Logger.FuncEnd(this.BuildNewMsgFromPopUp.name);
        return msg;
    }
    AddCETab(data) {
        return HandlersExternal_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
                let msg = data.PopUpHub.EventMan.Handlers.External.BuildNewMsgFromPopUp(MsgFlag.ReqAddCETab);
                yield data.PopUpHub.EventMan.Handlers.External.SendContentCommand(msg)
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }));
        });
    }
    PutAdminB(data) {
        return HandlersExternal_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
                let msg = data.PopUpHub.EventMan.Handlers.External.BuildNewMsgFromPopUp(MsgFlag.ReqAdminB);
                yield data.PopUpHub.EventMan.Handlers.External.SendContentCommand(msg)
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }));
        });
    }
    QuickPublish(data) {
        return HandlersExternal_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
                let msg = data.PopUpHub.EventMan.Handlers.External.BuildNewMsgFromPopUp(MsgFlag.ReqQuickPublish);
                yield data.PopUpHub.EventMan.Handlers.External.SendContentCommand(msg)
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }));
        });
    }
    HndlrSnapShotCreate(data) {
        return HandlersExternal_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
                let msg = data.PopUpHub.EventMan.Handlers.External.BuildNewMsgFromPopUp(MsgFlag.ReqTakeSnapShot);
                yield data.PopUpHub.EventMan.Handlers.External.SendContentCommand(msg)
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }));
        });
    }
    HndlrSnapShotRestoreTBDTab(data) {
        return HandlersExternal_awaiter(this, void 0, void 0, function* () {
            data.PopUpHub._allAgents.Logger.FuncStart(data.PopUpHub.EventMan.Handlers.External.HndlrSnapShotRestoreTBDTab.name);
            if (!data.Evt.ctrlKey) {
                yield data.PopUpHub.EventMan.Handlers.External.HndlrSnapShotRestoreSameTab(data);
            }
            else {
                yield data.PopUpHub.EventMan.Handlers.External.HndlrSnapShotRestoreNewTab(data);
            }
            data.PopUpHub._allAgents.Logger.FuncEnd(data.PopUpHub.EventMan.Handlers.External.HndlrSnapShotRestoreTBDTab.name);
        });
    }
    HndlrSnapShotRestoreSameTab(data) {
        return HandlersExternal_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
                data.PopUpHub._allAgents.Logger.FuncStart(data.PopUpHub.EventMan.Handlers.External.HndlrSnapShotRestoreSameTab.name);
                var msg = data.PopUpHub.EventMan.Handlers.External.BuildNewMsgFromPopUp(MsgFlag.ReqRestoreClick);
                msg.Data.IdOfSelect = data.PopUpHub.UiMan.ModuleSelectSnapShot.GetSelectSnapshotId();
                yield data.PopUpHub.EventMan.Handlers.External.SendContentCommand(msg)
                    .then((resolve))
                    .catch((ex) => reject(ex));
                data.PopUpHub._allAgents.Logger.FuncEnd(data.PopUpHub.EventMan.Handlers.External.HndlrSnapShotRestoreSameTab.name);
            }));
        });
    }
    HndlrSnapShotRestoreNewTab(data) {
        return HandlersExternal_awaiter(this, void 0, void 0, function* () {
            data.PopUpHub._allAgents.Logger.FuncStart(data.PopUpHub.EventMan.Handlers.External.HndlrSnapShotRestoreNewTab.name);
            data.PopUpHub.TabMan.SetQueryStringKeyValue(QueryStrKey.hsTargetSs, data.PopUpHub.UiMan.ModuleSelectSnapShot.GetSelectSnapshotId().AsString);
            let newUrl = data.PopUpHub.TabMan.GetFullUrl();
            yield data.PopUpHub.EventMan.Handlers.External.CreateNewWindow(data, newUrl)
                .catch((ex) => {
                data.PopUpHub.EventMan.Handlers.External.AllAgents.Logger.ErrorAndThrow(data.PopUpHub.EventMan.Handlers.External.HndlrSnapShotRestoreSameTab.name, ex.toString());
            });
            data.PopUpHub._allAgents.Logger.FuncEnd(data.PopUpHub.EventMan.Handlers.External.HndlrSnapShotRestoreNewTab.name);
        });
    }
    HndlrSnapShotUpdateNickName(data) {
        return HandlersExternal_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
                let msg = data.PopUpHub.EventMan.Handlers.External.BuildNewMsgFromPopUp(MsgFlag.ReqUpdateNickName);
                msg.Data.SnapShotSettings.SnapShotNewNickname = data.PopUpHub.UiMan.GetValueInNickname();
                yield data.PopUpHub.EventMan.Handlers.External.SendContentCommand(msg)
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }));
        });
    }
    Ping(data) {
        return HandlersExternal_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
                let msg = data.PopUpHub.EventMan.Handlers.External.BuildNewMsgFromPopUp(MsgFlag.Ping);
                yield data.PopUpHub.EventMan.Handlers.External.SendContentCommand(msg)
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }));
        });
    }
    __hndlrCancelOperation(data) {
        data.PopUpHub.UiMan.SetCancelFlag();
    }
    MarkFavorite(data, tanManagerTempFix) {
        return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
            var msg = data.PopUpHub.EventMan.Handlers.External.BuildNewMsgFromPopUp(MsgFlag.ReqMarkFavorite);
            yield data.PopUpHub.EventMan.Handlers.External.SendContentCommand(msg)
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    HndlrSnapShotRemove(data) {
        return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
            let msg = data.PopUpHub.EventMan.Handlers.External.BuildNewMsgFromPopUp(MsgFlag.RemoveFromStorage);
            var result = confirm('Remove ?: ' + msg.Data.IdOfSelect.AsShort);
            if (result === true) {
                yield data.PopUpHub.EventMan.Handlers.External.SendContentCommand(msg)
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }
            else {
                reject('Canceled');
            }
        }));
    }
    HndlrCompactCE(data) {
        return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
            let msg = data.PopUpHub.EventMan.Handlers.External.BuildNewMsgFromPopUp(MsgFlag.ReqToggleCompactCss);
            msg.Data.SnapShotSettings.SnapShotNewNickname = data.PopUpHub.UiMan.GetValueInNickname();
            yield data.PopUpHub.EventMan.Handlers.External.SendContentCommand(msg)
                .then(() => resolve())
                .catch((err) => reject(err));
        }));
    }
    CreateNewWindow(data, tabUrl) {
        return new Promise((resolve, reject) => HandlersExternal_awaiter(this, void 0, void 0, function* () {
            data.PopUpHub.EventMan.Handlers.External.AllAgents.Logger.FuncStart(data.PopUpHub.EventMan.Handlers.External.CreateNewWindow.name);
            yield data.PopUpHub.BrowserMan.CreateNewTab(tabUrl)
                .then(() => resolve())
                .catch((err) => reject(err));
            data.PopUpHub.EventMan.Handlers.External.AllAgents.Logger.FuncEnd(data.PopUpHub.EventMan.Handlers.External.CreateNewWindow.name);
        }));
    }
    HndlrPresentationDetails(data) {
        data.PopUpHub.EventMan.Handlers.External.AllAgents.Logger.ErrorAndThrow(data.PopUpHub.EventMan.Handlers.External.HndlrPresentationDetails.name, 'to do');
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Classes/HandlersInternal.js
var HandlersInternal_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class HandlersInternal_HandlersInternal extends CommonEvents {
    __cleardebugTextWithConfirm(evt, popHub) {
        this.AllAgents.Logger.HndlrClearDebugText(this.AllAgents.Logger, true);
    }
    GenericSettingChanged() {
    }
    CloseWindow(evt, popHub) {
        window.close();
    }
    GoCeInternal(evt, popHub) {
        return HandlersInternal_awaiter(this, void 0, void 0, function* () {
            popHub.TabMan.ChangeLocationSwitchBoard(scWindowType_scWindowType.ContentEditor);
        });
    }
    GoDesktopInternal(evt, popHub) {
        popHub.TabMan.ChangeLocationSwitchBoard(scWindowType_scWindowType.Desktop);
    }
    SetScModeInternal(data) {
        return HandlersInternal_awaiter(this, void 0, void 0, function* () {
            try {
                if (data.Command.EventData.ParameterData && data.Command.EventData.ParameterData.length > 0) {
                    let newMode = data.Command.EventData.ParameterData[0];
                    yield data.PopUpHub.TabMan.SetScMode(newMode)
                        .then(() => data.PopUpHub.UiMan.ClosePopUp());
                }
                else {
                    throw ('SetScModeInternal no parameters');
                }
            }
            catch (err) {
                throw (err);
            }
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/Handlers.js
class Handlers {
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/PopUpManagerBase.js
class PopUpManagerBase {
    constructor(popHub, allAgents) {
        this.IsInit = false;
        this.PopHub = popHub;
        this.AllAgents = allAgents;
    }
    UiMan() { return this.PopHub.UiMan; }
    MsgMan() { return this.PopHub.MessageMan; }
    Helpers() { return this.PopHub.Helpers; }
    EventMan() { return this.PopHub.EventMan; }
    TabMan() { return this.PopHub.TabMan; }
    BrowserMan() { return this.PopHub.BrowserMan; }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/EventManager.js
var EventManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class EventManager_EventManager extends PopUpManagerBase {
    constructor(popHub, allAgents) {
        super(popHub, allAgents);
        this.Handlers = new Handlers();
        this.Handlers.External = new HandlersExternal_HandlersExternal(popHub, this.AllAgents);
        this.Handlers.Internal = new HandlersInternal_HandlersInternal(popHub, this.AllAgents);
    }
    InitEventManager() {
        this.AllAgents.Logger.FuncStart(this.InitEventManager.name);
        this.AllMenuCommands = AllCommands_AllCommands.BuildAllCommands(this.PopHub, this.Handlers);
        this.__wireAllMenuButtons();
        this.WireAllGenericSettings();
        this.AllAgents.Logger.FuncEnd(this.InitEventManager.name);
    }
    WireAllGenericSettings() {
        let genericSettings = this.AllAgents.SettingsAgent.SettingsAr;
        for (var idx = 0; idx < genericSettings.length; idx++) {
            let oneSetting = genericSettings[idx];
            if (oneSetting.HasUi) {
                let uiElem = window.document.querySelector(oneSetting.UiSelector);
                if (uiElem) {
                    let uiLabel = window.document.querySelector(oneSetting.UiSelector.replace('id', 'for'));
                    if (uiLabel) {
                        uiLabel.innerHTML = oneSetting.Friendly;
                    }
                    else {
                        uiElem.innerHTML = oneSetting.Friendly;
                    }
                    if (oneSetting.DataType === SettingType.BoolCheckBox) {
                        let self = this;
                        uiElem.addEventListener('change', (evt) => {
                            self.AllAgents.SettingsAgent.SettingChanged(oneSetting.SettingKey, evt.target.checked);
                        });
                    }
                    else if (oneSetting.DataType === SettingType.Accordion) {
                        this.UiMan().AccordianManager.AddAccordianDrone(oneSetting, uiElem);
                    }
                }
                else {
                    this.AllAgents.Logger.ErrorAndThrow(this.WireAllGenericSettings.name, 'ui generic element not found');
                }
            }
        }
    }
    __wireAllMenuButtons() {
        this.AllAgents.Logger.FuncStart(this.__wireAllMenuButtons.name);
        for (var idx = 0; idx < this.AllMenuCommands.length; idx++) {
            let oneCommand = this.AllMenuCommands[idx];
            this.__wireOneMenuButtonListener(oneCommand);
        }
        this.AllAgents.Logger.FuncEnd(this.__wireAllMenuButtons.name);
    }
    __wireOneMenuButtonListener(oneCommand) {
        var targetElem = this.UiMan().GetButtonByIdOrSelector(oneCommand.ButtonSelector);
        if (oneCommand.EventData.Event === CommandButtonEvents.OnSingleClick) {
            this.__wireSingleClickEvent(oneCommand, targetElem);
        }
        else if (oneCommand.EventData.Event === CommandButtonEvents.OnDoubleClick) {
            this.__wireDoubleClickEvent(oneCommand, targetElem);
        }
    }
    __wireDoubleClickEvent(oneCommand, targetElem) {
        if (targetElem) {
            let data = this.__buildCommandData(oneCommand);
            targetElem.ondblclick = (evt) => {
                data.Evt = evt,
                    data.Self.RouteAllCommandEvents(data);
            };
        }
    }
    __wireSingleClickEvent(oneCommand, targetElem) {
        if (targetElem) {
            let data = this.__buildCommandData(oneCommand);
            targetElem.addEventListener('click', (evt) => {
                data.Evt = evt;
                data.Self.RouteAllCommandEvents(data);
            });
        }
        else {
            this.AllAgents.Logger.ErrorAndThrow(this.__wireAllMenuButtons.name, 'No Id: ' + oneCommand.ButtonSelector);
        }
    }
    __buildCommandData(oneCommand) {
        var self = this;
        let data = {
            Self: self,
            Command: oneCommand,
            Event: oneCommand.EventData,
            Evt: null,
            PopUpHub: self.PopHub
        };
        return data;
    }
    TriggerPingEvent() {
        return new Promise((resolve, reject) => EventManager_awaiter(this, void 0, void 0, function* () {
            this.AllAgents.Logger.FuncStart(this.TriggerPingEvent.name);
            for (var idx = 0; idx < this.AllMenuCommands.length; idx++) {
                let candidate = this.AllMenuCommands[idx];
                if (candidate.Command === MenuCommand.Ping) {
                    let data = this.__buildCommandData(candidate);
                    this.AllAgents.Logger.LogAsJsonPretty(this.TriggerPingEvent.name, data.Command);
                    yield data.Self.RouteAllCommandEvents(data)
                        .then(() => resolve())
                        .catch((err) => reject(err));
                    break;
                }
            }
            this.AllAgents.Logger.FuncEnd(this.TriggerPingEvent.name);
        }));
    }
    RouteAllCommandEvents(data) {
        return EventManager_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => EventManager_awaiter(this, void 0, void 0, function* () {
                yield data.Event.Handler(data)
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/MessageManager.js
var MessageManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class MessageManager_MessageManager extends PopUpManagerBase {
    constructor(popHub, allAgents, PopUpMessagesBroker) {
        super(popHub, allAgents);
        this.MessageBroker = PopUpMessagesBroker;
    }
    InitMessageManager() {
        return new Promise((resolve, reject) => MessageManager_awaiter(this, void 0, void 0, function* () {
            this.AllAgents.Logger.FuncStart(this.InitMessageManager.name);
            this.MessageBroker.InitMessageBroker();
            yield this.PopHub.EventMan.TriggerPingEvent()
                .then(() => resolve())
                .catch((err) => reject(err));
            this.AllAgents.Logger.FuncEnd(this.InitMessageManager.name);
        }));
    }
    SendMessageToContent(msgPayload) {
        return new Promise((resolve, reject) => MessageManager_awaiter(this, void 0, void 0, function* () {
            yield this.MessageBroker.SendMessageToContentTab(msgPayload)
                .then((result) => resolve(result))
                .catch((err) => reject(err));
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/MessageManager/BrowserManager.js
var BrowserManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class BrowserManager_BrowserManager extends PopUpManagerBase {
    CreateNewTab(tabUrl) {
        return BrowserManager_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => BrowserManager_awaiter(this, void 0, void 0, function* () {
                this.AllAgents.Logger.FuncStart(this.CreateNewTab.name, tabUrl.AbsUrl);
                yield browser.tabs.create({ url: tabUrl.AbsUrl })
                    .then(() => resolve())
                    .catch((err) => reject(err));
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/DefaultContentState.js

class DefaultContentState_DefaultContentState {
    constructor() {
        this.SnapShotsMany = {
            CurrentSnapShots: [],
            FavoriteCount: 0,
            SnapShotsAutoCount: 0,
            PlainCount: 0,
            Birthday: new Date(1970),
        };
        this.LastReq = MsgFlag.Unknown;
        this.ErrorStack = [];
        this.LastReqSuccessful = false;
        this.LastReqFailReason = '';
        this.ActiveCe = null;
    }
}
;

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/ContentStateValidator.js

class ContentStateValidator_ContentStateValidator {
    constructor(logger) {
        this.Logger = logger;
    }
    ValidateContentState(contentState) {
        this.Logger.FuncStart(this.ValidateContentState.name);
        var defaultVal = new DefaultContentState_DefaultContentState();
        if (!contentState) {
            contentState = defaultVal;
            this.Logger.ErrorAndContinue(this.ValidateContentState.name, 'Null contentState');
        }
        if (!contentState.SnapShotsMany) {
            contentState.SnapShotsMany = defaultVal.SnapShotsMany;
            this.Logger.ErrorAndContinue(this.ValidateContentState.name, 'Null SnapShotsMany');
        }
        if (!contentState.SnapShotsMany.CurrentSnapShots) {
            contentState.SnapShotsMany.CurrentSnapShots = defaultVal.SnapShotsMany.CurrentSnapShots;
            this.Logger.ErrorAndContinue(this.ValidateContentState.name, 'Null CurrentSnapShots');
        }
        if (!contentState.ErrorStack) {
            contentState.ErrorStack = defaultVal.ErrorStack;
        }
        if (!contentState.ActiveCe) {
            contentState.ActiveCe = defaultVal.ActiveCe;
        }
        this.Logger.FuncEnd(this.ValidateContentState.name);
        return contentState;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/PayloadDataFromContent.js
class PayloadDataFromContent {
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Classes/MsgPayloadResponseFromContent.js



class MsgPayloadResponseFromContent_MsgFromContent extends MsgFromXBase_MsgFromXBase {
    constructor(msgFlag) {
        super(msgFlag);
        this.Data = new PayloadDataFromContent();
        this.ContentState = {
            SnapShotsMany: {
                CurrentSnapShots: [],
                FavoriteCount: 0,
                SnapShotsAutoCount: 0,
                PlainCount: 0,
                Birthday: new Date(1970),
            },
            LastReq: MsgFlag.Unknown,
            ErrorStack: [],
            LastReqSuccessful: false,
            LastReqFailReason: '',
            ActiveCe: null
        };
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/PopUpMessagesBroker/PopUpMessagesBroker.js
var PopUpMessagesBroker_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class PopUpMessagesBroker_PopUpMessagesBroker {
    constructor(loggerAgent, msgFeedback) {
        this.Logger = loggerAgent;
        this.MsgFeedback = msgFeedback;
    }
    InitMessageBroker() {
    }
    ReceiveResponseHndlr(response) {
        return new Promise((resolve, reject) => {
            this.Logger.FuncStart(this.ReceiveResponseHndlr.name);
            if (response) {
                StaticHelpers_StaticHelpers.MsgFlagAsString(response.MsgFlag);
                if (response) {
                    this.MsgFeedback.UpdateMsgStatusStack('Response Received: ' + StaticHelpers_StaticHelpers.MsgFlagAsString(response.MsgFlag));
                    var asMsgFromContent = response;
                    if (asMsgFromContent) {
                        this.Logger.Log(StaticHelpers_StaticHelpers.MsgFlagAsString(asMsgFromContent.MsgFlag));
                        switch (response.MsgFlag) {
                            case MsgFlag.RespCurState:
                                break;
                            case MsgFlag.RespTaskSuccessful:
                                resolve(asMsgFromContent.ContentState);
                                break;
                            case MsgFlag.RespError:
                                reject(asMsgFromContent.MsgFlag);
                                break;
                            default:
                                reject('Unrecognized MsgFlag' + StaticHelpers_StaticHelpers.MsgFlagAsString(response.MsgFlag));
                                break;
                        }
                    }
                    else {
                        reject(this.ReceiveResponseHndlr.name + ' response is not class: ' + MsgPayloadResponseFromContent_MsgFromContent.name);
                    }
                }
            }
            else {
                reject(this.ReceiveResponseHndlr.name + ' null or undefined response');
            }
            this.Logger.FuncEnd(this.ReceiveResponseHndlr.name);
        });
    }
    SendMessageToSingleTab(messageToSend) {
        return new Promise((resolve, reject) => PopUpMessagesBroker_awaiter(this, void 0, void 0, function* () {
            this.Logger.FuncStart(this.SendMessageToSingleTab.name, StaticHelpers_StaticHelpers.MsgFlagAsString(messageToSend.MsgFlag));
            this.MsgFeedback.UpdateMsgStatusStack('Sending Msg: ' + StaticHelpers_StaticHelpers.MsgFlagAsString(messageToSend.MsgFlag));
            let targetTab;
            yield browser.tabs.query({ currentWindow: true, active: true })
                .then((result) => { targetTab = result[0]; })
                .catch((err) => reject(err));
            this.Logger.LogAsJsonPretty('targetTab', targetTab);
            this.Logger.LogVal('Tab Id', targetTab.id);
            yield browser.tabs.sendMessage(targetTab.id, messageToSend)
                .then((response) => this.ReceiveResponseHndlr(response))
                .then((contentState) => {
                let validator = new ContentStateValidator_ContentStateValidator(this.Logger);
                let validatedContentState = validator.ValidateContentState(contentState);
                resolve(validatedContentState);
            })
                .catch((ex) => { reject(ex); });
            this.Logger.FuncEnd(this.SendMessageToSingleTab.name, StaticHelpers_StaticHelpers.MsgFlagAsString(messageToSend.MsgFlag));
        }));
    }
    SendMessageToContentTab(msgPlayload) {
        return PopUpMessagesBroker_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => PopUpMessagesBroker_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.SendMessageToContentTab.name, StaticHelpers_StaticHelpers.MsgFlagAsString(msgPlayload.MsgFlag));
                yield this.SendMessageToSingleTab(msgPlayload)
                    .then((result) => {
                    this.Logger.MarkerD();
                    resolve(result);
                })
                    .catch((err) => reject(err));
                this.Logger.FuncEnd(this.SendMessageToContentTab.name, StaticHelpers_StaticHelpers.MsgFlagAsString(msgPlayload.MsgFlag));
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/UrlAgent/GenericUrlAgent.js
var GenericUrlAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class GenericUrlAgent_GenericUrlAgent {
    constructor(logger) {
        this.Logger = logger;
    }
    GetUrlParts() {
        return this.UrlParts;
    }
    QueryStringHasKey(key) {
        let toReturn = false;
        if (key !== null) {
            let keyAsStr = QueryStrKey[key];
            if (keyAsStr) {
                toReturn = this.UrlParts && this.UrlParts.Parameters && this.UrlParts.Parameters.has(keyAsStr);
            }
        }
        return toReturn;
    }
    GetQueryStringValueByKey(key) {
        let toReturn = '';
        if (this.QueryStringHasKey(key)) {
            let keyAsStr = QueryStrKey[key];
            toReturn = this.UrlParts.Parameters.get(keyAsStr);
        }
        return toReturn;
    }
    SetParameterValueByKey(key, newValue) {
        if (this.UrlParts) {
            this.UrlParts.Parameters.set(QueryStrKey[key], newValue);
        }
        else {
            this.Logger.ErrorAndThrow(this.SetParameterValueByKey.name, 'No URLParts ' + QueryStrKey[key] + ' ' + newValue);
        }
    }
    SetFilePath(newFilePath) {
        this.UrlParts.FilePath = newFilePath;
    }
    InitGenericUrlAgent() {
        return new Promise((resolve, reject) => GenericUrlAgent_awaiter(this, void 0, void 0, function* () {
            try {
                this.Logger.FuncStart(this.InitGenericUrlAgent.name);
                if (browser.tabs) {
                    yield browser.tabs.query({ currentWindow: true, active: true })
                        .then((result) => {
                        this.Logger.LogAsJsonPretty('result', result);
                        let resultTab = result[0];
                        this.SetFromHref(resultTab.url);
                        resolve();
                    })
                        .catch((err) => reject(err));
                }
                else {
                    this.Logger.Log('Init from window.location.href');
                    let urlToUse = window.location.href;
                    this.SetFromHref(urlToUse);
                }
                resolve();
            }
            catch (ex) {
                reject(ex);
            }
            this.Logger.FuncEnd(this.InitGenericUrlAgent.name);
        }));
    }
    SetFromHref(href) {
        var parser = document.createElement('a');
        parser.href = href;
        this.UrlParts = {
            OriginalRaw: href,
            Protocol: parser.protocol,
            HostAndPort: parser.host,
            Parameters: new URLSearchParams(window.location.search),
            FilePath: parser.pathname,
            Anchor: parser.hash,
            ScWindowType: scWindowType_scWindowType.Unknown,
            HasError: false,
        };
    }
    BuildFullUrlFromParts() {
        let toReturn = {
            AbsUrl: '',
        };
        if (this.UrlParts) {
            if (this.UrlParts && !this.UrlParts.HasError) {
                toReturn.AbsUrl = this.UrlParts.Protocol + '//' + this.UrlParts.HostAndPort;
                if (this.UrlParts.FilePath.length > 0) {
                    toReturn.AbsUrl += this.UrlParts.FilePath;
                }
                if (this.UrlParts.Parameters) {
                    toReturn.AbsUrl += '?' + this.UrlParts.Parameters.toString();
                }
                if (this.UrlParts.Anchor.length > 0) {
                    toReturn.AbsUrl += '#' + this.UrlParts.Anchor;
                }
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.BuildFullUrlFromParts.name, 'Null UrlParts');
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/UrlAgent/ScUrlAgent.js





class ScUrlAgent_ScUrlAgent extends GenericUrlAgent_GenericUrlAgent {
    constructor(logger) {
        super(logger);
    }
    __urlTestAgainstRegex(regexPattern, url) {
        return new RegExp(regexPattern).test(url);
    }
    GetFullUrl() {
        return this.BuildFullUrlFromParts();
    }
    GetScWindowType() {
        this.Logger.FuncStart(this.GetScWindowType.name);
        var toReturn = scWindowType_scWindowType.Unknown;
        let testPath = this.BuildFullUrlFromParts();
        if (testPath) {
            this.Logger.LogVal('current url', testPath.AbsUrl);
            if (testPath.AbsUrl.indexOf(SharedConst.Const.UrlSuffix.Login) > -1) {
                toReturn = scWindowType_scWindowType.LoginPage;
            }
            else if (new RegExp(SharedConst.Const.Regex.ContentEditor).test(testPath.AbsUrl)) {
                toReturn = scWindowType_scWindowType.ContentEditor;
            }
            else if (testPath.AbsUrl.toLowerCase().indexOf(SharedConst.Const.UrlSuffix.LaunchPad.toLowerCase()) > -1) {
                toReturn = scWindowType_scWindowType.Launchpad;
            }
            else if (this.__urlTestAgainstRegex(SharedConst.Const.Regex.PageType.Desktop, testPath.AbsUrl)) {
                toReturn = scWindowType_scWindowType.Desktop;
            }
            else if (this.__urlTestAgainstRegex(SharedConst.Const.Regex.PageType.Preview, testPath.AbsUrl)) {
                toReturn = scWindowType_scWindowType.Preview;
            }
            else if (this.__urlTestAgainstRegex(SharedConst.Const.Regex.PageType.Edit, testPath.AbsUrl)) {
                toReturn = scWindowType_scWindowType.Edit;
            }
            else if (this.__urlTestAgainstRegex(SharedConst.Const.Regex.PageType.Normal, testPath.AbsUrl)) {
                toReturn = scWindowType_scWindowType.Normal;
            }
            else {
                toReturn = scWindowType_scWindowType.Unknown;
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.GetScWindowType.name, 'null url');
        }
        this.Logger.FuncEnd(this.GetScWindowType.name, scWindowType_scWindowType[toReturn]);
        return toReturn;
    }
    BuildEditPrevNormUrl(newMode, contState) {
        this.UrlParts.Anchor = '';
        this.UrlParts.FilePath = '';
        this.UrlParts.ScWindowType = scWindowType_scWindowType.Unknown;
        this.SetParameterValueByKey(QueryStrKey.sc_itemid, contState.ActiveCe.ActiveNode.NodeId.AsBracedGuid);
        this.SetParameterValueByKey(QueryStrKey.sc_mode, scMode[newMode]);
        this.SetParameterValueByKey(QueryStrKey.sc_lang, 'en');
        this.SetParameterValueByKey(QueryStrKey.sc_site, 'website');
    }
    SetScMode(newMode) {
        if (this.UrlParts && newMode) {
            if (this.UrlParts && this.UrlParts)
                this.SetParameterValueByKey(QueryStrKey.sc_mode, scMode[newMode]);
        }
    }
    SetFilePathFromWindowType(windowType = null) {
        if (!windowType) {
            windowType = scWindowType_scWindowType.Unknown;
        }
        switch (windowType) {
            case scWindowType_scWindowType.ContentEditor:
                this.SetFilePath(SharedConst.Const.UrlSuffix.CE);
                break;
            case scWindowType_scWindowType.Desktop:
                this.SetFilePath(SharedConst.Const.UrlSuffix.Desktop);
                break;
            case scWindowType_scWindowType.Edit:
                this.SetFilePath(SharedConst.Const.UrlSuffix.None);
                break;
            case scWindowType_scWindowType.Preview:
                this.SetFilePath(SharedConst.Const.UrlSuffix.None);
                break;
            case scWindowType_scWindowType.Normal:
                this.SetFilePath(SharedConst.Const.UrlSuffix.None);
                break;
            default:
                this.SetFilePath('');
                this.Logger.ErrorAndThrow(this.SetFilePathFromWindowType.name, 'unaccounted for window type');
                break;
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/TabManager.js
var TabManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class TabManager_TabManager extends PopUpManagerBase {
    constructor(hub, allAgents) {
        super(hub, allAgents);
        this.AllAgents.Logger.InstantiateStart(TabManager_TabManager.name);
        this.AllAgents.Logger.InstantiateEnd(TabManager_TabManager.name);
    }
    GetFullUrl() {
        return this.ScUrlAgent.BuildFullUrlFromParts();
    }
    SetQueryStringKeyValue(qsKey, qsValue) {
        this.ScUrlAgent.SetParameterValueByKey(qsKey, qsValue);
    }
    GetUrlParts() {
        return this.ScUrlAgent.GetUrlParts();
    }
    GetWindowType() {
        return this.ScUrlAgent.GetScWindowType();
    }
    InitTabManager() {
        return TabManager_awaiter(this, void 0, void 0, function* () {
            this.AllAgents.Logger.FuncStart(TabManager_TabManager.name, this.InitTabManager.name);
            this.ScUrlAgent = new ScUrlAgent_ScUrlAgent(this.AllAgents.Logger);
            yield this.ScUrlAgent.InitGenericUrlAgent();
            this.AllAgents.Logger.FuncEnd(TabManager_TabManager.name, this.InitTabManager.name);
        });
    }
    ChangeLocationSwitchBoard(desiredPageType) {
        this.AllAgents.Logger.FuncStart(this.ChangeLocationSwitchBoard.name, 'desired = ' + scWindowType_scWindowType[desiredPageType]);
        var iteration = new IterationDrone_IterationDrone(this.AllAgents.Logger, this.ChangeLocationSwitchBoard.name);
        if (iteration.DecrementAndKeepGoing()) {
            var currentScWindowType = this.ScUrlAgent.GetScWindowType();
            if (currentScWindowType === scWindowType_scWindowType.LoginPage) {
                var self = this;
            }
            else if (currentScWindowType === scWindowType_scWindowType.Launchpad || currentScWindowType === scWindowType_scWindowType.ContentEditor || currentScWindowType === scWindowType_scWindowType.Desktop) {
                var self = this;
                this.ScUrlAgent.SetFilePathFromWindowType(desiredPageType);
                var absUrl = this.ScUrlAgent.BuildFullUrlFromParts();
                var callBackOnSuccessfulHrefChange = function () {
                    self.AllAgents.Logger.Log('Callback triggered');
                    self.ChangeLocationSwitchBoard(desiredPageType);
                };
                this.AllAgents.HelperAgent.PromisesBasic.TabChainSetHrefWaitForComplete(absUrl)
                    .then(() => {
                    console.log('todo');
                })
                    .then(() => callBackOnSuccessfulHrefChange);
            }
        }
        this.AllAgents.Logger.FuncEnd(this.ChangeLocationSwitchBoard.name);
    }
    SetScModeFromCeDt(newMode, currentPageType) {
        return TabManager_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => TabManager_awaiter(this, void 0, void 0, function* () {
                this.AllAgents.Logger.FuncStart(this.SetScModeFromCeDt.name, scMode[newMode]);
                this.AllAgents.Logger.LogVal('WindowType', StaticHelpers_StaticHelpers.WindowTypeAsString(currentPageType));
                let result = new PromiseResult(this.SetScModeFromCeDt.name, this.AllAgents.Logger);
                this.AllAgents.Logger.MarkerA();
                if (currentPageType === scWindowType_scWindowType.Desktop) {
                    this.AllAgents.Logger.MarkerB();
                    let contState = this.UiMan().CurrContentState;
                    this.AllAgents.Logger.MarkerC();
                    if (contState && contState.ActiveCe && contState.ActiveCe.ActiveNode) {
                        this.AllAgents.Logger.MarkerD();
                        let currentNodeId = contState.ActiveCe.ActiveNode;
                        this.ScUrlAgent.BuildEditPrevNormUrl(newMode, contState);
                        let editUrl = this.ScUrlAgent.GetFullUrl();
                        yield this.BrowserMan().CreateNewTab(editUrl)
                            .then(() => result.MarkSuccessful())
                            .catch((ex) => result.MarkFailed(ex));
                    }
                    else {
                        this.AllAgents.Logger.LogAsJsonPretty('contState', contState);
                        reject('unknown contState ');
                    }
                }
                else {
                    this.AllAgents.Logger.Log('need to handle ce case');
                }
                this.AllAgents.Logger.FuncEnd(this.SetScModeFromCeDt.name, scMode[newMode]);
                if (result.WasSuccessful()) {
                    resolve();
                }
                else {
                    reject(result.RejectReasons);
                }
            }));
        });
    }
    SetScMode(newMode) {
        return new Promise((resolve, reject) => TabManager_awaiter(this, void 0, void 0, function* () {
            this.AllAgents.Logger.FuncStart(this.SetScMode.name, scMode[newMode]);
            let result = new PromiseResult(this.SetScMode.name, this.AllAgents.Logger);
            var currentPageType = this.ScUrlAgent.GetScWindowType();
            if (currentPageType === scWindowType_scWindowType.ContentEditor
                ||
                    currentPageType === scWindowType_scWindowType.Desktop) {
                yield this.SetScModeFromCeDt(newMode, currentPageType)
                    .then(() => result.MarkSuccessful())
                    .catch((ex) => result.MarkFailed(ex));
            }
            else if (currentPageType === scWindowType_scWindowType.Edit
                || currentPageType === scWindowType_scWindowType.Normal
                || currentPageType === scWindowType_scWindowType.Preview) {
                this.ScUrlAgent.SetScMode(newMode);
                let newHref = this.ScUrlAgent.GetFullUrl();
                yield this.AllAgents.HelperAgent.PromisesBasic.TabChainSetHrefWaitForComplete(newHref)
                    .then(() => result.MarkSuccessful())
                    .catch((ex) => result.MarkFailed(ex));
            }
            this.AllAgents.Logger.FuncEnd(this.SetScMode.name);
            if (result.WasSuccessful()) {
                resolve();
            }
            else {
                reject(result.RejectReasons);
            }
        }));
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/UiManager/Modules/UiFeedbackModules/UiFeedbackModuleBase/UiFeedbackModuleBase.js
class UiFeedbackModuleBase {
    constructor(selector, logger) {
        this.indentedLineBreak = '<br/>&nbsp;&nbsp;&nbsp;';
        this.lineBreak = '<br/>';
        this.__elementSelector = selector;
        this.Logger = logger;
    }
    __getFeedbackElem() {
        if (!this.__targetElement) {
            this.__targetElement = document.querySelector(this.__elementSelector);
            if (!this.__targetElement) {
                this.Logger.ErrorAndThrow(this.__getFeedbackElem.name, 'target not found: ' + this.__elementSelector);
            }
        }
        return this.__targetElement;
    }
    AddHtmlString(htmlText) {
        if (htmlText) {
            this.__getFeedbackElem().insertAdjacentHTML('beforeend', htmlText);
        }
        else {
            this.Logger.ErrorAndThrow(this.AddHtmlString.name, 'htmlText');
        }
    }
    WriteManyLines(strAr) {
        if (strAr) {
            for (var ldx = 0; ldx < strAr.length; ldx++) {
                this.WriteSingleLine(strAr[ldx]);
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.WriteManyLines.name, 'No strAr');
        }
    }
    ClearFeedbackElem() {
        var elem = this.__getFeedbackElem();
        if (elem) {
            elem.innerHTML = '';
        }
        else {
            this.Logger.ErrorAndThrow(this.ClearFeedbackElem.name, 'No feedback elem found');
        }
    }
    ConvertIndents(input) {
        let toReturn = '';
        for (var idx = 0; idx < input.length; idx++) {
            let oneChar = input[idx];
            if (oneChar === ' ') {
                toReturn += '&nbsp;';
            }
            else {
                toReturn += input.substring(idx);
                break;
            }
        }
        return toReturn;
    }
    ConvertLineBreaks(input) {
        return input.replace(/\r?\n/g, "<br/>");
    }
    ConvertTabs(input) {
        return input.replace(/\t/g, "&nbsp;&nbsp;xxxxxx");
    }
    WriteSingleLine(text) {
        var ta = this.__getFeedbackElem();
        if (ta) {
            ta.innerHTML += this.ConvertIndents(this.ConvertTabs(this.ConvertLineBreaks(text)) + '<br/>');
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/UiManager/Modules/UiFeedbackModules/FeedbackModuleMessages/FeedbackModuleMessages.js

class FeedbackModuleMessages_FeedbackModuleMessages extends UiFeedbackModuleBase {
    constructor(selector, loggerAgent) {
        super(selector, loggerAgent);
    }
    Init() {
    }
    UpdateMsgStatusStack(textToShow) {
        this.AddHtmlString(textToShow + '</br>');
        this.Logger.Log('msg stat: ' + textToShow);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Drones/AccordianDrone/AccordianDrone.js

class AccordianDrone_AccordianDrone {
    constructor(loggerAgent, settingsAgent, uiElem, oneSetting) {
        this.Logger = loggerAgent;
        this.SettingsAgent = settingsAgent;
        this.AssociatedSetting = oneSetting;
        this.AssociatedElement = uiElem;
        this.Init();
    }
    Init() {
        this.AssociatedBodyElem = this.GetaccordionBodyElem(this.AssociatedElement);
        if (this.AssociatedBodyElem) {
            this.AddListener();
        }
        else {
            this.Logger.LogAsJsonPretty('this.AssociatedElement', this.AssociatedElement);
            this.Logger.ErrorAndThrow(this.RestoreAccordionState.name, 'Sibling not found ' + this.AssociatedSetting.Friendly);
        }
    }
    AddListener() {
        if (this.AssociatedElement) {
            let self = this;
            this.AssociatedElement.addEventListener('click', (evt) => {
                self.ToggleAccordion(evt);
            });
        }
    }
    RestoreAccordionState(oneSetting) {
        this.Logger.FuncStart(this.RestoreAccordionState.name, oneSetting.SettingKey);
        if (this.AssociatedBodyElem) {
            this.SetAccordionClass(this.AssociatedBodyElem, oneSetting.ValueAsBool());
        }
        this.Logger.FuncEnd(this.RestoreAccordionState.name);
    }
    ToggleAccordion(evt) {
        this.Logger.FuncStart(this.ToggleAccordion.name);
        if (this.AssociatedBodyElem && this.AssociatedSetting) {
            if (this.AssociatedSetting) {
                var newVal = !(this.AssociatedSetting.ValueAsBool());
                this.SetAccordionClass(this.AssociatedBodyElem, newVal);
                this.SettingsAgent.SetByKey(this.AssociatedSetting.SettingKey, newVal);
            }
        }
        else {
            this.Logger.ErrorAndThrow(this.ToggleAccordion.name, 'did not find sib');
        }
        this.Logger.FuncEnd(this.ToggleAccordion.name);
    }
    GetaccordionBodyElem(sib) {
        var toReturn;
        if (sib) {
            var siblings = sib.parentElement.getElementsByClassName('accordion-content');
            if (siblings) {
                var toReturn = siblings[0];
            }
            else {
                this.Logger.ErrorAndContinue(this.GetaccordionBodyElem.name, 'Sibling not found');
            }
        }
        return toReturn;
    }
    SetAccordionClass(targetElem, isCollapsed) {
        if (!isCollapsed) {
            targetElem.classList.remove(PopConst.Const.ClassNames.HS.Collapsed);
        }
        else {
            targetElem.classList.add(PopConst.Const.ClassNames.HS.Collapsed);
        }
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Drones/AccordianDrone/AccordianManager.js
var AccordianManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class AccordianManager_AccordianManager {
    constructor(loggerAgent, settingsAgent) {
        this.AllAccordians = [];
        this.Logger = loggerAgent;
        this.SettingsAgent = settingsAgent;
    }
    RestoreAccordionState(oneSetting) {
        return AccordianManager_awaiter(this, void 0, void 0, function* () {
            if (oneSetting) {
                let foundAccordian = this.GetAccordianByKey(oneSetting);
                if (foundAccordian) {
                    foundAccordian.RestoreAccordionState(oneSetting);
                }
                else {
                    this.Logger.Log('No accordion found for ' + oneSetting.Friendly);
                }
            }
            else {
                this.Logger.Log('No setting provided ');
            }
        });
    }
    AddAccordianDrone(oneSetting, uiElem) {
        let newAccordianDrone = new AccordianDrone_AccordianDrone(this.Logger, this.SettingsAgent, uiElem, oneSetting);
        this.AllAccordians.push(newAccordianDrone);
    }
    GetAccordianByKey(oneSetting) {
        let toReturn = null;
        for (var idx = 0; idx < this.AllAccordians.length; idx++) {
            let candidate = this.AllAccordians[idx];
            if (candidate.AssociatedSetting.SettingKey === oneSetting.SettingKey) {
                toReturn = candidate;
                break;
            }
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/AutoBuild/BuildNum.js
const BuiltDateStamp = 1598890355999;


// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/UiManager/ButtonVisibilityTests.js
class ButtonVisibilityTester {
    VisibilityTestWindowType(windowType, currentWindowType) {
        let toReturn = false;
        toReturn = windowType === currentWindowType;
        return toReturn;
    }
    VisibilityTestSnapShotSelected(currSelSnapshot, guidHelper) {
        let toReturn = false;
        if (currSelSnapshot && currSelSnapshot.AsBracedGuid !== guidHelper.EmptyGuid().AsBracedGuid) {
            toReturn = true;
        }
        return toReturn;
    }
    VisibilityTestSnapShotable(currentContentState) {
        return this.VisibilityTestActiveCeNode(currentContentState);
    }
    VisibilityTestActiveCeNode(currentContentState) {
        let toReturn = false;
        toReturn = currentContentState && currentContentState.ActiveCe && currentContentState.ActiveCe.ActiveNode !== null;
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/UiButtonStateManager.js



class UiButtonStateManager_UiButtonStateManager {
    constructor(logger) {
        this.Logger = logger;
        this.Logger.FuncStart(UiButtonStateManager_UiButtonStateManager.name);
        this.Logger.FuncEnd(UiButtonStateManager_UiButtonStateManager.name);
    }
    Init(AllMenuCommands) {
        this.AllMenuCommands = AllMenuCommands;
        this.Tester = new ButtonVisibilityTester();
    }
    TestAgainstAllSetControllers(command) {
        let toReturn = false;
        if (command.VisibilityControllers.length > 0) {
            for (var jdx = 0; jdx < command.VisibilityControllers.length; jdx++) {
                let oneControl = command.VisibilityControllers[jdx];
                switch (oneControl) {
                    case VisibilityType.Desktop:
                        toReturn = this.Tester.VisibilityTestWindowType(scWindowType_scWindowType.Desktop, this.currentWindowType);
                        break;
                    case VisibilityType.ActiveCeNode:
                        toReturn = this.Tester.VisibilityTestActiveCeNode(this.currentContentState);
                        break;
                    case VisibilityType.ContentEditor:
                        toReturn = this.Tester.VisibilityTestWindowType(scWindowType_scWindowType.ContentEditor, this.currentWindowType);
                        break;
                    case VisibilityType.Edit:
                        toReturn = this.Tester.VisibilityTestWindowType(scWindowType_scWindowType.Edit, this.currentWindowType);
                        break;
                    case VisibilityType.Launchpad:
                        toReturn = this.Tester.VisibilityTestWindowType(scWindowType_scWindowType.Launchpad, this.currentWindowType);
                        break;
                    case VisibilityType.LoginPage:
                        toReturn = this.Tester.VisibilityTestWindowType(scWindowType_scWindowType.LoginPage, this.currentWindowType);
                        break;
                    case VisibilityType.Normal:
                        toReturn = this.Tester.VisibilityTestWindowType(scWindowType_scWindowType.Normal, this.currentWindowType);
                        break;
                    case VisibilityType.Preview:
                        toReturn = this.Tester.VisibilityTestWindowType(scWindowType_scWindowType.Preview, this.currentWindowType);
                        break;
                    case VisibilityType.SnapShotable:
                        toReturn = this.Tester.VisibilityTestSnapShotable(this.currentContentState);
                        break;
                    case VisibilityType.SnapShotSelected:
                        toReturn = this.Tester.VisibilityTestSnapShotSelected(this.currSelSnapshot, this.guidHelper);
                        break;
                    case VisibilityType.NotLogin:
                        toReturn = !this.Tester.VisibilityTestWindowType(scWindowType_scWindowType.LoginPage, this.currentWindowType);
                        break;
                    case VisibilityType.CommandIsRunning:
                        toReturn = false;
                        break;
                    case VisibilityType.Unknown:
                        this.Logger.ErrorAndThrow(this.TestAgainstAllSetControllers.name, 'unknown visibility type');
                        break;
                    default:
                        this.Logger.ErrorAndThrow(this.TestAgainstAllSetControllers.name, 'unknown visibility type');
                        break;
                }
                if (toReturn) {
                    break;
                }
            }
        }
        else {
            toReturn = true;
        }
        return toReturn;
    }
    SetOneButtonVisibility(targetButton, passesOneTest) {
        if (targetButton) {
            if (passesOneTest) {
                targetButton.classList.remove('disabled');
                targetButton.removeAttribute('disabled');
            }
            else {
                targetButton.classList.add('disabled');
                targetButton.setAttribute('disabled', 'disabled');
            }
        }
        else {
            this.Logger.ErrorAndContinue(this.SetOneButtonVisibility.name, 'targetButton is NULL');
        }
    }
    RefreshUi(currentWindowType, currSelSnapshot, guidHelper, contentState) {
        this.Logger.FuncStart(this.RefreshUi.name, this.AllMenuCommands.length);
        this.currentWindowType = currentWindowType;
        this.currSelSnapshot = currSelSnapshot;
        this.guidHelper = guidHelper;
        this.currentContentState = contentState;
        for (var idx = 0; idx < this.AllMenuCommands.length; idx++) {
            var oneCommand = this.AllMenuCommands[idx];
            if (oneCommand.ButtonSelector !== null) {
                let passesOneTest = false;
                var targetButton = document.querySelector(oneCommand.ButtonSelector);
                if (targetButton) {
                    passesOneTest = this.TestAgainstAllSetControllers(oneCommand);
                }
                else {
                    this.Logger.LogAsJsonPretty('oneCommand', oneCommand);
                    this.Logger.ErrorAndContinue(this.RefreshUi.name, 'target button not found: ' + oneCommand.ButtonSelector);
                }
                this.SetOneButtonVisibility(targetButton, passesOneTest);
            }
        }
        this.Logger.FuncEnd(this.RefreshUi.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/UiManager/Modules/SelectSnapshotModule/SelectSnapshotModule.js






class SelectSnapshotModule_SelectSnapshotModule {
    constructor(selector, logger, guidHelper) {
        this.AllCallbacks = [];
        this.__selector = selector;
        this.Logger = logger;
        this.__guidHelper = guidHelper;
    }
    Init() {
        this.AssignOnChangeEvent(PopConst.Const.Selector.HS.SelStateSnapShot);
    }
    AssignOnChangeEvent(selector) {
        this.Logger.FuncStart(this.AssignOnChangeEvent.name, selector);
        var targetElem = document.querySelector(selector);
        if (!targetElem) {
            this.Logger.ErrorAndThrow(this.AssignOnChangeEvent.name, 'No Id: ' + selector);
        }
        else {
            targetElem.onchange = (() => {
                let self = this;
                this.OnChangeEventHandler(self);
            });
        }
        this.Logger.FuncEnd(this.AssignOnChangeEvent.name, selector);
    }
    AddCallbackForSelChanged(callbackFunc) {
        this.AllCallbacks.push(callbackFunc);
    }
    OnChangeEventHandler(self) {
        for (var idx = 0; idx < self.AllCallbacks.length; idx++) {
            let oneCallback = self.AllCallbacks[idx];
            oneCallback();
        }
    }
    SetContentState(contentState) {
        this.ContentState = contentState;
    }
    RefreshUi() {
        this.PopulateStateOfSnapShotSelect();
    }
    __getSelectElem() {
        return window.document.querySelector(this.__selector);
    }
    SelectHeaderStr(prefix) {
        let toReturn = StaticHelpers_StaticHelpers.BufferString('', 4, BufferChar.Period, BufferDirection.right)
            + StaticHelpers_StaticHelpers.BufferString('Time Stamp', PopConst.Const.SnapShotFormat.lenTimestamp, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('Type', PopConst.Const.SnapShotFormat.lenPageType, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('Nickname', PopConst.Const.SnapShotFormat.lenNickname, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('Active Node.', PopConst.Const.SnapShotFormat.lenActiveNode, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('Fav.', PopConst.Const.SnapShotFormat.lenFavorite, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('Id', PopConst.Const.SnapShotFormat.lenShortId, BufferChar.Period, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString('#CE', PopConst.Const.SnapShotFormat.lenCeCount, BufferChar.Period, BufferDirection.right);
        return toReturn;
    }
    GetSelectSnapshotId() {
        let currentVal = this.__getSelectElem().value;
        let toReturn;
        if (currentVal) {
            toReturn = this.__guidHelper.ParseGuid(currentVal, true);
        }
        else {
            toReturn = this.__guidHelper.EmptyGuid();
        }
        return toReturn;
    }
    WriteHeaders(targetSel) {
        var toReturn = {
            Auto: null,
            Favorite: null,
            AutoTitle: null,
            FavoriteTitle: null,
        };
        toReturn.Auto = window.document.createElement('optgroup');
        toReturn.Auto.label = this.SelectHeaderStr('');
        toReturn.Auto.id = PopConst.Const.ElemId.HS.SelectHeaderAuto;
        toReturn.AutoTitle = window.document.createElement('optgroup');
        toReturn.AutoTitle.label = 'Auto Snap Shots';
        toReturn.AutoTitle.id = PopConst.Const.ElemId.HS.SelectHeaderAutoTitle;
        toReturn.AutoTitle.classList.add('title');
        toReturn.Favorite = window.document.createElement('optgroup');
        toReturn.Favorite.label = this.SelectHeaderStr('');
        toReturn.Favorite.id = PopConst.Const.ElemId.HS.SelectHeaderFavorite;
        toReturn.FavoriteTitle = window.document.createElement('optgroup');
        toReturn.FavoriteTitle.label = 'Typical Snap Shots';
        toReturn.FavoriteTitle.id = PopConst.Const.ElemId.HS.SelectHeaderFavoriteTitle;
        toReturn.FavoriteTitle.classList.add('title');
        return toReturn;
    }
    SelectChanged() {
        this.Logger.FuncStart(this.SelectChanged.name);
        this.Logger.FuncEnd(this.SelectChanged.name);
    }
    PopulateStateOfSnapShotSelect() {
        this.Logger.FuncStart(this.PopulateStateOfSnapShotSelect.name);
        let priorValue = this.GetSelectSnapshotId();
        if (this.ContentState.SnapShotsMany.CurrentSnapShots) {
            let snapShots = this.ContentState.SnapShotsMany.CurrentSnapShots;
            if (snapShots) {
                var targetSel = this.__getSelectElem();
                if (targetSel) {
                    this.CleanExistingSelection(targetSel);
                    var headers = this.WriteHeaders(targetSel);
                    if (snapShots && snapShots.length > 0) {
                        this.Logger.Log('targetSel.options.length : ' + targetSel.options.length);
                        for (var idx = 0; idx < snapShots.length; idx++) {
                            this.Logger.Log('snapShots:' + idx + ":" + snapShots.length);
                            var data = snapShots[idx];
                            let el = this.BuildOne(data, priorValue, idx);
                            this.AppendToCorrectSnapshotGroup(data, el, headers);
                        }
                    }
                    targetSel.appendChild(headers.FavoriteTitle);
                    targetSel.appendChild(headers.Favorite);
                    targetSel.appendChild(headers.AutoTitle);
                    targetSel.appendChild(headers.Auto);
                }
            }
        }
        this.Logger.FuncEnd(this.PopulateStateOfSnapShotSelect.name);
    }
    TimeNicknameFavStr(data) {
        var typeStr = '';
        if (data.WindowType === scWindowType_scWindowType.ContentEditor) {
            typeStr = 'Cont Ed';
        }
        else if (data.WindowType === scWindowType_scWindowType.Desktop) {
            typeStr = 'Desktop';
        }
        var activeCeNode = '';
        for (var idx = 0; idx < data.AllCEAr.length; idx++) {
            var candidateCe = data.AllCEAr[idx];
            for (var jdx = 0; jdx < candidateCe.AllTreeNodeAr.length; jdx++) {
                var candidateNode = candidateCe.AllTreeNodeAr[jdx];
                if (candidateNode.IsActive) {
                    var lvl2Node = '';
                    if (jdx >= 2) {
                        lvl2Node = candidateCe.AllTreeNodeAr[1].NodeFriendly + '/';
                    }
                    activeCeNode = lvl2Node + candidateNode.NodeFriendly;
                    break;
                }
            }
        }
        let toReturn = StaticHelpers_StaticHelpers.BufferString(data.TimeStampFriendly, PopConst.Const.SnapShotFormat.lenTimestamp, BufferChar.space, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString(typeStr, PopConst.Const.SnapShotFormat.lenPageType, BufferChar.Nbsp, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString(data.NickName, PopConst.Const.SnapShotFormat.lenNickname, BufferChar.Nbsp, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString(activeCeNode, PopConst.Const.SnapShotFormat.lenActiveNode, BufferChar.Nbsp, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString((data.Flavor === SnapShotFlavor.Favorite ? '*' : ''), PopConst.Const.SnapShotFormat.lenFavorite, BufferChar.Nbsp, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString(data.Id.AsShort, PopConst.Const.SnapShotFormat.lenShortId, BufferChar.Nbsp, BufferDirection.right)
            + PopConst.Const.SnapShotFormat.colSep + StaticHelpers_StaticHelpers.BufferString(data.AllCEAr.length.toString(), PopConst.Const.SnapShotFormat.lenCeCount, BufferChar.Nbsp, BufferDirection.right);
        return toReturn;
    }
    BuildOne(data, prior, idx) {
        let el = window.document.createElement('option');
        let timeNicknameFavStr = this.TimeNicknameFavStr(data);
        el.innerHTML = timeNicknameFavStr;
        if (data.Flavor === SnapShotFlavor.Favorite) {
            el.classList.add('favorite');
        }
        el.value = data.Id.AsString;
        if ((data.Id && prior && data.Id.AsString === prior.AsString) ||
            (idx === 0 && !prior)
            ||
                (idx === 0 && prior.AsString === this.__guidHelper.EmptyGuid().AsString)) {
            this.Logger.Log('Setting to selected');
            el.selected = true;
        }
        return el;
    }
    AppendToCorrectSnapshotGroup(data, el, headers) {
        if (data.Flavor === SnapShotFlavor.Autosave) {
            headers.Auto.appendChild(el);
        }
        else {
            headers.Favorite.appendChild(el);
        }
    }
    CleanExistingSelection(targetSel) {
        var optGroup = targetSel.querySelector('[id=' + PopConst.Const.ElemId.HS.SelectHeaderAutoTitle + ']');
        if (optGroup) {
            optGroup.remove();
        }
        optGroup = targetSel.querySelector('[id=' + PopConst.Const.ElemId.HS.SelectHeaderAuto + ']');
        if (optGroup) {
            optGroup.remove();
        }
        optGroup = targetSel.querySelector('[id=' + PopConst.Const.ElemId.HS.SelectHeaderFavorite + ']');
        if (optGroup) {
            optGroup.remove();
        }
        optGroup = targetSel.querySelector('[id=' + PopConst.Const.ElemId.HS.SelectHeaderFavoriteTitle + ']');
        if (optGroup) {
            optGroup.remove();
        }
        targetSel.options.length = 0;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/UiManager/Modules/SettingsModule/SettingsModule.js

class SettingsModule_SettingsModule {
    constructor(logger, settingsAgent, accordianManager) {
        this.Logger = logger;
        this.SettingsAgent = settingsAgent;
        this.AccordianManager = accordianManager;
    }
    Init() {
    }
    RefreshUi() {
        this.Logger.FuncStart(this.RefreshUi.name);
        for (var idx = 0; idx < this.SettingsAgent.SettingsAr.length; idx++) {
            var oneSetting = this.SettingsAgent.SettingsAr[idx];
            if (oneSetting.UiSelector) {
                var foundElem = document.querySelector(oneSetting.UiSelector);
                if (foundElem) {
                    if (oneSetting.DataType === SettingType.BoolCheckBox) {
                        let valueToDisplay = (oneSetting.ValueAsObj || oneSetting.DefaultValue);
                        foundElem.checked = valueToDisplay;
                    }
                    if (oneSetting.DataType === SettingType.Accordion) {
                        this.AccordianManager.RestoreAccordionState(oneSetting);
                    }
                }
                else {
                    this.Logger.LogAsJsonPretty('oneSetting', oneSetting);
                    this.Logger.ErrorAndThrow(this.RefreshUi.name, 'ui element not found: ' + oneSetting.UiSelector);
                }
            }
        }
        this.Logger.FuncEnd(this.RefreshUi.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/UiManager/Modules/UiFeedbackModules/FeedbackModuleBrowserState/FeedbackModuleBrowserState.js



class FeedbackModuleBrowserState_FeedbackModuleBrowserState extends UiFeedbackModuleBase {
    constructor(selector, loggerAgent) {
        super(selector, loggerAgent);
    }
    Init() {
    }
    RefreshUi() {
    }
    PopulateFeedackBrowserState(urlParts) {
        var targetCurrStateDiv = window.document.querySelector(PopConst.Const.Selector.HS.FeedbackBrowserState);
        var allStateText = 'Browser State' + this.lineBreak;
        allStateText += this.lineBreak + 'URL Parts';
        allStateText += this.indentedLineBreak + 'Page Type: ' + StaticHelpers_StaticHelpers.WindowTypeAsString(urlParts.ScWindowType);
        allStateText += this.indentedLineBreak + 'Url Full (raw  ): ' + urlParts.OriginalRaw;
        allStateText += this.indentedLineBreak + 'Protocol: ' + urlParts.Protocol;
        allStateText += this.indentedLineBreak + 'Host & Port: ' + urlParts.HostAndPort;
        allStateText += this.indentedLineBreak + 'File Path: ' + urlParts.FilePath;
        targetCurrStateDiv.innerHTML = allStateText;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/UiManager/Modules/UiFeedbackModules/FeedbackModuleContentState/FeedbackModuleContentState.js

class FeedbackModuleContentState_FeedbackModuleContentState extends UiFeedbackModuleBase {
    constructor(selector, loggerAgent) {
        super(selector, loggerAgent);
    }
    Init() {
    }
    RefreshUi() {
    }
    PopulateContentStateFeedack(contentState) {
        var allStateText = '';
        allStateText += JSON.stringify(contentState, null, 1);
        this.WriteSingleLine(allStateText);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/UiManager/Modules/UiFeedbackModules/FeedbackModulePopUpState/FeedbackModulePopUpState.js

class FeedbackModulePopUpState_FeedbackModulePopUpState extends UiFeedbackModuleBase {
    constructor(selector, loggerAgent) {
        super(selector, loggerAgent);
    }
    Init() {
    }
    RefreshUi() {
    }
    PopulatePopUpStateUI(selectSnapShot) {
        var allStateText = 'Pop Up State:' + this.lineBreak;
        allStateText += 'Select Snapshot: ' + selectSnapShot.AsShort;
        this.AddHtmlString(allStateText);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/UiManager/Modules/UiFeedbackModules/UiFeedbackModuleLog/UiFeedbackModuleLog.js

class UiFeedbackModuleLog_UiFeedbackModuleLog extends UiFeedbackModuleBase {
    WriteText(text) {
        this.WriteSingleLine(text);
    }
    constructor(selector, logger) {
        super(selector, logger);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/UiManager/UiManager.js
var UiManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};














class UiManager_UiManager extends PopUpManagerBase {
    constructor(popHub, allAgents) {
        super(popHub, allAgents);
        this.MenuEnabled = true;
        this.MenuFocused = true;
        this.OtherFocused = false;
        this.ParentFocused = false;
        this.AllAgents.Logger.InstantiateStart(UiManager_UiManager.name);
        this.ButtonStateManager = new UiButtonStateManager_UiButtonStateManager(this.AllAgents.Logger);
        this.AccordianManager = new AccordianManager_AccordianManager(this.AllAgents.Logger, this.AllAgents.SettingsAgent);
        this.FeedbackModuleMessages = new FeedbackModuleMessages_FeedbackModuleMessages(PopConst.Const.Selector.HS.DivOverlayModule, this.AllAgents.Logger);
        this.FeedbackModuleLog = new UiFeedbackModuleLog_UiFeedbackModuleLog(PopConst.Const.Selector.HS.FeedbackLogElement, this.AllAgents.Logger);
        this.AllAgents.Logger.AddWriter(this.FeedbackModuleLog);
        this.FeedbackModuleContentState = new FeedbackModuleContentState_FeedbackModuleContentState(PopConst.Const.Selector.HS.FeedbackContentState, this.AllAgents.Logger);
        this.FeedbackModuleBrowserState = new FeedbackModuleBrowserState_FeedbackModuleBrowserState(PopConst.Const.Selector.HS.FeedbackBrowserState, this.AllAgents.Logger);
        this.FeedbackModulePopUpState = new FeedbackModulePopUpState_FeedbackModulePopUpState(PopConst.Const.Selector.HS.FeedbackPopUpState, this.AllAgents.Logger);
        this.ModuleSelectSnapShot = new SelectSnapshotModule_SelectSnapshotModule(PopConst.Const.Selector.HS.SelStateSnapShot, this.AllAgents.Logger, this.Helpers().GuidHelper);
        this.SettingsModule = new SettingsModule_SettingsModule(this.AllAgents.Logger, this.AllAgents.SettingsAgent, this.AccordianManager);
        this.AllAgents.Logger.InstantiateEnd(UiManager_UiManager.name);
    }
    InitUiManager() {
        this.AllAgents.Logger.FuncStart(this.InitUiManager.name);
        var self = this;
        this.WriteBuildNumToUi();
        this.ModuleSelectSnapShot.Init();
        this.FeedbackModuleBrowserState.Init();
        this.FeedbackModuleContentState.Init();
        this.ScheduleAutoSaveSnapShot();
        this.ScheduleAutoLogin();
        this.ModuleSelectSnapShot.AddCallbackForSelChanged(() => {
            let self = this;
            self.RefreshUi();
        });
        this.ButtonStateManager.Init(this.EventMan().AllMenuCommands);
        this.AllAgents.Logger.FuncEnd(this.InitUiManager.name);
    }
    SetContentState(contentState) {
        this.LastKnownContentState = contentState;
    }
    SelectChanged() {
        this.ModuleSelectSnapShot.SelectChanged();
    }
    OnFailedCommand(err) {
        this.AllAgents.Logger.Log(err);
    }
    ClosePopUp() {
        return new Promise((resolve, reject) => {
            this.AllAgents.Logger.FuncStart(this.ClosePopUp.name);
            try {
                this.FeedbackModuleMessages.UpdateMsgStatusStack('Command Completed Successfully');
                let setting = this.AllAgents.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.DebugKeepDialogOpen);
                if (!this.AllAgents.SettingsAgent.ValueAsBool(setting)) {
                    window.close();
                }
                else {
                    this.AllAgents.Logger.Log('Window not closed because of setting: ' + setting.Friendly);
                }
                resolve();
            }
            catch (ex) {
                console.log(ex.toString());
                reject(ex);
            }
            this.AllAgents.Logger.FuncEnd(this.ClosePopUp.name);
        });
    }
    AutoLogin() {
    }
    ScheduleAutoSaveSnapShot() {
    }
    ScheduleAutoLogin() {
    }
    WriteBuildNumToUi() {
        this.AllAgents.Logger.LogVal('BuiltDateStamp', BuiltDateStamp);
        var targetTag = document.querySelector(PopConst.Const.Selector.HS.BuildStamp);
        if (targetTag) {
            targetTag.innerText = 'build stamp: ' + this.AllAgents.HelperAgent.UtilityHelp.MakeFriendlyDate(new Date(BuiltDateStamp));
        }
        else {
            this.AllAgents.Logger.ErrorAndThrow(this.WriteBuildNumToUi.name, 'No Build Stamp Element Found');
        }
    }
    __GetCancelButton() {
        return document.getElementById(PopConst.Const.Selector.HS.HsCancel);
    }
    SetCancelFlag() {
        var btn = this.__GetCancelButton();
        if (btn) {
            btn.classList.add('red');
        }
    }
    ClearCancelFlag() {
        var btn = this.__GetCancelButton();
        if (btn) {
            btn.classList.remove('red');
        }
    }
    SetUIStates(urlParts) {
        return UiManager_awaiter(this, void 0, void 0, function* () {
            this.AllAgents.Logger.FuncStart(this.SetUIStates.name);
            if (this.AllAgents.Logger.IsNotNullOrUndefinedBool('state', this.LastKnownContentState)) {
                this.FeedbackModulePopUpState.PopulatePopUpStateUI(this.ModuleSelectSnapShot.GetSelectSnapshotId());
                this.FeedbackModuleContentState.PopulateContentStateFeedack(this.LastKnownContentState);
                this.FeedbackModuleBrowserState.PopulateFeedackBrowserState(urlParts);
            }
            this.AllAgents.Logger.FuncEnd(this.SetUIStates.name);
        });
    }
    RefreshUi() {
        return UiManager_awaiter(this, void 0, void 0, function* () {
            this.AllAgents.Logger.FuncStart(this.RefreshUi.name);
            yield this.SetUIStates(this.TabMan().GetUrlParts());
            this.FeedbackModuleBrowserState.RefreshUi();
            this.ModuleSelectSnapShot.SetContentState(this.LastKnownContentState);
            this.ModuleSelectSnapShot.RefreshUi();
            this.SettingsModule.RefreshUi();
            let currentWindowType = this.TabMan().GetWindowType();
            let currSelSnapshot = this.UiMan().ModuleSelectSnapShot.GetSelectSnapshotId();
            let guidHelper = this.AllAgents.HelperAgent.GuidHelper;
            this.ButtonStateManager.RefreshUi(currentWindowType, currSelSnapshot, guidHelper, this.LastKnownContentState);
            this.__drawCorrectNicknameInUI(this.LastKnownContentState.SnapShotsMany.CurrentSnapShots);
            this.AllAgents.Logger.FuncEnd(this.RefreshUi.name);
        });
    }
    ShowDebugDataOneWindow() {
        this.AllAgents.Logger.FuncStart('ShowDebugDataOneWindow');
        var toReturn = [];
        for (var kdx = 0; kdx < toReturn.length; kdx++) {
            this.AllAgents.Logger.Log(toReturn[kdx]);
        }
        this.AllAgents.Logger.FuncEnd('ShowDebugDataOneWindow');
        return toReturn;
    }
    __drawCorrectNicknameInUI(snapShots) {
        this.AllAgents.Logger.FuncStart(this.__drawCorrectNicknameInUI.name);
        var targetId = this.UiMan().ModuleSelectSnapShot.GetSelectSnapshotId();
        if (targetId) {
            this.AllAgents.Logger.Log('targetId : ' + targetId.AsString);
            var storageValues = snapShots;
            var storageMatch;
            for (var idx = 0; idx < storageValues.length; idx++) {
                var candidate = storageValues[idx];
                if (candidate.Id.AsString === this.UiMan().ModuleSelectSnapShot.GetSelectSnapshotId().AsString) {
                    storageMatch = candidate;
                    break;
                }
            }
            if (storageMatch) {
                var inputElem = window.document.getElementById(PopConst.Const.ElemId.InputNickname);
                if (inputElem) {
                    inputElem.value = storageMatch.NickName;
                }
            }
        }
        this.AllAgents.Logger.FuncEnd(this.__drawCorrectNicknameInUI.name);
    }
    GetValueInNickname() {
        var toReturn = '';
        toReturn = window.document.getElementById(PopConst.Const.ElemId.InputNickname).value;
        return toReturn;
    }
    GetButtonByIdOrSelector(targetId) {
        var toReturn = document.querySelector(targetId);
        if (!toReturn) {
            toReturn = document.querySelector('[id=' + targetId + ']');
        }
        return toReturn;
    }
    AssignOnCheckedEvent(targetId, handler) {
        var targetElem = document.getElementById(targetId);
        if (!targetElem) {
            this.AllAgents.Logger.ErrorAndThrow(this.AssignOnClickEvent.name, 'No Id: ' + targetId);
        }
        else {
            targetElem.addEventListener('checked', (evt) => { handler(evt); });
        }
    }
    AssignOnClickEvent(targetId, handler) {
        var targetElem = this.GetButtonByIdOrSelector(targetId);
        if (!targetElem) {
            this.AllAgents.Logger.ErrorAndThrow(this.AssignOnClickEvent.name, 'No Id: ' + targetId);
        }
        else {
            var popHub = this.PopHub;
            targetElem.addEventListener('click', (evt) => { handler(evt, popHub); });
        }
    }
    AssignOnClickEventFromCmd(command, handler) {
        if (command && command.Command !== MenuCommand.Unknown) {
            this.AssignOnClickEvent(command.ButtonSelector, handler);
        }
    }
    AssignDblClickEvent(selector, handler) {
        var targetElem = document.querySelector(selector);
        if (!targetElem) {
            this.AllAgents.Logger.ErrorAndThrow(this.AssignOnClickEvent.name, 'No Id: ' + selector);
        }
        else {
            targetElem.ondblclick = (evt) => { handler(evt); };
        }
    }
    PopulateSnapShotsAuto() {
    }
    PopulateSnapShotsNotAuto() {
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/Managers/PopUpHub.js
var PopUpHub_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};











class PopUpHub_PopUpHub {
    constructor(allAgents) {
        allAgents.Logger.InstantiateStart(PopUpHub_PopUpHub.name);
        this._allAgents = allAgents;
        this.EventMan = new EventManager_EventManager(this, this._allAgents);
        this.TabMan = new TabManager_TabManager(this, this._allAgents);
        this.Helpers = new Helpers_HelperAgent(allAgents.Logger);
        this.UiMan = new UiManager_UiManager(this, this._allAgents);
        let FeedbackModuleMsg = new FeedbackModuleMessages_FeedbackModuleMessages(PopConst.Const.Selector.HS.FeedbackMessages, this._allAgents.Logger);
        let PopUpMessageBroker = new PopUpMessagesBroker_PopUpMessagesBroker(this._allAgents.Logger, FeedbackModuleMsg);
        this.MessageMan = new MessageManager_MessageManager(this, this._allAgents, PopUpMessageBroker);
        this.BrowserMan = new BrowserManager_BrowserManager(this, this._allAgents);
        this._allAgents.Logger.InstantiateEnd(PopUpHub_PopUpHub.name);
    }
    InitPopUpHub() {
        return PopUpHub_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => PopUpHub_awaiter(this, void 0, void 0, function* () {
                this._allAgents.Logger.FuncStart(this.InitPopUpHub.name);
                let logToConsolesetting = yield this._allAgents.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.LogToConsole);
                if (logToConsolesetting) {
                    yield this._allAgents.Logger.Init(this._allAgents.SettingsAgent.ValueAsBool(logToConsolesetting));
                }
                else {
                    yield this._allAgents.Logger.Init(SharedConst.Const.Settings.Defaults.LogToConsole);
                }
                yield this.TabMan.InitTabManager()
                    .then(() => this.EventMan.InitEventManager())
                    .then(() => this.UiMan.InitUiManager())
                    .then(() => this.MessageMan.InitMessageManager())
                    .then(() => resolve())
                    .catch((err) => reject(err));
                this._allAgents.Logger.FuncEnd(this.InitPopUpHub.name);
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/SettingFlavor.js
var SettingFlavor;
(function (SettingFlavor) {
    SettingFlavor[SettingFlavor["unknown"] = 0] = "unknown";
    SettingFlavor[SettingFlavor["PopUp"] = 1] = "PopUp";
    SettingFlavor[SettingFlavor["ContentAndPopUpStoredInPopUp"] = 2] = "ContentAndPopUpStoredInPopUp";
    SettingFlavor[SettingFlavor["ContentAndPopUpStoredInEach"] = 3] = "ContentAndPopUpStoredInEach";
    SettingFlavor[SettingFlavor["ContentOnly"] = 4] = "ContentOnly";
})(SettingFlavor || (SettingFlavor = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/SettingsAgent.js
var SettingsAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class SettingsAgent_SettingsAgent {
    constructor(logger, repoAgent) {
        this.SettingsAr = [];
        this.Logger = logger;
        this.RepoAgent = repoAgent;
    }
    SetContentSettings(currentContentPrefs) {
        this.SettingsAr = currentContentPrefs;
    }
    InitSettingsAgent(allDefaultSettings) {
        return SettingsAgent_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => SettingsAgent_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.InitSettingsAgent.name, allDefaultSettings.length);
                this.SettingsAr = allDefaultSettings;
                yield this.HarvestGenericSettingsFromStorage()
                    .then(() => resolve())
                    .catch((err) => reject(err));
                this.Logger.FuncEnd(this.InitSettingsAgent.name);
            }));
        });
    }
    ReadGenericSettings() {
        return SettingsAgent_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => SettingsAgent_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.ReadGenericSettings.name);
                let toReturn = [];
                yield this.RepoAgent.ReadDataOfKey(PopConst.Const.Storage.KeyGenericSettings)
                    .then((storedValue) => {
                    if (storedValue) {
                        this.Logger.Log('storedValue NOT null');
                        toReturn = JSON.parse(storedValue.toString());
                    }
                    else {
                        this.Logger.Log('storedValue YES null');
                        toReturn = null;
                    }
                })
                    .then(() => resolve(toReturn));
                this.Logger.FuncEnd(this.ReadGenericSettings.name);
            }));
        });
    }
    UpdateSettingValuesFromStorage(foundSettings) {
        this.Logger.FuncStart(this.UpdateSettingValuesFromStorage.name);
        try {
            for (var idx = 0; idx < foundSettings.length; idx++) {
                let storageSetting = foundSettings[idx];
                let matchingSetting = this.GetByKey(storageSetting.SettingKey);
                if (matchingSetting) {
                    matchingSetting.ValueAsObj = storageSetting.ValueAsObj;
                }
                else {
                    this.Logger.ErrorAndContinue(this.UpdateSettingValuesFromStorage.name, 'matching setting not found ' + StaticHelpers_StaticHelpers.SettingKeyAsString(storageSetting.SettingKey));
                }
            }
        }
        catch (err) {
            this.Logger.ErrorAndThrow(this.UpdateSettingValuesFromStorage.name, err);
        }
        this.Logger.FuncEnd(this.UpdateSettingValuesFromStorage.name);
    }
    HarvestGenericSettingsFromStorage() {
        return SettingsAgent_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => SettingsAgent_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.HarvestGenericSettingsFromStorage.name);
                let foundSettings;
                yield this.ReadGenericSettings()
                    .then((result) => {
                    foundSettings = result;
                })
                    .then(() => {
                    if (foundSettings) {
                        this.UpdateSettingValuesFromStorage(foundSettings);
                    }
                    else {
                        this.Logger.Log('No settings found');
                    }
                })
                    .then(() => resolve())
                    .catch((err) => reject(err));
                this.Logger.FuncEnd(this.HarvestGenericSettingsFromStorage.name);
            }));
        });
    }
    ValueAsInteger(setting) {
        let toReturn = 0;
        if (setting) {
            toReturn = setting.ValueAsObj;
        }
        return toReturn;
    }
    GetOnlyContentPrefs() {
        let toReturn = [];
        for (var idx = 0; idx < this.SettingsAr.length; idx++) {
            let candidate = this.SettingsAr[idx];
            if ((candidate.SettingFlavor === SettingFlavor.ContentAndPopUpStoredInPopUp)
                ||
                    (candidate.SettingFlavor === SettingFlavor.ContentOnly)) {
                toReturn.push(candidate);
            }
        }
        return toReturn;
    }
    SettingChanged(SettingKey, valueAsObj) {
        this.Logger.Log(StaticHelpers_StaticHelpers.SettingKeyAsString(SettingKey));
        this.Logger.LogVal('valueAsObj', valueAsObj.toString());
        this.SetByKey(SettingKey, valueAsObj);
    }
    GetByKey(settingKey) {
        this.Logger.FuncStart(this.GetByKey.name, StaticHelpers_StaticHelpers.SettingKeyAsString(settingKey));
        var toReturn = null;
        for (var idx = 0; idx < this.SettingsAr.length; idx++) {
            if (this.SettingsAr[idx].SettingKey === settingKey) {
                toReturn = this.SettingsAr[idx];
                break;
            }
        }
        if (!toReturn) {
            this.Logger.Log('Setting not found ' + StaticHelpers_StaticHelpers.SettingKeyAsString(settingKey));
        }
        this.Logger.FuncEnd(this.GetByKey.name);
        return toReturn;
    }
    SetByKey(settingKey, value) {
        this.Logger.FuncStart(this.SetByKey.name, StaticHelpers_StaticHelpers.SettingKeyAsString(settingKey));
        this.Logger.LogAsJsonPretty('value', value);
        let foundSetting = this.GetByKey(settingKey);
        if (foundSetting) {
            foundSetting.ValueAsObj = value;
            this.WriteAllSettingValuesToStorage();
        }
        else {
            this.Logger.ErrorAndThrow(this.SetByKey.name, 'setting match not found');
        }
        this.Logger.FuncEnd(this.SetByKey.name, StaticHelpers_StaticHelpers.SettingKeyAsString(settingKey));
    }
    WriteAllSettingValuesToStorage() {
        this.Logger.FuncStart(this.WriteAllSettingValuesToStorage.name);
        let settingValues = [];
        for (var udx = 0; udx < this.SettingsAr.length; udx++) {
            if (this.SettingsAr[udx].ValueAsObj !== null) {
                settingValues.push({
                    SettingKey: this.SettingsAr[udx].SettingKey,
                    ValueAsObj: this.SettingsAr[udx].ValueAsObj,
                    SettingKeyFriendly: StaticHelpers_StaticHelpers.SettingKeyAsString(this.SettingsAr[udx].SettingKey)
                });
            }
        }
        this.RepoAgent.WriteGenericSettings(settingValues);
        this.Logger.FuncEnd(this.WriteAllSettingValuesToStorage.name);
    }
    ValueAsBool(setting) {
        let toReturn = false;
        if (setting) {
            toReturn = setting.ValueAsObj;
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LoggerAgent.js
var LoggerAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class LoggerAgent_LoggerAgent {
    constructor() {
        this.LogHasBeenInit = false;
        this.ErrorStack = [];
        this.LogPreInitBuffer = [];
        this.__debugTextChangedCallbacks = [];
        this.__allLogWriters = [];
        this.debugPrefix = '\t\t';
        this.__callDepth = -1;
        console.log('default: ' + SharedConst.Const.Settings.Defaults.LogToConsole);
        this.LogToConsoleEnabled = SharedConst.Const.Settings.Defaults.LogToConsole;
        this.LogToStorageEnabled = SharedConst.Const.Settings.Defaults.LogToStorage;
        this.LogHasBeenInit = false;
        var dateobj = new Date();
        function pad(n) { return n < 10 ? "0" + n : n; }
        var result = pad(dateobj.getDate()) + "/" + pad(dateobj.getMonth() + 1) + "/" + dateobj.getFullYear() + " " + pad(dateobj.getHours()) + ":" + pad(dateobj.getMinutes());
        this.LogVal('TimeStamp', result);
    }
    Init(val) {
        return LoggerAgent_awaiter(this, void 0, void 0, function* () {
            this.LogToConsoleEnabled = val;
            this.LogHasBeenInit = true;
            if (this.LogToConsoleEnabled) {
                var iterCheckMax = 1000;
                this.LogVal('TimeStamp B', Date.now());
                while (this.LogPreInitBuffer.length > 0 && iterCheckMax > 0) {
                    iterCheckMax--;
                    this.Log(this.LogPreInitBuffer.shift());
                }
            }
        });
    }
    AddWriter(writter) {
        this.__allLogWriters.push(writter);
    }
    SectionMarker(sectionTag) {
        this.Log("");
        this.Log("======================= " + sectionTag + " =======================");
        this.Log("");
    }
    SetEnabled(newValue) {
        this.LogToConsoleEnabled = newValue;
        console.log('Logging set to: ' + newValue);
    }
    EnabledStatus() {
        return this.LogToConsoleEnabled;
    }
    DebugIdataPopUpSettings(toReturn) {
        this.LogVal('Settings', JSON.stringify(toReturn));
    }
    DebugWindow(window) {
        if (this.IsNotNullOrUndefinedBool('window', window)) {
        }
    }
    ThrowIfNullOrUndefined(title, subject) {
        if (!this.IsNotNullOrUndefinedBool(title, subject)) {
            throw 'Failed';
        }
    }
    IsNotNullOrUndefinedBool(title, subject) {
        var toReturn = false;
        if (subject) {
            if ((typeof subject) === 'undefined') {
                this.LogVal(title + ' Is Not Undefined', '!!! false !!!');
            }
            else {
                this.LogVal(title + ' Is Not Null', 'true');
                toReturn = true;
            }
        }
        else {
            this.LogVal(title + ' Is Not Null', '!!! false !!!');
        }
        return toReturn;
    }
    DebugIGuid(id) {
        if (this.IsNotNullOrUndefinedBool('IGuid', id)) {
            this.LogVal('asShort', id.AsShort);
            this.LogVal('asString', id.AsString);
        }
    }
    DebugIDataOneDoc(dataOneDoc) {
        this.FuncStart(this.DebugIDataOneDoc.name);
        if (dataOneDoc) {
            if (dataOneDoc.ContentDoc) {
                this.LogVal(this.debugPrefix + 'dataOneDoc.Document.readyState:', dataOneDoc.ContentDoc.readyState);
                if (dataOneDoc.ContentDoc.location) {
                    this.LogVal(this.debugPrefix + 'targetDoc.location.href', dataOneDoc.ContentDoc.location.href);
                }
                else {
                    this.Log(this.debugPrefix + 'dataOneDoc.Document.location - does not exist');
                }
            }
            else {
                this.Log(this.debugPrefix + 'dataOneDoc.Document - does not exist');
            }
        }
        else {
            this.ErrorAndThrow(this.DebugIDataOneDoc.name, 'no targetDoc');
        }
        this.Log('');
        this.FuncEnd(this.DebugIDataOneDoc.name);
    }
    HndlrClearDebugText(self, verify = false) {
        this.FuncStart(this.HndlrClearDebugText.name);
        var proceed = true;
        if (verify) {
            proceed = confirm('Clear Debug TextArea ?');
        }
        if (proceed) {
            var newText = '--- Debug Text Reset ---';
            self.__triggerAllDebugTextChangedCallbacks({
                NewText: newText,
                Append: false
            });
        }
        this.FuncEnd(this.HndlrClearDebugText.name);
    }
    MarkerA() {
        this.__markerRaw('A');
    }
    MarkerB() {
        this.__markerRaw('B');
    }
    MarkerC() {
        this.__markerRaw('C');
    }
    MarkerD() {
        this.__markerRaw('D');
    }
    MarkerE() { this.__markerRaw('E'); }
    MarkerF() { this.__markerRaw('F'); }
    __markerRaw(marker) {
        this.Log('Marker ' + marker);
    }
    LogAsJsonPretty(texValName, jsonObj) {
        this.LogVal(texValName, JSON.stringify(jsonObj, null, 1));
    }
    LogVal(textValName, textVal) {
        if (typeof textVal === 'undefined') {
            textVal = '{undefined}';
        }
        else if (textVal === null) {
            textVal = '{null}';
        }
        else {
            var asGuid = textVal;
            if (asGuid.Type === 'IGuid') {
                textVal = asGuid.AsString;
            }
        }
        textVal = textVal.toString();
        textValName = StaticHelpers_StaticHelpers.BufferString(textValName.toString(), 50, BufferChar.space, BufferDirection.right);
        const debugPrefix = '  ~~~  ';
        this.Log(debugPrefix + textValName + ' : ' + textVal);
    }
    Log(text, optionalValue = '', hasPrefix = false) {
        return LoggerAgent_awaiter(this, void 0, void 0, function* () {
            if (this.LogToConsoleEnabled || !this.LogHasBeenInit) {
                var indent = '  ';
                for (var idx = 0; idx < this.__callDepth; idx++) {
                    text = indent + text;
                }
                var prefixLength = 3;
                if (!hasPrefix) {
                    for (var idx = 0; idx < prefixLength; idx++) {
                        text = ' ' + text;
                    }
                }
                this.__triggerAllDebugTextChangedCallbacks({
                    NewText: text,
                    Append: true
                });
                this.__WriteToAllWriters(text);
                if (this.LogToConsoleEnabled) {
                }
                else if (!this.LogHasBeenInit) {
                    this.LogPreInitBuffer.push(text);
                }
            }
        });
    }
    DebugDataOneIframe(dataOneIframe) {
        this.FuncStart(this.DebugDataOneIframe.name);
        this.Log('dataOneIframe : ' + this.IsNullOrUndefined(dataOneIframe));
        if (dataOneIframe) {
            this.Log('dataOneIframe.Nickname : ' + dataOneIframe.Nickname);
            this.Log('dataOneIframe.IframeElem: \t' + this.IsNullOrUndefined(dataOneIframe.IframeElem));
            if (dataOneIframe.IframeElem) {
                this.Log('dataOneIframe.id: \t' + this.IsNullOrUndefined(dataOneIframe.IframeElem.id));
            }
            this.Log('dataOneIframe.ContentDoc: \t' + this.IsNullOrUndefined(dataOneIframe.ContentDoc));
            this.DebugIDataOneDoc(dataOneIframe.ContentDoc);
        }
        this.FuncEnd(this.DebugDataOneIframe.name);
    }
    DebugPayloadDataFromPopUp(data) {
        if (this.IsNotNullOrUndefinedBool('PayloadDataFromPopUp', data)) {
            this.LogVal('idOfSelect', data.IdOfSelect);
            this.DebugIGuid(data.IdOfSelect);
            this.DebugIDataPayloadSnapShot(data.SnapShotSettings);
        }
    }
    DebugIDataPayloadSnapShot(snapShotSettings) {
        if (this.IsNotNullOrUndefinedBool('IDataPayloadSnapShot', snapShotSettings)) {
            this.LogVal('Flavor', StaticHelpers_StaticHelpers.FlavorAsString(snapShotSettings.Flavor));
            this.LogVal('Nickname', snapShotSettings.SnapShotNewNickname);
        }
    }
    DebugObjState(state) {
        if (this.IsNotNullOrUndefinedBool('State', state)) {
            if (this.IsNotNullOrUndefinedBool('CurrentSnapShots', state.SnapShotsMany.CurrentSnapShots)) {
                this.LogVal('Snapshot count', state.SnapShotsMany.CurrentSnapShots.length);
            }
        }
    }
    PromiseBucketDebug(promiseBucket, friendlyName) {
        this.FuncStart(this.PromiseBucketDebug.name, friendlyName);
        this.Log('promiseBucket : ' + this.IsNullOrUndefined(promiseBucket));
        if (promiseBucket && typeof (promiseBucket) !== 'undefined') {
            this.Log('promiseBucket.IFramesbefore: ' + this.IsNullOrUndefined(promiseBucket.IFramesbefore));
            this.Log('promiseBucket.oneTreeState: ' + this.IsNullOrUndefined(promiseBucket.oneTreeState));
        }
        this.FuncEnd(this.PromiseBucketDebug.name, friendlyName);
    }
    __WriteToAllWriters(text) {
        for (var idx = 0; idx < this.__allLogWriters.length; idx++) {
            var oneWriter = this.__allLogWriters[idx];
            oneWriter.WriteText(text);
        }
    }
    __triggerAllDebugTextChangedCallbacks(data) {
        for (var idx = 0; idx < this.__debugTextChangedCallbacks.length; idx++) {
            var oneCallback = this.__debugTextChangedCallbacks[idx];
            oneCallback.Func(oneCallback.Caller, data);
        }
    }
    CtorName(ctorName) {
        this.Log('Constructor: ' + ctorName);
    }
    FuncStart(textOrFunc, optionalValue) {
        textOrFunc = 's' + ' ' + this.__callDepth + ') ' + textOrFunc;
        if (!optionalValue) {
            optionalValue = '';
        }
        else {
            optionalValue = optionalValue.toString();
        }
        if (optionalValue.length > 0) {
            textOrFunc = textOrFunc + ' : ' + optionalValue;
        }
        this.Log(textOrFunc, '', true);
        this.__callDepth++;
        if (this.__callDepth > 10) {
            this.__callDepth = 10;
        }
    }
    InstantiateStart(text) {
        this.FuncStart("[Instantiate] " + text);
    }
    InstantiateEnd(text) {
        this.FuncEnd("[Instantiate] " + text);
    }
    FuncEnd(text, optionalValueInput) {
        this.__callDepth--;
        if (this.__callDepth < 0) {
            this.__callDepth = 0;
        }
        text = 'e' + ' ' + this.__callDepth + ') ' + text;
        if (!optionalValueInput) {
            optionalValueInput = '';
        }
        var optionalValue = optionalValueInput.toString();
        if (optionalValue.length > 0) {
            text = text + ' : ' + optionalValue;
        }
        this.Log(text, optionalValue, true);
    }
    ErrorAndThrow(container, text) {
        this.ErrorAndContinue(container, text);
        throw container + " " + text;
    }
    ErrorAndContinue(container, text) {
        if (!container) {
            container = 'unknown';
        }
        if (!text) {
            text = 'unknown';
        }
        this.ErrorStack.push({
            ContainerFunc: container,
            ErrorString: text
        });
        this.Log('');
        this.Log('\t\t** ERROR ** ' + container);
        this.Log('');
        this.Log('\t\t  ' + text);
        this.Log('');
        this.Log('\t\t** ERROR ** ' + container);
        this.Log('');
    }
    NotNullCheck(title, value) {
        if (typeof value === 'undefined') {
            this.LogVal(title, 'Is Undefined');
        }
        else if (!value) {
            this.LogVal(title, 'Is Null');
        }
        else {
            this.LogVal(title, 'Is Not Null');
        }
    }
    IsNullOrUndefined(subject) {
        var toReturn = '{unknown}';
        if (subject) {
            if ((typeof subject) === 'undefined') {
                toReturn = 'Is Undefined';
            }
            else {
                toReturn = 'Not Null';
            }
        }
        else {
            toReturn = 'Is Null';
        }
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/RepositoryAgent/RepoAgent.js
var RepoAgent_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class RepoAgent_RepoAgent {
    constructor(loggerAgent) {
        this.Logger = loggerAgent;
    }
    Init() {
        this.Logger.FuncStart(RepoAgent_RepoAgent.name, this.Init.name);
        this.Logger.FuncEnd(RepoAgent_RepoAgent.name, this.Init.name);
    }
    GetBulkLocalStorageByKeyPrefix(targetPrefix) {
        return new Promise((resolve, reject) => {
            var toReturn = [];
            try {
                var storageLength = window.localStorage.length;
                for (var idx = 0; idx < storageLength; idx++) {
                    var candidate = {
                        data: '',
                        key: '',
                    };
                    candidate.key = window.localStorage.key(idx);
                    if (candidate.key.startsWith(targetPrefix)) {
                        candidate.data = window.localStorage.getItem(candidate.key);
                        if (typeof candidate != 'undefined' && typeof candidate.data != 'undefined' && candidate != null && candidate.data != null) {
                            toReturn.push(candidate);
                        }
                    }
                }
                resolve(toReturn);
            }
            catch (ex) {
                reject(ex);
            }
        });
    }
    ReadDataOfKey(targetKey) {
        return RepoAgent_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => RepoAgent_awaiter(this, void 0, void 0, function* () {
                this.Logger.FuncStart(this.ReadDataOfKey.name);
                let toReturn = null;
                this.Logger.LogVal('target key ', targetKey);
                toReturn = window.localStorage.getItem(targetKey);
                if (toReturn) {
                    resolve(toReturn);
                }
                else {
                    this.Logger.ErrorAndThrow(this.ReadDataOfKey.name, "No value returned from storage");
                }
                this.Logger.FuncEnd(this.ReadDataOfKey.name);
            }));
        });
    }
    WriteGenericSettings(settingsToWrite) {
        this.Logger.FuncStart(this.WriteGenericSettings.name);
        window.localStorage.setItem(PopConst.Const.Storage.KeyGenericSettings, JSON.stringify(settingsToWrite));
        this.Logger.FuncEnd(this.WriteGenericSettings.name);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/AllAgents.js
class AllAgents {
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/OneGenericSetting.js
class OneGenericSetting {
    constructor(settingKey, dataType, valueAsObj, uiSelector, defaultValue, settingFlavor, friendly, enabled, hasUi = true) {
        this.SettingKey = settingKey;
        this.DataType = dataType;
        this.ValueAsObj = valueAsObj;
        this.UiSelector = uiSelector;
        this.DefaultValue = defaultValue;
        this.SettingFlavor = settingFlavor;
        this.Friendly = friendly;
        this.HasUi = hasUi;
        this.Enabled = enabled;
    }
    ValueAsInt() {
        var toReturn = Number.MIN_SAFE_INTEGER;
        if (this.ValueAsObj !== undefined && this.ValueAsObj !== null) {
            toReturn = parseInt(this.ValueAsObj.toString());
        }
        return toReturn;
    }
    ValueAsBool() {
        let toReturn = this.DefaultValue;
        if (this.ValueAsObj !== undefined && this.ValueAsObj !== null) {
            toReturn = this.ValueAsObj;
        }
        else {
            toReturn = this.DefaultValue;
        }
        console.log('ValueAsObj');
        console.log(this.ValueAsObj);
        console.log('toReturn : ' + toReturn);
        return toReturn;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Enums/Enabled.js
var Enabled;
(function (Enabled) {
    Enabled[Enabled["Unknown"] = 0] = "Unknown";
    Enabled[Enabled["Enabled"] = 1] = "Enabled";
    Enabled[Enabled["Disabled"] = 2] = "Disabled";
})(Enabled || (Enabled = {}));

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/SettingsAgent/ConstAllSettings.js








class ConstAllSettings_ConstAllSettings {
    constructor() {
        this.AllSettings = [
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.LastUsedLogToStorageKey, SettingType.Number, 0, null, 0, SettingFlavor.ContentAndPopUpStoredInEach, 'Rolling Prefix key for log to storage', Enabled.Enabled, false),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.LogToConsole, SettingType.BoolCheckBox, true, PopConst.Const.Selector.HS.LogToConsole, SharedConst.Const.Settings.Defaults.LogToConsole, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Log to Console', Enabled.Enabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.UseCompactCss, SettingType.BoolCheckBox, false, PopConst.Const.Selector.HS.SettingUseCompactCss, SharedConst.Const.Settings.Defaults.UseCompactCss, SettingFlavor.ContentOnly, 'Use Compact CSS', Enabled.Disabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.AutoSnapshotBeforeWindowChange, SettingType.BoolCheckBox, null, PopConst.Const.Selector.HS.AutoSnapshotBeforeWindowChange, PopConst.Const.Storage.Defaults.bool.AutoSnapshotBeforeWindowChange, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Save Snapshot on HindSite Window Change', Enabled.Disabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.AutoLogin, SettingType.BoolCheckBox, null, PopConst.Const.Selector.HS.iCBoxdSettingsAutoLogin, PopConst.Const.Storage.Defaults.bool.AutoLogin, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Login', Enabled.Disabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.LgndPopUpLog, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndPopUpLog, PopConst.Const.Settings.Defaults.LgndPopUpLog, SettingFlavor.PopUp, 'Pop Up Log', Enabled.Enabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.LgndForeSite, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndForeSite, PopConst.Const.Settings.Defaults.LgndForeSite, SettingFlavor.PopUp, 'Fore&bull;Site', Enabled.Enabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.LgndHindSite, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndHindSite, PopConst.Const.Settings.Defaults.LgndHindSite, SettingFlavor.PopUp, 'Hind&bull;Site', Enabled.Enabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.LgndSettings, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndSettings, PopConst.Const.Settings.Defaults.LgndSettings, SettingFlavor.PopUp, 'Settings', Enabled.Enabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.LgndMessages, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndMessages, PopConst.Const.Settings.Defaults.LgndMessages, SettingFlavor.PopUp, 'Messages', Enabled.Enabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.LgndPopUpState, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndPopUpState, PopConst.Const.Settings.Defaults.LgndPopUpState, SettingFlavor.PopUp, 'Pop Up State', Enabled.Enabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.LgndContentState, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndContentState, PopConst.Const.Settings.Defaults.LgndContentState, SettingFlavor.PopUp, 'Content State', Enabled.Enabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.LgndBrowserState, SettingType.Accordion, null, PopConst.Const.Selector.Legend.LgndBrowserState, PopConst.Const.Settings.Defaults.LgndBrowserState, SettingFlavor.PopUp, 'Browser State', Enabled.Enabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.MaxAutoSaveCount, SettingType.Number, null, PopConst.Const.Selector.HS.SettingAutoSaveMaxCount, PopConst.Const.Numbers.MaxAutoSaveCount, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Save Max Count', Enabled.Disabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.AutoSaveIntervalMin, SettingType.Number, null, PopConst.Const.Selector.HS.SettingAutoSaveInterval, PopConst.Const.Numbers.AutoSaveIntervalMin, SettingFlavor.ContentAndPopUpStoredInPopUp, 'Auto Save Interval (Min) - 0 to disable', Enabled.Disabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.DebugKeepDialogOpen, SettingType.BoolCheckBox, null, PopConst.Const.Selector.HS.SettingDebugKeepDialogOpen, PopConst.Const.Settings.Defaults.DebugKeepDialogOpen, SettingFlavor.PopUp, '(Debug) Keep Dialog Open', Enabled.Enabled),
            new OneGenericSetting(_3xxx_SettingKey_SettingKey.AutoSaveRetainDays, SettingType.Number, null, PopConst.Const.Selector.HS.SettingAutoSaveSnapshotRetainDays, ContentConst.Const.DefaultMaxAutoSaveAgeDays, SettingFlavor.ContentOnly, 'Days to Retain Auto Snap Shots', Enabled.Enabled)
        ];
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Drones/RollingLogIdDrone/RollingLogIdDrone.js

class RollingLogIdDrone_RollingLogIdDrone {
    constructor(settingsAgent, loggerAgent) {
        this.maxKey = 5;
        this.minKey = 1;
        this.Logger = loggerAgent;
        this.Logger.InstantiateStart(RollingLogIdDrone_RollingLogIdDrone.name);
        this.SettingsAgent = settingsAgent;
        this.Logger.FuncEnd(RollingLogIdDrone_RollingLogIdDrone.name);
    }
    GetNextLogId() {
        let nextKeyInt = this.minKey;
        let nextKeyToReturn;
        var result = this.GetLastUsedLogId().ValueAsInt();
        nextKeyInt = result + 1;
        if (nextKeyInt > this.maxKey) {
            nextKeyInt = this.minKey;
        }
        this.SettingsAgent.SetByKey(_3xxx_SettingKey_SettingKey.LastUsedLogToStorageKey, nextKeyInt.toString());
        nextKeyToReturn = nextKeyInt.toString();
        return nextKeyToReturn;
    }
    GetLastUsedLogId() {
        let toReturn = 0;
        var lastUsedLogIdSetting = this.SettingsAgent.GetByKey(_3xxx_SettingKey_SettingKey.LastUsedLogToStorageKey);
        return lastUsedLogIdSetting;
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LoggerConsoleWriter.js
class LoggerConsoleWriter {
    WriteText(text) {
        console.log(text);
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/Shared/scripts/Agents/Agents/LoggerAgent/LoggerStorageWriter.js
var LoggerStorageWriter_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class LoggerStorageWriter {
    constructor() {
        this.CurrentStorageLogKey = '0';
        this.LogToStoragePrefix = 'Hindsite.Log.';
        this.StorageLogCombined = "";
    }
    WriteText(text) {
    }
    SetLogToStorageKey(logToStorageIndex) {
        this.CurrentStorageLogKey = this.LogToStoragePrefix + logToStorageIndex;
    }
    WriteLogToStorage(logMessage) {
        return LoggerStorageWriter_awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => LoggerStorageWriter_awaiter(this, void 0, void 0, function* () {
                this.StorageLogCombined += "|||" + JSON.stringify(logMessage);
                if (this.CurrentStorageLogKey) {
                    window.localStorage.setItem(this.CurrentStorageLogKey, this.StorageLogCombined);
                }
            }));
        });
    }
}

// CONCATENATED MODULE: ./AutoBuild/TsTranspiled/PopUp/scripts/zPopUpEntryPoint.js
var zPopUpEntryPoint_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};










function main() {
    return zPopUpEntryPoint_awaiter(this, void 0, void 0, function* () {
        var allAgents = new AllAgents();
        allAgents.Logger = new LoggerAgent_LoggerAgent();
        allAgents.Logger.AddWriter(new LoggerConsoleWriter());
        allAgents.RepoAgent = new RepoAgent_RepoAgent(allAgents.Logger);
        allAgents.SettingsAgent = new SettingsAgent_SettingsAgent(allAgents.Logger, allAgents.RepoAgent);
        allAgents.HelperAgent = new Helpers_HelperAgent(allAgents.Logger);
        var allSettings = new ConstAllSettings_ConstAllSettings().AllSettings;
        yield allAgents.SettingsAgent.InitSettingsAgent(allSettings)
            .then(() => {
            var RollingLogId = new RollingLogIdDrone_RollingLogIdDrone(allAgents.SettingsAgent, allAgents.Logger);
            var nextLogId = RollingLogId.GetNextLogId();
            let storageLogWriter = new LoggerStorageWriter();
            storageLogWriter.SetLogToStorageKey(nextLogId);
        })
            .then(() => {
            let popUpHub = new PopUpHub_PopUpHub(allAgents);
            allAgents.Logger.SectionMarker('Begin Init');
            popUpHub.InitPopUpHub()
                .then(() => allAgents.Logger.Log('Init Successful'))
                .catch((err) => allAgents.Logger.ErrorAndContinue('Pop Up Entry Point Main', JSON.stringify(err)));
            allAgents.Logger.SectionMarker('End Init');
            allAgents.Logger.SectionMarker('Begin Standby');
        })
            .catch((err) => { throw (err); });
    });
}
main();


/***/ })
/******/ ]);